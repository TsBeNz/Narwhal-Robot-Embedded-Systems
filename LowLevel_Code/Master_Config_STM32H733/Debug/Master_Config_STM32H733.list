
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011124  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080113f4  080113f4  000213f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011444  08011444  00021444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801144c  0801144c  0002144c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011450  08011450  00021450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08011454  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000cf0  20000010  08011464  00030010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000d00  08011464  00030d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d765  00000000  00000000  0003003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005908  00000000  00000000  0006d7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c70  00000000  00000000  000730b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ab0  00000000  00000000  00074d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039152  00000000  00000000  000767d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029f2f  00000000  00000000  000af922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cbe9  00000000  00000000  000d9851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0024643a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007900  00000000  00000000  00246490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000010 	.word	0x20000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080113dc 	.word	0x080113dc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000014 	.word	0x20000014
 800030c:	080113dc 	.word	0x080113dc

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

float EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f85f 	bl	80006dc <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	89db      	ldrh	r3, [r3, #14]
 8000622:	ee07 3a90 	vmov	s15, r3
 8000626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000648 <EncPulse2Rad_Read+0x40>
 800062e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	edd3 7a07 	vldr	s15, [r3, #28]
 8000638:	ee77 7a67 	vsub.f32	s15, s14, s15
//	return (Enc->Position * 0.000383495f);
}
 800063c:	eeb0 0a67 	vmov.f32	s0, s15
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	39c90fd4 	.word	0x39c90fd4

0800064c <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,float offset) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6178      	str	r0, [r7, #20]
 8000654:	6139      	str	r1, [r7, #16]
 8000656:	60fa      	str	r2, [r7, #12]
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	ed87 0a01 	vstr	s0, [r7, #4]
	dev->hspiHandle = hspiHandle;
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	8c3a      	ldrh	r2, [r7, #32]
 8000674:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 8000676:	8c3b      	ldrh	r3, [r7, #32]
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f008 f97d 	bl	800897c <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2200      	movs	r2, #0
 8000686:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	2200      	movs	r2, #0
 800068c:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2200      	movs	r2, #0
 8000692:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2200      	movs	r2, #0
 8000698:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2200      	movs	r2, #0
 800069e:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2200      	movs	r2, #0
 80006a4:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2200      	movs	r2, #0
 80006aa:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2200      	movs	r2, #0
 80006b0:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2200      	movs	r2, #0
 80006b6:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2200      	movs	r2, #0
 80006bc:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006be:	edd7 7a01 	vldr	s15, [r7, #4]
 80006c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80006d8 <AS5047U_init+0x8c>
 80006c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	39c90fd4 	.word	0x39c90fd4

080006dc <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 80006e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80006ec:	81bb      	strh	r3, [r7, #12]
	uint8_t Buffer[2] = {};
 80006ee:	2300      	movs	r3, #0
 80006f0:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6898      	ldr	r0, [r3, #8]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	899b      	ldrh	r3, [r3, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	4619      	mov	r1, r3
 80006fe:	f008 f93d 	bl	800897c <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 200; i++);
 8000702:	2300      	movs	r3, #0
 8000704:	82fb      	strh	r3, [r7, #22]
 8000706:	e002      	b.n	800070e <AS5047U_Position_Highspeed_Read+0x32>
 8000708:	8afb      	ldrh	r3, [r7, #22]
 800070a:	3301      	adds	r3, #1
 800070c:	82fb      	strh	r3, [r7, #22]
 800070e:	8afb      	ldrh	r3, [r7, #22]
 8000710:	2bc8      	cmp	r3, #200	; 0xc8
 8000712:	d9f9      	bls.n	8000708 <AS5047U_Position_Highspeed_Read+0x2c>
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6818      	ldr	r0, [r3, #0]
 8000718:	f107 010c 	add.w	r1, r7, #12
 800071c:	2364      	movs	r3, #100	; 0x64
 800071e:	2202      	movs	r2, #2
 8000720:	f00b fb92 	bl	800be48 <HAL_SPI_Transmit>
	for (uint16_t i=0; i <= 200; i++);
 8000724:	2300      	movs	r3, #0
 8000726:	82bb      	strh	r3, [r7, #20]
 8000728:	e002      	b.n	8000730 <AS5047U_Position_Highspeed_Read+0x54>
 800072a:	8abb      	ldrh	r3, [r7, #20]
 800072c:	3301      	adds	r3, #1
 800072e:	82bb      	strh	r3, [r7, #20]
 8000730:	8abb      	ldrh	r3, [r7, #20]
 8000732:	2bc8      	cmp	r3, #200	; 0xc8
 8000734:	d9f9      	bls.n	800072a <AS5047U_Position_Highspeed_Read+0x4e>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	2201      	movs	r2, #1
 8000740:	4619      	mov	r1, r3
 8000742:	f008 f91b 	bl	800897c <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000746:	2300      	movs	r3, #0
 8000748:	827b      	strh	r3, [r7, #18]
 800074a:	e002      	b.n	8000752 <AS5047U_Position_Highspeed_Read+0x76>
 800074c:	8a7b      	ldrh	r3, [r7, #18]
 800074e:	3301      	adds	r3, #1
 8000750:	827b      	strh	r3, [r7, #18]
 8000752:	8a7b      	ldrh	r3, [r7, #18]
 8000754:	f240 2226 	movw	r2, #550	; 0x226
 8000758:	4293      	cmp	r3, r2
 800075a:	d9f7      	bls.n	800074c <AS5047U_Position_Highspeed_Read+0x70>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6898      	ldr	r0, [r3, #8]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	899b      	ldrh	r3, [r3, #12]
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	f008 f908 	bl	800897c <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 200; i++);
 800076c:	2300      	movs	r3, #0
 800076e:	823b      	strh	r3, [r7, #16]
 8000770:	e002      	b.n	8000778 <AS5047U_Position_Highspeed_Read+0x9c>
 8000772:	8a3b      	ldrh	r3, [r7, #16]
 8000774:	3301      	adds	r3, #1
 8000776:	823b      	strh	r3, [r7, #16]
 8000778:	8a3b      	ldrh	r3, [r7, #16]
 800077a:	2bc8      	cmp	r3, #200	; 0xc8
 800077c:	d9f9      	bls.n	8000772 <AS5047U_Position_Highspeed_Read+0x96>
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	f107 0108 	add.w	r1, r7, #8
 8000786:	2364      	movs	r3, #100	; 0x64
 8000788:	2202      	movs	r2, #2
 800078a:	f00b fd4f 	bl	800c22c <HAL_SPI_Receive>
	for (uint16_t i=0; i <= 200; i++);
 800078e:	2300      	movs	r3, #0
 8000790:	81fb      	strh	r3, [r7, #14]
 8000792:	e002      	b.n	800079a <AS5047U_Position_Highspeed_Read+0xbe>
 8000794:	89fb      	ldrh	r3, [r7, #14]
 8000796:	3301      	adds	r3, #1
 8000798:	81fb      	strh	r3, [r7, #14]
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	2bc8      	cmp	r3, #200	; 0xc8
 800079e:	d9f9      	bls.n	8000794 <AS5047U_Position_Highspeed_Read+0xb8>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6898      	ldr	r0, [r3, #8]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	899b      	ldrh	r3, [r3, #12]
 80007a8:	2201      	movs	r2, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	f008 f8e6 	bl	800897c <HAL_GPIO_WritePin>
	if (dir == 1){
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d111      	bne.n	80007da <AS5047U_Position_Highspeed_Read+0xfe>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 80007b6:	7a3b      	ldrb	r3, [r7, #8]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80007c0:	b21a      	sxth	r2, r3
 80007c2:	7a7b      	ldrb	r3, [r7, #9]
 80007c4:	b21b      	sxth	r3, r3
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b21b      	sxth	r3, r3
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80007d0:	4053      	eors	r3, r2
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	81da      	strh	r2, [r3, #14]
 80007d8:	e00c      	b.n	80007f4 <AS5047U_Position_Highspeed_Read+0x118>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80007da:	7a3b      	ldrb	r3, [r7, #8]
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	b21b      	sxth	r3, r3
 80007e0:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	7a7b      	ldrb	r3, [r7, #9]
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	89db      	ldrh	r3, [r3, #14]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3718      	adds	r7, #24
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2224      	movs	r2, #36	; 0x24
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f010 fddd 	bl	80113cc <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000812:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000814:	4a31      	ldr	r2, [pc, #196]	; (80008dc <MX_ADC3_Init+0xdc>)
 8000816:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000818:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <MX_ADC3_Init+0xd8>)
 800081a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800081e:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000820:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000826:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_ADC3_Init+0xd8>)
 800082e:	2204      	movs	r2, #4
 8000830:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000832:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000834:	2200      	movs	r2, #0
 8000836:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_ADC3_Init+0xd8>)
 800083a:	2200      	movs	r2, #0
 800083c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000840:	2201      	movs	r2, #1
 8000842:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <MX_ADC3_Init+0xd8>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000854:	2200      	movs	r2, #0
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_ADC3_Init+0xd8>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000860:	4b1d      	ldr	r3, [pc, #116]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000862:	2200      	movs	r2, #0
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000868:	2200      	movs	r2, #0
 800086a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <MX_ADC3_Init+0xd8>)
 800086e:	2200      	movs	r2, #0
 8000870:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000874:	2200      	movs	r2, #0
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_ADC3_Init+0xd8>)
 800087a:	2200      	movs	r2, #0
 800087c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000880:	4815      	ldr	r0, [pc, #84]	; (80008d8 <MX_ADC3_Init+0xd8>)
 8000882:	f003 fc35 	bl	80040f0 <HAL_ADC_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800088c:	f001 fc1a 	bl	80020c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_ADC3_Init+0xe0>)
 8000892:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000894:	2306      	movs	r3, #6
 8000896:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000898:	2306      	movs	r3, #6
 800089a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a2:	2304      	movs	r3, #4
 80008a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4619      	mov	r1, r3
 80008be:	4806      	ldr	r0, [pc, #24]	; (80008d8 <MX_ADC3_Init+0xd8>)
 80008c0:	f004 f9ba 	bl	8004c38 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008ca:	f001 fbfb 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	3728      	adds	r7, #40	; 0x28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2000003c 	.word	0x2000003c
 80008dc:	58026000 	.word	0x58026000
 80008e0:	c7520000 	.word	0xc7520000

080008e4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <HAL_ADC_MspInit+0x48>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d116      	bne.n	8000924 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_ADC_MspInit+0x4c>)
 80008f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <HAL_ADC_MspInit+0x4c>)
 80008fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_ADC_MspInit+0x4c>)
 8000908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	207f      	movs	r0, #127	; 0x7f
 800091a:	f005 fa32 	bl	8005d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800091e:	207f      	movs	r0, #127	; 0x7f
 8000920:	f005 fa49 	bl	8005db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	58026000 	.word	0x58026000
 8000930:	58024400 	.word	0x58024400

08000934 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	8b3a      	ldrh	r2, [r7, #24]
 8000958:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	b29a      	uxth	r2, r3
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000968:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4619      	mov	r1, r3
 8000974:	4610      	mov	r0, r2
 8000976:	f00c fb55 	bl	800d024 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2200      	movs	r2, #0
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <Step_Driver>:


void Step_Driver(SteperParameter *step, float f_driver) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	ed87 0a00 	vstr	s0, [r7]
	float abs_f_driver = fabs(f_driver);
 80009a4:	edd7 7a00 	vldr	s15, [r7]
 80009a8:	eef0 7ae7 	vabs.f32	s15, s15
 80009ac:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t reg_out;
	if (abs_f_driver <= 5) {
 80009b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80009b4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80009b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c0:	d80e      	bhi.n	80009e0 <Step_Driver+0x48>
		reg_out = 20000;
 80009c2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009c6:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = 20000;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f644 6220 	movw	r2, #20000	; 0x4e20
 80009d2:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2200      	movs	r2, #0
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
 80009de:	e033      	b.n	8000a48 <Step_Driver+0xb0>
	} else if (abs_f_driver < 25) {
 80009e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80009e4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80009e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f0:	d50f      	bpl.n	8000a12 <Step_Driver+0x7a>
		reg_out = 20000;
 80009f2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009f6:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	897a      	ldrh	r2, [r7, #10]
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000a02:	897b      	ldrh	r3, [r7, #10]
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a10:	e01a      	b.n	8000a48 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	89db      	ldrh	r3, [r3, #14]
 8000a16:	ee07 3a90 	vmov	s15, r3
 8000a1a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a2a:	ee17 3a90 	vmov	r3, s15
 8000a2e:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	897a      	ldrh	r2, [r7, #10]
 8000a38:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000a3a:	897b      	ldrh	r3, [r7, #10]
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000a48:	edd7 7a00 	vldr	s15, [r7]
 8000a4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a54:	db09      	blt.n	8000a6a <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6898      	ldr	r0, [r3, #8]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	8999      	ldrh	r1, [r3, #12]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7c1b      	ldrb	r3, [r3, #16]
 8000a62:	461a      	mov	r2, r3
 8000a64:	f007 ff8a 	bl	800897c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000a68:	e00b      	b.n	8000a82 <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6898      	ldr	r0, [r3, #8]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	8999      	ldrh	r1, [r3, #12]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7c1b      	ldrb	r3, [r3, #16]
 8000a76:	f083 0301 	eor.w	r3, r3, #1
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f007 ff7d 	bl	800897c <HAL_GPIO_WritePin>
}
 8000a82:	bf00      	nop
 8000a84:	3710      	adds	r7, #16
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8000a8c:	b480      	push	{r7}
 8000a8e:	b087      	sub	sp, #28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6178      	str	r0, [r7, #20]
 8000a94:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a98:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 8000a9c:	ed97 7b02 	vldr	d7, [r7, #8]
 8000aa0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	edc3 7a00 	vstr	s15, [r3]
	kalman->R = R; 			// Adjustable
 8000aaa:	ed97 7b00 	vldr	d7, [r7]
 8000aae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ab2:	697b      	ldr	r3, [r7, #20]
 8000ab4:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman->x1 = 0.0;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
	kalman->x2 = 0.0;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	f04f 0200 	mov.w	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
	kalman->p11 = 0.05;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4a08      	ldr	r2, [pc, #32]	; (8000aec <Kalman_init+0x60>)
 8000acc:	611a      	str	r2, [r3, #16]
	kalman->p12 = 0.05;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <Kalman_init+0x60>)
 8000ad2:	615a      	str	r2, [r3, #20]
	kalman->p21 = 0.05;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	4a05      	ldr	r2, [pc, #20]	; (8000aec <Kalman_init+0x60>)
 8000ad8:	619a      	str	r2, [r3, #24]
	kalman->p22 = 0.05;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	4a03      	ldr	r2, [pc, #12]	; (8000aec <Kalman_init+0x60>)
 8000ade:	61da      	str	r2, [r3, #28]
}
 8000ae0:	bf00      	nop
 8000ae2:	371c      	adds	r7, #28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	3d4ccccd 	.word	0x3d4ccccd

08000af0 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8000af0:	b480      	push	{r7}
 8000af2:	b0a5      	sub	sp, #148	; 0x94
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b06:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8000eb8 <KalmanFilter+0x3c8>
 8000b0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b0e:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	edd3 7a06 	vldr	s15, [r3, #24]
 8000b18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b1c:	ed9f 6be6 	vldr	d6, [pc, #920]	; 8000eb8 <KalmanFilter+0x3c8>
 8000b20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b24:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	edd3 7a00 	vldr	s15, [r3]
 8000b2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b32:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8000ec0 <KalmanFilter+0x3d0>
 8000b36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b3a:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8000b3e:	a3e6      	add	r3, pc, #920	; (adr r3, 8000ed8 <KalmanFilter+0x3e8>)
 8000b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b44:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 8000b48:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000b4c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b50:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	edd3 7a07 	vldr	s15, [r3, #28]
 8000b5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b62:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b6c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b70:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000b74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b82:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000b86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000b8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b8e:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000b92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b96:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000b9a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b9e:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000ba2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ba6:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8000baa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bae:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bbc:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000bc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000bca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bce:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000bd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bdc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000be0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000be4:	ed97 7b00 	vldr	d7, [r7]
 8000be8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bec:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000bf0:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8000bf4:	ed97 7b00 	vldr	d7, [r7]
 8000bf8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bfc:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c0a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c0e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000c12:	ed9f 5bad 	vldr	d5, [pc, #692]	; 8000ec8 <KalmanFilter+0x3d8>
 8000c16:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000c20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c24:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c2c:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8000c30:	ed97 7b00 	vldr	d7, [r7]
 8000c34:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c38:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c3c:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8000c40:	ed97 7b00 	vldr	d7, [r7]
 8000c44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c48:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8000c4c:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8000c50:	ed97 7b00 	vldr	d7, [r7]
 8000c54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c58:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000c5c:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000c60:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000c64:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c72:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8000ec8 <KalmanFilter+0x3d8>
 8000c76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c7a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	edd3 7a00 	vldr	s15, [r3]
 8000c84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c88:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8000ed0 <KalmanFilter+0x3e0>
 8000c8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c90:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 8000c94:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000c98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000c9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ca0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8000ca4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ca8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	edd3 7a06 	vldr	s15, [r3, #24]
 8000cb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cb6:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8000cba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cbe:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	edd3 7a04 	vldr	s15, [r3, #16]
 8000cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cd2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	edd3 7a06 	vldr	s15, [r3, #24]
 8000cdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce0:	ed9f 5b79 	vldr	d5, [pc, #484]	; 8000ec8 <KalmanFilter+0x3d8>
 8000ce4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000ce8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cec:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8000cf0:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8000cf4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000cf8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d02:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d06:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8000d0a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000d0e:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8000ec8 <KalmanFilter+0x3d8>
 8000d12:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d1a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d24:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d2e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000d32:	ed97 7b00 	vldr	d7, [r7]
 8000d36:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d44:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8000ec8 <KalmanFilter+0x3d8>
 8000d48:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000d4c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000d50:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000d54:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000d58:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8000d5c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000d60:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d64:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d6e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d7c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000d80:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d84:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000d88:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000d8c:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000d90:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000d94:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000d98:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000d9c:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8000da0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000da4:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000da8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000dac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000db0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	edd3 7a07 	vldr	s15, [r3, #28]
 8000dba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000dc2:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000ec8 <KalmanFilter+0x3d8>
 8000dc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dca:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000dce:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dd2:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ddc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de0:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	edd3 7a05 	vldr	s15, [r3, #20]
 8000dea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dee:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000df2:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000df6:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000dfa:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000dfe:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000e02:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e06:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e10:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e14:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e1e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e22:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000e26:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000e2a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000e2e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000e32:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000e36:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e3a:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e44:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e52:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000e56:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000e5a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e64:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e68:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8000e6c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e70:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000e74:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000e78:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8000e7c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e80:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e84:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8000e88:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8000e8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	edc3 7a02 	vstr	s15, [r3, #8]
	kalman->x2 = xx2;
 8000e96:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000e9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->p11 = pp11;
 8000ea4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000ea8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	edc3 7a04 	vstr	s15, [r3, #16]
 8000eb2:	e015      	b.n	8000ee0 <KalmanFilter+0x3f0>
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000ebc:	3f70624d 	.word	0x3f70624d
 8000ec0:	812dea12 	.word	0x812dea12
 8000ec4:	3d719799 	.word	0x3d719799
 8000ec8:	d2f1a9fc 	.word	0xd2f1a9fc
 8000ecc:	3f50624d 	.word	0x3f50624d
 8000ed0:	e826d695 	.word	0xe826d695
 8000ed4:	3e112e0b 	.word	0x3e112e0b
 8000ed8:	a0b5ed8d 	.word	0xa0b5ed8d
 8000edc:	3eb0c6f7 	.word	0x3eb0c6f7
	kalman->p12 = pp12;
 8000ee0:	ed97 7b08 	vldr	d7, [r7, #32]
 8000ee4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->p21 = pp21;
 8000eee:	ed97 7b06 	vldr	d7, [r7, #24]
 8000ef2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman->p22 = pp22;
 8000efc:	ed97 7b04 	vldr	d7, [r7, #16]
 8000f00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000f0a:	bf00      	nop
 8000f0c:	3794      	adds	r7, #148	; 0x94
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <PID_init>:

void PID_init(PIDParameter *PID, float Kp, float Ki, float Kd) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f24:	edc7 0a01 	vstr	s1, [r7, #4]
 8000f28:	ed87 1a00 	vstr	s2, [r7]
	PID->Kp = Kp;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	601a      	str	r2, [r3, #0]
	PID->Ki = Ki;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	605a      	str	r2, [r3, #4]
	PID->Kd = Kd;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	683a      	ldr	r2, [r7, #0]
 8000f3c:	609a      	str	r2, [r3, #8]
	PID->ITerm = 0;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
	PID->Setpoint = 0;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	611a      	str	r2, [r3, #16]
	PID->Feedback = 0;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	615a      	str	r2, [r3, #20]
	PID->Error[0] = 0;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f04f 0200 	mov.w	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
	PID->Output = 0;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	621a      	str	r2, [r3, #32]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PID_Control>:

float PID_Control(PIDParameter *PID,float Setpoint,float Feedback){
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f86:	edc7 0a01 	vstr	s1, [r7, #4]
	PID->Feedback = Feedback; 	// Feedback Input
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	615a      	str	r2, [r3, #20]
	PID->Setpoint = Setpoint;	// Setpoint Input
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	611a      	str	r2, [r3, #16]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	edc3 7a06 	vstr	s15, [r3, #24]
	PID->ITerm += PID->Error[0];
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	ed93 7a03 	vldr	s14, [r3, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	ed93 7a00 	vldr	s14, [r3]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (PID->Kp * (PID->Error[0] - PID->Error[1])));
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	edd3 6a00 	vldr	s13, [r3]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	ed93 6a06 	vldr	s12, [r3, #24]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff8:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001000:	ee77 7a27 	vadd.f32	s15, s14, s15
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	edc3 7a08 	vstr	s15, [r3, #32]
	PID->Error[1] = PID->Error[0]; // Update Error
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	699a      	ldr	r2, [r3, #24]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	61da      	str	r2, [r3, #28]
	return PID->Output;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	ee07 3a90 	vmov	s15, r3
}
 800101a:	eeb0 0a67 	vmov.f32	s0, s15
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,float PosP,float PosI,float PosD,float VelP,float VelI,float VelD, float GearRatio ,float StepDriver){
 8001028:	b580      	push	{r7, lr}
 800102a:	b08a      	sub	sp, #40	; 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6278      	str	r0, [r7, #36]	; 0x24
 8001030:	ed87 0a08 	vstr	s0, [r7, #32]
 8001034:	edc7 0a07 	vstr	s1, [r7, #28]
 8001038:	ed87 1a06 	vstr	s2, [r7, #24]
 800103c:	edc7 1a05 	vstr	s3, [r7, #20]
 8001040:	ed87 2a04 	vstr	s4, [r7, #16]
 8001044:	edc7 2a03 	vstr	s5, [r7, #12]
 8001048:	ed87 3a02 	vstr	s6, [r7, #8]
 800104c:	edc7 3a01 	vstr	s7, [r7, #4]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	ed97 1a06 	vldr	s2, [r7, #24]
 8001056:	edd7 0a07 	vldr	s1, [r7, #28]
 800105a:	ed97 0a08 	vldr	s0, [r7, #32]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff5a 	bl	8000f18 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	3330      	adds	r3, #48	; 0x30
 8001068:	ed97 1a03 	vldr	s2, [r7, #12]
 800106c:	edd7 0a04 	vldr	s1, [r7, #16]
 8001070:	ed97 0a05 	vldr	s0, [r7, #20]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff4f 	bl	8000f18 <PID_init>
	Control->Vel_Gfeed = (GearRatio * StepDriver) / (2*PI);
 800107a:	ed97 7a02 	vldr	s14, [r7, #8]
 800107e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001082:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001086:	eddf 6a05 	vldr	s13, [pc, #20]	; 800109c <CascadeControl_init+0x74>
 800108a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	; 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40c90fdb 	.word	0x40c90fdb

080010a0 <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		float Pos_Feed, float pos_set, float vel_set) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6178      	str	r0, [r7, #20]
 80010a8:	6139      	str	r1, [r7, #16]
 80010aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80010ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80010b2:	ed87 1a01 	vstr	s2, [r7, #4]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
	Control->VelocitySetpoint = vel_set;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54

	/*Kalman Filter*/
	Control->PositionFeedback = Pos_Feed;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	629a      	str	r2, [r3, #40]	; 0x28
	KalmanFilter(kalman, Control->PositionFeedback); /*Kalman filter */
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80010ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010d2:	eeb0 0b47 	vmov.f64	d0, d7
 80010d6:	6938      	ldr	r0, [r7, #16]
 80010d8:	f7ff fd0a 	bl	8000af0 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	659a      	str	r2, [r3, #88]	; 0x58

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80010f2:	eef0 0a47 	vmov.f32	s1, s14
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	4610      	mov	r0, r2
 80010fc:	f7ff ff3d 	bl	8000f7a <PID_Control>
 8001100:	eef0 7a40 	vmov.f32	s15, s0
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->VelocitySetpoint += Control->PositionPIDOutput;
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001132:	eef0 0a47 	vmov.f32	s1, s14
 8001136:	eeb0 0a67 	vmov.f32	s0, s15
 800113a:	4610      	mov	r0, r2
 800113c:	f7ff ff1d 	bl	8000f7a <PID_Control>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			Control->VelocitySetpoint, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->VelocitySetpoint)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001156:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Control->VelocityPIDOutput;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001160:	ee77 7a27 	vadd.f32	s15, s14, s15
	Control->Output = (Control->Vel_Gfeed * Control->VelocitySetpoint)
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_CRC_Init+0x50>)
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <MX_CRC_Init+0x54>)
 800117c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_CRC_Init+0x50>)
 8001180:	2201      	movs	r2, #1
 8001182:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_CRC_Init+0x50>)
 8001186:	2201      	movs	r2, #1
 8001188:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_CRC_Init+0x50>)
 800118c:	221d      	movs	r2, #29
 800118e:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_CRC_Init+0x50>)
 8001192:	2210      	movs	r2, #16
 8001194:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8001196:	4b0b      	ldr	r3, [pc, #44]	; (80011c4 <MX_CRC_Init+0x50>)
 8001198:	22c4      	movs	r2, #196	; 0xc4
 800119a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_CRC_Init+0x50>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <MX_CRC_Init+0x50>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <MX_CRC_Init+0x50>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_CRC_Init+0x50>)
 80011b0:	f004 fe1c 	bl	8005dec <HAL_CRC_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80011ba:	f000 ff83 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000ac 	.word	0x200000ac
 80011c8:	58024c00 	.word	0x58024c00

080011cc <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <HAL_CRC_MspInit+0x3c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d10e      	bne.n	80011fc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_CRC_MspInit+0x40>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	4a09      	ldr	r2, [pc, #36]	; (800120c <HAL_CRC_MspInit+0x40>)
 80011e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <HAL_CRC_MspInit+0x40>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	58024c00 	.word	0x58024c00
 800120c:	58024400 	.word	0x58024400

08001210 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001216:	4b0d      	ldr	r3, [pc, #52]	; (800124c <MX_DMA_Init+0x3c>)
 8001218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_DMA_Init+0x3c>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DMA_Init+0x3c>)
 8001228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	200b      	movs	r0, #11
 800123a:	f004 fda2 	bl	8005d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800123e:	200b      	movs	r0, #11
 8001240:	f004 fdb9 	bl	8005db6 <HAL_NVIC_EnableIRQ>

}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	58024400 	.word	0x58024400

08001250 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_HS_DP
     PA15(JTDI)   ------> S_TIM2_CH1_ETR
     PB3(JTDO/TRACESWO)   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001266:	4ba2      	ldr	r3, [pc, #648]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4aa0      	ldr	r2, [pc, #640]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b9e      	ldr	r3, [pc, #632]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001284:	4b9a      	ldr	r3, [pc, #616]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a99      	ldr	r2, [pc, #612]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 800128c:	f043 0304 	orr.w	r3, r3, #4
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b96      	ldr	r3, [pc, #600]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	4b93      	ldr	r3, [pc, #588]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	4a91      	ldr	r2, [pc, #580]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012b2:	4b8f      	ldr	r3, [pc, #572]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b8b      	ldr	r3, [pc, #556]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	4a8a      	ldr	r2, [pc, #552]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d0:	4b87      	ldr	r3, [pc, #540]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	4a82      	ldr	r2, [pc, #520]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ee:	4b80      	ldr	r3, [pc, #512]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	4b7c      	ldr	r3, [pc, #496]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	4a7b      	ldr	r2, [pc, #492]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130c:	4b78      	ldr	r3, [pc, #480]	; (80014f0 <MX_GPIO_Init+0x2a0>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 800131a:	2200      	movs	r2, #0
 800131c:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001320:	4874      	ldr	r0, [pc, #464]	; (80014f4 <MX_GPIO_Init+0x2a4>)
 8001322:	f007 fb2b 	bl	800897c <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	f44f 7188 	mov.w	r1, #272	; 0x110
 800132c:	4872      	ldr	r0, [pc, #456]	; (80014f8 <MX_GPIO_Init+0x2a8>)
 800132e:	f007 fb25 	bl	800897c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	21c4      	movs	r1, #196	; 0xc4
 8001336:	4871      	ldr	r0, [pc, #452]	; (80014fc <MX_GPIO_Init+0x2ac>)
 8001338:	f007 fb20 	bl	800897c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001342:	486f      	ldr	r0, [pc, #444]	; (8001500 <MX_GPIO_Init+0x2b0>)
 8001344:	f007 fb1a 	bl	800897c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800134e:	486a      	ldr	r0, [pc, #424]	; (80014f8 <MX_GPIO_Init+0x2a8>)
 8001350:	f007 fb14 	bl	800897c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001354:	2201      	movs	r2, #1
 8001356:	213f      	movs	r1, #63	; 0x3f
 8001358:	4869      	ldr	r0, [pc, #420]	; (8001500 <MX_GPIO_Init+0x2b0>)
 800135a:	f007 fb0f 	bl	800897c <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 800135e:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001362:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	485f      	ldr	r0, [pc, #380]	; (80014f4 <MX_GPIO_Init+0x2a4>)
 8001378:	f007 f958 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 800137c:	f24e 032f 	movw	r3, #57391	; 0xe02f
 8001380:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001382:	2303      	movs	r3, #3
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 031c 	add.w	r3, r7, #28
 800138e:	4619      	mov	r1, r3
 8001390:	4859      	ldr	r0, [pc, #356]	; (80014f8 <MX_GPIO_Init+0x2a8>)
 8001392:	f007 f94b 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001396:	233c      	movs	r3, #60	; 0x3c
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139a:	2303      	movs	r3, #3
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4856      	ldr	r0, [pc, #344]	; (8001504 <MX_GPIO_Init+0x2b4>)
 80013aa:	f007 f93f 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 80013ae:	f44f 7344 	mov.w	r3, #784	; 0x310
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	484c      	ldr	r0, [pc, #304]	; (80014f8 <MX_GPIO_Init+0x2a8>)
 80013c8:	f007 f930 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013cc:	2301      	movs	r3, #1
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d0:	2303      	movs	r3, #3
 80013d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4847      	ldr	r0, [pc, #284]	; (80014fc <MX_GPIO_Init+0x2ac>)
 80013e0:	f007 f924 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 80013e4:	2302      	movs	r3, #2
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 031c 	add.w	r3, r7, #28
 80013f6:	4619      	mov	r1, r3
 80013f8:	4840      	ldr	r0, [pc, #256]	; (80014fc <MX_GPIO_Init+0x2ac>)
 80013fa:	f007 f917 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 80013fe:	23c4      	movs	r3, #196	; 0xc4
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4839      	ldr	r0, [pc, #228]	; (80014fc <MX_GPIO_Init+0x2ac>)
 8001416:	f007 f909 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800141a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001420:	2303      	movs	r3, #3
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4831      	ldr	r0, [pc, #196]	; (80014f4 <MX_GPIO_Init+0x2a4>)
 8001430:	f007 f8fc 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001434:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800143a:	2303      	movs	r3, #3
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	482d      	ldr	r0, [pc, #180]	; (8001500 <MX_GPIO_Init+0x2b0>)
 800144a:	f007 f8ef 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 800144e:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001452:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4826      	ldr	r0, [pc, #152]	; (8001500 <MX_GPIO_Init+0x2b0>)
 8001468:	f007 f8e0 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 800146c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001470:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 031c 	add.w	r3, r7, #28
 800147e:	4619      	mov	r1, r3
 8001480:	4820      	ldr	r0, [pc, #128]	; (8001504 <MX_GPIO_Init+0x2b4>)
 8001482:	f007 f8d3 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001486:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800148a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4819      	ldr	r0, [pc, #100]	; (8001504 <MX_GPIO_Init+0x2b4>)
 80014a0:	f007 f8c4 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6A_Pin;
 80014a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014b6:	2301      	movs	r3, #1
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <MX_GPIO_Init+0x2b4>)
 80014c2:	f007 f8b3 	bl	800862c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6B_Pin;
 80014c6:	2308      	movs	r3, #8
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014d6:	2301      	movs	r3, #1
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4806      	ldr	r0, [pc, #24]	; (80014fc <MX_GPIO_Init+0x2ac>)
 80014e2:	f007 f8a3 	bl	800862c <HAL_GPIO_Init>

}
 80014e6:	bf00      	nop
 80014e8:	3730      	adds	r7, #48	; 0x30
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	58024400 	.word	0x58024400
 80014f4:	58021000 	.word	0x58021000
 80014f8:	58020800 	.word	0x58020800
 80014fc:	58020400 	.word	0x58020400
 8001500:	58020c00 	.word	0x58020c00
 8001504:	58020000 	.word	0x58020000

08001508 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_I2C2_Init+0x74>)
 800150e:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <MX_I2C2_Init+0x78>)
 8001510:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_I2C2_Init+0x74>)
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <MX_I2C2_Init+0x7c>)
 8001516:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_I2C2_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_I2C2_Init+0x74>)
 8001520:	2201      	movs	r2, #1
 8001522:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_I2C2_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_I2C2_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <MX_I2C2_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_I2C2_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <MX_I2C2_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001542:	480e      	ldr	r0, [pc, #56]	; (800157c <MX_I2C2_Init+0x74>)
 8001544:	f007 fa4e 	bl	80089e4 <HAL_I2C_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800154e:	f000 fdb9 	bl	80020c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001552:	2100      	movs	r1, #0
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <MX_I2C2_Init+0x74>)
 8001556:	f007 fad5 	bl	8008b04 <HAL_I2CEx_ConfigAnalogFilter>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001560:	f000 fdb0 	bl	80020c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001564:	2100      	movs	r1, #0
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_I2C2_Init+0x74>)
 8001568:	f007 fb17 	bl	8008b9a <HAL_I2CEx_ConfigDigitalFilter>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001572:	f000 fda7 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200000d0 	.word	0x200000d0
 8001580:	40005800 	.word	0x40005800
 8001584:	60404e72 	.word	0x60404e72

08001588 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0b6      	sub	sp, #216	; 0xd8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	22b4      	movs	r2, #180	; 0xb4
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00f ff0f 	bl	80113cc <memset>
  if(i2cHandle->Instance==I2C2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a25      	ldr	r2, [pc, #148]	; (8001648 <HAL_I2C_MspInit+0xc0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d142      	bne.n	800163e <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80015b8:	2308      	movs	r3, #8
 80015ba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4618      	mov	r0, r3
 80015c8:	f008 faa6 	bl	8009b18 <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015d2:	f000 fd77 	bl	80020c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_I2C_MspInit+0xc4>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <HAL_I2C_MspInit+0xc4>)
 80015de:	f043 0302 	orr.w	r3, r3, #2
 80015e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015e6:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_I2C_MspInit+0xc4>)
 80015e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015fc:	2312      	movs	r3, #18
 80015fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001602:	2301      	movs	r3, #1
 8001604:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800160e:	2304      	movs	r3, #4
 8001610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <HAL_I2C_MspInit+0xc8>)
 800161c:	f007 f806 	bl	800862c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_I2C_MspInit+0xc4>)
 8001622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <HAL_I2C_MspInit+0xc4>)
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800162c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_I2C_MspInit+0xc4>)
 8001632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800163e:	bf00      	nop
 8001640:	37d8      	adds	r7, #216	; 0xd8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40005800 	.word	0x40005800
 800164c:	58024400 	.word	0x58024400
 8001650:	58020400 	.word	0x58020400
 8001654:	00000000 	.word	0x00000000

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165e:	f002 f9df 	bl	8003a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001662:	f000 fa3f 	bl	8001ae4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001666:	f000 fab5 	bl	8001bd4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800166a:	f7ff fdf1 	bl	8001250 <MX_GPIO_Init>
  MX_DMA_Init();
 800166e:	f7ff fdcf 	bl	8001210 <MX_DMA_Init>
  MX_ADC3_Init();
 8001672:	f7ff f8c5 	bl	8000800 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001676:	f000 ff81 	bl	800257c <MX_TIM1_Init>
  MX_TIM3_Init();
 800167a:	f001 f80f 	bl	800269c <MX_TIM3_Init>
  MX_TIM4_Init();
 800167e:	f001 f885 	bl	800278c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001682:	f001 f8d9 	bl	8002838 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001686:	f001 f965 	bl	8002954 <MX_TIM8_Init>
  MX_TIM13_Init();
 800168a:	f001 f9bd 	bl	8002a08 <MX_TIM13_Init>
  MX_TIM14_Init();
 800168e:	f001 fa0b 	bl	8002aa8 <MX_TIM14_Init>
  MX_TIM15_Init();
 8001692:	f001 fa59 	bl	8002b48 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001696:	f001 fadf 	bl	8002c58 <MX_TIM16_Init>
  MX_TIM17_Init();
 800169a:	f001 fb59 	bl	8002d50 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800169e:	f002 f831 	bl	8003704 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80016a2:	f002 f87d 	bl	80037a0 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 80016a6:	f000 fd13 	bl	80020d0 <MX_SPI3_Init>
  MX_SPI4_Init();
 80016aa:	f000 fd69 	bl	8002180 <MX_SPI4_Init>
  MX_I2C2_Init();
 80016ae:	f7ff ff2b 	bl	8001508 <MX_I2C2_Init>
  MX_CRC_Init();
 80016b2:	f7ff fd5f 	bl	8001174 <MX_CRC_Init>
  MX_TIM24_Init();
 80016b6:	f001 fc17 	bl	8002ee8 <MX_TIM24_Init>
  MX_TIM23_Init();
 80016ba:	f001 fbc5 	bl	8002e48 <MX_TIM23_Init>
  MX_TIM6_Init();
 80016be:	f001 f911 	bl	80028e4 <MX_TIM6_Init>
  MX_UART5_Init();
 80016c2:	f001 ffcd 	bl	8003660 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 80016c6:	2201      	movs	r2, #1
 80016c8:	2140      	movs	r1, #64	; 0x40
 80016ca:	48b3      	ldr	r0, [pc, #716]	; (8001998 <main+0x340>)
 80016cc:	f007 f956 	bl	800897c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 80016d0:	2201      	movs	r2, #1
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	48b1      	ldr	r0, [pc, #708]	; (800199c <main+0x344>)
 80016d6:	f007 f951 	bl	800897c <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 80016da:	4bb1      	ldr	r3, [pc, #708]	; (80019a0 <main+0x348>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	461a      	mov	r2, r3
 80016e0:	4bb0      	ldr	r3, [pc, #704]	; (80019a4 <main+0x34c>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016ee:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 8001980 <main+0x328>
 80016f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016fa:	4bab      	ldr	r3, [pc, #684]	; (80019a8 <main+0x350>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001700:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001704:	2100      	movs	r1, #0
 8001706:	48a9      	ldr	r0, [pc, #676]	; (80019ac <main+0x354>)
 8001708:	f004 f9ca 	bl	8005aa0 <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0,6077);
 800170c:	2301      	movs	r3, #1
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 80019b0 <main+0x358>
 8001714:	4ba7      	ldr	r3, [pc, #668]	; (80019b4 <main+0x35c>)
 8001716:	4aa0      	ldr	r2, [pc, #640]	; (8001998 <main+0x340>)
 8001718:	49a7      	ldr	r1, [pc, #668]	; (80019b8 <main+0x360>)
 800171a:	48a8      	ldr	r0, [pc, #672]	; (80019bc <main+0x364>)
 800171c:	f7fe ff96 	bl	800064c <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1,10831);
 8001720:	2302      	movs	r3, #2
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 80019c0 <main+0x368>
 8001728:	4ba2      	ldr	r3, [pc, #648]	; (80019b4 <main+0x35c>)
 800172a:	4a9b      	ldr	r2, [pc, #620]	; (8001998 <main+0x340>)
 800172c:	49a2      	ldr	r1, [pc, #648]	; (80019b8 <main+0x360>)
 800172e:	48a5      	ldr	r0, [pc, #660]	; (80019c4 <main+0x36c>)
 8001730:	f7fe ff8c 	bl	800064c <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2,2982);
 8001734:	2304      	movs	r3, #4
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 80019c8 <main+0x370>
 800173c:	4b9d      	ldr	r3, [pc, #628]	; (80019b4 <main+0x35c>)
 800173e:	4a96      	ldr	r2, [pc, #600]	; (8001998 <main+0x340>)
 8001740:	499d      	ldr	r1, [pc, #628]	; (80019b8 <main+0x360>)
 8001742:	48a2      	ldr	r0, [pc, #648]	; (80019cc <main+0x374>)
 8001744:	f7fe ff82 	bl	800064c <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3,5000);
 8001748:	2308      	movs	r3, #8
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80019d0 <main+0x378>
 8001750:	4b98      	ldr	r3, [pc, #608]	; (80019b4 <main+0x35c>)
 8001752:	4a91      	ldr	r2, [pc, #580]	; (8001998 <main+0x340>)
 8001754:	4998      	ldr	r1, [pc, #608]	; (80019b8 <main+0x360>)
 8001756:	489f      	ldr	r0, [pc, #636]	; (80019d4 <main+0x37c>)
 8001758:	f7fe ff78 	bl	800064c <AS5047U_init>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 5000, 0.001);
 800175c:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8001988 <main+0x330>
 8001760:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8001990 <main+0x338>
 8001764:	489c      	ldr	r0, [pc, #624]	; (80019d8 <main+0x380>)
 8001766:	f7ff f991 	bl	8000a8c <Kalman_init>
	Kalman_init(&Kalman[1], 5000, 0.001);
 800176a:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8001988 <main+0x330>
 800176e:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8001990 <main+0x338>
 8001772:	489a      	ldr	r0, [pc, #616]	; (80019dc <main+0x384>)
 8001774:	f7ff f98a 	bl	8000a8c <Kalman_init>
	Kalman_init(&Kalman[2], 5000, 0.001);
 8001778:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8001988 <main+0x330>
 800177c:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8001990 <main+0x338>
 8001780:	4897      	ldr	r0, [pc, #604]	; (80019e0 <main+0x388>)
 8001782:	f7ff f983 	bl	8000a8c <Kalman_init>
	Kalman_init(&Kalman[3], 5000, 0.001);
 8001786:	ed9f 1b80 	vldr	d1, [pc, #512]	; 8001988 <main+0x330>
 800178a:	ed9f 0b81 	vldr	d0, [pc, #516]	; 8001990 <main+0x338>
 800178e:	4895      	ldr	r0, [pc, #596]	; (80019e4 <main+0x38c>)
 8001790:	f7ff f97c 	bl	8000a8c <Kalman_init>

	/*			CascadeControl			*/
	CascadeControl_init(&Control[0], 0.1, 0, 0, 0.1, 0, 0, 4*5.18f, 1600);
 8001794:	eddf 3a94 	vldr	s7, [pc, #592]	; 80019e8 <main+0x390>
 8001798:	ed9f 3a94 	vldr	s6, [pc, #592]	; 80019ec <main+0x394>
 800179c:	eddf 2a94 	vldr	s5, [pc, #592]	; 80019f0 <main+0x398>
 80017a0:	ed9f 2a93 	vldr	s4, [pc, #588]	; 80019f0 <main+0x398>
 80017a4:	eddf 1a93 	vldr	s3, [pc, #588]	; 80019f4 <main+0x39c>
 80017a8:	ed9f 1a91 	vldr	s2, [pc, #580]	; 80019f0 <main+0x398>
 80017ac:	eddf 0a90 	vldr	s1, [pc, #576]	; 80019f0 <main+0x398>
 80017b0:	ed9f 0a90 	vldr	s0, [pc, #576]	; 80019f4 <main+0x39c>
 80017b4:	4890      	ldr	r0, [pc, #576]	; (80019f8 <main+0x3a0>)
 80017b6:	f7ff fc37 	bl	8001028 <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.1, 0, 0, 0.1, 0, 0, 9, 800);
 80017ba:	eddf 3a90 	vldr	s7, [pc, #576]	; 80019fc <main+0x3a4>
 80017be:	eeb2 3a02 	vmov.f32	s6, #34	; 0x41100000  9.0
 80017c2:	eddf 2a8b 	vldr	s5, [pc, #556]	; 80019f0 <main+0x398>
 80017c6:	ed9f 2a8a 	vldr	s4, [pc, #552]	; 80019f0 <main+0x398>
 80017ca:	eddf 1a8a 	vldr	s3, [pc, #552]	; 80019f4 <main+0x39c>
 80017ce:	ed9f 1a88 	vldr	s2, [pc, #544]	; 80019f0 <main+0x398>
 80017d2:	eddf 0a87 	vldr	s1, [pc, #540]	; 80019f0 <main+0x398>
 80017d6:	ed9f 0a87 	vldr	s0, [pc, #540]	; 80019f4 <main+0x39c>
 80017da:	4889      	ldr	r0, [pc, #548]	; (8001a00 <main+0x3a8>)
 80017dc:	f7ff fc24 	bl	8001028 <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.1, 0, 0, 0.1, 0, 0, 9, 1600);
 80017e0:	eddf 3a81 	vldr	s7, [pc, #516]	; 80019e8 <main+0x390>
 80017e4:	eeb2 3a02 	vmov.f32	s6, #34	; 0x41100000  9.0
 80017e8:	eddf 2a81 	vldr	s5, [pc, #516]	; 80019f0 <main+0x398>
 80017ec:	ed9f 2a80 	vldr	s4, [pc, #512]	; 80019f0 <main+0x398>
 80017f0:	eddf 1a80 	vldr	s3, [pc, #512]	; 80019f4 <main+0x39c>
 80017f4:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 80019f0 <main+0x398>
 80017f8:	eddf 0a7d 	vldr	s1, [pc, #500]	; 80019f0 <main+0x398>
 80017fc:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80019f4 <main+0x39c>
 8001800:	4880      	ldr	r0, [pc, #512]	; (8001a04 <main+0x3ac>)
 8001802:	f7ff fc11 	bl	8001028 <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.1, 0, 0, 0.1, 0, 0, 6, 1600);
 8001806:	eddf 3a78 	vldr	s7, [pc, #480]	; 80019e8 <main+0x390>
 800180a:	eeb1 3a08 	vmov.f32	s6, #24	; 0x40c00000  6.0
 800180e:	eddf 2a78 	vldr	s5, [pc, #480]	; 80019f0 <main+0x398>
 8001812:	ed9f 2a77 	vldr	s4, [pc, #476]	; 80019f0 <main+0x398>
 8001816:	eddf 1a77 	vldr	s3, [pc, #476]	; 80019f4 <main+0x39c>
 800181a:	ed9f 1a75 	vldr	s2, [pc, #468]	; 80019f0 <main+0x398>
 800181e:	eddf 0a74 	vldr	s1, [pc, #464]	; 80019f0 <main+0x398>
 8001822:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80019f4 <main+0x39c>
 8001826:	4878      	ldr	r0, [pc, #480]	; (8001a08 <main+0x3b0>)
 8001828:	f7ff fbfe 	bl	8001028 <CascadeControl_init>

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 800182c:	2301      	movs	r3, #1
 800182e:	9302      	str	r3, [sp, #8]
 8001830:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <main+0x3b4>)
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2301      	movs	r3, #1
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	4b58      	ldr	r3, [pc, #352]	; (800199c <main+0x344>)
 800183a:	2200      	movs	r2, #0
 800183c:	4974      	ldr	r1, [pc, #464]	; (8001a10 <main+0x3b8>)
 800183e:	4875      	ldr	r0, [pc, #468]	; (8001a14 <main+0x3bc>)
 8001840:	f7ff f878 	bl	8000934 <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 8001844:	2300      	movs	r3, #0
 8001846:	9302      	str	r3, [sp, #8]
 8001848:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <main+0x3b4>)
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2302      	movs	r3, #2
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4b52      	ldr	r3, [pc, #328]	; (800199c <main+0x344>)
 8001852:	2200      	movs	r2, #0
 8001854:	4970      	ldr	r1, [pc, #448]	; (8001a18 <main+0x3c0>)
 8001856:	4871      	ldr	r0, [pc, #452]	; (8001a1c <main+0x3c4>)
 8001858:	f7ff f86c 	bl	8000934 <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 0);
 800185c:	2300      	movs	r3, #0
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <main+0x3b4>)
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	2304      	movs	r3, #4
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	4b4c      	ldr	r3, [pc, #304]	; (800199c <main+0x344>)
 800186a:	2200      	movs	r2, #0
 800186c:	496c      	ldr	r1, [pc, #432]	; (8001a20 <main+0x3c8>)
 800186e:	486d      	ldr	r0, [pc, #436]	; (8001a24 <main+0x3cc>)
 8001870:	f7ff f860 	bl	8000934 <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 0);
 8001874:	2300      	movs	r3, #0
 8001876:	9302      	str	r3, [sp, #8]
 8001878:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <main+0x3b4>)
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2308      	movs	r3, #8
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4b46      	ldr	r3, [pc, #280]	; (800199c <main+0x344>)
 8001882:	2200      	movs	r2, #0
 8001884:	4968      	ldr	r1, [pc, #416]	; (8001a28 <main+0x3d0>)
 8001886:	4869      	ldr	r0, [pc, #420]	; (8001a2c <main+0x3d4>)
 8001888:	f7ff f854 	bl	8000934 <Step_Driver_init>
	/*			Traj		*/


	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 800188c:	4868      	ldr	r0, [pc, #416]	; (8001a30 <main+0x3d8>)
 800188e:	f00b faeb 	bl	800ce68 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT (&huart5, UART5_rxBuffer, 14);
 8001892:	220e      	movs	r2, #14
 8001894:	4967      	ldr	r1, [pc, #412]	; (8001a34 <main+0x3dc>)
 8001896:	4868      	ldr	r0, [pc, #416]	; (8001a38 <main+0x3e0>)
 8001898:	f00d f85a 	bl	800e950 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Contorl_Flag) {
 800189c:	4b67      	ldr	r3, [pc, #412]	; (8001a3c <main+0x3e4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d05a      	beq.n	800195a <main+0x302>
//			float Position, Velocity;
//			Joint_Traj(&Position,&Velocity);
			float J1,J2,J3,J4;
			/***** Encoder Read *****/
			J1 = EncPulse2Rad_Read(&Encoder[0],1);
 80018a4:	2101      	movs	r1, #1
 80018a6:	4845      	ldr	r0, [pc, #276]	; (80019bc <main+0x364>)
 80018a8:	f7fe feae 	bl	8000608 <EncPulse2Rad_Read>
 80018ac:	ed87 0a03 	vstr	s0, [r7, #12]
			J2 = EncPulse2Rad_Read(&Encoder[1],0);
 80018b0:	2100      	movs	r1, #0
 80018b2:	4844      	ldr	r0, [pc, #272]	; (80019c4 <main+0x36c>)
 80018b4:	f7fe fea8 	bl	8000608 <EncPulse2Rad_Read>
 80018b8:	ed87 0a02 	vstr	s0, [r7, #8]
			J3 = EncPulse2Rad_Read(&Encoder[2],0);
 80018bc:	2100      	movs	r1, #0
 80018be:	4843      	ldr	r0, [pc, #268]	; (80019cc <main+0x374>)
 80018c0:	f7fe fea2 	bl	8000608 <EncPulse2Rad_Read>
 80018c4:	ed87 0a01 	vstr	s0, [r7, #4]
			J4 = EncPulse2Rad_Read(&Encoder[3],0);
 80018c8:	2100      	movs	r1, #0
 80018ca:	4842      	ldr	r0, [pc, #264]	; (80019d4 <main+0x37c>)
 80018cc:	f7fe fe9c 	bl	8000608 <EncPulse2Rad_Read>
 80018d0:	ed87 0a00 	vstr	s0, [r7]

			CascadeControl(&Control[0], &Kalman[0], J1,0,0);
 80018d4:	ed9f 1a46 	vldr	s2, [pc, #280]	; 80019f0 <main+0x398>
 80018d8:	eddf 0a45 	vldr	s1, [pc, #276]	; 80019f0 <main+0x398>
 80018dc:	ed97 0a03 	vldr	s0, [r7, #12]
 80018e0:	493d      	ldr	r1, [pc, #244]	; (80019d8 <main+0x380>)
 80018e2:	4845      	ldr	r0, [pc, #276]	; (80019f8 <main+0x3a0>)
 80018e4:	f7ff fbdc 	bl	80010a0 <CascadeControl>
			CascadeControl(&Control[1], &Kalman[1], J2,0.52,0);
 80018e8:	ed9f 1a41 	vldr	s2, [pc, #260]	; 80019f0 <main+0x398>
 80018ec:	eddf 0a54 	vldr	s1, [pc, #336]	; 8001a40 <main+0x3e8>
 80018f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80018f4:	4939      	ldr	r1, [pc, #228]	; (80019dc <main+0x384>)
 80018f6:	4842      	ldr	r0, [pc, #264]	; (8001a00 <main+0x3a8>)
 80018f8:	f7ff fbd2 	bl	80010a0 <CascadeControl>
			CascadeControl(&Control[2], &Kalman[2], J3,-0.52,0);
 80018fc:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 80019f0 <main+0x398>
 8001900:	eddf 0a50 	vldr	s1, [pc, #320]	; 8001a44 <main+0x3ec>
 8001904:	ed97 0a01 	vldr	s0, [r7, #4]
 8001908:	4935      	ldr	r1, [pc, #212]	; (80019e0 <main+0x388>)
 800190a:	483e      	ldr	r0, [pc, #248]	; (8001a04 <main+0x3ac>)
 800190c:	f7ff fbc8 	bl	80010a0 <CascadeControl>
			CascadeControl(&Control[3], &Kalman[3], J4,0,0);
 8001910:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80019f0 <main+0x398>
 8001914:	eddf 0a36 	vldr	s1, [pc, #216]	; 80019f0 <main+0x398>
 8001918:	ed97 0a00 	vldr	s0, [r7]
 800191c:	4931      	ldr	r1, [pc, #196]	; (80019e4 <main+0x38c>)
 800191e:	483a      	ldr	r0, [pc, #232]	; (8001a08 <main+0x3b0>)
 8001920:	f7ff fbbe 	bl	80010a0 <CascadeControl>

			Step_Driver(&Stepper[0], Control[0].Output);
 8001924:	4b34      	ldr	r3, [pc, #208]	; (80019f8 <main+0x3a0>)
 8001926:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	4839      	ldr	r0, [pc, #228]	; (8001a14 <main+0x3bc>)
 8001930:	f7ff f832 	bl	8000998 <Step_Driver>
			Step_Driver(&Stepper[1], Control[1].Output);
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <main+0x3a0>)
 8001936:	edd3 7a33 	vldr	s15, [r3, #204]	; 0xcc
 800193a:	eeb0 0a67 	vmov.f32	s0, s15
 800193e:	4837      	ldr	r0, [pc, #220]	; (8001a1c <main+0x3c4>)
 8001940:	f7ff f82a 	bl	8000998 <Step_Driver>
			Step_Driver(&Stepper[2], Control[2].Output);
 8001944:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <main+0x3a0>)
 8001946:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	4835      	ldr	r0, [pc, #212]	; (8001a24 <main+0x3cc>)
 8001950:	f7ff f822 	bl	8000998 <Step_Driver>
//			Step_Driver(&Stepper[3], Control[3].Output);
//			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_1);

			Contorl_Flag = 0;    // Clear Control Flag
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <main+0x3e4>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
//		Step_Driver(&Stepper[3], Joint3);

		/* Check Error Before Update Path with root mean */
		/* Before Change Path (Calculate New Traj Via point) */

		if (traj_finish) {
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <main+0x3f0>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8081 	beq.w	8001a66 <main+0x40e>
			if (Control[0].PositionFeedback > 1.5) {
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <main+0x3a0>)
 8001966:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800196a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800196e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	dd6d      	ble.n	8001a54 <main+0x3fc>
				T_Traj = 5;
 8001978:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <main+0x3f4>)
 800197a:	4a35      	ldr	r2, [pc, #212]	; (8001a50 <main+0x3f8>)
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e06c      	b.n	8001a5a <main+0x402>
 8001980:	00000000 	.word	0x00000000
 8001984:	40540000 	.word	0x40540000
 8001988:	d2f1a9fc 	.word	0xd2f1a9fc
 800198c:	3f50624d 	.word	0x3f50624d
 8001990:	00000000 	.word	0x00000000
 8001994:	40b38800 	.word	0x40b38800
 8001998:	58020c00 	.word	0x58020c00
 800199c:	58021000 	.word	0x58021000
 80019a0:	1ff1e840 	.word	0x1ff1e840
 80019a4:	1ff1e820 	.word	0x1ff1e820
 80019a8:	200005d4 	.word	0x200005d4
 80019ac:	2000003c 	.word	0x2000003c
 80019b0:	45bde800 	.word	0x45bde800
 80019b4:	200000ac 	.word	0x200000ac
 80019b8:	200005e8 	.word	0x200005e8
 80019bc:	2000036c 	.word	0x2000036c
 80019c0:	46293c00 	.word	0x46293c00
 80019c4:	2000038c 	.word	0x2000038c
 80019c8:	453a6000 	.word	0x453a6000
 80019cc:	200003ac 	.word	0x200003ac
 80019d0:	459c4000 	.word	0x459c4000
 80019d4:	200003cc 	.word	0x200003cc
 80019d8:	200002e8 	.word	0x200002e8
 80019dc:	20000308 	.word	0x20000308
 80019e0:	20000328 	.word	0x20000328
 80019e4:	20000348 	.word	0x20000348
 80019e8:	44c80000 	.word	0x44c80000
 80019ec:	41a5c28f 	.word	0x41a5c28f
 80019f0:	00000000 	.word	0x00000000
 80019f4:	3dcccccd 	.word	0x3dcccccd
 80019f8:	20000128 	.word	0x20000128
 80019fc:	44480000 	.word	0x44480000
 8001a00:	20000190 	.word	0x20000190
 8001a04:	200001f8 	.word	0x200001f8
 8001a08:	20000260 	.word	0x20000260
 8001a0c:	0007a120 	.word	0x0007a120
 8001a10:	20000984 	.word	0x20000984
 8001a14:	20000580 	.word	0x20000580
 8001a18:	20000ab4 	.word	0x20000ab4
 8001a1c:	20000594 	.word	0x20000594
 8001a20:	20000854 	.word	0x20000854
 8001a24:	200005a8 	.word	0x200005a8
 8001a28:	20000b00 	.word	0x20000b00
 8001a2c:	200005bc 	.word	0x200005bc
 8001a30:	20000a68 	.word	0x20000a68
 8001a34:	2000002c 	.word	0x2000002c
 8001a38:	20000bdc 	.word	0x20000bdc
 8001a3c:	20000124 	.word	0x20000124
 8001a40:	3f051eb8 	.word	0x3f051eb8
 8001a44:	bf051eb8 	.word	0xbf051eb8
 8001a48:	2000003a 	.word	0x2000003a
 8001a4c:	200005dc 	.word	0x200005dc
 8001a50:	40a00000 	.word	0x40a00000
//				Traj_Coeff_Cal(&Traj[0], 5, 0.5, Control[0].PositionFeedback,
//						Control[0].VelocityFeedback);
			} else {
//				Traj_Coeff_Cal(&Traj[0], 5, 1.6, Control[0].PositionFeedback,
//						Control[0].VelocityFeedback);
				T_Traj = 5;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <main+0x46c>)
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <main+0x470>)
 8001a58:	601a      	str	r2, [r3, #0]
			}
			traj_finish = 0;
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <main+0x474>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
			T_Traj = 5;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <main+0x46c>)
 8001a62:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <main+0x470>)
 8001a64:	601a      	str	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <main+0x478>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <main+0x420>
			Narwhal_Protocol();
 8001a6e:	f000 f96b 	bl	8001d48 <Narwhal_Protocol>
			Protocol_Flag = 0;
 8001a72:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <main+0x478>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 100){
 8001a78:	f002 f858 	bl	8003b2c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <main+0x47c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b63      	cmp	r3, #99	; 0x63
 8001a86:	d904      	bls.n	8001a92 <main+0x43a>
			Software_Timer_100ms = HAL_GetTick();
 8001a88:	f002 f850 	bl	8003b2c <HAL_GetTick>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <main+0x47c>)
 8001a90:	6013      	str	r3, [r2, #0]
//			Neopixel_Set(&Neopixel, 1, 255, 255, 255);
//			Neopixel_Sent(&Neopixel);
		}
		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 8001a92:	f002 f84b 	bl	8003b2c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <main+0x480>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa2:	f4ff aefb 	bcc.w	800189c <main+0x244>
			Software_Timer_1s = HAL_GetTick();
 8001aa6:	f002 f841 	bl	8003b2c <HAL_GetTick>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <main+0x480>)
 8001aae:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 							//	read temperature sensor
 8001ab0:	480a      	ldr	r0, [pc, #40]	; (8001adc <main+0x484>)
 8001ab2:	f002 fd25 	bl	8004500 <HAL_ADC_Start_IT>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8001ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001aba:	4809      	ldr	r0, [pc, #36]	; (8001ae0 <main+0x488>)
 8001abc:	f006 ff77 	bl	80089ae <HAL_GPIO_TogglePin>
		if (Contorl_Flag) {
 8001ac0:	e6ec      	b.n	800189c <main+0x244>
 8001ac2:	bf00      	nop
 8001ac4:	200005dc 	.word	0x200005dc
 8001ac8:	40a00000 	.word	0x40a00000
 8001acc:	2000003a 	.word	0x2000003a
 8001ad0:	200005d0 	.word	0x200005d0
 8001ad4:	200005d8 	.word	0x200005d8
 8001ad8:	200002d0 	.word	0x200002d0
 8001adc:	2000003c 	.word	0x2000003c
 8001ae0:	58020800 	.word	0x58020800

08001ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b09c      	sub	sp, #112	; 0x70
 8001ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aee:	224c      	movs	r2, #76	; 0x4c
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f00f fc6a 	bl	80113cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2220      	movs	r2, #32
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f00f fc64 	bl	80113cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b04:	2002      	movs	r0, #2
 8001b06:	f007 f895 	bl	8008c34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <SystemClock_Config+0xe8>)
 8001b10:	699b      	ldr	r3, [r3, #24]
 8001b12:	4a2e      	ldr	r2, [pc, #184]	; (8001bcc <SystemClock_Config+0xe8>)
 8001b14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b18:	6193      	str	r3, [r2, #24]
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	; (8001bcc <SystemClock_Config+0xe8>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001b26:	bf00      	nop
 8001b28:	4b28      	ldr	r3, [pc, #160]	; (8001bcc <SystemClock_Config+0xe8>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b34:	d1f8      	bne.n	8001b28 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <SystemClock_Config+0xec>)
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	f023 0303 	bic.w	r3, r3, #3
 8001b3e:	4a24      	ldr	r2, [pc, #144]	; (8001bd0 <SystemClock_Config+0xec>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b46:	2301      	movs	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b50:	2302      	movs	r3, #2
 8001b52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b54:	2302      	movs	r3, #2
 8001b56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001b5c:	232c      	movs	r3, #44	; 0x2c
 8001b5e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001b60:	2301      	movs	r3, #1
 8001b62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001b70:	2300      	movs	r3, #0
 8001b72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f007 f893 	bl	8008ca8 <HAL_RCC_OscConfig>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001b88:	f000 fa9c 	bl	80020c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b8c:	233f      	movs	r3, #63	; 0x3f
 8001b8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b90:	2303      	movs	r3, #3
 8001b92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b9c:	2340      	movs	r3, #64	; 0x40
 8001b9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ba8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001baa:	2340      	movs	r3, #64	; 0x40
 8001bac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2103      	movs	r1, #3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f007 fc24 	bl	8009400 <HAL_RCC_ClockConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001bbe:	f000 fa81 	bl	80020c4 <Error_Handler>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3770      	adds	r7, #112	; 0x70
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	58024800 	.word	0x58024800
 8001bd0:	58024400 	.word	0x58024400

08001bd4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b0ae      	sub	sp, #184	; 0xb8
 8001bd8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	22b4      	movs	r2, #180	; 0xb4
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00f fbf3 	bl	80113cc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <PeriphCommonClock_Config+0x64>)
 8001be8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001bea:	2302      	movs	r3, #2
 8001bec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001bee:	2310      	movs	r3, #16
 8001bf0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001bfe:	23c0      	movs	r3, #192	; 0xc0
 8001c00:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8001c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c0e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8001c10:	2301      	movs	r3, #1
 8001c12:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8001c14:	2308      	movs	r3, #8
 8001c16:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	4618      	mov	r0, r3
 8001c22:	f007 ff79 	bl	8009b18 <HAL_RCCEx_PeriphCLKConfig>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001c2c:	f000 fa4a 	bl	80020c4 <Error_Handler>
  }
}
 8001c30:	bf00      	nop
 8001c32:	37b8      	adds	r7, #184	; 0xb8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	00082003 	.word	0x00082003

08001c3c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <HAL_UART_RxCpltCallback+0x24>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d102      	bne.n	8001c52 <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_UART_RxCpltCallback+0x28>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
	}
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000bdc 	.word	0x20000bdc
 8001c64:	200005d0 	.word	0x200005d0

08001c68 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(Neopixel.htim, TIM_CHANNEL_1);
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001c72:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8001c76:	2100      	movs	r1, #0
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f00b faef 	bl	800d25c <HAL_TIM_PWM_Stop_DMA>
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200003ec 	.word	0x200003ec

08001c8c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <HAL_ADC_ConvCpltCallback+0x54>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d11c      	bne.n	8001cd6 <HAL_ADC_ConvCpltCallback+0x4a>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 8001c9c:	4810      	ldr	r0, [pc, #64]	; (8001ce0 <HAL_ADC_ConvCpltCallback+0x54>)
 8001c9e:	f002 fd6f 	bl	8004780 <HAL_ADC_GetValue>
 8001ca2:	60f8      	str	r0, [r7, #12]
		Temperature = Temp_Calibration
				* (float) ((float) ADC_Output - *(unsigned short*) (0x1FF1E820))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cae:	4b0d      	ldr	r3, [pc, #52]	; (8001ce4 <HAL_ADC_ConvCpltCallback+0x58>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
				+ 30.0f;
 8001cc8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ccc:	ee77 7a87 	vadd.f32	s15, s15, s14
		Temperature = Temp_Calibration
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_ADC_ConvCpltCallback+0x60>)
 8001cd2:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	2000003c 	.word	0x2000003c
 8001ce4:	1ff1e820 	.word	0x1ff1e820
 8001ce8:	200005d4 	.word	0x200005d4
 8001cec:	200002c8 	.word	0x200002c8

08001cf0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d102      	bne.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
	}
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000a68 	.word	0x20000a68
 8001d18:	20000124 	.word	0x20000124

08001d1c <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
	return (uint8_t)HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <CRC8+0x28>)
 8001d30:	f004 f8c0 	bl	8005eb4 <HAL_CRC_Calculate>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200000ac 	.word	0x200000ac

08001d48 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
	uint8_t Feedback[4] = { 0xFF, 0, 0, 0 };
 8001d4e:	23ff      	movs	r3, #255	; 0xff
 8001d50:	613b      	str	r3, [r7, #16]
	if (UART5_rxBuffer[0] == 0xFF) {
 8001d52:	4bc6      	ldr	r3, [pc, #792]	; (800206c <Narwhal_Protocol+0x324>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2bff      	cmp	r3, #255	; 0xff
 8001d58:	f040 8196 	bne.w	8002088 <Narwhal_Protocol+0x340>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 8001d5c:	210d      	movs	r1, #13
 8001d5e:	48c3      	ldr	r0, [pc, #780]	; (800206c <Narwhal_Protocol+0x324>)
 8001d60:	f7ff ffdc 	bl	8001d1c <CRC8>
 8001d64:	4603      	mov	r3, r0
 8001d66:	75fb      	strb	r3, [r7, #23]
		if (CRC_Cal == UART5_rxBuffer[13]) {
 8001d68:	4bc0      	ldr	r3, [pc, #768]	; (800206c <Narwhal_Protocol+0x324>)
 8001d6a:	7b5b      	ldrb	r3, [r3, #13]
 8001d6c:	7dfa      	ldrb	r2, [r7, #23]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	f040 816a 	bne.w	8002048 <Narwhal_Protocol+0x300>
			if ((UART5_rxBuffer[1] & 0xF0) == 0xF0) {
 8001d74:	4bbd      	ldr	r3, [pc, #756]	; (800206c <Narwhal_Protocol+0x324>)
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d7c:	2bf0      	cmp	r3, #240	; 0xf0
 8001d7e:	f040 8085 	bne.w	8001e8c <Narwhal_Protocol+0x144>
				/* 		Data to MCU Start	*/
				Feedback[1] = 0xFF;
 8001d82:	23ff      	movs	r3, #255	; 0xff
 8001d84:	747b      	strb	r3, [r7, #17]
				switch (UART5_rxBuffer[1] & 0x0F) {
 8001d86:	4bb9      	ldr	r3, [pc, #740]	; (800206c <Narwhal_Protocol+0x324>)
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d86a      	bhi.n	8001e68 <Narwhal_Protocol+0x120>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <Narwhal_Protocol+0x50>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001dd9 	.word	0x08001dd9
 8001d9c:	08001ddf 	.word	0x08001ddf
 8001da0:	08001e69 	.word	0x08001e69
 8001da4:	08001e69 	.word	0x08001e69
 8001da8:	08001e69 	.word	0x08001e69
 8001dac:	08001de5 	.word	0x08001de5
 8001db0:	08001e69 	.word	0x08001e69
 8001db4:	08001e69 	.word	0x08001e69
 8001db8:	08001e69 	.word	0x08001e69
 8001dbc:	08001e69 	.word	0x08001e69
 8001dc0:	08001deb 	.word	0x08001deb
 8001dc4:	08001e51 	.word	0x08001e51
 8001dc8:	08001e57 	.word	0x08001e57
 8001dcc:	08001e5d 	.word	0x08001e5d
 8001dd0:	08001e69 	.word	0x08001e69
 8001dd4:	08001e63 	.word	0x08001e63
				case 0x00:
					/* Ping */
					Feedback[2] = 0x00;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	74bb      	strb	r3, [r7, #18]
					break;
 8001ddc:	e046      	b.n	8001e6c <Narwhal_Protocol+0x124>
				case 0x01:
					/* Working Mode Set */
					Feedback[2] = 0x01;
 8001dde:	2301      	movs	r3, #1
 8001de0:	74bb      	strb	r3, [r7, #18]
					break;
 8001de2:	e043      	b.n	8001e6c <Narwhal_Protocol+0x124>
				case 0x05:
					/* GoHome */
					Feedback[2] = 0x02;
 8001de4:	2302      	movs	r3, #2
 8001de6:	74bb      	strb	r3, [r7, #18]
					break;
 8001de8:	e040      	b.n	8001e6c <Narwhal_Protocol+0x124>
				case 0x0A:
					/* Joint Jog */
					for (int i = 0; i < 4; i++) {
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	e029      	b.n	8001e44 <Narwhal_Protocol+0xfc>
						if (!UART5_rxBuffer[2 + (2 * i)]) {
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	3301      	adds	r3, #1
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4a9d      	ldr	r2, [pc, #628]	; (800206c <Narwhal_Protocol+0x324>)
 8001df8:	5cd3      	ldrb	r3, [r2, r3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <Narwhal_Protocol+0xd6>
							JointTrajSet[i] = (float) (UART5_rxBuffer[3
									+ (2 * i)]);
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	3303      	adds	r3, #3
							JointTrajSet[i] = (float) (UART5_rxBuffer[3
 8001e04:	4a99      	ldr	r2, [pc, #612]	; (800206c <Narwhal_Protocol+0x324>)
 8001e06:	5cd3      	ldrb	r3, [r2, r3]
 8001e08:	ee07 3a90 	vmov	s15, r3
 8001e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e10:	4a97      	ldr	r2, [pc, #604]	; (8002070 <Narwhal_Protocol+0x328>)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	edc3 7a00 	vstr	s15, [r3]
 8001e1c:	e00f      	b.n	8001e3e <Narwhal_Protocol+0xf6>
						} else {
							JointTrajSet[i] = (float) -(UART5_rxBuffer[3
									+ (2 * i)]);
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	3303      	adds	r3, #3
							JointTrajSet[i] = (float) -(UART5_rxBuffer[3
 8001e24:	4a91      	ldr	r2, [pc, #580]	; (800206c <Narwhal_Protocol+0x324>)
 8001e26:	5cd3      	ldrb	r3, [r2, r3]
 8001e28:	425b      	negs	r3, r3
 8001e2a:	ee07 3a90 	vmov	s15, r3
 8001e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e32:	4a8f      	ldr	r2, [pc, #572]	; (8002070 <Narwhal_Protocol+0x328>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
					for (int i = 0; i < 4; i++) {
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	61fb      	str	r3, [r7, #28]
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	ddd2      	ble.n	8001df0 <Narwhal_Protocol+0xa8>
//						float T = 0.5;
//						for (int i = 0; i < 4; i++) {
//
//						}
					}
					Feedback[2] = 0x03;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	74bb      	strb	r3, [r7, #18]
					break;
 8001e4e:	e00d      	b.n	8001e6c <Narwhal_Protocol+0x124>
//							Traj_Coeff_Cal_Ds(Traj[4+i], T, TaskTrajSet[i],
//									Control[i].PositionFeedback,
//									Control[i].VelocityFeedback);
//						}
//					}
					Feedback[2] = 0x04;
 8001e50:	2304      	movs	r3, #4
 8001e52:	74bb      	strb	r3, [r7, #18]
					break;
 8001e54:	e00a      	b.n	8001e6c <Narwhal_Protocol+0x124>
				case 0x0C:
					/* Joint Set */
					Feedback[2] = 0x03;
 8001e56:	2303      	movs	r3, #3
 8001e58:	74bb      	strb	r3, [r7, #18]
					break;
 8001e5a:	e007      	b.n	8001e6c <Narwhal_Protocol+0x124>
				case 0x0D:
					/* Cartesian Set */
					Feedback[2] = 0x04;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	74bb      	strb	r3, [r7, #18]
					break;
 8001e60:	e004      	b.n	8001e6c <Narwhal_Protocol+0x124>
				case 0x0F:
					/* Chess Move */
					Feedback[2] = 0x05;
 8001e62:	2305      	movs	r3, #5
 8001e64:	74bb      	strb	r3, [r7, #18]
					break;
 8001e66:	e001      	b.n	8001e6c <Narwhal_Protocol+0x124>
				default:
					Feedback[2] = 0xFF;
 8001e68:	23ff      	movs	r3, #255	; 0xff
 8001e6a:	74bb      	strb	r3, [r7, #18]
				}
				Feedback[3] = CRC8(Feedback, 3);
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	2103      	movs	r1, #3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff52 	bl	8001d1c <CRC8>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	74fb      	strb	r3, [r7, #19]
				HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 8001e7c:	f107 0310 	add.w	r3, r7, #16
 8001e80:	2204      	movs	r2, #4
 8001e82:	4619      	mov	r1, r3
 8001e84:	487b      	ldr	r0, [pc, #492]	; (8002074 <Narwhal_Protocol+0x32c>)
 8001e86:	f00c fcbb 	bl	800e800 <HAL_UART_Transmit_IT>
 8001e8a:	e10e      	b.n	80020aa <Narwhal_Protocol+0x362>
				/* 		Data to MCU End	*/

			} else if ((UART5_rxBuffer[1] & 0xF0) == 0xA0) {
 8001e8c:	4b77      	ldr	r3, [pc, #476]	; (800206c <Narwhal_Protocol+0x324>)
 8001e8e:	785b      	ldrb	r3, [r3, #1]
 8001e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e94:	2ba0      	cmp	r3, #160	; 0xa0
 8001e96:	f040 8108 	bne.w	80020aa <Narwhal_Protocol+0x362>
				/* 		Sent Data to Master Start 	*/
				uint8_t Sent[13] = { 0xFF, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8001e9a:	4b77      	ldr	r3, [pc, #476]	; (8002078 <Narwhal_Protocol+0x330>)
 8001e9c:	463c      	mov	r4, r7
 8001e9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ea0:	c407      	stmia	r4!, {r0, r1, r2}
 8001ea2:	7023      	strb	r3, [r4, #0]
				switch (UART5_rxBuffer[1] & 0x0F) {
 8001ea4:	4b71      	ldr	r3, [pc, #452]	; (800206c <Narwhal_Protocol+0x324>)
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	2b0b      	cmp	r3, #11
 8001eae:	f200 80b9 	bhi.w	8002024 <Narwhal_Protocol+0x2dc>
 8001eb2:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <Narwhal_Protocol+0x170>)
 8001eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb8:	08001ee9 	.word	0x08001ee9
 8001ebc:	08001f31 	.word	0x08001f31
 8001ec0:	08001f55 	.word	0x08001f55
 8001ec4:	08002025 	.word	0x08002025
 8001ec8:	08002025 	.word	0x08002025
 8001ecc:	08002025 	.word	0x08002025
 8001ed0:	08002025 	.word	0x08002025
 8001ed4:	08002025 	.word	0x08002025
 8001ed8:	08002025 	.word	0x08002025
 8001edc:	08002025 	.word	0x08002025
 8001ee0:	08001fdd 	.word	0x08001fdd
 8001ee4:	08002001 	.word	0x08002001
				case 0x00:
					/* System Status */
					Sent[1] = 0xEE;
 8001ee8:	23ee      	movs	r3, #238	; 0xee
 8001eea:	707b      	strb	r3, [r7, #1]
					uint16_t T = Temperature * 1000;
 8001eec:	4b63      	ldr	r3, [pc, #396]	; (800207c <Narwhal_Protocol+0x334>)
 8001eee:	edd3 7a00 	vldr	s15, [r3]
 8001ef2:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002080 <Narwhal_Protocol+0x338>
 8001ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001efe:	ee17 3a90 	vmov	r3, s15
 8001f02:	82bb      	strh	r3, [r7, #20]
					Sent[2] = (uint8_t) ((T >> 8) & 0xFF);
 8001f04:	8abb      	ldrh	r3, [r7, #20]
 8001f06:	0a1b      	lsrs	r3, r3, #8
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	70bb      	strb	r3, [r7, #2]
					Sent[3] = (uint8_t) (T & 0xFF);
 8001f0e:	8abb      	ldrh	r3, [r7, #20]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	70fb      	strb	r3, [r7, #3]
					Sent[4] = CRC8(Sent, 4);
 8001f14:	463b      	mov	r3, r7
 8001f16:	2104      	movs	r1, #4
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff feff 	bl	8001d1c <CRC8>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	713b      	strb	r3, [r7, #4]
					HAL_UART_Transmit_IT(&huart5, Sent, 5);
 8001f22:	463b      	mov	r3, r7
 8001f24:	2205      	movs	r2, #5
 8001f26:	4619      	mov	r1, r3
 8001f28:	4852      	ldr	r0, [pc, #328]	; (8002074 <Narwhal_Protocol+0x32c>)
 8001f2a:	f00c fc69 	bl	800e800 <HAL_UART_Transmit_IT>
					break;
 8001f2e:	e0bc      	b.n	80020aa <Narwhal_Protocol+0x362>
				case 0x01:
					/* Station Encoder Position */
					Feedback[2] = 0x00;
 8001f30:	2300      	movs	r3, #0
 8001f32:	74bb      	strb	r3, [r7, #18]
					Feedback[3] = CRC8(Feedback, 3);
 8001f34:	f107 0310 	add.w	r3, r7, #16
 8001f38:	2103      	movs	r1, #3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff feee 	bl	8001d1c <CRC8>
 8001f40:	4603      	mov	r3, r0
 8001f42:	74fb      	strb	r3, [r7, #19]
					HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	2204      	movs	r2, #4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4849      	ldr	r0, [pc, #292]	; (8002074 <Narwhal_Protocol+0x32c>)
 8001f4e:	f00c fc57 	bl	800e800 <HAL_UART_Transmit_IT>
					break;
 8001f52:	e0aa      	b.n	80020aa <Narwhal_Protocol+0x362>
				case 0x02:
					/* Raw Joint Encoder Position */
					Sent[1] = 0xEE;
 8001f54:	23ee      	movs	r3, #238	; 0xee
 8001f56:	707b      	strb	r3, [r7, #1]
					for (int i = 0; i < 4; i++) {
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e02c      	b.n	8001fb8 <Narwhal_Protocol+0x270>
						Sent[2+i] = (uint8_t) ((Encoder[i].Position >> 8) && 0xFF);
 8001f5e:	4a49      	ldr	r2, [pc, #292]	; (8002084 <Narwhal_Protocol+0x33c>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	015b      	lsls	r3, r3, #5
 8001f64:	4413      	add	r3, r2
 8001f66:	330e      	adds	r3, #14
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bf14      	ite	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	2300      	moveq	r3, #0
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	f107 0120 	add.w	r1, r7, #32
 8001f84:	440b      	add	r3, r1
 8001f86:	f803 2c20 	strb.w	r2, [r3, #-32]
						Sent[3+i] = (uint8_t) (Encoder[i].Position && 0xFF);
 8001f8a:	4a3e      	ldr	r2, [pc, #248]	; (8002084 <Narwhal_Protocol+0x33c>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	4413      	add	r3, r2
 8001f92:	330e      	adds	r3, #14
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	3303      	adds	r3, #3
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f107 0120 	add.w	r1, r7, #32
 8001fac:	440b      	add	r3, r1
 8001fae:	f803 2c20 	strb.w	r2, [r3, #-32]
					for (int i = 0; i < 4; i++) {
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	ddcf      	ble.n	8001f5e <Narwhal_Protocol+0x216>
					}
					Sent[12] = CRC8(Feedback, 12);
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	210c      	movs	r1, #12
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fea9 	bl	8001d1c <CRC8>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	733b      	strb	r3, [r7, #12]
					HAL_UART_Transmit_IT(&huart5, Sent, 13);
 8001fce:	463b      	mov	r3, r7
 8001fd0:	220d      	movs	r2, #13
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4827      	ldr	r0, [pc, #156]	; (8002074 <Narwhal_Protocol+0x32c>)
 8001fd6:	f00c fc13 	bl	800e800 <HAL_UART_Transmit_IT>
					break;
 8001fda:	e066      	b.n	80020aa <Narwhal_Protocol+0x362>
				case 0x0A:
					/* Joint Space Position */
					Feedback[2] = 0x00;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	74bb      	strb	r3, [r7, #18]
					Feedback[3] = CRC8(Feedback, 3);
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fe98 	bl	8001d1c <CRC8>
 8001fec:	4603      	mov	r3, r0
 8001fee:	74fb      	strb	r3, [r7, #19]
					HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 8001ff0:	f107 0310 	add.w	r3, r7, #16
 8001ff4:	2204      	movs	r2, #4
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	481e      	ldr	r0, [pc, #120]	; (8002074 <Narwhal_Protocol+0x32c>)
 8001ffa:	f00c fc01 	bl	800e800 <HAL_UART_Transmit_IT>
					break;
 8001ffe:	e054      	b.n	80020aa <Narwhal_Protocol+0x362>
				case 0x0B:
					/* Task Space Position */
					Feedback[2] = 0x00;
 8002000:	2300      	movs	r3, #0
 8002002:	74bb      	strb	r3, [r7, #18]
					Feedback[3] = CRC8(Feedback, 3);
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	2103      	movs	r1, #3
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fe86 	bl	8001d1c <CRC8>
 8002010:	4603      	mov	r3, r0
 8002012:	74fb      	strb	r3, [r7, #19]
					HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	2204      	movs	r2, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4815      	ldr	r0, [pc, #84]	; (8002074 <Narwhal_Protocol+0x32c>)
 800201e:	f00c fbef 	bl	800e800 <HAL_UART_Transmit_IT>
					break;
 8002022:	e042      	b.n	80020aa <Narwhal_Protocol+0x362>
				default:
					Feedback[2] = 0xFF;
 8002024:	23ff      	movs	r3, #255	; 0xff
 8002026:	74bb      	strb	r3, [r7, #18]
					Feedback[3] = CRC8(Feedback, 3);
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	2103      	movs	r1, #3
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fe74 	bl	8001d1c <CRC8>
 8002034:	4603      	mov	r3, r0
 8002036:	74fb      	strb	r3, [r7, #19]
					HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	2204      	movs	r2, #4
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <Narwhal_Protocol+0x32c>)
 8002042:	f00c fbdd 	bl	800e800 <HAL_UART_Transmit_IT>
 8002046:	e030      	b.n	80020aa <Narwhal_Protocol+0x362>
				}
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			Feedback[1] = 0xCC;
 8002048:	23cc      	movs	r3, #204	; 0xcc
 800204a:	747b      	strb	r3, [r7, #17]
			Feedback[3] = CRC8(Feedback, 3);
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2103      	movs	r1, #3
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fe62 	bl	8001d1c <CRC8>
 8002058:	4603      	mov	r3, r0
 800205a:	74fb      	strb	r3, [r7, #19]
			HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	2204      	movs	r2, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4803      	ldr	r0, [pc, #12]	; (8002074 <Narwhal_Protocol+0x32c>)
 8002066:	f00c fbcb 	bl	800e800 <HAL_UART_Transmit_IT>
 800206a:	e01e      	b.n	80020aa <Narwhal_Protocol+0x362>
 800206c:	2000002c 	.word	0x2000002c
 8002070:	20000564 	.word	0x20000564
 8002074:	20000bdc 	.word	0x20000bdc
 8002078:	080113f4 	.word	0x080113f4
 800207c:	200002c8 	.word	0x200002c8
 8002080:	447a0000 	.word	0x447a0000
 8002084:	2000036c 	.word	0x2000036c
		}
	} else {
		/*		Header Error	*/
		Feedback[1] = 0xAA;
 8002088:	23aa      	movs	r3, #170	; 0xaa
 800208a:	747b      	strb	r3, [r7, #17]
		Feedback[3] = CRC8(Feedback, 3);
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2103      	movs	r1, #3
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe42 	bl	8001d1c <CRC8>
 8002098:	4603      	mov	r3, r0
 800209a:	74fb      	strb	r3, [r7, #19]
		HAL_UART_Transmit_IT(&huart5, Feedback, 4);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	2204      	movs	r2, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	4805      	ldr	r0, [pc, #20]	; (80020bc <Narwhal_Protocol+0x374>)
 80020a6:	f00c fbab 	bl	800e800 <HAL_UART_Transmit_IT>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 80020aa:	220e      	movs	r2, #14
 80020ac:	4904      	ldr	r1, [pc, #16]	; (80020c0 <Narwhal_Protocol+0x378>)
 80020ae:	4803      	ldr	r0, [pc, #12]	; (80020bc <Narwhal_Protocol+0x374>)
 80020b0:	f00c fc4e 	bl	800e950 <HAL_UART_Receive_IT>
}
 80020b4:	bf00      	nop
 80020b6:	3724      	adds	r7, #36	; 0x24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}
 80020bc:	20000bdc 	.word	0x20000bdc
 80020c0:	2000002c 	.word	0x2000002c

080020c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020cc:	e7fe      	b.n	80020cc <Error_Handler+0x8>
	...

080020d0 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <MX_SPI3_Init+0xa8>)
 80020d6:	4a29      	ldr	r2, [pc, #164]	; (800217c <MX_SPI3_Init+0xac>)
 80020d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <MX_SPI3_Init+0xa8>)
 80020dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80020e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80020e2:	4b25      	ldr	r3, [pc, #148]	; (8002178 <MX_SPI3_Init+0xa8>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e8:	4b23      	ldr	r3, [pc, #140]	; (8002178 <MX_SPI3_Init+0xa8>)
 80020ea:	2207      	movs	r2, #7
 80020ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ee:	4b22      	ldr	r3, [pc, #136]	; (8002178 <MX_SPI3_Init+0xa8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <MX_SPI3_Init+0xa8>)
 80020f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80020fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80020fc:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <MX_SPI3_Init+0xa8>)
 80020fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002102:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002106:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800210a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <MX_SPI3_Init+0xa8>)
 800210e:	2200      	movs	r2, #0
 8002110:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <MX_SPI3_Init+0xa8>)
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002120:	221d      	movs	r2, #29
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002126:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800212a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <MX_SPI3_Init+0xa8>)
 800212e:	2200      	movs	r2, #0
 8002130:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002134:	2200      	movs	r2, #0
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <MX_SPI3_Init+0xa8>)
 800213a:	2200      	movs	r2, #0
 800213c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800213e:	4b0e      	ldr	r3, [pc, #56]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002140:	2200      	movs	r2, #0
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002146:	2200      	movs	r2, #0
 8002148:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <MX_SPI3_Init+0xa8>)
 800214c:	2200      	movs	r2, #0
 800214e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002152:	2200      	movs	r2, #0
 8002154:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002158:	2200      	movs	r2, #0
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <MX_SPI3_Init+0xa8>)
 800215e:	2200      	movs	r2, #0
 8002160:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <MX_SPI3_Init+0xa8>)
 8002164:	f009 fd6a 	bl	800bc3c <HAL_SPI_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800216e:	f7ff ffa9 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200005e8 	.word	0x200005e8
 800217c:	40003c00 	.word	0x40003c00

08002180 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8002184:	4b27      	ldr	r3, [pc, #156]	; (8002224 <MX_SPI4_Init+0xa4>)
 8002186:	4a28      	ldr	r2, [pc, #160]	; (8002228 <MX_SPI4_Init+0xa8>)
 8002188:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <MX_SPI4_Init+0xa4>)
 800218c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002190:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002192:	4b24      	ldr	r3, [pc, #144]	; (8002224 <MX_SPI4_Init+0xa4>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <MX_SPI4_Init+0xa4>)
 800219a:	220f      	movs	r2, #15
 800219c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800219e:	4b21      	ldr	r3, [pc, #132]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021a4:	4b1f      	ldr	r3, [pc, #124]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80021aa:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80021b0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021b8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ba:	4b1a      	ldr	r3, [pc, #104]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021bc:	2200      	movs	r2, #0
 80021be:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80021c0:	4b18      	ldr	r3, [pc, #96]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80021cc:	4b15      	ldr	r3, [pc, #84]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021d8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80021e0:	4b10      	ldr	r3, [pc, #64]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021e6:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <MX_SPI4_Init+0xa4>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_SPI4_Init+0xa4>)
 8002200:	2200      	movs	r2, #0
 8002202:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <MX_SPI4_Init+0xa4>)
 8002206:	2200      	movs	r2, #0
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_SPI4_Init+0xa4>)
 800220c:	2200      	movs	r2, #0
 800220e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8002210:	4804      	ldr	r0, [pc, #16]	; (8002224 <MX_SPI4_Init+0xa4>)
 8002212:	f009 fd13 	bl	800bc3c <HAL_SPI_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 800221c:	f7ff ff52 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000670 	.word	0x20000670
 8002228:	40013400 	.word	0x40013400

0800222c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b0b8      	sub	sp, #224	; 0xe0
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002244:	f107 0318 	add.w	r3, r7, #24
 8002248:	22b4      	movs	r2, #180	; 0xb4
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f00f f8bd 	bl	80113cc <memset>
  if(spiHandle->Instance==SPI3)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a4b      	ldr	r2, [pc, #300]	; (8002384 <HAL_SPI_MspInit+0x158>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d156      	bne.n	800230a <HAL_SPI_MspInit+0xde>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800225c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002260:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8002262:	2319      	movs	r3, #25
 8002264:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 8002266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800226a:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800226c:	2302      	movs	r3, #2
 800226e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8002270:	2302      	movs	r3, #2
 8002272:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002274:	2302      	movs	r3, #2
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8002278:	2300      	movs	r3, #0
 800227a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800227c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002280:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8002286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800228a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800228c:	f107 0318 	add.w	r3, r7, #24
 8002290:	4618      	mov	r0, r3
 8002292:	f007 fc41 	bl	8009b18 <HAL_RCCEx_PeriphCLKConfig>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 800229c:	f7ff ff12 	bl	80020c4 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022a0:	4b39      	ldr	r3, [pc, #228]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 80022a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022a6:	4a38      	ldr	r2, [pc, #224]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 80022a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022b0:	4b35      	ldr	r3, [pc, #212]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 80022b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	4b32      	ldr	r3, [pc, #200]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c4:	4a30      	ldr	r2, [pc, #192]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 80022c6:	f043 0304 	orr.w	r3, r3, #4
 80022ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ce:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 80022d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80022dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80022e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022f6:	2306      	movs	r3, #6
 80022f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002300:	4619      	mov	r1, r3
 8002302:	4822      	ldr	r0, [pc, #136]	; (800238c <HAL_SPI_MspInit+0x160>)
 8002304:	f006 f992 	bl	800862c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8002308:	e038      	b.n	800237c <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a20      	ldr	r2, [pc, #128]	; (8002390 <HAL_SPI_MspInit+0x164>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d133      	bne.n	800237c <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002314:	4b1c      	ldr	r3, [pc, #112]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 8002316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800231a:	4a1b      	ldr	r2, [pc, #108]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 800231c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002320:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002324:	4b18      	ldr	r3, [pc, #96]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 8002326:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800232a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002332:	4b15      	ldr	r3, [pc, #84]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 8002334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 800233a:	f043 0310 	orr.w	r3, r3, #16
 800233e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002342:	4b11      	ldr	r3, [pc, #68]	; (8002388 <HAL_SPI_MspInit+0x15c>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	60bb      	str	r3, [r7, #8]
 800234e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8002350:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002354:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800236a:	2305      	movs	r3, #5
 800236c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002370:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002374:	4619      	mov	r1, r3
 8002376:	4807      	ldr	r0, [pc, #28]	; (8002394 <HAL_SPI_MspInit+0x168>)
 8002378:	f006 f958 	bl	800862c <HAL_GPIO_Init>
}
 800237c:	bf00      	nop
 800237e:	37e0      	adds	r7, #224	; 0xe0
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40003c00 	.word	0x40003c00
 8002388:	58024400 	.word	0x58024400
 800238c:	58020800 	.word	0x58020800
 8002390:	40013400 	.word	0x40013400
 8002394:	58021000 	.word	0x58021000

08002398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_MspInit+0x30>)
 80023a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023a4:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <HAL_MspInit+0x30>)
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_MspInit+0x30>)
 80023b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	58024400 	.word	0x58024400

080023cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <NMI_Handler+0x4>

080023d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <HardFault_Handler+0x4>

080023d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <MemManage_Handler+0x4>

080023de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <BusFault_Handler+0x4>

080023e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <UsageFault_Handler+0x4>

080023ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002418:	f001 fb74 	bl	8003b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}

08002420 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <DMA1_Stream0_IRQHandler+0x10>)
 8002426:	f004 ff9b 	bl	8007360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000744 	.word	0x20000744

08002434 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <USART3_IRQHandler+0x10>)
 800243a:	f00c fadf 	bl	800e9fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000b4c 	.word	0x20000b4c

08002448 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <UART5_IRQHandler+0x10>)
 800244e:	f00c fad5 	bl	800e9fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20000bdc 	.word	0x20000bdc

0800245c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <ADC3_IRQHandler+0x10>)
 8002462:	f002 f99b 	bl	800479c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000003c 	.word	0x2000003c

08002470 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <TIM23_IRQHandler+0x10>)
 8002476:	f00b f88f 	bl	800d598 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000a68 	.word	0x20000a68

08002484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <SystemInit+0xd8>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	4a33      	ldr	r2, [pc, #204]	; (800255c <SystemInit+0xd8>)
 8002490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002498:	4b31      	ldr	r3, [pc, #196]	; (8002560 <SystemInit+0xdc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	2b06      	cmp	r3, #6
 80024a2:	d807      	bhi.n	80024b4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024a4:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <SystemInit+0xdc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 030f 	bic.w	r3, r3, #15
 80024ac:	4a2c      	ldr	r2, [pc, #176]	; (8002560 <SystemInit+0xdc>)
 80024ae:	f043 0307 	orr.w	r3, r3, #7
 80024b2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <SystemInit+0xe0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2a      	ldr	r2, [pc, #168]	; (8002564 <SystemInit+0xe0>)
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024c0:	4b28      	ldr	r3, [pc, #160]	; (8002564 <SystemInit+0xe0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <SystemInit+0xe0>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4926      	ldr	r1, [pc, #152]	; (8002564 <SystemInit+0xe0>)
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <SystemInit+0xe4>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80024d2:	4b23      	ldr	r3, [pc, #140]	; (8002560 <SystemInit+0xdc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80024de:	4b20      	ldr	r3, [pc, #128]	; (8002560 <SystemInit+0xdc>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 030f 	bic.w	r3, r3, #15
 80024e6:	4a1e      	ldr	r2, [pc, #120]	; (8002560 <SystemInit+0xdc>)
 80024e8:	f043 0307 	orr.w	r3, r3, #7
 80024ec:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024ee:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <SystemInit+0xe0>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <SystemInit+0xe0>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <SystemInit+0xe0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002500:	4b18      	ldr	r3, [pc, #96]	; (8002564 <SystemInit+0xe0>)
 8002502:	4a1a      	ldr	r2, [pc, #104]	; (800256c <SystemInit+0xe8>)
 8002504:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002506:	4b17      	ldr	r3, [pc, #92]	; (8002564 <SystemInit+0xe0>)
 8002508:	4a19      	ldr	r2, [pc, #100]	; (8002570 <SystemInit+0xec>)
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800250c:	4b15      	ldr	r3, [pc, #84]	; (8002564 <SystemInit+0xe0>)
 800250e:	4a19      	ldr	r2, [pc, #100]	; (8002574 <SystemInit+0xf0>)
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <SystemInit+0xe0>)
 8002514:	2200      	movs	r2, #0
 8002516:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <SystemInit+0xe0>)
 800251a:	4a16      	ldr	r2, [pc, #88]	; (8002574 <SystemInit+0xf0>)
 800251c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <SystemInit+0xe0>)
 8002520:	2200      	movs	r2, #0
 8002522:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <SystemInit+0xe0>)
 8002526:	4a13      	ldr	r2, [pc, #76]	; (8002574 <SystemInit+0xf0>)
 8002528:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <SystemInit+0xe0>)
 800252c:	2200      	movs	r2, #0
 800252e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <SystemInit+0xe0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <SystemInit+0xe0>)
 8002536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <SystemInit+0xe0>)
 800253e:	2200      	movs	r2, #0
 8002540:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002542:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <SystemInit+0xf4>)
 8002544:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002548:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SystemInit+0xd8>)
 800254c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002550:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00
 8002560:	52002000 	.word	0x52002000
 8002564:	58024400 	.word	0x58024400
 8002568:	eaf6ed7f 	.word	0xeaf6ed7f
 800256c:	02020200 	.word	0x02020200
 8002570:	01ff0000 	.word	0x01ff0000
 8002574:	01010280 	.word	0x01010280
 8002578:	52004000 	.word	0x52004000

0800257c <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b098      	sub	sp, #96	; 0x60
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002582:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800258e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
 800259a:	60da      	str	r2, [r3, #12]
 800259c:	611a      	str	r2, [r3, #16]
 800259e:	615a      	str	r2, [r3, #20]
 80025a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2234      	movs	r2, #52	; 0x34
 80025a6:	2100      	movs	r1, #0
 80025a8:	4618      	mov	r0, r3
 80025aa:	f00e ff0f 	bl	80113cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025ae:	4b39      	ldr	r3, [pc, #228]	; (8002694 <MX_TIM1_Init+0x118>)
 80025b0:	4a39      	ldr	r2, [pc, #228]	; (8002698 <MX_TIM1_Init+0x11c>)
 80025b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80025b4:	4b37      	ldr	r3, [pc, #220]	; (8002694 <MX_TIM1_Init+0x118>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ba:	4b36      	ldr	r3, [pc, #216]	; (8002694 <MX_TIM1_Init+0x118>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 80025c0:	4b34      	ldr	r3, [pc, #208]	; (8002694 <MX_TIM1_Init+0x118>)
 80025c2:	f240 1257 	movw	r2, #343	; 0x157
 80025c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <MX_TIM1_Init+0x118>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <MX_TIM1_Init+0x118>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <MX_TIM1_Init+0x118>)
 80025d6:	2280      	movs	r2, #128	; 0x80
 80025d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80025da:	482e      	ldr	r0, [pc, #184]	; (8002694 <MX_TIM1_Init+0x118>)
 80025dc:	f00a fcca 	bl	800cf74 <HAL_TIM_PWM_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80025e6:	f7ff fd6d 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80025f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025fa:	4619      	mov	r1, r3
 80025fc:	4825      	ldr	r0, [pc, #148]	; (8002694 <MX_TIM1_Init+0x118>)
 80025fe:	f00b ff55 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002608:	f7ff fd5c 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800260c:	2360      	movs	r3, #96	; 0x60
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002614:	2300      	movs	r3, #0
 8002616:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002618:	2300      	movs	r3, #0
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800261c:	2304      	movs	r3, #4
 800261e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002628:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800262c:	2200      	movs	r2, #0
 800262e:	4619      	mov	r1, r3
 8002630:	4818      	ldr	r0, [pc, #96]	; (8002694 <MX_TIM1_Init+0x118>)
 8002632:	f00b f8d1 	bl	800d7d8 <HAL_TIM_PWM_ConfigChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800263c:	f7ff fd42 	bl	80020c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002648:	2300      	movs	r3, #0
 800264a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002658:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	4619      	mov	r1, r3
 8002674:	4807      	ldr	r0, [pc, #28]	; (8002694 <MX_TIM1_Init+0x118>)
 8002676:	f00b ffb5 	bl	800e5e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002680:	f7ff fd20 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002684:	4803      	ldr	r0, [pc, #12]	; (8002694 <MX_TIM1_Init+0x118>)
 8002686:	f000 febf 	bl	8003408 <HAL_TIM_MspPostInit>

}
 800268a:	bf00      	nop
 800268c:	3760      	adds	r7, #96	; 0x60
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000a1c 	.word	0x20000a1c
 8002698:	40010000 	.word	0x40010000

0800269c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08e      	sub	sp, #56	; 0x38
 80026a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	605a      	str	r2, [r3, #4]
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026bc:	463b      	mov	r3, r7
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	611a      	str	r2, [r3, #16]
 80026ca:	615a      	str	r2, [r3, #20]
 80026cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <MX_TIM3_Init+0xe8>)
 80026d0:	4a2d      	ldr	r2, [pc, #180]	; (8002788 <MX_TIM3_Init+0xec>)
 80026d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <MX_TIM3_Init+0xe8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <MX_TIM3_Init+0xe8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <MX_TIM3_Init+0xe8>)
 80026e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e8:	4b26      	ldr	r3, [pc, #152]	; (8002784 <MX_TIM3_Init+0xe8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <MX_TIM3_Init+0xe8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026f4:	4823      	ldr	r0, [pc, #140]	; (8002784 <MX_TIM3_Init+0xe8>)
 80026f6:	f00a fb60 	bl	800cdba <HAL_TIM_Base_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002700:	f7ff fce0 	bl	80020c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002708:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800270a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800270e:	4619      	mov	r1, r3
 8002710:	481c      	ldr	r0, [pc, #112]	; (8002784 <MX_TIM3_Init+0xe8>)
 8002712:	f00b f975 	bl	800da00 <HAL_TIM_ConfigClockSource>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800271c:	f7ff fcd2 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002720:	4818      	ldr	r0, [pc, #96]	; (8002784 <MX_TIM3_Init+0xe8>)
 8002722:	f00a fc27 	bl	800cf74 <HAL_TIM_PWM_Init>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800272c:	f7ff fcca 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002730:	2300      	movs	r3, #0
 8002732:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002734:	2300      	movs	r3, #0
 8002736:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002738:	f107 031c 	add.w	r3, r7, #28
 800273c:	4619      	mov	r1, r3
 800273e:	4811      	ldr	r0, [pc, #68]	; (8002784 <MX_TIM3_Init+0xe8>)
 8002740:	f00b feb4 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800274a:	f7ff fcbb 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800274e:	2360      	movs	r3, #96	; 0x60
 8002750:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800275e:	463b      	mov	r3, r7
 8002760:	2200      	movs	r2, #0
 8002762:	4619      	mov	r1, r3
 8002764:	4807      	ldr	r0, [pc, #28]	; (8002784 <MX_TIM3_Init+0xe8>)
 8002766:	f00b f837 	bl	800d7d8 <HAL_TIM_PWM_ConfigChannel>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002770:	f7ff fca8 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002774:	4803      	ldr	r0, [pc, #12]	; (8002784 <MX_TIM3_Init+0xe8>)
 8002776:	f000 fe47 	bl	8003408 <HAL_TIM_MspPostInit>

}
 800277a:	bf00      	nop
 800277c:	3738      	adds	r7, #56	; 0x38
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000938 	.word	0x20000938
 8002788:	40000400 	.word	0x40000400

0800278c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b08c      	sub	sp, #48	; 0x30
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	2100      	movs	r1, #0
 800279a:	4618      	mov	r0, r3
 800279c:	f00e fe16 	bl	80113cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027a0:	463b      	mov	r3, r7
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	605a      	str	r2, [r3, #4]
 80027a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <MX_TIM4_Init+0xa4>)
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <MX_TIM4_Init+0xa8>)
 80027ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80027b0:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <MX_TIM4_Init+0xa4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <MX_TIM4_Init+0xa4>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 80027bc:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <MX_TIM4_Init+0xa4>)
 80027be:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80027c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c4:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <MX_TIM4_Init+0xa4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <MX_TIM4_Init+0xa4>)
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027d0:	2303      	movs	r3, #3
 80027d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027d8:	2301      	movs	r3, #1
 80027da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027e4:	2300      	movs	r3, #0
 80027e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027e8:	2301      	movs	r3, #1
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027ec:	2300      	movs	r3, #0
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	4619      	mov	r1, r3
 80027fa:	480d      	ldr	r0, [pc, #52]	; (8002830 <MX_TIM4_Init+0xa4>)
 80027fc:	f00a fe26 	bl	800d44c <HAL_TIM_Encoder_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8002806:	f7ff fc5d 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280a:	2300      	movs	r3, #0
 800280c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002812:	463b      	mov	r3, r7
 8002814:	4619      	mov	r1, r3
 8002816:	4806      	ldr	r0, [pc, #24]	; (8002830 <MX_TIM4_Init+0xa4>)
 8002818:	f00b fe48 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002822:	f7ff fc4f 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	3730      	adds	r7, #48	; 0x30
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000808 	.word	0x20000808
 8002834:	40000800 	.word	0x40000800

08002838 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	; 0x30
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	2224      	movs	r2, #36	; 0x24
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f00e fdc0 	bl	80113cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284c:	463b      	mov	r3, r7
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002856:	4b21      	ldr	r3, [pc, #132]	; (80028dc <MX_TIM5_Init+0xa4>)
 8002858:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <MX_TIM5_Init+0xa8>)
 800285a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <MX_TIM5_Init+0xa4>)
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002862:	4b1e      	ldr	r3, [pc, #120]	; (80028dc <MX_TIM5_Init+0xa4>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 16383;
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <MX_TIM5_Init+0xa4>)
 800286a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800286e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <MX_TIM5_Init+0xa4>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <MX_TIM5_Init+0xa4>)
 8002878:	2280      	movs	r2, #128	; 0x80
 800287a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800287c:	2303      	movs	r3, #3
 800287e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002884:	2301      	movs	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002894:	2301      	movs	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	480d      	ldr	r0, [pc, #52]	; (80028dc <MX_TIM5_Init+0xa4>)
 80028a8:	f00a fdd0 	bl	800d44c <HAL_TIM_Encoder_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80028b2:	f7ff fc07 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80028be:	463b      	mov	r3, r7
 80028c0:	4619      	mov	r1, r3
 80028c2:	4806      	ldr	r0, [pc, #24]	; (80028dc <MX_TIM5_Init+0xa4>)
 80028c4:	f00b fdf2 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80028ce:	f7ff fbf9 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80028d2:	bf00      	nop
 80028d4:	3730      	adds	r7, #48	; 0x30
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200008ec 	.word	0x200008ec
 80028e0:	40000c00 	.word	0x40000c00

080028e4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ea:	1d3b      	adds	r3, r7, #4
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <MX_TIM6_Init+0x68>)
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <MX_TIM6_Init+0x6c>)
 80028f8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <MX_TIM6_Init+0x68>)
 80028fc:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002900:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <MX_TIM6_Init+0x68>)
 8002904:	2200      	movs	r2, #0
 8002906:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002908:	4b10      	ldr	r3, [pc, #64]	; (800294c <MX_TIM6_Init+0x68>)
 800290a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800290e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <MX_TIM6_Init+0x68>)
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002916:	480d      	ldr	r0, [pc, #52]	; (800294c <MX_TIM6_Init+0x68>)
 8002918:	f00a fa4f 	bl	800cdba <HAL_TIM_Base_Init>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002922:	f7ff fbcf 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4806      	ldr	r0, [pc, #24]	; (800294c <MX_TIM6_Init+0x68>)
 8002934:	f00b fdba 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800293e:	f7ff fbc1 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002942:	bf00      	nop
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	200009d0 	.word	0x200009d0
 8002950:	40001000 	.word	0x40001000

08002954 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	; 0x30
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800295a:	f107 030c 	add.w	r3, r7, #12
 800295e:	2224      	movs	r2, #36	; 0x24
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f00e fd32 	bl	80113cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002968:	463b      	mov	r3, r7
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002972:	4b23      	ldr	r3, [pc, #140]	; (8002a00 <MX_TIM8_Init+0xac>)
 8002974:	4a23      	ldr	r2, [pc, #140]	; (8002a04 <MX_TIM8_Init+0xb0>)
 8002976:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002978:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <MX_TIM8_Init+0xac>)
 800297a:	2200      	movs	r2, #0
 800297c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <MX_TIM8_Init+0xac>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8002984:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <MX_TIM8_Init+0xac>)
 8002986:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800298a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <MX_TIM8_Init+0xac>)
 800298e:	2200      	movs	r2, #0
 8002990:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <MX_TIM8_Init+0xac>)
 8002994:	2200      	movs	r2, #0
 8002996:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <MX_TIM8_Init+0xac>)
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800299e:	2303      	movs	r3, #3
 80029a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029a6:	2301      	movs	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029b2:	2300      	movs	r3, #0
 80029b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029b6:	2301      	movs	r3, #1
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80029c2:	f107 030c 	add.w	r3, r7, #12
 80029c6:	4619      	mov	r1, r3
 80029c8:	480d      	ldr	r0, [pc, #52]	; (8002a00 <MX_TIM8_Init+0xac>)
 80029ca:	f00a fd3f 	bl	800d44c <HAL_TIM_Encoder_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80029d4:	f7ff fb76 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80029dc:	2300      	movs	r3, #0
 80029de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80029e4:	463b      	mov	r3, r7
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	; (8002a00 <MX_TIM8_Init+0xac>)
 80029ea:	f00b fd5f 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80029f4:	f7ff fb66 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	3730      	adds	r7, #48	; 0x30
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200007bc 	.word	0x200007bc
 8002a04:	40010400 	.word	0x40010400

08002a08 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
 8002a1c:	615a      	str	r2, [r3, #20]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a22:	4a20      	ldr	r2, [pc, #128]	; (8002aa4 <MX_TIM13_Init+0x9c>)
 8002a24:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a28:	f240 2225 	movw	r2, #549	; 0x225
 8002a2c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a36:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a3a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002a48:	4815      	ldr	r0, [pc, #84]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a4a:	f00a f9b6 	bl	800cdba <HAL_TIM_Base_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8002a54:	f7ff fb36 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002a58:	4811      	ldr	r0, [pc, #68]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a5a:	f00a fa8b 	bl	800cf74 <HAL_TIM_PWM_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8002a64:	f7ff fb2e 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a68:	2360      	movs	r3, #96	; 0x60
 8002a6a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002a6c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a7a:	1d3b      	adds	r3, r7, #4
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a82:	f00a fea9 	bl	800d7d8 <HAL_TIM_PWM_ConfigChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8002a8c:	f7ff fb1a 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002a90:	4803      	ldr	r0, [pc, #12]	; (8002aa0 <MX_TIM13_Init+0x98>)
 8002a92:	f000 fcb9 	bl	8003408 <HAL_TIM_MspPostInit>

}
 8002a96:	bf00      	nop
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000984 	.word	0x20000984
 8002aa4:	40001c00 	.word	0x40001c00

08002aa8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
 8002abc:	615a      	str	r2, [r3, #20]
 8002abe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002ac0:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002ac2:	4a20      	ldr	r2, [pc, #128]	; (8002b44 <MX_TIM14_Init+0x9c>)
 8002ac4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8002ac6:	4b1e      	ldr	r3, [pc, #120]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002ac8:	f240 2225 	movw	r2, #549	; 0x225
 8002acc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ace:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8002ad4:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ada:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002adc:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ae2:	4b17      	ldr	r3, [pc, #92]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002ae8:	4815      	ldr	r0, [pc, #84]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002aea:	f00a f966 	bl	800cdba <HAL_TIM_Base_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8002af4:	f7ff fae6 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002af8:	4811      	ldr	r0, [pc, #68]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002afa:	f00a fa3b 	bl	800cf74 <HAL_TIM_PWM_Init>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8002b04:	f7ff fade 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b08:	2360      	movs	r3, #96	; 0x60
 8002b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002b0c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002b10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4807      	ldr	r0, [pc, #28]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002b22:	f00a fe59 	bl	800d7d8 <HAL_TIM_PWM_ConfigChannel>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8002b2c:	f7ff faca 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002b30:	4803      	ldr	r0, [pc, #12]	; (8002b40 <MX_TIM14_Init+0x98>)
 8002b32:	f000 fc69 	bl	8003408 <HAL_TIM_MspPostInit>

}
 8002b36:	bf00      	nop
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20000ab4 	.word	0x20000ab4
 8002b44:	40002000 	.word	0x40002000

08002b48 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b098      	sub	sp, #96	; 0x60
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	611a      	str	r2, [r3, #16]
 8002b6a:	615a      	str	r2, [r3, #20]
 8002b6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	2234      	movs	r2, #52	; 0x34
 8002b72:	2100      	movs	r1, #0
 8002b74:	4618      	mov	r0, r3
 8002b76:	f00e fc29 	bl	80113cc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002b7a:	4b35      	ldr	r3, [pc, #212]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002b7c:	4a35      	ldr	r2, [pc, #212]	; (8002c54 <MX_TIM15_Init+0x10c>)
 8002b7e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8002b80:	4b33      	ldr	r3, [pc, #204]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002b82:	f240 2225 	movw	r2, #549	; 0x225
 8002b86:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b88:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8002b8e:	4b30      	ldr	r3, [pc, #192]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b94:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b96:	4b2e      	ldr	r3, [pc, #184]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ba2:	4b2b      	ldr	r3, [pc, #172]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002ba8:	4829      	ldr	r0, [pc, #164]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002baa:	f00a f9e3 	bl	800cf74 <HAL_TIM_PWM_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8002bb4:	f7ff fa86 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002bc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4822      	ldr	r0, [pc, #136]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002bc8:	f00b fc70 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8002bd2:	f7ff fa77 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bd6:	2360      	movs	r3, #96	; 0x60
 8002bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 8002bda:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002be0:	2300      	movs	r3, #0
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002be4:	2300      	movs	r3, #0
 8002be6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002be8:	2300      	movs	r3, #0
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bec:	2300      	movs	r3, #0
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4814      	ldr	r0, [pc, #80]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002bfe:	f00a fdeb 	bl	800d7d8 <HAL_TIM_PWM_ConfigChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 8002c08:	f7ff fa5c 	bl	80020c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4807      	ldr	r0, [pc, #28]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002c34:	f00b fcd6 	bl	800e5e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8002c3e:	f7ff fa41 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002c42:	4803      	ldr	r0, [pc, #12]	; (8002c50 <MX_TIM15_Init+0x108>)
 8002c44:	f000 fbe0 	bl	8003408 <HAL_TIM_MspPostInit>

}
 8002c48:	bf00      	nop
 8002c4a:	3760      	adds	r7, #96	; 0x60
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000854 	.word	0x20000854
 8002c54:	40014000 	.word	0x40014000

08002c58 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b094      	sub	sp, #80	; 0x50
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c62:	2200      	movs	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	609a      	str	r2, [r3, #8]
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	611a      	str	r2, [r3, #16]
 8002c6e:	615a      	str	r2, [r3, #20]
 8002c70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c72:	463b      	mov	r3, r7
 8002c74:	2234      	movs	r2, #52	; 0x34
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f00e fba7 	bl	80113cc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002c7e:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002c80:	4a32      	ldr	r2, [pc, #200]	; (8002d4c <MX_TIM16_Init+0xf4>)
 8002c82:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8002c84:	4b30      	ldr	r3, [pc, #192]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002c86:	f240 2225 	movw	r2, #549	; 0x225
 8002c8a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8c:	4b2e      	ldr	r3, [pc, #184]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c98:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c9a:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ca6:	4b28      	ldr	r3, [pc, #160]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002ca8:	2280      	movs	r2, #128	; 0x80
 8002caa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002cac:	4826      	ldr	r0, [pc, #152]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002cae:	f00a f884 	bl	800cdba <HAL_TIM_Base_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8002cb8:	f7ff fa04 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002cbc:	4822      	ldr	r0, [pc, #136]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002cbe:	f00a f959 	bl	800cf74 <HAL_TIM_PWM_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8002cc8:	f7ff f9fc 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ccc:	2360      	movs	r3, #96	; 0x60
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002cd0:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002cea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4815      	ldr	r0, [pc, #84]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002cf4:	f00a fd70 	bl	800d7d8 <HAL_TIM_PWM_ConfigChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8002cfe:	f7ff f9e1 	bl	80020c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d02:	2300      	movs	r3, #0
 8002d04:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002d24:	463b      	mov	r3, r7
 8002d26:	4619      	mov	r1, r3
 8002d28:	4807      	ldr	r0, [pc, #28]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002d2a:	f00b fc5b 	bl	800e5e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8002d34:	f7ff f9c6 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002d38:	4803      	ldr	r0, [pc, #12]	; (8002d48 <MX_TIM16_Init+0xf0>)
 8002d3a:	f000 fb65 	bl	8003408 <HAL_TIM_MspPostInit>

}
 8002d3e:	bf00      	nop
 8002d40:	3750      	adds	r7, #80	; 0x50
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000b00 	.word	0x20000b00
 8002d4c:	40014400 	.word	0x40014400

08002d50 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b094      	sub	sp, #80	; 0x50
 8002d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	605a      	str	r2, [r3, #4]
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	60da      	str	r2, [r3, #12]
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	615a      	str	r2, [r3, #20]
 8002d68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d6a:	463b      	mov	r3, r7
 8002d6c:	2234      	movs	r2, #52	; 0x34
 8002d6e:	2100      	movs	r1, #0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f00e fb2b 	bl	80113cc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002d76:	4b32      	ldr	r3, [pc, #200]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002d78:	4a32      	ldr	r2, [pc, #200]	; (8002e44 <MX_TIM17_Init+0xf4>)
 8002d7a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8002d7c:	4b30      	ldr	r3, [pc, #192]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002d7e:	f240 2225 	movw	r2, #549	; 0x225
 8002d82:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d84:	4b2e      	ldr	r3, [pc, #184]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8002d8a:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d90:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d92:	4b2b      	ldr	r3, [pc, #172]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002d98:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d9e:	4b28      	ldr	r3, [pc, #160]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002da0:	2280      	movs	r2, #128	; 0x80
 8002da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002da4:	4826      	ldr	r0, [pc, #152]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002da6:	f00a f808 	bl	800cdba <HAL_TIM_Base_Init>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8002db0:	f7ff f988 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002db4:	4822      	ldr	r0, [pc, #136]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002db6:	f00a f8dd 	bl	800cf74 <HAL_TIM_PWM_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8002dc0:	f7ff f980 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc4:	2360      	movs	r3, #96	; 0x60
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002dc8:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002dde:	2300      	movs	r3, #0
 8002de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002de2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002de6:	2200      	movs	r2, #0
 8002de8:	4619      	mov	r1, r3
 8002dea:	4815      	ldr	r0, [pc, #84]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002dec:	f00a fcf4 	bl	800d7d8 <HAL_TIM_PWM_ConfigChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8002df6:	f7ff f965 	bl	80020c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e06:	2300      	movs	r3, #0
 8002e08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e12:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4807      	ldr	r0, [pc, #28]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002e22:	f00b fbdf 	bl	800e5e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8002e2c:	f7ff f94a 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002e30:	4803      	ldr	r0, [pc, #12]	; (8002e40 <MX_TIM17_Init+0xf0>)
 8002e32:	f000 fae9 	bl	8003408 <HAL_TIM_MspPostInit>

}
 8002e36:	bf00      	nop
 8002e38:	3750      	adds	r7, #80	; 0x50
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200008a0 	.word	0x200008a0
 8002e44:	40014800 	.word	0x40014800

08002e48 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e4e:	f107 0310 	add.w	r3, r7, #16
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	609a      	str	r2, [r3, #8]
 8002e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8002e66:	4b1e      	ldr	r3, [pc, #120]	; (8002ee0 <MX_TIM23_Init+0x98>)
 8002e68:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <MX_TIM23_Init+0x9c>)
 8002e6a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8002e6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <MX_TIM23_Init+0x98>)
 8002e6e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002e72:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <MX_TIM23_Init+0x98>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 10000-1;
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <MX_TIM23_Init+0x98>)
 8002e7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e80:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <MX_TIM23_Init+0x98>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <MX_TIM23_Init+0x98>)
 8002e8a:	2280      	movs	r2, #128	; 0x80
 8002e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8002e8e:	4814      	ldr	r0, [pc, #80]	; (8002ee0 <MX_TIM23_Init+0x98>)
 8002e90:	f009 ff93 	bl	800cdba <HAL_TIM_Base_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8002e9a:	f7ff f913 	bl	80020c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ea2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8002ea4:	f107 0310 	add.w	r3, r7, #16
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	480d      	ldr	r0, [pc, #52]	; (8002ee0 <MX_TIM23_Init+0x98>)
 8002eac:	f00a fda8 	bl	800da00 <HAL_TIM_ConfigClockSource>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8002eb6:	f7ff f905 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002ec2:	1d3b      	adds	r3, r7, #4
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	4806      	ldr	r0, [pc, #24]	; (8002ee0 <MX_TIM23_Init+0x98>)
 8002ec8:	f00b faf0 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8002ed2:	f7ff f8f7 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8002ed6:	bf00      	nop
 8002ed8:	3720      	adds	r7, #32
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000a68 	.word	0x20000a68
 8002ee4:	4000e000 	.word	0x4000e000

08002ee8 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eee:	f107 0310 	add.w	r3, r7, #16
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	605a      	str	r2, [r3, #4]
 8002f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <MX_TIM24_Init+0x98>)
 8002f08:	4a1e      	ldr	r2, [pc, #120]	; (8002f84 <MX_TIM24_Init+0x9c>)
 8002f0a:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <MX_TIM24_Init+0x98>)
 8002f0e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002f12:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f14:	4b1a      	ldr	r3, [pc, #104]	; (8002f80 <MX_TIM24_Init+0x98>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <MX_TIM24_Init+0x98>)
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f22:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <MX_TIM24_Init+0x98>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <MX_TIM24_Init+0x98>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8002f2e:	4814      	ldr	r0, [pc, #80]	; (8002f80 <MX_TIM24_Init+0x98>)
 8002f30:	f009 ff43 	bl	800cdba <HAL_TIM_Base_Init>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8002f3a:	f7ff f8c3 	bl	80020c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8002f44:	f107 0310 	add.w	r3, r7, #16
 8002f48:	4619      	mov	r1, r3
 8002f4a:	480d      	ldr	r0, [pc, #52]	; (8002f80 <MX_TIM24_Init+0x98>)
 8002f4c:	f00a fd58 	bl	800da00 <HAL_TIM_ConfigClockSource>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8002f56:	f7ff f8b5 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	4619      	mov	r1, r3
 8002f66:	4806      	ldr	r0, [pc, #24]	; (8002f80 <MX_TIM24_Init+0x98>)
 8002f68:	f00b faa0 	bl	800e4ac <HAL_TIMEx_MasterConfigSynchronization>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8002f72:	f7ff f8a7 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002f76:	bf00      	nop
 8002f78:	3720      	adds	r7, #32
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200006f8 	.word	0x200006f8
 8002f84:	4000e400 	.word	0x4000e400

08002f88 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	; 0x28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f90:	f107 0314 	add.w	r3, r7, #20
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
 8002f9c:	60da      	str	r2, [r3, #12]
 8002f9e:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <HAL_TIM_PWM_MspInit+0x110>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d15e      	bne.n	8003068 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002faa:	4b3c      	ldr	r3, [pc, #240]	; (800309c <HAL_TIM_PWM_MspInit+0x114>)
 8002fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fb0:	4a3a      	ldr	r2, [pc, #232]	; (800309c <HAL_TIM_PWM_MspInit+0x114>)
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_TIM_PWM_MspInit+0x114>)
 8002fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc8:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_TIM_PWM_MspInit+0x114>)
 8002fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fce:	4a33      	ldr	r2, [pc, #204]	; (800309c <HAL_TIM_PWM_MspInit+0x114>)
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd8:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_TIM_PWM_MspInit+0x114>)
 8002fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 8002fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	4619      	mov	r1, r3
 8003002:	4827      	ldr	r0, [pc, #156]	; (80030a0 <HAL_TIM_PWM_MspInit+0x118>)
 8003004:	f005 fb12 	bl	800862c <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 8003008:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 800300a:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <HAL_TIM_PWM_MspInit+0x120>)
 800300c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800300e:	4b25      	ldr	r3, [pc, #148]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 8003010:	220b      	movs	r2, #11
 8003012:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003014:	4b23      	ldr	r3, [pc, #140]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800301a:	4b22      	ldr	r3, [pc, #136]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 800301c:	2200      	movs	r2, #0
 800301e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003020:	4b20      	ldr	r3, [pc, #128]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 8003022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003026:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 800302a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800302e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003030:	4b1c      	ldr	r3, [pc, #112]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 8003032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003036:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003038:	4b1a      	ldr	r3, [pc, #104]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 800303a:	2200      	movs	r2, #0
 800303c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800303e:	4b19      	ldr	r3, [pc, #100]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 8003040:	2200      	movs	r2, #0
 8003042:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003044:	4b17      	ldr	r3, [pc, #92]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 8003046:	2200      	movs	r2, #0
 8003048:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800304a:	4816      	ldr	r0, [pc, #88]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 800304c:	f003 f8cc 	bl	80061e8 <HAL_DMA_Init>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 8003056:	f7ff f835 	bl	80020c4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a11      	ldr	r2, [pc, #68]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 800305e:	625a      	str	r2, [r3, #36]	; 0x24
 8003060:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <HAL_TIM_PWM_MspInit+0x11c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003066:	e013      	b.n	8003090 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <HAL_TIM_PWM_MspInit+0x124>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_TIM_PWM_MspInit+0x114>)
 8003074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003078:	4a08      	ldr	r2, [pc, #32]	; (800309c <HAL_TIM_PWM_MspInit+0x114>)
 800307a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800307e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_TIM_PWM_MspInit+0x114>)
 8003084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
}
 8003090:	bf00      	nop
 8003092:	3728      	adds	r7, #40	; 0x28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40010000 	.word	0x40010000
 800309c:	58024400 	.word	0x58024400
 80030a0:	58020000 	.word	0x58020000
 80030a4:	20000744 	.word	0x20000744
 80030a8:	40020010 	.word	0x40020010
 80030ac:	40014000 	.word	0x40014000

080030b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b090      	sub	sp, #64	; 0x40
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a67      	ldr	r2, [pc, #412]	; (800326c <HAL_TIM_Base_MspInit+0x1bc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d12e      	bne.n	8003130 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030d2:	4b67      	ldr	r3, [pc, #412]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80030d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030d8:	4a65      	ldr	r2, [pc, #404]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80030da:	f043 0302 	orr.w	r3, r3, #2
 80030de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030e2:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80030e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030e8:	f003 0302 	and.w	r3, r3, #2
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f0:	4b5f      	ldr	r3, [pc, #380]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80030f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f6:	4a5e      	ldr	r2, [pc, #376]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80030f8:	f043 0302 	orr.w	r3, r3, #2
 80030fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003100:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 8003102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
 800310c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 800310e:	2320      	movs	r3, #32
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003112:	2302      	movs	r3, #2
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003116:	2300      	movs	r3, #0
 8003118:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	2300      	movs	r3, #0
 800311c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800311e:	2302      	movs	r3, #2
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 8003122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003126:	4619      	mov	r1, r3
 8003128:	4852      	ldr	r0, [pc, #328]	; (8003274 <HAL_TIM_Base_MspInit+0x1c4>)
 800312a:	f005 fa7f 	bl	800862c <HAL_GPIO_Init>
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 800312e:	e099      	b.n	8003264 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM6)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a50      	ldr	r2, [pc, #320]	; (8003278 <HAL_TIM_Base_MspInit+0x1c8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d10f      	bne.n	800315a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800313a:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 800313c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003140:	4a4b      	ldr	r2, [pc, #300]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 8003142:	f043 0310 	orr.w	r3, r3, #16
 8003146:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800314a:	4b49      	ldr	r3, [pc, #292]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 800314c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	6a3b      	ldr	r3, [r7, #32]
}
 8003158:	e084      	b.n	8003264 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM13)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a47      	ldr	r2, [pc, #284]	; (800327c <HAL_TIM_Base_MspInit+0x1cc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d10f      	bne.n	8003184 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003164:	4b42      	ldr	r3, [pc, #264]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 8003166:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800316a:	4a41      	ldr	r2, [pc, #260]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 800316c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003170:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003174:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 8003176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	69fb      	ldr	r3, [r7, #28]
}
 8003182:	e06f      	b.n	8003264 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM14)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a3d      	ldr	r2, [pc, #244]	; (8003280 <HAL_TIM_Base_MspInit+0x1d0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d10f      	bne.n	80031ae <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800318e:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 8003190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003194:	4a36      	ldr	r2, [pc, #216]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 8003196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800319e:	4b34      	ldr	r3, [pc, #208]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80031a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	69bb      	ldr	r3, [r7, #24]
}
 80031ac:	e05a      	b.n	8003264 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM16)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a34      	ldr	r2, [pc, #208]	; (8003284 <HAL_TIM_Base_MspInit+0x1d4>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d10f      	bne.n	80031d8 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80031b8:	4b2d      	ldr	r3, [pc, #180]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80031ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031be:	4a2c      	ldr	r2, [pc, #176]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80031c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031c8:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80031ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	697b      	ldr	r3, [r7, #20]
}
 80031d6:	e045      	b.n	8003264 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM17)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a2a      	ldr	r2, [pc, #168]	; (8003288 <HAL_TIM_Base_MspInit+0x1d8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10f      	bne.n	8003202 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80031e2:	4b23      	ldr	r3, [pc, #140]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80031e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031e8:	4a21      	ldr	r2, [pc, #132]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80031ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031f2:	4b1f      	ldr	r3, [pc, #124]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 80031f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	693b      	ldr	r3, [r7, #16]
}
 8003200:	e030      	b.n	8003264 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM23)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_TIM_Base_MspInit+0x1dc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d117      	bne.n	800323c <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800320c:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 800320e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003212:	4a17      	ldr	r2, [pc, #92]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 8003214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003218:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800321c:	4b14      	ldr	r3, [pc, #80]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 800321e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	20a1      	movs	r0, #161	; 0xa1
 8003230:	f002 fda7 	bl	8005d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8003234:	20a1      	movs	r0, #161	; 0xa1
 8003236:	f002 fdbe 	bl	8005db6 <HAL_NVIC_EnableIRQ>
}
 800323a:	e013      	b.n	8003264 <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM24)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <HAL_TIM_Base_MspInit+0x1e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10e      	bne.n	8003264 <HAL_TIM_Base_MspInit+0x1b4>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8003246:	4b0a      	ldr	r3, [pc, #40]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 8003248:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800324c:	4a08      	ldr	r2, [pc, #32]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 800324e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003252:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_TIM_Base_MspInit+0x1c0>)
 8003258:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]
}
 8003264:	bf00      	nop
 8003266:	3740      	adds	r7, #64	; 0x40
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40000400 	.word	0x40000400
 8003270:	58024400 	.word	0x58024400
 8003274:	58020400 	.word	0x58020400
 8003278:	40001000 	.word	0x40001000
 800327c:	40001c00 	.word	0x40001c00
 8003280:	40002000 	.word	0x40002000
 8003284:	40014400 	.word	0x40014400
 8003288:	40014800 	.word	0x40014800
 800328c:	4000e000 	.word	0x4000e000
 8003290:	4000e400 	.word	0x4000e400

08003294 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b08e      	sub	sp, #56	; 0x38
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800329c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a4e      	ldr	r2, [pc, #312]	; (80033ec <HAL_TIM_Encoder_MspInit+0x158>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d12f      	bne.n	8003316 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032b6:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80032b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032bc:	4a4c      	ldr	r2, [pc, #304]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80032be:	f043 0304 	orr.w	r3, r3, #4
 80032c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032c6:	4b4a      	ldr	r3, [pc, #296]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80032c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032d4:	4b46      	ldr	r3, [pc, #280]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80032d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032da:	4a45      	ldr	r2, [pc, #276]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80032dc:	f043 0308 	orr.w	r3, r3, #8
 80032e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80032e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 80032f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003300:	2300      	movs	r3, #0
 8003302:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003304:	2302      	movs	r3, #2
 8003306:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800330c:	4619      	mov	r1, r3
 800330e:	4839      	ldr	r0, [pc, #228]	; (80033f4 <HAL_TIM_Encoder_MspInit+0x160>)
 8003310:	f005 f98c 	bl	800862c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003314:	e066      	b.n	80033e4 <HAL_TIM_Encoder_MspInit+0x150>
  else if(tim_encoderHandle->Instance==TIM5)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a37      	ldr	r2, [pc, #220]	; (80033f8 <HAL_TIM_Encoder_MspInit+0x164>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d12e      	bne.n	800337e <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003320:	4b33      	ldr	r3, [pc, #204]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003322:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003326:	4a32      	ldr	r2, [pc, #200]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003330:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003332:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333e:	4b2c      	ldr	r3, [pc, #176]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003344:	4a2a      	ldr	r2, [pc, #168]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800334e:	4b28      	ldr	r3, [pc, #160]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 800335c:	2303      	movs	r3, #3
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003360:	2302      	movs	r3, #2
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003368:	2300      	movs	r3, #0
 800336a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800336c:	2302      	movs	r3, #2
 800336e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003374:	4619      	mov	r1, r3
 8003376:	4821      	ldr	r0, [pc, #132]	; (80033fc <HAL_TIM_Encoder_MspInit+0x168>)
 8003378:	f005 f958 	bl	800862c <HAL_GPIO_Init>
}
 800337c:	e032      	b.n	80033e4 <HAL_TIM_Encoder_MspInit+0x150>
  else if(tim_encoderHandle->Instance==TIM8)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1f      	ldr	r2, [pc, #124]	; (8003400 <HAL_TIM_Encoder_MspInit+0x16c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d12d      	bne.n	80033e4 <HAL_TIM_Encoder_MspInit+0x150>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 800338a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 8003390:	f043 0302 	orr.w	r3, r3, #2
 8003394:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003398:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 800339a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80033a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ac:	4a10      	ldr	r2, [pc, #64]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80033ae:	f043 0304 	orr.w	r3, r3, #4
 80033b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80033b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 80033c4:	23c0      	movs	r3, #192	; 0xc0
 80033c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d0:	2300      	movs	r3, #0
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80033d4:	2303      	movs	r3, #3
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033dc:	4619      	mov	r1, r3
 80033de:	4809      	ldr	r0, [pc, #36]	; (8003404 <HAL_TIM_Encoder_MspInit+0x170>)
 80033e0:	f005 f924 	bl	800862c <HAL_GPIO_Init>
}
 80033e4:	bf00      	nop
 80033e6:	3738      	adds	r7, #56	; 0x38
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40000800 	.word	0x40000800
 80033f0:	58024400 	.word	0x58024400
 80033f4:	58020c00 	.word	0x58020c00
 80033f8:	40000c00 	.word	0x40000c00
 80033fc:	58020000 	.word	0x58020000
 8003400:	40010400 	.word	0x40010400
 8003404:	58020800 	.word	0x58020800

08003408 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b08e      	sub	sp, #56	; 0x38
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]
 8003418:	605a      	str	r2, [r3, #4]
 800341a:	609a      	str	r2, [r3, #8]
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_TIM_MspPostInit+0x22c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d120      	bne.n	800346c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342a:	4b83      	ldr	r3, [pc, #524]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 800342c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003430:	4a81      	ldr	r2, [pc, #516]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800343a:	4b7f      	ldr	r3, [pc, #508]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 800343c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	623b      	str	r3, [r7, #32]
 8003446:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8003448:	f44f 7380 	mov.w	r3, #256	; 0x100
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800345a:	2301      	movs	r3, #1
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 800345e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003462:	4619      	mov	r1, r3
 8003464:	4875      	ldr	r0, [pc, #468]	; (800363c <HAL_TIM_MspPostInit+0x234>)
 8003466:	f005 f8e1 	bl	800862c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800346a:	e0de      	b.n	800362a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM3)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a73      	ldr	r2, [pc, #460]	; (8003640 <HAL_TIM_MspPostInit+0x238>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d11f      	bne.n	80034b6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003476:	4b70      	ldr	r3, [pc, #448]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 8003478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800347c:	4a6e      	ldr	r2, [pc, #440]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 800347e:	f043 0302 	orr.w	r3, r3, #2
 8003482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003486:	4b6c      	ldr	r3, [pc, #432]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 8003488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 8003494:	2310      	movs	r3, #16
 8003496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034a0:	2300      	movs	r3, #0
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034a4:	2302      	movs	r3, #2
 80034a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 80034a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ac:	4619      	mov	r1, r3
 80034ae:	4865      	ldr	r0, [pc, #404]	; (8003644 <HAL_TIM_MspPostInit+0x23c>)
 80034b0:	f005 f8bc 	bl	800862c <HAL_GPIO_Init>
}
 80034b4:	e0b9      	b.n	800362a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM13)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a63      	ldr	r2, [pc, #396]	; (8003648 <HAL_TIM_MspPostInit+0x240>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d11f      	bne.n	8003500 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c0:	4b5d      	ldr	r3, [pc, #372]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 80034c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c6:	4a5c      	ldr	r2, [pc, #368]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 80034d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP1_Pin;
 80034de:	2340      	movs	r3, #64	; 0x40
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e2:	2302      	movs	r3, #2
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ea:	2300      	movs	r3, #0
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80034ee:	2309      	movs	r3, #9
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80034f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f6:	4619      	mov	r1, r3
 80034f8:	4850      	ldr	r0, [pc, #320]	; (800363c <HAL_TIM_MspPostInit+0x234>)
 80034fa:	f005 f897 	bl	800862c <HAL_GPIO_Init>
}
 80034fe:	e094      	b.n	800362a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM14)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a51      	ldr	r2, [pc, #324]	; (800364c <HAL_TIM_MspPostInit+0x244>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d11f      	bne.n	800354a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350a:	4b4b      	ldr	r3, [pc, #300]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 800350c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003510:	4a49      	ldr	r2, [pc, #292]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 800351c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003534:	2300      	movs	r3, #0
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003538:	2309      	movs	r3, #9
 800353a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 800353c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003540:	4619      	mov	r1, r3
 8003542:	483e      	ldr	r0, [pc, #248]	; (800363c <HAL_TIM_MspPostInit+0x234>)
 8003544:	f005 f872 	bl	800862c <HAL_GPIO_Init>
}
 8003548:	e06f      	b.n	800362a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM15)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a40      	ldr	r2, [pc, #256]	; (8003650 <HAL_TIM_MspPostInit+0x248>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d11f      	bne.n	8003594 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003554:	4b38      	ldr	r3, [pc, #224]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 8003556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800355a:	4a37      	ldr	r2, [pc, #220]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 800355c:	f043 0310 	orr.w	r3, r3, #16
 8003560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003564:	4b34      	ldr	r3, [pc, #208]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 8003566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003572:	2320      	movs	r3, #32
 8003574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2300      	movs	r3, #0
 8003580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003582:	2304      	movs	r3, #4
 8003584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800358a:	4619      	mov	r1, r3
 800358c:	4831      	ldr	r0, [pc, #196]	; (8003654 <HAL_TIM_MspPostInit+0x24c>)
 800358e:	f005 f84d 	bl	800862c <HAL_GPIO_Init>
}
 8003592:	e04a      	b.n	800362a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM16)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <HAL_TIM_MspPostInit+0x250>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d120      	bne.n	80035e0 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359e:	4b26      	ldr	r3, [pc, #152]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 80035a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035a4:	4a24      	ldr	r2, [pc, #144]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 80035a6:	f043 0302 	orr.w	r3, r3, #2
 80035aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 80035b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP4_Pin;
 80035bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ca:	2300      	movs	r3, #0
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80035ce:	2301      	movs	r3, #1
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80035d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d6:	4619      	mov	r1, r3
 80035d8:	481a      	ldr	r0, [pc, #104]	; (8003644 <HAL_TIM_MspPostInit+0x23c>)
 80035da:	f005 f827 	bl	800862c <HAL_GPIO_Init>
}
 80035de:	e024      	b.n	800362a <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM17)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a1d      	ldr	r2, [pc, #116]	; (800365c <HAL_TIM_MspPostInit+0x254>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d11f      	bne.n	800362a <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 80035ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f0:	4a11      	ldr	r2, [pc, #68]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 80035f2:	f043 0302 	orr.w	r3, r3, #2
 80035f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <HAL_TIM_MspPostInit+0x230>)
 80035fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8003608:	f44f 7300 	mov.w	r3, #512	; 0x200
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360e:	2302      	movs	r3, #2
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003616:	2300      	movs	r3, #0
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 800361a:	2301      	movs	r3, #1
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 800361e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003622:	4619      	mov	r1, r3
 8003624:	4807      	ldr	r0, [pc, #28]	; (8003644 <HAL_TIM_MspPostInit+0x23c>)
 8003626:	f005 f801 	bl	800862c <HAL_GPIO_Init>
}
 800362a:	bf00      	nop
 800362c:	3738      	adds	r7, #56	; 0x38
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40010000 	.word	0x40010000
 8003638:	58024400 	.word	0x58024400
 800363c:	58020000 	.word	0x58020000
 8003640:	40000400 	.word	0x40000400
 8003644:	58020400 	.word	0x58020400
 8003648:	40001c00 	.word	0x40001c00
 800364c:	40002000 	.word	0x40002000
 8003650:	40014000 	.word	0x40014000
 8003654:	58021000 	.word	0x58021000
 8003658:	40014400 	.word	0x40014400
 800365c:	40014800 	.word	0x40014800

08003660 <MX_UART5_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003664:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <MX_UART5_Init+0x98>)
 8003666:	4a25      	ldr	r2, [pc, #148]	; (80036fc <MX_UART5_Init+0x9c>)
 8003668:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <MX_UART5_Init+0x98>)
 800366c:	4a24      	ldr	r2, [pc, #144]	; (8003700 <MX_UART5_Init+0xa0>)
 800366e:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003670:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <MX_UART5_Init+0x98>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <MX_UART5_Init+0x98>)
 8003678:	2200      	movs	r2, #0
 800367a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800367c:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <MX_UART5_Init+0x98>)
 800367e:	2200      	movs	r2, #0
 8003680:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003682:	4b1d      	ldr	r3, [pc, #116]	; (80036f8 <MX_UART5_Init+0x98>)
 8003684:	220c      	movs	r2, #12
 8003686:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003688:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <MX_UART5_Init+0x98>)
 800368a:	2200      	movs	r2, #0
 800368c:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <MX_UART5_Init+0x98>)
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003694:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <MX_UART5_Init+0x98>)
 8003696:	2200      	movs	r2, #0
 8003698:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800369a:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <MX_UART5_Init+0x98>)
 800369c:	2200      	movs	r2, #0
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80036a0:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <MX_UART5_Init+0x98>)
 80036a2:	2208      	movs	r2, #8
 80036a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80036a6:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <MX_UART5_Init+0x98>)
 80036a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036ac:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80036ae:	4812      	ldr	r0, [pc, #72]	; (80036f8 <MX_UART5_Init+0x98>)
 80036b0:	f00b f856 	bl	800e760 <HAL_UART_Init>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 80036ba:	f7fe fd03 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036be:	2100      	movs	r1, #0
 80036c0:	480d      	ldr	r0, [pc, #52]	; (80036f8 <MX_UART5_Init+0x98>)
 80036c2:	f00d fd94 	bl	80111ee <HAL_UARTEx_SetTxFifoThreshold>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 80036cc:	f7fe fcfa 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036d0:	2100      	movs	r1, #0
 80036d2:	4809      	ldr	r0, [pc, #36]	; (80036f8 <MX_UART5_Init+0x98>)
 80036d4:	f00d fdc9 	bl	801126a <HAL_UARTEx_SetRxFifoThreshold>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_UART5_Init+0x82>
  {
    Error_Handler();
 80036de:	f7fe fcf1 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80036e2:	4805      	ldr	r0, [pc, #20]	; (80036f8 <MX_UART5_Init+0x98>)
 80036e4:	f00d fd4a 	bl	801117c <HAL_UARTEx_DisableFifoMode>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_UART5_Init+0x92>
  {
    Error_Handler();
 80036ee:	f7fe fce9 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000bdc 	.word	0x20000bdc
 80036fc:	40005000 	.word	0x40005000
 8003700:	000f4240 	.word	0x000f4240

08003704 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003708:	4b22      	ldr	r3, [pc, #136]	; (8003794 <MX_USART1_UART_Init+0x90>)
 800370a:	4a23      	ldr	r2, [pc, #140]	; (8003798 <MX_USART1_UART_Init+0x94>)
 800370c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800370e:	4b21      	ldr	r3, [pc, #132]	; (8003794 <MX_USART1_UART_Init+0x90>)
 8003710:	4a22      	ldr	r2, [pc, #136]	; (800379c <MX_USART1_UART_Init+0x98>)
 8003712:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003714:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <MX_USART1_UART_Init+0x90>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800371a:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <MX_USART1_UART_Init+0x90>)
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003720:	4b1c      	ldr	r3, [pc, #112]	; (8003794 <MX_USART1_UART_Init+0x90>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003726:	4b1b      	ldr	r3, [pc, #108]	; (8003794 <MX_USART1_UART_Init+0x90>)
 8003728:	220c      	movs	r2, #12
 800372a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <MX_USART1_UART_Init+0x90>)
 800372e:	2200      	movs	r2, #0
 8003730:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003732:	4b18      	ldr	r3, [pc, #96]	; (8003794 <MX_USART1_UART_Init+0x90>)
 8003734:	2200      	movs	r2, #0
 8003736:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003738:	4b16      	ldr	r3, [pc, #88]	; (8003794 <MX_USART1_UART_Init+0x90>)
 800373a:	2200      	movs	r2, #0
 800373c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <MX_USART1_UART_Init+0x90>)
 8003740:	2200      	movs	r2, #0
 8003742:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003744:	4b13      	ldr	r3, [pc, #76]	; (8003794 <MX_USART1_UART_Init+0x90>)
 8003746:	2200      	movs	r2, #0
 8003748:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800374a:	4812      	ldr	r0, [pc, #72]	; (8003794 <MX_USART1_UART_Init+0x90>)
 800374c:	f00b f808 	bl	800e760 <HAL_UART_Init>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8003756:	f7fe fcb5 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800375a:	2100      	movs	r1, #0
 800375c:	480d      	ldr	r0, [pc, #52]	; (8003794 <MX_USART1_UART_Init+0x90>)
 800375e:	f00d fd46 	bl	80111ee <HAL_UARTEx_SetTxFifoThreshold>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8003768:	f7fe fcac 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800376c:	2100      	movs	r1, #0
 800376e:	4809      	ldr	r0, [pc, #36]	; (8003794 <MX_USART1_UART_Init+0x90>)
 8003770:	f00d fd7b 	bl	801126a <HAL_UARTEx_SetRxFifoThreshold>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800377a:	f7fe fca3 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800377e:	4805      	ldr	r0, [pc, #20]	; (8003794 <MX_USART1_UART_Init+0x90>)
 8003780:	f00d fcfc 	bl	801117c <HAL_UARTEx_DisableFifoMode>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800378a:	f7fe fc9b 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	20000c6c 	.word	0x20000c6c
 8003798:	40011000 	.word	0x40011000
 800379c:	001e8480 	.word	0x001e8480

080037a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80037a4:	4b22      	ldr	r3, [pc, #136]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037a6:	4a23      	ldr	r2, [pc, #140]	; (8003834 <MX_USART3_UART_Init+0x94>)
 80037a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80037aa:	4b21      	ldr	r3, [pc, #132]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80037b2:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80037b8:	4b1d      	ldr	r3, [pc, #116]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80037c4:	4b1a      	ldr	r3, [pc, #104]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037c6:	220c      	movs	r2, #12
 80037c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037ca:	4b19      	ldr	r3, [pc, #100]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d0:	4b17      	ldr	r3, [pc, #92]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037d6:	4b16      	ldr	r3, [pc, #88]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037d8:	2200      	movs	r2, #0
 80037da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80037dc:	4b14      	ldr	r3, [pc, #80]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037de:	2200      	movs	r2, #0
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037e2:	4b13      	ldr	r3, [pc, #76]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80037e8:	4811      	ldr	r0, [pc, #68]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037ea:	f00a ffb9 	bl	800e760 <HAL_UART_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80037f4:	f7fe fc66 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80037f8:	2100      	movs	r1, #0
 80037fa:	480d      	ldr	r0, [pc, #52]	; (8003830 <MX_USART3_UART_Init+0x90>)
 80037fc:	f00d fcf7 	bl	80111ee <HAL_UARTEx_SetTxFifoThreshold>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003806:	f7fe fc5d 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800380a:	2100      	movs	r1, #0
 800380c:	4808      	ldr	r0, [pc, #32]	; (8003830 <MX_USART3_UART_Init+0x90>)
 800380e:	f00d fd2c 	bl	801126a <HAL_UARTEx_SetRxFifoThreshold>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003818:	f7fe fc54 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800381c:	4804      	ldr	r0, [pc, #16]	; (8003830 <MX_USART3_UART_Init+0x90>)
 800381e:	f00d fcad 	bl	801117c <HAL_UARTEx_DisableFifoMode>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003828:	f7fe fc4c 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800382c:	bf00      	nop
 800382e:	bd80      	pop	{r7, pc}
 8003830:	20000b4c 	.word	0x20000b4c
 8003834:	40004800 	.word	0x40004800

08003838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08e      	sub	sp, #56	; 0x38
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a57      	ldr	r2, [pc, #348]	; (80039b4 <HAL_UART_MspInit+0x17c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d137      	bne.n	80038ca <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800385a:	4b57      	ldr	r3, [pc, #348]	; (80039b8 <HAL_UART_MspInit+0x180>)
 800385c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003860:	4a55      	ldr	r2, [pc, #340]	; (80039b8 <HAL_UART_MspInit+0x180>)
 8003862:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003866:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800386a:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <HAL_UART_MspInit+0x180>)
 800386c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003874:	623b      	str	r3, [r7, #32]
 8003876:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003878:	4b4f      	ldr	r3, [pc, #316]	; (80039b8 <HAL_UART_MspInit+0x180>)
 800387a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387e:	4a4e      	ldr	r2, [pc, #312]	; (80039b8 <HAL_UART_MspInit+0x180>)
 8003880:	f043 0302 	orr.w	r3, r3, #2
 8003884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003888:	4b4b      	ldr	r3, [pc, #300]	; (80039b8 <HAL_UART_MspInit+0x180>)
 800388a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	61fb      	str	r3, [r7, #28]
 8003894:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003896:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a4:	2300      	movs	r3, #0
 80038a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80038a8:	230e      	movs	r3, #14
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b0:	4619      	mov	r1, r3
 80038b2:	4842      	ldr	r0, [pc, #264]	; (80039bc <HAL_UART_MspInit+0x184>)
 80038b4:	f004 feba 	bl	800862c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80038b8:	2200      	movs	r2, #0
 80038ba:	2100      	movs	r1, #0
 80038bc:	2035      	movs	r0, #53	; 0x35
 80038be:	f002 fa60 	bl	8005d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80038c2:	2035      	movs	r0, #53	; 0x35
 80038c4:	f002 fa77 	bl	8005db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80038c8:	e070      	b.n	80039ac <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a3c      	ldr	r2, [pc, #240]	; (80039c0 <HAL_UART_MspInit+0x188>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d12f      	bne.n	8003934 <HAL_UART_MspInit+0xfc>
    __HAL_RCC_USART1_CLK_ENABLE();
 80038d4:	4b38      	ldr	r3, [pc, #224]	; (80039b8 <HAL_UART_MspInit+0x180>)
 80038d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038da:	4a37      	ldr	r2, [pc, #220]	; (80039b8 <HAL_UART_MspInit+0x180>)
 80038dc:	f043 0310 	orr.w	r3, r3, #16
 80038e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038e4:	4b34      	ldr	r3, [pc, #208]	; (80039b8 <HAL_UART_MspInit+0x180>)
 80038e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f2:	4b31      	ldr	r3, [pc, #196]	; (80039b8 <HAL_UART_MspInit+0x180>)
 80038f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038f8:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <HAL_UART_MspInit+0x180>)
 80038fa:	f043 0302 	orr.w	r3, r3, #2
 80038fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003902:	4b2d      	ldr	r3, [pc, #180]	; (80039b8 <HAL_UART_MspInit+0x180>)
 8003904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003910:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391e:	2300      	movs	r3, #0
 8003920:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003922:	2304      	movs	r3, #4
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800392a:	4619      	mov	r1, r3
 800392c:	4823      	ldr	r0, [pc, #140]	; (80039bc <HAL_UART_MspInit+0x184>)
 800392e:	f004 fe7d 	bl	800862c <HAL_GPIO_Init>
}
 8003932:	e03b      	b.n	80039ac <HAL_UART_MspInit+0x174>
  else if(uartHandle->Instance==USART3)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a22      	ldr	r2, [pc, #136]	; (80039c4 <HAL_UART_MspInit+0x18c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d136      	bne.n	80039ac <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART3_CLK_ENABLE();
 800393e:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <HAL_UART_MspInit+0x180>)
 8003940:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003944:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_UART_MspInit+0x180>)
 8003946:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800394a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800394e:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <HAL_UART_MspInit+0x180>)
 8003950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800395c:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <HAL_UART_MspInit+0x180>)
 800395e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003962:	4a15      	ldr	r2, [pc, #84]	; (80039b8 <HAL_UART_MspInit+0x180>)
 8003964:	f043 0308 	orr.w	r3, r3, #8
 8003968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_UART_MspInit+0x180>)
 800396e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	60fb      	str	r3, [r7, #12]
 8003978:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800397a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003980:	2302      	movs	r3, #2
 8003982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003984:	2300      	movs	r3, #0
 8003986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003988:	2300      	movs	r3, #0
 800398a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800398c:	2307      	movs	r3, #7
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003994:	4619      	mov	r1, r3
 8003996:	480c      	ldr	r0, [pc, #48]	; (80039c8 <HAL_UART_MspInit+0x190>)
 8003998:	f004 fe48 	bl	800862c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800399c:	2200      	movs	r2, #0
 800399e:	2100      	movs	r1, #0
 80039a0:	2027      	movs	r0, #39	; 0x27
 80039a2:	f002 f9ee 	bl	8005d82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039a6:	2027      	movs	r0, #39	; 0x27
 80039a8:	f002 fa05 	bl	8005db6 <HAL_NVIC_EnableIRQ>
}
 80039ac:	bf00      	nop
 80039ae:	3738      	adds	r7, #56	; 0x38
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40005000 	.word	0x40005000
 80039b8:	58024400 	.word	0x58024400
 80039bc:	58020400 	.word	0x58020400
 80039c0:	40011000 	.word	0x40011000
 80039c4:	40004800 	.word	0x40004800
 80039c8:	58020c00 	.word	0x58020c00

080039cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80039cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039d0:	f7fe fd58 	bl	8002484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039d4:	480c      	ldr	r0, [pc, #48]	; (8003a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039d6:	490d      	ldr	r1, [pc, #52]	; (8003a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039dc:	e002      	b.n	80039e4 <LoopCopyDataInit>

080039de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039e2:	3304      	adds	r3, #4

080039e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e8:	d3f9      	bcc.n	80039de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ea:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039ec:	4c0a      	ldr	r4, [pc, #40]	; (8003a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039f0:	e001      	b.n	80039f6 <LoopFillZerobss>

080039f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039f4:	3204      	adds	r2, #4

080039f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f8:	d3fb      	bcc.n	80039f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039fa:	f00d fcc3 	bl	8011384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039fe:	f7fd fe2b 	bl	8001658 <main>
  bx  lr
 8003a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a0c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003a10:	08011454 	.word	0x08011454
  ldr r2, =_sbss
 8003a14:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003a18:	20000d00 	.word	0x20000d00

08003a1c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a1c:	e7fe      	b.n	8003a1c <ADC_IRQHandler>
	...

08003a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a26:	2003      	movs	r0, #3
 8003a28:	f002 f9a0 	bl	8005d6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a2c:	f005 fe9e 	bl	800976c <HAL_RCC_GetSysClockFreq>
 8003a30:	4602      	mov	r2, r0
 8003a32:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <HAL_Init+0x68>)
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	0a1b      	lsrs	r3, r3, #8
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	4913      	ldr	r1, [pc, #76]	; (8003a8c <HAL_Init+0x6c>)
 8003a3e:	5ccb      	ldrb	r3, [r1, r3]
 8003a40:	f003 031f 	and.w	r3, r3, #31
 8003a44:	fa22 f303 	lsr.w	r3, r2, r3
 8003a48:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <HAL_Init+0x68>)
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <HAL_Init+0x6c>)
 8003a54:	5cd3      	ldrb	r3, [r2, r3]
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a60:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <HAL_Init+0x70>)
 8003a62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a64:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <HAL_Init+0x74>)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f000 f814 	bl	8003a98 <HAL_InitTick>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e002      	b.n	8003a80 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a7a:	f7fe fc8d 	bl	8002398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	58024400 	.word	0x58024400
 8003a8c:	08011404 	.word	0x08011404
 8003a90:	20000004 	.word	0x20000004
 8003a94:	20000000 	.word	0x20000000

08003a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003aa0:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <HAL_InitTick+0x60>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e021      	b.n	8003af0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003aac:	4b13      	ldr	r3, [pc, #76]	; (8003afc <HAL_InitTick+0x64>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <HAL_InitTick+0x60>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 f985 	bl	8005dd2 <HAL_SYSTICK_Config>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00e      	b.n	8003af0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b0f      	cmp	r3, #15
 8003ad6:	d80a      	bhi.n	8003aee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	f002 f94f 	bl	8005d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ae4:	4a06      	ldr	r2, [pc, #24]	; (8003b00 <HAL_InitTick+0x68>)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	2000000c 	.word	0x2000000c
 8003afc:	20000000 	.word	0x20000000
 8003b00:	20000008 	.word	0x20000008

08003b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <HAL_IncTick+0x20>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <HAL_IncTick+0x24>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	4a04      	ldr	r2, [pc, #16]	; (8003b28 <HAL_IncTick+0x24>)
 8003b16:	6013      	str	r3, [r2, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	2000000c 	.word	0x2000000c
 8003b28:	20000cfc 	.word	0x20000cfc

08003b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <HAL_GetTick+0x14>)
 8003b32:	681b      	ldr	r3, [r3, #0]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000cfc 	.word	0x20000cfc

08003b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3360      	adds	r3, #96	; 0x60
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <LL_ADC_SetOffset+0x60>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10b      	bne.n	8003be8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003be6:	e00b      	b.n	8003c00 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	601a      	str	r2, [r3, #0]
}
 8003c00:	bf00      	nop
 8003c02:	371c      	adds	r7, #28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	58026000 	.word	0x58026000

08003c10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3360      	adds	r3, #96	; 0x60
 8003c1e:	461a      	mov	r2, r3
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	611a      	str	r2, [r3, #16]
}
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d00e      	beq.n	8003ca2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3360      	adds	r3, #96	; 0x60
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	431a      	orrs	r2, r3
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	601a      	str	r2, [r3, #0]
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	371c      	adds	r7, #28
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	58026000 	.word	0x58026000

08003cb4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <LL_ADC_SetOffsetSaturation+0x40>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10e      	bne.n	8003ce6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3360      	adds	r3, #96	; 0x60
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	58026000 	.word	0x58026000

08003cf8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4a0c      	ldr	r2, [pc, #48]	; (8003d38 <LL_ADC_SetOffsetSign+0x40>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10e      	bne.n	8003d2a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3360      	adds	r3, #96	; 0x60
 8003d10:	461a      	mov	r2, r3
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	431a      	orrs	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	58026000 	.word	0x58026000

08003d3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3360      	adds	r3, #96	; 0x60
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a0c      	ldr	r2, [pc, #48]	; (8003d8c <LL_ADC_SetOffsetState+0x50>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d108      	bne.n	8003d70 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003d6e:	e007      	b.n	8003d80 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	601a      	str	r2, [r3, #0]
}
 8003d80:	bf00      	nop
 8003d82:	371c      	adds	r7, #28
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	58026000 	.word	0x58026000

08003d90 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b087      	sub	sp, #28
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	3330      	adds	r3, #48	; 0x30
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	4413      	add	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	211f      	movs	r1, #31
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43db      	mvns	r3, r3
 8003de8:	401a      	ands	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0e9b      	lsrs	r3, r3, #26
 8003dee:	f003 011f 	and.w	r1, r3, #31
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e1a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	3314      	adds	r3, #20
 8003e44:	461a      	mov	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	0e5b      	lsrs	r3, r3, #25
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	4413      	add	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	0d1b      	lsrs	r3, r3, #20
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	2107      	movs	r1, #7
 8003e62:	fa01 f303 	lsl.w	r3, r1, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	401a      	ands	r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	0d1b      	lsrs	r3, r3, #20
 8003e6e:	f003 031f 	and.w	r3, r3, #31
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e7e:	bf00      	nop
 8003e80:	371c      	adds	r7, #28
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d115      	bne.n	8003ecc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eac:	43db      	mvns	r3, r3
 8003eae:	401a      	ands	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f003 0318 	and.w	r3, r3, #24
 8003eb6:	4914      	ldr	r1, [pc, #80]	; (8003f08 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003eb8:	40d9      	lsrs	r1, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	400b      	ands	r3, r1
 8003ebe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003eca:	e014      	b.n	8003ef6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	401a      	ands	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f003 0318 	and.w	r3, r3, #24
 8003ee2:	4909      	ldr	r1, [pc, #36]	; (8003f08 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003ee4:	40d9      	lsrs	r1, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	400b      	ands	r3, r1
 8003eea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003ef6:	bf00      	nop
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	58026000 	.word	0x58026000
 8003f08:	000fffff 	.word	0x000fffff

08003f0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 031f 	and.w	r3, r3, #31
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6093      	str	r3, [r2, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	5fffffc0 	.word	0x5fffffc0

08003f68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f7c:	d101      	bne.n	8003f82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <LL_ADC_EnableInternalRegulator+0x24>)
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	6fffffc0 	.word	0x6fffffc0

08003fb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fcc:	d101      	bne.n	8003fd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <LL_ADC_Enable+0x24>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	f043 0201 	orr.w	r2, r3, #1
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	7fffffc0 	.word	0x7fffffc0

08004008 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <LL_ADC_Disable+0x24>)
 8004016:	4013      	ands	r3, r2
 8004018:	f043 0202 	orr.w	r2, r3, #2
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	7fffffc0 	.word	0x7fffffc0

08004030 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <LL_ADC_IsEnabled+0x18>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <LL_ADC_IsEnabled+0x1a>
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b02      	cmp	r3, #2
 8004068:	d101      	bne.n	800406e <LL_ADC_IsDisableOngoing+0x18>
 800406a:	2301      	movs	r3, #1
 800406c:	e000      	b.n	8004070 <LL_ADC_IsDisableOngoing+0x1a>
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <LL_ADC_REG_StartConversion+0x24>)
 800408a:	4013      	ands	r3, r2
 800408c:	f043 0204 	orr.w	r2, r3, #4
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	7fffffc0 	.word	0x7fffffc0

080040a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0304 	and.w	r3, r3, #4
 80040b4:	2b04      	cmp	r3, #4
 80040b6:	d101      	bne.n	80040bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d101      	bne.n	80040e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b089      	sub	sp, #36	; 0x24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040f8:	2300      	movs	r3, #0
 80040fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e1ee      	b.n	80044e8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004114:	2b00      	cmp	r3, #0
 8004116:	d109      	bne.n	800412c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7fc fbe3 	bl	80008e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff19 	bl	8003f68 <LL_ADC_IsDeepPowerDownEnabled>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d004      	beq.n	8004146 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff feff 	bl	8003f44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff34 	bl	8003fb8 <LL_ADC_IsInternalRegulatorEnabled>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d114      	bne.n	8004180 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff ff18 	bl	8003f90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004160:	4b8e      	ldr	r3, [pc, #568]	; (800439c <HAL_ADC_Init+0x2ac>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	099b      	lsrs	r3, r3, #6
 8004166:	4a8e      	ldr	r2, [pc, #568]	; (80043a0 <HAL_ADC_Init+0x2b0>)
 8004168:	fba2 2303 	umull	r2, r3, r2, r3
 800416c:	099b      	lsrs	r3, r3, #6
 800416e:	3301      	adds	r3, #1
 8004170:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004172:	e002      	b.n	800417a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	3b01      	subs	r3, #1
 8004178:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f9      	bne.n	8004174 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff17 	bl	8003fb8 <LL_ADC_IsInternalRegulatorEnabled>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10d      	bne.n	80041ac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004194:	f043 0210 	orr.w	r2, r3, #16
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041a0:	f043 0201 	orr.w	r2, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ff77 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 80041b6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 8188 	bne.w	80044d6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f040 8184 	bne.w	80044d6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff24 	bl	8004030 <LL_ADC_IsEnabled>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d136      	bne.n	800425c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6c      	ldr	r2, [pc, #432]	; (80043a4 <HAL_ADC_Init+0x2b4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_ADC_Init+0x112>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a6a      	ldr	r2, [pc, #424]	; (80043a8 <HAL_ADC_Init+0x2b8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10e      	bne.n	8004220 <HAL_ADC_Init+0x130>
 8004202:	4868      	ldr	r0, [pc, #416]	; (80043a4 <HAL_ADC_Init+0x2b4>)
 8004204:	f7ff ff14 	bl	8004030 <LL_ADC_IsEnabled>
 8004208:	4604      	mov	r4, r0
 800420a:	4867      	ldr	r0, [pc, #412]	; (80043a8 <HAL_ADC_Init+0x2b8>)
 800420c:	f7ff ff10 	bl	8004030 <LL_ADC_IsEnabled>
 8004210:	4603      	mov	r3, r0
 8004212:	4323      	orrs	r3, r4
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf0c      	ite	eq
 8004218:	2301      	moveq	r3, #1
 800421a:	2300      	movne	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	e008      	b.n	8004232 <HAL_ADC_Init+0x142>
 8004220:	4862      	ldr	r0, [pc, #392]	; (80043ac <HAL_ADC_Init+0x2bc>)
 8004222:	f7ff ff05 	bl	8004030 <LL_ADC_IsEnabled>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	bf0c      	ite	eq
 800422c:	2301      	moveq	r3, #1
 800422e:	2300      	movne	r3, #0
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d012      	beq.n	800425c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a5a      	ldr	r2, [pc, #360]	; (80043a4 <HAL_ADC_Init+0x2b4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_ADC_Init+0x15a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <HAL_ADC_Init+0x2b8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d101      	bne.n	800424e <HAL_ADC_Init+0x15e>
 800424a:	4a59      	ldr	r2, [pc, #356]	; (80043b0 <HAL_ADC_Init+0x2c0>)
 800424c:	e000      	b.n	8004250 <HAL_ADC_Init+0x160>
 800424e:	4a59      	ldr	r2, [pc, #356]	; (80043b4 <HAL_ADC_Init+0x2c4>)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f7ff fc74 	bl	8003b44 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a52      	ldr	r2, [pc, #328]	; (80043ac <HAL_ADC_Init+0x2bc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d129      	bne.n	80042ba <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	7e5b      	ldrb	r3, [r3, #25]
 800426a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004270:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004276:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d013      	beq.n	80042a8 <HAL_ADC_Init+0x1b8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b0c      	cmp	r3, #12
 8004286:	d00d      	beq.n	80042a4 <HAL_ADC_Init+0x1b4>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b1c      	cmp	r3, #28
 800428e:	d007      	beq.n	80042a0 <HAL_ADC_Init+0x1b0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b18      	cmp	r3, #24
 8004296:	d101      	bne.n	800429c <HAL_ADC_Init+0x1ac>
 8004298:	2318      	movs	r3, #24
 800429a:	e006      	b.n	80042aa <HAL_ADC_Init+0x1ba>
 800429c:	2300      	movs	r3, #0
 800429e:	e004      	b.n	80042aa <HAL_ADC_Init+0x1ba>
 80042a0:	2310      	movs	r3, #16
 80042a2:	e002      	b.n	80042aa <HAL_ADC_Init+0x1ba>
 80042a4:	2308      	movs	r3, #8
 80042a6:	e000      	b.n	80042aa <HAL_ADC_Init+0x1ba>
 80042a8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80042aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	e00e      	b.n	80042d8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	7e5b      	ldrb	r3, [r3, #25]
 80042be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80042ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042d2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d106      	bne.n	80042f0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	3b01      	subs	r3, #1
 80042e8:	045b      	lsls	r3, r3, #17
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004304:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <HAL_ADC_Init+0x2bc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d115      	bne.n	8004342 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <HAL_ADC_Init+0x2c8>)
 800431e:	4013      	ands	r3, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	69b9      	ldr	r1, [r7, #24]
 8004326:	430b      	orrs	r3, r1
 8004328:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	430a      	orrs	r2, r1
 800433e:	611a      	str	r2, [r3, #16]
 8004340:	e009      	b.n	8004356 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68da      	ldr	r2, [r3, #12]
 8004348:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <HAL_ADC_Init+0x2cc>)
 800434a:	4013      	ands	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	430b      	orrs	r3, r1
 8004354:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fea2 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004360:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff feaf 	bl	80040ca <LL_ADC_INJ_IsConversionOngoing>
 800436c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f040 808e 	bne.w	8004492 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f040 808a 	bne.w	8004492 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <HAL_ADC_Init+0x2bc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d11b      	bne.n	80043c0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	7e1b      	ldrb	r3, [r3, #24]
 800438c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004394:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e018      	b.n	80043ce <HAL_ADC_Init+0x2de>
 800439c:	20000000 	.word	0x20000000
 80043a0:	053e2d63 	.word	0x053e2d63
 80043a4:	40022000 	.word	0x40022000
 80043a8:	40022100 	.word	0x40022100
 80043ac:	58026000 	.word	0x58026000
 80043b0:	40022300 	.word	0x40022300
 80043b4:	58026300 	.word	0x58026300
 80043b8:	fff04007 	.word	0xfff04007
 80043bc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	7e1b      	ldrb	r3, [r3, #24]
 80043c4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <HAL_ADC_Init+0x400>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	69b9      	ldr	r1, [r7, #24]
 80043de:	430b      	orrs	r3, r1
 80043e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d137      	bne.n	800445c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a3f      	ldr	r2, [pc, #252]	; (80044f4 <HAL_ADC_Init+0x404>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d116      	bne.n	800442a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	4b3d      	ldr	r3, [pc, #244]	; (80044f8 <HAL_ADC_Init+0x408>)
 8004404:	4013      	ands	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800440e:	4311      	orrs	r1, r2
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004414:	4311      	orrs	r1, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800441a:	430a      	orrs	r2, r1
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	611a      	str	r2, [r3, #16]
 8004428:	e020      	b.n	800446c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	4b32      	ldr	r3, [pc, #200]	; (80044fc <HAL_ADC_Init+0x40c>)
 8004432:	4013      	ands	r3, r2
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004438:	3a01      	subs	r2, #1
 800443a:	0411      	lsls	r1, r2, #16
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004440:	4311      	orrs	r1, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004446:	4311      	orrs	r1, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800444c:	430a      	orrs	r2, r1
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0201 	orr.w	r2, r2, #1
 8004458:	611a      	str	r2, [r3, #16]
 800445a:	e007      	b.n	800446c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1b      	ldr	r2, [pc, #108]	; (80044f4 <HAL_ADC_Init+0x404>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d002      	beq.n	8004492 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 f9e9 	bl	8005864 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10c      	bne.n	80044b4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	f023 010f 	bic.w	r1, r3, #15
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	1e5a      	subs	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	631a      	str	r2, [r3, #48]	; 0x30
 80044b2:	e007      	b.n	80044c4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 020f 	bic.w	r2, r2, #15
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c8:	f023 0303 	bic.w	r3, r3, #3
 80044cc:	f043 0201 	orr.w	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	661a      	str	r2, [r3, #96]	; 0x60
 80044d4:	e007      	b.n	80044e6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044da:	f043 0210 	orr.w	r2, r3, #16
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3724      	adds	r7, #36	; 0x24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd90      	pop	{r4, r7, pc}
 80044f0:	ffffbffc 	.word	0xffffbffc
 80044f4:	58026000 	.word	0x58026000
 80044f8:	fc00f81f 	.word	0xfc00f81f
 80044fc:	fc00f81e 	.word	0xfc00f81e

08004500 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a97      	ldr	r2, [pc, #604]	; (800476c <HAL_ADC_Start_IT+0x26c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_ADC_Start_IT+0x1c>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a96      	ldr	r2, [pc, #600]	; (8004770 <HAL_ADC_Start_IT+0x270>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <HAL_ADC_Start_IT+0x20>
 800451c:	4b95      	ldr	r3, [pc, #596]	; (8004774 <HAL_ADC_Start_IT+0x274>)
 800451e:	e000      	b.n	8004522 <HAL_ADC_Start_IT+0x22>
 8004520:	4b95      	ldr	r3, [pc, #596]	; (8004778 <HAL_ADC_Start_IT+0x278>)
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff fcf2 	bl	8003f0c <LL_ADC_GetMultimode>
 8004528:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fdb8 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	f040 810f 	bne.w	800475a <HAL_ADC_Start_IT+0x25a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_ADC_Start_IT+0x4a>
 8004546:	2302      	movs	r3, #2
 8004548:	e10c      	b.n	8004764 <HAL_ADC_Start_IT+0x264>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f001 f89c 	bl	8005690 <ADC_Enable>
 8004558:	4603      	mov	r3, r0
 800455a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f040 80f6 	bne.w	8004750 <HAL_ADC_Start_IT+0x250>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004568:	4b84      	ldr	r3, [pc, #528]	; (800477c <HAL_ADC_Start_IT+0x27c>)
 800456a:	4013      	ands	r3, r2
 800456c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a7d      	ldr	r2, [pc, #500]	; (8004770 <HAL_ADC_Start_IT+0x270>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d002      	beq.n	8004584 <HAL_ADC_Start_IT+0x84>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	e000      	b.n	8004586 <HAL_ADC_Start_IT+0x86>
 8004584:	4b79      	ldr	r3, [pc, #484]	; (800476c <HAL_ADC_Start_IT+0x26c>)
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6812      	ldr	r2, [r2, #0]
 800458a:	4293      	cmp	r3, r2
 800458c:	d002      	beq.n	8004594 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004598:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d006      	beq.n	80045ba <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b0:	f023 0206 	bic.w	r2, r3, #6
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	665a      	str	r2, [r3, #100]	; 0x64
 80045b8:	e002      	b.n	80045c0 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	221c      	movs	r2, #28
 80045c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 021c 	bic.w	r2, r2, #28
 80045de:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d108      	bne.n	80045fa <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685a      	ldr	r2, [r3, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0208 	orr.w	r2, r2, #8
 80045f6:	605a      	str	r2, [r3, #4]
          break;
 80045f8:	e008      	b.n	800460c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f042 0204 	orr.w	r2, r2, #4
 8004608:	605a      	str	r2, [r3, #4]
          break;
 800460a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d107      	bne.n	8004624 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0210 	orr.w	r2, r2, #16
 8004622:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a51      	ldr	r2, [pc, #324]	; (8004770 <HAL_ADC_Start_IT+0x270>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d002      	beq.n	8004634 <HAL_ADC_Start_IT+0x134>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	e000      	b.n	8004636 <HAL_ADC_Start_IT+0x136>
 8004634:	4b4d      	ldr	r3, [pc, #308]	; (800476c <HAL_ADC_Start_IT+0x26c>)
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6812      	ldr	r2, [r2, #0]
 800463a:	4293      	cmp	r3, r2
 800463c:	d008      	beq.n	8004650 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	2b05      	cmp	r3, #5
 8004648:	d002      	beq.n	8004650 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b09      	cmp	r3, #9
 800464e:	d13b      	bne.n	80046c8 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d02d      	beq.n	80046ba <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004662:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004666:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b08      	cmp	r3, #8
 8004674:	d110      	bne.n	8004698 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0220 	bic.w	r2, r2, #32
 8004684:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685a      	ldr	r2, [r3, #4]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004694:	605a      	str	r2, [r3, #4]
              break;
 8004696:	e011      	b.n	80046bc <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046a6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0220 	orr.w	r2, r2, #32
 80046b6:	605a      	str	r2, [r3, #4]
              break;
 80046b8:	e000      	b.n	80046bc <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80046ba:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fcdb 	bl	800407c <LL_ADC_REG_StartConversion>
 80046c6:	e04c      	b.n	8004762 <HAL_ADC_Start_IT+0x262>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a25      	ldr	r2, [pc, #148]	; (8004770 <HAL_ADC_Start_IT+0x270>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d002      	beq.n	80046e4 <HAL_ADC_Start_IT+0x1e4>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	e000      	b.n	80046e6 <HAL_ADC_Start_IT+0x1e6>
 80046e4:	4b21      	ldr	r3, [pc, #132]	; (800476c <HAL_ADC_Start_IT+0x26c>)
 80046e6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d035      	beq.n	8004760 <HAL_ADC_Start_IT+0x260>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	2b08      	cmp	r3, #8
 800470a:	d110      	bne.n	800472e <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0220 	bic.w	r2, r2, #32
 800471a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800472a:	605a      	str	r2, [r3, #4]
              break;
 800472c:	e019      	b.n	8004762 <HAL_ADC_Start_IT+0x262>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800473c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0220 	orr.w	r2, r2, #32
 800474c:	605a      	str	r2, [r3, #4]
              break;
 800474e:	e008      	b.n	8004762 <HAL_ADC_Start_IT+0x262>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004758:	e003      	b.n	8004762 <HAL_ADC_Start_IT+0x262>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800475a:	2302      	movs	r3, #2
 800475c:	75fb      	strb	r3, [r7, #23]
 800475e:	e000      	b.n	8004762 <HAL_ADC_Start_IT+0x262>
        }
 8004760:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40022000 	.word	0x40022000
 8004770:	40022100 	.word	0x40022100
 8004774:	40022300 	.word	0x40022300
 8004778:	58026300 	.word	0x58026300
 800477c:	fffff0fe 	.word	0xfffff0fe

08004780 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800478e:	4618      	mov	r0, r3
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr
	...

0800479c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a87      	ldr	r2, [pc, #540]	; (80049dc <HAL_ADC_IRQHandler+0x240>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_ADC_IRQHandler+0x30>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a86      	ldr	r2, [pc, #536]	; (80049e0 <HAL_ADC_IRQHandler+0x244>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_ADC_IRQHandler+0x34>
 80047cc:	4b85      	ldr	r3, [pc, #532]	; (80049e4 <HAL_ADC_IRQHandler+0x248>)
 80047ce:	e000      	b.n	80047d2 <HAL_ADC_IRQHandler+0x36>
 80047d0:	4b85      	ldr	r3, [pc, #532]	; (80049e8 <HAL_ADC_IRQHandler+0x24c>)
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff fb9a 	bl	8003f0c <LL_ADC_GetMultimode>
 80047d8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d017      	beq.n	8004814 <HAL_ADC_IRQHandler+0x78>
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d012      	beq.n	8004814 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f003 0310 	and.w	r3, r3, #16
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d105      	bne.n	8004806 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f001 f9d6 	bl	8005bb8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2202      	movs	r2, #2
 8004812:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <HAL_ADC_IRQHandler+0x8c>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8083 	beq.w	800493a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	2b00      	cmp	r3, #0
 800483c:	d07d      	beq.n	800493a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	d105      	bne.n	8004856 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff fa98 	bl	8003d90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d062      	beq.n	800492c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a5d      	ldr	r2, [pc, #372]	; (80049e0 <HAL_ADC_IRQHandler+0x244>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d002      	beq.n	8004876 <HAL_ADC_IRQHandler+0xda>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	e000      	b.n	8004878 <HAL_ADC_IRQHandler+0xdc>
 8004876:	4b59      	ldr	r3, [pc, #356]	; (80049dc <HAL_ADC_IRQHandler+0x240>)
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	4293      	cmp	r3, r2
 800487e:	d008      	beq.n	8004892 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b05      	cmp	r3, #5
 800488a:	d002      	beq.n	8004892 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b09      	cmp	r3, #9
 8004890:	d104      	bne.n	800489c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	623b      	str	r3, [r7, #32]
 800489a:	e00c      	b.n	80048b6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a4f      	ldr	r2, [pc, #316]	; (80049e0 <HAL_ADC_IRQHandler+0x244>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d002      	beq.n	80048ac <HAL_ADC_IRQHandler+0x110>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	e000      	b.n	80048ae <HAL_ADC_IRQHandler+0x112>
 80048ac:	4b4b      	ldr	r3, [pc, #300]	; (80049dc <HAL_ADC_IRQHandler+0x240>)
 80048ae:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d135      	bne.n	800492c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d12e      	bne.n	800492c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fbe6 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d11a      	bne.n	8004914 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 020c 	bic.w	r2, r2, #12
 80048ec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d112      	bne.n	800492c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490a:	f043 0201 	orr.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	661a      	str	r2, [r3, #96]	; 0x60
 8004912:	e00b      	b.n	800492c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004918:	f043 0210 	orr.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004924:	f043 0201 	orr.w	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7fd f9ad 	bl	8001c8c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	220c      	movs	r2, #12
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <HAL_ADC_IRQHandler+0x1b2>
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	f003 0320 	and.w	r3, r3, #32
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 80a0 	beq.w	8004a9a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 809a 	beq.w	8004a9a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b00      	cmp	r3, #0
 8004970:	d105      	bne.n	800497e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004976:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fa43 	bl	8003e0e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004988:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4618      	mov	r0, r3
 8004990:	f7ff f9fe 	bl	8003d90 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004994:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <HAL_ADC_IRQHandler+0x244>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d002      	beq.n	80049a6 <HAL_ADC_IRQHandler+0x20a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	e000      	b.n	80049a8 <HAL_ADC_IRQHandler+0x20c>
 80049a6:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <HAL_ADC_IRQHandler+0x240>)
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d008      	beq.n	80049c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b06      	cmp	r3, #6
 80049ba:	d002      	beq.n	80049c2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b07      	cmp	r3, #7
 80049c0:	d104      	bne.n	80049cc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	e014      	b.n	80049f6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a03      	ldr	r2, [pc, #12]	; (80049e0 <HAL_ADC_IRQHandler+0x244>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00a      	beq.n	80049ec <HAL_ADC_IRQHandler+0x250>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	e008      	b.n	80049ee <HAL_ADC_IRQHandler+0x252>
 80049dc:	40022000 	.word	0x40022000
 80049e0:	40022100 	.word	0x40022100
 80049e4:	40022300 	.word	0x40022300
 80049e8:	58026300 	.word	0x58026300
 80049ec:	4b84      	ldr	r3, [pc, #528]	; (8004c00 <HAL_ADC_IRQHandler+0x464>)
 80049ee:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d047      	beq.n	8004a8c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d007      	beq.n	8004a16 <HAL_ADC_IRQHandler+0x27a>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d03f      	beq.n	8004a8c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004a0c:	6a3b      	ldr	r3, [r7, #32]
 8004a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d13a      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d133      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d12e      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fb49 	bl	80040ca <LL_ADC_INJ_IsConversionOngoing>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d11a      	bne.n	8004a74 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a4c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d112      	bne.n	8004a8c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	661a      	str	r2, [r3, #96]	; 0x60
 8004a72:	e00b      	b.n	8004a8c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	f043 0210 	orr.w	r2, r3, #16
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 f86b 	bl	8005b68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2260      	movs	r2, #96	; 0x60
 8004a98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d011      	beq.n	8004ac8 <HAL_ADC_IRQHandler+0x32c>
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8a8 	bl	8004c10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d012      	beq.n	8004af8 <HAL_ADC_IRQHandler+0x35c>
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f001 f851 	bl	8005b90 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d012      	beq.n	8004b28 <HAL_ADC_IRQHandler+0x38c>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f001 f843 	bl	8005ba4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d043      	beq.n	8004bba <HAL_ADC_IRQHandler+0x41e>
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	f003 0310 	and.w	r3, r3, #16
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d03e      	beq.n	8004bba <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004b44:	2301      	movs	r3, #1
 8004b46:	627b      	str	r3, [r7, #36]	; 0x24
 8004b48:	e021      	b.n	8004b8e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d015      	beq.n	8004b7c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <HAL_ADC_IRQHandler+0x464>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d004      	beq.n	8004b64 <HAL_ADC_IRQHandler+0x3c8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a29      	ldr	r2, [pc, #164]	; (8004c04 <HAL_ADC_IRQHandler+0x468>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <HAL_ADC_IRQHandler+0x3cc>
 8004b64:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_ADC_IRQHandler+0x46c>)
 8004b66:	e000      	b.n	8004b6a <HAL_ADC_IRQHandler+0x3ce>
 8004b68:	4b28      	ldr	r3, [pc, #160]	; (8004c0c <HAL_ADC_IRQHandler+0x470>)
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff f9dc 	bl	8003f28 <LL_ADC_GetMultiDMATransfer>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00b      	beq.n	8004b8e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004b76:	2301      	movs	r3, #1
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7a:	e008      	b.n	8004b8e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0303 	and.w	r3, r3, #3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d10e      	bne.n	8004bb2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba4:	f043 0202 	orr.w	r2, r3, #2
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f839 	bl	8004c24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2210      	movs	r2, #16
 8004bb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d018      	beq.n	8004bf6 <HAL_ADC_IRQHandler+0x45a>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d013      	beq.n	8004bf6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bde:	f043 0208 	orr.w	r2, r3, #8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bee:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 ffc3 	bl	8005b7c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004bf6:	bf00      	nop
 8004bf8:	3728      	adds	r7, #40	; 0x28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	40022000 	.word	0x40022000
 8004c04:	40022100 	.word	0x40022100
 8004c08:	40022300 	.word	0x40022300
 8004c0c:	58026300 	.word	0x58026300

08004c10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b0b9      	sub	sp, #228	; 0xe4
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c52:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	4ab3      	ldr	r2, [pc, #716]	; (8004f28 <HAL_ADC_ConfigChannel+0x2f0>)
 8004c5a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d102      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x34>
 8004c66:	2302      	movs	r3, #2
 8004c68:	f000 bcfa 	b.w	8005660 <HAL_ADC_ConfigChannel+0xa28>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fa13 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 84de 	bne.w	8005642 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4aa8      	ldr	r2, [pc, #672]	; (8004f2c <HAL_ADC_ConfigChannel+0x2f4>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d033      	beq.n	8004cf8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d108      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x76>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	0e9b      	lsrs	r3, r3, #26
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cac:	e01d      	b.n	8004cea <HAL_ADC_ConfigChannel+0xb2>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cba:	fa93 f3a3 	rbit	r3, r3
 8004cbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004cc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004cd2:	2320      	movs	r3, #32
 8004cd4:	e004      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cda:	fab3 f383 	clz	r3, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f003 031f 	and.w	r3, r3, #31
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	69d1      	ldr	r1, [r2, #28]
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6812      	ldr	r2, [r2, #0]
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f7ff f856 	bl	8003db6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff f9c8 	bl	80040a4 <LL_ADC_REG_IsConversionOngoing>
 8004d14:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff f9d4 	bl	80040ca <LL_ADC_INJ_IsConversionOngoing>
 8004d22:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f040 8270 	bne.w	8005210 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f040 826b 	bne.w	8005210 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6819      	ldr	r1, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	461a      	mov	r2, r3
 8004d48:	f7ff f874 	bl	8003e34 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a76      	ldr	r2, [pc, #472]	; (8004f2c <HAL_ADC_ConfigChannel+0x2f4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10d      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	695a      	ldr	r2, [r3, #20]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	08db      	lsrs	r3, r3, #3
 8004d62:	f003 0303 	and.w	r3, r3, #3
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d70:	e032      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004d72:	4b6f      	ldr	r3, [pc, #444]	; (8004f30 <HAL_ADC_ConfigChannel+0x2f8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d7e:	d10b      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x160>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	695a      	ldr	r2, [r3, #20]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	e01d      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x19c>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0310 	and.w	r3, r3, #16
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10b      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x186>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	089b      	lsrs	r3, r3, #2
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbc:	e00a      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x19c>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	695a      	ldr	r2, [r3, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	089b      	lsrs	r3, r3, #2
 8004dca:	f003 0304 	and.w	r3, r3, #4
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d048      	beq.n	8004e72 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	6919      	ldr	r1, [r3, #16]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004df0:	f7fe fedc 	bl	8003bac <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a4c      	ldr	r2, [pc, #304]	; (8004f2c <HAL_ADC_ConfigChannel+0x2f4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d119      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6919      	ldr	r1, [r3, #16]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f7fe ff74 	bl	8003cf8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	6919      	ldr	r1, [r3, #16]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d102      	bne.n	8004e28 <HAL_ADC_ConfigChannel+0x1f0>
 8004e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e26:	e000      	b.n	8004e2a <HAL_ADC_ConfigChannel+0x1f2>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f7fe ff42 	bl	8003cb4 <LL_ADC_SetOffsetSaturation>
 8004e30:	e1ee      	b.n	8005210 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6919      	ldr	r1, [r3, #16]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d102      	bne.n	8004e4a <HAL_ADC_ConfigChannel+0x212>
 8004e44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e48:	e000      	b.n	8004e4c <HAL_ADC_ConfigChannel+0x214>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f7fe ff0f 	bl	8003c70 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6919      	ldr	r1, [r3, #16]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	7e1b      	ldrb	r3, [r3, #24]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d102      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x230>
 8004e62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e66:	e000      	b.n	8004e6a <HAL_ADC_ConfigChannel+0x232>
 8004e68:	2300      	movs	r3, #0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f7fe fee6 	bl	8003c3c <LL_ADC_SetDataRightShift>
 8004e70:	e1ce      	b.n	8005210 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2d      	ldr	r2, [pc, #180]	; (8004f2c <HAL_ADC_ConfigChannel+0x2f4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	f040 8181 	bne.w	8005180 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2100      	movs	r1, #0
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe fec3 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x272>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe feb8 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	0e9b      	lsrs	r3, r3, #26
 8004ea4:	f003 021f 	and.w	r2, r3, #31
 8004ea8:	e01e      	b.n	8004ee8 <HAL_ADC_ConfigChannel+0x2b0>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fe fead 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ebc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ec0:	fa93 f3a3 	rbit	r3, r3
 8004ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004ec8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004ed8:	2320      	movs	r3, #32
 8004eda:	e004      	b.n	8004ee6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004edc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004ee0:	fab3 f383 	clz	r3, r3
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x2c8>
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	0e9b      	lsrs	r3, r3, #26
 8004efa:	f003 031f 	and.w	r3, r3, #31
 8004efe:	e01e      	b.n	8004f3e <HAL_ADC_ConfigChannel+0x306>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f0c:	fa93 f3a3 	rbit	r3, r3
 8004f10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004f14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004f1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004f24:	2320      	movs	r3, #32
 8004f26:	e00a      	b.n	8004f3e <HAL_ADC_ConfigChannel+0x306>
 8004f28:	47ff0000 	.word	0x47ff0000
 8004f2c:	58026000 	.word	0x58026000
 8004f30:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8004f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004f38:	fab3 f383 	clz	r3, r3
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d106      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2200      	movs	r2, #0
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe fef6 	bl	8003d3c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2101      	movs	r1, #1
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe fe5a 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x344>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fe fe4f 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004f72:	4603      	mov	r3, r0
 8004f74:	0e9b      	lsrs	r3, r3, #26
 8004f76:	f003 021f 	and.w	r2, r3, #31
 8004f7a:	e01e      	b.n	8004fba <HAL_ADC_ConfigChannel+0x382>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2101      	movs	r1, #1
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe fe44 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f92:	fa93 f3a3 	rbit	r3, r3
 8004f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004fa2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004faa:	2320      	movs	r3, #32
 8004fac:	e004      	b.n	8004fb8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fb2:	fab3 f383 	clz	r3, r3
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	461a      	mov	r2, r3
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d105      	bne.n	8004fd2 <HAL_ADC_ConfigChannel+0x39a>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	0e9b      	lsrs	r3, r3, #26
 8004fcc:	f003 031f 	and.w	r3, r3, #31
 8004fd0:	e018      	b.n	8005004 <HAL_ADC_ConfigChannel+0x3cc>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fde:	fa93 f3a3 	rbit	r3, r3
 8004fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004fea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004ff6:	2320      	movs	r3, #32
 8004ff8:	e004      	b.n	8005004 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ffe:	fab3 f383 	clz	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	429a      	cmp	r2, r3
 8005006:	d106      	bne.n	8005016 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2200      	movs	r2, #0
 800500e:	2101      	movs	r1, #1
 8005010:	4618      	mov	r0, r3
 8005012:	f7fe fe93 	bl	8003d3c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2102      	movs	r1, #2
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe fdf7 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8005022:	4603      	mov	r3, r0
 8005024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x40a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2102      	movs	r1, #2
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fdec 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 8005038:	4603      	mov	r3, r0
 800503a:	0e9b      	lsrs	r3, r3, #26
 800503c:	f003 021f 	and.w	r2, r3, #31
 8005040:	e01e      	b.n	8005080 <HAL_ADC_ConfigChannel+0x448>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2102      	movs	r1, #2
 8005048:	4618      	mov	r0, r3
 800504a:	f7fe fde1 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 800504e:	4603      	mov	r3, r0
 8005050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005058:	fa93 f3a3 	rbit	r3, r3
 800505c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005060:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005064:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8005068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005070:	2320      	movs	r3, #32
 8005072:	e004      	b.n	800507e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005074:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005078:	fab3 f383 	clz	r3, r3
 800507c:	b2db      	uxtb	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005088:	2b00      	cmp	r3, #0
 800508a:	d105      	bne.n	8005098 <HAL_ADC_ConfigChannel+0x460>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	0e9b      	lsrs	r3, r3, #26
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	e014      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x48a>
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050a0:	fa93 f3a3 	rbit	r3, r3
 80050a4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80050a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80050ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80050b4:	2320      	movs	r3, #32
 80050b6:	e004      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80050b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050bc:	fab3 f383 	clz	r3, r3
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d106      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	2102      	movs	r1, #2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7fe fe34 	bl	8003d3c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2103      	movs	r1, #3
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fd98 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10a      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x4c8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2103      	movs	r1, #3
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fe fd8d 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 80050f6:	4603      	mov	r3, r0
 80050f8:	0e9b      	lsrs	r3, r3, #26
 80050fa:	f003 021f 	and.w	r2, r3, #31
 80050fe:	e017      	b.n	8005130 <HAL_ADC_ConfigChannel+0x4f8>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2103      	movs	r1, #3
 8005106:	4618      	mov	r0, r3
 8005108:	f7fe fd82 	bl	8003c10 <LL_ADC_GetOffsetChannel>
 800510c:	4603      	mov	r3, r0
 800510e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005112:	fa93 f3a3 	rbit	r3, r3
 8005116:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800511c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005122:	2320      	movs	r3, #32
 8005124:	e003      	b.n	800512e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005128:	fab3 f383 	clz	r3, r3
 800512c:	b2db      	uxtb	r3, r3
 800512e:	461a      	mov	r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005138:	2b00      	cmp	r3, #0
 800513a:	d105      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x510>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	0e9b      	lsrs	r3, r3, #26
 8005142:	f003 031f 	and.w	r3, r3, #31
 8005146:	e011      	b.n	800516c <HAL_ADC_ConfigChannel+0x534>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005150:	fa93 f3a3 	rbit	r3, r3
 8005154:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005156:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005158:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800515a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005160:	2320      	movs	r3, #32
 8005162:	e003      	b.n	800516c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005164:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005166:	fab3 f383 	clz	r3, r3
 800516a:	b2db      	uxtb	r3, r3
 800516c:	429a      	cmp	r2, r3
 800516e:	d14f      	bne.n	8005210 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2200      	movs	r2, #0
 8005176:	2103      	movs	r1, #3
 8005178:	4618      	mov	r0, r3
 800517a:	f7fe fddf 	bl	8003d3c <LL_ADC_SetOffsetState>
 800517e:	e047      	b.n	8005210 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	069b      	lsls	r3, r3, #26
 8005190:	429a      	cmp	r2, r3
 8005192:	d107      	bne.n	80051a4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	069b      	lsls	r3, r3, #26
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d107      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051c6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	069b      	lsls	r3, r3, #26
 80051d8:	429a      	cmp	r2, r3
 80051da:	d107      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80051ea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	069b      	lsls	r3, r3, #26
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d107      	bne.n	8005210 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800520e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe ff0b 	bl	8004030 <LL_ADC_IsEnabled>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f040 8219 	bne.w	8005654 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	6819      	ldr	r1, [r3, #0]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	461a      	mov	r2, r3
 8005230:	f7fe fe2c 	bl	8003e8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	4aa1      	ldr	r2, [pc, #644]	; (80054c0 <HAL_ADC_ConfigChannel+0x888>)
 800523a:	4293      	cmp	r3, r2
 800523c:	f040 812e 	bne.w	800549c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10b      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x630>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	3301      	adds	r3, #1
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	2b09      	cmp	r3, #9
 800525e:	bf94      	ite	ls
 8005260:	2301      	movls	r3, #1
 8005262:	2300      	movhi	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	e019      	b.n	800529c <HAL_ADC_ConfigChannel+0x664>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005270:	fa93 f3a3 	rbit	r3, r3
 8005274:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005278:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800527a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005280:	2320      	movs	r3, #32
 8005282:	e003      	b.n	800528c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005286:	fab3 f383 	clz	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	3301      	adds	r3, #1
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	2b09      	cmp	r3, #9
 8005294:	bf94      	ite	ls
 8005296:	2301      	movls	r3, #1
 8005298:	2300      	movhi	r3, #0
 800529a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800529c:	2b00      	cmp	r3, #0
 800529e:	d079      	beq.n	8005394 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d107      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x684>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	0e9b      	lsrs	r3, r3, #26
 80052b2:	3301      	adds	r3, #1
 80052b4:	069b      	lsls	r3, r3, #26
 80052b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052ba:	e015      	b.n	80052e8 <HAL_ADC_ConfigChannel+0x6b0>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	fa93 f3a3 	rbit	r3, r3
 80052c8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80052ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80052d4:	2320      	movs	r3, #32
 80052d6:	e003      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80052d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052da:	fab3 f383 	clz	r3, r3
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	3301      	adds	r3, #1
 80052e2:	069b      	lsls	r3, r3, #26
 80052e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d109      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x6d0>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	0e9b      	lsrs	r3, r3, #26
 80052fa:	3301      	adds	r3, #1
 80052fc:	f003 031f 	and.w	r3, r3, #31
 8005300:	2101      	movs	r1, #1
 8005302:	fa01 f303 	lsl.w	r3, r1, r3
 8005306:	e017      	b.n	8005338 <HAL_ADC_ConfigChannel+0x700>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800530e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005310:	fa93 f3a3 	rbit	r3, r3
 8005314:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005318:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800531a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005320:	2320      	movs	r3, #32
 8005322:	e003      	b.n	800532c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	fab3 f383 	clz	r3, r3
 800532a:	b2db      	uxtb	r3, r3
 800532c:	3301      	adds	r3, #1
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2101      	movs	r1, #1
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	ea42 0103 	orr.w	r1, r2, r3
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10a      	bne.n	800535e <HAL_ADC_ConfigChannel+0x726>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	0e9b      	lsrs	r3, r3, #26
 800534e:	3301      	adds	r3, #1
 8005350:	f003 021f 	and.w	r2, r3, #31
 8005354:	4613      	mov	r3, r2
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	4413      	add	r3, r2
 800535a:	051b      	lsls	r3, r3, #20
 800535c:	e018      	b.n	8005390 <HAL_ADC_ConfigChannel+0x758>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005376:	2320      	movs	r3, #32
 8005378:	e003      	b.n	8005382 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	fab3 f383 	clz	r3, r3
 8005380:	b2db      	uxtb	r3, r3
 8005382:	3301      	adds	r3, #1
 8005384:	f003 021f 	and.w	r2, r3, #31
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005390:	430b      	orrs	r3, r1
 8005392:	e07e      	b.n	8005492 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539c:	2b00      	cmp	r3, #0
 800539e:	d107      	bne.n	80053b0 <HAL_ADC_ConfigChannel+0x778>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	0e9b      	lsrs	r3, r3, #26
 80053a6:	3301      	adds	r3, #1
 80053a8:	069b      	lsls	r3, r3, #26
 80053aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053ae:	e015      	b.n	80053dc <HAL_ADC_ConfigChannel+0x7a4>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	fa93 f3a3 	rbit	r3, r3
 80053bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80053c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80053c8:	2320      	movs	r3, #32
 80053ca:	e003      	b.n	80053d4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80053cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ce:	fab3 f383 	clz	r3, r3
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	3301      	adds	r3, #1
 80053d6:	069b      	lsls	r3, r3, #26
 80053d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d109      	bne.n	80053fc <HAL_ADC_ConfigChannel+0x7c4>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0e9b      	lsrs	r3, r3, #26
 80053ee:	3301      	adds	r3, #1
 80053f0:	f003 031f 	and.w	r3, r3, #31
 80053f4:	2101      	movs	r1, #1
 80053f6:	fa01 f303 	lsl.w	r3, r1, r3
 80053fa:	e017      	b.n	800542c <HAL_ADC_ConfigChannel+0x7f4>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	fa93 f3a3 	rbit	r3, r3
 8005408:	61bb      	str	r3, [r7, #24]
  return result;
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005414:	2320      	movs	r3, #32
 8005416:	e003      	b.n	8005420 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	fab3 f383 	clz	r3, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	3301      	adds	r3, #1
 8005422:	f003 031f 	and.w	r3, r3, #31
 8005426:	2101      	movs	r1, #1
 8005428:	fa01 f303 	lsl.w	r3, r1, r3
 800542c:	ea42 0103 	orr.w	r1, r2, r3
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10d      	bne.n	8005458 <HAL_ADC_ConfigChannel+0x820>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	0e9b      	lsrs	r3, r3, #26
 8005442:	3301      	adds	r3, #1
 8005444:	f003 021f 	and.w	r2, r3, #31
 8005448:	4613      	mov	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	3b1e      	subs	r3, #30
 8005450:	051b      	lsls	r3, r3, #20
 8005452:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005456:	e01b      	b.n	8005490 <HAL_ADC_ConfigChannel+0x858>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	fa93 f3a3 	rbit	r3, r3
 8005464:	60fb      	str	r3, [r7, #12]
  return result;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005470:	2320      	movs	r3, #32
 8005472:	e003      	b.n	800547c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	fab3 f383 	clz	r3, r3
 800547a:	b2db      	uxtb	r3, r3
 800547c:	3301      	adds	r3, #1
 800547e:	f003 021f 	and.w	r2, r3, #31
 8005482:	4613      	mov	r3, r2
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	4413      	add	r3, r2
 8005488:	3b1e      	subs	r3, #30
 800548a:	051b      	lsls	r3, r3, #20
 800548c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005490:	430b      	orrs	r3, r1
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	6892      	ldr	r2, [r2, #8]
 8005496:	4619      	mov	r1, r3
 8005498:	f7fe fccc 	bl	8003e34 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f280 80d7 	bge.w	8005654 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a06      	ldr	r2, [pc, #24]	; (80054c4 <HAL_ADC_ConfigChannel+0x88c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_ADC_ConfigChannel+0x882>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a04      	ldr	r2, [pc, #16]	; (80054c8 <HAL_ADC_ConfigChannel+0x890>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d10a      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x898>
 80054ba:	4b04      	ldr	r3, [pc, #16]	; (80054cc <HAL_ADC_ConfigChannel+0x894>)
 80054bc:	e009      	b.n	80054d2 <HAL_ADC_ConfigChannel+0x89a>
 80054be:	bf00      	nop
 80054c0:	47ff0000 	.word	0x47ff0000
 80054c4:	40022000 	.word	0x40022000
 80054c8:	40022100 	.word	0x40022100
 80054cc:	40022300 	.word	0x40022300
 80054d0:	4b65      	ldr	r3, [pc, #404]	; (8005668 <HAL_ADC_ConfigChannel+0xa30>)
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fe fb5c 	bl	8003b90 <LL_ADC_GetCommonPathInternalCh>
 80054d8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a62      	ldr	r2, [pc, #392]	; (800566c <HAL_ADC_ConfigChannel+0xa34>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_ADC_ConfigChannel+0x8b8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a61      	ldr	r2, [pc, #388]	; (8005670 <HAL_ADC_ConfigChannel+0xa38>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d10e      	bne.n	800550e <HAL_ADC_ConfigChannel+0x8d6>
 80054f0:	485e      	ldr	r0, [pc, #376]	; (800566c <HAL_ADC_ConfigChannel+0xa34>)
 80054f2:	f7fe fd9d 	bl	8004030 <LL_ADC_IsEnabled>
 80054f6:	4604      	mov	r4, r0
 80054f8:	485d      	ldr	r0, [pc, #372]	; (8005670 <HAL_ADC_ConfigChannel+0xa38>)
 80054fa:	f7fe fd99 	bl	8004030 <LL_ADC_IsEnabled>
 80054fe:	4603      	mov	r3, r0
 8005500:	4323      	orrs	r3, r4
 8005502:	2b00      	cmp	r3, #0
 8005504:	bf0c      	ite	eq
 8005506:	2301      	moveq	r3, #1
 8005508:	2300      	movne	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	e008      	b.n	8005520 <HAL_ADC_ConfigChannel+0x8e8>
 800550e:	4859      	ldr	r0, [pc, #356]	; (8005674 <HAL_ADC_ConfigChannel+0xa3c>)
 8005510:	f7fe fd8e 	bl	8004030 <LL_ADC_IsEnabled>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf0c      	ite	eq
 800551a:	2301      	moveq	r3, #1
 800551c:	2300      	movne	r3, #0
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 8084 	beq.w	800562e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a53      	ldr	r2, [pc, #332]	; (8005678 <HAL_ADC_ConfigChannel+0xa40>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d132      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x95e>
 8005530:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d12c      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4c      	ldr	r2, [pc, #304]	; (8005674 <HAL_ADC_ConfigChannel+0xa3c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	f040 8086 	bne.w	8005654 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a47      	ldr	r2, [pc, #284]	; (800566c <HAL_ADC_ConfigChannel+0xa34>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d004      	beq.n	800555c <HAL_ADC_ConfigChannel+0x924>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a46      	ldr	r2, [pc, #280]	; (8005670 <HAL_ADC_ConfigChannel+0xa38>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d101      	bne.n	8005560 <HAL_ADC_ConfigChannel+0x928>
 800555c:	4a47      	ldr	r2, [pc, #284]	; (800567c <HAL_ADC_ConfigChannel+0xa44>)
 800555e:	e000      	b.n	8005562 <HAL_ADC_ConfigChannel+0x92a>
 8005560:	4a41      	ldr	r2, [pc, #260]	; (8005668 <HAL_ADC_ConfigChannel+0xa30>)
 8005562:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f7fe fafc 	bl	8003b6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005572:	4b43      	ldr	r3, [pc, #268]	; (8005680 <HAL_ADC_ConfigChannel+0xa48>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	4a42      	ldr	r2, [pc, #264]	; (8005684 <HAL_ADC_ConfigChannel+0xa4c>)
 800557a:	fba2 2303 	umull	r2, r3, r2, r3
 800557e:	099b      	lsrs	r3, r3, #6
 8005580:	3301      	adds	r3, #1
 8005582:	005b      	lsls	r3, r3, #1
 8005584:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005586:	e002      	b.n	800558e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	3b01      	subs	r3, #1
 800558c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1f9      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005594:	e05e      	b.n	8005654 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a3b      	ldr	r2, [pc, #236]	; (8005688 <HAL_ADC_ConfigChannel+0xa50>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d120      	bne.n	80055e2 <HAL_ADC_ConfigChannel+0x9aa>
 80055a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d11a      	bne.n	80055e2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a30      	ldr	r2, [pc, #192]	; (8005674 <HAL_ADC_ConfigChannel+0xa3c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d14e      	bne.n	8005654 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2c      	ldr	r2, [pc, #176]	; (800566c <HAL_ADC_ConfigChannel+0xa34>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d004      	beq.n	80055ca <HAL_ADC_ConfigChannel+0x992>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <HAL_ADC_ConfigChannel+0xa38>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d101      	bne.n	80055ce <HAL_ADC_ConfigChannel+0x996>
 80055ca:	4a2c      	ldr	r2, [pc, #176]	; (800567c <HAL_ADC_ConfigChannel+0xa44>)
 80055cc:	e000      	b.n	80055d0 <HAL_ADC_ConfigChannel+0x998>
 80055ce:	4a26      	ldr	r2, [pc, #152]	; (8005668 <HAL_ADC_ConfigChannel+0xa30>)
 80055d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055d8:	4619      	mov	r1, r3
 80055da:	4610      	mov	r0, r2
 80055dc:	f7fe fac5 	bl	8003b6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80055e0:	e038      	b.n	8005654 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a29      	ldr	r2, [pc, #164]	; (800568c <HAL_ADC_ConfigChannel+0xa54>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d133      	bne.n	8005654 <HAL_ADC_ConfigChannel+0xa1c>
 80055ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d12d      	bne.n	8005654 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <HAL_ADC_ConfigChannel+0xa3c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d128      	bne.n	8005654 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a19      	ldr	r2, [pc, #100]	; (800566c <HAL_ADC_ConfigChannel+0xa34>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <HAL_ADC_ConfigChannel+0x9de>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a17      	ldr	r2, [pc, #92]	; (8005670 <HAL_ADC_ConfigChannel+0xa38>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_ADC_ConfigChannel+0x9e2>
 8005616:	4a19      	ldr	r2, [pc, #100]	; (800567c <HAL_ADC_ConfigChannel+0xa44>)
 8005618:	e000      	b.n	800561c <HAL_ADC_ConfigChannel+0x9e4>
 800561a:	4a13      	ldr	r2, [pc, #76]	; (8005668 <HAL_ADC_ConfigChannel+0xa30>)
 800561c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005624:	4619      	mov	r1, r3
 8005626:	4610      	mov	r0, r2
 8005628:	f7fe fa9f 	bl	8003b6a <LL_ADC_SetCommonPathInternalCh>
 800562c:	e012      	b.n	8005654 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005632:	f043 0220 	orr.w	r2, r3, #32
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005640:	e008      	b.n	8005654 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005646:	f043 0220 	orr.w	r2, r3, #32
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800565c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005660:	4618      	mov	r0, r3
 8005662:	37e4      	adds	r7, #228	; 0xe4
 8005664:	46bd      	mov	sp, r7
 8005666:	bd90      	pop	{r4, r7, pc}
 8005668:	58026300 	.word	0x58026300
 800566c:	40022000 	.word	0x40022000
 8005670:	40022100 	.word	0x40022100
 8005674:	58026000 	.word	0x58026000
 8005678:	c7520000 	.word	0xc7520000
 800567c:	40022300 	.word	0x40022300
 8005680:	20000000 	.word	0x20000000
 8005684:	053e2d63 	.word	0x053e2d63
 8005688:	c3210000 	.word	0xc3210000
 800568c:	cb840000 	.word	0xcb840000

08005690 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f7fe fcc7 	bl	8004030 <LL_ADC_IsEnabled>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d16e      	bne.n	8005786 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	4b38      	ldr	r3, [pc, #224]	; (8005790 <ADC_Enable+0x100>)
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00d      	beq.n	80056d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ba:	f043 0210 	orr.w	r2, r3, #16
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056c6:	f043 0201 	orr.w	r2, r3, #1
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e05a      	b.n	8005788 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fc82 	bl	8003fe0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80056dc:	f7fe fa26 	bl	8003b2c <HAL_GetTick>
 80056e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a2b      	ldr	r2, [pc, #172]	; (8005794 <ADC_Enable+0x104>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <ADC_Enable+0x66>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a29      	ldr	r2, [pc, #164]	; (8005798 <ADC_Enable+0x108>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <ADC_Enable+0x6a>
 80056f6:	4b29      	ldr	r3, [pc, #164]	; (800579c <ADC_Enable+0x10c>)
 80056f8:	e000      	b.n	80056fc <ADC_Enable+0x6c>
 80056fa:	4b29      	ldr	r3, [pc, #164]	; (80057a0 <ADC_Enable+0x110>)
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe fc05 	bl	8003f0c <LL_ADC_GetMultimode>
 8005702:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a23      	ldr	r2, [pc, #140]	; (8005798 <ADC_Enable+0x108>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d002      	beq.n	8005714 <ADC_Enable+0x84>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	e000      	b.n	8005716 <ADC_Enable+0x86>
 8005714:	4b1f      	ldr	r3, [pc, #124]	; (8005794 <ADC_Enable+0x104>)
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6812      	ldr	r2, [r2, #0]
 800571a:	4293      	cmp	r3, r2
 800571c:	d02c      	beq.n	8005778 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d130      	bne.n	8005786 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005724:	e028      	b.n	8005778 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fc80 	bl	8004030 <LL_ADC_IsEnabled>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fc50 	bl	8003fe0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005740:	f7fe f9f4 	bl	8003b2c <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d914      	bls.n	8005778 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d00d      	beq.n	8005778 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005760:	f043 0210 	orr.w	r2, r3, #16
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576c:	f043 0201 	orr.w	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e007      	b.n	8005788 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b01      	cmp	r3, #1
 8005784:	d1cf      	bne.n	8005726 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	8000003f 	.word	0x8000003f
 8005794:	40022000 	.word	0x40022000
 8005798:	40022100 	.word	0x40022100
 800579c:	40022300 	.word	0x40022300
 80057a0:	58026300 	.word	0x58026300

080057a4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7fe fc50 	bl	8004056 <LL_ADC_IsDisableOngoing>
 80057b6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7fe fc37 	bl	8004030 <LL_ADC_IsEnabled>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d047      	beq.n	8005858 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d144      	bne.n	8005858 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 030d 	and.w	r3, r3, #13
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d10c      	bne.n	80057f6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fe fc11 	bl	8004008 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2203      	movs	r2, #3
 80057ec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057ee:	f7fe f99d 	bl	8003b2c <HAL_GetTick>
 80057f2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057f4:	e029      	b.n	800584a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fa:	f043 0210 	orr.w	r2, r3, #16
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005806:	f043 0201 	orr.w	r2, r3, #1
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e023      	b.n	800585a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005812:	f7fe f98b 	bl	8003b2c <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d914      	bls.n	800584a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005832:	f043 0210 	orr.w	r2, r3, #16
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800583e:	f043 0201 	orr.w	r2, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e007      	b.n	800585a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1dc      	bne.n	8005812 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a6b      	ldr	r2, [pc, #428]	; (8005a20 <ADC_ConfigureBoostMode+0x1bc>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <ADC_ConfigureBoostMode+0x1c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a6a      	ldr	r2, [pc, #424]	; (8005a24 <ADC_ConfigureBoostMode+0x1c0>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d109      	bne.n	8005894 <ADC_ConfigureBoostMode+0x30>
 8005880:	4b69      	ldr	r3, [pc, #420]	; (8005a28 <ADC_ConfigureBoostMode+0x1c4>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005888:	2b00      	cmp	r3, #0
 800588a:	bf14      	ite	ne
 800588c:	2301      	movne	r3, #1
 800588e:	2300      	moveq	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e008      	b.n	80058a6 <ADC_ConfigureBoostMode+0x42>
 8005894:	4b65      	ldr	r3, [pc, #404]	; (8005a2c <ADC_ConfigureBoostMode+0x1c8>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf14      	ite	ne
 80058a0:	2301      	movne	r3, #1
 80058a2:	2300      	moveq	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d01c      	beq.n	80058e4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80058aa:	f004 f8d9 	bl	8009a60 <HAL_RCC_GetHCLKFreq>
 80058ae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058b8:	d010      	beq.n	80058dc <ADC_ConfigureBoostMode+0x78>
 80058ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058be:	d871      	bhi.n	80059a4 <ADC_ConfigureBoostMode+0x140>
 80058c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c4:	d002      	beq.n	80058cc <ADC_ConfigureBoostMode+0x68>
 80058c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ca:	d16b      	bne.n	80059a4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	0c1b      	lsrs	r3, r3, #16
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	60fb      	str	r3, [r7, #12]
        break;
 80058da:	e066      	b.n	80059aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	089b      	lsrs	r3, r3, #2
 80058e0:	60fb      	str	r3, [r7, #12]
        break;
 80058e2:	e062      	b.n	80059aa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80058e4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80058e8:	f005 f810 	bl	800a90c <HAL_RCCEx_GetPeriphCLKFreq>
 80058ec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80058f6:	d051      	beq.n	800599c <ADC_ConfigureBoostMode+0x138>
 80058f8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80058fc:	d854      	bhi.n	80059a8 <ADC_ConfigureBoostMode+0x144>
 80058fe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005902:	d047      	beq.n	8005994 <ADC_ConfigureBoostMode+0x130>
 8005904:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005908:	d84e      	bhi.n	80059a8 <ADC_ConfigureBoostMode+0x144>
 800590a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800590e:	d03d      	beq.n	800598c <ADC_ConfigureBoostMode+0x128>
 8005910:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005914:	d848      	bhi.n	80059a8 <ADC_ConfigureBoostMode+0x144>
 8005916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800591a:	d033      	beq.n	8005984 <ADC_ConfigureBoostMode+0x120>
 800591c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005920:	d842      	bhi.n	80059a8 <ADC_ConfigureBoostMode+0x144>
 8005922:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005926:	d029      	beq.n	800597c <ADC_ConfigureBoostMode+0x118>
 8005928:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800592c:	d83c      	bhi.n	80059a8 <ADC_ConfigureBoostMode+0x144>
 800592e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005932:	d01a      	beq.n	800596a <ADC_ConfigureBoostMode+0x106>
 8005934:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005938:	d836      	bhi.n	80059a8 <ADC_ConfigureBoostMode+0x144>
 800593a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800593e:	d014      	beq.n	800596a <ADC_ConfigureBoostMode+0x106>
 8005940:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005944:	d830      	bhi.n	80059a8 <ADC_ConfigureBoostMode+0x144>
 8005946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594a:	d00e      	beq.n	800596a <ADC_ConfigureBoostMode+0x106>
 800594c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005950:	d82a      	bhi.n	80059a8 <ADC_ConfigureBoostMode+0x144>
 8005952:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005956:	d008      	beq.n	800596a <ADC_ConfigureBoostMode+0x106>
 8005958:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800595c:	d824      	bhi.n	80059a8 <ADC_ConfigureBoostMode+0x144>
 800595e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005962:	d002      	beq.n	800596a <ADC_ConfigureBoostMode+0x106>
 8005964:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005968:	d11e      	bne.n	80059a8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	0c9b      	lsrs	r3, r3, #18
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	fbb2 f3f3 	udiv	r3, r2, r3
 8005978:	60fb      	str	r3, [r7, #12]
        break;
 800597a:	e016      	b.n	80059aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	60fb      	str	r3, [r7, #12]
        break;
 8005982:	e012      	b.n	80059aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	095b      	lsrs	r3, r3, #5
 8005988:	60fb      	str	r3, [r7, #12]
        break;
 800598a:	e00e      	b.n	80059aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	60fb      	str	r3, [r7, #12]
        break;
 8005992:	e00a      	b.n	80059aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	09db      	lsrs	r3, r3, #7
 8005998:	60fb      	str	r3, [r7, #12]
        break;
 800599a:	e006      	b.n	80059aa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	0a1b      	lsrs	r3, r3, #8
 80059a0:	60fb      	str	r3, [r7, #12]
        break;
 80059a2:	e002      	b.n	80059aa <ADC_ConfigureBoostMode+0x146>
        break;
 80059a4:	bf00      	nop
 80059a6:	e000      	b.n	80059aa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80059a8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	085b      	lsrs	r3, r3, #1
 80059ae:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <ADC_ConfigureBoostMode+0x1cc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d808      	bhi.n	80059ca <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689a      	ldr	r2, [r3, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059c6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80059c8:	e025      	b.n	8005a16 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4a19      	ldr	r2, [pc, #100]	; (8005a34 <ADC_ConfigureBoostMode+0x1d0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d80a      	bhi.n	80059e8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e4:	609a      	str	r2, [r3, #8]
}
 80059e6:	e016      	b.n	8005a16 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <ADC_ConfigureBoostMode+0x1d4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d80a      	bhi.n	8005a06 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a02:	609a      	str	r2, [r3, #8]
}
 8005a04:	e007      	b.n	8005a16 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005a14:	609a      	str	r2, [r3, #8]
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40022000 	.word	0x40022000
 8005a24:	40022100 	.word	0x40022100
 8005a28:	40022300 	.word	0x40022300
 8005a2c:	58026300 	.word	0x58026300
 8005a30:	005f5e10 	.word	0x005f5e10
 8005a34:	00bebc20 	.word	0x00bebc20
 8005a38:	017d7840 	.word	0x017d7840

08005a3c <LL_ADC_StartCalibration>:
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689a      	ldr	r2, [r3, #8]
 8005a4c:	4b09      	ldr	r3, [pc, #36]	; (8005a74 <LL_ADC_StartCalibration+0x38>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	609a      	str	r2, [r3, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	3ffeffc0 	.word	0x3ffeffc0

08005a78 <LL_ADC_IsCalibrationOnGoing>:
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a8c:	d101      	bne.n	8005a92 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_ADCEx_Calibration_Start+0x1e>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e04c      	b.n	8005b58 <HAL_ADCEx_Calibration_Start+0xb8>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff fe6c 	bl	80057a4 <ADC_Disable>
 8005acc:	4603      	mov	r3, r0
 8005ace:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d135      	bne.n	8005b42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ada:	4b21      	ldr	r3, [pc, #132]	; (8005b60 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	f043 0202 	orr.w	r2, r3, #2
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	68b9      	ldr	r1, [r7, #8]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff ffa4 	bl	8005a3c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005af4:	e014      	b.n	8005b20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	3301      	adds	r3, #1
 8005afa:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d30d      	bcc.n	8005b20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b08:	f023 0312 	bic.w	r3, r3, #18
 8005b0c:	f043 0210 	orr.w	r2, r3, #16
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e01b      	b.n	8005b58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff ffa7 	bl	8005a78 <LL_ADC_IsCalibrationOnGoing>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e2      	bne.n	8005af6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b34:	f023 0303 	bic.w	r3, r3, #3
 8005b38:	f043 0201 	orr.w	r2, r3, #1
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	661a      	str	r2, [r3, #96]	; 0x60
 8005b40:	e005      	b.n	8005b4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b46:	f043 0210 	orr.w	r2, r3, #16
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	ffffeefd 	.word	0xffffeefd
 8005b64:	25c3f800 	.word	0x25c3f800

08005b68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bdc:	4b0b      	ldr	r3, [pc, #44]	; (8005c0c <__NVIC_SetPriorityGrouping+0x40>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005be8:	4013      	ands	r3, r2
 8005bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <__NVIC_SetPriorityGrouping+0x44>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bfa:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <__NVIC_SetPriorityGrouping+0x40>)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	60d3      	str	r3, [r2, #12]
}
 8005c00:	bf00      	nop
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	e000ed00 	.word	0xe000ed00
 8005c10:	05fa0000 	.word	0x05fa0000

08005c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c14:	b480      	push	{r7}
 8005c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <__NVIC_GetPriorityGrouping+0x18>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	0a1b      	lsrs	r3, r3, #8
 8005c1e:	f003 0307 	and.w	r3, r3, #7
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	e000ed00 	.word	0xe000ed00

08005c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	db0b      	blt.n	8005c5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	f003 021f 	and.w	r2, r3, #31
 8005c48:	4907      	ldr	r1, [pc, #28]	; (8005c68 <__NVIC_EnableIRQ+0x38>)
 8005c4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c4e:	095b      	lsrs	r3, r3, #5
 8005c50:	2001      	movs	r0, #1
 8005c52:	fa00 f202 	lsl.w	r2, r0, r2
 8005c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	e000e100 	.word	0xe000e100

08005c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	6039      	str	r1, [r7, #0]
 8005c76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	db0a      	blt.n	8005c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	490c      	ldr	r1, [pc, #48]	; (8005cb8 <__NVIC_SetPriority+0x4c>)
 8005c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c8a:	0112      	lsls	r2, r2, #4
 8005c8c:	b2d2      	uxtb	r2, r2
 8005c8e:	440b      	add	r3, r1
 8005c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c94:	e00a      	b.n	8005cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	4908      	ldr	r1, [pc, #32]	; (8005cbc <__NVIC_SetPriority+0x50>)
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	3b04      	subs	r3, #4
 8005ca4:	0112      	lsls	r2, r2, #4
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	440b      	add	r3, r1
 8005caa:	761a      	strb	r2, [r3, #24]
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	e000e100 	.word	0xe000e100
 8005cbc:	e000ed00 	.word	0xe000ed00

08005cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b089      	sub	sp, #36	; 0x24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	f1c3 0307 	rsb	r3, r3, #7
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	bf28      	it	cs
 8005cde:	2304      	movcs	r3, #4
 8005ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	2b06      	cmp	r3, #6
 8005ce8:	d902      	bls.n	8005cf0 <NVIC_EncodePriority+0x30>
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3b03      	subs	r3, #3
 8005cee:	e000      	b.n	8005cf2 <NVIC_EncodePriority+0x32>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	43da      	mvns	r2, r3
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	401a      	ands	r2, r3
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d08:	f04f 31ff 	mov.w	r1, #4294967295
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d12:	43d9      	mvns	r1, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d18:	4313      	orrs	r3, r2
         );
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3724      	adds	r7, #36	; 0x24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d38:	d301      	bcc.n	8005d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e00f      	b.n	8005d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	; (8005d68 <SysTick_Config+0x40>)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d46:	210f      	movs	r1, #15
 8005d48:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4c:	f7ff ff8e 	bl	8005c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <SysTick_Config+0x40>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d56:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <SysTick_Config+0x40>)
 8005d58:	2207      	movs	r2, #7
 8005d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	e000e010 	.word	0xe000e010

08005d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f7ff ff29 	bl	8005bcc <__NVIC_SetPriorityGrouping>
}
 8005d7a:	bf00      	nop
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b086      	sub	sp, #24
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	4603      	mov	r3, r0
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
 8005d8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d90:	f7ff ff40 	bl	8005c14 <__NVIC_GetPriorityGrouping>
 8005d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	68b9      	ldr	r1, [r7, #8]
 8005d9a:	6978      	ldr	r0, [r7, #20]
 8005d9c:	f7ff ff90 	bl	8005cc0 <NVIC_EncodePriority>
 8005da0:	4602      	mov	r2, r0
 8005da2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005da6:	4611      	mov	r1, r2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff ff5f 	bl	8005c6c <__NVIC_SetPriority>
}
 8005dae:	bf00      	nop
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b082      	sub	sp, #8
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff ff33 	bl	8005c30 <__NVIC_EnableIRQ>
}
 8005dca:	bf00      	nop
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7ff ffa4 	bl	8005d28 <SysTick_Config>
 8005de0:	4603      	mov	r3, r0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
	...

08005dec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e054      	b.n	8005ea8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	7f5b      	ldrb	r3, [r3, #29]
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d105      	bne.n	8005e14 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f7fb f9dc 	bl	80011cc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	791b      	ldrb	r3, [r3, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d10c      	bne.n	8005e3c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a22      	ldr	r2, [pc, #136]	; (8005eb0 <HAL_CRC_Init+0xc4>)
 8005e28:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	689a      	ldr	r2, [r3, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0218 	bic.w	r2, r2, #24
 8005e38:	609a      	str	r2, [r3, #8]
 8005e3a:	e00c      	b.n	8005e56 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6899      	ldr	r1, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	461a      	mov	r2, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f948 	bl	80060dc <HAL_CRCEx_Polynomial_Set>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e028      	b.n	8005ea8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	795b      	ldrb	r3, [r3, #5]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d105      	bne.n	8005e6a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f04f 32ff 	mov.w	r2, #4294967295
 8005e66:	611a      	str	r2, [r3, #16]
 8005e68:	e004      	b.n	8005e74 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6912      	ldr	r2, [r2, #16]
 8005e72:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	430a      	orrs	r2, r1
 8005e88:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699a      	ldr	r2, [r3, #24]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	04c11db7 	.word	0x04c11db7

08005eb4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	689a      	ldr	r2, [r3, #8]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0201 	orr.w	r2, r2, #1
 8005ed8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	2b03      	cmp	r3, #3
 8005ee0:	d006      	beq.n	8005ef0 <HAL_CRC_Calculate+0x3c>
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d829      	bhi.n	8005f3a <HAL_CRC_Calculate+0x86>
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d019      	beq.n	8005f1e <HAL_CRC_Calculate+0x6a>
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d01e      	beq.n	8005f2c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005eee:	e024      	b.n	8005f3a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	e00a      	b.n	8005f0c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	441a      	add	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6812      	ldr	r2, [r2, #0]
 8005f04:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d3f0      	bcc.n	8005ef6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	613b      	str	r3, [r7, #16]
      break;
 8005f1c:	e00e      	b.n	8005f3c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f812 	bl	8005f4c <CRC_Handle_8>
 8005f28:	6138      	str	r0, [r7, #16]
      break;
 8005f2a:	e007      	b.n	8005f3c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f899 	bl	8006068 <CRC_Handle_16>
 8005f36:	6138      	str	r0, [r7, #16]
      break;
 8005f38:	e000      	b.n	8005f3c <HAL_CRC_Calculate+0x88>
      break;
 8005f3a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005f42:	693b      	ldr	r3, [r7, #16]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b089      	sub	sp, #36	; 0x24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61fb      	str	r3, [r7, #28]
 8005f5c:	e023      	b.n	8005fa6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	4413      	add	r3, r2
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	3301      	adds	r3, #1
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	440b      	add	r3, r1
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005f78:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	3302      	adds	r3, #2
 8005f80:	68b9      	ldr	r1, [r7, #8]
 8005f82:	440b      	add	r3, r1
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005f88:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	3303      	adds	r3, #3
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	440b      	add	r3, r1
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005f9c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	089b      	lsrs	r3, r3, #2
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d3d6      	bcc.n	8005f5e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d04d      	beq.n	8006056 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d107      	bne.n	8005fd4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	4413      	add	r3, r2
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d116      	bne.n	800600c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	b21a      	sxth	r2, r3
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	440b      	add	r3, r1
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	b21b      	sxth	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	8b7a      	ldrh	r2, [r7, #26]
 800600a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	2b03      	cmp	r3, #3
 8006014:	d11f      	bne.n	8006056 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	4413      	add	r3, r2
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	021b      	lsls	r3, r3, #8
 8006022:	b21a      	sxth	r2, r3
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	3301      	adds	r3, #1
 800602a:	68b9      	ldr	r1, [r7, #8]
 800602c:	440b      	add	r3, r1
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b21b      	sxth	r3, r3
 8006032:	4313      	orrs	r3, r2
 8006034:	b21b      	sxth	r3, r3
 8006036:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	8b7a      	ldrh	r2, [r7, #26]
 8006042:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	3302      	adds	r3, #2
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4413      	add	r3, r2
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	6812      	ldr	r2, [r2, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
}
 800605c:	4618      	mov	r0, r3
 800605e:	3724      	adds	r7, #36	; 0x24
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006074:	2300      	movs	r3, #0
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	e013      	b.n	80060a2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	041a      	lsls	r2, r3, #16
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	3302      	adds	r3, #2
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	440b      	add	r3, r1
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	4619      	mov	r1, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3301      	adds	r3, #1
 80060a0:	617b      	str	r3, [r7, #20]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d3e6      	bcc.n	800607a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	4413      	add	r3, r2
 80060c4:	881a      	ldrh	r2, [r3, #0]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80060ec:	231f      	movs	r3, #31
 80060ee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80060f0:	bf00      	nop
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1e5a      	subs	r2, r3, #1
 80060f6:	613a      	str	r2, [r7, #16]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d009      	beq.n	8006110 <HAL_CRCEx_Polynomial_Set+0x34>
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f003 031f 	and.w	r3, r3, #31
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0f0      	beq.n	80060f2 <HAL_CRCEx_Polynomial_Set+0x16>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b18      	cmp	r3, #24
 8006114:	d846      	bhi.n	80061a4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006116:	a201      	add	r2, pc, #4	; (adr r2, 800611c <HAL_CRCEx_Polynomial_Set+0x40>)
 8006118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611c:	080061ab 	.word	0x080061ab
 8006120:	080061a5 	.word	0x080061a5
 8006124:	080061a5 	.word	0x080061a5
 8006128:	080061a5 	.word	0x080061a5
 800612c:	080061a5 	.word	0x080061a5
 8006130:	080061a5 	.word	0x080061a5
 8006134:	080061a5 	.word	0x080061a5
 8006138:	080061a5 	.word	0x080061a5
 800613c:	08006199 	.word	0x08006199
 8006140:	080061a5 	.word	0x080061a5
 8006144:	080061a5 	.word	0x080061a5
 8006148:	080061a5 	.word	0x080061a5
 800614c:	080061a5 	.word	0x080061a5
 8006150:	080061a5 	.word	0x080061a5
 8006154:	080061a5 	.word	0x080061a5
 8006158:	080061a5 	.word	0x080061a5
 800615c:	0800618d 	.word	0x0800618d
 8006160:	080061a5 	.word	0x080061a5
 8006164:	080061a5 	.word	0x080061a5
 8006168:	080061a5 	.word	0x080061a5
 800616c:	080061a5 	.word	0x080061a5
 8006170:	080061a5 	.word	0x080061a5
 8006174:	080061a5 	.word	0x080061a5
 8006178:	080061a5 	.word	0x080061a5
 800617c:	08006181 	.word	0x08006181
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	2b06      	cmp	r3, #6
 8006184:	d913      	bls.n	80061ae <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800618a:	e010      	b.n	80061ae <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b07      	cmp	r3, #7
 8006190:	d90f      	bls.n	80061b2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006196:	e00c      	b.n	80061b2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	2b0f      	cmp	r3, #15
 800619c:	d90b      	bls.n	80061b6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80061a2:	e008      	b.n	80061b6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	75fb      	strb	r3, [r7, #23]
      break;
 80061a8:	e006      	b.n	80061b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061aa:	bf00      	nop
 80061ac:	e004      	b.n	80061b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061ae:	bf00      	nop
 80061b0:	e002      	b.n	80061b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061b2:	bf00      	nop
 80061b4:	e000      	b.n	80061b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80061b6:	bf00      	nop
  }
  if (status == HAL_OK)
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10d      	bne.n	80061da <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f023 0118 	bic.w	r1, r3, #24
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80061da:	7dfb      	ldrb	r3, [r7, #23]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80061f0:	f7fd fc9c 	bl	8003b2c <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d101      	bne.n	8006200 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	e314      	b.n	800682a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a66      	ldr	r2, [pc, #408]	; (80063a0 <HAL_DMA_Init+0x1b8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d04a      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a65      	ldr	r2, [pc, #404]	; (80063a4 <HAL_DMA_Init+0x1bc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d045      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a63      	ldr	r2, [pc, #396]	; (80063a8 <HAL_DMA_Init+0x1c0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d040      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a62      	ldr	r2, [pc, #392]	; (80063ac <HAL_DMA_Init+0x1c4>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d03b      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a60      	ldr	r2, [pc, #384]	; (80063b0 <HAL_DMA_Init+0x1c8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d036      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a5f      	ldr	r2, [pc, #380]	; (80063b4 <HAL_DMA_Init+0x1cc>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d031      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a5d      	ldr	r2, [pc, #372]	; (80063b8 <HAL_DMA_Init+0x1d0>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d02c      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a5c      	ldr	r2, [pc, #368]	; (80063bc <HAL_DMA_Init+0x1d4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d027      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a5a      	ldr	r2, [pc, #360]	; (80063c0 <HAL_DMA_Init+0x1d8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d022      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a59      	ldr	r2, [pc, #356]	; (80063c4 <HAL_DMA_Init+0x1dc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d01d      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a57      	ldr	r2, [pc, #348]	; (80063c8 <HAL_DMA_Init+0x1e0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d018      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a56      	ldr	r2, [pc, #344]	; (80063cc <HAL_DMA_Init+0x1e4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d013      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a54      	ldr	r2, [pc, #336]	; (80063d0 <HAL_DMA_Init+0x1e8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00e      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a53      	ldr	r2, [pc, #332]	; (80063d4 <HAL_DMA_Init+0x1ec>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a51      	ldr	r2, [pc, #324]	; (80063d8 <HAL_DMA_Init+0x1f0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_DMA_Init+0xb8>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a50      	ldr	r2, [pc, #320]	; (80063dc <HAL_DMA_Init+0x1f4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d101      	bne.n	80062a4 <HAL_DMA_Init+0xbc>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <HAL_DMA_Init+0xbe>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 813c 	beq.w	8006524 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a37      	ldr	r2, [pc, #220]	; (80063a0 <HAL_DMA_Init+0x1b8>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d04a      	beq.n	800635c <HAL_DMA_Init+0x174>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a36      	ldr	r2, [pc, #216]	; (80063a4 <HAL_DMA_Init+0x1bc>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d045      	beq.n	800635c <HAL_DMA_Init+0x174>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a34      	ldr	r2, [pc, #208]	; (80063a8 <HAL_DMA_Init+0x1c0>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d040      	beq.n	800635c <HAL_DMA_Init+0x174>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a33      	ldr	r2, [pc, #204]	; (80063ac <HAL_DMA_Init+0x1c4>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d03b      	beq.n	800635c <HAL_DMA_Init+0x174>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a31      	ldr	r2, [pc, #196]	; (80063b0 <HAL_DMA_Init+0x1c8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d036      	beq.n	800635c <HAL_DMA_Init+0x174>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a30      	ldr	r2, [pc, #192]	; (80063b4 <HAL_DMA_Init+0x1cc>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d031      	beq.n	800635c <HAL_DMA_Init+0x174>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a2e      	ldr	r2, [pc, #184]	; (80063b8 <HAL_DMA_Init+0x1d0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d02c      	beq.n	800635c <HAL_DMA_Init+0x174>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a2d      	ldr	r2, [pc, #180]	; (80063bc <HAL_DMA_Init+0x1d4>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d027      	beq.n	800635c <HAL_DMA_Init+0x174>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a2b      	ldr	r2, [pc, #172]	; (80063c0 <HAL_DMA_Init+0x1d8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d022      	beq.n	800635c <HAL_DMA_Init+0x174>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2a      	ldr	r2, [pc, #168]	; (80063c4 <HAL_DMA_Init+0x1dc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d01d      	beq.n	800635c <HAL_DMA_Init+0x174>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a28      	ldr	r2, [pc, #160]	; (80063c8 <HAL_DMA_Init+0x1e0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d018      	beq.n	800635c <HAL_DMA_Init+0x174>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a27      	ldr	r2, [pc, #156]	; (80063cc <HAL_DMA_Init+0x1e4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d013      	beq.n	800635c <HAL_DMA_Init+0x174>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a25      	ldr	r2, [pc, #148]	; (80063d0 <HAL_DMA_Init+0x1e8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d00e      	beq.n	800635c <HAL_DMA_Init+0x174>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a24      	ldr	r2, [pc, #144]	; (80063d4 <HAL_DMA_Init+0x1ec>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d009      	beq.n	800635c <HAL_DMA_Init+0x174>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a22      	ldr	r2, [pc, #136]	; (80063d8 <HAL_DMA_Init+0x1f0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d004      	beq.n	800635c <HAL_DMA_Init+0x174>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a21      	ldr	r2, [pc, #132]	; (80063dc <HAL_DMA_Init+0x1f4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d108      	bne.n	800636e <HAL_DMA_Init+0x186>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f022 0201 	bic.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e007      	b.n	800637e <HAL_DMA_Init+0x196>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0201 	bic.w	r2, r2, #1
 800637c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800637e:	e02f      	b.n	80063e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006380:	f7fd fbd4 	bl	8003b2c <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b05      	cmp	r3, #5
 800638c:	d928      	bls.n	80063e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2203      	movs	r2, #3
 8006398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e244      	b.n	800682a <HAL_DMA_Init+0x642>
 80063a0:	40020010 	.word	0x40020010
 80063a4:	40020028 	.word	0x40020028
 80063a8:	40020040 	.word	0x40020040
 80063ac:	40020058 	.word	0x40020058
 80063b0:	40020070 	.word	0x40020070
 80063b4:	40020088 	.word	0x40020088
 80063b8:	400200a0 	.word	0x400200a0
 80063bc:	400200b8 	.word	0x400200b8
 80063c0:	40020410 	.word	0x40020410
 80063c4:	40020428 	.word	0x40020428
 80063c8:	40020440 	.word	0x40020440
 80063cc:	40020458 	.word	0x40020458
 80063d0:	40020470 	.word	0x40020470
 80063d4:	40020488 	.word	0x40020488
 80063d8:	400204a0 	.word	0x400204a0
 80063dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1c8      	bne.n	8006380 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4b84      	ldr	r3, [pc, #528]	; (800660c <HAL_DMA_Init+0x424>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006406:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006412:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800641e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	2b04      	cmp	r3, #4
 8006432:	d107      	bne.n	8006444 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	4313      	orrs	r3, r2
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2b28      	cmp	r3, #40	; 0x28
 800644a:	d903      	bls.n	8006454 <HAL_DMA_Init+0x26c>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	2b2e      	cmp	r3, #46	; 0x2e
 8006452:	d91f      	bls.n	8006494 <HAL_DMA_Init+0x2ac>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	2b3e      	cmp	r3, #62	; 0x3e
 800645a:	d903      	bls.n	8006464 <HAL_DMA_Init+0x27c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	2b42      	cmp	r3, #66	; 0x42
 8006462:	d917      	bls.n	8006494 <HAL_DMA_Init+0x2ac>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b46      	cmp	r3, #70	; 0x46
 800646a:	d903      	bls.n	8006474 <HAL_DMA_Init+0x28c>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	2b48      	cmp	r3, #72	; 0x48
 8006472:	d90f      	bls.n	8006494 <HAL_DMA_Init+0x2ac>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2b4e      	cmp	r3, #78	; 0x4e
 800647a:	d903      	bls.n	8006484 <HAL_DMA_Init+0x29c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b52      	cmp	r3, #82	; 0x52
 8006482:	d907      	bls.n	8006494 <HAL_DMA_Init+0x2ac>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b73      	cmp	r3, #115	; 0x73
 800648a:	d905      	bls.n	8006498 <HAL_DMA_Init+0x2b0>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b77      	cmp	r3, #119	; 0x77
 8006492:	d801      	bhi.n	8006498 <HAL_DMA_Init+0x2b0>
 8006494:	2301      	movs	r3, #1
 8006496:	e000      	b.n	800649a <HAL_DMA_Init+0x2b2>
 8006498:	2300      	movs	r3, #0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064a4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f023 0307 	bic.w	r3, r3, #7
 80064bc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c2:	697a      	ldr	r2, [r7, #20]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	2b04      	cmp	r3, #4
 80064ce:	d117      	bne.n	8006500 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 ff18 	bl	8008318 <DMA_CheckFifoParam>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d008      	beq.n	8006500 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2240      	movs	r2, #64	; 0x40
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e194      	b.n	800682a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f001 fe53 	bl	80081b4 <DMA_CalcBaseAndBitshift>
 800650e:	4603      	mov	r3, r0
 8006510:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	223f      	movs	r2, #63	; 0x3f
 800651c:	409a      	lsls	r2, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	609a      	str	r2, [r3, #8]
 8006522:	e0ca      	b.n	80066ba <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a39      	ldr	r2, [pc, #228]	; (8006610 <HAL_DMA_Init+0x428>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d022      	beq.n	8006574 <HAL_DMA_Init+0x38c>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a38      	ldr	r2, [pc, #224]	; (8006614 <HAL_DMA_Init+0x42c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d01d      	beq.n	8006574 <HAL_DMA_Init+0x38c>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a36      	ldr	r2, [pc, #216]	; (8006618 <HAL_DMA_Init+0x430>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d018      	beq.n	8006574 <HAL_DMA_Init+0x38c>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a35      	ldr	r2, [pc, #212]	; (800661c <HAL_DMA_Init+0x434>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d013      	beq.n	8006574 <HAL_DMA_Init+0x38c>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a33      	ldr	r2, [pc, #204]	; (8006620 <HAL_DMA_Init+0x438>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00e      	beq.n	8006574 <HAL_DMA_Init+0x38c>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a32      	ldr	r2, [pc, #200]	; (8006624 <HAL_DMA_Init+0x43c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d009      	beq.n	8006574 <HAL_DMA_Init+0x38c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a30      	ldr	r2, [pc, #192]	; (8006628 <HAL_DMA_Init+0x440>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d004      	beq.n	8006574 <HAL_DMA_Init+0x38c>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a2f      	ldr	r2, [pc, #188]	; (800662c <HAL_DMA_Init+0x444>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d101      	bne.n	8006578 <HAL_DMA_Init+0x390>
 8006574:	2301      	movs	r3, #1
 8006576:	e000      	b.n	800657a <HAL_DMA_Init+0x392>
 8006578:	2300      	movs	r3, #0
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8094 	beq.w	80066a8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a22      	ldr	r2, [pc, #136]	; (8006610 <HAL_DMA_Init+0x428>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d021      	beq.n	80065ce <HAL_DMA_Init+0x3e6>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a21      	ldr	r2, [pc, #132]	; (8006614 <HAL_DMA_Init+0x42c>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d01c      	beq.n	80065ce <HAL_DMA_Init+0x3e6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1f      	ldr	r2, [pc, #124]	; (8006618 <HAL_DMA_Init+0x430>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d017      	beq.n	80065ce <HAL_DMA_Init+0x3e6>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1e      	ldr	r2, [pc, #120]	; (800661c <HAL_DMA_Init+0x434>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d012      	beq.n	80065ce <HAL_DMA_Init+0x3e6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1c      	ldr	r2, [pc, #112]	; (8006620 <HAL_DMA_Init+0x438>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00d      	beq.n	80065ce <HAL_DMA_Init+0x3e6>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <HAL_DMA_Init+0x43c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d008      	beq.n	80065ce <HAL_DMA_Init+0x3e6>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a19      	ldr	r2, [pc, #100]	; (8006628 <HAL_DMA_Init+0x440>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <HAL_DMA_Init+0x3e6>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a18      	ldr	r2, [pc, #96]	; (800662c <HAL_DMA_Init+0x444>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2202      	movs	r2, #2
 80065d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4b11      	ldr	r3, [pc, #68]	; (8006630 <HAL_DMA_Init+0x448>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b40      	cmp	r3, #64	; 0x40
 80065f6:	d01d      	beq.n	8006634 <HAL_DMA_Init+0x44c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b80      	cmp	r3, #128	; 0x80
 80065fe:	d102      	bne.n	8006606 <HAL_DMA_Init+0x41e>
 8006600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006604:	e017      	b.n	8006636 <HAL_DMA_Init+0x44e>
 8006606:	2300      	movs	r3, #0
 8006608:	e015      	b.n	8006636 <HAL_DMA_Init+0x44e>
 800660a:	bf00      	nop
 800660c:	fe10803f 	.word	0xfe10803f
 8006610:	58025408 	.word	0x58025408
 8006614:	5802541c 	.word	0x5802541c
 8006618:	58025430 	.word	0x58025430
 800661c:	58025444 	.word	0x58025444
 8006620:	58025458 	.word	0x58025458
 8006624:	5802546c 	.word	0x5802546c
 8006628:	58025480 	.word	0x58025480
 800662c:	58025494 	.word	0x58025494
 8006630:	fffe000f 	.word	0xfffe000f
 8006634:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	68d2      	ldr	r2, [r2, #12]
 800663a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800663c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800664c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006654:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800665c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006664:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	4313      	orrs	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	4b6e      	ldr	r3, [pc, #440]	; (8006834 <HAL_DMA_Init+0x64c>)
 800667c:	4413      	add	r3, r2
 800667e:	4a6e      	ldr	r2, [pc, #440]	; (8006838 <HAL_DMA_Init+0x650>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	009a      	lsls	r2, r3, #2
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fd91 	bl	80081b4 <DMA_CalcBaseAndBitshift>
 8006692:	4603      	mov	r3, r0
 8006694:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2201      	movs	r2, #1
 80066a0:	409a      	lsls	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	605a      	str	r2, [r3, #4]
 80066a6:	e008      	b.n	80066ba <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2240      	movs	r2, #64	; 0x40
 80066ac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2203      	movs	r2, #3
 80066b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e0b7      	b.n	800682a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a5f      	ldr	r2, [pc, #380]	; (800683c <HAL_DMA_Init+0x654>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d072      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a5d      	ldr	r2, [pc, #372]	; (8006840 <HAL_DMA_Init+0x658>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d06d      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a5c      	ldr	r2, [pc, #368]	; (8006844 <HAL_DMA_Init+0x65c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d068      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a5a      	ldr	r2, [pc, #360]	; (8006848 <HAL_DMA_Init+0x660>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d063      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a59      	ldr	r2, [pc, #356]	; (800684c <HAL_DMA_Init+0x664>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d05e      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a57      	ldr	r2, [pc, #348]	; (8006850 <HAL_DMA_Init+0x668>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d059      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a56      	ldr	r2, [pc, #344]	; (8006854 <HAL_DMA_Init+0x66c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d054      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a54      	ldr	r2, [pc, #336]	; (8006858 <HAL_DMA_Init+0x670>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d04f      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a53      	ldr	r2, [pc, #332]	; (800685c <HAL_DMA_Init+0x674>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d04a      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a51      	ldr	r2, [pc, #324]	; (8006860 <HAL_DMA_Init+0x678>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d045      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a50      	ldr	r2, [pc, #320]	; (8006864 <HAL_DMA_Init+0x67c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d040      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a4e      	ldr	r2, [pc, #312]	; (8006868 <HAL_DMA_Init+0x680>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d03b      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a4d      	ldr	r2, [pc, #308]	; (800686c <HAL_DMA_Init+0x684>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d036      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a4b      	ldr	r2, [pc, #300]	; (8006870 <HAL_DMA_Init+0x688>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d031      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a4a      	ldr	r2, [pc, #296]	; (8006874 <HAL_DMA_Init+0x68c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d02c      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a48      	ldr	r2, [pc, #288]	; (8006878 <HAL_DMA_Init+0x690>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d027      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a47      	ldr	r2, [pc, #284]	; (800687c <HAL_DMA_Init+0x694>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d022      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a45      	ldr	r2, [pc, #276]	; (8006880 <HAL_DMA_Init+0x698>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d01d      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a44      	ldr	r2, [pc, #272]	; (8006884 <HAL_DMA_Init+0x69c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d018      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a42      	ldr	r2, [pc, #264]	; (8006888 <HAL_DMA_Init+0x6a0>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d013      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a41      	ldr	r2, [pc, #260]	; (800688c <HAL_DMA_Init+0x6a4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00e      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a3f      	ldr	r2, [pc, #252]	; (8006890 <HAL_DMA_Init+0x6a8>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d009      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a3e      	ldr	r2, [pc, #248]	; (8006894 <HAL_DMA_Init+0x6ac>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d004      	beq.n	80067aa <HAL_DMA_Init+0x5c2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a3c      	ldr	r2, [pc, #240]	; (8006898 <HAL_DMA_Init+0x6b0>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <HAL_DMA_Init+0x5c6>
 80067aa:	2301      	movs	r3, #1
 80067ac:	e000      	b.n	80067b0 <HAL_DMA_Init+0x5c8>
 80067ae:	2300      	movs	r3, #0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d032      	beq.n	800681a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fe2b 	bl	8008410 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2b80      	cmp	r3, #128	; 0x80
 80067c0:	d102      	bne.n	80067c8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d0:	b2d2      	uxtb	r2, r2
 80067d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80067dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d010      	beq.n	8006808 <HAL_DMA_Init+0x620>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d80c      	bhi.n	8006808 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f001 fea8 	bl	8008544 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006804:	605a      	str	r2, [r3, #4]
 8006806:	e008      	b.n	800681a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	a7fdabf8 	.word	0xa7fdabf8
 8006838:	cccccccd 	.word	0xcccccccd
 800683c:	40020010 	.word	0x40020010
 8006840:	40020028 	.word	0x40020028
 8006844:	40020040 	.word	0x40020040
 8006848:	40020058 	.word	0x40020058
 800684c:	40020070 	.word	0x40020070
 8006850:	40020088 	.word	0x40020088
 8006854:	400200a0 	.word	0x400200a0
 8006858:	400200b8 	.word	0x400200b8
 800685c:	40020410 	.word	0x40020410
 8006860:	40020428 	.word	0x40020428
 8006864:	40020440 	.word	0x40020440
 8006868:	40020458 	.word	0x40020458
 800686c:	40020470 	.word	0x40020470
 8006870:	40020488 	.word	0x40020488
 8006874:	400204a0 	.word	0x400204a0
 8006878:	400204b8 	.word	0x400204b8
 800687c:	58025408 	.word	0x58025408
 8006880:	5802541c 	.word	0x5802541c
 8006884:	58025430 	.word	0x58025430
 8006888:	58025444 	.word	0x58025444
 800688c:	58025458 	.word	0x58025458
 8006890:	5802546c 	.word	0x5802546c
 8006894:	58025480 	.word	0x58025480
 8006898:	58025494 	.word	0x58025494

0800689c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068a4:	f7fd f942 	bl	8003b2c <HAL_GetTick>
 80068a8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e2dc      	b.n	8006e6e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d008      	beq.n	80068d2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2280      	movs	r2, #128	; 0x80
 80068c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e2cd      	b.n	8006e6e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a76      	ldr	r2, [pc, #472]	; (8006ab0 <HAL_DMA_Abort+0x214>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d04a      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a74      	ldr	r2, [pc, #464]	; (8006ab4 <HAL_DMA_Abort+0x218>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d045      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a73      	ldr	r2, [pc, #460]	; (8006ab8 <HAL_DMA_Abort+0x21c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d040      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a71      	ldr	r2, [pc, #452]	; (8006abc <HAL_DMA_Abort+0x220>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d03b      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a70      	ldr	r2, [pc, #448]	; (8006ac0 <HAL_DMA_Abort+0x224>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d036      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a6e      	ldr	r2, [pc, #440]	; (8006ac4 <HAL_DMA_Abort+0x228>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d031      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a6d      	ldr	r2, [pc, #436]	; (8006ac8 <HAL_DMA_Abort+0x22c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d02c      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a6b      	ldr	r2, [pc, #428]	; (8006acc <HAL_DMA_Abort+0x230>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d027      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a6a      	ldr	r2, [pc, #424]	; (8006ad0 <HAL_DMA_Abort+0x234>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d022      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a68      	ldr	r2, [pc, #416]	; (8006ad4 <HAL_DMA_Abort+0x238>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d01d      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a67      	ldr	r2, [pc, #412]	; (8006ad8 <HAL_DMA_Abort+0x23c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a65      	ldr	r2, [pc, #404]	; (8006adc <HAL_DMA_Abort+0x240>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a64      	ldr	r2, [pc, #400]	; (8006ae0 <HAL_DMA_Abort+0x244>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a62      	ldr	r2, [pc, #392]	; (8006ae4 <HAL_DMA_Abort+0x248>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a61      	ldr	r2, [pc, #388]	; (8006ae8 <HAL_DMA_Abort+0x24c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_DMA_Abort+0xd6>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a5f      	ldr	r2, [pc, #380]	; (8006aec <HAL_DMA_Abort+0x250>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <HAL_DMA_Abort+0xda>
 8006972:	2301      	movs	r3, #1
 8006974:	e000      	b.n	8006978 <HAL_DMA_Abort+0xdc>
 8006976:	2300      	movs	r3, #0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d013      	beq.n	80069a4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 021e 	bic.w	r2, r2, #30
 800698a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695a      	ldr	r2, [r3, #20]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800699a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	e00a      	b.n	80069ba <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 020e 	bic.w	r2, r2, #14
 80069b2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a3c      	ldr	r2, [pc, #240]	; (8006ab0 <HAL_DMA_Abort+0x214>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d072      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a3a      	ldr	r2, [pc, #232]	; (8006ab4 <HAL_DMA_Abort+0x218>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d06d      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a39      	ldr	r2, [pc, #228]	; (8006ab8 <HAL_DMA_Abort+0x21c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d068      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a37      	ldr	r2, [pc, #220]	; (8006abc <HAL_DMA_Abort+0x220>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d063      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a36      	ldr	r2, [pc, #216]	; (8006ac0 <HAL_DMA_Abort+0x224>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d05e      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a34      	ldr	r2, [pc, #208]	; (8006ac4 <HAL_DMA_Abort+0x228>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d059      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a33      	ldr	r2, [pc, #204]	; (8006ac8 <HAL_DMA_Abort+0x22c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d054      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a31      	ldr	r2, [pc, #196]	; (8006acc <HAL_DMA_Abort+0x230>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d04f      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a30      	ldr	r2, [pc, #192]	; (8006ad0 <HAL_DMA_Abort+0x234>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d04a      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2e      	ldr	r2, [pc, #184]	; (8006ad4 <HAL_DMA_Abort+0x238>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d045      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a2d      	ldr	r2, [pc, #180]	; (8006ad8 <HAL_DMA_Abort+0x23c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d040      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a2b      	ldr	r2, [pc, #172]	; (8006adc <HAL_DMA_Abort+0x240>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d03b      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2a      	ldr	r2, [pc, #168]	; (8006ae0 <HAL_DMA_Abort+0x244>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d036      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a28      	ldr	r2, [pc, #160]	; (8006ae4 <HAL_DMA_Abort+0x248>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d031      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a27      	ldr	r2, [pc, #156]	; (8006ae8 <HAL_DMA_Abort+0x24c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d02c      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a25      	ldr	r2, [pc, #148]	; (8006aec <HAL_DMA_Abort+0x250>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d027      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a24      	ldr	r2, [pc, #144]	; (8006af0 <HAL_DMA_Abort+0x254>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d022      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <HAL_DMA_Abort+0x258>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d01d      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a21      	ldr	r2, [pc, #132]	; (8006af8 <HAL_DMA_Abort+0x25c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d018      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <HAL_DMA_Abort+0x260>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d013      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <HAL_DMA_Abort+0x264>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00e      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <HAL_DMA_Abort+0x268>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <HAL_DMA_Abort+0x26c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_DMA_Abort+0x20e>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <HAL_DMA_Abort+0x270>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d132      	bne.n	8006b10 <HAL_DMA_Abort+0x274>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e031      	b.n	8006b12 <HAL_DMA_Abort+0x276>
 8006aae:	bf00      	nop
 8006ab0:	40020010 	.word	0x40020010
 8006ab4:	40020028 	.word	0x40020028
 8006ab8:	40020040 	.word	0x40020040
 8006abc:	40020058 	.word	0x40020058
 8006ac0:	40020070 	.word	0x40020070
 8006ac4:	40020088 	.word	0x40020088
 8006ac8:	400200a0 	.word	0x400200a0
 8006acc:	400200b8 	.word	0x400200b8
 8006ad0:	40020410 	.word	0x40020410
 8006ad4:	40020428 	.word	0x40020428
 8006ad8:	40020440 	.word	0x40020440
 8006adc:	40020458 	.word	0x40020458
 8006ae0:	40020470 	.word	0x40020470
 8006ae4:	40020488 	.word	0x40020488
 8006ae8:	400204a0 	.word	0x400204a0
 8006aec:	400204b8 	.word	0x400204b8
 8006af0:	58025408 	.word	0x58025408
 8006af4:	5802541c 	.word	0x5802541c
 8006af8:	58025430 	.word	0x58025430
 8006afc:	58025444 	.word	0x58025444
 8006b00:	58025458 	.word	0x58025458
 8006b04:	5802546c 	.word	0x5802546c
 8006b08:	58025480 	.word	0x58025480
 8006b0c:	58025494 	.word	0x58025494
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b24:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a6d      	ldr	r2, [pc, #436]	; (8006ce0 <HAL_DMA_Abort+0x444>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d04a      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6b      	ldr	r2, [pc, #428]	; (8006ce4 <HAL_DMA_Abort+0x448>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d045      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a6a      	ldr	r2, [pc, #424]	; (8006ce8 <HAL_DMA_Abort+0x44c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d040      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a68      	ldr	r2, [pc, #416]	; (8006cec <HAL_DMA_Abort+0x450>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d03b      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a67      	ldr	r2, [pc, #412]	; (8006cf0 <HAL_DMA_Abort+0x454>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d036      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a65      	ldr	r2, [pc, #404]	; (8006cf4 <HAL_DMA_Abort+0x458>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d031      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a64      	ldr	r2, [pc, #400]	; (8006cf8 <HAL_DMA_Abort+0x45c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d02c      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a62      	ldr	r2, [pc, #392]	; (8006cfc <HAL_DMA_Abort+0x460>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d027      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a61      	ldr	r2, [pc, #388]	; (8006d00 <HAL_DMA_Abort+0x464>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d022      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a5f      	ldr	r2, [pc, #380]	; (8006d04 <HAL_DMA_Abort+0x468>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01d      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a5e      	ldr	r2, [pc, #376]	; (8006d08 <HAL_DMA_Abort+0x46c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d018      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a5c      	ldr	r2, [pc, #368]	; (8006d0c <HAL_DMA_Abort+0x470>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a5b      	ldr	r2, [pc, #364]	; (8006d10 <HAL_DMA_Abort+0x474>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00e      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a59      	ldr	r2, [pc, #356]	; (8006d14 <HAL_DMA_Abort+0x478>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d009      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a58      	ldr	r2, [pc, #352]	; (8006d18 <HAL_DMA_Abort+0x47c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d004      	beq.n	8006bc6 <HAL_DMA_Abort+0x32a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a56      	ldr	r2, [pc, #344]	; (8006d1c <HAL_DMA_Abort+0x480>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d108      	bne.n	8006bd8 <HAL_DMA_Abort+0x33c>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
 8006bd6:	e007      	b.n	8006be8 <HAL_DMA_Abort+0x34c>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0201 	bic.w	r2, r2, #1
 8006be6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006be8:	e013      	b.n	8006c12 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bea:	f7fc ff9f 	bl	8003b2c <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b05      	cmp	r3, #5
 8006bf6:	d90c      	bls.n	8006c12 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2203      	movs	r2, #3
 8006c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e12d      	b.n	8006e6e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1e5      	bne.n	8006bea <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2f      	ldr	r2, [pc, #188]	; (8006ce0 <HAL_DMA_Abort+0x444>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d04a      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a2d      	ldr	r2, [pc, #180]	; (8006ce4 <HAL_DMA_Abort+0x448>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d045      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <HAL_DMA_Abort+0x44c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d040      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a2a      	ldr	r2, [pc, #168]	; (8006cec <HAL_DMA_Abort+0x450>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d03b      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a29      	ldr	r2, [pc, #164]	; (8006cf0 <HAL_DMA_Abort+0x454>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d036      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a27      	ldr	r2, [pc, #156]	; (8006cf4 <HAL_DMA_Abort+0x458>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d031      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a26      	ldr	r2, [pc, #152]	; (8006cf8 <HAL_DMA_Abort+0x45c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d02c      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a24      	ldr	r2, [pc, #144]	; (8006cfc <HAL_DMA_Abort+0x460>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d027      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a23      	ldr	r2, [pc, #140]	; (8006d00 <HAL_DMA_Abort+0x464>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d022      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <HAL_DMA_Abort+0x468>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d01d      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a20      	ldr	r2, [pc, #128]	; (8006d08 <HAL_DMA_Abort+0x46c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d018      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a1e      	ldr	r2, [pc, #120]	; (8006d0c <HAL_DMA_Abort+0x470>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d013      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a1d      	ldr	r2, [pc, #116]	; (8006d10 <HAL_DMA_Abort+0x474>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d00e      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a1b      	ldr	r2, [pc, #108]	; (8006d14 <HAL_DMA_Abort+0x478>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d009      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1a      	ldr	r2, [pc, #104]	; (8006d18 <HAL_DMA_Abort+0x47c>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d004      	beq.n	8006cbe <HAL_DMA_Abort+0x422>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a18      	ldr	r2, [pc, #96]	; (8006d1c <HAL_DMA_Abort+0x480>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d101      	bne.n	8006cc2 <HAL_DMA_Abort+0x426>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e000      	b.n	8006cc4 <HAL_DMA_Abort+0x428>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d02b      	beq.n	8006d20 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ccc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd2:	f003 031f 	and.w	r3, r3, #31
 8006cd6:	223f      	movs	r2, #63	; 0x3f
 8006cd8:	409a      	lsls	r2, r3
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	609a      	str	r2, [r3, #8]
 8006cde:	e02a      	b.n	8006d36 <HAL_DMA_Abort+0x49a>
 8006ce0:	40020010 	.word	0x40020010
 8006ce4:	40020028 	.word	0x40020028
 8006ce8:	40020040 	.word	0x40020040
 8006cec:	40020058 	.word	0x40020058
 8006cf0:	40020070 	.word	0x40020070
 8006cf4:	40020088 	.word	0x40020088
 8006cf8:	400200a0 	.word	0x400200a0
 8006cfc:	400200b8 	.word	0x400200b8
 8006d00:	40020410 	.word	0x40020410
 8006d04:	40020428 	.word	0x40020428
 8006d08:	40020440 	.word	0x40020440
 8006d0c:	40020458 	.word	0x40020458
 8006d10:	40020470 	.word	0x40020470
 8006d14:	40020488 	.word	0x40020488
 8006d18:	400204a0 	.word	0x400204a0
 8006d1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d24:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d2a:	f003 031f 	and.w	r3, r3, #31
 8006d2e:	2201      	movs	r2, #1
 8006d30:	409a      	lsls	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a4f      	ldr	r2, [pc, #316]	; (8006e78 <HAL_DMA_Abort+0x5dc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d072      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a4d      	ldr	r2, [pc, #308]	; (8006e7c <HAL_DMA_Abort+0x5e0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d06d      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a4c      	ldr	r2, [pc, #304]	; (8006e80 <HAL_DMA_Abort+0x5e4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d068      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a4a      	ldr	r2, [pc, #296]	; (8006e84 <HAL_DMA_Abort+0x5e8>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d063      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a49      	ldr	r2, [pc, #292]	; (8006e88 <HAL_DMA_Abort+0x5ec>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d05e      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a47      	ldr	r2, [pc, #284]	; (8006e8c <HAL_DMA_Abort+0x5f0>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d059      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a46      	ldr	r2, [pc, #280]	; (8006e90 <HAL_DMA_Abort+0x5f4>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d054      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a44      	ldr	r2, [pc, #272]	; (8006e94 <HAL_DMA_Abort+0x5f8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d04f      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a43      	ldr	r2, [pc, #268]	; (8006e98 <HAL_DMA_Abort+0x5fc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d04a      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a41      	ldr	r2, [pc, #260]	; (8006e9c <HAL_DMA_Abort+0x600>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d045      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a40      	ldr	r2, [pc, #256]	; (8006ea0 <HAL_DMA_Abort+0x604>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d040      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a3e      	ldr	r2, [pc, #248]	; (8006ea4 <HAL_DMA_Abort+0x608>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d03b      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a3d      	ldr	r2, [pc, #244]	; (8006ea8 <HAL_DMA_Abort+0x60c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d036      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a3b      	ldr	r2, [pc, #236]	; (8006eac <HAL_DMA_Abort+0x610>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d031      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a3a      	ldr	r2, [pc, #232]	; (8006eb0 <HAL_DMA_Abort+0x614>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d02c      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a38      	ldr	r2, [pc, #224]	; (8006eb4 <HAL_DMA_Abort+0x618>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d027      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a37      	ldr	r2, [pc, #220]	; (8006eb8 <HAL_DMA_Abort+0x61c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d022      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a35      	ldr	r2, [pc, #212]	; (8006ebc <HAL_DMA_Abort+0x620>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01d      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a34      	ldr	r2, [pc, #208]	; (8006ec0 <HAL_DMA_Abort+0x624>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d018      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a32      	ldr	r2, [pc, #200]	; (8006ec4 <HAL_DMA_Abort+0x628>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a31      	ldr	r2, [pc, #196]	; (8006ec8 <HAL_DMA_Abort+0x62c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00e      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a2f      	ldr	r2, [pc, #188]	; (8006ecc <HAL_DMA_Abort+0x630>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d009      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a2e      	ldr	r2, [pc, #184]	; (8006ed0 <HAL_DMA_Abort+0x634>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d004      	beq.n	8006e26 <HAL_DMA_Abort+0x58a>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <HAL_DMA_Abort+0x638>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d101      	bne.n	8006e2a <HAL_DMA_Abort+0x58e>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e000      	b.n	8006e2c <HAL_DMA_Abort+0x590>
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d015      	beq.n	8006e5c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e38:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00c      	beq.n	8006e5c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e50:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e5a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	40020010 	.word	0x40020010
 8006e7c:	40020028 	.word	0x40020028
 8006e80:	40020040 	.word	0x40020040
 8006e84:	40020058 	.word	0x40020058
 8006e88:	40020070 	.word	0x40020070
 8006e8c:	40020088 	.word	0x40020088
 8006e90:	400200a0 	.word	0x400200a0
 8006e94:	400200b8 	.word	0x400200b8
 8006e98:	40020410 	.word	0x40020410
 8006e9c:	40020428 	.word	0x40020428
 8006ea0:	40020440 	.word	0x40020440
 8006ea4:	40020458 	.word	0x40020458
 8006ea8:	40020470 	.word	0x40020470
 8006eac:	40020488 	.word	0x40020488
 8006eb0:	400204a0 	.word	0x400204a0
 8006eb4:	400204b8 	.word	0x400204b8
 8006eb8:	58025408 	.word	0x58025408
 8006ebc:	5802541c 	.word	0x5802541c
 8006ec0:	58025430 	.word	0x58025430
 8006ec4:	58025444 	.word	0x58025444
 8006ec8:	58025458 	.word	0x58025458
 8006ecc:	5802546c 	.word	0x5802546c
 8006ed0:	58025480 	.word	0x58025480
 8006ed4:	58025494 	.word	0x58025494

08006ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e205      	b.n	80072f6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d004      	beq.n	8006f00 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2280      	movs	r2, #128	; 0x80
 8006efa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e1fa      	b.n	80072f6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a8c      	ldr	r2, [pc, #560]	; (8007138 <HAL_DMA_Abort_IT+0x260>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d04a      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a8b      	ldr	r2, [pc, #556]	; (800713c <HAL_DMA_Abort_IT+0x264>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d045      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a89      	ldr	r2, [pc, #548]	; (8007140 <HAL_DMA_Abort_IT+0x268>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d040      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a88      	ldr	r2, [pc, #544]	; (8007144 <HAL_DMA_Abort_IT+0x26c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d03b      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a86      	ldr	r2, [pc, #536]	; (8007148 <HAL_DMA_Abort_IT+0x270>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d036      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a85      	ldr	r2, [pc, #532]	; (800714c <HAL_DMA_Abort_IT+0x274>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d031      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a83      	ldr	r2, [pc, #524]	; (8007150 <HAL_DMA_Abort_IT+0x278>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d02c      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a82      	ldr	r2, [pc, #520]	; (8007154 <HAL_DMA_Abort_IT+0x27c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d027      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a80      	ldr	r2, [pc, #512]	; (8007158 <HAL_DMA_Abort_IT+0x280>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d022      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a7f      	ldr	r2, [pc, #508]	; (800715c <HAL_DMA_Abort_IT+0x284>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d01d      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a7d      	ldr	r2, [pc, #500]	; (8007160 <HAL_DMA_Abort_IT+0x288>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d018      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a7c      	ldr	r2, [pc, #496]	; (8007164 <HAL_DMA_Abort_IT+0x28c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d013      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a7a      	ldr	r2, [pc, #488]	; (8007168 <HAL_DMA_Abort_IT+0x290>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00e      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a79      	ldr	r2, [pc, #484]	; (800716c <HAL_DMA_Abort_IT+0x294>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d009      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a77      	ldr	r2, [pc, #476]	; (8007170 <HAL_DMA_Abort_IT+0x298>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d004      	beq.n	8006fa0 <HAL_DMA_Abort_IT+0xc8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a76      	ldr	r2, [pc, #472]	; (8007174 <HAL_DMA_Abort_IT+0x29c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d101      	bne.n	8006fa4 <HAL_DMA_Abort_IT+0xcc>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e000      	b.n	8006fa6 <HAL_DMA_Abort_IT+0xce>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d065      	beq.n	8007076 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2204      	movs	r2, #4
 8006fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a60      	ldr	r2, [pc, #384]	; (8007138 <HAL_DMA_Abort_IT+0x260>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d04a      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a5e      	ldr	r2, [pc, #376]	; (800713c <HAL_DMA_Abort_IT+0x264>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d045      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a5d      	ldr	r2, [pc, #372]	; (8007140 <HAL_DMA_Abort_IT+0x268>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d040      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a5b      	ldr	r2, [pc, #364]	; (8007144 <HAL_DMA_Abort_IT+0x26c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d03b      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a5a      	ldr	r2, [pc, #360]	; (8007148 <HAL_DMA_Abort_IT+0x270>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d036      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a58      	ldr	r2, [pc, #352]	; (800714c <HAL_DMA_Abort_IT+0x274>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d031      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a57      	ldr	r2, [pc, #348]	; (8007150 <HAL_DMA_Abort_IT+0x278>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d02c      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a55      	ldr	r2, [pc, #340]	; (8007154 <HAL_DMA_Abort_IT+0x27c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d027      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a54      	ldr	r2, [pc, #336]	; (8007158 <HAL_DMA_Abort_IT+0x280>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d022      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a52      	ldr	r2, [pc, #328]	; (800715c <HAL_DMA_Abort_IT+0x284>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d01d      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a51      	ldr	r2, [pc, #324]	; (8007160 <HAL_DMA_Abort_IT+0x288>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d018      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a4f      	ldr	r2, [pc, #316]	; (8007164 <HAL_DMA_Abort_IT+0x28c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d013      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a4e      	ldr	r2, [pc, #312]	; (8007168 <HAL_DMA_Abort_IT+0x290>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d00e      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a4c      	ldr	r2, [pc, #304]	; (800716c <HAL_DMA_Abort_IT+0x294>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d009      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a4b      	ldr	r2, [pc, #300]	; (8007170 <HAL_DMA_Abort_IT+0x298>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d004      	beq.n	8007052 <HAL_DMA_Abort_IT+0x17a>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a49      	ldr	r2, [pc, #292]	; (8007174 <HAL_DMA_Abort_IT+0x29c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d108      	bne.n	8007064 <HAL_DMA_Abort_IT+0x18c>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0201 	bic.w	r2, r2, #1
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	e147      	b.n	80072f4 <HAL_DMA_Abort_IT+0x41c>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f022 0201 	bic.w	r2, r2, #1
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	e13e      	b.n	80072f4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 020e 	bic.w	r2, r2, #14
 8007084:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a2b      	ldr	r2, [pc, #172]	; (8007138 <HAL_DMA_Abort_IT+0x260>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d04a      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a29      	ldr	r2, [pc, #164]	; (800713c <HAL_DMA_Abort_IT+0x264>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d045      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a28      	ldr	r2, [pc, #160]	; (8007140 <HAL_DMA_Abort_IT+0x268>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d040      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a26      	ldr	r2, [pc, #152]	; (8007144 <HAL_DMA_Abort_IT+0x26c>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d03b      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a25      	ldr	r2, [pc, #148]	; (8007148 <HAL_DMA_Abort_IT+0x270>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d036      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a23      	ldr	r2, [pc, #140]	; (800714c <HAL_DMA_Abort_IT+0x274>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d031      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a22      	ldr	r2, [pc, #136]	; (8007150 <HAL_DMA_Abort_IT+0x278>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d02c      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a20      	ldr	r2, [pc, #128]	; (8007154 <HAL_DMA_Abort_IT+0x27c>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d027      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <HAL_DMA_Abort_IT+0x280>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d022      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a1d      	ldr	r2, [pc, #116]	; (800715c <HAL_DMA_Abort_IT+0x284>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01d      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a1c      	ldr	r2, [pc, #112]	; (8007160 <HAL_DMA_Abort_IT+0x288>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d018      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a1a      	ldr	r2, [pc, #104]	; (8007164 <HAL_DMA_Abort_IT+0x28c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d013      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a19      	ldr	r2, [pc, #100]	; (8007168 <HAL_DMA_Abort_IT+0x290>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00e      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a17      	ldr	r2, [pc, #92]	; (800716c <HAL_DMA_Abort_IT+0x294>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d009      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a16      	ldr	r2, [pc, #88]	; (8007170 <HAL_DMA_Abort_IT+0x298>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d004      	beq.n	8007126 <HAL_DMA_Abort_IT+0x24e>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a14      	ldr	r2, [pc, #80]	; (8007174 <HAL_DMA_Abort_IT+0x29c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d128      	bne.n	8007178 <HAL_DMA_Abort_IT+0x2a0>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 0201 	bic.w	r2, r2, #1
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	e027      	b.n	8007188 <HAL_DMA_Abort_IT+0x2b0>
 8007138:	40020010 	.word	0x40020010
 800713c:	40020028 	.word	0x40020028
 8007140:	40020040 	.word	0x40020040
 8007144:	40020058 	.word	0x40020058
 8007148:	40020070 	.word	0x40020070
 800714c:	40020088 	.word	0x40020088
 8007150:	400200a0 	.word	0x400200a0
 8007154:	400200b8 	.word	0x400200b8
 8007158:	40020410 	.word	0x40020410
 800715c:	40020428 	.word	0x40020428
 8007160:	40020440 	.word	0x40020440
 8007164:	40020458 	.word	0x40020458
 8007168:	40020470 	.word	0x40020470
 800716c:	40020488 	.word	0x40020488
 8007170:	400204a0 	.word	0x400204a0
 8007174:	400204b8 	.word	0x400204b8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0201 	bic.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a5c      	ldr	r2, [pc, #368]	; (8007300 <HAL_DMA_Abort_IT+0x428>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d072      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a5b      	ldr	r2, [pc, #364]	; (8007304 <HAL_DMA_Abort_IT+0x42c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d06d      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a59      	ldr	r2, [pc, #356]	; (8007308 <HAL_DMA_Abort_IT+0x430>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d068      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a58      	ldr	r2, [pc, #352]	; (800730c <HAL_DMA_Abort_IT+0x434>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d063      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a56      	ldr	r2, [pc, #344]	; (8007310 <HAL_DMA_Abort_IT+0x438>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d05e      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a55      	ldr	r2, [pc, #340]	; (8007314 <HAL_DMA_Abort_IT+0x43c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d059      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a53      	ldr	r2, [pc, #332]	; (8007318 <HAL_DMA_Abort_IT+0x440>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d054      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a52      	ldr	r2, [pc, #328]	; (800731c <HAL_DMA_Abort_IT+0x444>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d04f      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a50      	ldr	r2, [pc, #320]	; (8007320 <HAL_DMA_Abort_IT+0x448>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d04a      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a4f      	ldr	r2, [pc, #316]	; (8007324 <HAL_DMA_Abort_IT+0x44c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d045      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a4d      	ldr	r2, [pc, #308]	; (8007328 <HAL_DMA_Abort_IT+0x450>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d040      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a4c      	ldr	r2, [pc, #304]	; (800732c <HAL_DMA_Abort_IT+0x454>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d03b      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a4a      	ldr	r2, [pc, #296]	; (8007330 <HAL_DMA_Abort_IT+0x458>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d036      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a49      	ldr	r2, [pc, #292]	; (8007334 <HAL_DMA_Abort_IT+0x45c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d031      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a47      	ldr	r2, [pc, #284]	; (8007338 <HAL_DMA_Abort_IT+0x460>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d02c      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a46      	ldr	r2, [pc, #280]	; (800733c <HAL_DMA_Abort_IT+0x464>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d027      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a44      	ldr	r2, [pc, #272]	; (8007340 <HAL_DMA_Abort_IT+0x468>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d022      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a43      	ldr	r2, [pc, #268]	; (8007344 <HAL_DMA_Abort_IT+0x46c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d01d      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a41      	ldr	r2, [pc, #260]	; (8007348 <HAL_DMA_Abort_IT+0x470>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d018      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a40      	ldr	r2, [pc, #256]	; (800734c <HAL_DMA_Abort_IT+0x474>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d013      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a3e      	ldr	r2, [pc, #248]	; (8007350 <HAL_DMA_Abort_IT+0x478>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00e      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a3d      	ldr	r2, [pc, #244]	; (8007354 <HAL_DMA_Abort_IT+0x47c>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d009      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a3b      	ldr	r2, [pc, #236]	; (8007358 <HAL_DMA_Abort_IT+0x480>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d004      	beq.n	8007278 <HAL_DMA_Abort_IT+0x3a0>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a3a      	ldr	r2, [pc, #232]	; (800735c <HAL_DMA_Abort_IT+0x484>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d101      	bne.n	800727c <HAL_DMA_Abort_IT+0x3a4>
 8007278:	2301      	movs	r3, #1
 800727a:	e000      	b.n	800727e <HAL_DMA_Abort_IT+0x3a6>
 800727c:	2300      	movs	r3, #0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d028      	beq.n	80072d4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007290:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007296:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	2201      	movs	r2, #1
 80072a2:	409a      	lsls	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00c      	beq.n	80072d4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	40020010 	.word	0x40020010
 8007304:	40020028 	.word	0x40020028
 8007308:	40020040 	.word	0x40020040
 800730c:	40020058 	.word	0x40020058
 8007310:	40020070 	.word	0x40020070
 8007314:	40020088 	.word	0x40020088
 8007318:	400200a0 	.word	0x400200a0
 800731c:	400200b8 	.word	0x400200b8
 8007320:	40020410 	.word	0x40020410
 8007324:	40020428 	.word	0x40020428
 8007328:	40020440 	.word	0x40020440
 800732c:	40020458 	.word	0x40020458
 8007330:	40020470 	.word	0x40020470
 8007334:	40020488 	.word	0x40020488
 8007338:	400204a0 	.word	0x400204a0
 800733c:	400204b8 	.word	0x400204b8
 8007340:	58025408 	.word	0x58025408
 8007344:	5802541c 	.word	0x5802541c
 8007348:	58025430 	.word	0x58025430
 800734c:	58025444 	.word	0x58025444
 8007350:	58025458 	.word	0x58025458
 8007354:	5802546c 	.word	0x5802546c
 8007358:	58025480 	.word	0x58025480
 800735c:	58025494 	.word	0x58025494

08007360 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b08a      	sub	sp, #40	; 0x28
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800736c:	4b67      	ldr	r3, [pc, #412]	; (800750c <HAL_DMA_IRQHandler+0x1ac>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a67      	ldr	r2, [pc, #412]	; (8007510 <HAL_DMA_IRQHandler+0x1b0>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	0a9b      	lsrs	r3, r3, #10
 8007378:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800737e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007384:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a5f      	ldr	r2, [pc, #380]	; (8007514 <HAL_DMA_IRQHandler+0x1b4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d04a      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a5d      	ldr	r2, [pc, #372]	; (8007518 <HAL_DMA_IRQHandler+0x1b8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d045      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a5c      	ldr	r2, [pc, #368]	; (800751c <HAL_DMA_IRQHandler+0x1bc>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d040      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a5a      	ldr	r2, [pc, #360]	; (8007520 <HAL_DMA_IRQHandler+0x1c0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d03b      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a59      	ldr	r2, [pc, #356]	; (8007524 <HAL_DMA_IRQHandler+0x1c4>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d036      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a57      	ldr	r2, [pc, #348]	; (8007528 <HAL_DMA_IRQHandler+0x1c8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d031      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a56      	ldr	r2, [pc, #344]	; (800752c <HAL_DMA_IRQHandler+0x1cc>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d02c      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a54      	ldr	r2, [pc, #336]	; (8007530 <HAL_DMA_IRQHandler+0x1d0>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d027      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a53      	ldr	r2, [pc, #332]	; (8007534 <HAL_DMA_IRQHandler+0x1d4>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d022      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a51      	ldr	r2, [pc, #324]	; (8007538 <HAL_DMA_IRQHandler+0x1d8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01d      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a50      	ldr	r2, [pc, #320]	; (800753c <HAL_DMA_IRQHandler+0x1dc>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d018      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a4e      	ldr	r2, [pc, #312]	; (8007540 <HAL_DMA_IRQHandler+0x1e0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d013      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a4d      	ldr	r2, [pc, #308]	; (8007544 <HAL_DMA_IRQHandler+0x1e4>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00e      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a4b      	ldr	r2, [pc, #300]	; (8007548 <HAL_DMA_IRQHandler+0x1e8>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a4a      	ldr	r2, [pc, #296]	; (800754c <HAL_DMA_IRQHandler+0x1ec>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_DMA_IRQHandler+0xd2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a48      	ldr	r2, [pc, #288]	; (8007550 <HAL_DMA_IRQHandler+0x1f0>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d101      	bne.n	8007436 <HAL_DMA_IRQHandler+0xd6>
 8007432:	2301      	movs	r3, #1
 8007434:	e000      	b.n	8007438 <HAL_DMA_IRQHandler+0xd8>
 8007436:	2300      	movs	r3, #0
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 842b 	beq.w	8007c94 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007442:	f003 031f 	and.w	r3, r3, #31
 8007446:	2208      	movs	r2, #8
 8007448:	409a      	lsls	r2, r3
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	4013      	ands	r3, r2
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80a2 	beq.w	8007598 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a2e      	ldr	r2, [pc, #184]	; (8007514 <HAL_DMA_IRQHandler+0x1b4>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d04a      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a2d      	ldr	r2, [pc, #180]	; (8007518 <HAL_DMA_IRQHandler+0x1b8>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d045      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a2b      	ldr	r2, [pc, #172]	; (800751c <HAL_DMA_IRQHandler+0x1bc>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d040      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a2a      	ldr	r2, [pc, #168]	; (8007520 <HAL_DMA_IRQHandler+0x1c0>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d03b      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a28      	ldr	r2, [pc, #160]	; (8007524 <HAL_DMA_IRQHandler+0x1c4>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d036      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a27      	ldr	r2, [pc, #156]	; (8007528 <HAL_DMA_IRQHandler+0x1c8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d031      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a25      	ldr	r2, [pc, #148]	; (800752c <HAL_DMA_IRQHandler+0x1cc>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d02c      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a24      	ldr	r2, [pc, #144]	; (8007530 <HAL_DMA_IRQHandler+0x1d0>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d027      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a22      	ldr	r2, [pc, #136]	; (8007534 <HAL_DMA_IRQHandler+0x1d4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d022      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a21      	ldr	r2, [pc, #132]	; (8007538 <HAL_DMA_IRQHandler+0x1d8>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d01d      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a1f      	ldr	r2, [pc, #124]	; (800753c <HAL_DMA_IRQHandler+0x1dc>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d018      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a1e      	ldr	r2, [pc, #120]	; (8007540 <HAL_DMA_IRQHandler+0x1e0>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d013      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a1c      	ldr	r2, [pc, #112]	; (8007544 <HAL_DMA_IRQHandler+0x1e4>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d00e      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <HAL_DMA_IRQHandler+0x1e8>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d009      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a19      	ldr	r2, [pc, #100]	; (800754c <HAL_DMA_IRQHandler+0x1ec>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d004      	beq.n	80074f4 <HAL_DMA_IRQHandler+0x194>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a18      	ldr	r2, [pc, #96]	; (8007550 <HAL_DMA_IRQHandler+0x1f0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d12f      	bne.n	8007554 <HAL_DMA_IRQHandler+0x1f4>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bf14      	ite	ne
 8007502:	2301      	movne	r3, #1
 8007504:	2300      	moveq	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	e02e      	b.n	8007568 <HAL_DMA_IRQHandler+0x208>
 800750a:	bf00      	nop
 800750c:	20000000 	.word	0x20000000
 8007510:	1b4e81b5 	.word	0x1b4e81b5
 8007514:	40020010 	.word	0x40020010
 8007518:	40020028 	.word	0x40020028
 800751c:	40020040 	.word	0x40020040
 8007520:	40020058 	.word	0x40020058
 8007524:	40020070 	.word	0x40020070
 8007528:	40020088 	.word	0x40020088
 800752c:	400200a0 	.word	0x400200a0
 8007530:	400200b8 	.word	0x400200b8
 8007534:	40020410 	.word	0x40020410
 8007538:	40020428 	.word	0x40020428
 800753c:	40020440 	.word	0x40020440
 8007540:	40020458 	.word	0x40020458
 8007544:	40020470 	.word	0x40020470
 8007548:	40020488 	.word	0x40020488
 800754c:	400204a0 	.word	0x400204a0
 8007550:	400204b8 	.word	0x400204b8
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0308 	and.w	r3, r3, #8
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf14      	ite	ne
 8007562:	2301      	movne	r3, #1
 8007564:	2300      	moveq	r3, #0
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d015      	beq.n	8007598 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0204 	bic.w	r2, r2, #4
 800757a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007580:	f003 031f 	and.w	r3, r3, #31
 8007584:	2208      	movs	r2, #8
 8007586:	409a      	lsls	r2, r3
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	f043 0201 	orr.w	r2, r3, #1
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	69ba      	ldr	r2, [r7, #24]
 80075a2:	fa22 f303 	lsr.w	r3, r2, r3
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d06e      	beq.n	800768c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a69      	ldr	r2, [pc, #420]	; (8007758 <HAL_DMA_IRQHandler+0x3f8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d04a      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a67      	ldr	r2, [pc, #412]	; (800775c <HAL_DMA_IRQHandler+0x3fc>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d045      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a66      	ldr	r2, [pc, #408]	; (8007760 <HAL_DMA_IRQHandler+0x400>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d040      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a64      	ldr	r2, [pc, #400]	; (8007764 <HAL_DMA_IRQHandler+0x404>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d03b      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a63      	ldr	r2, [pc, #396]	; (8007768 <HAL_DMA_IRQHandler+0x408>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d036      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a61      	ldr	r2, [pc, #388]	; (800776c <HAL_DMA_IRQHandler+0x40c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d031      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a60      	ldr	r2, [pc, #384]	; (8007770 <HAL_DMA_IRQHandler+0x410>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d02c      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a5e      	ldr	r2, [pc, #376]	; (8007774 <HAL_DMA_IRQHandler+0x414>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d027      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a5d      	ldr	r2, [pc, #372]	; (8007778 <HAL_DMA_IRQHandler+0x418>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d022      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a5b      	ldr	r2, [pc, #364]	; (800777c <HAL_DMA_IRQHandler+0x41c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01d      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a5a      	ldr	r2, [pc, #360]	; (8007780 <HAL_DMA_IRQHandler+0x420>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d018      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a58      	ldr	r2, [pc, #352]	; (8007784 <HAL_DMA_IRQHandler+0x424>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d013      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a57      	ldr	r2, [pc, #348]	; (8007788 <HAL_DMA_IRQHandler+0x428>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00e      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a55      	ldr	r2, [pc, #340]	; (800778c <HAL_DMA_IRQHandler+0x42c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d009      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a54      	ldr	r2, [pc, #336]	; (8007790 <HAL_DMA_IRQHandler+0x430>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d004      	beq.n	800764e <HAL_DMA_IRQHandler+0x2ee>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a52      	ldr	r2, [pc, #328]	; (8007794 <HAL_DMA_IRQHandler+0x434>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d10a      	bne.n	8007664 <HAL_DMA_IRQHandler+0x304>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695b      	ldr	r3, [r3, #20]
 8007654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007658:	2b00      	cmp	r3, #0
 800765a:	bf14      	ite	ne
 800765c:	2301      	movne	r3, #1
 800765e:	2300      	moveq	r3, #0
 8007660:	b2db      	uxtb	r3, r3
 8007662:	e003      	b.n	800766c <HAL_DMA_IRQHandler+0x30c>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2300      	movs	r3, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d00d      	beq.n	800768c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	2201      	movs	r2, #1
 800767a:	409a      	lsls	r2, r3
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007684:	f043 0202 	orr.w	r2, r3, #2
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007690:	f003 031f 	and.w	r3, r3, #31
 8007694:	2204      	movs	r2, #4
 8007696:	409a      	lsls	r2, r3
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	4013      	ands	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 808f 	beq.w	80077c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a2c      	ldr	r2, [pc, #176]	; (8007758 <HAL_DMA_IRQHandler+0x3f8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d04a      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a2a      	ldr	r2, [pc, #168]	; (800775c <HAL_DMA_IRQHandler+0x3fc>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d045      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a29      	ldr	r2, [pc, #164]	; (8007760 <HAL_DMA_IRQHandler+0x400>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d040      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a27      	ldr	r2, [pc, #156]	; (8007764 <HAL_DMA_IRQHandler+0x404>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d03b      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a26      	ldr	r2, [pc, #152]	; (8007768 <HAL_DMA_IRQHandler+0x408>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d036      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a24      	ldr	r2, [pc, #144]	; (800776c <HAL_DMA_IRQHandler+0x40c>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d031      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a23      	ldr	r2, [pc, #140]	; (8007770 <HAL_DMA_IRQHandler+0x410>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d02c      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a21      	ldr	r2, [pc, #132]	; (8007774 <HAL_DMA_IRQHandler+0x414>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d027      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a20      	ldr	r2, [pc, #128]	; (8007778 <HAL_DMA_IRQHandler+0x418>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d022      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a1e      	ldr	r2, [pc, #120]	; (800777c <HAL_DMA_IRQHandler+0x41c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d01d      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1d      	ldr	r2, [pc, #116]	; (8007780 <HAL_DMA_IRQHandler+0x420>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d018      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1b      	ldr	r2, [pc, #108]	; (8007784 <HAL_DMA_IRQHandler+0x424>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1a      	ldr	r2, [pc, #104]	; (8007788 <HAL_DMA_IRQHandler+0x428>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00e      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a18      	ldr	r2, [pc, #96]	; (800778c <HAL_DMA_IRQHandler+0x42c>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d009      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <HAL_DMA_IRQHandler+0x430>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d004      	beq.n	8007742 <HAL_DMA_IRQHandler+0x3e2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a15      	ldr	r2, [pc, #84]	; (8007794 <HAL_DMA_IRQHandler+0x434>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d12a      	bne.n	8007798 <HAL_DMA_IRQHandler+0x438>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	bf14      	ite	ne
 8007750:	2301      	movne	r3, #1
 8007752:	2300      	moveq	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	e023      	b.n	80077a0 <HAL_DMA_IRQHandler+0x440>
 8007758:	40020010 	.word	0x40020010
 800775c:	40020028 	.word	0x40020028
 8007760:	40020040 	.word	0x40020040
 8007764:	40020058 	.word	0x40020058
 8007768:	40020070 	.word	0x40020070
 800776c:	40020088 	.word	0x40020088
 8007770:	400200a0 	.word	0x400200a0
 8007774:	400200b8 	.word	0x400200b8
 8007778:	40020410 	.word	0x40020410
 800777c:	40020428 	.word	0x40020428
 8007780:	40020440 	.word	0x40020440
 8007784:	40020458 	.word	0x40020458
 8007788:	40020470 	.word	0x40020470
 800778c:	40020488 	.word	0x40020488
 8007790:	400204a0 	.word	0x400204a0
 8007794:	400204b8 	.word	0x400204b8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00d      	beq.n	80077c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077a8:	f003 031f 	and.w	r3, r3, #31
 80077ac:	2204      	movs	r2, #4
 80077ae:	409a      	lsls	r2, r3
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b8:	f043 0204 	orr.w	r2, r3, #4
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c4:	f003 031f 	and.w	r3, r3, #31
 80077c8:	2210      	movs	r2, #16
 80077ca:	409a      	lsls	r2, r3
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	4013      	ands	r3, r2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80a6 	beq.w	8007922 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a85      	ldr	r2, [pc, #532]	; (80079f0 <HAL_DMA_IRQHandler+0x690>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d04a      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a83      	ldr	r2, [pc, #524]	; (80079f4 <HAL_DMA_IRQHandler+0x694>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d045      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a82      	ldr	r2, [pc, #520]	; (80079f8 <HAL_DMA_IRQHandler+0x698>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d040      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a80      	ldr	r2, [pc, #512]	; (80079fc <HAL_DMA_IRQHandler+0x69c>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d03b      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a7f      	ldr	r2, [pc, #508]	; (8007a00 <HAL_DMA_IRQHandler+0x6a0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d036      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a7d      	ldr	r2, [pc, #500]	; (8007a04 <HAL_DMA_IRQHandler+0x6a4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d031      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a7c      	ldr	r2, [pc, #496]	; (8007a08 <HAL_DMA_IRQHandler+0x6a8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d02c      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a7a      	ldr	r2, [pc, #488]	; (8007a0c <HAL_DMA_IRQHandler+0x6ac>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d027      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a79      	ldr	r2, [pc, #484]	; (8007a10 <HAL_DMA_IRQHandler+0x6b0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d022      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a77      	ldr	r2, [pc, #476]	; (8007a14 <HAL_DMA_IRQHandler+0x6b4>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d01d      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a76      	ldr	r2, [pc, #472]	; (8007a18 <HAL_DMA_IRQHandler+0x6b8>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d018      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a74      	ldr	r2, [pc, #464]	; (8007a1c <HAL_DMA_IRQHandler+0x6bc>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a73      	ldr	r2, [pc, #460]	; (8007a20 <HAL_DMA_IRQHandler+0x6c0>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a71      	ldr	r2, [pc, #452]	; (8007a24 <HAL_DMA_IRQHandler+0x6c4>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a70      	ldr	r2, [pc, #448]	; (8007a28 <HAL_DMA_IRQHandler+0x6c8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_DMA_IRQHandler+0x516>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a6e      	ldr	r2, [pc, #440]	; (8007a2c <HAL_DMA_IRQHandler+0x6cc>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d10a      	bne.n	800788c <HAL_DMA_IRQHandler+0x52c>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0308 	and.w	r3, r3, #8
 8007880:	2b00      	cmp	r3, #0
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e009      	b.n	80078a0 <HAL_DMA_IRQHandler+0x540>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	bf14      	ite	ne
 800789a:	2301      	movne	r3, #1
 800789c:	2300      	moveq	r3, #0
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d03e      	beq.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2210      	movs	r2, #16
 80078ae:	409a      	lsls	r2, r3
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d018      	beq.n	80078f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d108      	bne.n	80078e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d024      	beq.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	4798      	blx	r3
 80078e0:	e01f      	b.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d01b      	beq.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	4798      	blx	r3
 80078f2:	e016      	b.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d107      	bne.n	8007912 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	681a      	ldr	r2, [r3, #0]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f022 0208 	bic.w	r2, r2, #8
 8007910:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007926:	f003 031f 	and.w	r3, r3, #31
 800792a:	2220      	movs	r2, #32
 800792c:	409a      	lsls	r2, r3
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	4013      	ands	r3, r2
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 8110 	beq.w	8007b58 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a2c      	ldr	r2, [pc, #176]	; (80079f0 <HAL_DMA_IRQHandler+0x690>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d04a      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a2b      	ldr	r2, [pc, #172]	; (80079f4 <HAL_DMA_IRQHandler+0x694>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d045      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a29      	ldr	r2, [pc, #164]	; (80079f8 <HAL_DMA_IRQHandler+0x698>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d040      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a28      	ldr	r2, [pc, #160]	; (80079fc <HAL_DMA_IRQHandler+0x69c>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d03b      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a26      	ldr	r2, [pc, #152]	; (8007a00 <HAL_DMA_IRQHandler+0x6a0>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d036      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a25      	ldr	r2, [pc, #148]	; (8007a04 <HAL_DMA_IRQHandler+0x6a4>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d031      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a23      	ldr	r2, [pc, #140]	; (8007a08 <HAL_DMA_IRQHandler+0x6a8>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d02c      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a22      	ldr	r2, [pc, #136]	; (8007a0c <HAL_DMA_IRQHandler+0x6ac>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d027      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a20      	ldr	r2, [pc, #128]	; (8007a10 <HAL_DMA_IRQHandler+0x6b0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d022      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a1f      	ldr	r2, [pc, #124]	; (8007a14 <HAL_DMA_IRQHandler+0x6b4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d01d      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a1d      	ldr	r2, [pc, #116]	; (8007a18 <HAL_DMA_IRQHandler+0x6b8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d018      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <HAL_DMA_IRQHandler+0x6bc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d013      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a1a      	ldr	r2, [pc, #104]	; (8007a20 <HAL_DMA_IRQHandler+0x6c0>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00e      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a19      	ldr	r2, [pc, #100]	; (8007a24 <HAL_DMA_IRQHandler+0x6c4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d009      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <HAL_DMA_IRQHandler+0x6c8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d004      	beq.n	80079d8 <HAL_DMA_IRQHandler+0x678>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a16      	ldr	r2, [pc, #88]	; (8007a2c <HAL_DMA_IRQHandler+0x6cc>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d12b      	bne.n	8007a30 <HAL_DMA_IRQHandler+0x6d0>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	bf14      	ite	ne
 80079e6:	2301      	movne	r3, #1
 80079e8:	2300      	moveq	r3, #0
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	e02a      	b.n	8007a44 <HAL_DMA_IRQHandler+0x6e4>
 80079ee:	bf00      	nop
 80079f0:	40020010 	.word	0x40020010
 80079f4:	40020028 	.word	0x40020028
 80079f8:	40020040 	.word	0x40020040
 80079fc:	40020058 	.word	0x40020058
 8007a00:	40020070 	.word	0x40020070
 8007a04:	40020088 	.word	0x40020088
 8007a08:	400200a0 	.word	0x400200a0
 8007a0c:	400200b8 	.word	0x400200b8
 8007a10:	40020410 	.word	0x40020410
 8007a14:	40020428 	.word	0x40020428
 8007a18:	40020440 	.word	0x40020440
 8007a1c:	40020458 	.word	0x40020458
 8007a20:	40020470 	.word	0x40020470
 8007a24:	40020488 	.word	0x40020488
 8007a28:	400204a0 	.word	0x400204a0
 8007a2c:	400204b8 	.word	0x400204b8
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0302 	and.w	r3, r3, #2
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bf14      	ite	ne
 8007a3e:	2301      	movne	r3, #1
 8007a40:	2300      	moveq	r3, #0
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 8087 	beq.w	8007b58 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a4e:	f003 031f 	and.w	r3, r3, #31
 8007a52:	2220      	movs	r2, #32
 8007a54:	409a      	lsls	r2, r3
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d139      	bne.n	8007ada <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0216 	bic.w	r2, r2, #22
 8007a74:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a84:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d103      	bne.n	8007a96 <HAL_DMA_IRQHandler+0x736>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f022 0208 	bic.w	r2, r2, #8
 8007aa4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aaa:	f003 031f 	and.w	r3, r3, #31
 8007aae:	223f      	movs	r2, #63	; 0x3f
 8007ab0:	409a      	lsls	r2, r3
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f000 834a 	beq.w	8008164 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	4798      	blx	r3
          }
          return;
 8007ad8:	e344      	b.n	8008164 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d018      	beq.n	8007b1a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d108      	bne.n	8007b08 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d02c      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	4798      	blx	r3
 8007b06:	e027      	b.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d023      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	4798      	blx	r3
 8007b18:	e01e      	b.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d10f      	bne.n	8007b48 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0210 	bic.w	r2, r2, #16
 8007b36:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d003      	beq.n	8007b58 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 8306 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 8088 	beq.w	8007c80 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2204      	movs	r2, #4
 8007b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7a      	ldr	r2, [pc, #488]	; (8007d68 <HAL_DMA_IRQHandler+0xa08>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d04a      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a79      	ldr	r2, [pc, #484]	; (8007d6c <HAL_DMA_IRQHandler+0xa0c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d045      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a77      	ldr	r2, [pc, #476]	; (8007d70 <HAL_DMA_IRQHandler+0xa10>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d040      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a76      	ldr	r2, [pc, #472]	; (8007d74 <HAL_DMA_IRQHandler+0xa14>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d03b      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a74      	ldr	r2, [pc, #464]	; (8007d78 <HAL_DMA_IRQHandler+0xa18>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d036      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a73      	ldr	r2, [pc, #460]	; (8007d7c <HAL_DMA_IRQHandler+0xa1c>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d031      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a71      	ldr	r2, [pc, #452]	; (8007d80 <HAL_DMA_IRQHandler+0xa20>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d02c      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a70      	ldr	r2, [pc, #448]	; (8007d84 <HAL_DMA_IRQHandler+0xa24>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d027      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a6e      	ldr	r2, [pc, #440]	; (8007d88 <HAL_DMA_IRQHandler+0xa28>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d022      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a6d      	ldr	r2, [pc, #436]	; (8007d8c <HAL_DMA_IRQHandler+0xa2c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d01d      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a6b      	ldr	r2, [pc, #428]	; (8007d90 <HAL_DMA_IRQHandler+0xa30>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d018      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a6a      	ldr	r2, [pc, #424]	; (8007d94 <HAL_DMA_IRQHandler+0xa34>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d013      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a68      	ldr	r2, [pc, #416]	; (8007d98 <HAL_DMA_IRQHandler+0xa38>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d00e      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a67      	ldr	r2, [pc, #412]	; (8007d9c <HAL_DMA_IRQHandler+0xa3c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d009      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a65      	ldr	r2, [pc, #404]	; (8007da0 <HAL_DMA_IRQHandler+0xa40>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d004      	beq.n	8007c18 <HAL_DMA_IRQHandler+0x8b8>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a64      	ldr	r2, [pc, #400]	; (8007da4 <HAL_DMA_IRQHandler+0xa44>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d108      	bne.n	8007c2a <HAL_DMA_IRQHandler+0x8ca>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0201 	bic.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	e007      	b.n	8007c3a <HAL_DMA_IRQHandler+0x8da>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 0201 	bic.w	r2, r2, #1
 8007c38:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
 8007c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d307      	bcc.n	8007c56 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0301 	and.w	r3, r3, #1
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d1f2      	bne.n	8007c3a <HAL_DMA_IRQHandler+0x8da>
 8007c54:	e000      	b.n	8007c58 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c56:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2203      	movs	r2, #3
 8007c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007c6e:	e003      	b.n	8007c78 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 8272 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	4798      	blx	r3
 8007c92:	e26c      	b.n	800816e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a43      	ldr	r2, [pc, #268]	; (8007da8 <HAL_DMA_IRQHandler+0xa48>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d022      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a42      	ldr	r2, [pc, #264]	; (8007dac <HAL_DMA_IRQHandler+0xa4c>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d01d      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a40      	ldr	r2, [pc, #256]	; (8007db0 <HAL_DMA_IRQHandler+0xa50>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d018      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a3f      	ldr	r2, [pc, #252]	; (8007db4 <HAL_DMA_IRQHandler+0xa54>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d013      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a3d      	ldr	r2, [pc, #244]	; (8007db8 <HAL_DMA_IRQHandler+0xa58>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d00e      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a3c      	ldr	r2, [pc, #240]	; (8007dbc <HAL_DMA_IRQHandler+0xa5c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d009      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a3a      	ldr	r2, [pc, #232]	; (8007dc0 <HAL_DMA_IRQHandler+0xa60>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d004      	beq.n	8007ce4 <HAL_DMA_IRQHandler+0x984>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a39      	ldr	r2, [pc, #228]	; (8007dc4 <HAL_DMA_IRQHandler+0xa64>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d101      	bne.n	8007ce8 <HAL_DMA_IRQHandler+0x988>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <HAL_DMA_IRQHandler+0x98a>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 823f 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cfc:	f003 031f 	and.w	r3, r3, #31
 8007d00:	2204      	movs	r2, #4
 8007d02:	409a      	lsls	r2, r3
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 80cd 	beq.w	8007ea8 <HAL_DMA_IRQHandler+0xb48>
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 80c7 	beq.w	8007ea8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	2204      	movs	r2, #4
 8007d24:	409a      	lsls	r2, r3
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d049      	beq.n	8007dc8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d109      	bne.n	8007d52 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f000 8210 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d50:	e20a      	b.n	8008168 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8206 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d64:	e200      	b.n	8008168 <HAL_DMA_IRQHandler+0xe08>
 8007d66:	bf00      	nop
 8007d68:	40020010 	.word	0x40020010
 8007d6c:	40020028 	.word	0x40020028
 8007d70:	40020040 	.word	0x40020040
 8007d74:	40020058 	.word	0x40020058
 8007d78:	40020070 	.word	0x40020070
 8007d7c:	40020088 	.word	0x40020088
 8007d80:	400200a0 	.word	0x400200a0
 8007d84:	400200b8 	.word	0x400200b8
 8007d88:	40020410 	.word	0x40020410
 8007d8c:	40020428 	.word	0x40020428
 8007d90:	40020440 	.word	0x40020440
 8007d94:	40020458 	.word	0x40020458
 8007d98:	40020470 	.word	0x40020470
 8007d9c:	40020488 	.word	0x40020488
 8007da0:	400204a0 	.word	0x400204a0
 8007da4:	400204b8 	.word	0x400204b8
 8007da8:	58025408 	.word	0x58025408
 8007dac:	5802541c 	.word	0x5802541c
 8007db0:	58025430 	.word	0x58025430
 8007db4:	58025444 	.word	0x58025444
 8007db8:	58025458 	.word	0x58025458
 8007dbc:	5802546c 	.word	0x5802546c
 8007dc0:	58025480 	.word	0x58025480
 8007dc4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d160      	bne.n	8007e94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a8c      	ldr	r2, [pc, #560]	; (8008008 <HAL_DMA_IRQHandler+0xca8>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d04a      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a8a      	ldr	r2, [pc, #552]	; (800800c <HAL_DMA_IRQHandler+0xcac>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d045      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a89      	ldr	r2, [pc, #548]	; (8008010 <HAL_DMA_IRQHandler+0xcb0>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d040      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a87      	ldr	r2, [pc, #540]	; (8008014 <HAL_DMA_IRQHandler+0xcb4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d03b      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a86      	ldr	r2, [pc, #536]	; (8008018 <HAL_DMA_IRQHandler+0xcb8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d036      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a84      	ldr	r2, [pc, #528]	; (800801c <HAL_DMA_IRQHandler+0xcbc>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d031      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a83      	ldr	r2, [pc, #524]	; (8008020 <HAL_DMA_IRQHandler+0xcc0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d02c      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a81      	ldr	r2, [pc, #516]	; (8008024 <HAL_DMA_IRQHandler+0xcc4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d027      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a80      	ldr	r2, [pc, #512]	; (8008028 <HAL_DMA_IRQHandler+0xcc8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d022      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a7e      	ldr	r2, [pc, #504]	; (800802c <HAL_DMA_IRQHandler+0xccc>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d01d      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a7d      	ldr	r2, [pc, #500]	; (8008030 <HAL_DMA_IRQHandler+0xcd0>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d018      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a7b      	ldr	r2, [pc, #492]	; (8008034 <HAL_DMA_IRQHandler+0xcd4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d013      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a7a      	ldr	r2, [pc, #488]	; (8008038 <HAL_DMA_IRQHandler+0xcd8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d00e      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a78      	ldr	r2, [pc, #480]	; (800803c <HAL_DMA_IRQHandler+0xcdc>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d009      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a77      	ldr	r2, [pc, #476]	; (8008040 <HAL_DMA_IRQHandler+0xce0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d004      	beq.n	8007e72 <HAL_DMA_IRQHandler+0xb12>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a75      	ldr	r2, [pc, #468]	; (8008044 <HAL_DMA_IRQHandler+0xce4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d108      	bne.n	8007e84 <HAL_DMA_IRQHandler+0xb24>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 0208 	bic.w	r2, r2, #8
 8007e80:	601a      	str	r2, [r3, #0]
 8007e82:	e007      	b.n	8007e94 <HAL_DMA_IRQHandler+0xb34>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0204 	bic.w	r2, r2, #4
 8007e92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 8165 	beq.w	8008168 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ea6:	e15f      	b.n	8008168 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80c5 	beq.w	8008048 <HAL_DMA_IRQHandler+0xce8>
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f003 0302 	and.w	r3, r3, #2
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f000 80bf 	beq.w	8008048 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ece:	f003 031f 	and.w	r3, r3, #31
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	409a      	lsls	r2, r3
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d018      	beq.n	8007f16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d109      	bne.n	8007f02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 813a 	beq.w	800816c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f00:	e134      	b.n	800816c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 8130 	beq.w	800816c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f14:	e12a      	b.n	800816c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d168      	bne.n	8007ff2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a38      	ldr	r2, [pc, #224]	; (8008008 <HAL_DMA_IRQHandler+0xca8>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d04a      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a37      	ldr	r2, [pc, #220]	; (800800c <HAL_DMA_IRQHandler+0xcac>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d045      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a35      	ldr	r2, [pc, #212]	; (8008010 <HAL_DMA_IRQHandler+0xcb0>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d040      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a34      	ldr	r2, [pc, #208]	; (8008014 <HAL_DMA_IRQHandler+0xcb4>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d03b      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a32      	ldr	r2, [pc, #200]	; (8008018 <HAL_DMA_IRQHandler+0xcb8>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d036      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a31      	ldr	r2, [pc, #196]	; (800801c <HAL_DMA_IRQHandler+0xcbc>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d031      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a2f      	ldr	r2, [pc, #188]	; (8008020 <HAL_DMA_IRQHandler+0xcc0>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d02c      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a2e      	ldr	r2, [pc, #184]	; (8008024 <HAL_DMA_IRQHandler+0xcc4>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d027      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a2c      	ldr	r2, [pc, #176]	; (8008028 <HAL_DMA_IRQHandler+0xcc8>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d022      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a2b      	ldr	r2, [pc, #172]	; (800802c <HAL_DMA_IRQHandler+0xccc>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d01d      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a29      	ldr	r2, [pc, #164]	; (8008030 <HAL_DMA_IRQHandler+0xcd0>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d018      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a28      	ldr	r2, [pc, #160]	; (8008034 <HAL_DMA_IRQHandler+0xcd4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d013      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a26      	ldr	r2, [pc, #152]	; (8008038 <HAL_DMA_IRQHandler+0xcd8>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00e      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a25      	ldr	r2, [pc, #148]	; (800803c <HAL_DMA_IRQHandler+0xcdc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d009      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a23      	ldr	r2, [pc, #140]	; (8008040 <HAL_DMA_IRQHandler+0xce0>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d004      	beq.n	8007fc0 <HAL_DMA_IRQHandler+0xc60>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a22      	ldr	r2, [pc, #136]	; (8008044 <HAL_DMA_IRQHandler+0xce4>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d108      	bne.n	8007fd2 <HAL_DMA_IRQHandler+0xc72>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0214 	bic.w	r2, r2, #20
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	e007      	b.n	8007fe2 <HAL_DMA_IRQHandler+0xc82>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 020a 	bic.w	r2, r2, #10
 8007fe0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80b8 	beq.w	800816c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008004:	e0b2      	b.n	800816c <HAL_DMA_IRQHandler+0xe0c>
 8008006:	bf00      	nop
 8008008:	40020010 	.word	0x40020010
 800800c:	40020028 	.word	0x40020028
 8008010:	40020040 	.word	0x40020040
 8008014:	40020058 	.word	0x40020058
 8008018:	40020070 	.word	0x40020070
 800801c:	40020088 	.word	0x40020088
 8008020:	400200a0 	.word	0x400200a0
 8008024:	400200b8 	.word	0x400200b8
 8008028:	40020410 	.word	0x40020410
 800802c:	40020428 	.word	0x40020428
 8008030:	40020440 	.word	0x40020440
 8008034:	40020458 	.word	0x40020458
 8008038:	40020470 	.word	0x40020470
 800803c:	40020488 	.word	0x40020488
 8008040:	400204a0 	.word	0x400204a0
 8008044:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804c:	f003 031f 	and.w	r3, r3, #31
 8008050:	2208      	movs	r2, #8
 8008052:	409a      	lsls	r2, r3
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	4013      	ands	r3, r2
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 8088 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f003 0308 	and.w	r3, r3, #8
 8008064:	2b00      	cmp	r3, #0
 8008066:	f000 8082 	beq.w	800816e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a41      	ldr	r2, [pc, #260]	; (8008174 <HAL_DMA_IRQHandler+0xe14>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d04a      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a3f      	ldr	r2, [pc, #252]	; (8008178 <HAL_DMA_IRQHandler+0xe18>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d045      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a3e      	ldr	r2, [pc, #248]	; (800817c <HAL_DMA_IRQHandler+0xe1c>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d040      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a3c      	ldr	r2, [pc, #240]	; (8008180 <HAL_DMA_IRQHandler+0xe20>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d03b      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a3b      	ldr	r2, [pc, #236]	; (8008184 <HAL_DMA_IRQHandler+0xe24>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d036      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a39      	ldr	r2, [pc, #228]	; (8008188 <HAL_DMA_IRQHandler+0xe28>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d031      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a38      	ldr	r2, [pc, #224]	; (800818c <HAL_DMA_IRQHandler+0xe2c>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d02c      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a36      	ldr	r2, [pc, #216]	; (8008190 <HAL_DMA_IRQHandler+0xe30>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d027      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a35      	ldr	r2, [pc, #212]	; (8008194 <HAL_DMA_IRQHandler+0xe34>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d022      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a33      	ldr	r2, [pc, #204]	; (8008198 <HAL_DMA_IRQHandler+0xe38>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d01d      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a32      	ldr	r2, [pc, #200]	; (800819c <HAL_DMA_IRQHandler+0xe3c>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d018      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a30      	ldr	r2, [pc, #192]	; (80081a0 <HAL_DMA_IRQHandler+0xe40>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d013      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a2f      	ldr	r2, [pc, #188]	; (80081a4 <HAL_DMA_IRQHandler+0xe44>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d00e      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a2d      	ldr	r2, [pc, #180]	; (80081a8 <HAL_DMA_IRQHandler+0xe48>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d009      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a2c      	ldr	r2, [pc, #176]	; (80081ac <HAL_DMA_IRQHandler+0xe4c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d004      	beq.n	800810a <HAL_DMA_IRQHandler+0xdaa>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a2a      	ldr	r2, [pc, #168]	; (80081b0 <HAL_DMA_IRQHandler+0xe50>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d108      	bne.n	800811c <HAL_DMA_IRQHandler+0xdbc>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 021c 	bic.w	r2, r2, #28
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	e007      	b.n	800812c <HAL_DMA_IRQHandler+0xdcc>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 020e 	bic.w	r2, r2, #14
 800812a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008130:	f003 031f 	and.w	r3, r3, #31
 8008134:	2201      	movs	r2, #1
 8008136:	409a      	lsls	r2, r3
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d009      	beq.n	800816e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
 8008162:	e004      	b.n	800816e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008164:	bf00      	nop
 8008166:	e002      	b.n	800816e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008168:	bf00      	nop
 800816a:	e000      	b.n	800816e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800816c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800816e:	3728      	adds	r7, #40	; 0x28
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40020010 	.word	0x40020010
 8008178:	40020028 	.word	0x40020028
 800817c:	40020040 	.word	0x40020040
 8008180:	40020058 	.word	0x40020058
 8008184:	40020070 	.word	0x40020070
 8008188:	40020088 	.word	0x40020088
 800818c:	400200a0 	.word	0x400200a0
 8008190:	400200b8 	.word	0x400200b8
 8008194:	40020410 	.word	0x40020410
 8008198:	40020428 	.word	0x40020428
 800819c:	40020440 	.word	0x40020440
 80081a0:	40020458 	.word	0x40020458
 80081a4:	40020470 	.word	0x40020470
 80081a8:	40020488 	.word	0x40020488
 80081ac:	400204a0 	.word	0x400204a0
 80081b0:	400204b8 	.word	0x400204b8

080081b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a42      	ldr	r2, [pc, #264]	; (80082cc <DMA_CalcBaseAndBitshift+0x118>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d04a      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a41      	ldr	r2, [pc, #260]	; (80082d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d045      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a3f      	ldr	r2, [pc, #252]	; (80082d4 <DMA_CalcBaseAndBitshift+0x120>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d040      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a3e      	ldr	r2, [pc, #248]	; (80082d8 <DMA_CalcBaseAndBitshift+0x124>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d03b      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a3c      	ldr	r2, [pc, #240]	; (80082dc <DMA_CalcBaseAndBitshift+0x128>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d036      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a3b      	ldr	r2, [pc, #236]	; (80082e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d031      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a39      	ldr	r2, [pc, #228]	; (80082e4 <DMA_CalcBaseAndBitshift+0x130>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d02c      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a38      	ldr	r2, [pc, #224]	; (80082e8 <DMA_CalcBaseAndBitshift+0x134>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d027      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a36      	ldr	r2, [pc, #216]	; (80082ec <DMA_CalcBaseAndBitshift+0x138>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d022      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a35      	ldr	r2, [pc, #212]	; (80082f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d01d      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a33      	ldr	r2, [pc, #204]	; (80082f4 <DMA_CalcBaseAndBitshift+0x140>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d018      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a32      	ldr	r2, [pc, #200]	; (80082f8 <DMA_CalcBaseAndBitshift+0x144>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a30      	ldr	r2, [pc, #192]	; (80082fc <DMA_CalcBaseAndBitshift+0x148>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d00e      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a2f      	ldr	r2, [pc, #188]	; (8008300 <DMA_CalcBaseAndBitshift+0x14c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d009      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a2d      	ldr	r2, [pc, #180]	; (8008304 <DMA_CalcBaseAndBitshift+0x150>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d004      	beq.n	800825c <DMA_CalcBaseAndBitshift+0xa8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a2c      	ldr	r2, [pc, #176]	; (8008308 <DMA_CalcBaseAndBitshift+0x154>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d101      	bne.n	8008260 <DMA_CalcBaseAndBitshift+0xac>
 800825c:	2301      	movs	r3, #1
 800825e:	e000      	b.n	8008262 <DMA_CalcBaseAndBitshift+0xae>
 8008260:	2300      	movs	r3, #0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d024      	beq.n	80082b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	b2db      	uxtb	r3, r3
 800826c:	3b10      	subs	r3, #16
 800826e:	4a27      	ldr	r2, [pc, #156]	; (800830c <DMA_CalcBaseAndBitshift+0x158>)
 8008270:	fba2 2303 	umull	r2, r3, r2, r3
 8008274:	091b      	lsrs	r3, r3, #4
 8008276:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	4a24      	ldr	r2, [pc, #144]	; (8008310 <DMA_CalcBaseAndBitshift+0x15c>)
 8008280:	5cd3      	ldrb	r3, [r2, r3]
 8008282:	461a      	mov	r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2b03      	cmp	r3, #3
 800828c:	d908      	bls.n	80082a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	4b1f      	ldr	r3, [pc, #124]	; (8008314 <DMA_CalcBaseAndBitshift+0x160>)
 8008296:	4013      	ands	r3, r2
 8008298:	1d1a      	adds	r2, r3, #4
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	659a      	str	r2, [r3, #88]	; 0x58
 800829e:	e00d      	b.n	80082bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	461a      	mov	r2, r3
 80082a6:	4b1b      	ldr	r3, [pc, #108]	; (8008314 <DMA_CalcBaseAndBitshift+0x160>)
 80082a8:	4013      	ands	r3, r2
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	6593      	str	r3, [r2, #88]	; 0x58
 80082ae:	e005      	b.n	80082bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	40020010 	.word	0x40020010
 80082d0:	40020028 	.word	0x40020028
 80082d4:	40020040 	.word	0x40020040
 80082d8:	40020058 	.word	0x40020058
 80082dc:	40020070 	.word	0x40020070
 80082e0:	40020088 	.word	0x40020088
 80082e4:	400200a0 	.word	0x400200a0
 80082e8:	400200b8 	.word	0x400200b8
 80082ec:	40020410 	.word	0x40020410
 80082f0:	40020428 	.word	0x40020428
 80082f4:	40020440 	.word	0x40020440
 80082f8:	40020458 	.word	0x40020458
 80082fc:	40020470 	.word	0x40020470
 8008300:	40020488 	.word	0x40020488
 8008304:	400204a0 	.word	0x400204a0
 8008308:	400204b8 	.word	0x400204b8
 800830c:	aaaaaaab 	.word	0xaaaaaaab
 8008310:	08011414 	.word	0x08011414
 8008314:	fffffc00 	.word	0xfffffc00

08008318 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	699b      	ldr	r3, [r3, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d120      	bne.n	800836e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008330:	2b03      	cmp	r3, #3
 8008332:	d858      	bhi.n	80083e6 <DMA_CheckFifoParam+0xce>
 8008334:	a201      	add	r2, pc, #4	; (adr r2, 800833c <DMA_CheckFifoParam+0x24>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	0800834d 	.word	0x0800834d
 8008340:	0800835f 	.word	0x0800835f
 8008344:	0800834d 	.word	0x0800834d
 8008348:	080083e7 	.word	0x080083e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d048      	beq.n	80083ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800835c:	e045      	b.n	80083ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008366:	d142      	bne.n	80083ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800836c:	e03f      	b.n	80083ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	699b      	ldr	r3, [r3, #24]
 8008372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008376:	d123      	bne.n	80083c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	2b03      	cmp	r3, #3
 800837e:	d838      	bhi.n	80083f2 <DMA_CheckFifoParam+0xda>
 8008380:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <DMA_CheckFifoParam+0x70>)
 8008382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008386:	bf00      	nop
 8008388:	08008399 	.word	0x08008399
 800838c:	0800839f 	.word	0x0800839f
 8008390:	08008399 	.word	0x08008399
 8008394:	080083b1 	.word	0x080083b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	73fb      	strb	r3, [r7, #15]
        break;
 800839c:	e030      	b.n	8008400 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d025      	beq.n	80083f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083ae:	e022      	b.n	80083f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083b8:	d11f      	bne.n	80083fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083be:	e01c      	b.n	80083fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d902      	bls.n	80083ce <DMA_CheckFifoParam+0xb6>
 80083c8:	2b03      	cmp	r3, #3
 80083ca:	d003      	beq.n	80083d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80083cc:	e018      	b.n	8008400 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	73fb      	strb	r3, [r7, #15]
        break;
 80083d2:	e015      	b.n	8008400 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00e      	beq.n	80083fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
    break;
 80083e4:	e00b      	b.n	80083fe <DMA_CheckFifoParam+0xe6>
        break;
 80083e6:	bf00      	nop
 80083e8:	e00a      	b.n	8008400 <DMA_CheckFifoParam+0xe8>
        break;
 80083ea:	bf00      	nop
 80083ec:	e008      	b.n	8008400 <DMA_CheckFifoParam+0xe8>
        break;
 80083ee:	bf00      	nop
 80083f0:	e006      	b.n	8008400 <DMA_CheckFifoParam+0xe8>
        break;
 80083f2:	bf00      	nop
 80083f4:	e004      	b.n	8008400 <DMA_CheckFifoParam+0xe8>
        break;
 80083f6:	bf00      	nop
 80083f8:	e002      	b.n	8008400 <DMA_CheckFifoParam+0xe8>
        break;
 80083fa:	bf00      	nop
 80083fc:	e000      	b.n	8008400 <DMA_CheckFifoParam+0xe8>
    break;
 80083fe:	bf00      	nop
    }
  }

  return status;
 8008400:	7bfb      	ldrb	r3, [r7, #15]
}
 8008402:	4618      	mov	r0, r3
 8008404:	3714      	adds	r7, #20
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop

08008410 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a38      	ldr	r2, [pc, #224]	; (8008504 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d022      	beq.n	800846e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a36      	ldr	r2, [pc, #216]	; (8008508 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d01d      	beq.n	800846e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a35      	ldr	r2, [pc, #212]	; (800850c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d018      	beq.n	800846e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a33      	ldr	r2, [pc, #204]	; (8008510 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d013      	beq.n	800846e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a32      	ldr	r2, [pc, #200]	; (8008514 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00e      	beq.n	800846e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a30      	ldr	r2, [pc, #192]	; (8008518 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d009      	beq.n	800846e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a2f      	ldr	r2, [pc, #188]	; (800851c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d004      	beq.n	800846e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a2d      	ldr	r2, [pc, #180]	; (8008520 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d101      	bne.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008472:	2300      	movs	r3, #0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01a      	beq.n	80084ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	3b08      	subs	r3, #8
 8008480:	4a28      	ldr	r2, [pc, #160]	; (8008524 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	091b      	lsrs	r3, r3, #4
 8008488:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	4b26      	ldr	r3, [pc, #152]	; (8008528 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800848e:	4413      	add	r3, r2
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a24      	ldr	r2, [pc, #144]	; (800852c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800849c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f003 031f 	and.w	r3, r3, #31
 80084a4:	2201      	movs	r2, #1
 80084a6:	409a      	lsls	r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80084ac:	e024      	b.n	80084f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	3b10      	subs	r3, #16
 80084b6:	4a1e      	ldr	r2, [pc, #120]	; (8008530 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80084b8:	fba2 2303 	umull	r2, r3, r2, r3
 80084bc:	091b      	lsrs	r3, r3, #4
 80084be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	4a1c      	ldr	r2, [pc, #112]	; (8008534 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d806      	bhi.n	80084d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4a1b      	ldr	r2, [pc, #108]	; (8008538 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d902      	bls.n	80084d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	3308      	adds	r3, #8
 80084d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	4b18      	ldr	r3, [pc, #96]	; (800853c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	461a      	mov	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a16      	ldr	r2, [pc, #88]	; (8008540 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80084e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	2201      	movs	r2, #1
 80084f2:	409a      	lsls	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	58025408 	.word	0x58025408
 8008508:	5802541c 	.word	0x5802541c
 800850c:	58025430 	.word	0x58025430
 8008510:	58025444 	.word	0x58025444
 8008514:	58025458 	.word	0x58025458
 8008518:	5802546c 	.word	0x5802546c
 800851c:	58025480 	.word	0x58025480
 8008520:	58025494 	.word	0x58025494
 8008524:	cccccccd 	.word	0xcccccccd
 8008528:	16009600 	.word	0x16009600
 800852c:	58025880 	.word	0x58025880
 8008530:	aaaaaaab 	.word	0xaaaaaaab
 8008534:	400204b8 	.word	0x400204b8
 8008538:	4002040f 	.word	0x4002040f
 800853c:	10008200 	.word	0x10008200
 8008540:	40020880 	.word	0x40020880

08008544 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d04a      	beq.n	80085f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2b08      	cmp	r3, #8
 800855e:	d847      	bhi.n	80085f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a25      	ldr	r2, [pc, #148]	; (80085fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d022      	beq.n	80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a24      	ldr	r2, [pc, #144]	; (8008600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d01d      	beq.n	80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a22      	ldr	r2, [pc, #136]	; (8008604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d018      	beq.n	80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a21      	ldr	r2, [pc, #132]	; (8008608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d013      	beq.n	80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1f      	ldr	r2, [pc, #124]	; (800860c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d00e      	beq.n	80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d009      	beq.n	80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a1c      	ldr	r2, [pc, #112]	; (8008614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d004      	beq.n	80085b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a1b      	ldr	r2, [pc, #108]	; (8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d101      	bne.n	80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80085b0:	2301      	movs	r3, #1
 80085b2:	e000      	b.n	80085b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80085b4:	2300      	movs	r3, #0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00a      	beq.n	80085d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	4b17      	ldr	r3, [pc, #92]	; (800861c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	461a      	mov	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a15      	ldr	r2, [pc, #84]	; (8008620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80085cc:	671a      	str	r2, [r3, #112]	; 0x70
 80085ce:	e009      	b.n	80085e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4b14      	ldr	r3, [pc, #80]	; (8008624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80085d4:	4413      	add	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	461a      	mov	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a11      	ldr	r2, [pc, #68]	; (8008628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80085e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	2201      	movs	r2, #1
 80085ea:	409a      	lsls	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	58025408 	.word	0x58025408
 8008600:	5802541c 	.word	0x5802541c
 8008604:	58025430 	.word	0x58025430
 8008608:	58025444 	.word	0x58025444
 800860c:	58025458 	.word	0x58025458
 8008610:	5802546c 	.word	0x5802546c
 8008614:	58025480 	.word	0x58025480
 8008618:	58025494 	.word	0x58025494
 800861c:	1600963f 	.word	0x1600963f
 8008620:	58025940 	.word	0x58025940
 8008624:	1000823f 	.word	0x1000823f
 8008628:	40020940 	.word	0x40020940

0800862c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800862c:	b480      	push	{r7}
 800862e:	b089      	sub	sp, #36	; 0x24
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008636:	2300      	movs	r3, #0
 8008638:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800863a:	4b86      	ldr	r3, [pc, #536]	; (8008854 <HAL_GPIO_Init+0x228>)
 800863c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800863e:	e18c      	b.n	800895a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	2101      	movs	r1, #1
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	fa01 f303 	lsl.w	r3, r1, r3
 800864c:	4013      	ands	r3, r2
 800864e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 817e 	beq.w	8008954 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	2b01      	cmp	r3, #1
 8008662:	d005      	beq.n	8008670 <HAL_GPIO_Init+0x44>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f003 0303 	and.w	r3, r3, #3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d130      	bne.n	80086d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	689b      	ldr	r3, [r3, #8]
 8008674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	2203      	movs	r2, #3
 800867c:	fa02 f303 	lsl.w	r3, r2, r3
 8008680:	43db      	mvns	r3, r3
 8008682:	69ba      	ldr	r2, [r7, #24]
 8008684:	4013      	ands	r3, r2
 8008686:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	fa02 f303 	lsl.w	r3, r2, r3
 8008694:	69ba      	ldr	r2, [r7, #24]
 8008696:	4313      	orrs	r3, r2
 8008698:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	69ba      	ldr	r2, [r7, #24]
 800869e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086a6:	2201      	movs	r2, #1
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	fa02 f303 	lsl.w	r3, r2, r3
 80086ae:	43db      	mvns	r3, r3
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	4013      	ands	r3, r2
 80086b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	091b      	lsrs	r3, r3, #4
 80086bc:	f003 0201 	and.w	r2, r3, #1
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	fa02 f303 	lsl.w	r3, r2, r3
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f003 0303 	and.w	r3, r3, #3
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d017      	beq.n	800870e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	005b      	lsls	r3, r3, #1
 80086e8:	2203      	movs	r2, #3
 80086ea:	fa02 f303 	lsl.w	r3, r2, r3
 80086ee:	43db      	mvns	r3, r3
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	4013      	ands	r3, r2
 80086f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	689a      	ldr	r2, [r3, #8]
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	4313      	orrs	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	f003 0303 	and.w	r3, r3, #3
 8008716:	2b02      	cmp	r3, #2
 8008718:	d123      	bne.n	8008762 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	08da      	lsrs	r2, r3, #3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3208      	adds	r2, #8
 8008722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008728:	69fb      	ldr	r3, [r7, #28]
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	220f      	movs	r2, #15
 8008732:	fa02 f303 	lsl.w	r3, r2, r3
 8008736:	43db      	mvns	r3, r3
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	4013      	ands	r3, r2
 800873c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	691a      	ldr	r2, [r3, #16]
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	69ba      	ldr	r2, [r7, #24]
 8008750:	4313      	orrs	r3, r2
 8008752:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	08da      	lsrs	r2, r3, #3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3208      	adds	r2, #8
 800875c:	69b9      	ldr	r1, [r7, #24]
 800875e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	005b      	lsls	r3, r3, #1
 800876c:	2203      	movs	r2, #3
 800876e:	fa02 f303 	lsl.w	r3, r2, r3
 8008772:	43db      	mvns	r3, r3
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	4013      	ands	r3, r2
 8008778:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f003 0203 	and.w	r2, r3, #3
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	005b      	lsls	r3, r3, #1
 8008786:	fa02 f303 	lsl.w	r3, r2, r3
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	4313      	orrs	r3, r2
 800878e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	69ba      	ldr	r2, [r7, #24]
 8008794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 80d8 	beq.w	8008954 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087a4:	4b2c      	ldr	r3, [pc, #176]	; (8008858 <HAL_GPIO_Init+0x22c>)
 80087a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087aa:	4a2b      	ldr	r2, [pc, #172]	; (8008858 <HAL_GPIO_Init+0x22c>)
 80087ac:	f043 0302 	orr.w	r3, r3, #2
 80087b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80087b4:	4b28      	ldr	r3, [pc, #160]	; (8008858 <HAL_GPIO_Init+0x22c>)
 80087b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087ba:	f003 0302 	and.w	r3, r3, #2
 80087be:	60fb      	str	r3, [r7, #12]
 80087c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087c2:	4a26      	ldr	r2, [pc, #152]	; (800885c <HAL_GPIO_Init+0x230>)
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	089b      	lsrs	r3, r3, #2
 80087c8:	3302      	adds	r3, #2
 80087ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f003 0303 	and.w	r3, r3, #3
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	220f      	movs	r2, #15
 80087da:	fa02 f303 	lsl.w	r3, r2, r3
 80087de:	43db      	mvns	r3, r3
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	4013      	ands	r3, r2
 80087e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a1d      	ldr	r2, [pc, #116]	; (8008860 <HAL_GPIO_Init+0x234>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d04a      	beq.n	8008884 <HAL_GPIO_Init+0x258>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a1c      	ldr	r2, [pc, #112]	; (8008864 <HAL_GPIO_Init+0x238>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d02b      	beq.n	800884e <HAL_GPIO_Init+0x222>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a1b      	ldr	r2, [pc, #108]	; (8008868 <HAL_GPIO_Init+0x23c>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d025      	beq.n	800884a <HAL_GPIO_Init+0x21e>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a1a      	ldr	r2, [pc, #104]	; (800886c <HAL_GPIO_Init+0x240>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d01f      	beq.n	8008846 <HAL_GPIO_Init+0x21a>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a19      	ldr	r2, [pc, #100]	; (8008870 <HAL_GPIO_Init+0x244>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d019      	beq.n	8008842 <HAL_GPIO_Init+0x216>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a18      	ldr	r2, [pc, #96]	; (8008874 <HAL_GPIO_Init+0x248>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d013      	beq.n	800883e <HAL_GPIO_Init+0x212>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a17      	ldr	r2, [pc, #92]	; (8008878 <HAL_GPIO_Init+0x24c>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00d      	beq.n	800883a <HAL_GPIO_Init+0x20e>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a16      	ldr	r2, [pc, #88]	; (800887c <HAL_GPIO_Init+0x250>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d007      	beq.n	8008836 <HAL_GPIO_Init+0x20a>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a15      	ldr	r2, [pc, #84]	; (8008880 <HAL_GPIO_Init+0x254>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d101      	bne.n	8008832 <HAL_GPIO_Init+0x206>
 800882e:	2309      	movs	r3, #9
 8008830:	e029      	b.n	8008886 <HAL_GPIO_Init+0x25a>
 8008832:	230a      	movs	r3, #10
 8008834:	e027      	b.n	8008886 <HAL_GPIO_Init+0x25a>
 8008836:	2307      	movs	r3, #7
 8008838:	e025      	b.n	8008886 <HAL_GPIO_Init+0x25a>
 800883a:	2306      	movs	r3, #6
 800883c:	e023      	b.n	8008886 <HAL_GPIO_Init+0x25a>
 800883e:	2305      	movs	r3, #5
 8008840:	e021      	b.n	8008886 <HAL_GPIO_Init+0x25a>
 8008842:	2304      	movs	r3, #4
 8008844:	e01f      	b.n	8008886 <HAL_GPIO_Init+0x25a>
 8008846:	2303      	movs	r3, #3
 8008848:	e01d      	b.n	8008886 <HAL_GPIO_Init+0x25a>
 800884a:	2302      	movs	r3, #2
 800884c:	e01b      	b.n	8008886 <HAL_GPIO_Init+0x25a>
 800884e:	2301      	movs	r3, #1
 8008850:	e019      	b.n	8008886 <HAL_GPIO_Init+0x25a>
 8008852:	bf00      	nop
 8008854:	58000080 	.word	0x58000080
 8008858:	58024400 	.word	0x58024400
 800885c:	58000400 	.word	0x58000400
 8008860:	58020000 	.word	0x58020000
 8008864:	58020400 	.word	0x58020400
 8008868:	58020800 	.word	0x58020800
 800886c:	58020c00 	.word	0x58020c00
 8008870:	58021000 	.word	0x58021000
 8008874:	58021400 	.word	0x58021400
 8008878:	58021800 	.word	0x58021800
 800887c:	58021c00 	.word	0x58021c00
 8008880:	58022400 	.word	0x58022400
 8008884:	2300      	movs	r3, #0
 8008886:	69fa      	ldr	r2, [r7, #28]
 8008888:	f002 0203 	and.w	r2, r2, #3
 800888c:	0092      	lsls	r2, r2, #2
 800888e:	4093      	lsls	r3, r2
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	4313      	orrs	r3, r2
 8008894:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008896:	4938      	ldr	r1, [pc, #224]	; (8008978 <HAL_GPIO_Init+0x34c>)
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	089b      	lsrs	r3, r3, #2
 800889c:	3302      	adds	r3, #2
 800889e:	69ba      	ldr	r2, [r7, #24]
 80088a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	43db      	mvns	r3, r3
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	4013      	ands	r3, r2
 80088b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d003      	beq.n	80088ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80088c2:	69ba      	ldr	r2, [r7, #24]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80088ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088ce:	69bb      	ldr	r3, [r7, #24]
 80088d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80088d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	43db      	mvns	r3, r3
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	4013      	ands	r3, r2
 80088e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80088f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	43db      	mvns	r3, r3
 800890a:	69ba      	ldr	r2, [r7, #24]
 800890c:	4013      	ands	r3, r2
 800890e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800891c:	69ba      	ldr	r2, [r7, #24]
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	4313      	orrs	r3, r2
 8008922:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	43db      	mvns	r3, r3
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	4013      	ands	r3, r2
 8008938:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	4313      	orrs	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	3301      	adds	r3, #1
 8008958:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	fa22 f303 	lsr.w	r3, r2, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	f47f ae6b 	bne.w	8008640 <HAL_GPIO_Init+0x14>
  }
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	3724      	adds	r7, #36	; 0x24
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	58000400 	.word	0x58000400

0800897c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	460b      	mov	r3, r1
 8008986:	807b      	strh	r3, [r7, #2]
 8008988:	4613      	mov	r3, r2
 800898a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800898c:	787b      	ldrb	r3, [r7, #1]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008992:	887a      	ldrh	r2, [r7, #2]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008998:	e003      	b.n	80089a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800899a:	887b      	ldrh	r3, [r7, #2]
 800899c:	041a      	lsls	r2, r3, #16
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	619a      	str	r2, [r3, #24]
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b085      	sub	sp, #20
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	460b      	mov	r3, r1
 80089b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80089c0:	887a      	ldrh	r2, [r7, #2]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4013      	ands	r3, r2
 80089c6:	041a      	lsls	r2, r3, #16
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	43d9      	mvns	r1, r3
 80089cc:	887b      	ldrh	r3, [r7, #2]
 80089ce:	400b      	ands	r3, r1
 80089d0:	431a      	orrs	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	619a      	str	r2, [r3, #24]
}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
	...

080089e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e07f      	b.n	8008af6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d106      	bne.n	8008a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7f8 fdbc 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2224      	movs	r2, #36	; 0x24
 8008a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f022 0201 	bic.w	r2, r2, #1
 8008a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689a      	ldr	r2, [r3, #8]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d107      	bne.n	8008a5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	689a      	ldr	r2, [r3, #8]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a5a:	609a      	str	r2, [r3, #8]
 8008a5c:	e006      	b.n	8008a6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008a6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d104      	bne.n	8008a7e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a7c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6859      	ldr	r1, [r3, #4]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	4b1d      	ldr	r3, [pc, #116]	; (8008b00 <HAL_I2C_Init+0x11c>)
 8008a8a:	430b      	orrs	r3, r1
 8008a8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008a9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691a      	ldr	r2, [r3, #16]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	430a      	orrs	r2, r1
 8008ab6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69d9      	ldr	r1, [r3, #28]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a1a      	ldr	r2, [r3, #32]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0201 	orr.w	r2, r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3708      	adds	r7, #8
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	02008000 	.word	0x02008000

08008b04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d138      	bne.n	8008b8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d101      	bne.n	8008b28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008b24:	2302      	movs	r3, #2
 8008b26:	e032      	b.n	8008b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2224      	movs	r2, #36	; 0x24
 8008b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0201 	bic.w	r2, r2, #1
 8008b46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6819      	ldr	r1, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	683a      	ldr	r2, [r7, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0201 	orr.w	r2, r2, #1
 8008b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	e000      	b.n	8008b8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b8c:	2302      	movs	r3, #2
  }
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	d139      	bne.n	8008c24 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d101      	bne.n	8008bbe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008bba:	2302      	movs	r3, #2
 8008bbc:	e033      	b.n	8008c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2224      	movs	r2, #36	; 0x24
 8008bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681a      	ldr	r2, [r3, #0]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 0201 	bic.w	r2, r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008bec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	021b      	lsls	r3, r3, #8
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f042 0201 	orr.w	r2, r2, #1
 8008c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2220      	movs	r2, #32
 8008c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c20:	2300      	movs	r3, #0
 8008c22:	e000      	b.n	8008c26 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008c24:	2302      	movs	r3, #2
  }
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3714      	adds	r7, #20
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
	...

08008c34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008c3c:	4b19      	ldr	r3, [pc, #100]	; (8008ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f003 0304 	and.w	r3, r3, #4
 8008c44:	2b04      	cmp	r3, #4
 8008c46:	d00a      	beq.n	8008c5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c48:	4b16      	ldr	r3, [pc, #88]	; (8008ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	429a      	cmp	r2, r3
 8008c54:	d001      	beq.n	8008c5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e01f      	b.n	8008c9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	e01d      	b.n	8008c9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c5e:	4b11      	ldr	r3, [pc, #68]	; (8008ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f023 0207 	bic.w	r2, r3, #7
 8008c66:	490f      	ldr	r1, [pc, #60]	; (8008ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c6e:	f7fa ff5d 	bl	8003b2c <HAL_GetTick>
 8008c72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c74:	e009      	b.n	8008c8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c76:	f7fa ff59 	bl	8003b2c <HAL_GetTick>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	1ad3      	subs	r3, r2, r3
 8008c80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c84:	d901      	bls.n	8008c8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e007      	b.n	8008c9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c8a:	4b06      	ldr	r3, [pc, #24]	; (8008ca4 <HAL_PWREx_ConfigSupply+0x70>)
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c96:	d1ee      	bne.n	8008c76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	58024800 	.word	0x58024800

08008ca8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08c      	sub	sp, #48	; 0x30
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e397      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	f000 8087 	beq.w	8008dd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cc8:	4b9e      	ldr	r3, [pc, #632]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cd2:	4b9c      	ldr	r3, [pc, #624]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cda:	2b10      	cmp	r3, #16
 8008cdc:	d007      	beq.n	8008cee <HAL_RCC_OscConfig+0x46>
 8008cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce0:	2b18      	cmp	r3, #24
 8008ce2:	d110      	bne.n	8008d06 <HAL_RCC_OscConfig+0x5e>
 8008ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d10b      	bne.n	8008d06 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cee:	4b95      	ldr	r3, [pc, #596]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d06c      	beq.n	8008dd4 <HAL_RCC_OscConfig+0x12c>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d168      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e371      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d0e:	d106      	bne.n	8008d1e <HAL_RCC_OscConfig+0x76>
 8008d10:	4b8c      	ldr	r3, [pc, #560]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a8b      	ldr	r2, [pc, #556]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d1a:	6013      	str	r3, [r2, #0]
 8008d1c:	e02e      	b.n	8008d7c <HAL_RCC_OscConfig+0xd4>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10c      	bne.n	8008d40 <HAL_RCC_OscConfig+0x98>
 8008d26:	4b87      	ldr	r3, [pc, #540]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a86      	ldr	r2, [pc, #536]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	4b84      	ldr	r3, [pc, #528]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a83      	ldr	r2, [pc, #524]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	e01d      	b.n	8008d7c <HAL_RCC_OscConfig+0xd4>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d48:	d10c      	bne.n	8008d64 <HAL_RCC_OscConfig+0xbc>
 8008d4a:	4b7e      	ldr	r3, [pc, #504]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a7d      	ldr	r2, [pc, #500]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	4b7b      	ldr	r3, [pc, #492]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a7a      	ldr	r2, [pc, #488]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	e00b      	b.n	8008d7c <HAL_RCC_OscConfig+0xd4>
 8008d64:	4b77      	ldr	r3, [pc, #476]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a76      	ldr	r2, [pc, #472]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d6e:	6013      	str	r3, [r2, #0]
 8008d70:	4b74      	ldr	r3, [pc, #464]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a73      	ldr	r2, [pc, #460]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d013      	beq.n	8008dac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d84:	f7fa fed2 	bl	8003b2c <HAL_GetTick>
 8008d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d8a:	e008      	b.n	8008d9e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d8c:	f7fa fece 	bl	8003b2c <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b64      	cmp	r3, #100	; 0x64
 8008d98:	d901      	bls.n	8008d9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e325      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d9e:	4b69      	ldr	r3, [pc, #420]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0f0      	beq.n	8008d8c <HAL_RCC_OscConfig+0xe4>
 8008daa:	e014      	b.n	8008dd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dac:	f7fa febe 	bl	8003b2c <HAL_GetTick>
 8008db0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008db2:	e008      	b.n	8008dc6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008db4:	f7fa feba 	bl	8003b2c <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b64      	cmp	r3, #100	; 0x64
 8008dc0:	d901      	bls.n	8008dc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e311      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dc6:	4b5f      	ldr	r3, [pc, #380]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1f0      	bne.n	8008db4 <HAL_RCC_OscConfig+0x10c>
 8008dd2:	e000      	b.n	8008dd6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 808a 	beq.w	8008ef8 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008de4:	4b57      	ldr	r3, [pc, #348]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008de6:	691b      	ldr	r3, [r3, #16]
 8008de8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dee:	4b55      	ldr	r3, [pc, #340]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008df4:	6a3b      	ldr	r3, [r7, #32]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <HAL_RCC_OscConfig+0x162>
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	2b18      	cmp	r3, #24
 8008dfe:	d137      	bne.n	8008e70 <HAL_RCC_OscConfig+0x1c8>
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d132      	bne.n	8008e70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e0a:	4b4e      	ldr	r3, [pc, #312]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0304 	and.w	r3, r3, #4
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d005      	beq.n	8008e22 <HAL_RCC_OscConfig+0x17a>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e2e3      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e22:	4b48      	ldr	r3, [pc, #288]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f023 0219 	bic.w	r2, r3, #25
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	4945      	ldr	r1, [pc, #276]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008e30:	4313      	orrs	r3, r2
 8008e32:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e34:	f7fa fe7a 	bl	8003b2c <HAL_GetTick>
 8008e38:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e3a:	e008      	b.n	8008e4e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e3c:	f7fa fe76 	bl	8003b2c <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d901      	bls.n	8008e4e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e2cd      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e4e:	4b3d      	ldr	r3, [pc, #244]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d0f0      	beq.n	8008e3c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e5a:	4b3a      	ldr	r3, [pc, #232]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	061b      	lsls	r3, r3, #24
 8008e68:	4936      	ldr	r1, [pc, #216]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e6e:	e043      	b.n	8008ef8 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d026      	beq.n	8008ec6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e78:	4b32      	ldr	r3, [pc, #200]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f023 0219 	bic.w	r2, r3, #25
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	492f      	ldr	r1, [pc, #188]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e8a:	f7fa fe4f 	bl	8003b2c <HAL_GetTick>
 8008e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e90:	e008      	b.n	8008ea4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e92:	f7fa fe4b 	bl	8003b2c <HAL_GetTick>
 8008e96:	4602      	mov	r2, r0
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d901      	bls.n	8008ea4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e2a2      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ea4:	4b27      	ldr	r3, [pc, #156]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f003 0304 	and.w	r3, r3, #4
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0f0      	beq.n	8008e92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eb0:	4b24      	ldr	r3, [pc, #144]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	061b      	lsls	r3, r3, #24
 8008ebe:	4921      	ldr	r1, [pc, #132]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	604b      	str	r3, [r1, #4]
 8008ec4:	e018      	b.n	8008ef8 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ec6:	4b1f      	ldr	r3, [pc, #124]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a1e      	ldr	r2, [pc, #120]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008ecc:	f023 0301 	bic.w	r3, r3, #1
 8008ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed2:	f7fa fe2b 	bl	8003b2c <HAL_GetTick>
 8008ed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ed8:	e008      	b.n	8008eec <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008eda:	f7fa fe27 	bl	8003b2c <HAL_GetTick>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	1ad3      	subs	r3, r2, r3
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d901      	bls.n	8008eec <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	e27e      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008eec:	4b15      	ldr	r3, [pc, #84]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 0304 	and.w	r3, r3, #4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1f0      	bne.n	8008eda <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0310 	and.w	r3, r3, #16
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d06d      	beq.n	8008fe0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f04:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f0c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f0e:	4b0d      	ldr	r3, [pc, #52]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f12:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2b08      	cmp	r3, #8
 8008f18:	d007      	beq.n	8008f2a <HAL_RCC_OscConfig+0x282>
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	2b18      	cmp	r3, #24
 8008f1e:	d11e      	bne.n	8008f5e <HAL_RCC_OscConfig+0x2b6>
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d119      	bne.n	8008f5e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f2a:	4b06      	ldr	r3, [pc, #24]	; (8008f44 <HAL_RCC_OscConfig+0x29c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d008      	beq.n	8008f48 <HAL_RCC_OscConfig+0x2a0>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	2b80      	cmp	r3, #128	; 0x80
 8008f3c:	d004      	beq.n	8008f48 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e253      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
 8008f42:	bf00      	nop
 8008f44:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f48:	4ba3      	ldr	r3, [pc, #652]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	061b      	lsls	r3, r3, #24
 8008f56:	49a0      	ldr	r1, [pc, #640]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f5c:	e040      	b.n	8008fe0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d023      	beq.n	8008fae <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f66:	4b9c      	ldr	r3, [pc, #624]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a9b      	ldr	r2, [pc, #620]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f72:	f7fa fddb 	bl	8003b2c <HAL_GetTick>
 8008f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f78:	e008      	b.n	8008f8c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008f7a:	f7fa fdd7 	bl	8003b2c <HAL_GetTick>
 8008f7e:	4602      	mov	r2, r0
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d901      	bls.n	8008f8c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8008f88:	2303      	movs	r3, #3
 8008f8a:	e22e      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f8c:	4b92      	ldr	r3, [pc, #584]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d0f0      	beq.n	8008f7a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f98:	4b8f      	ldr	r3, [pc, #572]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a1b      	ldr	r3, [r3, #32]
 8008fa4:	061b      	lsls	r3, r3, #24
 8008fa6:	498c      	ldr	r1, [pc, #560]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	60cb      	str	r3, [r1, #12]
 8008fac:	e018      	b.n	8008fe0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008fae:	4b8a      	ldr	r3, [pc, #552]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a89      	ldr	r2, [pc, #548]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fba:	f7fa fdb7 	bl	8003b2c <HAL_GetTick>
 8008fbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fc0:	e008      	b.n	8008fd4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008fc2:	f7fa fdb3 	bl	8003b2c <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d901      	bls.n	8008fd4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e20a      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fd4:	4b80      	ldr	r3, [pc, #512]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f0      	bne.n	8008fc2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0308 	and.w	r3, r3, #8
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d036      	beq.n	800905a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	695b      	ldr	r3, [r3, #20]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d019      	beq.n	8009028 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ff4:	4b78      	ldr	r3, [pc, #480]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ff8:	4a77      	ldr	r2, [pc, #476]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8008ffa:	f043 0301 	orr.w	r3, r3, #1
 8008ffe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009000:	f7fa fd94 	bl	8003b2c <HAL_GetTick>
 8009004:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009006:	e008      	b.n	800901a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009008:	f7fa fd90 	bl	8003b2c <HAL_GetTick>
 800900c:	4602      	mov	r2, r0
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	2b02      	cmp	r3, #2
 8009014:	d901      	bls.n	800901a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8009016:	2303      	movs	r3, #3
 8009018:	e1e7      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800901a:	4b6f      	ldr	r3, [pc, #444]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 800901c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0f0      	beq.n	8009008 <HAL_RCC_OscConfig+0x360>
 8009026:	e018      	b.n	800905a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009028:	4b6b      	ldr	r3, [pc, #428]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 800902a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800902c:	4a6a      	ldr	r2, [pc, #424]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 800902e:	f023 0301 	bic.w	r3, r3, #1
 8009032:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009034:	f7fa fd7a 	bl	8003b2c <HAL_GetTick>
 8009038:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800903c:	f7fa fd76 	bl	8003b2c <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e1cd      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800904e:	4b62      	ldr	r3, [pc, #392]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1f0      	bne.n	800903c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 0320 	and.w	r3, r3, #32
 8009062:	2b00      	cmp	r3, #0
 8009064:	d036      	beq.n	80090d4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	699b      	ldr	r3, [r3, #24]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d019      	beq.n	80090a2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800906e:	4b5a      	ldr	r3, [pc, #360]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a59      	ldr	r2, [pc, #356]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009074:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009078:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800907a:	f7fa fd57 	bl	8003b2c <HAL_GetTick>
 800907e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009080:	e008      	b.n	8009094 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009082:	f7fa fd53 	bl	8003b2c <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b02      	cmp	r3, #2
 800908e:	d901      	bls.n	8009094 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e1aa      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009094:	4b50      	ldr	r3, [pc, #320]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d0f0      	beq.n	8009082 <HAL_RCC_OscConfig+0x3da>
 80090a0:	e018      	b.n	80090d4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80090a2:	4b4d      	ldr	r3, [pc, #308]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a4c      	ldr	r2, [pc, #304]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 80090a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80090ae:	f7fa fd3d 	bl	8003b2c <HAL_GetTick>
 80090b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090b4:	e008      	b.n	80090c8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80090b6:	f7fa fd39 	bl	8003b2c <HAL_GetTick>
 80090ba:	4602      	mov	r2, r0
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d901      	bls.n	80090c8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e190      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090c8:	4b43      	ldr	r3, [pc, #268]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d1f0      	bne.n	80090b6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f003 0304 	and.w	r3, r3, #4
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 8085 	beq.w	80091ec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090e2:	4b3e      	ldr	r3, [pc, #248]	; (80091dc <HAL_RCC_OscConfig+0x534>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a3d      	ldr	r2, [pc, #244]	; (80091dc <HAL_RCC_OscConfig+0x534>)
 80090e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090ee:	f7fa fd1d 	bl	8003b2c <HAL_GetTick>
 80090f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090f4:	e008      	b.n	8009108 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80090f6:	f7fa fd19 	bl	8003b2c <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b64      	cmp	r3, #100	; 0x64
 8009102:	d901      	bls.n	8009108 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e170      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009108:	4b34      	ldr	r3, [pc, #208]	; (80091dc <HAL_RCC_OscConfig+0x534>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0f0      	beq.n	80090f6 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d106      	bne.n	800912a <HAL_RCC_OscConfig+0x482>
 800911c:	4b2e      	ldr	r3, [pc, #184]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 800911e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009120:	4a2d      	ldr	r2, [pc, #180]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	6713      	str	r3, [r2, #112]	; 0x70
 8009128:	e02d      	b.n	8009186 <HAL_RCC_OscConfig+0x4de>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10c      	bne.n	800914c <HAL_RCC_OscConfig+0x4a4>
 8009132:	4b29      	ldr	r3, [pc, #164]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009136:	4a28      	ldr	r2, [pc, #160]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	6713      	str	r3, [r2, #112]	; 0x70
 800913e:	4b26      	ldr	r3, [pc, #152]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009142:	4a25      	ldr	r2, [pc, #148]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009144:	f023 0304 	bic.w	r3, r3, #4
 8009148:	6713      	str	r3, [r2, #112]	; 0x70
 800914a:	e01c      	b.n	8009186 <HAL_RCC_OscConfig+0x4de>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	2b05      	cmp	r3, #5
 8009152:	d10c      	bne.n	800916e <HAL_RCC_OscConfig+0x4c6>
 8009154:	4b20      	ldr	r3, [pc, #128]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009158:	4a1f      	ldr	r2, [pc, #124]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 800915a:	f043 0304 	orr.w	r3, r3, #4
 800915e:	6713      	str	r3, [r2, #112]	; 0x70
 8009160:	4b1d      	ldr	r3, [pc, #116]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009164:	4a1c      	ldr	r2, [pc, #112]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009166:	f043 0301 	orr.w	r3, r3, #1
 800916a:	6713      	str	r3, [r2, #112]	; 0x70
 800916c:	e00b      	b.n	8009186 <HAL_RCC_OscConfig+0x4de>
 800916e:	4b1a      	ldr	r3, [pc, #104]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	4a19      	ldr	r2, [pc, #100]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009174:	f023 0301 	bic.w	r3, r3, #1
 8009178:	6713      	str	r3, [r2, #112]	; 0x70
 800917a:	4b17      	ldr	r3, [pc, #92]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 800917c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917e:	4a16      	ldr	r2, [pc, #88]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 8009180:	f023 0304 	bic.w	r3, r3, #4
 8009184:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d015      	beq.n	80091ba <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800918e:	f7fa fccd 	bl	8003b2c <HAL_GetTick>
 8009192:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009194:	e00a      	b.n	80091ac <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009196:	f7fa fcc9 	bl	8003b2c <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e11e      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <HAL_RCC_OscConfig+0x530>)
 80091ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0ee      	beq.n	8009196 <HAL_RCC_OscConfig+0x4ee>
 80091b8:	e018      	b.n	80091ec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ba:	f7fa fcb7 	bl	8003b2c <HAL_GetTick>
 80091be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091c0:	e00e      	b.n	80091e0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091c2:	f7fa fcb3 	bl	8003b2c <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d905      	bls.n	80091e0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e108      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
 80091d8:	58024400 	.word	0x58024400
 80091dc:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091e0:	4b84      	ldr	r3, [pc, #528]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80091e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d1ea      	bne.n	80091c2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 80f9 	beq.w	80093e8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80091f6:	4b7f      	ldr	r3, [pc, #508]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091fe:	2b18      	cmp	r3, #24
 8009200:	f000 80b4 	beq.w	800936c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b02      	cmp	r3, #2
 800920a:	f040 8095 	bne.w	8009338 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800920e:	4b79      	ldr	r3, [pc, #484]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a78      	ldr	r2, [pc, #480]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800921a:	f7fa fc87 	bl	8003b2c <HAL_GetTick>
 800921e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009220:	e008      	b.n	8009234 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009222:	f7fa fc83 	bl	8003b2c <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e0da      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009234:	4b6f      	ldr	r3, [pc, #444]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f0      	bne.n	8009222 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009240:	4b6c      	ldr	r3, [pc, #432]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009242:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009244:	4b6c      	ldr	r3, [pc, #432]	; (80093f8 <HAL_RCC_OscConfig+0x750>)
 8009246:	4013      	ands	r3, r2
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009250:	0112      	lsls	r2, r2, #4
 8009252:	430a      	orrs	r2, r1
 8009254:	4967      	ldr	r1, [pc, #412]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009256:	4313      	orrs	r3, r2
 8009258:	628b      	str	r3, [r1, #40]	; 0x28
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925e:	3b01      	subs	r3, #1
 8009260:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	3b01      	subs	r3, #1
 800926a:	025b      	lsls	r3, r3, #9
 800926c:	b29b      	uxth	r3, r3
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	3b01      	subs	r3, #1
 8009276:	041b      	lsls	r3, r3, #16
 8009278:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800927c:	431a      	orrs	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009282:	3b01      	subs	r3, #1
 8009284:	061b      	lsls	r3, r3, #24
 8009286:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800928a:	495a      	ldr	r1, [pc, #360]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 800928c:	4313      	orrs	r3, r2
 800928e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009290:	4b58      	ldr	r3, [pc, #352]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009294:	4a57      	ldr	r2, [pc, #348]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009296:	f023 0301 	bic.w	r3, r3, #1
 800929a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800929c:	4b55      	ldr	r3, [pc, #340]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 800929e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092a0:	4b56      	ldr	r3, [pc, #344]	; (80093fc <HAL_RCC_OscConfig+0x754>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80092a8:	00d2      	lsls	r2, r2, #3
 80092aa:	4952      	ldr	r1, [pc, #328]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80092b0:	4b50      	ldr	r3, [pc, #320]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b4:	f023 020c 	bic.w	r2, r3, #12
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092bc:	494d      	ldr	r1, [pc, #308]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80092c2:	4b4c      	ldr	r3, [pc, #304]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c6:	f023 0202 	bic.w	r2, r3, #2
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ce:	4949      	ldr	r1, [pc, #292]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092d4:	4b47      	ldr	r3, [pc, #284]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d8:	4a46      	ldr	r2, [pc, #280]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e0:	4b44      	ldr	r3, [pc, #272]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	4a43      	ldr	r2, [pc, #268]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092ec:	4b41      	ldr	r3, [pc, #260]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4a40      	ldr	r2, [pc, #256]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80092f8:	4b3e      	ldr	r3, [pc, #248]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	4a3d      	ldr	r2, [pc, #244]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 80092fe:	f043 0301 	orr.w	r3, r3, #1
 8009302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009304:	4b3b      	ldr	r3, [pc, #236]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a3a      	ldr	r2, [pc, #232]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 800930a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800930e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009310:	f7fa fc0c 	bl	8003b2c <HAL_GetTick>
 8009314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009316:	e008      	b.n	800932a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009318:	f7fa fc08 	bl	8003b2c <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e05f      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800932a:	4b32      	ldr	r3, [pc, #200]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0f0      	beq.n	8009318 <HAL_RCC_OscConfig+0x670>
 8009336:	e057      	b.n	80093e8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009338:	4b2e      	ldr	r3, [pc, #184]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a2d      	ldr	r2, [pc, #180]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 800933e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009344:	f7fa fbf2 	bl	8003b2c <HAL_GetTick>
 8009348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800934a:	e008      	b.n	800935e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800934c:	f7fa fbee 	bl	8003b2c <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d901      	bls.n	800935e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e045      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800935e:	4b25      	ldr	r3, [pc, #148]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f0      	bne.n	800934c <HAL_RCC_OscConfig+0x6a4>
 800936a:	e03d      	b.n	80093e8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800936c:	4b21      	ldr	r3, [pc, #132]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 800936e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009370:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009372:	4b20      	ldr	r3, [pc, #128]	; (80093f4 <HAL_RCC_OscConfig+0x74c>)
 8009374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009376:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	2b01      	cmp	r3, #1
 800937e:	d031      	beq.n	80093e4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f003 0203 	and.w	r2, r3, #3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800938a:	429a      	cmp	r2, r3
 800938c:	d12a      	bne.n	80093e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	091b      	lsrs	r3, r3, #4
 8009392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800939a:	429a      	cmp	r2, r3
 800939c:	d122      	bne.n	80093e4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d11a      	bne.n	80093e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	0a5b      	lsrs	r3, r3, #9
 80093b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093bc:	429a      	cmp	r2, r3
 80093be:	d111      	bne.n	80093e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	0c1b      	lsrs	r3, r3, #16
 80093c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d108      	bne.n	80093e4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	0e1b      	lsrs	r3, r3, #24
 80093d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d001      	beq.n	80093e8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	e000      	b.n	80093ea <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3730      	adds	r7, #48	; 0x30
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	58024400 	.word	0x58024400
 80093f8:	fffffc0c 	.word	0xfffffc0c
 80093fc:	ffff0007 	.word	0xffff0007

08009400 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e19c      	b.n	800974e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009414:	4b8a      	ldr	r3, [pc, #552]	; (8009640 <HAL_RCC_ClockConfig+0x240>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f003 030f 	and.w	r3, r3, #15
 800941c:	683a      	ldr	r2, [r7, #0]
 800941e:	429a      	cmp	r2, r3
 8009420:	d910      	bls.n	8009444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009422:	4b87      	ldr	r3, [pc, #540]	; (8009640 <HAL_RCC_ClockConfig+0x240>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f023 020f 	bic.w	r2, r3, #15
 800942a:	4985      	ldr	r1, [pc, #532]	; (8009640 <HAL_RCC_ClockConfig+0x240>)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	4313      	orrs	r3, r2
 8009430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009432:	4b83      	ldr	r3, [pc, #524]	; (8009640 <HAL_RCC_ClockConfig+0x240>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 030f 	and.w	r3, r3, #15
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	429a      	cmp	r2, r3
 800943e:	d001      	beq.n	8009444 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e184      	b.n	800974e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0304 	and.w	r3, r3, #4
 800944c:	2b00      	cmp	r3, #0
 800944e:	d010      	beq.n	8009472 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	4b7b      	ldr	r3, [pc, #492]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800945c:	429a      	cmp	r2, r3
 800945e:	d908      	bls.n	8009472 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009460:	4b78      	ldr	r3, [pc, #480]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009462:	699b      	ldr	r3, [r3, #24]
 8009464:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	4975      	ldr	r1, [pc, #468]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 800946e:	4313      	orrs	r3, r2
 8009470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0308 	and.w	r3, r3, #8
 800947a:	2b00      	cmp	r3, #0
 800947c:	d010      	beq.n	80094a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	4b70      	ldr	r3, [pc, #448]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800948a:	429a      	cmp	r2, r3
 800948c:	d908      	bls.n	80094a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800948e:	4b6d      	ldr	r3, [pc, #436]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009490:	69db      	ldr	r3, [r3, #28]
 8009492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	496a      	ldr	r1, [pc, #424]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 800949c:	4313      	orrs	r3, r2
 800949e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f003 0310 	and.w	r3, r3, #16
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d010      	beq.n	80094ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	699a      	ldr	r2, [r3, #24]
 80094b0:	4b64      	ldr	r3, [pc, #400]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80094b2:	69db      	ldr	r3, [r3, #28]
 80094b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d908      	bls.n	80094ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094bc:	4b61      	ldr	r3, [pc, #388]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80094be:	69db      	ldr	r3, [r3, #28]
 80094c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	495e      	ldr	r1, [pc, #376]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d010      	beq.n	80094fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	69da      	ldr	r2, [r3, #28]
 80094de:	4b59      	ldr	r3, [pc, #356]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d908      	bls.n	80094fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80094ea:	4b56      	ldr	r3, [pc, #344]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	4953      	ldr	r1, [pc, #332]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80094f8:	4313      	orrs	r3, r2
 80094fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0302 	and.w	r3, r3, #2
 8009504:	2b00      	cmp	r3, #0
 8009506:	d010      	beq.n	800952a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68da      	ldr	r2, [r3, #12]
 800950c:	4b4d      	ldr	r3, [pc, #308]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	f003 030f 	and.w	r3, r3, #15
 8009514:	429a      	cmp	r2, r3
 8009516:	d908      	bls.n	800952a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009518:	4b4a      	ldr	r3, [pc, #296]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	f023 020f 	bic.w	r2, r3, #15
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	68db      	ldr	r3, [r3, #12]
 8009524:	4947      	ldr	r1, [pc, #284]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009526:	4313      	orrs	r3, r2
 8009528:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f003 0301 	and.w	r3, r3, #1
 8009532:	2b00      	cmp	r3, #0
 8009534:	d055      	beq.n	80095e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009536:	4b43      	ldr	r3, [pc, #268]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009538:	699b      	ldr	r3, [r3, #24]
 800953a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	4940      	ldr	r1, [pc, #256]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009544:	4313      	orrs	r3, r2
 8009546:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	2b02      	cmp	r3, #2
 800954e:	d107      	bne.n	8009560 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009550:	4b3c      	ldr	r3, [pc, #240]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009558:	2b00      	cmp	r3, #0
 800955a:	d121      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e0f6      	b.n	800974e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	2b03      	cmp	r3, #3
 8009566:	d107      	bne.n	8009578 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009568:	4b36      	ldr	r3, [pc, #216]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d115      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	e0ea      	b.n	800974e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d107      	bne.n	8009590 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009580:	4b30      	ldr	r3, [pc, #192]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009588:	2b00      	cmp	r3, #0
 800958a:	d109      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e0de      	b.n	800974e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009590:	4b2c      	ldr	r3, [pc, #176]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e0d6      	b.n	800974e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095a0:	4b28      	ldr	r3, [pc, #160]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	f023 0207 	bic.w	r2, r3, #7
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	4925      	ldr	r1, [pc, #148]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095b2:	f7fa fabb 	bl	8003b2c <HAL_GetTick>
 80095b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095b8:	e00a      	b.n	80095d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ba:	f7fa fab7 	bl	8003b2c <HAL_GetTick>
 80095be:	4602      	mov	r2, r0
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	1ad3      	subs	r3, r2, r3
 80095c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d901      	bls.n	80095d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e0be      	b.n	800974e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095d0:	4b1c      	ldr	r3, [pc, #112]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80095d2:	691b      	ldr	r3, [r3, #16]
 80095d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	429a      	cmp	r2, r3
 80095e0:	d1eb      	bne.n	80095ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d010      	beq.n	8009610 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	4b14      	ldr	r3, [pc, #80]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	f003 030f 	and.w	r3, r3, #15
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d208      	bcs.n	8009610 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095fe:	4b11      	ldr	r3, [pc, #68]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	f023 020f 	bic.w	r2, r3, #15
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	68db      	ldr	r3, [r3, #12]
 800960a:	490e      	ldr	r1, [pc, #56]	; (8009644 <HAL_RCC_ClockConfig+0x244>)
 800960c:	4313      	orrs	r3, r2
 800960e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009610:	4b0b      	ldr	r3, [pc, #44]	; (8009640 <HAL_RCC_ClockConfig+0x240>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 030f 	and.w	r3, r3, #15
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	429a      	cmp	r2, r3
 800961c:	d214      	bcs.n	8009648 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800961e:	4b08      	ldr	r3, [pc, #32]	; (8009640 <HAL_RCC_ClockConfig+0x240>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f023 020f 	bic.w	r2, r3, #15
 8009626:	4906      	ldr	r1, [pc, #24]	; (8009640 <HAL_RCC_ClockConfig+0x240>)
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	4313      	orrs	r3, r2
 800962c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800962e:	4b04      	ldr	r3, [pc, #16]	; (8009640 <HAL_RCC_ClockConfig+0x240>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 030f 	and.w	r3, r3, #15
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d005      	beq.n	8009648 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e086      	b.n	800974e <HAL_RCC_ClockConfig+0x34e>
 8009640:	52002000 	.word	0x52002000
 8009644:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0304 	and.w	r3, r3, #4
 8009650:	2b00      	cmp	r3, #0
 8009652:	d010      	beq.n	8009676 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	4b3f      	ldr	r3, [pc, #252]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009660:	429a      	cmp	r2, r3
 8009662:	d208      	bcs.n	8009676 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009664:	4b3c      	ldr	r3, [pc, #240]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	4939      	ldr	r1, [pc, #228]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 8009672:	4313      	orrs	r3, r2
 8009674:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b00      	cmp	r3, #0
 8009680:	d010      	beq.n	80096a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695a      	ldr	r2, [r3, #20]
 8009686:	4b34      	ldr	r3, [pc, #208]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800968e:	429a      	cmp	r2, r3
 8009690:	d208      	bcs.n	80096a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009692:	4b31      	ldr	r3, [pc, #196]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	492e      	ldr	r1, [pc, #184]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0310 	and.w	r3, r3, #16
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d010      	beq.n	80096d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	4b28      	ldr	r3, [pc, #160]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096bc:	429a      	cmp	r2, r3
 80096be:	d208      	bcs.n	80096d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096c0:	4b25      	ldr	r3, [pc, #148]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 80096c2:	69db      	ldr	r3, [r3, #28]
 80096c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	4922      	ldr	r1, [pc, #136]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 80096ce:	4313      	orrs	r3, r2
 80096d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0320 	and.w	r3, r3, #32
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d010      	beq.n	8009700 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	69da      	ldr	r2, [r3, #28]
 80096e2:	4b1d      	ldr	r3, [pc, #116]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d208      	bcs.n	8009700 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80096ee:	4b1a      	ldr	r3, [pc, #104]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	69db      	ldr	r3, [r3, #28]
 80096fa:	4917      	ldr	r1, [pc, #92]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 80096fc:	4313      	orrs	r3, r2
 80096fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009700:	f000 f834 	bl	800976c <HAL_RCC_GetSysClockFreq>
 8009704:	4602      	mov	r2, r0
 8009706:	4b14      	ldr	r3, [pc, #80]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 8009708:	699b      	ldr	r3, [r3, #24]
 800970a:	0a1b      	lsrs	r3, r3, #8
 800970c:	f003 030f 	and.w	r3, r3, #15
 8009710:	4912      	ldr	r1, [pc, #72]	; (800975c <HAL_RCC_ClockConfig+0x35c>)
 8009712:	5ccb      	ldrb	r3, [r1, r3]
 8009714:	f003 031f 	and.w	r3, r3, #31
 8009718:	fa22 f303 	lsr.w	r3, r2, r3
 800971c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800971e:	4b0e      	ldr	r3, [pc, #56]	; (8009758 <HAL_RCC_ClockConfig+0x358>)
 8009720:	699b      	ldr	r3, [r3, #24]
 8009722:	f003 030f 	and.w	r3, r3, #15
 8009726:	4a0d      	ldr	r2, [pc, #52]	; (800975c <HAL_RCC_ClockConfig+0x35c>)
 8009728:	5cd3      	ldrb	r3, [r2, r3]
 800972a:	f003 031f 	and.w	r3, r3, #31
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	fa22 f303 	lsr.w	r3, r2, r3
 8009734:	4a0a      	ldr	r2, [pc, #40]	; (8009760 <HAL_RCC_ClockConfig+0x360>)
 8009736:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009738:	4a0a      	ldr	r2, [pc, #40]	; (8009764 <HAL_RCC_ClockConfig+0x364>)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800973e:	4b0a      	ldr	r3, [pc, #40]	; (8009768 <HAL_RCC_ClockConfig+0x368>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4618      	mov	r0, r3
 8009744:	f7fa f9a8 	bl	8003a98 <HAL_InitTick>
 8009748:	4603      	mov	r3, r0
 800974a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800974c:	7bfb      	ldrb	r3, [r7, #15]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	58024400 	.word	0x58024400
 800975c:	08011404 	.word	0x08011404
 8009760:	20000004 	.word	0x20000004
 8009764:	20000000 	.word	0x20000000
 8009768:	20000008 	.word	0x20000008

0800976c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800976c:	b480      	push	{r7}
 800976e:	b089      	sub	sp, #36	; 0x24
 8009770:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009772:	4bb3      	ldr	r3, [pc, #716]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009774:	691b      	ldr	r3, [r3, #16]
 8009776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800977a:	2b18      	cmp	r3, #24
 800977c:	f200 8155 	bhi.w	8009a2a <HAL_RCC_GetSysClockFreq+0x2be>
 8009780:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009786:	bf00      	nop
 8009788:	080097ed 	.word	0x080097ed
 800978c:	08009a2b 	.word	0x08009a2b
 8009790:	08009a2b 	.word	0x08009a2b
 8009794:	08009a2b 	.word	0x08009a2b
 8009798:	08009a2b 	.word	0x08009a2b
 800979c:	08009a2b 	.word	0x08009a2b
 80097a0:	08009a2b 	.word	0x08009a2b
 80097a4:	08009a2b 	.word	0x08009a2b
 80097a8:	08009813 	.word	0x08009813
 80097ac:	08009a2b 	.word	0x08009a2b
 80097b0:	08009a2b 	.word	0x08009a2b
 80097b4:	08009a2b 	.word	0x08009a2b
 80097b8:	08009a2b 	.word	0x08009a2b
 80097bc:	08009a2b 	.word	0x08009a2b
 80097c0:	08009a2b 	.word	0x08009a2b
 80097c4:	08009a2b 	.word	0x08009a2b
 80097c8:	08009819 	.word	0x08009819
 80097cc:	08009a2b 	.word	0x08009a2b
 80097d0:	08009a2b 	.word	0x08009a2b
 80097d4:	08009a2b 	.word	0x08009a2b
 80097d8:	08009a2b 	.word	0x08009a2b
 80097dc:	08009a2b 	.word	0x08009a2b
 80097e0:	08009a2b 	.word	0x08009a2b
 80097e4:	08009a2b 	.word	0x08009a2b
 80097e8:	0800981f 	.word	0x0800981f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097ec:	4b94      	ldr	r3, [pc, #592]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d009      	beq.n	800980c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097f8:	4b91      	ldr	r3, [pc, #580]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	08db      	lsrs	r3, r3, #3
 80097fe:	f003 0303 	and.w	r3, r3, #3
 8009802:	4a90      	ldr	r2, [pc, #576]	; (8009a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009804:	fa22 f303 	lsr.w	r3, r2, r3
 8009808:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800980a:	e111      	b.n	8009a30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800980c:	4b8d      	ldr	r3, [pc, #564]	; (8009a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800980e:	61bb      	str	r3, [r7, #24]
    break;
 8009810:	e10e      	b.n	8009a30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009812:	4b8d      	ldr	r3, [pc, #564]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009814:	61bb      	str	r3, [r7, #24]
    break;
 8009816:	e10b      	b.n	8009a30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009818:	4b8c      	ldr	r3, [pc, #560]	; (8009a4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800981a:	61bb      	str	r3, [r7, #24]
    break;
 800981c:	e108      	b.n	8009a30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800981e:	4b88      	ldr	r3, [pc, #544]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009828:	4b85      	ldr	r3, [pc, #532]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800982a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982c:	091b      	lsrs	r3, r3, #4
 800982e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009832:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009834:	4b82      	ldr	r3, [pc, #520]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800983e:	4b80      	ldr	r3, [pc, #512]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009842:	08db      	lsrs	r3, r3, #3
 8009844:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	fb02 f303 	mul.w	r3, r2, r3
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009856:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 80e1 	beq.w	8009a24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b02      	cmp	r3, #2
 8009866:	f000 8083 	beq.w	8009970 <HAL_RCC_GetSysClockFreq+0x204>
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b02      	cmp	r3, #2
 800986e:	f200 80a1 	bhi.w	80099b4 <HAL_RCC_GetSysClockFreq+0x248>
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_RCC_GetSysClockFreq+0x114>
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d056      	beq.n	800992c <HAL_RCC_GetSysClockFreq+0x1c0>
 800987e:	e099      	b.n	80099b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009880:	4b6f      	ldr	r3, [pc, #444]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f003 0320 	and.w	r3, r3, #32
 8009888:	2b00      	cmp	r3, #0
 800988a:	d02d      	beq.n	80098e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800988c:	4b6c      	ldr	r3, [pc, #432]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	08db      	lsrs	r3, r3, #3
 8009892:	f003 0303 	and.w	r3, r3, #3
 8009896:	4a6b      	ldr	r2, [pc, #428]	; (8009a44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009898:	fa22 f303 	lsr.w	r3, r2, r3
 800989c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	ee07 3a90 	vmov	s15, r3
 80098a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	ee07 3a90 	vmov	s15, r3
 80098ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b6:	4b62      	ldr	r3, [pc, #392]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80098e6:	e087      	b.n	80099f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a54 <HAL_RCC_GetSysClockFreq+0x2e8>
 80098f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fa:	4b51      	ldr	r3, [pc, #324]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990a:	ed97 6a02 	vldr	s12, [r7, #8]
 800990e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800991e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800992a:	e065      	b.n	80099f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	ee07 3a90 	vmov	s15, r3
 8009932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009936:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a58 <HAL_RCC_GetSysClockFreq+0x2ec>
 800993a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800993e:	4b40      	ldr	r3, [pc, #256]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009946:	ee07 3a90 	vmov	s15, r3
 800994a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800994e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009952:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800995a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800995e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800996a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800996e:	e043      	b.n	80099f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	ee07 3a90 	vmov	s15, r3
 8009976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800997a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a5c <HAL_RCC_GetSysClockFreq+0x2f0>
 800997e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009982:	4b2f      	ldr	r3, [pc, #188]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800998a:	ee07 3a90 	vmov	s15, r3
 800998e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009992:	ed97 6a02 	vldr	s12, [r7, #8]
 8009996:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 800999a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800999e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099b2:	e021      	b.n	80099f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	ee07 3a90 	vmov	s15, r3
 80099ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a58 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099c6:	4b1e      	ldr	r3, [pc, #120]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ce:	ee07 3a90 	vmov	s15, r3
 80099d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a50 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80099f8:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	0a5b      	lsrs	r3, r3, #9
 80099fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a02:	3301      	adds	r3, #1
 8009a04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	ee07 3a90 	vmov	s15, r3
 8009a0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a10:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a1c:	ee17 3a90 	vmov	r3, s15
 8009a20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009a22:	e005      	b.n	8009a30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61bb      	str	r3, [r7, #24]
    break;
 8009a28:	e002      	b.n	8009a30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009a2a:	4b07      	ldr	r3, [pc, #28]	; (8009a48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a2c:	61bb      	str	r3, [r7, #24]
    break;
 8009a2e:	bf00      	nop
  }

  return sysclockfreq;
 8009a30:	69bb      	ldr	r3, [r7, #24]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3724      	adds	r7, #36	; 0x24
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop
 8009a40:	58024400 	.word	0x58024400
 8009a44:	03d09000 	.word	0x03d09000
 8009a48:	003d0900 	.word	0x003d0900
 8009a4c:	017d7840 	.word	0x017d7840
 8009a50:	46000000 	.word	0x46000000
 8009a54:	4c742400 	.word	0x4c742400
 8009a58:	4a742400 	.word	0x4a742400
 8009a5c:	4bbebc20 	.word	0x4bbebc20

08009a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a66:	f7ff fe81 	bl	800976c <HAL_RCC_GetSysClockFreq>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	4b10      	ldr	r3, [pc, #64]	; (8009ab0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	0a1b      	lsrs	r3, r3, #8
 8009a72:	f003 030f 	and.w	r3, r3, #15
 8009a76:	490f      	ldr	r1, [pc, #60]	; (8009ab4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a78:	5ccb      	ldrb	r3, [r1, r3]
 8009a7a:	f003 031f 	and.w	r3, r3, #31
 8009a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a84:	4b0a      	ldr	r3, [pc, #40]	; (8009ab0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	f003 030f 	and.w	r3, r3, #15
 8009a8c:	4a09      	ldr	r2, [pc, #36]	; (8009ab4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a8e:	5cd3      	ldrb	r3, [r2, r3]
 8009a90:	f003 031f 	and.w	r3, r3, #31
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	fa22 f303 	lsr.w	r3, r2, r3
 8009a9a:	4a07      	ldr	r2, [pc, #28]	; (8009ab8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a9e:	4a07      	ldr	r2, [pc, #28]	; (8009abc <HAL_RCC_GetHCLKFreq+0x5c>)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009aa4:	4b04      	ldr	r3, [pc, #16]	; (8009ab8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	58024400 	.word	0x58024400
 8009ab4:	08011404 	.word	0x08011404
 8009ab8:	20000004 	.word	0x20000004
 8009abc:	20000000 	.word	0x20000000

08009ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ac4:	f7ff ffcc 	bl	8009a60 <HAL_RCC_GetHCLKFreq>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	4b06      	ldr	r3, [pc, #24]	; (8009ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	091b      	lsrs	r3, r3, #4
 8009ad0:	f003 0307 	and.w	r3, r3, #7
 8009ad4:	4904      	ldr	r1, [pc, #16]	; (8009ae8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ad6:	5ccb      	ldrb	r3, [r1, r3]
 8009ad8:	f003 031f 	and.w	r3, r3, #31
 8009adc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	58024400 	.word	0x58024400
 8009ae8:	08011404 	.word	0x08011404

08009aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009af0:	f7ff ffb6 	bl	8009a60 <HAL_RCC_GetHCLKFreq>
 8009af4:	4602      	mov	r2, r0
 8009af6:	4b06      	ldr	r3, [pc, #24]	; (8009b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009af8:	69db      	ldr	r3, [r3, #28]
 8009afa:	0a1b      	lsrs	r3, r3, #8
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	4904      	ldr	r1, [pc, #16]	; (8009b14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b02:	5ccb      	ldrb	r3, [r1, r3]
 8009b04:	f003 031f 	and.w	r3, r3, #31
 8009b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	58024400 	.word	0x58024400
 8009b14:	08011404 	.word	0x08011404

08009b18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b086      	sub	sp, #24
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b20:	2300      	movs	r3, #0
 8009b22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b24:	2300      	movs	r3, #0
 8009b26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d03f      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b3c:	d02a      	beq.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009b3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b42:	d824      	bhi.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b48:	d018      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b4e:	d81e      	bhi.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d003      	beq.n	8009b5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b58:	d007      	beq.n	8009b6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009b5a:	e018      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b5c:	4bab      	ldr	r3, [pc, #684]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b60:	4aaa      	ldr	r2, [pc, #680]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b68:	e015      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	2102      	movs	r1, #2
 8009b70:	4618      	mov	r0, r3
 8009b72:	f001 feff 	bl	800b974 <RCCEx_PLL2_Config>
 8009b76:	4603      	mov	r3, r0
 8009b78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b7a:	e00c      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	3324      	adds	r3, #36	; 0x24
 8009b80:	2102      	movs	r1, #2
 8009b82:	4618      	mov	r0, r3
 8009b84:	f001 ffa8 	bl	800bad8 <RCCEx_PLL3_Config>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b8c:	e003      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	75fb      	strb	r3, [r7, #23]
      break;
 8009b92:	e000      	b.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b96:	7dfb      	ldrb	r3, [r7, #23]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d109      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b9c:	4b9b      	ldr	r3, [pc, #620]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ba0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ba8:	4998      	ldr	r1, [pc, #608]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009baa:	4313      	orrs	r3, r2
 8009bac:	650b      	str	r3, [r1, #80]	; 0x50
 8009bae:	e001      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
 8009bb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d03d      	beq.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bc4:	2b04      	cmp	r3, #4
 8009bc6:	d826      	bhi.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009bc8:	a201      	add	r2, pc, #4	; (adr r2, 8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bce:	bf00      	nop
 8009bd0:	08009be5 	.word	0x08009be5
 8009bd4:	08009bf3 	.word	0x08009bf3
 8009bd8:	08009c05 	.word	0x08009c05
 8009bdc:	08009c1d 	.word	0x08009c1d
 8009be0:	08009c1d 	.word	0x08009c1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009be4:	4b89      	ldr	r3, [pc, #548]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be8:	4a88      	ldr	r2, [pc, #544]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bf0:	e015      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3304      	adds	r3, #4
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f001 febb 	bl	800b974 <RCCEx_PLL2_Config>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c02:	e00c      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3324      	adds	r3, #36	; 0x24
 8009c08:	2100      	movs	r1, #0
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f001 ff64 	bl	800bad8 <RCCEx_PLL3_Config>
 8009c10:	4603      	mov	r3, r0
 8009c12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c14:	e003      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c16:	2301      	movs	r3, #1
 8009c18:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1a:	e000      	b.n	8009c1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009c1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d109      	bne.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c24:	4b79      	ldr	r3, [pc, #484]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c28:	f023 0207 	bic.w	r2, r3, #7
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c30:	4976      	ldr	r1, [pc, #472]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c32:	4313      	orrs	r3, r2
 8009c34:	650b      	str	r3, [r1, #80]	; 0x50
 8009c36:	e001      	b.n	8009c3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c38:	7dfb      	ldrb	r3, [r7, #23]
 8009c3a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d051      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c4e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c52:	d036      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009c54:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c58:	d830      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c5e:	d032      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009c60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c64:	d82a      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c6a:	d02e      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009c6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c70:	d824      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c76:	d018      	beq.n	8009caa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c7c:	d81e      	bhi.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d003      	beq.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c86:	d007      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009c88:	e018      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c8a:	4b60      	ldr	r3, [pc, #384]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	4a5f      	ldr	r2, [pc, #380]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c96:	e019      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f001 fe68 	bl	800b974 <RCCEx_PLL2_Config>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009ca8:	e010      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3324      	adds	r3, #36	; 0x24
 8009cae:	2100      	movs	r1, #0
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 ff11 	bl	800bad8 <RCCEx_PLL3_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cba:	e007      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8009cc0:	e004      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009cc2:	bf00      	nop
 8009cc4:	e002      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009cc6:	bf00      	nop
 8009cc8:	e000      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d10a      	bne.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009cd2:	4b4e      	ldr	r3, [pc, #312]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ce0:	494a      	ldr	r1, [pc, #296]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	658b      	str	r3, [r1, #88]	; 0x58
 8009ce6:	e001      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d051      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009cfe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d02:	d036      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009d04:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d08:	d830      	bhi.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d0e:	d032      	beq.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009d10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d14:	d82a      	bhi.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d1a:	d02e      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009d1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d20:	d824      	bhi.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d26:	d018      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d2c:	d81e      	bhi.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d003      	beq.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009d32:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d36:	d007      	beq.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009d38:	e018      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d3a:	4b34      	ldr	r3, [pc, #208]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3e:	4a33      	ldr	r2, [pc, #204]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d46:	e019      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 fe10 	bl	800b974 <RCCEx_PLL2_Config>
 8009d54:	4603      	mov	r3, r0
 8009d56:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d58:	e010      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3324      	adds	r3, #36	; 0x24
 8009d5e:	2100      	movs	r1, #0
 8009d60:	4618      	mov	r0, r3
 8009d62:	f001 feb9 	bl	800bad8 <RCCEx_PLL3_Config>
 8009d66:	4603      	mov	r3, r0
 8009d68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d6a:	e007      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d70:	e004      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009d72:	bf00      	nop
 8009d74:	e002      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009d76:	bf00      	nop
 8009d78:	e000      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009d82:	4b22      	ldr	r3, [pc, #136]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d86:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d90:	491e      	ldr	r1, [pc, #120]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d92:	4313      	orrs	r3, r2
 8009d94:	658b      	str	r3, [r1, #88]	; 0x58
 8009d96:	e001      	b.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
 8009d9a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d035      	beq.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dac:	2b30      	cmp	r3, #48	; 0x30
 8009dae:	d01c      	beq.n	8009dea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009db0:	2b30      	cmp	r3, #48	; 0x30
 8009db2:	d817      	bhi.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009db4:	2b20      	cmp	r3, #32
 8009db6:	d00c      	beq.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009db8:	2b20      	cmp	r3, #32
 8009dba:	d813      	bhi.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d016      	beq.n	8009dee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8009dc0:	2b10      	cmp	r3, #16
 8009dc2:	d10f      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc4:	4b11      	ldr	r3, [pc, #68]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	4a10      	ldr	r2, [pc, #64]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009dd0:	e00e      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	2102      	movs	r1, #2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f001 fdcb 	bl	800b974 <RCCEx_PLL2_Config>
 8009dde:	4603      	mov	r3, r0
 8009de0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009de2:	e005      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	75fb      	strb	r3, [r7, #23]
      break;
 8009de8:	e002      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8009dea:	bf00      	nop
 8009dec:	e000      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8009dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10c      	bne.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009df6:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e02:	4902      	ldr	r1, [pc, #8]	; (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e04:	4313      	orrs	r3, r2
 8009e06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e08:	e004      	b.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009e0a:	bf00      	nop
 8009e0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e10:	7dfb      	ldrb	r3, [r7, #23]
 8009e12:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d047      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e28:	d030      	beq.n	8009e8c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009e2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e2e:	d82a      	bhi.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e34:	d02c      	beq.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009e36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e3a:	d824      	bhi.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e40:	d018      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009e42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e46:	d81e      	bhi.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e50:	d007      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009e52:	e018      	b.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e54:	4bac      	ldr	r3, [pc, #688]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	4aab      	ldr	r2, [pc, #684]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e60:	e017      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	3304      	adds	r3, #4
 8009e66:	2100      	movs	r1, #0
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f001 fd83 	bl	800b974 <RCCEx_PLL2_Config>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e72:	e00e      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	3324      	adds	r3, #36	; 0x24
 8009e78:	2100      	movs	r1, #0
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f001 fe2c 	bl	800bad8 <RCCEx_PLL3_Config>
 8009e80:	4603      	mov	r3, r0
 8009e82:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e84:	e005      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	75fb      	strb	r3, [r7, #23]
      break;
 8009e8a:	e002      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009e8c:	bf00      	nop
 8009e8e:	e000      	b.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e92:	7dfb      	ldrb	r3, [r7, #23]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d109      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009e98:	4b9b      	ldr	r3, [pc, #620]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea4:	4998      	ldr	r1, [pc, #608]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	650b      	str	r3, [r1, #80]	; 0x50
 8009eaa:	e001      	b.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d049      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ec4:	d02e      	beq.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009ec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009eca:	d828      	bhi.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ed0:	d02a      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009ed2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ed6:	d822      	bhi.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ed8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009edc:	d026      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009ede:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ee2:	d81c      	bhi.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ee8:	d010      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eee:	d816      	bhi.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d01d      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef8:	d111      	bne.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	3304      	adds	r3, #4
 8009efe:	2101      	movs	r1, #1
 8009f00:	4618      	mov	r0, r3
 8009f02:	f001 fd37 	bl	800b974 <RCCEx_PLL2_Config>
 8009f06:	4603      	mov	r3, r0
 8009f08:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f0a:	e012      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	3324      	adds	r3, #36	; 0x24
 8009f10:	2101      	movs	r1, #1
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 fde0 	bl	800bad8 <RCCEx_PLL3_Config>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f1c:	e009      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	75fb      	strb	r3, [r7, #23]
      break;
 8009f22:	e006      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f24:	bf00      	nop
 8009f26:	e004      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f28:	bf00      	nop
 8009f2a:	e002      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f2c:	bf00      	nop
 8009f2e:	e000      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d109      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f38:	4b73      	ldr	r3, [pc, #460]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f44:	4970      	ldr	r1, [pc, #448]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	650b      	str	r3, [r1, #80]	; 0x50
 8009f4a:	e001      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d04b      	beq.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f66:	d02e      	beq.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f6c:	d828      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f72:	d02a      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f78:	d822      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f7e:	d026      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009f80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f84:	d81c      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f8a:	d010      	beq.n	8009fae <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f90:	d816      	bhi.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d01d      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009f96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f9a:	d111      	bne.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	3304      	adds	r3, #4
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 fce6 	bl	800b974 <RCCEx_PLL2_Config>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fac:	e012      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	3324      	adds	r3, #36	; 0x24
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f001 fd8f 	bl	800bad8 <RCCEx_PLL3_Config>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fbe:	e009      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc4:	e006      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fc6:	bf00      	nop
 8009fc8:	e004      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fca:	bf00      	nop
 8009fcc:	e002      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fce:	bf00      	nop
 8009fd0:	e000      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009fda:	4b4b      	ldr	r3, [pc, #300]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fde:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fe8:	4947      	ldr	r1, [pc, #284]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009fea:	4313      	orrs	r3, r2
 8009fec:	658b      	str	r3, [r1, #88]	; 0x58
 8009fee:	e001      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
 8009ff2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d02f      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a004:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a008:	d00e      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a00a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a00e:	d814      	bhi.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d015      	beq.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a018:	d10f      	bne.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a01a:	4b3b      	ldr	r3, [pc, #236]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01e:	4a3a      	ldr	r2, [pc, #232]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a026:	e00c      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3304      	adds	r3, #4
 800a02c:	2101      	movs	r1, #1
 800a02e:	4618      	mov	r0, r3
 800a030:	f001 fca0 	bl	800b974 <RCCEx_PLL2_Config>
 800a034:	4603      	mov	r3, r0
 800a036:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a038:	e003      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	75fb      	strb	r3, [r7, #23]
      break;
 800a03e:	e000      	b.n	800a042 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a040:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d109      	bne.n	800a05c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a048:	4b2f      	ldr	r3, [pc, #188]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a04c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a054:	492c      	ldr	r1, [pc, #176]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a056:	4313      	orrs	r3, r2
 800a058:	650b      	str	r3, [r1, #80]	; 0x50
 800a05a:	e001      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a05c:	7dfb      	ldrb	r3, [r7, #23]
 800a05e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d032      	beq.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a070:	2b03      	cmp	r3, #3
 800a072:	d81b      	bhi.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a074:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07a:	bf00      	nop
 800a07c:	0800a0b3 	.word	0x0800a0b3
 800a080:	0800a08d 	.word	0x0800a08d
 800a084:	0800a09b 	.word	0x0800a09b
 800a088:	0800a0b3 	.word	0x0800a0b3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a08c:	4b1e      	ldr	r3, [pc, #120]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a090:	4a1d      	ldr	r2, [pc, #116]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a098:	e00c      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3304      	adds	r3, #4
 800a09e:	2102      	movs	r1, #2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 fc67 	bl	800b974 <RCCEx_PLL2_Config>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0aa:	e003      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a0b0:	e000      	b.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a0b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0b4:	7dfb      	ldrb	r3, [r7, #23]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d109      	bne.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a0ba:	4b13      	ldr	r3, [pc, #76]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0be:	f023 0203 	bic.w	r2, r3, #3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0c6:	4910      	ldr	r1, [pc, #64]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0cc:	e001      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	f000 808a 	beq.w	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0e0:	4b0a      	ldr	r3, [pc, #40]	; (800a10c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a09      	ldr	r2, [pc, #36]	; (800a10c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a0e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0ec:	f7f9 fd1e 	bl	8003b2c <HAL_GetTick>
 800a0f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0f2:	e00d      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0f4:	f7f9 fd1a 	bl	8003b2c <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	2b64      	cmp	r3, #100	; 0x64
 800a100:	d906      	bls.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	75fb      	strb	r3, [r7, #23]
        break;
 800a106:	e009      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a108:	58024400 	.word	0x58024400
 800a10c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a110:	4bb9      	ldr	r3, [pc, #740]	; (800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d0eb      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d166      	bne.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a122:	4bb6      	ldr	r3, [pc, #728]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a12c:	4053      	eors	r3, r2
 800a12e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a132:	2b00      	cmp	r3, #0
 800a134:	d013      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a136:	4bb1      	ldr	r3, [pc, #708]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a13e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a140:	4bae      	ldr	r3, [pc, #696]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a144:	4aad      	ldr	r2, [pc, #692]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a14a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a14c:	4bab      	ldr	r3, [pc, #684]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a150:	4aaa      	ldr	r2, [pc, #680]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a156:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a158:	4aa8      	ldr	r2, [pc, #672]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a168:	d115      	bne.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a16a:	f7f9 fcdf 	bl	8003b2c <HAL_GetTick>
 800a16e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a170:	e00b      	b.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a172:	f7f9 fcdb 	bl	8003b2c <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a180:	4293      	cmp	r3, r2
 800a182:	d902      	bls.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	75fb      	strb	r3, [r7, #23]
            break;
 800a188:	e005      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a18a:	4b9c      	ldr	r3, [pc, #624]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a18c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18e:	f003 0302 	and.w	r3, r3, #2
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0ed      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800a196:	7dfb      	ldrb	r3, [r7, #23]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d126      	bne.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1aa:	d10d      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800a1ac:	4b93      	ldr	r3, [pc, #588]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1ba:	0919      	lsrs	r1, r3, #4
 800a1bc:	4b90      	ldr	r3, [pc, #576]	; (800a400 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a1be:	400b      	ands	r3, r1
 800a1c0:	498e      	ldr	r1, [pc, #568]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	610b      	str	r3, [r1, #16]
 800a1c6:	e005      	b.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800a1c8:	4b8c      	ldr	r3, [pc, #560]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	4a8b      	ldr	r2, [pc, #556]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a1ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1d2:	6113      	str	r3, [r2, #16]
 800a1d4:	4b89      	ldr	r3, [pc, #548]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a1d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1e2:	4986      	ldr	r1, [pc, #536]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	670b      	str	r3, [r1, #112]	; 0x70
 800a1e8:	e004      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	75bb      	strb	r3, [r7, #22]
 800a1ee:	e001      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d07e      	beq.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a204:	2b28      	cmp	r3, #40	; 0x28
 800a206:	d867      	bhi.n	800a2d8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a2df 	.word	0x0800a2df
 800a214:	0800a2d9 	.word	0x0800a2d9
 800a218:	0800a2d9 	.word	0x0800a2d9
 800a21c:	0800a2d9 	.word	0x0800a2d9
 800a220:	0800a2d9 	.word	0x0800a2d9
 800a224:	0800a2d9 	.word	0x0800a2d9
 800a228:	0800a2d9 	.word	0x0800a2d9
 800a22c:	0800a2d9 	.word	0x0800a2d9
 800a230:	0800a2b5 	.word	0x0800a2b5
 800a234:	0800a2d9 	.word	0x0800a2d9
 800a238:	0800a2d9 	.word	0x0800a2d9
 800a23c:	0800a2d9 	.word	0x0800a2d9
 800a240:	0800a2d9 	.word	0x0800a2d9
 800a244:	0800a2d9 	.word	0x0800a2d9
 800a248:	0800a2d9 	.word	0x0800a2d9
 800a24c:	0800a2d9 	.word	0x0800a2d9
 800a250:	0800a2c7 	.word	0x0800a2c7
 800a254:	0800a2d9 	.word	0x0800a2d9
 800a258:	0800a2d9 	.word	0x0800a2d9
 800a25c:	0800a2d9 	.word	0x0800a2d9
 800a260:	0800a2d9 	.word	0x0800a2d9
 800a264:	0800a2d9 	.word	0x0800a2d9
 800a268:	0800a2d9 	.word	0x0800a2d9
 800a26c:	0800a2d9 	.word	0x0800a2d9
 800a270:	0800a2df 	.word	0x0800a2df
 800a274:	0800a2d9 	.word	0x0800a2d9
 800a278:	0800a2d9 	.word	0x0800a2d9
 800a27c:	0800a2d9 	.word	0x0800a2d9
 800a280:	0800a2d9 	.word	0x0800a2d9
 800a284:	0800a2d9 	.word	0x0800a2d9
 800a288:	0800a2d9 	.word	0x0800a2d9
 800a28c:	0800a2d9 	.word	0x0800a2d9
 800a290:	0800a2df 	.word	0x0800a2df
 800a294:	0800a2d9 	.word	0x0800a2d9
 800a298:	0800a2d9 	.word	0x0800a2d9
 800a29c:	0800a2d9 	.word	0x0800a2d9
 800a2a0:	0800a2d9 	.word	0x0800a2d9
 800a2a4:	0800a2d9 	.word	0x0800a2d9
 800a2a8:	0800a2d9 	.word	0x0800a2d9
 800a2ac:	0800a2d9 	.word	0x0800a2d9
 800a2b0:	0800a2df 	.word	0x0800a2df
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	2101      	movs	r1, #1
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f001 fb5a 	bl	800b974 <RCCEx_PLL2_Config>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2c4:	e00c      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3324      	adds	r3, #36	; 0x24
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f001 fc03 	bl	800bad8 <RCCEx_PLL3_Config>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2d6:	e003      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	75fb      	strb	r3, [r7, #23]
      break;
 800a2dc:	e000      	b.n	800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800a2de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2e0:	7dfb      	ldrb	r3, [r7, #23]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d109      	bne.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a2e6:	4b45      	ldr	r3, [pc, #276]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2f2:	4942      	ldr	r1, [pc, #264]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	654b      	str	r3, [r1, #84]	; 0x54
 800a2f8:	e001      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2fa:	7dfb      	ldrb	r3, [r7, #23]
 800a2fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f003 0302 	and.w	r3, r3, #2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d037      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30e:	2b05      	cmp	r3, #5
 800a310:	d820      	bhi.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800a312:	a201      	add	r2, pc, #4	; (adr r2, 800a318 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800a314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a318:	0800a35b 	.word	0x0800a35b
 800a31c:	0800a331 	.word	0x0800a331
 800a320:	0800a343 	.word	0x0800a343
 800a324:	0800a35b 	.word	0x0800a35b
 800a328:	0800a35b 	.word	0x0800a35b
 800a32c:	0800a35b 	.word	0x0800a35b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	3304      	adds	r3, #4
 800a334:	2101      	movs	r1, #1
 800a336:	4618      	mov	r0, r3
 800a338:	f001 fb1c 	bl	800b974 <RCCEx_PLL2_Config>
 800a33c:	4603      	mov	r3, r0
 800a33e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a340:	e00c      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	3324      	adds	r3, #36	; 0x24
 800a346:	2101      	movs	r1, #1
 800a348:	4618      	mov	r0, r3
 800a34a:	f001 fbc5 	bl	800bad8 <RCCEx_PLL3_Config>
 800a34e:	4603      	mov	r3, r0
 800a350:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a352:	e003      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	75fb      	strb	r3, [r7, #23]
      break;
 800a358:	e000      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800a35a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a35c:	7dfb      	ldrb	r3, [r7, #23]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d109      	bne.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a362:	4b26      	ldr	r3, [pc, #152]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a366:	f023 0207 	bic.w	r2, r3, #7
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a36e:	4923      	ldr	r1, [pc, #140]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a370:	4313      	orrs	r3, r2
 800a372:	654b      	str	r3, [r1, #84]	; 0x54
 800a374:	e001      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a376:	7dfb      	ldrb	r3, [r7, #23]
 800a378:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0304 	and.w	r3, r3, #4
 800a382:	2b00      	cmp	r3, #0
 800a384:	d040      	beq.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a38c:	2b05      	cmp	r3, #5
 800a38e:	d821      	bhi.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a390:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800a392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a396:	bf00      	nop
 800a398:	0800a3db 	.word	0x0800a3db
 800a39c:	0800a3b1 	.word	0x0800a3b1
 800a3a0:	0800a3c3 	.word	0x0800a3c3
 800a3a4:	0800a3db 	.word	0x0800a3db
 800a3a8:	0800a3db 	.word	0x0800a3db
 800a3ac:	0800a3db 	.word	0x0800a3db
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f001 fadc 	bl	800b974 <RCCEx_PLL2_Config>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a3c0:	e00c      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3324      	adds	r3, #36	; 0x24
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 fb85 	bl	800bad8 <RCCEx_PLL3_Config>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a3d2:	e003      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d8:	e000      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800a3da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d110      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3e2:	4b06      	ldr	r3, [pc, #24]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3e6:	f023 0207 	bic.w	r2, r3, #7
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3f0:	4902      	ldr	r1, [pc, #8]	; (800a3fc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	658b      	str	r3, [r1, #88]	; 0x58
 800a3f6:	e007      	b.n	800a408 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a3f8:	58024800 	.word	0x58024800
 800a3fc:	58024400 	.word	0x58024400
 800a400:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a404:	7dfb      	ldrb	r3, [r7, #23]
 800a406:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0320 	and.w	r3, r3, #32
 800a410:	2b00      	cmp	r3, #0
 800a412:	d04b      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a41a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a41e:	d02e      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a424:	d828      	bhi.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a42a:	d02a      	beq.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a42c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a430:	d822      	bhi.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a432:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a436:	d026      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a438:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a43c:	d81c      	bhi.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a43e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a442:	d010      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800a444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a448:	d816      	bhi.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d01d      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a44e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a452:	d111      	bne.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3304      	adds	r3, #4
 800a458:	2100      	movs	r1, #0
 800a45a:	4618      	mov	r0, r3
 800a45c:	f001 fa8a 	bl	800b974 <RCCEx_PLL2_Config>
 800a460:	4603      	mov	r3, r0
 800a462:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a464:	e012      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	3324      	adds	r3, #36	; 0x24
 800a46a:	2102      	movs	r1, #2
 800a46c:	4618      	mov	r0, r3
 800a46e:	f001 fb33 	bl	800bad8 <RCCEx_PLL3_Config>
 800a472:	4603      	mov	r3, r0
 800a474:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a476:	e009      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	75fb      	strb	r3, [r7, #23]
      break;
 800a47c:	e006      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a47e:	bf00      	nop
 800a480:	e004      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a482:	bf00      	nop
 800a484:	e002      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a486:	bf00      	nop
 800a488:	e000      	b.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a48a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a48c:	7dfb      	ldrb	r3, [r7, #23]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d10a      	bne.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a492:	4bb2      	ldr	r3, [pc, #712]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a496:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a0:	49ae      	ldr	r1, [pc, #696]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	654b      	str	r3, [r1, #84]	; 0x54
 800a4a6:	e001      	b.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4a8:	7dfb      	ldrb	r3, [r7, #23]
 800a4aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d04b      	beq.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4c2:	d02e      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a4c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4c8:	d828      	bhi.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ce:	d02a      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a4d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d4:	d822      	bhi.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a4d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4da:	d026      	beq.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a4dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4e0:	d81c      	bhi.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a4e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4e6:	d010      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800a4e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4ec:	d816      	bhi.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d01d      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800a4f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4f6:	d111      	bne.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f001 fa38 	bl	800b974 <RCCEx_PLL2_Config>
 800a504:	4603      	mov	r3, r0
 800a506:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a508:	e012      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	3324      	adds	r3, #36	; 0x24
 800a50e:	2102      	movs	r1, #2
 800a510:	4618      	mov	r0, r3
 800a512:	f001 fae1 	bl	800bad8 <RCCEx_PLL3_Config>
 800a516:	4603      	mov	r3, r0
 800a518:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a51a:	e009      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	75fb      	strb	r3, [r7, #23]
      break;
 800a520:	e006      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a522:	bf00      	nop
 800a524:	e004      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a526:	bf00      	nop
 800a528:	e002      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a52a:	bf00      	nop
 800a52c:	e000      	b.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800a52e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a530:	7dfb      	ldrb	r3, [r7, #23]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10a      	bne.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a536:	4b89      	ldr	r3, [pc, #548]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a544:	4985      	ldr	r1, [pc, #532]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a546:	4313      	orrs	r3, r2
 800a548:	658b      	str	r3, [r1, #88]	; 0x58
 800a54a:	e001      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a54c:	7dfb      	ldrb	r3, [r7, #23]
 800a54e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d04b      	beq.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a562:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a566:	d02e      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a568:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a56c:	d828      	bhi.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a56e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a572:	d02a      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a578:	d822      	bhi.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a57a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a57e:	d026      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a580:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a584:	d81c      	bhi.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a58a:	d010      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800a58c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a590:	d816      	bhi.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800a592:	2b00      	cmp	r3, #0
 800a594:	d01d      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800a596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a59a:	d111      	bne.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f001 f9e6 	bl	800b974 <RCCEx_PLL2_Config>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5ac:	e012      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3324      	adds	r3, #36	; 0x24
 800a5b2:	2102      	movs	r1, #2
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	f001 fa8f 	bl	800bad8 <RCCEx_PLL3_Config>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5be:	e009      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5c4:	e006      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a5c6:	bf00      	nop
 800a5c8:	e004      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a5ca:	bf00      	nop
 800a5cc:	e002      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a5ce:	bf00      	nop
 800a5d0:	e000      	b.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800a5d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a5da:	4b60      	ldr	r3, [pc, #384]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a5dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5e8:	495c      	ldr	r1, [pc, #368]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	658b      	str	r3, [r1, #88]	; 0x58
 800a5ee:	e001      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0308 	and.w	r3, r3, #8
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d018      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a608:	d10a      	bne.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3324      	adds	r3, #36	; 0x24
 800a60e:	2102      	movs	r1, #2
 800a610:	4618      	mov	r0, r3
 800a612:	f001 fa61 	bl	800bad8 <RCCEx_PLL3_Config>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a620:	4b4e      	ldr	r3, [pc, #312]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a62c:	494b      	ldr	r1, [pc, #300]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a62e:	4313      	orrs	r3, r2
 800a630:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0310 	and.w	r3, r3, #16
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d01a      	beq.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a648:	d10a      	bne.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3324      	adds	r3, #36	; 0x24
 800a64e:	2102      	movs	r1, #2
 800a650:	4618      	mov	r0, r3
 800a652:	f001 fa41 	bl	800bad8 <RCCEx_PLL3_Config>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a660:	4b3e      	ldr	r3, [pc, #248]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a664:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a66e:	493b      	ldr	r1, [pc, #236]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a670:	4313      	orrs	r3, r2
 800a672:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d034      	beq.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a68a:	d01d      	beq.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a68c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a690:	d817      	bhi.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a69a:	d009      	beq.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a69c:	e011      	b.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f001 f965 	bl	800b974 <RCCEx_PLL2_Config>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6ae:	e00c      	b.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	3324      	adds	r3, #36	; 0x24
 800a6b4:	2102      	movs	r1, #2
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f001 fa0e 	bl	800bad8 <RCCEx_PLL3_Config>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6c0:	e003      	b.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a6c6:	e000      	b.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a6c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ca:	7dfb      	ldrb	r3, [r7, #23]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10a      	bne.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6d0:	4b22      	ldr	r3, [pc, #136]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6de:	491f      	ldr	r1, [pc, #124]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	658b      	str	r3, [r1, #88]	; 0x58
 800a6e4:	e001      	b.n	800a6ea <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6e6:	7dfb      	ldrb	r3, [r7, #23]
 800a6e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d036      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a700:	d01c      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a702:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a706:	d816      	bhi.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a708:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a70c:	d003      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a70e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a712:	d007      	beq.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a714:	e00f      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a716:	4b11      	ldr	r3, [pc, #68]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71a:	4a10      	ldr	r2, [pc, #64]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a71c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a720:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a722:	e00c      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	3324      	adds	r3, #36	; 0x24
 800a728:	2101      	movs	r1, #1
 800a72a:	4618      	mov	r0, r3
 800a72c:	f001 f9d4 	bl	800bad8 <RCCEx_PLL3_Config>
 800a730:	4603      	mov	r3, r0
 800a732:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a734:	e003      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	75fb      	strb	r3, [r7, #23]
      break;
 800a73a:	e000      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a73c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a73e:	7dfb      	ldrb	r3, [r7, #23]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10d      	bne.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a744:	4b05      	ldr	r3, [pc, #20]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a752:	4902      	ldr	r1, [pc, #8]	; (800a75c <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a754:	4313      	orrs	r3, r2
 800a756:	654b      	str	r3, [r1, #84]	; 0x54
 800a758:	e004      	b.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800a75a:	bf00      	nop
 800a75c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a760:	7dfb      	ldrb	r3, [r7, #23]
 800a762:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d029      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d003      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77c:	d007      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a77e:	e00f      	b.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a780:	4b61      	ldr	r3, [pc, #388]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	4a60      	ldr	r2, [pc, #384]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a78a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a78c:	e00b      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	3304      	adds	r3, #4
 800a792:	2102      	movs	r1, #2
 800a794:	4618      	mov	r0, r3
 800a796:	f001 f8ed 	bl	800b974 <RCCEx_PLL2_Config>
 800a79a:	4603      	mov	r3, r0
 800a79c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a79e:	e002      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d109      	bne.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7ac:	4b56      	ldr	r3, [pc, #344]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a7ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7b8:	4953      	ldr	r1, [pc, #332]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a7be:	e001      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c0:	7dfb      	ldrb	r3, [r7, #23]
 800a7c2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00a      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3324      	adds	r3, #36	; 0x24
 800a7d4:	2102      	movs	r1, #2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f001 f97e 	bl	800bad8 <RCCEx_PLL3_Config>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d030      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7fa:	d017      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a7fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a800:	d811      	bhi.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a806:	d013      	beq.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800a808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a80c:	d80b      	bhi.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d010      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800a812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a816:	d106      	bne.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a818:	4b3b      	ldr	r3, [pc, #236]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a81c:	4a3a      	ldr	r2, [pc, #232]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a81e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a822:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a824:	e007      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	75fb      	strb	r3, [r7, #23]
      break;
 800a82a:	e004      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a82c:	bf00      	nop
 800a82e:	e002      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a830:	bf00      	nop
 800a832:	e000      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a834:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d109      	bne.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a83c:	4b32      	ldr	r3, [pc, #200]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a83e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a848:	492f      	ldr	r1, [pc, #188]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a84a:	4313      	orrs	r3, r2
 800a84c:	654b      	str	r3, [r1, #84]	; 0x54
 800a84e:	e001      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a850:	7dfb      	ldrb	r3, [r7, #23]
 800a852:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d008      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a860:	4b29      	ldr	r3, [pc, #164]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a864:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a86c:	4926      	ldr	r1, [pc, #152]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d008      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a87e:	4b22      	ldr	r3, [pc, #136]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a882:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a88a:	491f      	ldr	r1, [pc, #124]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a88c:	4313      	orrs	r3, r2
 800a88e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00d      	beq.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a89c:	4b1a      	ldr	r3, [pc, #104]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a89e:	691b      	ldr	r3, [r3, #16]
 800a8a0:	4a19      	ldr	r2, [pc, #100]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8a6:	6113      	str	r3, [r2, #16]
 800a8a8:	4b17      	ldr	r3, [pc, #92]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8aa:	691a      	ldr	r2, [r3, #16]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a8b2:	4915      	ldr	r1, [pc, #84]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	da08      	bge.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a8c0:	4b11      	ldr	r3, [pc, #68]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8cc:	490e      	ldr	r1, [pc, #56]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d009      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8de:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8ec:	4906      	ldr	r1, [pc, #24]	; (800a908 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a8f2:	7dbb      	ldrb	r3, [r7, #22]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d101      	bne.n	800a8fc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e000      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	58024400 	.word	0x58024400

0800a90c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b090      	sub	sp, #64	; 0x40
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a91a:	f040 8089 	bne.w	800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a91e:	4b95      	ldr	r3, [pc, #596]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a922:	f003 0307 	and.w	r3, r3, #7
 800a926:	633b      	str	r3, [r7, #48]	; 0x30
 800a928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d87d      	bhi.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800a92e:	a201      	add	r2, pc, #4	; (adr r2, 800a934 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a934:	0800a949 	.word	0x0800a949
 800a938:	0800a96d 	.word	0x0800a96d
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800aa25 	.word	0x0800aa25
 800a944:	0800a9b5 	.word	0x0800a9b5

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a948:	4b8a      	ldr	r3, [pc, #552]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a954:	d107      	bne.n	800a966 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 feb8 	bl	800b6d0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a962:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a964:	e3ed      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a96a:	e3ea      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a96c:	4b81      	ldr	r3, [pc, #516]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a978:	d107      	bne.n	800a98a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a97a:	f107 0318 	add.w	r3, r7, #24
 800a97e:	4618      	mov	r0, r3
 800a980:	f000 fbfe 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a984:	69bb      	ldr	r3, [r7, #24]
 800a986:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a988:	e3db      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a98a:	2300      	movs	r3, #0
 800a98c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a98e:	e3d8      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a990:	4b78      	ldr	r3, [pc, #480]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a998:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a99c:	d107      	bne.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a99e:	f107 030c 	add.w	r3, r7, #12
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 fd40 	bl	800b428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9ac:	e3c9      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9b2:	e3c6      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9b4:	4b6f      	ldr	r3, [pc, #444]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9bc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9be:	4b6d      	ldr	r3, [pc, #436]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0304 	and.w	r3, r3, #4
 800a9c6:	2b04      	cmp	r3, #4
 800a9c8:	d10c      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a9ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d109      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9d0:	4b68      	ldr	r3, [pc, #416]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	08db      	lsrs	r3, r3, #3
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	4a67      	ldr	r2, [pc, #412]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9e2:	e01e      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9e4:	4b63      	ldr	r3, [pc, #396]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9f0:	d106      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9f8:	d102      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a9fa:	4b60      	ldr	r3, [pc, #384]	; (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9fe:	e010      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa00:	4b5c      	ldr	r3, [pc, #368]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa0c:	d106      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800aa0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa14:	d102      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa16:	4b5a      	ldr	r3, [pc, #360]	; (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa1a:	e002      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa20:	e38f      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800aa22:	e38e      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa24:	4b57      	ldr	r3, [pc, #348]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa28:	e38b      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa2e:	e388      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa36:	f040 80a7 	bne.w	800ab88 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800aa3a:	4b4e      	ldr	r3, [pc, #312]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800aa42:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa4a:	d054      	beq.n	800aaf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa52:	f200 808b 	bhi.w	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800aa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa5c:	f000 8083 	beq.w	800ab66 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa66:	f200 8081 	bhi.w	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa70:	d02f      	beq.n	800aad2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800aa72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa78:	d878      	bhi.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d004      	beq.n	800aa8a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa86:	d012      	beq.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800aa88:	e070      	b.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa8a:	4b3a      	ldr	r3, [pc, #232]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa96:	d107      	bne.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 fe17 	bl	800b6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaa6:	e34c      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaac:	e349      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaae:	4b31      	ldr	r3, [pc, #196]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaba:	d107      	bne.n	800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aabc:	f107 0318 	add.w	r3, r7, #24
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fb5d 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaca:	e33a      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800aacc:	2300      	movs	r3, #0
 800aace:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aad0:	e337      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aad2:	4b28      	ldr	r3, [pc, #160]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aada:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aade:	d107      	bne.n	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aae0:	f107 030c 	add.w	r3, r7, #12
 800aae4:	4618      	mov	r0, r3
 800aae6:	f000 fc9f 	bl	800b428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aaee:	e328      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aaf4:	e325      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aaf6:	4b1f      	ldr	r3, [pc, #124]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aaf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aafa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aafe:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab00:	4b1c      	ldr	r3, [pc, #112]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d10c      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800ab0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d109      	bne.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab12:	4b18      	ldr	r3, [pc, #96]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	08db      	lsrs	r3, r3, #3
 800ab18:	f003 0303 	and.w	r3, r3, #3
 800ab1c:	4a16      	ldr	r2, [pc, #88]	; (800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800ab1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab22:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab24:	e01e      	b.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab26:	4b13      	ldr	r3, [pc, #76]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab32:	d106      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800ab34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab3a:	d102      	bne.n	800ab42 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab3c:	4b0f      	ldr	r3, [pc, #60]	; (800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800ab3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab40:	e010      	b.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab42:	4b0c      	ldr	r3, [pc, #48]	; (800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab4e:	d106      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800ab50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab56:	d102      	bne.n	800ab5e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab58:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab5c:	e002      	b.n	800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab62:	e2ee      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ab64:	e2ed      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab66:	4b07      	ldr	r3, [pc, #28]	; (800ab84 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ab68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab6a:	e2ea      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab70:	e2e7      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ab72:	bf00      	nop
 800ab74:	58024400 	.word	0x58024400
 800ab78:	03d09000 	.word	0x03d09000
 800ab7c:	003d0900 	.word	0x003d0900
 800ab80:	017d7840 	.word	0x017d7840
 800ab84:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab8e:	f040 809c 	bne.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ab92:	4b9e      	ldr	r3, [pc, #632]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ab94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab96:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ab9a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aba2:	d054      	beq.n	800ac4e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800aba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abaa:	f200 808b 	bhi.w	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800abae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abb4:	f000 8083 	beq.w	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800abb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abbe:	f200 8081 	bhi.w	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abc8:	d02f      	beq.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800abca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abd0:	d878      	bhi.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d004      	beq.n	800abe2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800abd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800abde:	d012      	beq.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800abe0:	e070      	b.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abe2:	4b8a      	ldr	r3, [pc, #552]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abee:	d107      	bne.n	800ac00 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abf4:	4618      	mov	r0, r3
 800abf6:	f000 fd6b 	bl	800b6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800abfe:	e2a0      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac04:	e29d      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac06:	4b81      	ldr	r3, [pc, #516]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac12:	d107      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac14:	f107 0318 	add.w	r3, r7, #24
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fab1 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800ac22:	e28e      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ac24:	2300      	movs	r3, #0
 800ac26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac28:	e28b      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac2a:	4b78      	ldr	r3, [pc, #480]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac36:	d107      	bne.n	800ac48 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac38:	f107 030c 	add.w	r3, r7, #12
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fbf3 	bl	800b428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac46:	e27c      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac4c:	e279      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac4e:	4b6f      	ldr	r3, [pc, #444]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac56:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac58:	4b6c      	ldr	r3, [pc, #432]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	2b04      	cmp	r3, #4
 800ac62:	d10c      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ac64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d109      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac6a:	4b68      	ldr	r3, [pc, #416]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	08db      	lsrs	r3, r3, #3
 800ac70:	f003 0303 	and.w	r3, r3, #3
 800ac74:	4a66      	ldr	r2, [pc, #408]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac76:	fa22 f303 	lsr.w	r3, r2, r3
 800ac7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac7c:	e01e      	b.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac7e:	4b63      	ldr	r3, [pc, #396]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac8a:	d106      	bne.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800ac8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac92:	d102      	bne.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ac94:	4b5f      	ldr	r3, [pc, #380]	; (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ac96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac98:	e010      	b.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac9a:	4b5c      	ldr	r3, [pc, #368]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aca6:	d106      	bne.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800aca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acae:	d102      	bne.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800acb0:	4b59      	ldr	r3, [pc, #356]	; (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800acb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acb4:	e002      	b.n	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800acba:	e242      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800acbc:	e241      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800acbe:	4b57      	ldr	r3, [pc, #348]	; (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acc2:	e23e      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acc8:	e23b      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd0:	f040 80a6 	bne.w	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800acd4:	4b4d      	ldr	r3, [pc, #308]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800acd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800acdc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800acde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ace4:	d054      	beq.n	800ad90 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800ace6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acec:	f200 808b 	bhi.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800acf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acf6:	f000 8083 	beq.w	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800acfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad00:	f200 8081 	bhi.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad0a:	d02f      	beq.n	800ad6c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad12:	d878      	bhi.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d004      	beq.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad20:	d012      	beq.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800ad22:	e070      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad24:	4b39      	ldr	r3, [pc, #228]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad30:	d107      	bne.n	800ad42 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fcca 	bl	800b6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad40:	e1ff      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad46:	e1fc      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad48:	4b30      	ldr	r3, [pc, #192]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad54:	d107      	bne.n	800ad66 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad56:	f107 0318 	add.w	r3, r7, #24
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 fa10 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad64:	e1ed      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad6a:	e1ea      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad6c:	4b27      	ldr	r3, [pc, #156]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad78:	d107      	bne.n	800ad8a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad7a:	f107 030c 	add.w	r3, r7, #12
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fb52 	bl	800b428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad88:	e1db      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad8e:	e1d8      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ad90:	4b1e      	ldr	r3, [pc, #120]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ad92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad98:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad9a:	4b1c      	ldr	r3, [pc, #112]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0304 	and.w	r3, r3, #4
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	d10c      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800ada6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d109      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adac:	4b17      	ldr	r3, [pc, #92]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	08db      	lsrs	r3, r3, #3
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	4a16      	ldr	r2, [pc, #88]	; (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800adb8:	fa22 f303 	lsr.w	r3, r2, r3
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adbe:	e01e      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adc0:	4b12      	ldr	r3, [pc, #72]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adcc:	d106      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800add4:	d102      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800add6:	4b0f      	ldr	r3, [pc, #60]	; (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800add8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adda:	e010      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800addc:	4b0b      	ldr	r3, [pc, #44]	; (800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ade8:	d106      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800adea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adf0:	d102      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800adf2:	4b09      	ldr	r3, [pc, #36]	; (800ae18 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800adf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adf6:	e002      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800adfc:	e1a1      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800adfe:	e1a0      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae00:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800ae02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae04:	e19d      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800ae06:	2300      	movs	r3, #0
 800ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae0a:	e19a      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ae0c:	58024400 	.word	0x58024400
 800ae10:	03d09000 	.word	0x03d09000
 800ae14:	003d0900 	.word	0x003d0900
 800ae18:	017d7840 	.word	0x017d7840
 800ae1c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ae26:	d173      	bne.n	800af10 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ae28:	4b9a      	ldr	r3, [pc, #616]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ae2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae30:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae38:	d02f      	beq.n	800ae9a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800ae3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae40:	d863      	bhi.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d004      	beq.n	800ae52 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800ae48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae4e:	d012      	beq.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800ae50:	e05b      	b.n	800af0a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae52:	4b90      	ldr	r3, [pc, #576]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae5e:	d107      	bne.n	800ae70 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae60:	f107 0318 	add.w	r3, r7, #24
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 f98b 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae6e:	e168      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ae70:	2300      	movs	r3, #0
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae74:	e165      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae76:	4b87      	ldr	r3, [pc, #540]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae82:	d107      	bne.n	800ae94 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae84:	f107 030c 	add.w	r3, r7, #12
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f000 facd 	bl	800b428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae92:	e156      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ae94:	2300      	movs	r3, #0
 800ae96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae98:	e153      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ae9a:	4b7e      	ldr	r3, [pc, #504]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ae9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aea2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aea4:	4b7b      	ldr	r3, [pc, #492]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f003 0304 	and.w	r3, r3, #4
 800aeac:	2b04      	cmp	r3, #4
 800aeae:	d10c      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800aeb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d109      	bne.n	800aeca <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aeb6:	4b77      	ldr	r3, [pc, #476]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f003 0303 	and.w	r3, r3, #3
 800aec0:	4a75      	ldr	r2, [pc, #468]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800aec2:	fa22 f303 	lsr.w	r3, r2, r3
 800aec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aec8:	e01e      	b.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aeca:	4b72      	ldr	r3, [pc, #456]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aed6:	d106      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800aed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aede:	d102      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aee0:	4b6e      	ldr	r3, [pc, #440]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800aee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aee4:	e010      	b.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aee6:	4b6b      	ldr	r3, [pc, #428]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aef2:	d106      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800aef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aefa:	d102      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aefc:	4b68      	ldr	r3, [pc, #416]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af00:	e002      	b.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800af06:	e11c      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800af08:	e11b      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af0e:	e118      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af16:	d133      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800af18:	4b5e      	ldr	r3, [pc, #376]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800af1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af20:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af24:	2b00      	cmp	r3, #0
 800af26:	d004      	beq.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800af28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af2e:	d012      	beq.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800af30:	e023      	b.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af32:	4b58      	ldr	r3, [pc, #352]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af3e:	d107      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fbc3 	bl	800b6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800af4e:	e0f8      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af54:	e0f5      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af56:	4b4f      	ldr	r3, [pc, #316]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af62:	d107      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af64:	f107 0318 	add.w	r3, r7, #24
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 f909 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800af72:	e0e6      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af78:	e0e3      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800af7a:	2300      	movs	r3, #0
 800af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af7e:	e0e0      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af86:	f040 808d 	bne.w	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800af8a:	4b42      	ldr	r3, [pc, #264]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800af8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af8e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800af92:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800af94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af9a:	d06b      	beq.n	800b074 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800af9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afa2:	d874      	bhi.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800afa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afaa:	d056      	beq.n	800b05a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800afac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afb2:	d86c      	bhi.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800afb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afba:	d03b      	beq.n	800b034 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800afbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afc2:	d864      	bhi.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afca:	d021      	beq.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800afcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afd2:	d85c      	bhi.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800afd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d004      	beq.n	800afe4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800afda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afe0:	d004      	beq.n	800afec <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800afe2:	e054      	b.n	800b08e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800afe4:	f000 f8b6 	bl	800b154 <HAL_RCCEx_GetD3PCLK1Freq>
 800afe8:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800afea:	e0aa      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afec:	4b29      	ldr	r3, [pc, #164]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aff8:	d107      	bne.n	800b00a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800affa:	f107 0318 	add.w	r3, r7, #24
 800affe:	4618      	mov	r0, r3
 800b000:	f000 f8be 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b008:	e09b      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b00e:	e098      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b010:	4b20      	ldr	r3, [pc, #128]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b01c:	d107      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b01e:	f107 030c 	add.w	r3, r7, #12
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fa00 	bl	800b428 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b02c:	e089      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b02e:	2300      	movs	r3, #0
 800b030:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b032:	e086      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b034:	4b17      	ldr	r3, [pc, #92]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d109      	bne.n	800b054 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b040:	4b14      	ldr	r3, [pc, #80]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	08db      	lsrs	r3, r3, #3
 800b046:	f003 0303 	and.w	r3, r3, #3
 800b04a:	4a13      	ldr	r2, [pc, #76]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b04c:	fa22 f303 	lsr.w	r3, r2, r3
 800b050:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b052:	e076      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b058:	e073      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b05a:	4b0e      	ldr	r3, [pc, #56]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b066:	d102      	bne.n	800b06e <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800b068:	4b0c      	ldr	r3, [pc, #48]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b06a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b06c:	e069      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b06e:	2300      	movs	r3, #0
 800b070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b072:	e066      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b074:	4b07      	ldr	r3, [pc, #28]	; (800b094 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b07c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b080:	d102      	bne.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800b082:	4b07      	ldr	r3, [pc, #28]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b084:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b086:	e05c      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b088:	2300      	movs	r3, #0
 800b08a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b08c:	e059      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b092:	e056      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b094:	58024400 	.word	0x58024400
 800b098:	03d09000 	.word	0x03d09000
 800b09c:	003d0900 	.word	0x003d0900
 800b0a0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0aa:	d148      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b0ac:	4b27      	ldr	r3, [pc, #156]	; (800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0b4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0bc:	d02a      	beq.n	800b114 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800b0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0c4:	d838      	bhi.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d004      	beq.n	800b0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0d2:	d00d      	beq.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800b0d4:	e030      	b.n	800b138 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0d6:	4b1d      	ldr	r3, [pc, #116]	; (800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0e2:	d102      	bne.n	800b0ea <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800b0e4:	4b1a      	ldr	r3, [pc, #104]	; (800b150 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b0e8:	e02b      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0ee:	e028      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0f0:	4b16      	ldr	r3, [pc, #88]	; (800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0fc:	d107      	bne.n	800b10e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b102:	4618      	mov	r0, r3
 800b104:	f000 fae4 	bl	800b6d0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b10c:	e019      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b112:	e016      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b114:	4b0d      	ldr	r3, [pc, #52]	; (800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b11c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b120:	d107      	bne.n	800b132 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b122:	f107 0318 	add.w	r3, r7, #24
 800b126:	4618      	mov	r0, r3
 800b128:	f000 f82a 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b130:	e007      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b132:	2300      	movs	r3, #0
 800b134:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b136:	e004      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800b138:	2300      	movs	r3, #0
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b13c:	e001      	b.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800b13e:	2300      	movs	r3, #0
 800b140:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b144:	4618      	mov	r0, r3
 800b146:	3740      	adds	r7, #64	; 0x40
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	58024400 	.word	0x58024400
 800b150:	017d7840 	.word	0x017d7840

0800b154 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b158:	f7fe fc82 	bl	8009a60 <HAL_RCC_GetHCLKFreq>
 800b15c:	4602      	mov	r2, r0
 800b15e:	4b06      	ldr	r3, [pc, #24]	; (800b178 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b160:	6a1b      	ldr	r3, [r3, #32]
 800b162:	091b      	lsrs	r3, r3, #4
 800b164:	f003 0307 	and.w	r3, r3, #7
 800b168:	4904      	ldr	r1, [pc, #16]	; (800b17c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b16a:	5ccb      	ldrb	r3, [r1, r3]
 800b16c:	f003 031f 	and.w	r3, r3, #31
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b174:	4618      	mov	r0, r3
 800b176:	bd80      	pop	{r7, pc}
 800b178:	58024400 	.word	0x58024400
 800b17c:	08011404 	.word	0x08011404

0800b180 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b180:	b480      	push	{r7}
 800b182:	b089      	sub	sp, #36	; 0x24
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b188:	4ba1      	ldr	r3, [pc, #644]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b192:	4b9f      	ldr	r3, [pc, #636]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b196:	0b1b      	lsrs	r3, r3, #12
 800b198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b19c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b19e:	4b9c      	ldr	r3, [pc, #624]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a2:	091b      	lsrs	r3, r3, #4
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b1aa:	4b99      	ldr	r3, [pc, #612]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ae:	08db      	lsrs	r3, r3, #3
 800b1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1b4:	693a      	ldr	r2, [r7, #16]
 800b1b6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ba:	ee07 3a90 	vmov	s15, r3
 800b1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 8111 	beq.w	800b3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	2b02      	cmp	r3, #2
 800b1d2:	f000 8083 	beq.w	800b2dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	f200 80a1 	bhi.w	800b320 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d003      	beq.n	800b1ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d056      	beq.n	800b298 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b1ea:	e099      	b.n	800b320 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1ec:	4b88      	ldr	r3, [pc, #544]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f003 0320 	and.w	r3, r3, #32
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d02d      	beq.n	800b254 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b1f8:	4b85      	ldr	r3, [pc, #532]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	08db      	lsrs	r3, r3, #3
 800b1fe:	f003 0303 	and.w	r3, r3, #3
 800b202:	4a84      	ldr	r2, [pc, #528]	; (800b414 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b204:	fa22 f303 	lsr.w	r3, r2, r3
 800b208:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	ee07 3a90 	vmov	s15, r3
 800b210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	ee07 3a90 	vmov	s15, r3
 800b21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b222:	4b7b      	ldr	r3, [pc, #492]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22a:	ee07 3a90 	vmov	s15, r3
 800b22e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b232:	ed97 6a03 	vldr	s12, [r7, #12]
 800b236:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b23a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b23e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b252:	e087      	b.n	800b364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b25e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b41c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b266:	4b6a      	ldr	r3, [pc, #424]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b26e:	ee07 3a90 	vmov	s15, r3
 800b272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b276:	ed97 6a03 	vldr	s12, [r7, #12]
 800b27a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b27e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b28a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b28e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b296:	e065      	b.n	800b364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2aa:	4b59      	ldr	r3, [pc, #356]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2b2:	ee07 3a90 	vmov	s15, r3
 800b2b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2be:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2da:	e043      	b.n	800b364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b2ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2ee:	4b48      	ldr	r3, [pc, #288]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b302:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b30a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b30e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b31a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b31e:	e021      	b.n	800b364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b32a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b32e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b332:	4b37      	ldr	r3, [pc, #220]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33a:	ee07 3a90 	vmov	s15, r3
 800b33e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b342:	ed97 6a03 	vldr	s12, [r7, #12]
 800b346:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b34a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b34e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b35a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b35e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b362:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b364:	4b2a      	ldr	r3, [pc, #168]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b368:	0a5b      	lsrs	r3, r3, #9
 800b36a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b36e:	ee07 3a90 	vmov	s15, r3
 800b372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b37a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b37e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b38a:	ee17 2a90 	vmov	r2, s15
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b392:	4b1f      	ldr	r3, [pc, #124]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b396:	0c1b      	lsrs	r3, r3, #16
 800b398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b39c:	ee07 3a90 	vmov	s15, r3
 800b3a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ac:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3b8:	ee17 2a90 	vmov	r2, s15
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b3c0:	4b13      	ldr	r3, [pc, #76]	; (800b410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c4:	0e1b      	lsrs	r3, r3, #24
 800b3c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3ca:	ee07 3a90 	vmov	s15, r3
 800b3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3da:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3e6:	ee17 2a90 	vmov	r2, s15
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b3ee:	e008      	b.n	800b402 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	609a      	str	r2, [r3, #8]
}
 800b402:	bf00      	nop
 800b404:	3724      	adds	r7, #36	; 0x24
 800b406:	46bd      	mov	sp, r7
 800b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40c:	4770      	bx	lr
 800b40e:	bf00      	nop
 800b410:	58024400 	.word	0x58024400
 800b414:	03d09000 	.word	0x03d09000
 800b418:	46000000 	.word	0x46000000
 800b41c:	4c742400 	.word	0x4c742400
 800b420:	4a742400 	.word	0x4a742400
 800b424:	4bbebc20 	.word	0x4bbebc20

0800b428 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b428:	b480      	push	{r7}
 800b42a:	b089      	sub	sp, #36	; 0x24
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b430:	4ba1      	ldr	r3, [pc, #644]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b434:	f003 0303 	and.w	r3, r3, #3
 800b438:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b43a:	4b9f      	ldr	r3, [pc, #636]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b43e:	0d1b      	lsrs	r3, r3, #20
 800b440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b444:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b446:	4b9c      	ldr	r3, [pc, #624]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44a:	0a1b      	lsrs	r3, r3, #8
 800b44c:	f003 0301 	and.w	r3, r3, #1
 800b450:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b452:	4b99      	ldr	r3, [pc, #612]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b456:	08db      	lsrs	r3, r3, #3
 800b458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b45c:	693a      	ldr	r2, [r7, #16]
 800b45e:	fb02 f303 	mul.w	r3, r2, r3
 800b462:	ee07 3a90 	vmov	s15, r3
 800b466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b46a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	2b00      	cmp	r3, #0
 800b472:	f000 8111 	beq.w	800b698 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b476:	69bb      	ldr	r3, [r7, #24]
 800b478:	2b02      	cmp	r3, #2
 800b47a:	f000 8083 	beq.w	800b584 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b47e:	69bb      	ldr	r3, [r7, #24]
 800b480:	2b02      	cmp	r3, #2
 800b482:	f200 80a1 	bhi.w	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d056      	beq.n	800b540 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b492:	e099      	b.n	800b5c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b494:	4b88      	ldr	r3, [pc, #544]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0320 	and.w	r3, r3, #32
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d02d      	beq.n	800b4fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4a0:	4b85      	ldr	r3, [pc, #532]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	08db      	lsrs	r3, r3, #3
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	4a84      	ldr	r2, [pc, #528]	; (800b6bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b4ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	ee07 3a90 	vmov	s15, r3
 800b4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	ee07 3a90 	vmov	s15, r3
 800b4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ca:	4b7b      	ldr	r3, [pc, #492]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4d2:	ee07 3a90 	vmov	s15, r3
 800b4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4da:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b4fa:	e087      	b.n	800b60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b506:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b50e:	4b6a      	ldr	r3, [pc, #424]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b516:	ee07 3a90 	vmov	s15, r3
 800b51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b51e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b522:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b52e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b53a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b53e:	e065      	b.n	800b60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b54a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b552:	4b59      	ldr	r3, [pc, #356]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b55a:	ee07 3a90 	vmov	s15, r3
 800b55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b562:	ed97 6a03 	vldr	s12, [r7, #12]
 800b566:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b57e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b582:	e043      	b.n	800b60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b58e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b6cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b596:	4b48      	ldr	r3, [pc, #288]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59e:	ee07 3a90 	vmov	s15, r3
 800b5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5c6:	e021      	b.n	800b60c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	ee07 3a90 	vmov	s15, r3
 800b5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b6c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5da:	4b37      	ldr	r3, [pc, #220]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5e2:	ee07 3a90 	vmov	s15, r3
 800b5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b60a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b60c:	4b2a      	ldr	r3, [pc, #168]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b60e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b610:	0a5b      	lsrs	r3, r3, #9
 800b612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b616:	ee07 3a90 	vmov	s15, r3
 800b61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b61e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b622:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b626:	edd7 6a07 	vldr	s13, [r7, #28]
 800b62a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b62e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b632:	ee17 2a90 	vmov	r2, s15
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b63a:	4b1f      	ldr	r3, [pc, #124]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63e:	0c1b      	lsrs	r3, r3, #16
 800b640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b644:	ee07 3a90 	vmov	s15, r3
 800b648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b650:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b654:	edd7 6a07 	vldr	s13, [r7, #28]
 800b658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b660:	ee17 2a90 	vmov	r2, s15
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b668:	4b13      	ldr	r3, [pc, #76]	; (800b6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66c:	0e1b      	lsrs	r3, r3, #24
 800b66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b672:	ee07 3a90 	vmov	s15, r3
 800b676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b67e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b682:	edd7 6a07 	vldr	s13, [r7, #28]
 800b686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b68e:	ee17 2a90 	vmov	r2, s15
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b696:	e008      	b.n	800b6aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	609a      	str	r2, [r3, #8]
}
 800b6aa:	bf00      	nop
 800b6ac:	3724      	adds	r7, #36	; 0x24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop
 800b6b8:	58024400 	.word	0x58024400
 800b6bc:	03d09000 	.word	0x03d09000
 800b6c0:	46000000 	.word	0x46000000
 800b6c4:	4c742400 	.word	0x4c742400
 800b6c8:	4a742400 	.word	0x4a742400
 800b6cc:	4bbebc20 	.word	0x4bbebc20

0800b6d0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b089      	sub	sp, #36	; 0x24
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6d8:	4ba0      	ldr	r3, [pc, #640]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6dc:	f003 0303 	and.w	r3, r3, #3
 800b6e0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b6e2:	4b9e      	ldr	r3, [pc, #632]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6e6:	091b      	lsrs	r3, r3, #4
 800b6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6ec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b6ee:	4b9b      	ldr	r3, [pc, #620]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f2:	f003 0301 	and.w	r3, r3, #1
 800b6f6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b6f8:	4b98      	ldr	r3, [pc, #608]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6fc:	08db      	lsrs	r3, r3, #3
 800b6fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	fb02 f303 	mul.w	r3, r2, r3
 800b708:	ee07 3a90 	vmov	s15, r3
 800b70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b710:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 8111 	beq.w	800b93e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	f000 8083 	beq.w	800b82a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b724:	69bb      	ldr	r3, [r7, #24]
 800b726:	2b02      	cmp	r3, #2
 800b728:	f200 80a1 	bhi.w	800b86e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d003      	beq.n	800b73a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	2b01      	cmp	r3, #1
 800b736:	d056      	beq.n	800b7e6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b738:	e099      	b.n	800b86e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b73a:	4b88      	ldr	r3, [pc, #544]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f003 0320 	and.w	r3, r3, #32
 800b742:	2b00      	cmp	r3, #0
 800b744:	d02d      	beq.n	800b7a2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b746:	4b85      	ldr	r3, [pc, #532]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	08db      	lsrs	r3, r3, #3
 800b74c:	f003 0303 	and.w	r3, r3, #3
 800b750:	4a83      	ldr	r2, [pc, #524]	; (800b960 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b752:	fa22 f303 	lsr.w	r3, r2, r3
 800b756:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	ee07 3a90 	vmov	s15, r3
 800b768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b770:	4b7a      	ldr	r3, [pc, #488]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b778:	ee07 3a90 	vmov	s15, r3
 800b77c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b780:	ed97 6a03 	vldr	s12, [r7, #12]
 800b784:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b78c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b79c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b7a0:	e087      	b.n	800b8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	ee07 3a90 	vmov	s15, r3
 800b7a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b968 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7b4:	4b69      	ldr	r3, [pc, #420]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7bc:	ee07 3a90 	vmov	s15, r3
 800b7c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7e4:	e065      	b.n	800b8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b96c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b7f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7f8:	4b58      	ldr	r3, [pc, #352]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b800:	ee07 3a90 	vmov	s15, r3
 800b804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b808:	ed97 6a03 	vldr	s12, [r7, #12]
 800b80c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b81c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b820:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b824:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b828:	e043      	b.n	800b8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b834:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b970 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b83c:	4b47      	ldr	r3, [pc, #284]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b83e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b84c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b850:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b85c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b864:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b868:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b86c:	e021      	b.n	800b8b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	ee07 3a90 	vmov	s15, r3
 800b874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b878:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b968 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b87c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b880:	4b36      	ldr	r3, [pc, #216]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b888:	ee07 3a90 	vmov	s15, r3
 800b88c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b890:	ed97 6a03 	vldr	s12, [r7, #12]
 800b894:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b964 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b89c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b8b2:	4b2a      	ldr	r3, [pc, #168]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b6:	0a5b      	lsrs	r3, r3, #9
 800b8b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8bc:	ee07 3a90 	vmov	s15, r3
 800b8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8d8:	ee17 2a90 	vmov	r2, s15
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b8e0:	4b1e      	ldr	r3, [pc, #120]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e4:	0c1b      	lsrs	r3, r3, #16
 800b8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ea:	ee07 3a90 	vmov	s15, r3
 800b8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8fa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b906:	ee17 2a90 	vmov	r2, s15
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b90e:	4b13      	ldr	r3, [pc, #76]	; (800b95c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b912:	0e1b      	lsrs	r3, r3, #24
 800b914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b918:	ee07 3a90 	vmov	s15, r3
 800b91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b920:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b924:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b928:	edd7 6a07 	vldr	s13, [r7, #28]
 800b92c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b934:	ee17 2a90 	vmov	r2, s15
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b93c:	e008      	b.n	800b950 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	609a      	str	r2, [r3, #8]
}
 800b950:	bf00      	nop
 800b952:	3724      	adds	r7, #36	; 0x24
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	58024400 	.word	0x58024400
 800b960:	03d09000 	.word	0x03d09000
 800b964:	46000000 	.word	0x46000000
 800b968:	4c742400 	.word	0x4c742400
 800b96c:	4a742400 	.word	0x4a742400
 800b970:	4bbebc20 	.word	0x4bbebc20

0800b974 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b084      	sub	sp, #16
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b982:	4b53      	ldr	r3, [pc, #332]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800b984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b986:	f003 0303 	and.w	r3, r3, #3
 800b98a:	2b03      	cmp	r3, #3
 800b98c:	d101      	bne.n	800b992 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e099      	b.n	800bac6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b992:	4b4f      	ldr	r3, [pc, #316]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a4e      	ldr	r2, [pc, #312]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800b998:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b99c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b99e:	f7f8 f8c5 	bl	8003b2c <HAL_GetTick>
 800b9a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9a4:	e008      	b.n	800b9b8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b9a6:	f7f8 f8c1 	bl	8003b2c <HAL_GetTick>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	2b02      	cmp	r3, #2
 800b9b2:	d901      	bls.n	800b9b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e086      	b.n	800bac6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9b8:	4b45      	ldr	r3, [pc, #276]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1f0      	bne.n	800b9a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b9c4:	4b42      	ldr	r3, [pc, #264]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800b9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	031b      	lsls	r3, r3, #12
 800b9d2:	493f      	ldr	r1, [pc, #252]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	628b      	str	r3, [r1, #40]	; 0x28
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	3b01      	subs	r3, #1
 800b9e8:	025b      	lsls	r3, r3, #9
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	431a      	orrs	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	041b      	lsls	r3, r3, #16
 800b9f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b9fa:	431a      	orrs	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	061b      	lsls	r3, r3, #24
 800ba04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ba08:	4931      	ldr	r1, [pc, #196]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ba0e:	4b30      	ldr	r3, [pc, #192]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	492d      	ldr	r1, [pc, #180]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ba20:	4b2b      	ldr	r3, [pc, #172]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba24:	f023 0220 	bic.w	r2, r3, #32
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	699b      	ldr	r3, [r3, #24]
 800ba2c:	4928      	ldr	r1, [pc, #160]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ba32:	4b27      	ldr	r3, [pc, #156]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba36:	4a26      	ldr	r2, [pc, #152]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba38:	f023 0310 	bic.w	r3, r3, #16
 800ba3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ba3e:	4b24      	ldr	r3, [pc, #144]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba42:	4b24      	ldr	r3, [pc, #144]	; (800bad4 <RCCEx_PLL2_Config+0x160>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	69d2      	ldr	r2, [r2, #28]
 800ba4a:	00d2      	lsls	r2, r2, #3
 800ba4c:	4920      	ldr	r1, [pc, #128]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ba52:	4b1f      	ldr	r3, [pc, #124]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba56:	4a1e      	ldr	r2, [pc, #120]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba58:	f043 0310 	orr.w	r3, r3, #16
 800ba5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d106      	bne.n	800ba72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ba64:	4b1a      	ldr	r3, [pc, #104]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	4a19      	ldr	r2, [pc, #100]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba70:	e00f      	b.n	800ba92 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d106      	bne.n	800ba86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ba78:	4b15      	ldr	r3, [pc, #84]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	4a14      	ldr	r2, [pc, #80]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba82:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba84:	e005      	b.n	800ba92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ba86:	4b12      	ldr	r3, [pc, #72]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8a:	4a11      	ldr	r2, [pc, #68]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ba92:	4b0f      	ldr	r3, [pc, #60]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a0e      	ldr	r2, [pc, #56]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800ba98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ba9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba9e:	f7f8 f845 	bl	8003b2c <HAL_GetTick>
 800baa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800baa4:	e008      	b.n	800bab8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800baa6:	f7f8 f841 	bl	8003b2c <HAL_GetTick>
 800baaa:	4602      	mov	r2, r0
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	1ad3      	subs	r3, r2, r3
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	d901      	bls.n	800bab8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bab4:	2303      	movs	r3, #3
 800bab6:	e006      	b.n	800bac6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bab8:	4b05      	ldr	r3, [pc, #20]	; (800bad0 <RCCEx_PLL2_Config+0x15c>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d0f0      	beq.n	800baa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	58024400 	.word	0x58024400
 800bad4:	ffff0007 	.word	0xffff0007

0800bad8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bae2:	2300      	movs	r3, #0
 800bae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bae6:	4b53      	ldr	r3, [pc, #332]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baea:	f003 0303 	and.w	r3, r3, #3
 800baee:	2b03      	cmp	r3, #3
 800baf0:	d101      	bne.n	800baf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e099      	b.n	800bc2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800baf6:	4b4f      	ldr	r3, [pc, #316]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a4e      	ldr	r2, [pc, #312]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bafc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb02:	f7f8 f813 	bl	8003b2c <HAL_GetTick>
 800bb06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb08:	e008      	b.n	800bb1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bb0a:	f7f8 f80f 	bl	8003b2c <HAL_GetTick>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	1ad3      	subs	r3, r2, r3
 800bb14:	2b02      	cmp	r3, #2
 800bb16:	d901      	bls.n	800bb1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	e086      	b.n	800bc2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb1c:	4b45      	ldr	r3, [pc, #276]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1f0      	bne.n	800bb0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bb28:	4b42      	ldr	r3, [pc, #264]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	051b      	lsls	r3, r3, #20
 800bb36:	493f      	ldr	r1, [pc, #252]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	628b      	str	r3, [r1, #40]	; 0x28
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	3b01      	subs	r3, #1
 800bb42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	025b      	lsls	r3, r3, #9
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	431a      	orrs	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	041b      	lsls	r3, r3, #16
 800bb5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb5e:	431a      	orrs	r2, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	3b01      	subs	r3, #1
 800bb66:	061b      	lsls	r3, r3, #24
 800bb68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bb6c:	4931      	ldr	r1, [pc, #196]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bb72:	4b30      	ldr	r3, [pc, #192]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	695b      	ldr	r3, [r3, #20]
 800bb7e:	492d      	ldr	r1, [pc, #180]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb80:	4313      	orrs	r3, r2
 800bb82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bb84:	4b2b      	ldr	r3, [pc, #172]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	4928      	ldr	r1, [pc, #160]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb92:	4313      	orrs	r3, r2
 800bb94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bb96:	4b27      	ldr	r3, [pc, #156]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb9a:	4a26      	ldr	r2, [pc, #152]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bb9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bba0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bba2:	4b24      	ldr	r3, [pc, #144]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bba6:	4b24      	ldr	r3, [pc, #144]	; (800bc38 <RCCEx_PLL3_Config+0x160>)
 800bba8:	4013      	ands	r3, r2
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	69d2      	ldr	r2, [r2, #28]
 800bbae:	00d2      	lsls	r2, r2, #3
 800bbb0:	4920      	ldr	r1, [pc, #128]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbb2:	4313      	orrs	r3, r2
 800bbb4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bbb6:	4b1f      	ldr	r3, [pc, #124]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbba:	4a1e      	ldr	r2, [pc, #120]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d106      	bne.n	800bbd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bbc8:	4b1a      	ldr	r3, [pc, #104]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	4a19      	ldr	r2, [pc, #100]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bbd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bbd4:	e00f      	b.n	800bbf6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d106      	bne.n	800bbea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bbdc:	4b15      	ldr	r3, [pc, #84]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe0:	4a14      	ldr	r2, [pc, #80]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbe2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bbe6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bbe8:	e005      	b.n	800bbf6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bbea:	4b12      	ldr	r3, [pc, #72]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbee:	4a11      	ldr	r2, [pc, #68]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbf0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bbf4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bbf6:	4b0f      	ldr	r3, [pc, #60]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a0e      	ldr	r2, [pc, #56]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bbfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc02:	f7f7 ff93 	bl	8003b2c <HAL_GetTick>
 800bc06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc08:	e008      	b.n	800bc1c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bc0a:	f7f7 ff8f 	bl	8003b2c <HAL_GetTick>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	1ad3      	subs	r3, r2, r3
 800bc14:	2b02      	cmp	r3, #2
 800bc16:	d901      	bls.n	800bc1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e006      	b.n	800bc2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc1c:	4b05      	ldr	r3, [pc, #20]	; (800bc34 <RCCEx_PLL3_Config+0x15c>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d0f0      	beq.n	800bc0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bc28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	3710      	adds	r7, #16
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	58024400 	.word	0x58024400
 800bc38:	ffff0007 	.word	0xffff0007

0800bc3c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d101      	bne.n	800bc4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e0f1      	b.n	800be32 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2200      	movs	r2, #0
 800bc52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a78      	ldr	r2, [pc, #480]	; (800be3c <HAL_SPI_Init+0x200>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d00f      	beq.n	800bc7e <HAL_SPI_Init+0x42>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a77      	ldr	r2, [pc, #476]	; (800be40 <HAL_SPI_Init+0x204>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d00a      	beq.n	800bc7e <HAL_SPI_Init+0x42>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a75      	ldr	r2, [pc, #468]	; (800be44 <HAL_SPI_Init+0x208>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d005      	beq.n	800bc7e <HAL_SPI_Init+0x42>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	2b0f      	cmp	r3, #15
 800bc78:	d901      	bls.n	800bc7e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e0d9      	b.n	800be32 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f001 f880 	bl	800cd84 <SPI_GetPacketSize>
 800bc84:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a6c      	ldr	r2, [pc, #432]	; (800be3c <HAL_SPI_Init+0x200>)
 800bc8c:	4293      	cmp	r3, r2
 800bc8e:	d00c      	beq.n	800bcaa <HAL_SPI_Init+0x6e>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a6a      	ldr	r2, [pc, #424]	; (800be40 <HAL_SPI_Init+0x204>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d007      	beq.n	800bcaa <HAL_SPI_Init+0x6e>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a69      	ldr	r2, [pc, #420]	; (800be44 <HAL_SPI_Init+0x208>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d002      	beq.n	800bcaa <HAL_SPI_Init+0x6e>
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2b08      	cmp	r3, #8
 800bca8:	d811      	bhi.n	800bcce <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800bcae:	4a63      	ldr	r2, [pc, #396]	; (800be3c <HAL_SPI_Init+0x200>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d009      	beq.n	800bcc8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a61      	ldr	r2, [pc, #388]	; (800be40 <HAL_SPI_Init+0x204>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d004      	beq.n	800bcc8 <HAL_SPI_Init+0x8c>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	4a60      	ldr	r2, [pc, #384]	; (800be44 <HAL_SPI_Init+0x208>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d104      	bne.n	800bcd2 <HAL_SPI_Init+0x96>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b10      	cmp	r3, #16
 800bccc:	d901      	bls.n	800bcd2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e0af      	b.n	800be32 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d106      	bne.n	800bcec <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2200      	movs	r2, #0
 800bce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7f6 faa0 	bl	800222c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2202      	movs	r2, #2
 800bcf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f022 0201 	bic.w	r2, r2, #1
 800bd02:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800bd0e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	699b      	ldr	r3, [r3, #24]
 800bd14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd18:	d119      	bne.n	800bd4e <HAL_SPI_Init+0x112>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd22:	d103      	bne.n	800bd2c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d008      	beq.n	800bd3e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10c      	bne.n	800bd4e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bd38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd3c:	d107      	bne.n	800bd4e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bd4c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	69da      	ldr	r2, [r3, #28]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd56:	431a      	orrs	r2, r3
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	431a      	orrs	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd60:	ea42 0103 	orr.w	r1, r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	68da      	ldr	r2, [r3, #12]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	430a      	orrs	r2, r1
 800bd6e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7e:	431a      	orrs	r2, r3
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	699b      	ldr	r3, [r3, #24]
 800bd84:	431a      	orrs	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	431a      	orrs	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	695b      	ldr	r3, [r3, #20]
 800bd90:	431a      	orrs	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6a1b      	ldr	r3, [r3, #32]
 800bd96:	431a      	orrs	r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda2:	431a      	orrs	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdae:	ea42 0103 	orr.w	r1, r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d113      	bne.n	800bdee <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdd8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	689b      	ldr	r3, [r3, #8]
 800bde0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bdec:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f022 0201 	bic.w	r2, r2, #1
 800bdfc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	430a      	orrs	r2, r1
 800be1e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}
 800be3a:	bf00      	nop
 800be3c:	40013000 	.word	0x40013000
 800be40:	40003800 	.word	0x40003800
 800be44:	40003c00 	.word	0x40003c00

0800be48 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08a      	sub	sp, #40	; 0x28
 800be4c:	af02      	add	r7, sp, #8
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	60b9      	str	r1, [r7, #8]
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	4613      	mov	r3, r2
 800be56:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3320      	adds	r3, #32
 800be5e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be60:	2300      	movs	r3, #0
 800be62:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d101      	bne.n	800be72 <HAL_SPI_Transmit+0x2a>
 800be6e:	2302      	movs	r3, #2
 800be70:	e1d7      	b.n	800c222 <HAL_SPI_Transmit+0x3da>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	2201      	movs	r2, #1
 800be76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be7a:	f7f7 fe57 	bl	8003b2c <HAL_GetTick>
 800be7e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d007      	beq.n	800be9c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800be8c:	2302      	movs	r3, #2
 800be8e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2200      	movs	r2, #0
 800be94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800be98:	7efb      	ldrb	r3, [r7, #27]
 800be9a:	e1c2      	b.n	800c222 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d002      	beq.n	800bea8 <HAL_SPI_Transmit+0x60>
 800bea2:	88fb      	ldrh	r3, [r7, #6]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d107      	bne.n	800beb8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800bea8:	2301      	movs	r3, #1
 800beaa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800beb4:	7efb      	ldrb	r3, [r7, #27]
 800beb6:	e1b4      	b.n	800c222 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	2203      	movs	r2, #3
 800bebc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	88fa      	ldrh	r2, [r7, #6]
 800bed2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	88fa      	ldrh	r2, [r7, #6]
 800beda:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2200      	movs	r2, #0
 800befe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bf08:	d107      	bne.n	800bf1a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf18:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	4b96      	ldr	r3, [pc, #600]	; (800c17c <HAL_SPI_Transmit+0x334>)
 800bf22:	4013      	ands	r3, r2
 800bf24:	88f9      	ldrh	r1, [r7, #6]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	6812      	ldr	r2, [r2, #0]
 800bf2a:	430b      	orrs	r3, r1
 800bf2c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f042 0201 	orr.w	r2, r2, #1
 800bf3c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bf46:	d107      	bne.n	800bf58 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	2b0f      	cmp	r3, #15
 800bf5e:	d947      	bls.n	800bff0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bf60:	e03f      	b.n	800bfe2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	695b      	ldr	r3, [r3, #20]
 800bf68:	f003 0302 	and.w	r3, r3, #2
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d114      	bne.n	800bf9a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6812      	ldr	r2, [r2, #0]
 800bf7a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf80:	1d1a      	adds	r2, r3, #4
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	b29a      	uxth	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800bf98:	e023      	b.n	800bfe2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf9a:	f7f7 fdc7 	bl	8003b2c <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d803      	bhi.n	800bfb2 <HAL_SPI_Transmit+0x16a>
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb0:	d102      	bne.n	800bfb8 <HAL_SPI_Transmit+0x170>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d114      	bne.n	800bfe2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f000 fe15 	bl	800cbe8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e11f      	b.n	800c222 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800bfe8:	b29b      	uxth	r3, r3
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1b9      	bne.n	800bf62 <HAL_SPI_Transmit+0x11a>
 800bfee:	e0f2      	b.n	800c1d6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	2b07      	cmp	r3, #7
 800bff6:	f240 80e7 	bls.w	800c1c8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bffa:	e05d      	b.n	800c0b8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	695b      	ldr	r3, [r3, #20]
 800c002:	f003 0302 	and.w	r3, r3, #2
 800c006:	2b02      	cmp	r3, #2
 800c008:	d132      	bne.n	800c070 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c010:	b29b      	uxth	r3, r3
 800c012:	2b01      	cmp	r3, #1
 800c014:	d918      	bls.n	800c048 <HAL_SPI_Transmit+0x200>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d014      	beq.n	800c048 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6812      	ldr	r2, [r2, #0]
 800c028:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c02e:	1d1a      	adds	r2, r3, #4
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c03a:	b29b      	uxth	r3, r3
 800c03c:	3b02      	subs	r3, #2
 800c03e:	b29a      	uxth	r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c046:	e037      	b.n	800c0b8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c04c:	881a      	ldrh	r2, [r3, #0]
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c056:	1c9a      	adds	r2, r3, #2
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c062:	b29b      	uxth	r3, r3
 800c064:	3b01      	subs	r3, #1
 800c066:	b29a      	uxth	r2, r3
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c06e:	e023      	b.n	800c0b8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c070:	f7f7 fd5c 	bl	8003b2c <HAL_GetTick>
 800c074:	4602      	mov	r2, r0
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d803      	bhi.n	800c088 <HAL_SPI_Transmit+0x240>
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c086:	d102      	bne.n	800c08e <HAL_SPI_Transmit+0x246>
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d114      	bne.n	800c0b8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c08e:	68f8      	ldr	r0, [r7, #12]
 800c090:	f000 fdaa 	bl	800cbe8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c0a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	e0b4      	b.n	800c222 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d19b      	bne.n	800bffc <HAL_SPI_Transmit+0x1b4>
 800c0c4:	e087      	b.n	800c1d6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	f003 0302 	and.w	r3, r3, #2
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d155      	bne.n	800c180 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d918      	bls.n	800c112 <HAL_SPI_Transmit+0x2ca>
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e4:	2b40      	cmp	r3, #64	; 0x40
 800c0e6:	d914      	bls.n	800c112 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	6812      	ldr	r2, [r2, #0]
 800c0f2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0f8:	1d1a      	adds	r2, r3, #4
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c104:	b29b      	uxth	r3, r3
 800c106:	3b04      	subs	r3, #4
 800c108:	b29a      	uxth	r2, r3
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c110:	e05a      	b.n	800c1c8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c118:	b29b      	uxth	r3, r3
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d917      	bls.n	800c14e <HAL_SPI_Transmit+0x306>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c122:	2b00      	cmp	r3, #0
 800c124:	d013      	beq.n	800c14e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c12a:	881a      	ldrh	r2, [r3, #0]
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c134:	1c9a      	adds	r2, r3, #2
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c140:	b29b      	uxth	r3, r3
 800c142:	3b02      	subs	r3, #2
 800c144:	b29a      	uxth	r2, r3
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c14c:	e03c      	b.n	800c1c8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	3320      	adds	r3, #32
 800c158:	7812      	ldrb	r2, [r2, #0]
 800c15a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c16c:	b29b      	uxth	r3, r3
 800c16e:	3b01      	subs	r3, #1
 800c170:	b29a      	uxth	r2, r3
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c178:	e026      	b.n	800c1c8 <HAL_SPI_Transmit+0x380>
 800c17a:	bf00      	nop
 800c17c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c180:	f7f7 fcd4 	bl	8003b2c <HAL_GetTick>
 800c184:	4602      	mov	r2, r0
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d803      	bhi.n	800c198 <HAL_SPI_Transmit+0x350>
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c196:	d102      	bne.n	800c19e <HAL_SPI_Transmit+0x356>
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d114      	bne.n	800c1c8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f000 fd22 	bl	800cbe8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e02c      	b.n	800c222 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f47f af78 	bne.w	800c0c6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	9300      	str	r3, [sp, #0]
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2108      	movs	r1, #8
 800c1e0:	68f8      	ldr	r0, [r7, #12]
 800c1e2:	f000 fda1 	bl	800cd28 <SPI_WaitOnFlagUntilTimeout>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d007      	beq.n	800c1fc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1f2:	f043 0220 	orr.w	r2, r3, #32
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 fcf3 	bl	800cbe8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d001      	beq.n	800c220 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c21c:	2301      	movs	r3, #1
 800c21e:	e000      	b.n	800c222 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c220:	7efb      	ldrb	r3, [r7, #27]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3720      	adds	r7, #32
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop

0800c22c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08a      	sub	sp, #40	; 0x28
 800c230:	af02      	add	r7, sp, #8
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	603b      	str	r3, [r7, #0]
 800c238:	4613      	mov	r3, r2
 800c23a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3330      	adds	r3, #48	; 0x30
 800c246:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c250:	d112      	bne.n	800c278 <HAL_SPI_Receive+0x4c>
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	689b      	ldr	r3, [r3, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d10e      	bne.n	800c278 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2204      	movs	r2, #4
 800c25e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c262:	88fa      	ldrh	r2, [r7, #6]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	9300      	str	r3, [sp, #0]
 800c268:	4613      	mov	r3, r2
 800c26a:	68ba      	ldr	r2, [r7, #8]
 800c26c:	68b9      	ldr	r1, [r7, #8]
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f000 f9ce 	bl	800c610 <HAL_SPI_TransmitReceive>
 800c274:	4603      	mov	r3, r0
 800c276:	e1c7      	b.n	800c608 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d101      	bne.n	800c286 <HAL_SPI_Receive+0x5a>
 800c282:	2302      	movs	r3, #2
 800c284:	e1c0      	b.n	800c608 <HAL_SPI_Receive+0x3dc>
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c28e:	f7f7 fc4d 	bl	8003b2c <HAL_GetTick>
 800c292:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d007      	beq.n	800c2b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c2ac:	7ffb      	ldrb	r3, [r7, #31]
 800c2ae:	e1ab      	b.n	800c608 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d002      	beq.n	800c2bc <HAL_SPI_Receive+0x90>
 800c2b6:	88fb      	ldrh	r3, [r7, #6]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d107      	bne.n	800c2cc <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800c2bc:	2301      	movs	r3, #1
 800c2be:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c2c8:	7ffb      	ldrb	r3, [r7, #31]
 800c2ca:	e19d      	b.n	800c608 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2204      	movs	r2, #4
 800c2d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	88fa      	ldrh	r2, [r7, #6]
 800c2e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	88fa      	ldrh	r2, [r7, #6]
 800c2ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2200      	movs	r2, #0
 800c30c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	2200      	movs	r2, #0
 800c312:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	689b      	ldr	r3, [r3, #8]
 800c318:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c31c:	d107      	bne.n	800c32e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c32c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	685a      	ldr	r2, [r3, #4]
 800c334:	4b94      	ldr	r3, [pc, #592]	; (800c588 <HAL_SPI_Receive+0x35c>)
 800c336:	4013      	ands	r3, r2
 800c338:	88f9      	ldrh	r1, [r7, #6]
 800c33a:	68fa      	ldr	r2, [r7, #12]
 800c33c:	6812      	ldr	r2, [r2, #0]
 800c33e:	430b      	orrs	r3, r1
 800c340:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f042 0201 	orr.w	r2, r2, #1
 800c350:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c35a:	d107      	bne.n	800c36c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c36a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	2b0f      	cmp	r3, #15
 800c372:	d948      	bls.n	800c406 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c374:	e040      	b.n	800c3f8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	695a      	ldr	r2, [r3, #20]
 800c37c:	f248 0308 	movw	r3, #32776	; 0x8008
 800c380:	4013      	ands	r3, r2
 800c382:	2b00      	cmp	r3, #0
 800c384:	d014      	beq.n	800c3b0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c38e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c390:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c396:	1d1a      	adds	r2, r3, #4
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	3b01      	subs	r3, #1
 800c3a6:	b29a      	uxth	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c3ae:	e023      	b.n	800c3f8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3b0:	f7f7 fbbc 	bl	8003b2c <HAL_GetTick>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	1ad3      	subs	r3, r2, r3
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d803      	bhi.n	800c3c8 <HAL_SPI_Receive+0x19c>
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c6:	d102      	bne.n	800c3ce <HAL_SPI_Receive+0x1a2>
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d114      	bne.n	800c3f8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 fc0a 	bl	800cbe8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c3f4:	2303      	movs	r3, #3
 800c3f6:	e107      	b.n	800c608 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1b8      	bne.n	800c376 <HAL_SPI_Receive+0x14a>
 800c404:	e0ed      	b.n	800c5e2 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	2b07      	cmp	r3, #7
 800c40c:	f240 80e2 	bls.w	800c5d4 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800c410:	e05b      	b.n	800c4ca <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	695b      	ldr	r3, [r3, #20]
 800c418:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d030      	beq.n	800c482 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	695b      	ldr	r3, [r3, #20]
 800c426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d014      	beq.n	800c458 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c436:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c438:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c43e:	1d1a      	adds	r2, r3, #4
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	3b02      	subs	r3, #2
 800c44e:	b29a      	uxth	r2, r3
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c456:	e038      	b.n	800c4ca <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c45c:	69ba      	ldr	r2, [r7, #24]
 800c45e:	8812      	ldrh	r2, [r2, #0]
 800c460:	b292      	uxth	r2, r2
 800c462:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c468:	1c9a      	adds	r2, r3, #2
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c474:	b29b      	uxth	r3, r3
 800c476:	3b01      	subs	r3, #1
 800c478:	b29a      	uxth	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c480:	e023      	b.n	800c4ca <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c482:	f7f7 fb53 	bl	8003b2c <HAL_GetTick>
 800c486:	4602      	mov	r2, r0
 800c488:	697b      	ldr	r3, [r7, #20]
 800c48a:	1ad3      	subs	r3, r2, r3
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d803      	bhi.n	800c49a <HAL_SPI_Receive+0x26e>
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c498:	d102      	bne.n	800c4a0 <HAL_SPI_Receive+0x274>
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d114      	bne.n	800c4ca <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f000 fba1 	bl	800cbe8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	e09e      	b.n	800c608 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c4d0:	b29b      	uxth	r3, r3
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d19d      	bne.n	800c412 <HAL_SPI_Receive+0x1e6>
 800c4d6:	e084      	b.n	800c5e2 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	695b      	ldr	r3, [r3, #20]
 800c4de:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d052      	beq.n	800c58c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	695b      	ldr	r3, [r3, #20]
 800c4ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d014      	beq.n	800c51e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c4fe:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c504:	1d1a      	adds	r2, r3, #4
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c510:	b29b      	uxth	r3, r3
 800c512:	3b04      	subs	r3, #4
 800c514:	b29a      	uxth	r2, r3
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c51c:	e05a      	b.n	800c5d4 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c528:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c52c:	d914      	bls.n	800c558 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c532:	69ba      	ldr	r2, [r7, #24]
 800c534:	8812      	ldrh	r2, [r2, #0]
 800c536:	b292      	uxth	r2, r2
 800c538:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c53e:	1c9a      	adds	r2, r3, #2
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	3b02      	subs	r3, #2
 800c54e:	b29a      	uxth	r2, r3
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c556:	e03d      	b.n	800c5d4 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c564:	7812      	ldrb	r2, [r2, #0]
 800c566:	b2d2      	uxtb	r2, r2
 800c568:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	3b01      	subs	r3, #1
 800c57e:	b29a      	uxth	r2, r3
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c586:	e025      	b.n	800c5d4 <HAL_SPI_Receive+0x3a8>
 800c588:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c58c:	f7f7 face 	bl	8003b2c <HAL_GetTick>
 800c590:	4602      	mov	r2, r0
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	1ad3      	subs	r3, r2, r3
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d803      	bhi.n	800c5a4 <HAL_SPI_Receive+0x378>
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5a2:	d102      	bne.n	800c5aa <HAL_SPI_Receive+0x37e>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d114      	bne.n	800c5d4 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c5aa:	68f8      	ldr	r0, [r7, #12]
 800c5ac:	f000 fb1c 	bl	800cbe8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e019      	b.n	800c608 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f47f af7b 	bne.w	800c4d8 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f000 fb00 	bl	800cbe8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	e000      	b.n	800c608 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800c606:	7ffb      	ldrb	r3, [r7, #31]
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3720      	adds	r7, #32
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08e      	sub	sp, #56	; 0x38
 800c614:	af02      	add	r7, sp, #8
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3320      	adds	r3, #32
 800c62a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	3330      	adds	r3, #48	; 0x30
 800c632:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d101      	bne.n	800c642 <HAL_SPI_TransmitReceive+0x32>
 800c63e:	2302      	movs	r3, #2
 800c640:	e2ce      	b.n	800cbe0 <HAL_SPI_TransmitReceive+0x5d0>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2201      	movs	r2, #1
 800c646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c64a:	f7f7 fa6f 	bl	8003b2c <HAL_GetTick>
 800c64e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800c650:	887b      	ldrh	r3, [r7, #2]
 800c652:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800c654:	887b      	ldrh	r3, [r7, #2]
 800c656:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c65e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c666:	7efb      	ldrb	r3, [r7, #27]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d014      	beq.n	800c696 <HAL_SPI_TransmitReceive+0x86>
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c672:	d106      	bne.n	800c682 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d102      	bne.n	800c682 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c67c:	7efb      	ldrb	r3, [r7, #27]
 800c67e:	2b04      	cmp	r3, #4
 800c680:	d009      	beq.n	800c696 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800c682:	2302      	movs	r3, #2
 800c684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2200      	movs	r2, #0
 800c68c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c694:	e2a4      	b.n	800cbe0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d005      	beq.n	800c6a8 <HAL_SPI_TransmitReceive+0x98>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d002      	beq.n	800c6a8 <HAL_SPI_TransmitReceive+0x98>
 800c6a2:	887b      	ldrh	r3, [r7, #2]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d109      	bne.n	800c6bc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c6b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c6ba:	e291      	b.n	800cbe0 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b04      	cmp	r3, #4
 800c6c6:	d003      	beq.n	800c6d0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2205      	movs	r2, #5
 800c6cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	887a      	ldrh	r2, [r7, #2]
 800c6e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	887a      	ldrh	r2, [r7, #2]
 800c6ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	68ba      	ldr	r2, [r7, #8]
 800c6f2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	887a      	ldrh	r2, [r7, #2]
 800c6f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	887a      	ldrh	r2, [r7, #2]
 800c700:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	685a      	ldr	r2, [r3, #4]
 800c716:	4b9f      	ldr	r3, [pc, #636]	; (800c994 <HAL_SPI_TransmitReceive+0x384>)
 800c718:	4013      	ands	r3, r2
 800c71a:	8879      	ldrh	r1, [r7, #2]
 800c71c:	68fa      	ldr	r2, [r7, #12]
 800c71e:	6812      	ldr	r2, [r2, #0]
 800c720:	430b      	orrs	r3, r1
 800c722:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f042 0201 	orr.w	r2, r2, #1
 800c732:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c73c:	d107      	bne.n	800c74e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681a      	ldr	r2, [r3, #0]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c74c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	2b0f      	cmp	r3, #15
 800c754:	d970      	bls.n	800c838 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c756:	e068      	b.n	800c82a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b02      	cmp	r3, #2
 800c764:	d11a      	bne.n	800c79c <HAL_SPI_TransmitReceive+0x18c>
 800c766:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d017      	beq.n	800c79c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6812      	ldr	r2, [r2, #0]
 800c776:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c77c:	1d1a      	adds	r2, r3, #4
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c788:	b29b      	uxth	r3, r3
 800c78a:	3b01      	subs	r3, #1
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c79a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	695a      	ldr	r2, [r3, #20]
 800c7a2:	f248 0308 	movw	r3, #32776	; 0x8008
 800c7a6:	4013      	ands	r3, r2
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d01a      	beq.n	800c7e2 <HAL_SPI_TransmitReceive+0x1d2>
 800c7ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d017      	beq.n	800c7e2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c7bc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c7c2:	1d1a      	adds	r2, r3, #4
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	b29a      	uxth	r2, r3
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c7e0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c7e2:	f7f7 f9a3 	bl	8003b2c <HAL_GetTick>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	1ad3      	subs	r3, r2, r3
 800c7ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d803      	bhi.n	800c7fa <HAL_SPI_TransmitReceive+0x1ea>
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f8:	d102      	bne.n	800c800 <HAL_SPI_TransmitReceive+0x1f0>
 800c7fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d114      	bne.n	800c82a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	f000 f9f1 	bl	800cbe8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2200      	movs	r2, #0
 800c80a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c814:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c826:	2303      	movs	r3, #3
 800c828:	e1da      	b.n	800cbe0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c82a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d193      	bne.n	800c758 <HAL_SPI_TransmitReceive+0x148>
 800c830:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c832:	2b00      	cmp	r3, #0
 800c834:	d190      	bne.n	800c758 <HAL_SPI_TransmitReceive+0x148>
 800c836:	e1ac      	b.n	800cb92 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	2b07      	cmp	r3, #7
 800c83e:	f240 81a0 	bls.w	800cb82 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c842:	e0a9      	b.n	800c998 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	695b      	ldr	r3, [r3, #20]
 800c84a:	f003 0302 	and.w	r3, r3, #2
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d139      	bne.n	800c8c6 <HAL_SPI_TransmitReceive+0x2b6>
 800c852:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c854:	2b00      	cmp	r3, #0
 800c856:	d036      	beq.n	800c8c6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c858:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d91c      	bls.n	800c898 <HAL_SPI_TransmitReceive+0x288>
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c862:	2b00      	cmp	r3, #0
 800c864:	d018      	beq.n	800c898 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6812      	ldr	r2, [r2, #0]
 800c870:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c876:	1d1a      	adds	r2, r3, #4
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c882:	b29b      	uxth	r3, r3
 800c884:	3b02      	subs	r3, #2
 800c886:	b29a      	uxth	r2, r3
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c894:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c896:	e016      	b.n	800c8c6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c89c:	881a      	ldrh	r2, [r3, #0]
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8a6:	1c9a      	adds	r2, r3, #2
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	695b      	ldr	r3, [r3, #20]
 800c8cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d03a      	beq.n	800c94a <HAL_SPI_TransmitReceive+0x33a>
 800c8d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d037      	beq.n	800c94a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	695b      	ldr	r3, [r3, #20]
 800c8e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d018      	beq.n	800c91a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c8f2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8f8:	1d1a      	adds	r2, r3, #4
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c904:	b29b      	uxth	r3, r3
 800c906:	3b02      	subs	r3, #2
 800c908:	b29a      	uxth	r2, r3
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c916:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c918:	e017      	b.n	800c94a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c91e:	6a3a      	ldr	r2, [r7, #32]
 800c920:	8812      	ldrh	r2, [r2, #0]
 800c922:	b292      	uxth	r2, r2
 800c924:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c92a:	1c9a      	adds	r2, r3, #2
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c936:	b29b      	uxth	r3, r3
 800c938:	3b01      	subs	r3, #1
 800c93a:	b29a      	uxth	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c948:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c94a:	f7f7 f8ef 	bl	8003b2c <HAL_GetTick>
 800c94e:	4602      	mov	r2, r0
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	1ad3      	subs	r3, r2, r3
 800c954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c956:	429a      	cmp	r2, r3
 800c958:	d803      	bhi.n	800c962 <HAL_SPI_TransmitReceive+0x352>
 800c95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c960:	d102      	bne.n	800c968 <HAL_SPI_TransmitReceive+0x358>
 800c962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c964:	2b00      	cmp	r3, #0
 800c966:	d117      	bne.n	800c998 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f000 f93d 	bl	800cbe8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c97c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2201      	movs	r2, #1
 800c98a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c98e:	2303      	movs	r3, #3
 800c990:	e126      	b.n	800cbe0 <HAL_SPI_TransmitReceive+0x5d0>
 800c992:	bf00      	nop
 800c994:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c998:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	f47f af52 	bne.w	800c844 <HAL_SPI_TransmitReceive+0x234>
 800c9a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f47f af4e 	bne.w	800c844 <HAL_SPI_TransmitReceive+0x234>
 800c9a8:	e0f3      	b.n	800cb92 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	695b      	ldr	r3, [r3, #20]
 800c9b0:	f003 0302 	and.w	r3, r3, #2
 800c9b4:	2b02      	cmp	r3, #2
 800c9b6:	d15a      	bne.n	800ca6e <HAL_SPI_TransmitReceive+0x45e>
 800c9b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d057      	beq.n	800ca6e <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c9be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9c0:	2b03      	cmp	r3, #3
 800c9c2:	d91c      	bls.n	800c9fe <HAL_SPI_TransmitReceive+0x3ee>
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c8:	2b40      	cmp	r3, #64	; 0x40
 800c9ca:	d918      	bls.n	800c9fe <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	6812      	ldr	r2, [r2, #0]
 800c9d6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9dc:	1d1a      	adds	r2, r3, #4
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	3b04      	subs	r3, #4
 800c9ec:	b29a      	uxth	r2, r3
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c9fc:	e037      	b.n	800ca6e <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c9fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d91b      	bls.n	800ca3c <HAL_SPI_TransmitReceive+0x42c>
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d017      	beq.n	800ca3c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca10:	881a      	ldrh	r2, [r3, #0]
 800ca12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca14:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca1a:	1c9a      	adds	r2, r3, #2
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca26:	b29b      	uxth	r3, r3
 800ca28:	3b02      	subs	r3, #2
 800ca2a:	b29a      	uxth	r2, r3
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca38:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ca3a:	e018      	b.n	800ca6e <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	3320      	adds	r3, #32
 800ca46:	7812      	ldrb	r2, [r2, #0]
 800ca48:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	695b      	ldr	r3, [r3, #20]
 800ca74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d05e      	beq.n	800cb3a <HAL_SPI_TransmitReceive+0x52a>
 800ca7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d05b      	beq.n	800cb3a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	695b      	ldr	r3, [r3, #20]
 800ca88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d018      	beq.n	800cac2 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca9a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800caa0:	1d1a      	adds	r2, r3, #4
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800caac:	b29b      	uxth	r3, r3
 800caae:	3b04      	subs	r3, #4
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cabe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cac0:	e03b      	b.n	800cb3a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800cacc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cad0:	d918      	bls.n	800cb04 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cad6:	6a3a      	ldr	r2, [r7, #32]
 800cad8:	8812      	ldrh	r2, [r2, #0]
 800cada:	b292      	uxth	r2, r2
 800cadc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cae2:	1c9a      	adds	r2, r3, #2
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800caee:	b29b      	uxth	r3, r3
 800caf0:	3b02      	subs	r3, #2
 800caf2:	b29a      	uxth	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb00:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cb02:	e01a      	b.n	800cb3a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb10:	7812      	ldrb	r2, [r2, #0]
 800cb12:	b2d2      	uxtb	r2, r2
 800cb14:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb1a:	1c5a      	adds	r2, r3, #1
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb38:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cb3a:	f7f6 fff7 	bl	8003b2c <HAL_GetTick>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	1ad3      	subs	r3, r2, r3
 800cb44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d803      	bhi.n	800cb52 <HAL_SPI_TransmitReceive+0x542>
 800cb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb50:	d102      	bne.n	800cb58 <HAL_SPI_TransmitReceive+0x548>
 800cb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d114      	bne.n	800cb82 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f000 f845 	bl	800cbe8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	e02e      	b.n	800cbe0 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cb82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f47f af10 	bne.w	800c9aa <HAL_SPI_TransmitReceive+0x39a>
 800cb8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	f47f af0c 	bne.w	800c9aa <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800cb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb94:	9300      	str	r3, [sp, #0]
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	2108      	movs	r1, #8
 800cb9c:	68f8      	ldr	r0, [r7, #12]
 800cb9e:	f000 f8c3 	bl	800cd28 <SPI_WaitOnFlagUntilTimeout>
 800cba2:	4603      	mov	r3, r0
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d007      	beq.n	800cbb8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbae:	f043 0220 	orr.w	r2, r3, #32
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f000 f815 	bl	800cbe8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d001      	beq.n	800cbdc <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	e001      	b.n	800cbe0 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800cbdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3730      	adds	r7, #48	; 0x30
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	695b      	ldr	r3, [r3, #20]
 800cbf6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	699a      	ldr	r2, [r3, #24]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f042 0208 	orr.w	r2, r2, #8
 800cc06:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	699a      	ldr	r2, [r3, #24]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f042 0210 	orr.w	r2, r2, #16
 800cc16:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f022 0201 	bic.w	r2, r2, #1
 800cc26:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	6919      	ldr	r1, [r3, #16]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	4b3c      	ldr	r3, [pc, #240]	; (800cd24 <SPI_CloseTransfer+0x13c>)
 800cc34:	400b      	ands	r3, r1
 800cc36:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	689a      	ldr	r2, [r3, #8]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cc46:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	2b04      	cmp	r3, #4
 800cc52:	d014      	beq.n	800cc7e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f003 0320 	and.w	r3, r3, #32
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00f      	beq.n	800cc7e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	699a      	ldr	r2, [r3, #24]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f042 0220 	orr.w	r2, r2, #32
 800cc7c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	2b03      	cmp	r3, #3
 800cc88:	d014      	beq.n	800ccb4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00f      	beq.n	800ccb4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc9a:	f043 0204 	orr.w	r2, r3, #4
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	699a      	ldr	r2, [r3, #24]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccb2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00f      	beq.n	800ccde <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccc4:	f043 0201 	orr.w	r2, r3, #1
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	699a      	ldr	r2, [r3, #24]
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccdc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00f      	beq.n	800cd08 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccee:	f043 0208 	orr.w	r2, r3, #8
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	699a      	ldr	r2, [r3, #24]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd06:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800cd18:	bf00      	nop
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr
 800cd24:	fffffc90 	.word	0xfffffc90

0800cd28 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	603b      	str	r3, [r7, #0]
 800cd34:	4613      	mov	r3, r2
 800cd36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cd38:	e010      	b.n	800cd5c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd3a:	f7f6 fef7 	bl	8003b2c <HAL_GetTick>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	69ba      	ldr	r2, [r7, #24]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d803      	bhi.n	800cd52 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800cd4a:	69bb      	ldr	r3, [r7, #24]
 800cd4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd50:	d102      	bne.n	800cd58 <SPI_WaitOnFlagUntilTimeout+0x30>
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e00f      	b.n	800cd7c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	695a      	ldr	r2, [r3, #20]
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	4013      	ands	r3, r2
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	bf0c      	ite	eq
 800cd6c:	2301      	moveq	r3, #1
 800cd6e:	2300      	movne	r3, #0
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	461a      	mov	r2, r3
 800cd74:	79fb      	ldrb	r3, [r7, #7]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d0df      	beq.n	800cd3a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b085      	sub	sp, #20
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd90:	095b      	lsrs	r3, r3, #5
 800cd92:	3301      	adds	r3, #1
 800cd94:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	3307      	adds	r3, #7
 800cda2:	08db      	lsrs	r3, r3, #3
 800cda4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	fb02 f303 	mul.w	r3, r2, r3
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3714      	adds	r7, #20
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb8:	4770      	bx	lr

0800cdba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b082      	sub	sp, #8
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d101      	bne.n	800cdcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e049      	b.n	800ce60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdd2:	b2db      	uxtb	r3, r3
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d106      	bne.n	800cde6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	2200      	movs	r2, #0
 800cddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f7f6 f965 	bl	80030b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2202      	movs	r2, #2
 800cdea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681a      	ldr	r2, [r3, #0]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	4610      	mov	r0, r2
 800cdfa:	f000 ff17 	bl	800dc2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2201      	movs	r2, #1
 800ce02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2201      	movs	r2, #1
 800ce12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	2201      	movs	r2, #1
 800ce1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2201      	movs	r2, #1
 800ce3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2201      	movs	r2, #1
 800ce52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2201      	movs	r2, #1
 800ce5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce5e:	2300      	movs	r3, #0
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d001      	beq.n	800ce80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e05e      	b.n	800cf3e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2202      	movs	r2, #2
 800ce84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68da      	ldr	r2, [r3, #12]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f042 0201 	orr.w	r2, r2, #1
 800ce96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a2b      	ldr	r2, [pc, #172]	; (800cf4c <HAL_TIM_Base_Start_IT+0xe4>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d02c      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x94>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceaa:	d027      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x94>
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a27      	ldr	r2, [pc, #156]	; (800cf50 <HAL_TIM_Base_Start_IT+0xe8>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d022      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x94>
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	4a26      	ldr	r2, [pc, #152]	; (800cf54 <HAL_TIM_Base_Start_IT+0xec>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d01d      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x94>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	4a24      	ldr	r2, [pc, #144]	; (800cf58 <HAL_TIM_Base_Start_IT+0xf0>)
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d018      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x94>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	4a23      	ldr	r2, [pc, #140]	; (800cf5c <HAL_TIM_Base_Start_IT+0xf4>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d013      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x94>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a21      	ldr	r2, [pc, #132]	; (800cf60 <HAL_TIM_Base_Start_IT+0xf8>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d00e      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x94>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a20      	ldr	r2, [pc, #128]	; (800cf64 <HAL_TIM_Base_Start_IT+0xfc>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d009      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x94>
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a1e      	ldr	r2, [pc, #120]	; (800cf68 <HAL_TIM_Base_Start_IT+0x100>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d004      	beq.n	800cefc <HAL_TIM_Base_Start_IT+0x94>
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4a1d      	ldr	r2, [pc, #116]	; (800cf6c <HAL_TIM_Base_Start_IT+0x104>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d115      	bne.n	800cf28 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	689a      	ldr	r2, [r3, #8]
 800cf02:	4b1b      	ldr	r3, [pc, #108]	; (800cf70 <HAL_TIM_Base_Start_IT+0x108>)
 800cf04:	4013      	ands	r3, r2
 800cf06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2b06      	cmp	r3, #6
 800cf0c:	d015      	beq.n	800cf3a <HAL_TIM_Base_Start_IT+0xd2>
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf14:	d011      	beq.n	800cf3a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	681a      	ldr	r2, [r3, #0]
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f042 0201 	orr.w	r2, r2, #1
 800cf24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf26:	e008      	b.n	800cf3a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f042 0201 	orr.w	r2, r2, #1
 800cf36:	601a      	str	r2, [r3, #0]
 800cf38:	e000      	b.n	800cf3c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	40010000 	.word	0x40010000
 800cf50:	40000400 	.word	0x40000400
 800cf54:	40000800 	.word	0x40000800
 800cf58:	40000c00 	.word	0x40000c00
 800cf5c:	40010400 	.word	0x40010400
 800cf60:	40001800 	.word	0x40001800
 800cf64:	40014000 	.word	0x40014000
 800cf68:	4000e000 	.word	0x4000e000
 800cf6c:	4000e400 	.word	0x4000e400
 800cf70:	00010007 	.word	0x00010007

0800cf74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d101      	bne.n	800cf86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e049      	b.n	800d01a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf8c:	b2db      	uxtb	r3, r3
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d106      	bne.n	800cfa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f7f5 fff4 	bl	8002f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	3304      	adds	r3, #4
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	f000 fe3a 	bl	800dc2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2201      	movs	r2, #1
 800cfbc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2201      	movs	r2, #1
 800cfc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2201      	movs	r2, #1
 800cfdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2201      	movs	r2, #1
 800cfec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2201      	movs	r2, #1
 800cff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
	...

0800d024 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d109      	bne.n	800d048 <HAL_TIM_PWM_Start+0x24>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	bf14      	ite	ne
 800d040:	2301      	movne	r3, #1
 800d042:	2300      	moveq	r3, #0
 800d044:	b2db      	uxtb	r3, r3
 800d046:	e03c      	b.n	800d0c2 <HAL_TIM_PWM_Start+0x9e>
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2b04      	cmp	r3, #4
 800d04c:	d109      	bne.n	800d062 <HAL_TIM_PWM_Start+0x3e>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d054:	b2db      	uxtb	r3, r3
 800d056:	2b01      	cmp	r3, #1
 800d058:	bf14      	ite	ne
 800d05a:	2301      	movne	r3, #1
 800d05c:	2300      	moveq	r3, #0
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	e02f      	b.n	800d0c2 <HAL_TIM_PWM_Start+0x9e>
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	2b08      	cmp	r3, #8
 800d066:	d109      	bne.n	800d07c <HAL_TIM_PWM_Start+0x58>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	2b01      	cmp	r3, #1
 800d072:	bf14      	ite	ne
 800d074:	2301      	movne	r3, #1
 800d076:	2300      	moveq	r3, #0
 800d078:	b2db      	uxtb	r3, r3
 800d07a:	e022      	b.n	800d0c2 <HAL_TIM_PWM_Start+0x9e>
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	2b0c      	cmp	r3, #12
 800d080:	d109      	bne.n	800d096 <HAL_TIM_PWM_Start+0x72>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d088:	b2db      	uxtb	r3, r3
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	bf14      	ite	ne
 800d08e:	2301      	movne	r3, #1
 800d090:	2300      	moveq	r3, #0
 800d092:	b2db      	uxtb	r3, r3
 800d094:	e015      	b.n	800d0c2 <HAL_TIM_PWM_Start+0x9e>
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	2b10      	cmp	r3, #16
 800d09a:	d109      	bne.n	800d0b0 <HAL_TIM_PWM_Start+0x8c>
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	bf14      	ite	ne
 800d0a8:	2301      	movne	r3, #1
 800d0aa:	2300      	moveq	r3, #0
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	e008      	b.n	800d0c2 <HAL_TIM_PWM_Start+0x9e>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	bf14      	ite	ne
 800d0bc:	2301      	movne	r3, #1
 800d0be:	2300      	moveq	r3, #0
 800d0c0:	b2db      	uxtb	r3, r3
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d001      	beq.n	800d0ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e0ab      	b.n	800d222 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d104      	bne.n	800d0da <HAL_TIM_PWM_Start+0xb6>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0d8:	e023      	b.n	800d122 <HAL_TIM_PWM_Start+0xfe>
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b04      	cmp	r3, #4
 800d0de:	d104      	bne.n	800d0ea <HAL_TIM_PWM_Start+0xc6>
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2202      	movs	r2, #2
 800d0e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0e8:	e01b      	b.n	800d122 <HAL_TIM_PWM_Start+0xfe>
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b08      	cmp	r3, #8
 800d0ee:	d104      	bne.n	800d0fa <HAL_TIM_PWM_Start+0xd6>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0f8:	e013      	b.n	800d122 <HAL_TIM_PWM_Start+0xfe>
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	2b0c      	cmp	r3, #12
 800d0fe:	d104      	bne.n	800d10a <HAL_TIM_PWM_Start+0xe6>
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2202      	movs	r2, #2
 800d104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d108:	e00b      	b.n	800d122 <HAL_TIM_PWM_Start+0xfe>
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	2b10      	cmp	r3, #16
 800d10e:	d104      	bne.n	800d11a <HAL_TIM_PWM_Start+0xf6>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2202      	movs	r2, #2
 800d114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d118:	e003      	b.n	800d122 <HAL_TIM_PWM_Start+0xfe>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2202      	movs	r2, #2
 800d11e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2201      	movs	r2, #1
 800d128:	6839      	ldr	r1, [r7, #0]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f001 f998 	bl	800e460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a3d      	ldr	r2, [pc, #244]	; (800d22c <HAL_TIM_PWM_Start+0x208>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d013      	beq.n	800d162 <HAL_TIM_PWM_Start+0x13e>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a3c      	ldr	r2, [pc, #240]	; (800d230 <HAL_TIM_PWM_Start+0x20c>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d00e      	beq.n	800d162 <HAL_TIM_PWM_Start+0x13e>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a3a      	ldr	r2, [pc, #232]	; (800d234 <HAL_TIM_PWM_Start+0x210>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d009      	beq.n	800d162 <HAL_TIM_PWM_Start+0x13e>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a39      	ldr	r2, [pc, #228]	; (800d238 <HAL_TIM_PWM_Start+0x214>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d004      	beq.n	800d162 <HAL_TIM_PWM_Start+0x13e>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a37      	ldr	r2, [pc, #220]	; (800d23c <HAL_TIM_PWM_Start+0x218>)
 800d15e:	4293      	cmp	r3, r2
 800d160:	d101      	bne.n	800d166 <HAL_TIM_PWM_Start+0x142>
 800d162:	2301      	movs	r3, #1
 800d164:	e000      	b.n	800d168 <HAL_TIM_PWM_Start+0x144>
 800d166:	2300      	movs	r3, #0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d007      	beq.n	800d17c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d17a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a2a      	ldr	r2, [pc, #168]	; (800d22c <HAL_TIM_PWM_Start+0x208>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d02c      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x1bc>
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d18e:	d027      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x1bc>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a2a      	ldr	r2, [pc, #168]	; (800d240 <HAL_TIM_PWM_Start+0x21c>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d022      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x1bc>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	4a29      	ldr	r2, [pc, #164]	; (800d244 <HAL_TIM_PWM_Start+0x220>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d01d      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x1bc>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	4a27      	ldr	r2, [pc, #156]	; (800d248 <HAL_TIM_PWM_Start+0x224>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d018      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x1bc>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	4a1f      	ldr	r2, [pc, #124]	; (800d230 <HAL_TIM_PWM_Start+0x20c>)
 800d1b4:	4293      	cmp	r3, r2
 800d1b6:	d013      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x1bc>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a23      	ldr	r2, [pc, #140]	; (800d24c <HAL_TIM_PWM_Start+0x228>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d00e      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x1bc>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4a1b      	ldr	r2, [pc, #108]	; (800d234 <HAL_TIM_PWM_Start+0x210>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d009      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x1bc>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a1f      	ldr	r2, [pc, #124]	; (800d250 <HAL_TIM_PWM_Start+0x22c>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d004      	beq.n	800d1e0 <HAL_TIM_PWM_Start+0x1bc>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	4a1e      	ldr	r2, [pc, #120]	; (800d254 <HAL_TIM_PWM_Start+0x230>)
 800d1dc:	4293      	cmp	r3, r2
 800d1de:	d115      	bne.n	800d20c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	689a      	ldr	r2, [r3, #8]
 800d1e6:	4b1c      	ldr	r3, [pc, #112]	; (800d258 <HAL_TIM_PWM_Start+0x234>)
 800d1e8:	4013      	ands	r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2b06      	cmp	r3, #6
 800d1f0:	d015      	beq.n	800d21e <HAL_TIM_PWM_Start+0x1fa>
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1f8:	d011      	beq.n	800d21e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f042 0201 	orr.w	r2, r2, #1
 800d208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d20a:	e008      	b.n	800d21e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f042 0201 	orr.w	r2, r2, #1
 800d21a:	601a      	str	r2, [r3, #0]
 800d21c:	e000      	b.n	800d220 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d21e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	40010000 	.word	0x40010000
 800d230:	40010400 	.word	0x40010400
 800d234:	40014000 	.word	0x40014000
 800d238:	40014400 	.word	0x40014400
 800d23c:	40014800 	.word	0x40014800
 800d240:	40000400 	.word	0x40000400
 800d244:	40000800 	.word	0x40000800
 800d248:	40000c00 	.word	0x40000c00
 800d24c:	40001800 	.word	0x40001800
 800d250:	4000e000 	.word	0x4000e000
 800d254:	4000e400 	.word	0x4000e400
 800d258:	00010007 	.word	0x00010007

0800d25c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d266:	2300      	movs	r3, #0
 800d268:	73fb      	strb	r3, [r7, #15]
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	2b0c      	cmp	r3, #12
 800d26e:	d855      	bhi.n	800d31c <HAL_TIM_PWM_Stop_DMA+0xc0>
 800d270:	a201      	add	r2, pc, #4	; (adr r2, 800d278 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800d272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d276:	bf00      	nop
 800d278:	0800d2ad 	.word	0x0800d2ad
 800d27c:	0800d31d 	.word	0x0800d31d
 800d280:	0800d31d 	.word	0x0800d31d
 800d284:	0800d31d 	.word	0x0800d31d
 800d288:	0800d2c9 	.word	0x0800d2c9
 800d28c:	0800d31d 	.word	0x0800d31d
 800d290:	0800d31d 	.word	0x0800d31d
 800d294:	0800d31d 	.word	0x0800d31d
 800d298:	0800d2e5 	.word	0x0800d2e5
 800d29c:	0800d31d 	.word	0x0800d31d
 800d2a0:	0800d31d 	.word	0x0800d31d
 800d2a4:	0800d31d 	.word	0x0800d31d
 800d2a8:	0800d301 	.word	0x0800d301
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	68da      	ldr	r2, [r3, #12]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d2ba:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	f7f9 fe09 	bl	8006ed8 <HAL_DMA_Abort_IT>
      break;
 800d2c6:	e02c      	b.n	800d322 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	68da      	ldr	r2, [r3, #12]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2d6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7f9 fdfb 	bl	8006ed8 <HAL_DMA_Abort_IT>
      break;
 800d2e2:	e01e      	b.n	800d322 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68da      	ldr	r2, [r3, #12]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d2f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f7f9 fded 	bl	8006ed8 <HAL_DMA_Abort_IT>
      break;
 800d2fe:	e010      	b.n	800d322 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	68da      	ldr	r2, [r3, #12]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d30e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d314:	4618      	mov	r0, r3
 800d316:	f7f9 fddf 	bl	8006ed8 <HAL_DMA_Abort_IT>
      break;
 800d31a:	e002      	b.n	800d322 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800d31c:	2301      	movs	r3, #1
 800d31e:	73fb      	strb	r3, [r7, #15]
      break;
 800d320:	bf00      	nop
  }

  if (status == HAL_OK)
 800d322:	7bfb      	ldrb	r3, [r7, #15]
 800d324:	2b00      	cmp	r3, #0
 800d326:	f040 8081 	bne.w	800d42c <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	2200      	movs	r2, #0
 800d330:	6839      	ldr	r1, [r7, #0]
 800d332:	4618      	mov	r0, r3
 800d334:	f001 f894 	bl	800e460 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a3e      	ldr	r2, [pc, #248]	; (800d438 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 800d33e:	4293      	cmp	r3, r2
 800d340:	d013      	beq.n	800d36a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	4a3d      	ldr	r2, [pc, #244]	; (800d43c <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 800d348:	4293      	cmp	r3, r2
 800d34a:	d00e      	beq.n	800d36a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a3b      	ldr	r2, [pc, #236]	; (800d440 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 800d352:	4293      	cmp	r3, r2
 800d354:	d009      	beq.n	800d36a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4a3a      	ldr	r2, [pc, #232]	; (800d444 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d004      	beq.n	800d36a <HAL_TIM_PWM_Stop_DMA+0x10e>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a38      	ldr	r2, [pc, #224]	; (800d448 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 800d366:	4293      	cmp	r3, r2
 800d368:	d101      	bne.n	800d36e <HAL_TIM_PWM_Stop_DMA+0x112>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e000      	b.n	800d370 <HAL_TIM_PWM_Stop_DMA+0x114>
 800d36e:	2300      	movs	r3, #0
 800d370:	2b00      	cmp	r3, #0
 800d372:	d017      	beq.n	800d3a4 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	6a1a      	ldr	r2, [r3, #32]
 800d37a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d37e:	4013      	ands	r3, r2
 800d380:	2b00      	cmp	r3, #0
 800d382:	d10f      	bne.n	800d3a4 <HAL_TIM_PWM_Stop_DMA+0x148>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6a1a      	ldr	r2, [r3, #32]
 800d38a:	f240 4344 	movw	r3, #1092	; 0x444
 800d38e:	4013      	ands	r3, r2
 800d390:	2b00      	cmp	r3, #0
 800d392:	d107      	bne.n	800d3a4 <HAL_TIM_PWM_Stop_DMA+0x148>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d3a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	6a1a      	ldr	r2, [r3, #32]
 800d3aa:	f241 1311 	movw	r3, #4369	; 0x1111
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d10f      	bne.n	800d3d4 <HAL_TIM_PWM_Stop_DMA+0x178>
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6a1a      	ldr	r2, [r3, #32]
 800d3ba:	f240 4344 	movw	r3, #1092	; 0x444
 800d3be:	4013      	ands	r3, r2
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d107      	bne.n	800d3d4 <HAL_TIM_PWM_Stop_DMA+0x178>
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f022 0201 	bic.w	r2, r2, #1
 800d3d2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d104      	bne.n	800d3e4 <HAL_TIM_PWM_Stop_DMA+0x188>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3e2:	e023      	b.n	800d42c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2b04      	cmp	r3, #4
 800d3e8:	d104      	bne.n	800d3f4 <HAL_TIM_PWM_Stop_DMA+0x198>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3f2:	e01b      	b.n	800d42c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	2b08      	cmp	r3, #8
 800d3f8:	d104      	bne.n	800d404 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d402:	e013      	b.n	800d42c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d404:	683b      	ldr	r3, [r7, #0]
 800d406:	2b0c      	cmp	r3, #12
 800d408:	d104      	bne.n	800d414 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d412:	e00b      	b.n	800d42c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	2b10      	cmp	r3, #16
 800d418:	d104      	bne.n	800d424 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d422:	e003      	b.n	800d42c <HAL_TIM_PWM_Stop_DMA+0x1d0>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2201      	movs	r2, #1
 800d428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	40010000 	.word	0x40010000
 800d43c:	40010400 	.word	0x40010400
 800d440:	40014000 	.word	0x40014000
 800d444:	40014400 	.word	0x40014400
 800d448:	40014800 	.word	0x40014800

0800d44c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
 800d454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d45c:	2301      	movs	r3, #1
 800d45e:	e08f      	b.n	800d580 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d466:	b2db      	uxtb	r3, r3
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d106      	bne.n	800d47a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f7f5 ff0d 	bl	8003294 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2202      	movs	r2, #2
 800d47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6899      	ldr	r1, [r3, #8]
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	4b3e      	ldr	r3, [pc, #248]	; (800d588 <HAL_TIM_Encoder_Init+0x13c>)
 800d48e:	400b      	ands	r3, r1
 800d490:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	3304      	adds	r3, #4
 800d49a:	4619      	mov	r1, r3
 800d49c:	4610      	mov	r0, r2
 800d49e:	f000 fbc5 	bl	800dc2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	689b      	ldr	r3, [r3, #8]
 800d4a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	6a1b      	ldr	r3, [r3, #32]
 800d4b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	697a      	ldr	r2, [r7, #20]
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	4b31      	ldr	r3, [pc, #196]	; (800d58c <HAL_TIM_Encoder_Init+0x140>)
 800d4c8:	4013      	ands	r3, r2
 800d4ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	689a      	ldr	r2, [r3, #8]
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	021b      	lsls	r3, r3, #8
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	693a      	ldr	r2, [r7, #16]
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d4de:	693a      	ldr	r2, [r7, #16]
 800d4e0:	4b2b      	ldr	r3, [pc, #172]	; (800d590 <HAL_TIM_Encoder_Init+0x144>)
 800d4e2:	4013      	ands	r3, r2
 800d4e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d4e6:	693a      	ldr	r2, [r7, #16]
 800d4e8:	4b2a      	ldr	r3, [pc, #168]	; (800d594 <HAL_TIM_Encoder_Init+0x148>)
 800d4ea:	4013      	ands	r3, r2
 800d4ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	68da      	ldr	r2, [r3, #12]
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	69db      	ldr	r3, [r3, #28]
 800d4f6:	021b      	lsls	r3, r3, #8
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	693a      	ldr	r2, [r7, #16]
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	011a      	lsls	r2, r3, #4
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	031b      	lsls	r3, r3, #12
 800d50c:	4313      	orrs	r3, r2
 800d50e:	693a      	ldr	r2, [r7, #16]
 800d510:	4313      	orrs	r3, r2
 800d512:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d51a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d522:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	685a      	ldr	r2, [r3, #4]
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	695b      	ldr	r3, [r3, #20]
 800d52c:	011b      	lsls	r3, r3, #4
 800d52e:	4313      	orrs	r3, r2
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	4313      	orrs	r3, r2
 800d534:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	697a      	ldr	r2, [r7, #20]
 800d53c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	693a      	ldr	r2, [r7, #16]
 800d544:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2201      	movs	r2, #1
 800d552:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2201      	movs	r2, #1
 800d562:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2201      	movs	r2, #1
 800d57a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d57e:	2300      	movs	r3, #0
}
 800d580:	4618      	mov	r0, r3
 800d582:	3718      	adds	r7, #24
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	fffebff8 	.word	0xfffebff8
 800d58c:	fffffcfc 	.word	0xfffffcfc
 800d590:	fffff3f3 	.word	0xfffff3f3
 800d594:	ffff0f0f 	.word	0xffff0f0f

0800d598 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	691b      	ldr	r3, [r3, #16]
 800d5a6:	f003 0302 	and.w	r3, r3, #2
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d122      	bne.n	800d5f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	f003 0302 	and.w	r3, r3, #2
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	d11b      	bne.n	800d5f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f06f 0202 	mvn.w	r2, #2
 800d5c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	699b      	ldr	r3, [r3, #24]
 800d5d2:	f003 0303 	and.w	r3, r3, #3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d003      	beq.n	800d5e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 fb12 	bl	800dc04 <HAL_TIM_IC_CaptureCallback>
 800d5e0:	e005      	b.n	800d5ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fb04 	bl	800dbf0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5e8:	6878      	ldr	r0, [r7, #4]
 800d5ea:	f7f4 fb3d 	bl	8001c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2200      	movs	r2, #0
 800d5f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	691b      	ldr	r3, [r3, #16]
 800d5fa:	f003 0304 	and.w	r3, r3, #4
 800d5fe:	2b04      	cmp	r3, #4
 800d600:	d122      	bne.n	800d648 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	f003 0304 	and.w	r3, r3, #4
 800d60c:	2b04      	cmp	r3, #4
 800d60e:	d11b      	bne.n	800d648 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f06f 0204 	mvn.w	r2, #4
 800d618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2202      	movs	r2, #2
 800d61e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	699b      	ldr	r3, [r3, #24]
 800d626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d003      	beq.n	800d636 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fae8 	bl	800dc04 <HAL_TIM_IC_CaptureCallback>
 800d634:	e005      	b.n	800d642 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 fada 	bl	800dbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7f4 fb13 	bl	8001c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	f003 0308 	and.w	r3, r3, #8
 800d652:	2b08      	cmp	r3, #8
 800d654:	d122      	bne.n	800d69c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	f003 0308 	and.w	r3, r3, #8
 800d660:	2b08      	cmp	r3, #8
 800d662:	d11b      	bne.n	800d69c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f06f 0208 	mvn.w	r2, #8
 800d66c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2204      	movs	r2, #4
 800d672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	69db      	ldr	r3, [r3, #28]
 800d67a:	f003 0303 	and.w	r3, r3, #3
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d003      	beq.n	800d68a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fabe 	bl	800dc04 <HAL_TIM_IC_CaptureCallback>
 800d688:	e005      	b.n	800d696 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fab0 	bl	800dbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f7f4 fae9 	bl	8001c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	691b      	ldr	r3, [r3, #16]
 800d6a2:	f003 0310 	and.w	r3, r3, #16
 800d6a6:	2b10      	cmp	r3, #16
 800d6a8:	d122      	bne.n	800d6f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	f003 0310 	and.w	r3, r3, #16
 800d6b4:	2b10      	cmp	r3, #16
 800d6b6:	d11b      	bne.n	800d6f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f06f 0210 	mvn.w	r2, #16
 800d6c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2208      	movs	r2, #8
 800d6c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	69db      	ldr	r3, [r3, #28]
 800d6ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d003      	beq.n	800d6de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 fa94 	bl	800dc04 <HAL_TIM_IC_CaptureCallback>
 800d6dc:	e005      	b.n	800d6ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fa86 	bl	800dbf0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f7f4 fabf 	bl	8001c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	691b      	ldr	r3, [r3, #16]
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d10e      	bne.n	800d71c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	68db      	ldr	r3, [r3, #12]
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	2b01      	cmp	r3, #1
 800d70a:	d107      	bne.n	800d71c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f06f 0201 	mvn.w	r2, #1
 800d714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f7f4 faea 	bl	8001cf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d726:	2b80      	cmp	r3, #128	; 0x80
 800d728:	d10e      	bne.n	800d748 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68db      	ldr	r3, [r3, #12]
 800d730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d734:	2b80      	cmp	r3, #128	; 0x80
 800d736:	d107      	bne.n	800d748 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 fff8 	bl	800e738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	691b      	ldr	r3, [r3, #16]
 800d74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d756:	d10e      	bne.n	800d776 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d762:	2b80      	cmp	r3, #128	; 0x80
 800d764:	d107      	bne.n	800d776 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 ffeb 	bl	800e74c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d780:	2b40      	cmp	r3, #64	; 0x40
 800d782:	d10e      	bne.n	800d7a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d78e:	2b40      	cmp	r3, #64	; 0x40
 800d790:	d107      	bne.n	800d7a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d79a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 fa3b 	bl	800dc18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	691b      	ldr	r3, [r3, #16]
 800d7a8:	f003 0320 	and.w	r3, r3, #32
 800d7ac:	2b20      	cmp	r3, #32
 800d7ae:	d10e      	bne.n	800d7ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68db      	ldr	r3, [r3, #12]
 800d7b6:	f003 0320 	and.w	r3, r3, #32
 800d7ba:	2b20      	cmp	r3, #32
 800d7bc:	d107      	bne.n	800d7ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f06f 0220 	mvn.w	r2, #32
 800d7c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 ffab 	bl	800e724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d7ce:	bf00      	nop
 800d7d0:	3708      	adds	r7, #8
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
	...

0800d7d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b086      	sub	sp, #24
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d101      	bne.n	800d7f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	e0ff      	b.n	800d9f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b14      	cmp	r3, #20
 800d802:	f200 80f0 	bhi.w	800d9e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d806:	a201      	add	r2, pc, #4	; (adr r2, 800d80c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d80c:	0800d861 	.word	0x0800d861
 800d810:	0800d9e7 	.word	0x0800d9e7
 800d814:	0800d9e7 	.word	0x0800d9e7
 800d818:	0800d9e7 	.word	0x0800d9e7
 800d81c:	0800d8a1 	.word	0x0800d8a1
 800d820:	0800d9e7 	.word	0x0800d9e7
 800d824:	0800d9e7 	.word	0x0800d9e7
 800d828:	0800d9e7 	.word	0x0800d9e7
 800d82c:	0800d8e3 	.word	0x0800d8e3
 800d830:	0800d9e7 	.word	0x0800d9e7
 800d834:	0800d9e7 	.word	0x0800d9e7
 800d838:	0800d9e7 	.word	0x0800d9e7
 800d83c:	0800d923 	.word	0x0800d923
 800d840:	0800d9e7 	.word	0x0800d9e7
 800d844:	0800d9e7 	.word	0x0800d9e7
 800d848:	0800d9e7 	.word	0x0800d9e7
 800d84c:	0800d965 	.word	0x0800d965
 800d850:	0800d9e7 	.word	0x0800d9e7
 800d854:	0800d9e7 	.word	0x0800d9e7
 800d858:	0800d9e7 	.word	0x0800d9e7
 800d85c:	0800d9a5 	.word	0x0800d9a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	68b9      	ldr	r1, [r7, #8]
 800d866:	4618      	mov	r0, r3
 800d868:	f000 fa86 	bl	800dd78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	699a      	ldr	r2, [r3, #24]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f042 0208 	orr.w	r2, r2, #8
 800d87a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	699a      	ldr	r2, [r3, #24]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f022 0204 	bic.w	r2, r2, #4
 800d88a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	6999      	ldr	r1, [r3, #24]
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	691a      	ldr	r2, [r3, #16]
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	430a      	orrs	r2, r1
 800d89c:	619a      	str	r2, [r3, #24]
      break;
 800d89e:	e0a5      	b.n	800d9ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	68b9      	ldr	r1, [r7, #8]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f000 faf6 	bl	800de98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	699a      	ldr	r2, [r3, #24]
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d8ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	699a      	ldr	r2, [r3, #24]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d8ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	6999      	ldr	r1, [r3, #24]
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	691b      	ldr	r3, [r3, #16]
 800d8d6:	021a      	lsls	r2, r3, #8
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	430a      	orrs	r2, r1
 800d8de:	619a      	str	r2, [r3, #24]
      break;
 800d8e0:	e084      	b.n	800d9ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68b9      	ldr	r1, [r7, #8]
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f000 fb5f 	bl	800dfac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	69da      	ldr	r2, [r3, #28]
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	f042 0208 	orr.w	r2, r2, #8
 800d8fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	69da      	ldr	r2, [r3, #28]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f022 0204 	bic.w	r2, r2, #4
 800d90c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	69d9      	ldr	r1, [r3, #28]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	691a      	ldr	r2, [r3, #16]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	430a      	orrs	r2, r1
 800d91e:	61da      	str	r2, [r3, #28]
      break;
 800d920:	e064      	b.n	800d9ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68b9      	ldr	r1, [r7, #8]
 800d928:	4618      	mov	r0, r3
 800d92a:	f000 fbc7 	bl	800e0bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	69da      	ldr	r2, [r3, #28]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d93c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	69da      	ldr	r2, [r3, #28]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d94c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	69d9      	ldr	r1, [r3, #28]
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	691b      	ldr	r3, [r3, #16]
 800d958:	021a      	lsls	r2, r3, #8
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	430a      	orrs	r2, r1
 800d960:	61da      	str	r2, [r3, #28]
      break;
 800d962:	e043      	b.n	800d9ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68b9      	ldr	r1, [r7, #8]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f000 fc10 	bl	800e190 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f042 0208 	orr.w	r2, r2, #8
 800d97e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f022 0204 	bic.w	r2, r2, #4
 800d98e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	691a      	ldr	r2, [r3, #16]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	430a      	orrs	r2, r1
 800d9a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d9a2:	e023      	b.n	800d9ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	68b9      	ldr	r1, [r7, #8]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f000 fc54 	bl	800e258 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	691b      	ldr	r3, [r3, #16]
 800d9da:	021a      	lsls	r2, r3, #8
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	430a      	orrs	r2, r1
 800d9e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d9e4:	e002      	b.n	800d9ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	75fb      	strb	r3, [r7, #23]
      break;
 800d9ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d9f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3718      	adds	r7, #24
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop

0800da00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b084      	sub	sp, #16
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800da0a:	2300      	movs	r3, #0
 800da0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da14:	2b01      	cmp	r3, #1
 800da16:	d101      	bne.n	800da1c <HAL_TIM_ConfigClockSource+0x1c>
 800da18:	2302      	movs	r3, #2
 800da1a:	e0dc      	b.n	800dbd6 <HAL_TIM_ConfigClockSource+0x1d6>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2202      	movs	r2, #2
 800da28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	689b      	ldr	r3, [r3, #8]
 800da32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800da34:	68ba      	ldr	r2, [r7, #8]
 800da36:	4b6a      	ldr	r3, [pc, #424]	; (800dbe0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800da38:	4013      	ands	r3, r2
 800da3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	68ba      	ldr	r2, [r7, #8]
 800da4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a64      	ldr	r2, [pc, #400]	; (800dbe4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da52:	4293      	cmp	r3, r2
 800da54:	f000 80a9 	beq.w	800dbaa <HAL_TIM_ConfigClockSource+0x1aa>
 800da58:	4a62      	ldr	r2, [pc, #392]	; (800dbe4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	f200 80ae 	bhi.w	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800da60:	4a61      	ldr	r2, [pc, #388]	; (800dbe8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800da62:	4293      	cmp	r3, r2
 800da64:	f000 80a1 	beq.w	800dbaa <HAL_TIM_ConfigClockSource+0x1aa>
 800da68:	4a5f      	ldr	r2, [pc, #380]	; (800dbe8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800da6a:	4293      	cmp	r3, r2
 800da6c:	f200 80a6 	bhi.w	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800da70:	4a5e      	ldr	r2, [pc, #376]	; (800dbec <HAL_TIM_ConfigClockSource+0x1ec>)
 800da72:	4293      	cmp	r3, r2
 800da74:	f000 8099 	beq.w	800dbaa <HAL_TIM_ConfigClockSource+0x1aa>
 800da78:	4a5c      	ldr	r2, [pc, #368]	; (800dbec <HAL_TIM_ConfigClockSource+0x1ec>)
 800da7a:	4293      	cmp	r3, r2
 800da7c:	f200 809e 	bhi.w	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800da80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800da84:	f000 8091 	beq.w	800dbaa <HAL_TIM_ConfigClockSource+0x1aa>
 800da88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800da8c:	f200 8096 	bhi.w	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800da90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da94:	f000 8089 	beq.w	800dbaa <HAL_TIM_ConfigClockSource+0x1aa>
 800da98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800da9c:	f200 808e 	bhi.w	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800daa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800daa4:	d03e      	beq.n	800db24 <HAL_TIM_ConfigClockSource+0x124>
 800daa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800daaa:	f200 8087 	bhi.w	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800daae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dab2:	f000 8086 	beq.w	800dbc2 <HAL_TIM_ConfigClockSource+0x1c2>
 800dab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daba:	d87f      	bhi.n	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800dabc:	2b70      	cmp	r3, #112	; 0x70
 800dabe:	d01a      	beq.n	800daf6 <HAL_TIM_ConfigClockSource+0xf6>
 800dac0:	2b70      	cmp	r3, #112	; 0x70
 800dac2:	d87b      	bhi.n	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800dac4:	2b60      	cmp	r3, #96	; 0x60
 800dac6:	d050      	beq.n	800db6a <HAL_TIM_ConfigClockSource+0x16a>
 800dac8:	2b60      	cmp	r3, #96	; 0x60
 800daca:	d877      	bhi.n	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800dacc:	2b50      	cmp	r3, #80	; 0x50
 800dace:	d03c      	beq.n	800db4a <HAL_TIM_ConfigClockSource+0x14a>
 800dad0:	2b50      	cmp	r3, #80	; 0x50
 800dad2:	d873      	bhi.n	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800dad4:	2b40      	cmp	r3, #64	; 0x40
 800dad6:	d058      	beq.n	800db8a <HAL_TIM_ConfigClockSource+0x18a>
 800dad8:	2b40      	cmp	r3, #64	; 0x40
 800dada:	d86f      	bhi.n	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800dadc:	2b30      	cmp	r3, #48	; 0x30
 800dade:	d064      	beq.n	800dbaa <HAL_TIM_ConfigClockSource+0x1aa>
 800dae0:	2b30      	cmp	r3, #48	; 0x30
 800dae2:	d86b      	bhi.n	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800dae4:	2b20      	cmp	r3, #32
 800dae6:	d060      	beq.n	800dbaa <HAL_TIM_ConfigClockSource+0x1aa>
 800dae8:	2b20      	cmp	r3, #32
 800daea:	d867      	bhi.n	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
 800daec:	2b00      	cmp	r3, #0
 800daee:	d05c      	beq.n	800dbaa <HAL_TIM_ConfigClockSource+0x1aa>
 800daf0:	2b10      	cmp	r3, #16
 800daf2:	d05a      	beq.n	800dbaa <HAL_TIM_ConfigClockSource+0x1aa>
 800daf4:	e062      	b.n	800dbbc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6818      	ldr	r0, [r3, #0]
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	6899      	ldr	r1, [r3, #8]
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	685a      	ldr	r2, [r3, #4]
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	f000 fc8b 	bl	800e420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	689b      	ldr	r3, [r3, #8]
 800db10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800db18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	68ba      	ldr	r2, [r7, #8]
 800db20:	609a      	str	r2, [r3, #8]
      break;
 800db22:	e04f      	b.n	800dbc4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6818      	ldr	r0, [r3, #0]
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	6899      	ldr	r1, [r3, #8]
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	685a      	ldr	r2, [r3, #4]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	68db      	ldr	r3, [r3, #12]
 800db34:	f000 fc74 	bl	800e420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	689a      	ldr	r2, [r3, #8]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800db46:	609a      	str	r2, [r3, #8]
      break;
 800db48:	e03c      	b.n	800dbc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6818      	ldr	r0, [r3, #0]
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	6859      	ldr	r1, [r3, #4]
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	461a      	mov	r2, r3
 800db58:	f000 fbe4 	bl	800e324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	2150      	movs	r1, #80	; 0x50
 800db62:	4618      	mov	r0, r3
 800db64:	f000 fc3e 	bl	800e3e4 <TIM_ITRx_SetConfig>
      break;
 800db68:	e02c      	b.n	800dbc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6818      	ldr	r0, [r3, #0]
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	6859      	ldr	r1, [r3, #4]
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	461a      	mov	r2, r3
 800db78:	f000 fc03 	bl	800e382 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2160      	movs	r1, #96	; 0x60
 800db82:	4618      	mov	r0, r3
 800db84:	f000 fc2e 	bl	800e3e4 <TIM_ITRx_SetConfig>
      break;
 800db88:	e01c      	b.n	800dbc4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6818      	ldr	r0, [r3, #0]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	6859      	ldr	r1, [r3, #4]
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	461a      	mov	r2, r3
 800db98:	f000 fbc4 	bl	800e324 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	2140      	movs	r1, #64	; 0x40
 800dba2:	4618      	mov	r0, r3
 800dba4:	f000 fc1e 	bl	800e3e4 <TIM_ITRx_SetConfig>
      break;
 800dba8:	e00c      	b.n	800dbc4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	f000 fc15 	bl	800e3e4 <TIM_ITRx_SetConfig>
      break;
 800dbba:	e003      	b.n	800dbc4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	73fb      	strb	r3, [r7, #15]
      break;
 800dbc0:	e000      	b.n	800dbc4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dbc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	ffceff88 	.word	0xffceff88
 800dbe4:	00100040 	.word	0x00100040
 800dbe8:	00100030 	.word	0x00100030
 800dbec:	00100020 	.word	0x00100020

0800dbf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dbf8:	bf00      	nop
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dc0c:	bf00      	nop
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	4a44      	ldr	r2, [pc, #272]	; (800dd50 <TIM_Base_SetConfig+0x124>)
 800dc40:	4293      	cmp	r3, r2
 800dc42:	d013      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc4a:	d00f      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	4a41      	ldr	r2, [pc, #260]	; (800dd54 <TIM_Base_SetConfig+0x128>)
 800dc50:	4293      	cmp	r3, r2
 800dc52:	d00b      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	4a40      	ldr	r2, [pc, #256]	; (800dd58 <TIM_Base_SetConfig+0x12c>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d007      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a3f      	ldr	r2, [pc, #252]	; (800dd5c <TIM_Base_SetConfig+0x130>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d003      	beq.n	800dc6c <TIM_Base_SetConfig+0x40>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a3e      	ldr	r2, [pc, #248]	; (800dd60 <TIM_Base_SetConfig+0x134>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d108      	bne.n	800dc7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4a33      	ldr	r2, [pc, #204]	; (800dd50 <TIM_Base_SetConfig+0x124>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d027      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc8c:	d023      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	4a30      	ldr	r2, [pc, #192]	; (800dd54 <TIM_Base_SetConfig+0x128>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d01f      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	4a2f      	ldr	r2, [pc, #188]	; (800dd58 <TIM_Base_SetConfig+0x12c>)
 800dc9a:	4293      	cmp	r3, r2
 800dc9c:	d01b      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	4a2e      	ldr	r2, [pc, #184]	; (800dd5c <TIM_Base_SetConfig+0x130>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d017      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	4a2d      	ldr	r2, [pc, #180]	; (800dd60 <TIM_Base_SetConfig+0x134>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d013      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	4a2c      	ldr	r2, [pc, #176]	; (800dd64 <TIM_Base_SetConfig+0x138>)
 800dcb2:	4293      	cmp	r3, r2
 800dcb4:	d00f      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	4a2b      	ldr	r2, [pc, #172]	; (800dd68 <TIM_Base_SetConfig+0x13c>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d00b      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	4a2a      	ldr	r2, [pc, #168]	; (800dd6c <TIM_Base_SetConfig+0x140>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d007      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	4a29      	ldr	r2, [pc, #164]	; (800dd70 <TIM_Base_SetConfig+0x144>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d003      	beq.n	800dcd6 <TIM_Base_SetConfig+0xaa>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a28      	ldr	r2, [pc, #160]	; (800dd74 <TIM_Base_SetConfig+0x148>)
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d108      	bne.n	800dce8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dcdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	68fa      	ldr	r2, [r7, #12]
 800dce4:	4313      	orrs	r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	689a      	ldr	r2, [r3, #8]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	681a      	ldr	r2, [r3, #0]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4a10      	ldr	r2, [pc, #64]	; (800dd50 <TIM_Base_SetConfig+0x124>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d00f      	beq.n	800dd34 <TIM_Base_SetConfig+0x108>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4a12      	ldr	r2, [pc, #72]	; (800dd60 <TIM_Base_SetConfig+0x134>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d00b      	beq.n	800dd34 <TIM_Base_SetConfig+0x108>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	4a11      	ldr	r2, [pc, #68]	; (800dd64 <TIM_Base_SetConfig+0x138>)
 800dd20:	4293      	cmp	r3, r2
 800dd22:	d007      	beq.n	800dd34 <TIM_Base_SetConfig+0x108>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	4a10      	ldr	r2, [pc, #64]	; (800dd68 <TIM_Base_SetConfig+0x13c>)
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d003      	beq.n	800dd34 <TIM_Base_SetConfig+0x108>
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	4a0f      	ldr	r2, [pc, #60]	; (800dd6c <TIM_Base_SetConfig+0x140>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d103      	bne.n	800dd3c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	691a      	ldr	r2, [r3, #16]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	615a      	str	r2, [r3, #20]
}
 800dd42:	bf00      	nop
 800dd44:	3714      	adds	r7, #20
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr
 800dd4e:	bf00      	nop
 800dd50:	40010000 	.word	0x40010000
 800dd54:	40000400 	.word	0x40000400
 800dd58:	40000800 	.word	0x40000800
 800dd5c:	40000c00 	.word	0x40000c00
 800dd60:	40010400 	.word	0x40010400
 800dd64:	40014000 	.word	0x40014000
 800dd68:	40014400 	.word	0x40014400
 800dd6c:	40014800 	.word	0x40014800
 800dd70:	4000e000 	.word	0x4000e000
 800dd74:	4000e400 	.word	0x4000e400

0800dd78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b087      	sub	sp, #28
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6a1b      	ldr	r3, [r3, #32]
 800dd86:	f023 0201 	bic.w	r2, r3, #1
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	699b      	ldr	r3, [r3, #24]
 800dd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800dda0:	68fa      	ldr	r2, [r7, #12]
 800dda2:	4b37      	ldr	r3, [pc, #220]	; (800de80 <TIM_OC1_SetConfig+0x108>)
 800dda4:	4013      	ands	r3, r2
 800dda6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f023 0303 	bic.w	r3, r3, #3
 800ddae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68fa      	ldr	r2, [r7, #12]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	f023 0302 	bic.w	r3, r3, #2
 800ddc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	4313      	orrs	r3, r2
 800ddca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a2d      	ldr	r2, [pc, #180]	; (800de84 <TIM_OC1_SetConfig+0x10c>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d00f      	beq.n	800ddf4 <TIM_OC1_SetConfig+0x7c>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4a2c      	ldr	r2, [pc, #176]	; (800de88 <TIM_OC1_SetConfig+0x110>)
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d00b      	beq.n	800ddf4 <TIM_OC1_SetConfig+0x7c>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a2b      	ldr	r2, [pc, #172]	; (800de8c <TIM_OC1_SetConfig+0x114>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d007      	beq.n	800ddf4 <TIM_OC1_SetConfig+0x7c>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	4a2a      	ldr	r2, [pc, #168]	; (800de90 <TIM_OC1_SetConfig+0x118>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d003      	beq.n	800ddf4 <TIM_OC1_SetConfig+0x7c>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	4a29      	ldr	r2, [pc, #164]	; (800de94 <TIM_OC1_SetConfig+0x11c>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d10c      	bne.n	800de0e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	f023 0308 	bic.w	r3, r3, #8
 800ddfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	697a      	ldr	r2, [r7, #20]
 800de02:	4313      	orrs	r3, r2
 800de04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	f023 0304 	bic.w	r3, r3, #4
 800de0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	4a1c      	ldr	r2, [pc, #112]	; (800de84 <TIM_OC1_SetConfig+0x10c>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d00f      	beq.n	800de36 <TIM_OC1_SetConfig+0xbe>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	4a1b      	ldr	r2, [pc, #108]	; (800de88 <TIM_OC1_SetConfig+0x110>)
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d00b      	beq.n	800de36 <TIM_OC1_SetConfig+0xbe>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4a1a      	ldr	r2, [pc, #104]	; (800de8c <TIM_OC1_SetConfig+0x114>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d007      	beq.n	800de36 <TIM_OC1_SetConfig+0xbe>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	4a19      	ldr	r2, [pc, #100]	; (800de90 <TIM_OC1_SetConfig+0x118>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d003      	beq.n	800de36 <TIM_OC1_SetConfig+0xbe>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	4a18      	ldr	r2, [pc, #96]	; (800de94 <TIM_OC1_SetConfig+0x11c>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d111      	bne.n	800de5a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	695b      	ldr	r3, [r3, #20]
 800de4a:	693a      	ldr	r2, [r7, #16]
 800de4c:	4313      	orrs	r3, r2
 800de4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	699b      	ldr	r3, [r3, #24]
 800de54:	693a      	ldr	r2, [r7, #16]
 800de56:	4313      	orrs	r3, r2
 800de58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	693a      	ldr	r2, [r7, #16]
 800de5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	697a      	ldr	r2, [r7, #20]
 800de72:	621a      	str	r2, [r3, #32]
}
 800de74:	bf00      	nop
 800de76:	371c      	adds	r7, #28
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	fffeff8f 	.word	0xfffeff8f
 800de84:	40010000 	.word	0x40010000
 800de88:	40010400 	.word	0x40010400
 800de8c:	40014000 	.word	0x40014000
 800de90:	40014400 	.word	0x40014400
 800de94:	40014800 	.word	0x40014800

0800de98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de98:	b480      	push	{r7}
 800de9a:	b087      	sub	sp, #28
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a1b      	ldr	r3, [r3, #32]
 800dea6:	f023 0210 	bic.w	r2, r3, #16
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6a1b      	ldr	r3, [r3, #32]
 800deb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	699b      	ldr	r3, [r3, #24]
 800debe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	4b34      	ldr	r3, [pc, #208]	; (800df94 <TIM_OC2_SetConfig+0xfc>)
 800dec4:	4013      	ands	r3, r2
 800dec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	021b      	lsls	r3, r3, #8
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	4313      	orrs	r3, r2
 800deda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	f023 0320 	bic.w	r3, r3, #32
 800dee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	011b      	lsls	r3, r3, #4
 800deea:	697a      	ldr	r2, [r7, #20]
 800deec:	4313      	orrs	r3, r2
 800deee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	4a29      	ldr	r2, [pc, #164]	; (800df98 <TIM_OC2_SetConfig+0x100>)
 800def4:	4293      	cmp	r3, r2
 800def6:	d003      	beq.n	800df00 <TIM_OC2_SetConfig+0x68>
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4a28      	ldr	r2, [pc, #160]	; (800df9c <TIM_OC2_SetConfig+0x104>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d10d      	bne.n	800df1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	011b      	lsls	r3, r3, #4
 800df0e:	697a      	ldr	r2, [r7, #20]
 800df10:	4313      	orrs	r3, r2
 800df12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	4a1e      	ldr	r2, [pc, #120]	; (800df98 <TIM_OC2_SetConfig+0x100>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d00f      	beq.n	800df44 <TIM_OC2_SetConfig+0xac>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	4a1d      	ldr	r2, [pc, #116]	; (800df9c <TIM_OC2_SetConfig+0x104>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d00b      	beq.n	800df44 <TIM_OC2_SetConfig+0xac>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4a1c      	ldr	r2, [pc, #112]	; (800dfa0 <TIM_OC2_SetConfig+0x108>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d007      	beq.n	800df44 <TIM_OC2_SetConfig+0xac>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	4a1b      	ldr	r2, [pc, #108]	; (800dfa4 <TIM_OC2_SetConfig+0x10c>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d003      	beq.n	800df44 <TIM_OC2_SetConfig+0xac>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	4a1a      	ldr	r2, [pc, #104]	; (800dfa8 <TIM_OC2_SetConfig+0x110>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d113      	bne.n	800df6c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	695b      	ldr	r3, [r3, #20]
 800df58:	009b      	lsls	r3, r3, #2
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	699b      	ldr	r3, [r3, #24]
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	693a      	ldr	r2, [r7, #16]
 800df68:	4313      	orrs	r3, r2
 800df6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	693a      	ldr	r2, [r7, #16]
 800df70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	68fa      	ldr	r2, [r7, #12]
 800df76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	685a      	ldr	r2, [r3, #4]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	697a      	ldr	r2, [r7, #20]
 800df84:	621a      	str	r2, [r3, #32]
}
 800df86:	bf00      	nop
 800df88:	371c      	adds	r7, #28
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	feff8fff 	.word	0xfeff8fff
 800df98:	40010000 	.word	0x40010000
 800df9c:	40010400 	.word	0x40010400
 800dfa0:	40014000 	.word	0x40014000
 800dfa4:	40014400 	.word	0x40014400
 800dfa8:	40014800 	.word	0x40014800

0800dfac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b087      	sub	sp, #28
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a1b      	ldr	r3, [r3, #32]
 800dfba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	685b      	ldr	r3, [r3, #4]
 800dfcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	69db      	ldr	r3, [r3, #28]
 800dfd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	4b33      	ldr	r3, [pc, #204]	; (800e0a4 <TIM_OC3_SetConfig+0xf8>)
 800dfd8:	4013      	ands	r3, r2
 800dfda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	f023 0303 	bic.w	r3, r3, #3
 800dfe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	4313      	orrs	r3, r2
 800dfec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	689b      	ldr	r3, [r3, #8]
 800dffa:	021b      	lsls	r3, r3, #8
 800dffc:	697a      	ldr	r2, [r7, #20]
 800dffe:	4313      	orrs	r3, r2
 800e000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	4a28      	ldr	r2, [pc, #160]	; (800e0a8 <TIM_OC3_SetConfig+0xfc>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d003      	beq.n	800e012 <TIM_OC3_SetConfig+0x66>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	4a27      	ldr	r2, [pc, #156]	; (800e0ac <TIM_OC3_SetConfig+0x100>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d10d      	bne.n	800e02e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	021b      	lsls	r3, r3, #8
 800e020:	697a      	ldr	r2, [r7, #20]
 800e022:	4313      	orrs	r3, r2
 800e024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e02c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	4a1d      	ldr	r2, [pc, #116]	; (800e0a8 <TIM_OC3_SetConfig+0xfc>)
 800e032:	4293      	cmp	r3, r2
 800e034:	d00f      	beq.n	800e056 <TIM_OC3_SetConfig+0xaa>
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4a1c      	ldr	r2, [pc, #112]	; (800e0ac <TIM_OC3_SetConfig+0x100>)
 800e03a:	4293      	cmp	r3, r2
 800e03c:	d00b      	beq.n	800e056 <TIM_OC3_SetConfig+0xaa>
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	4a1b      	ldr	r2, [pc, #108]	; (800e0b0 <TIM_OC3_SetConfig+0x104>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d007      	beq.n	800e056 <TIM_OC3_SetConfig+0xaa>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	4a1a      	ldr	r2, [pc, #104]	; (800e0b4 <TIM_OC3_SetConfig+0x108>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d003      	beq.n	800e056 <TIM_OC3_SetConfig+0xaa>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4a19      	ldr	r2, [pc, #100]	; (800e0b8 <TIM_OC3_SetConfig+0x10c>)
 800e052:	4293      	cmp	r3, r2
 800e054:	d113      	bne.n	800e07e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e05c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	695b      	ldr	r3, [r3, #20]
 800e06a:	011b      	lsls	r3, r3, #4
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	4313      	orrs	r3, r2
 800e070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	699b      	ldr	r3, [r3, #24]
 800e076:	011b      	lsls	r3, r3, #4
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	4313      	orrs	r3, r2
 800e07c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	693a      	ldr	r2, [r7, #16]
 800e082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	68fa      	ldr	r2, [r7, #12]
 800e088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	685a      	ldr	r2, [r3, #4]
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	697a      	ldr	r2, [r7, #20]
 800e096:	621a      	str	r2, [r3, #32]
}
 800e098:	bf00      	nop
 800e09a:	371c      	adds	r7, #28
 800e09c:	46bd      	mov	sp, r7
 800e09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a2:	4770      	bx	lr
 800e0a4:	fffeff8f 	.word	0xfffeff8f
 800e0a8:	40010000 	.word	0x40010000
 800e0ac:	40010400 	.word	0x40010400
 800e0b0:	40014000 	.word	0x40014000
 800e0b4:	40014400 	.word	0x40014400
 800e0b8:	40014800 	.word	0x40014800

0800e0bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b087      	sub	sp, #28
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
 800e0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a1b      	ldr	r3, [r3, #32]
 800e0ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a1b      	ldr	r3, [r3, #32]
 800e0d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	69db      	ldr	r3, [r3, #28]
 800e0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e0e4:	68fa      	ldr	r2, [r7, #12]
 800e0e6:	4b24      	ldr	r3, [pc, #144]	; (800e178 <TIM_OC4_SetConfig+0xbc>)
 800e0e8:	4013      	ands	r3, r2
 800e0ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	021b      	lsls	r3, r3, #8
 800e0fa:	68fa      	ldr	r2, [r7, #12]
 800e0fc:	4313      	orrs	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	689b      	ldr	r3, [r3, #8]
 800e10c:	031b      	lsls	r3, r3, #12
 800e10e:	693a      	ldr	r2, [r7, #16]
 800e110:	4313      	orrs	r3, r2
 800e112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a19      	ldr	r2, [pc, #100]	; (800e17c <TIM_OC4_SetConfig+0xc0>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d00f      	beq.n	800e13c <TIM_OC4_SetConfig+0x80>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	4a18      	ldr	r2, [pc, #96]	; (800e180 <TIM_OC4_SetConfig+0xc4>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d00b      	beq.n	800e13c <TIM_OC4_SetConfig+0x80>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a17      	ldr	r2, [pc, #92]	; (800e184 <TIM_OC4_SetConfig+0xc8>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d007      	beq.n	800e13c <TIM_OC4_SetConfig+0x80>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a16      	ldr	r2, [pc, #88]	; (800e188 <TIM_OC4_SetConfig+0xcc>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d003      	beq.n	800e13c <TIM_OC4_SetConfig+0x80>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a15      	ldr	r2, [pc, #84]	; (800e18c <TIM_OC4_SetConfig+0xd0>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d109      	bne.n	800e150 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	695b      	ldr	r3, [r3, #20]
 800e148:	019b      	lsls	r3, r3, #6
 800e14a:	697a      	ldr	r2, [r7, #20]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	697a      	ldr	r2, [r7, #20]
 800e154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	68fa      	ldr	r2, [r7, #12]
 800e15a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	685a      	ldr	r2, [r3, #4]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	693a      	ldr	r2, [r7, #16]
 800e168:	621a      	str	r2, [r3, #32]
}
 800e16a:	bf00      	nop
 800e16c:	371c      	adds	r7, #28
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	feff8fff 	.word	0xfeff8fff
 800e17c:	40010000 	.word	0x40010000
 800e180:	40010400 	.word	0x40010400
 800e184:	40014000 	.word	0x40014000
 800e188:	40014400 	.word	0x40014400
 800e18c:	40014800 	.word	0x40014800

0800e190 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e190:	b480      	push	{r7}
 800e192:	b087      	sub	sp, #28
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6a1b      	ldr	r3, [r3, #32]
 800e19e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6a1b      	ldr	r3, [r3, #32]
 800e1aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	4b21      	ldr	r3, [pc, #132]	; (800e240 <TIM_OC5_SetConfig+0xb0>)
 800e1bc:	4013      	ands	r3, r2
 800e1be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e1d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	689b      	ldr	r3, [r3, #8]
 800e1d6:	041b      	lsls	r3, r3, #16
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a18      	ldr	r2, [pc, #96]	; (800e244 <TIM_OC5_SetConfig+0xb4>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d00f      	beq.n	800e206 <TIM_OC5_SetConfig+0x76>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	4a17      	ldr	r2, [pc, #92]	; (800e248 <TIM_OC5_SetConfig+0xb8>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d00b      	beq.n	800e206 <TIM_OC5_SetConfig+0x76>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	4a16      	ldr	r2, [pc, #88]	; (800e24c <TIM_OC5_SetConfig+0xbc>)
 800e1f2:	4293      	cmp	r3, r2
 800e1f4:	d007      	beq.n	800e206 <TIM_OC5_SetConfig+0x76>
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a15      	ldr	r2, [pc, #84]	; (800e250 <TIM_OC5_SetConfig+0xc0>)
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d003      	beq.n	800e206 <TIM_OC5_SetConfig+0x76>
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	4a14      	ldr	r2, [pc, #80]	; (800e254 <TIM_OC5_SetConfig+0xc4>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d109      	bne.n	800e21a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e20c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	695b      	ldr	r3, [r3, #20]
 800e212:	021b      	lsls	r3, r3, #8
 800e214:	697a      	ldr	r2, [r7, #20]
 800e216:	4313      	orrs	r3, r2
 800e218:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	697a      	ldr	r2, [r7, #20]
 800e21e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	685a      	ldr	r2, [r3, #4]
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	693a      	ldr	r2, [r7, #16]
 800e232:	621a      	str	r2, [r3, #32]
}
 800e234:	bf00      	nop
 800e236:	371c      	adds	r7, #28
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr
 800e240:	fffeff8f 	.word	0xfffeff8f
 800e244:	40010000 	.word	0x40010000
 800e248:	40010400 	.word	0x40010400
 800e24c:	40014000 	.word	0x40014000
 800e250:	40014400 	.word	0x40014400
 800e254:	40014800 	.word	0x40014800

0800e258 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e258:	b480      	push	{r7}
 800e25a:	b087      	sub	sp, #28
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6a1b      	ldr	r3, [r3, #32]
 800e272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e27e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e280:	68fa      	ldr	r2, [r7, #12]
 800e282:	4b22      	ldr	r3, [pc, #136]	; (800e30c <TIM_OC6_SetConfig+0xb4>)
 800e284:	4013      	ands	r3, r2
 800e286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	021b      	lsls	r3, r3, #8
 800e28e:	68fa      	ldr	r2, [r7, #12]
 800e290:	4313      	orrs	r3, r2
 800e292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e29a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	051b      	lsls	r3, r3, #20
 800e2a2:	693a      	ldr	r2, [r7, #16]
 800e2a4:	4313      	orrs	r3, r2
 800e2a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4a19      	ldr	r2, [pc, #100]	; (800e310 <TIM_OC6_SetConfig+0xb8>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d00f      	beq.n	800e2d0 <TIM_OC6_SetConfig+0x78>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	4a18      	ldr	r2, [pc, #96]	; (800e314 <TIM_OC6_SetConfig+0xbc>)
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	d00b      	beq.n	800e2d0 <TIM_OC6_SetConfig+0x78>
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4a17      	ldr	r2, [pc, #92]	; (800e318 <TIM_OC6_SetConfig+0xc0>)
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d007      	beq.n	800e2d0 <TIM_OC6_SetConfig+0x78>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4a16      	ldr	r2, [pc, #88]	; (800e31c <TIM_OC6_SetConfig+0xc4>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d003      	beq.n	800e2d0 <TIM_OC6_SetConfig+0x78>
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	4a15      	ldr	r2, [pc, #84]	; (800e320 <TIM_OC6_SetConfig+0xc8>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d109      	bne.n	800e2e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e2d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	695b      	ldr	r3, [r3, #20]
 800e2dc:	029b      	lsls	r3, r3, #10
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	697a      	ldr	r2, [r7, #20]
 800e2e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	68fa      	ldr	r2, [r7, #12]
 800e2ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	685a      	ldr	r2, [r3, #4]
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	693a      	ldr	r2, [r7, #16]
 800e2fc:	621a      	str	r2, [r3, #32]
}
 800e2fe:	bf00      	nop
 800e300:	371c      	adds	r7, #28
 800e302:	46bd      	mov	sp, r7
 800e304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e308:	4770      	bx	lr
 800e30a:	bf00      	nop
 800e30c:	feff8fff 	.word	0xfeff8fff
 800e310:	40010000 	.word	0x40010000
 800e314:	40010400 	.word	0x40010400
 800e318:	40014000 	.word	0x40014000
 800e31c:	40014400 	.word	0x40014400
 800e320:	40014800 	.word	0x40014800

0800e324 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e324:	b480      	push	{r7}
 800e326:	b087      	sub	sp, #28
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6a1b      	ldr	r3, [r3, #32]
 800e334:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	6a1b      	ldr	r3, [r3, #32]
 800e33a:	f023 0201 	bic.w	r2, r3, #1
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	699b      	ldr	r3, [r3, #24]
 800e346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e34e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	011b      	lsls	r3, r3, #4
 800e354:	693a      	ldr	r2, [r7, #16]
 800e356:	4313      	orrs	r3, r2
 800e358:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	f023 030a 	bic.w	r3, r3, #10
 800e360:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e362:	697a      	ldr	r2, [r7, #20]
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	4313      	orrs	r3, r2
 800e368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	693a      	ldr	r2, [r7, #16]
 800e36e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	621a      	str	r2, [r3, #32]
}
 800e376:	bf00      	nop
 800e378:	371c      	adds	r7, #28
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr

0800e382 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e382:	b480      	push	{r7}
 800e384:	b087      	sub	sp, #28
 800e386:	af00      	add	r7, sp, #0
 800e388:	60f8      	str	r0, [r7, #12]
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6a1b      	ldr	r3, [r3, #32]
 800e392:	f023 0210 	bic.w	r2, r3, #16
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	699b      	ldr	r3, [r3, #24]
 800e39e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6a1b      	ldr	r3, [r3, #32]
 800e3a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e3ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	031b      	lsls	r3, r3, #12
 800e3b2:	697a      	ldr	r2, [r7, #20]
 800e3b4:	4313      	orrs	r3, r2
 800e3b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e3b8:	693b      	ldr	r3, [r7, #16]
 800e3ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e3be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	011b      	lsls	r3, r3, #4
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	697a      	ldr	r2, [r7, #20]
 800e3ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	693a      	ldr	r2, [r7, #16]
 800e3d4:	621a      	str	r2, [r3, #32]
}
 800e3d6:	bf00      	nop
 800e3d8:	371c      	adds	r7, #28
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e0:	4770      	bx	lr
	...

0800e3e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b085      	sub	sp, #20
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	4b09      	ldr	r3, [pc, #36]	; (800e41c <TIM_ITRx_SetConfig+0x38>)
 800e3f8:	4013      	ands	r3, r2
 800e3fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e3fc:	683a      	ldr	r2, [r7, #0]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	4313      	orrs	r3, r2
 800e402:	f043 0307 	orr.w	r3, r3, #7
 800e406:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	68fa      	ldr	r2, [r7, #12]
 800e40c:	609a      	str	r2, [r3, #8]
}
 800e40e:	bf00      	nop
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	ffcfff8f 	.word	0xffcfff8f

0800e420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e420:	b480      	push	{r7}
 800e422:	b087      	sub	sp, #28
 800e424:	af00      	add	r7, sp, #0
 800e426:	60f8      	str	r0, [r7, #12]
 800e428:	60b9      	str	r1, [r7, #8]
 800e42a:	607a      	str	r2, [r7, #4]
 800e42c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e43a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	021a      	lsls	r2, r3, #8
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	431a      	orrs	r2, r3
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	4313      	orrs	r3, r2
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	4313      	orrs	r3, r2
 800e44c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	697a      	ldr	r2, [r7, #20]
 800e452:	609a      	str	r2, [r3, #8]
}
 800e454:	bf00      	nop
 800e456:	371c      	adds	r7, #28
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e460:	b480      	push	{r7}
 800e462:	b087      	sub	sp, #28
 800e464:	af00      	add	r7, sp, #0
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	f003 031f 	and.w	r3, r3, #31
 800e472:	2201      	movs	r2, #1
 800e474:	fa02 f303 	lsl.w	r3, r2, r3
 800e478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6a1a      	ldr	r2, [r3, #32]
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	43db      	mvns	r3, r3
 800e482:	401a      	ands	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6a1a      	ldr	r2, [r3, #32]
 800e48c:	68bb      	ldr	r3, [r7, #8]
 800e48e:	f003 031f 	and.w	r3, r3, #31
 800e492:	6879      	ldr	r1, [r7, #4]
 800e494:	fa01 f303 	lsl.w	r3, r1, r3
 800e498:	431a      	orrs	r2, r3
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	621a      	str	r2, [r3, #32]
}
 800e49e:	bf00      	nop
 800e4a0:	371c      	adds	r7, #28
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr
	...

0800e4ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d101      	bne.n	800e4c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	e077      	b.n	800e5b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2202      	movs	r2, #2
 800e4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	685b      	ldr	r3, [r3, #4]
 800e4da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	689b      	ldr	r3, [r3, #8]
 800e4e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a35      	ldr	r2, [pc, #212]	; (800e5c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d004      	beq.n	800e4f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a34      	ldr	r2, [pc, #208]	; (800e5c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e4f4:	4293      	cmp	r3, r2
 800e4f6:	d108      	bne.n	800e50a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e4fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	68fa      	ldr	r2, [r7, #12]
 800e506:	4313      	orrs	r3, r2
 800e508:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e510:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	68fa      	ldr	r2, [r7, #12]
 800e518:	4313      	orrs	r3, r2
 800e51a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	68fa      	ldr	r2, [r7, #12]
 800e522:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	4a25      	ldr	r2, [pc, #148]	; (800e5c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e52a:	4293      	cmp	r3, r2
 800e52c:	d02c      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e536:	d027      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	4a22      	ldr	r2, [pc, #136]	; (800e5c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e53e:	4293      	cmp	r3, r2
 800e540:	d022      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4a21      	ldr	r2, [pc, #132]	; (800e5cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d01d      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4a1f      	ldr	r2, [pc, #124]	; (800e5d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e552:	4293      	cmp	r3, r2
 800e554:	d018      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	4a1a      	ldr	r2, [pc, #104]	; (800e5c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e55c:	4293      	cmp	r3, r2
 800e55e:	d013      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	4a1b      	ldr	r2, [pc, #108]	; (800e5d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d00e      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4a1a      	ldr	r2, [pc, #104]	; (800e5d8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e570:	4293      	cmp	r3, r2
 800e572:	d009      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a18      	ldr	r2, [pc, #96]	; (800e5dc <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d004      	beq.n	800e588 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	4a17      	ldr	r2, [pc, #92]	; (800e5e0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d10c      	bne.n	800e5a2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e58e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	689b      	ldr	r3, [r3, #8]
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	4313      	orrs	r3, r2
 800e598:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	68ba      	ldr	r2, [r7, #8]
 800e5a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3714      	adds	r7, #20
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr
 800e5c0:	40010000 	.word	0x40010000
 800e5c4:	40010400 	.word	0x40010400
 800e5c8:	40000400 	.word	0x40000400
 800e5cc:	40000800 	.word	0x40000800
 800e5d0:	40000c00 	.word	0x40000c00
 800e5d4:	40001800 	.word	0x40001800
 800e5d8:	40014000 	.word	0x40014000
 800e5dc:	4000e000 	.word	0x4000e000
 800e5e0:	4000e400 	.word	0x4000e400

0800e5e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b085      	sub	sp, #20
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d101      	bne.n	800e600 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e5fc:	2302      	movs	r3, #2
 800e5fe:	e087      	b.n	800e710 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2201      	movs	r2, #1
 800e604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	68db      	ldr	r3, [r3, #12]
 800e612:	4313      	orrs	r3, r2
 800e614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	4313      	orrs	r3, r2
 800e622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	4313      	orrs	r3, r2
 800e630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	691b      	ldr	r3, [r3, #16]
 800e64a:	4313      	orrs	r3, r2
 800e64c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	695b      	ldr	r3, [r3, #20]
 800e658:	4313      	orrs	r3, r2
 800e65a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e666:	4313      	orrs	r3, r2
 800e668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	699b      	ldr	r3, [r3, #24]
 800e674:	041b      	lsls	r3, r3, #16
 800e676:	4313      	orrs	r3, r2
 800e678:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a27      	ldr	r2, [pc, #156]	; (800e71c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e680:	4293      	cmp	r3, r2
 800e682:	d004      	beq.n	800e68e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	4a25      	ldr	r2, [pc, #148]	; (800e720 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e68a:	4293      	cmp	r3, r2
 800e68c:	d106      	bne.n	800e69c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	69db      	ldr	r3, [r3, #28]
 800e698:	4313      	orrs	r3, r2
 800e69a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	4a1e      	ldr	r2, [pc, #120]	; (800e71c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	d004      	beq.n	800e6b0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	4a1d      	ldr	r2, [pc, #116]	; (800e720 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d126      	bne.n	800e6fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ba:	051b      	lsls	r3, r3, #20
 800e6bc:	4313      	orrs	r3, r2
 800e6be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	6a1b      	ldr	r3, [r3, #32]
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a0e      	ldr	r2, [pc, #56]	; (800e71c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d004      	beq.n	800e6f0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a0d      	ldr	r2, [pc, #52]	; (800e720 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d106      	bne.n	800e6fe <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	68fa      	ldr	r2, [r7, #12]
 800e704:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3714      	adds	r7, #20
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr
 800e71c:	40010000 	.word	0x40010000
 800e720:	40010400 	.word	0x40010400

0800e724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e72c:	bf00      	nop
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e740:	bf00      	nop
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d101      	bne.n	800e772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e76e:	2301      	movs	r3, #1
 800e770:	e042      	b.n	800e7f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d106      	bne.n	800e78a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2200      	movs	r2, #0
 800e780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f7f5 f857 	bl	8003838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2224      	movs	r2, #36	; 0x24
 800e78e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f022 0201 	bic.w	r2, r2, #1
 800e7a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 fce8 	bl	800f178 <UART_SetConfig>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d101      	bne.n	800e7b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e022      	b.n	800e7f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d002      	beq.n	800e7c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f001 fb3a 	bl	800fe34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	685a      	ldr	r2, [r3, #4]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e7ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	689a      	ldr	r2, [r3, #8]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e7de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	681a      	ldr	r2, [r3, #0]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f042 0201 	orr.w	r2, r2, #1
 800e7ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f001 fbc1 	bl	800ff78 <UART_CheckIdleState>
 800e7f6:	4603      	mov	r3, r0
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3708      	adds	r7, #8
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e800:	b480      	push	{r7}
 800e802:	b091      	sub	sp, #68	; 0x44
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	4613      	mov	r3, r2
 800e80c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e814:	2b20      	cmp	r3, #32
 800e816:	f040 808c 	bne.w	800e932 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d002      	beq.n	800e826 <HAL_UART_Transmit_IT+0x26>
 800e820:	88fb      	ldrh	r3, [r7, #6]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d101      	bne.n	800e82a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800e826:	2301      	movs	r3, #1
 800e828:	e084      	b.n	800e934 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e830:	2b01      	cmp	r3, #1
 800e832:	d101      	bne.n	800e838 <HAL_UART_Transmit_IT+0x38>
 800e834:	2302      	movs	r3, #2
 800e836:	e07d      	b.n	800e934 <HAL_UART_Transmit_IT+0x134>
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2201      	movs	r2, #1
 800e83c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	68ba      	ldr	r2, [r7, #8]
 800e844:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	88fa      	ldrh	r2, [r7, #6]
 800e84a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	88fa      	ldrh	r2, [r7, #6]
 800e852:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	2200      	movs	r2, #0
 800e85a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	2200      	movs	r2, #0
 800e860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2221      	movs	r2, #33	; 0x21
 800e868:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e870:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e874:	d12e      	bne.n	800e8d4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	689b      	ldr	r3, [r3, #8]
 800e87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e87e:	d107      	bne.n	800e890 <HAL_UART_Transmit_IT+0x90>
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	691b      	ldr	r3, [r3, #16]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d103      	bne.n	800e890 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	4a2d      	ldr	r2, [pc, #180]	; (800e940 <HAL_UART_Transmit_IT+0x140>)
 800e88c:	675a      	str	r2, [r3, #116]	; 0x74
 800e88e:	e002      	b.n	800e896 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	4a2c      	ldr	r2, [pc, #176]	; (800e944 <HAL_UART_Transmit_IT+0x144>)
 800e894:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a8:	e853 3f00 	ldrex	r3, [r3]
 800e8ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e8b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	3308      	adds	r3, #8
 800e8bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8be:	637a      	str	r2, [r7, #52]	; 0x34
 800e8c0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e8c6:	e841 2300 	strex	r3, r2, [r1]
 800e8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d1e5      	bne.n	800e89e <HAL_UART_Transmit_IT+0x9e>
 800e8d2:	e02c      	b.n	800e92e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	689b      	ldr	r3, [r3, #8]
 800e8d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8dc:	d107      	bne.n	800e8ee <HAL_UART_Transmit_IT+0xee>
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	691b      	ldr	r3, [r3, #16]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d103      	bne.n	800e8ee <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	4a17      	ldr	r2, [pc, #92]	; (800e948 <HAL_UART_Transmit_IT+0x148>)
 800e8ea:	675a      	str	r2, [r3, #116]	; 0x74
 800e8ec:	e002      	b.n	800e8f4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	4a16      	ldr	r2, [pc, #88]	; (800e94c <HAL_UART_Transmit_IT+0x14c>)
 800e8f2:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	e853 3f00 	ldrex	r3, [r3]
 800e908:	613b      	str	r3, [r7, #16]
   return(result);
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e910:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	461a      	mov	r2, r3
 800e918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91a:	623b      	str	r3, [r7, #32]
 800e91c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e91e:	69f9      	ldr	r1, [r7, #28]
 800e920:	6a3a      	ldr	r2, [r7, #32]
 800e922:	e841 2300 	strex	r3, r2, [r1]
 800e926:	61bb      	str	r3, [r7, #24]
   return(result);
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1e6      	bne.n	800e8fc <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800e92e:	2300      	movs	r3, #0
 800e930:	e000      	b.n	800e934 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800e932:	2302      	movs	r3, #2
  }
}
 800e934:	4618      	mov	r0, r3
 800e936:	3744      	adds	r7, #68	; 0x44
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr
 800e940:	08010747 	.word	0x08010747
 800e944:	08010667 	.word	0x08010667
 800e948:	080105a5 	.word	0x080105a5
 800e94c:	080104ed 	.word	0x080104ed

0800e950 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e950:	b580      	push	{r7, lr}
 800e952:	b08a      	sub	sp, #40	; 0x28
 800e954:	af00      	add	r7, sp, #0
 800e956:	60f8      	str	r0, [r7, #12]
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	4613      	mov	r3, r2
 800e95c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e964:	2b20      	cmp	r3, #32
 800e966:	d142      	bne.n	800e9ee <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d002      	beq.n	800e974 <HAL_UART_Receive_IT+0x24>
 800e96e:	88fb      	ldrh	r3, [r7, #6]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d101      	bne.n	800e978 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e974:	2301      	movs	r3, #1
 800e976:	e03b      	b.n	800e9f0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d101      	bne.n	800e986 <HAL_UART_Receive_IT+0x36>
 800e982:	2302      	movs	r3, #2
 800e984:	e034      	b.n	800e9f0 <HAL_UART_Receive_IT+0xa0>
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2201      	movs	r2, #1
 800e98a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	2200      	movs	r2, #0
 800e992:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4a17      	ldr	r2, [pc, #92]	; (800e9f8 <HAL_UART_Receive_IT+0xa8>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d01f      	beq.n	800e9de <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d018      	beq.n	800e9de <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	e853 3f00 	ldrex	r3, [r3]
 800e9b8:	613b      	str	r3, [r7, #16]
   return(result);
 800e9ba:	693b      	ldr	r3, [r7, #16]
 800e9bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e9c0:	627b      	str	r3, [r7, #36]	; 0x24
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	461a      	mov	r2, r3
 800e9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ca:	623b      	str	r3, [r7, #32]
 800e9cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9ce:	69f9      	ldr	r1, [r7, #28]
 800e9d0:	6a3a      	ldr	r2, [r7, #32]
 800e9d2:	e841 2300 	strex	r3, r2, [r1]
 800e9d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800e9d8:	69bb      	ldr	r3, [r7, #24]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1e6      	bne.n	800e9ac <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e9de:	88fb      	ldrh	r3, [r7, #6]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	68b9      	ldr	r1, [r7, #8]
 800e9e4:	68f8      	ldr	r0, [r7, #12]
 800e9e6:	f001 fbdb 	bl	80101a0 <UART_Start_Receive_IT>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	e000      	b.n	800e9f0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e9ee:	2302      	movs	r3, #2
  }
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3728      	adds	r7, #40	; 0x28
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}
 800e9f8:	58000c00 	.word	0x58000c00

0800e9fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b0ba      	sub	sp, #232	; 0xe8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	69db      	ldr	r3, [r3, #28]
 800ea0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	689b      	ldr	r3, [r3, #8]
 800ea1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ea22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ea26:	f640 030f 	movw	r3, #2063	; 0x80f
 800ea2a:	4013      	ands	r3, r2
 800ea2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ea30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d11b      	bne.n	800ea70 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ea38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea3c:	f003 0320 	and.w	r3, r3, #32
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d015      	beq.n	800ea70 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ea44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea48:	f003 0320 	and.w	r3, r3, #32
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d105      	bne.n	800ea5c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ea50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d009      	beq.n	800ea70 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f000 835a 	beq.w	800f11a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	4798      	blx	r3
      }
      return;
 800ea6e:	e354      	b.n	800f11a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ea70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 811f 	beq.w	800ecb8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ea7a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ea7e:	4b8b      	ldr	r3, [pc, #556]	; (800ecac <HAL_UART_IRQHandler+0x2b0>)
 800ea80:	4013      	ands	r3, r2
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d106      	bne.n	800ea94 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ea86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ea8a:	4b89      	ldr	r3, [pc, #548]	; (800ecb0 <HAL_UART_IRQHandler+0x2b4>)
 800ea8c:	4013      	ands	r3, r2
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	f000 8112 	beq.w	800ecb8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ea94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d011      	beq.n	800eac4 <HAL_UART_IRQHandler+0xc8>
 800eaa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eaa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d00b      	beq.n	800eac4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2201      	movs	r2, #1
 800eab2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaba:	f043 0201 	orr.w	r2, r3, #1
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eac8:	f003 0302 	and.w	r3, r3, #2
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d011      	beq.n	800eaf4 <HAL_UART_IRQHandler+0xf8>
 800ead0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ead4:	f003 0301 	and.w	r3, r3, #1
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00b      	beq.n	800eaf4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2202      	movs	r2, #2
 800eae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eaea:	f043 0204 	orr.w	r2, r3, #4
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800eaf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaf8:	f003 0304 	and.w	r3, r3, #4
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d011      	beq.n	800eb24 <HAL_UART_IRQHandler+0x128>
 800eb00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eb04:	f003 0301 	and.w	r3, r3, #1
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00b      	beq.n	800eb24 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	2204      	movs	r2, #4
 800eb12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb1a:	f043 0202 	orr.w	r2, r3, #2
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800eb24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb28:	f003 0308 	and.w	r3, r3, #8
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d017      	beq.n	800eb60 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb34:	f003 0320 	and.w	r3, r3, #32
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d105      	bne.n	800eb48 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eb3c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eb40:	4b5a      	ldr	r3, [pc, #360]	; (800ecac <HAL_UART_IRQHandler+0x2b0>)
 800eb42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d00b      	beq.n	800eb60 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	2208      	movs	r2, #8
 800eb4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb56:	f043 0208 	orr.w	r2, r3, #8
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eb60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d012      	beq.n	800eb92 <HAL_UART_IRQHandler+0x196>
 800eb6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00c      	beq.n	800eb92 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb88:	f043 0220 	orr.w	r2, r3, #32
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f000 82c0 	beq.w	800f11e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eb9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eba2:	f003 0320 	and.w	r3, r3, #32
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d013      	beq.n	800ebd2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ebaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ebae:	f003 0320 	and.w	r3, r3, #32
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d105      	bne.n	800ebc2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ebb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ebba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d007      	beq.n	800ebd2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d003      	beq.n	800ebd2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebe6:	2b40      	cmp	r3, #64	; 0x40
 800ebe8:	d005      	beq.n	800ebf6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ebea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ebee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d04f      	beq.n	800ec96 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f001 fbfc 	bl	80103f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	689b      	ldr	r3, [r3, #8]
 800ec02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec06:	2b40      	cmp	r3, #64	; 0x40
 800ec08:	d141      	bne.n	800ec8e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	3308      	adds	r3, #8
 800ec10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ec18:	e853 3f00 	ldrex	r3, [r3]
 800ec1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ec20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ec24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	3308      	adds	r3, #8
 800ec32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ec36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ec3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ec42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ec46:	e841 2300 	strex	r3, r2, [r1]
 800ec4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ec4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1d9      	bne.n	800ec0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d013      	beq.n	800ec86 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec62:	4a14      	ldr	r2, [pc, #80]	; (800ecb4 <HAL_UART_IRQHandler+0x2b8>)
 800ec64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f7f8 f934 	bl	8006ed8 <HAL_DMA_Abort_IT>
 800ec70:	4603      	mov	r3, r0
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d017      	beq.n	800eca6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ec80:	4610      	mov	r0, r2
 800ec82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec84:	e00f      	b.n	800eca6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f000 fa60 	bl	800f14c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec8c:	e00b      	b.n	800eca6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 fa5c 	bl	800f14c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ec94:	e007      	b.n	800eca6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fa58 	bl	800f14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800eca4:	e23b      	b.n	800f11e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eca6:	bf00      	nop
    return;
 800eca8:	e239      	b.n	800f11e <HAL_UART_IRQHandler+0x722>
 800ecaa:	bf00      	nop
 800ecac:	10000001 	.word	0x10000001
 800ecb0:	04000120 	.word	0x04000120
 800ecb4:	080104c1 	.word	0x080104c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	f040 81ce 	bne.w	800f05e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ecc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ecc6:	f003 0310 	and.w	r3, r3, #16
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	f000 81c7 	beq.w	800f05e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ecd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ecd4:	f003 0310 	and.w	r3, r3, #16
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f000 81c0 	beq.w	800f05e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	2210      	movs	r2, #16
 800ece4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	689b      	ldr	r3, [r3, #8]
 800ecec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecf0:	2b40      	cmp	r3, #64	; 0x40
 800ecf2:	f040 813b 	bne.w	800ef6c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	4a8b      	ldr	r2, [pc, #556]	; (800ef2c <HAL_UART_IRQHandler+0x530>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d059      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a89      	ldr	r2, [pc, #548]	; (800ef30 <HAL_UART_IRQHandler+0x534>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d053      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4a87      	ldr	r2, [pc, #540]	; (800ef34 <HAL_UART_IRQHandler+0x538>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d04d      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a85      	ldr	r2, [pc, #532]	; (800ef38 <HAL_UART_IRQHandler+0x53c>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d047      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	4a83      	ldr	r2, [pc, #524]	; (800ef3c <HAL_UART_IRQHandler+0x540>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d041      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a81      	ldr	r2, [pc, #516]	; (800ef40 <HAL_UART_IRQHandler+0x544>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d03b      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a7f      	ldr	r2, [pc, #508]	; (800ef44 <HAL_UART_IRQHandler+0x548>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d035      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4a7d      	ldr	r2, [pc, #500]	; (800ef48 <HAL_UART_IRQHandler+0x54c>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d02f      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a7b      	ldr	r2, [pc, #492]	; (800ef4c <HAL_UART_IRQHandler+0x550>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d029      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	4a79      	ldr	r2, [pc, #484]	; (800ef50 <HAL_UART_IRQHandler+0x554>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d023      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	4a77      	ldr	r2, [pc, #476]	; (800ef54 <HAL_UART_IRQHandler+0x558>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d01d      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	4a75      	ldr	r2, [pc, #468]	; (800ef58 <HAL_UART_IRQHandler+0x55c>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d017      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	4a73      	ldr	r2, [pc, #460]	; (800ef5c <HAL_UART_IRQHandler+0x560>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d011      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	4a71      	ldr	r2, [pc, #452]	; (800ef60 <HAL_UART_IRQHandler+0x564>)
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d00b      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a6f      	ldr	r2, [pc, #444]	; (800ef64 <HAL_UART_IRQHandler+0x568>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d005      	beq.n	800edb6 <HAL_UART_IRQHandler+0x3ba>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a6d      	ldr	r2, [pc, #436]	; (800ef68 <HAL_UART_IRQHandler+0x56c>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d105      	bne.n	800edc2 <HAL_UART_IRQHandler+0x3c6>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	685b      	ldr	r3, [r3, #4]
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	e004      	b.n	800edcc <HAL_UART_IRQHandler+0x3d0>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	b29b      	uxth	r3, r3
 800edcc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800edd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 81a4 	beq.w	800f122 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ede0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ede4:	429a      	cmp	r2, r3
 800ede6:	f080 819c 	bcs.w	800f122 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800edf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800edf8:	69db      	ldr	r3, [r3, #28]
 800edfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edfe:	f000 8086 	beq.w	800ef0e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee0e:	e853 3f00 	ldrex	r3, [r3]
 800ee12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ee16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	461a      	mov	r2, r3
 800ee28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ee2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ee30:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee34:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ee38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ee3c:	e841 2300 	strex	r3, r2, [r1]
 800ee40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ee44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d1da      	bne.n	800ee02 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	3308      	adds	r3, #8
 800ee52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee56:	e853 3f00 	ldrex	r3, [r3]
 800ee5a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ee5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ee5e:	f023 0301 	bic.w	r3, r3, #1
 800ee62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	3308      	adds	r3, #8
 800ee6c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ee70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ee74:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee76:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ee78:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ee7c:	e841 2300 	strex	r3, r2, [r1]
 800ee80:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ee82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1e1      	bne.n	800ee4c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	3308      	adds	r3, #8
 800ee8e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee92:	e853 3f00 	ldrex	r3, [r3]
 800ee96:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ee98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	3308      	adds	r3, #8
 800eea8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800eeac:	66fa      	str	r2, [r7, #108]	; 0x6c
 800eeae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800eeb2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800eeb4:	e841 2300 	strex	r3, r2, [r1]
 800eeb8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800eeba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1e3      	bne.n	800ee88 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2220      	movs	r2, #32
 800eec4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eed6:	e853 3f00 	ldrex	r3, [r3]
 800eeda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800eedc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eede:	f023 0310 	bic.w	r3, r3, #16
 800eee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800eef0:	65bb      	str	r3, [r7, #88]	; 0x58
 800eef2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eef4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800eef6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eef8:	e841 2300 	strex	r3, r2, [r1]
 800eefc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800eefe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d1e4      	bne.n	800eece <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7f7 fcc7 	bl	800689c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	1ad3      	subs	r3, r2, r3
 800ef1e:	b29b      	uxth	r3, r3
 800ef20:	4619      	mov	r1, r3
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f000 f91c 	bl	800f160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ef28:	e0fb      	b.n	800f122 <HAL_UART_IRQHandler+0x726>
 800ef2a:	bf00      	nop
 800ef2c:	40020010 	.word	0x40020010
 800ef30:	40020028 	.word	0x40020028
 800ef34:	40020040 	.word	0x40020040
 800ef38:	40020058 	.word	0x40020058
 800ef3c:	40020070 	.word	0x40020070
 800ef40:	40020088 	.word	0x40020088
 800ef44:	400200a0 	.word	0x400200a0
 800ef48:	400200b8 	.word	0x400200b8
 800ef4c:	40020410 	.word	0x40020410
 800ef50:	40020428 	.word	0x40020428
 800ef54:	40020440 	.word	0x40020440
 800ef58:	40020458 	.word	0x40020458
 800ef5c:	40020470 	.word	0x40020470
 800ef60:	40020488 	.word	0x40020488
 800ef64:	400204a0 	.word	0x400204a0
 800ef68:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef78:	b29b      	uxth	r3, r3
 800ef7a:	1ad3      	subs	r3, r2, r3
 800ef7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	f000 80cc 	beq.w	800f126 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ef8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	f000 80c7 	beq.w	800f126 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa0:	e853 3f00 	ldrex	r3, [r3]
 800efa4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800efa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800efac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	461a      	mov	r2, r3
 800efb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800efba:	647b      	str	r3, [r7, #68]	; 0x44
 800efbc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800efc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800efc2:	e841 2300 	strex	r3, r2, [r1]
 800efc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800efc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1e4      	bne.n	800ef98 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	3308      	adds	r3, #8
 800efd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd8:	e853 3f00 	ldrex	r3, [r3]
 800efdc:	623b      	str	r3, [r7, #32]
   return(result);
 800efde:	6a3a      	ldr	r2, [r7, #32]
 800efe0:	4b54      	ldr	r3, [pc, #336]	; (800f134 <HAL_UART_IRQHandler+0x738>)
 800efe2:	4013      	ands	r3, r2
 800efe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	3308      	adds	r3, #8
 800efee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800eff2:	633a      	str	r2, [r7, #48]	; 0x30
 800eff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800effa:	e841 2300 	strex	r3, r2, [r1]
 800effe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f002:	2b00      	cmp	r3, #0
 800f004:	d1e3      	bne.n	800efce <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2220      	movs	r2, #32
 800f00a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2200      	movs	r2, #0
 800f018:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	e853 3f00 	ldrex	r3, [r3]
 800f026:	60fb      	str	r3, [r7, #12]
   return(result);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f023 0310 	bic.w	r3, r3, #16
 800f02e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	461a      	mov	r2, r3
 800f038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f03c:	61fb      	str	r3, [r7, #28]
 800f03e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f040:	69b9      	ldr	r1, [r7, #24]
 800f042:	69fa      	ldr	r2, [r7, #28]
 800f044:	e841 2300 	strex	r3, r2, [r1]
 800f048:	617b      	str	r3, [r7, #20]
   return(result);
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d1e4      	bne.n	800f01a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f054:	4619      	mov	r1, r3
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 f882 	bl	800f160 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f05c:	e063      	b.n	800f126 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f05e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00e      	beq.n	800f088 <HAL_UART_IRQHandler+0x68c>
 800f06a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f06e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f072:	2b00      	cmp	r3, #0
 800f074:	d008      	beq.n	800f088 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f07e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f002 f85d 	bl	8011140 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f086:	e051      	b.n	800f12c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f08c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f090:	2b00      	cmp	r3, #0
 800f092:	d014      	beq.n	800f0be <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d105      	bne.n	800f0ac <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f0a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f0a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d008      	beq.n	800f0be <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d03a      	beq.n	800f12a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	4798      	blx	r3
    }
    return;
 800f0bc:	e035      	b.n	800f12a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d009      	beq.n	800f0de <HAL_UART_IRQHandler+0x6e2>
 800f0ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d003      	beq.n	800f0de <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f001 fbaa 	bl	8010830 <UART_EndTransmit_IT>
    return;
 800f0dc:	e026      	b.n	800f12c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f0de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f0e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d009      	beq.n	800f0fe <HAL_UART_IRQHandler+0x702>
 800f0ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f0ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d003      	beq.n	800f0fe <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f002 f836 	bl	8011168 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f0fc:	e016      	b.n	800f12c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f0fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f102:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f106:	2b00      	cmp	r3, #0
 800f108:	d010      	beq.n	800f12c <HAL_UART_IRQHandler+0x730>
 800f10a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	da0c      	bge.n	800f12c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f002 f81e 	bl	8011154 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f118:	e008      	b.n	800f12c <HAL_UART_IRQHandler+0x730>
      return;
 800f11a:	bf00      	nop
 800f11c:	e006      	b.n	800f12c <HAL_UART_IRQHandler+0x730>
    return;
 800f11e:	bf00      	nop
 800f120:	e004      	b.n	800f12c <HAL_UART_IRQHandler+0x730>
      return;
 800f122:	bf00      	nop
 800f124:	e002      	b.n	800f12c <HAL_UART_IRQHandler+0x730>
      return;
 800f126:	bf00      	nop
 800f128:	e000      	b.n	800f12c <HAL_UART_IRQHandler+0x730>
    return;
 800f12a:	bf00      	nop
  }
}
 800f12c:	37e8      	adds	r7, #232	; 0xe8
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	effffffe 	.word	0xeffffffe

0800f138 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f140:	bf00      	nop
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f154:	bf00      	nop
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	460b      	mov	r3, r1
 800f16a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f16c:	bf00      	nop
 800f16e:	370c      	adds	r7, #12
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr

0800f178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f178:	b5b0      	push	{r4, r5, r7, lr}
 800f17a:	b08e      	sub	sp, #56	; 0x38
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f180:	2300      	movs	r3, #0
 800f182:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	689a      	ldr	r2, [r3, #8]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	691b      	ldr	r3, [r3, #16]
 800f18e:	431a      	orrs	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	695b      	ldr	r3, [r3, #20]
 800f194:	431a      	orrs	r2, r3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	69db      	ldr	r3, [r3, #28]
 800f19a:	4313      	orrs	r3, r2
 800f19c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	4bbf      	ldr	r3, [pc, #764]	; (800f4a4 <UART_SetConfig+0x32c>)
 800f1a6:	4013      	ands	r3, r2
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	6812      	ldr	r2, [r2, #0]
 800f1ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f1ae:	430b      	orrs	r3, r1
 800f1b0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	68da      	ldr	r2, [r3, #12]
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	430a      	orrs	r2, r1
 800f1c6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	699b      	ldr	r3, [r3, #24]
 800f1cc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	4ab5      	ldr	r2, [pc, #724]	; (800f4a8 <UART_SetConfig+0x330>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d004      	beq.n	800f1e2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	6a1b      	ldr	r3, [r3, #32]
 800f1dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	689a      	ldr	r2, [r3, #8]
 800f1e8:	4bb0      	ldr	r3, [pc, #704]	; (800f4ac <UART_SetConfig+0x334>)
 800f1ea:	4013      	ands	r3, r2
 800f1ec:	687a      	ldr	r2, [r7, #4]
 800f1ee:	6812      	ldr	r2, [r2, #0]
 800f1f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f1f2:	430b      	orrs	r3, r1
 800f1f4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1fc:	f023 010f 	bic.w	r1, r3, #15
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	430a      	orrs	r2, r1
 800f20a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4aa7      	ldr	r2, [pc, #668]	; (800f4b0 <UART_SetConfig+0x338>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d176      	bne.n	800f304 <UART_SetConfig+0x18c>
 800f216:	4ba7      	ldr	r3, [pc, #668]	; (800f4b4 <UART_SetConfig+0x33c>)
 800f218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f21a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f21e:	2b28      	cmp	r3, #40	; 0x28
 800f220:	d86c      	bhi.n	800f2fc <UART_SetConfig+0x184>
 800f222:	a201      	add	r2, pc, #4	; (adr r2, 800f228 <UART_SetConfig+0xb0>)
 800f224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f228:	0800f2cd 	.word	0x0800f2cd
 800f22c:	0800f2fd 	.word	0x0800f2fd
 800f230:	0800f2fd 	.word	0x0800f2fd
 800f234:	0800f2fd 	.word	0x0800f2fd
 800f238:	0800f2fd 	.word	0x0800f2fd
 800f23c:	0800f2fd 	.word	0x0800f2fd
 800f240:	0800f2fd 	.word	0x0800f2fd
 800f244:	0800f2fd 	.word	0x0800f2fd
 800f248:	0800f2d5 	.word	0x0800f2d5
 800f24c:	0800f2fd 	.word	0x0800f2fd
 800f250:	0800f2fd 	.word	0x0800f2fd
 800f254:	0800f2fd 	.word	0x0800f2fd
 800f258:	0800f2fd 	.word	0x0800f2fd
 800f25c:	0800f2fd 	.word	0x0800f2fd
 800f260:	0800f2fd 	.word	0x0800f2fd
 800f264:	0800f2fd 	.word	0x0800f2fd
 800f268:	0800f2dd 	.word	0x0800f2dd
 800f26c:	0800f2fd 	.word	0x0800f2fd
 800f270:	0800f2fd 	.word	0x0800f2fd
 800f274:	0800f2fd 	.word	0x0800f2fd
 800f278:	0800f2fd 	.word	0x0800f2fd
 800f27c:	0800f2fd 	.word	0x0800f2fd
 800f280:	0800f2fd 	.word	0x0800f2fd
 800f284:	0800f2fd 	.word	0x0800f2fd
 800f288:	0800f2e5 	.word	0x0800f2e5
 800f28c:	0800f2fd 	.word	0x0800f2fd
 800f290:	0800f2fd 	.word	0x0800f2fd
 800f294:	0800f2fd 	.word	0x0800f2fd
 800f298:	0800f2fd 	.word	0x0800f2fd
 800f29c:	0800f2fd 	.word	0x0800f2fd
 800f2a0:	0800f2fd 	.word	0x0800f2fd
 800f2a4:	0800f2fd 	.word	0x0800f2fd
 800f2a8:	0800f2ed 	.word	0x0800f2ed
 800f2ac:	0800f2fd 	.word	0x0800f2fd
 800f2b0:	0800f2fd 	.word	0x0800f2fd
 800f2b4:	0800f2fd 	.word	0x0800f2fd
 800f2b8:	0800f2fd 	.word	0x0800f2fd
 800f2bc:	0800f2fd 	.word	0x0800f2fd
 800f2c0:	0800f2fd 	.word	0x0800f2fd
 800f2c4:	0800f2fd 	.word	0x0800f2fd
 800f2c8:	0800f2f5 	.word	0x0800f2f5
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2d2:	e326      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f2d4:	2304      	movs	r3, #4
 800f2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2da:	e322      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f2dc:	2308      	movs	r3, #8
 800f2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2e2:	e31e      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f2e4:	2310      	movs	r3, #16
 800f2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2ea:	e31a      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f2ec:	2320      	movs	r3, #32
 800f2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2f2:	e316      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f2f4:	2340      	movs	r3, #64	; 0x40
 800f2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f2fa:	e312      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f2fc:	2380      	movs	r3, #128	; 0x80
 800f2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f302:	e30e      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a6b      	ldr	r2, [pc, #428]	; (800f4b8 <UART_SetConfig+0x340>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d130      	bne.n	800f370 <UART_SetConfig+0x1f8>
 800f30e:	4b69      	ldr	r3, [pc, #420]	; (800f4b4 <UART_SetConfig+0x33c>)
 800f310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f312:	f003 0307 	and.w	r3, r3, #7
 800f316:	2b05      	cmp	r3, #5
 800f318:	d826      	bhi.n	800f368 <UART_SetConfig+0x1f0>
 800f31a:	a201      	add	r2, pc, #4	; (adr r2, 800f320 <UART_SetConfig+0x1a8>)
 800f31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f320:	0800f339 	.word	0x0800f339
 800f324:	0800f341 	.word	0x0800f341
 800f328:	0800f349 	.word	0x0800f349
 800f32c:	0800f351 	.word	0x0800f351
 800f330:	0800f359 	.word	0x0800f359
 800f334:	0800f361 	.word	0x0800f361
 800f338:	2300      	movs	r3, #0
 800f33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f33e:	e2f0      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f340:	2304      	movs	r3, #4
 800f342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f346:	e2ec      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f348:	2308      	movs	r3, #8
 800f34a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f34e:	e2e8      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f350:	2310      	movs	r3, #16
 800f352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f356:	e2e4      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f358:	2320      	movs	r3, #32
 800f35a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f35e:	e2e0      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f360:	2340      	movs	r3, #64	; 0x40
 800f362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f366:	e2dc      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f368:	2380      	movs	r3, #128	; 0x80
 800f36a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f36e:	e2d8      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4a51      	ldr	r2, [pc, #324]	; (800f4bc <UART_SetConfig+0x344>)
 800f376:	4293      	cmp	r3, r2
 800f378:	d130      	bne.n	800f3dc <UART_SetConfig+0x264>
 800f37a:	4b4e      	ldr	r3, [pc, #312]	; (800f4b4 <UART_SetConfig+0x33c>)
 800f37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f37e:	f003 0307 	and.w	r3, r3, #7
 800f382:	2b05      	cmp	r3, #5
 800f384:	d826      	bhi.n	800f3d4 <UART_SetConfig+0x25c>
 800f386:	a201      	add	r2, pc, #4	; (adr r2, 800f38c <UART_SetConfig+0x214>)
 800f388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f38c:	0800f3a5 	.word	0x0800f3a5
 800f390:	0800f3ad 	.word	0x0800f3ad
 800f394:	0800f3b5 	.word	0x0800f3b5
 800f398:	0800f3bd 	.word	0x0800f3bd
 800f39c:	0800f3c5 	.word	0x0800f3c5
 800f3a0:	0800f3cd 	.word	0x0800f3cd
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3aa:	e2ba      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f3ac:	2304      	movs	r3, #4
 800f3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3b2:	e2b6      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f3b4:	2308      	movs	r3, #8
 800f3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3ba:	e2b2      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f3bc:	2310      	movs	r3, #16
 800f3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3c2:	e2ae      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f3c4:	2320      	movs	r3, #32
 800f3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3ca:	e2aa      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f3cc:	2340      	movs	r3, #64	; 0x40
 800f3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3d2:	e2a6      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f3d4:	2380      	movs	r3, #128	; 0x80
 800f3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f3da:	e2a2      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4a37      	ldr	r2, [pc, #220]	; (800f4c0 <UART_SetConfig+0x348>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d130      	bne.n	800f448 <UART_SetConfig+0x2d0>
 800f3e6:	4b33      	ldr	r3, [pc, #204]	; (800f4b4 <UART_SetConfig+0x33c>)
 800f3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3ea:	f003 0307 	and.w	r3, r3, #7
 800f3ee:	2b05      	cmp	r3, #5
 800f3f0:	d826      	bhi.n	800f440 <UART_SetConfig+0x2c8>
 800f3f2:	a201      	add	r2, pc, #4	; (adr r2, 800f3f8 <UART_SetConfig+0x280>)
 800f3f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f8:	0800f411 	.word	0x0800f411
 800f3fc:	0800f419 	.word	0x0800f419
 800f400:	0800f421 	.word	0x0800f421
 800f404:	0800f429 	.word	0x0800f429
 800f408:	0800f431 	.word	0x0800f431
 800f40c:	0800f439 	.word	0x0800f439
 800f410:	2300      	movs	r3, #0
 800f412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f416:	e284      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f418:	2304      	movs	r3, #4
 800f41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f41e:	e280      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f420:	2308      	movs	r3, #8
 800f422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f426:	e27c      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f428:	2310      	movs	r3, #16
 800f42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f42e:	e278      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f430:	2320      	movs	r3, #32
 800f432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f436:	e274      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f438:	2340      	movs	r3, #64	; 0x40
 800f43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f43e:	e270      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f440:	2380      	movs	r3, #128	; 0x80
 800f442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f446:	e26c      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a1d      	ldr	r2, [pc, #116]	; (800f4c4 <UART_SetConfig+0x34c>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d142      	bne.n	800f4d8 <UART_SetConfig+0x360>
 800f452:	4b18      	ldr	r3, [pc, #96]	; (800f4b4 <UART_SetConfig+0x33c>)
 800f454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f456:	f003 0307 	and.w	r3, r3, #7
 800f45a:	2b05      	cmp	r3, #5
 800f45c:	d838      	bhi.n	800f4d0 <UART_SetConfig+0x358>
 800f45e:	a201      	add	r2, pc, #4	; (adr r2, 800f464 <UART_SetConfig+0x2ec>)
 800f460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f464:	0800f47d 	.word	0x0800f47d
 800f468:	0800f485 	.word	0x0800f485
 800f46c:	0800f48d 	.word	0x0800f48d
 800f470:	0800f495 	.word	0x0800f495
 800f474:	0800f49d 	.word	0x0800f49d
 800f478:	0800f4c9 	.word	0x0800f4c9
 800f47c:	2300      	movs	r3, #0
 800f47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f482:	e24e      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f484:	2304      	movs	r3, #4
 800f486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f48a:	e24a      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f48c:	2308      	movs	r3, #8
 800f48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f492:	e246      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f494:	2310      	movs	r3, #16
 800f496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f49a:	e242      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f49c:	2320      	movs	r3, #32
 800f49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4a2:	e23e      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f4a4:	cfff69f3 	.word	0xcfff69f3
 800f4a8:	58000c00 	.word	0x58000c00
 800f4ac:	11fff4ff 	.word	0x11fff4ff
 800f4b0:	40011000 	.word	0x40011000
 800f4b4:	58024400 	.word	0x58024400
 800f4b8:	40004400 	.word	0x40004400
 800f4bc:	40004800 	.word	0x40004800
 800f4c0:	40004c00 	.word	0x40004c00
 800f4c4:	40005000 	.word	0x40005000
 800f4c8:	2340      	movs	r3, #64	; 0x40
 800f4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4ce:	e228      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f4d0:	2380      	movs	r3, #128	; 0x80
 800f4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f4d6:	e224      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4ab1      	ldr	r2, [pc, #708]	; (800f7a4 <UART_SetConfig+0x62c>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d176      	bne.n	800f5d0 <UART_SetConfig+0x458>
 800f4e2:	4bb1      	ldr	r3, [pc, #708]	; (800f7a8 <UART_SetConfig+0x630>)
 800f4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f4ea:	2b28      	cmp	r3, #40	; 0x28
 800f4ec:	d86c      	bhi.n	800f5c8 <UART_SetConfig+0x450>
 800f4ee:	a201      	add	r2, pc, #4	; (adr r2, 800f4f4 <UART_SetConfig+0x37c>)
 800f4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4f4:	0800f599 	.word	0x0800f599
 800f4f8:	0800f5c9 	.word	0x0800f5c9
 800f4fc:	0800f5c9 	.word	0x0800f5c9
 800f500:	0800f5c9 	.word	0x0800f5c9
 800f504:	0800f5c9 	.word	0x0800f5c9
 800f508:	0800f5c9 	.word	0x0800f5c9
 800f50c:	0800f5c9 	.word	0x0800f5c9
 800f510:	0800f5c9 	.word	0x0800f5c9
 800f514:	0800f5a1 	.word	0x0800f5a1
 800f518:	0800f5c9 	.word	0x0800f5c9
 800f51c:	0800f5c9 	.word	0x0800f5c9
 800f520:	0800f5c9 	.word	0x0800f5c9
 800f524:	0800f5c9 	.word	0x0800f5c9
 800f528:	0800f5c9 	.word	0x0800f5c9
 800f52c:	0800f5c9 	.word	0x0800f5c9
 800f530:	0800f5c9 	.word	0x0800f5c9
 800f534:	0800f5a9 	.word	0x0800f5a9
 800f538:	0800f5c9 	.word	0x0800f5c9
 800f53c:	0800f5c9 	.word	0x0800f5c9
 800f540:	0800f5c9 	.word	0x0800f5c9
 800f544:	0800f5c9 	.word	0x0800f5c9
 800f548:	0800f5c9 	.word	0x0800f5c9
 800f54c:	0800f5c9 	.word	0x0800f5c9
 800f550:	0800f5c9 	.word	0x0800f5c9
 800f554:	0800f5b1 	.word	0x0800f5b1
 800f558:	0800f5c9 	.word	0x0800f5c9
 800f55c:	0800f5c9 	.word	0x0800f5c9
 800f560:	0800f5c9 	.word	0x0800f5c9
 800f564:	0800f5c9 	.word	0x0800f5c9
 800f568:	0800f5c9 	.word	0x0800f5c9
 800f56c:	0800f5c9 	.word	0x0800f5c9
 800f570:	0800f5c9 	.word	0x0800f5c9
 800f574:	0800f5b9 	.word	0x0800f5b9
 800f578:	0800f5c9 	.word	0x0800f5c9
 800f57c:	0800f5c9 	.word	0x0800f5c9
 800f580:	0800f5c9 	.word	0x0800f5c9
 800f584:	0800f5c9 	.word	0x0800f5c9
 800f588:	0800f5c9 	.word	0x0800f5c9
 800f58c:	0800f5c9 	.word	0x0800f5c9
 800f590:	0800f5c9 	.word	0x0800f5c9
 800f594:	0800f5c1 	.word	0x0800f5c1
 800f598:	2301      	movs	r3, #1
 800f59a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f59e:	e1c0      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f5a0:	2304      	movs	r3, #4
 800f5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5a6:	e1bc      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f5a8:	2308      	movs	r3, #8
 800f5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5ae:	e1b8      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f5b0:	2310      	movs	r3, #16
 800f5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5b6:	e1b4      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f5b8:	2320      	movs	r3, #32
 800f5ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5be:	e1b0      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f5c0:	2340      	movs	r3, #64	; 0x40
 800f5c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5c6:	e1ac      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f5c8:	2380      	movs	r3, #128	; 0x80
 800f5ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f5ce:	e1a8      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	4a75      	ldr	r2, [pc, #468]	; (800f7ac <UART_SetConfig+0x634>)
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	d130      	bne.n	800f63c <UART_SetConfig+0x4c4>
 800f5da:	4b73      	ldr	r3, [pc, #460]	; (800f7a8 <UART_SetConfig+0x630>)
 800f5dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5de:	f003 0307 	and.w	r3, r3, #7
 800f5e2:	2b05      	cmp	r3, #5
 800f5e4:	d826      	bhi.n	800f634 <UART_SetConfig+0x4bc>
 800f5e6:	a201      	add	r2, pc, #4	; (adr r2, 800f5ec <UART_SetConfig+0x474>)
 800f5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ec:	0800f605 	.word	0x0800f605
 800f5f0:	0800f60d 	.word	0x0800f60d
 800f5f4:	0800f615 	.word	0x0800f615
 800f5f8:	0800f61d 	.word	0x0800f61d
 800f5fc:	0800f625 	.word	0x0800f625
 800f600:	0800f62d 	.word	0x0800f62d
 800f604:	2300      	movs	r3, #0
 800f606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f60a:	e18a      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f60c:	2304      	movs	r3, #4
 800f60e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f612:	e186      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f614:	2308      	movs	r3, #8
 800f616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f61a:	e182      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f61c:	2310      	movs	r3, #16
 800f61e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f622:	e17e      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f624:	2320      	movs	r3, #32
 800f626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f62a:	e17a      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f62c:	2340      	movs	r3, #64	; 0x40
 800f62e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f632:	e176      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f634:	2380      	movs	r3, #128	; 0x80
 800f636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f63a:	e172      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	4a5b      	ldr	r2, [pc, #364]	; (800f7b0 <UART_SetConfig+0x638>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d130      	bne.n	800f6a8 <UART_SetConfig+0x530>
 800f646:	4b58      	ldr	r3, [pc, #352]	; (800f7a8 <UART_SetConfig+0x630>)
 800f648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64a:	f003 0307 	and.w	r3, r3, #7
 800f64e:	2b05      	cmp	r3, #5
 800f650:	d826      	bhi.n	800f6a0 <UART_SetConfig+0x528>
 800f652:	a201      	add	r2, pc, #4	; (adr r2, 800f658 <UART_SetConfig+0x4e0>)
 800f654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f658:	0800f671 	.word	0x0800f671
 800f65c:	0800f679 	.word	0x0800f679
 800f660:	0800f681 	.word	0x0800f681
 800f664:	0800f689 	.word	0x0800f689
 800f668:	0800f691 	.word	0x0800f691
 800f66c:	0800f699 	.word	0x0800f699
 800f670:	2300      	movs	r3, #0
 800f672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f676:	e154      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f678:	2304      	movs	r3, #4
 800f67a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f67e:	e150      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f680:	2308      	movs	r3, #8
 800f682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f686:	e14c      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f688:	2310      	movs	r3, #16
 800f68a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f68e:	e148      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f690:	2320      	movs	r3, #32
 800f692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f696:	e144      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f698:	2340      	movs	r3, #64	; 0x40
 800f69a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f69e:	e140      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f6a0:	2380      	movs	r3, #128	; 0x80
 800f6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f6a6:	e13c      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	4a41      	ldr	r2, [pc, #260]	; (800f7b4 <UART_SetConfig+0x63c>)
 800f6ae:	4293      	cmp	r3, r2
 800f6b0:	f040 8082 	bne.w	800f7b8 <UART_SetConfig+0x640>
 800f6b4:	4b3c      	ldr	r3, [pc, #240]	; (800f7a8 <UART_SetConfig+0x630>)
 800f6b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f6bc:	2b28      	cmp	r3, #40	; 0x28
 800f6be:	d86d      	bhi.n	800f79c <UART_SetConfig+0x624>
 800f6c0:	a201      	add	r2, pc, #4	; (adr r2, 800f6c8 <UART_SetConfig+0x550>)
 800f6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6c6:	bf00      	nop
 800f6c8:	0800f76d 	.word	0x0800f76d
 800f6cc:	0800f79d 	.word	0x0800f79d
 800f6d0:	0800f79d 	.word	0x0800f79d
 800f6d4:	0800f79d 	.word	0x0800f79d
 800f6d8:	0800f79d 	.word	0x0800f79d
 800f6dc:	0800f79d 	.word	0x0800f79d
 800f6e0:	0800f79d 	.word	0x0800f79d
 800f6e4:	0800f79d 	.word	0x0800f79d
 800f6e8:	0800f775 	.word	0x0800f775
 800f6ec:	0800f79d 	.word	0x0800f79d
 800f6f0:	0800f79d 	.word	0x0800f79d
 800f6f4:	0800f79d 	.word	0x0800f79d
 800f6f8:	0800f79d 	.word	0x0800f79d
 800f6fc:	0800f79d 	.word	0x0800f79d
 800f700:	0800f79d 	.word	0x0800f79d
 800f704:	0800f79d 	.word	0x0800f79d
 800f708:	0800f77d 	.word	0x0800f77d
 800f70c:	0800f79d 	.word	0x0800f79d
 800f710:	0800f79d 	.word	0x0800f79d
 800f714:	0800f79d 	.word	0x0800f79d
 800f718:	0800f79d 	.word	0x0800f79d
 800f71c:	0800f79d 	.word	0x0800f79d
 800f720:	0800f79d 	.word	0x0800f79d
 800f724:	0800f79d 	.word	0x0800f79d
 800f728:	0800f785 	.word	0x0800f785
 800f72c:	0800f79d 	.word	0x0800f79d
 800f730:	0800f79d 	.word	0x0800f79d
 800f734:	0800f79d 	.word	0x0800f79d
 800f738:	0800f79d 	.word	0x0800f79d
 800f73c:	0800f79d 	.word	0x0800f79d
 800f740:	0800f79d 	.word	0x0800f79d
 800f744:	0800f79d 	.word	0x0800f79d
 800f748:	0800f78d 	.word	0x0800f78d
 800f74c:	0800f79d 	.word	0x0800f79d
 800f750:	0800f79d 	.word	0x0800f79d
 800f754:	0800f79d 	.word	0x0800f79d
 800f758:	0800f79d 	.word	0x0800f79d
 800f75c:	0800f79d 	.word	0x0800f79d
 800f760:	0800f79d 	.word	0x0800f79d
 800f764:	0800f79d 	.word	0x0800f79d
 800f768:	0800f795 	.word	0x0800f795
 800f76c:	2301      	movs	r3, #1
 800f76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f772:	e0d6      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f774:	2304      	movs	r3, #4
 800f776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f77a:	e0d2      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f77c:	2308      	movs	r3, #8
 800f77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f782:	e0ce      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f784:	2310      	movs	r3, #16
 800f786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f78a:	e0ca      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f78c:	2320      	movs	r3, #32
 800f78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f792:	e0c6      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f794:	2340      	movs	r3, #64	; 0x40
 800f796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f79a:	e0c2      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f79c:	2380      	movs	r3, #128	; 0x80
 800f79e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f7a2:	e0be      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f7a4:	40011400 	.word	0x40011400
 800f7a8:	58024400 	.word	0x58024400
 800f7ac:	40007800 	.word	0x40007800
 800f7b0:	40007c00 	.word	0x40007c00
 800f7b4:	40011800 	.word	0x40011800
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	4aad      	ldr	r2, [pc, #692]	; (800fa74 <UART_SetConfig+0x8fc>)
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	d176      	bne.n	800f8b0 <UART_SetConfig+0x738>
 800f7c2:	4bad      	ldr	r3, [pc, #692]	; (800fa78 <UART_SetConfig+0x900>)
 800f7c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7ca:	2b28      	cmp	r3, #40	; 0x28
 800f7cc:	d86c      	bhi.n	800f8a8 <UART_SetConfig+0x730>
 800f7ce:	a201      	add	r2, pc, #4	; (adr r2, 800f7d4 <UART_SetConfig+0x65c>)
 800f7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d4:	0800f879 	.word	0x0800f879
 800f7d8:	0800f8a9 	.word	0x0800f8a9
 800f7dc:	0800f8a9 	.word	0x0800f8a9
 800f7e0:	0800f8a9 	.word	0x0800f8a9
 800f7e4:	0800f8a9 	.word	0x0800f8a9
 800f7e8:	0800f8a9 	.word	0x0800f8a9
 800f7ec:	0800f8a9 	.word	0x0800f8a9
 800f7f0:	0800f8a9 	.word	0x0800f8a9
 800f7f4:	0800f881 	.word	0x0800f881
 800f7f8:	0800f8a9 	.word	0x0800f8a9
 800f7fc:	0800f8a9 	.word	0x0800f8a9
 800f800:	0800f8a9 	.word	0x0800f8a9
 800f804:	0800f8a9 	.word	0x0800f8a9
 800f808:	0800f8a9 	.word	0x0800f8a9
 800f80c:	0800f8a9 	.word	0x0800f8a9
 800f810:	0800f8a9 	.word	0x0800f8a9
 800f814:	0800f889 	.word	0x0800f889
 800f818:	0800f8a9 	.word	0x0800f8a9
 800f81c:	0800f8a9 	.word	0x0800f8a9
 800f820:	0800f8a9 	.word	0x0800f8a9
 800f824:	0800f8a9 	.word	0x0800f8a9
 800f828:	0800f8a9 	.word	0x0800f8a9
 800f82c:	0800f8a9 	.word	0x0800f8a9
 800f830:	0800f8a9 	.word	0x0800f8a9
 800f834:	0800f891 	.word	0x0800f891
 800f838:	0800f8a9 	.word	0x0800f8a9
 800f83c:	0800f8a9 	.word	0x0800f8a9
 800f840:	0800f8a9 	.word	0x0800f8a9
 800f844:	0800f8a9 	.word	0x0800f8a9
 800f848:	0800f8a9 	.word	0x0800f8a9
 800f84c:	0800f8a9 	.word	0x0800f8a9
 800f850:	0800f8a9 	.word	0x0800f8a9
 800f854:	0800f899 	.word	0x0800f899
 800f858:	0800f8a9 	.word	0x0800f8a9
 800f85c:	0800f8a9 	.word	0x0800f8a9
 800f860:	0800f8a9 	.word	0x0800f8a9
 800f864:	0800f8a9 	.word	0x0800f8a9
 800f868:	0800f8a9 	.word	0x0800f8a9
 800f86c:	0800f8a9 	.word	0x0800f8a9
 800f870:	0800f8a9 	.word	0x0800f8a9
 800f874:	0800f8a1 	.word	0x0800f8a1
 800f878:	2301      	movs	r3, #1
 800f87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f87e:	e050      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f880:	2304      	movs	r3, #4
 800f882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f886:	e04c      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f888:	2308      	movs	r3, #8
 800f88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f88e:	e048      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f890:	2310      	movs	r3, #16
 800f892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f896:	e044      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f898:	2320      	movs	r3, #32
 800f89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f89e:	e040      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f8a0:	2340      	movs	r3, #64	; 0x40
 800f8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8a6:	e03c      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f8a8:	2380      	movs	r3, #128	; 0x80
 800f8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8ae:	e038      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a71      	ldr	r2, [pc, #452]	; (800fa7c <UART_SetConfig+0x904>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d130      	bne.n	800f91c <UART_SetConfig+0x7a4>
 800f8ba:	4b6f      	ldr	r3, [pc, #444]	; (800fa78 <UART_SetConfig+0x900>)
 800f8bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8be:	f003 0307 	and.w	r3, r3, #7
 800f8c2:	2b05      	cmp	r3, #5
 800f8c4:	d826      	bhi.n	800f914 <UART_SetConfig+0x79c>
 800f8c6:	a201      	add	r2, pc, #4	; (adr r2, 800f8cc <UART_SetConfig+0x754>)
 800f8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8cc:	0800f8e5 	.word	0x0800f8e5
 800f8d0:	0800f8ed 	.word	0x0800f8ed
 800f8d4:	0800f8f5 	.word	0x0800f8f5
 800f8d8:	0800f8fd 	.word	0x0800f8fd
 800f8dc:	0800f905 	.word	0x0800f905
 800f8e0:	0800f90d 	.word	0x0800f90d
 800f8e4:	2302      	movs	r3, #2
 800f8e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8ea:	e01a      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f8ec:	2304      	movs	r3, #4
 800f8ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8f2:	e016      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f8f4:	2308      	movs	r3, #8
 800f8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f8fa:	e012      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f8fc:	2310      	movs	r3, #16
 800f8fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f902:	e00e      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f904:	2320      	movs	r3, #32
 800f906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f90a:	e00a      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f90c:	2340      	movs	r3, #64	; 0x40
 800f90e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f912:	e006      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f914:	2380      	movs	r3, #128	; 0x80
 800f916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f91a:	e002      	b.n	800f922 <UART_SetConfig+0x7aa>
 800f91c:	2380      	movs	r3, #128	; 0x80
 800f91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	4a55      	ldr	r2, [pc, #340]	; (800fa7c <UART_SetConfig+0x904>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	f040 80f0 	bne.w	800fb0e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f92e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f932:	2b20      	cmp	r3, #32
 800f934:	dc46      	bgt.n	800f9c4 <UART_SetConfig+0x84c>
 800f936:	2b02      	cmp	r3, #2
 800f938:	db75      	blt.n	800fa26 <UART_SetConfig+0x8ae>
 800f93a:	3b02      	subs	r3, #2
 800f93c:	2b1e      	cmp	r3, #30
 800f93e:	d872      	bhi.n	800fa26 <UART_SetConfig+0x8ae>
 800f940:	a201      	add	r2, pc, #4	; (adr r2, 800f948 <UART_SetConfig+0x7d0>)
 800f942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f946:	bf00      	nop
 800f948:	0800f9cb 	.word	0x0800f9cb
 800f94c:	0800fa27 	.word	0x0800fa27
 800f950:	0800f9d3 	.word	0x0800f9d3
 800f954:	0800fa27 	.word	0x0800fa27
 800f958:	0800fa27 	.word	0x0800fa27
 800f95c:	0800fa27 	.word	0x0800fa27
 800f960:	0800f9e3 	.word	0x0800f9e3
 800f964:	0800fa27 	.word	0x0800fa27
 800f968:	0800fa27 	.word	0x0800fa27
 800f96c:	0800fa27 	.word	0x0800fa27
 800f970:	0800fa27 	.word	0x0800fa27
 800f974:	0800fa27 	.word	0x0800fa27
 800f978:	0800fa27 	.word	0x0800fa27
 800f97c:	0800fa27 	.word	0x0800fa27
 800f980:	0800f9f3 	.word	0x0800f9f3
 800f984:	0800fa27 	.word	0x0800fa27
 800f988:	0800fa27 	.word	0x0800fa27
 800f98c:	0800fa27 	.word	0x0800fa27
 800f990:	0800fa27 	.word	0x0800fa27
 800f994:	0800fa27 	.word	0x0800fa27
 800f998:	0800fa27 	.word	0x0800fa27
 800f99c:	0800fa27 	.word	0x0800fa27
 800f9a0:	0800fa27 	.word	0x0800fa27
 800f9a4:	0800fa27 	.word	0x0800fa27
 800f9a8:	0800fa27 	.word	0x0800fa27
 800f9ac:	0800fa27 	.word	0x0800fa27
 800f9b0:	0800fa27 	.word	0x0800fa27
 800f9b4:	0800fa27 	.word	0x0800fa27
 800f9b8:	0800fa27 	.word	0x0800fa27
 800f9bc:	0800fa27 	.word	0x0800fa27
 800f9c0:	0800fa19 	.word	0x0800fa19
 800f9c4:	2b40      	cmp	r3, #64	; 0x40
 800f9c6:	d02a      	beq.n	800fa1e <UART_SetConfig+0x8a6>
 800f9c8:	e02d      	b.n	800fa26 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f9ca:	f7fb fbc3 	bl	800b154 <HAL_RCCEx_GetD3PCLK1Freq>
 800f9ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f9d0:	e02f      	b.n	800fa32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9d2:	f107 0314 	add.w	r3, r7, #20
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fb fbd2 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9dc:	69bb      	ldr	r3, [r7, #24]
 800f9de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9e0:	e027      	b.n	800fa32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9e2:	f107 0308 	add.w	r3, r7, #8
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7fb fd1e 	bl	800b428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f9f0:	e01f      	b.n	800fa32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9f2:	4b21      	ldr	r3, [pc, #132]	; (800fa78 <UART_SetConfig+0x900>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f003 0320 	and.w	r3, r3, #32
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d009      	beq.n	800fa12 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f9fe:	4b1e      	ldr	r3, [pc, #120]	; (800fa78 <UART_SetConfig+0x900>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	08db      	lsrs	r3, r3, #3
 800fa04:	f003 0303 	and.w	r3, r3, #3
 800fa08:	4a1d      	ldr	r2, [pc, #116]	; (800fa80 <UART_SetConfig+0x908>)
 800fa0a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fa10:	e00f      	b.n	800fa32 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800fa12:	4b1b      	ldr	r3, [pc, #108]	; (800fa80 <UART_SetConfig+0x908>)
 800fa14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fa16:	e00c      	b.n	800fa32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fa18:	4b1a      	ldr	r3, [pc, #104]	; (800fa84 <UART_SetConfig+0x90c>)
 800fa1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fa1c:	e009      	b.n	800fa32 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fa24:	e005      	b.n	800fa32 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800fa26:	2300      	movs	r3, #0
 800fa28:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fa30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	f000 81e6 	beq.w	800fe06 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa3e:	4a12      	ldr	r2, [pc, #72]	; (800fa88 <UART_SetConfig+0x910>)
 800fa40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa44:	461a      	mov	r2, r3
 800fa46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa48:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa4c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	685a      	ldr	r2, [r3, #4]
 800fa52:	4613      	mov	r3, r2
 800fa54:	005b      	lsls	r3, r3, #1
 800fa56:	4413      	add	r3, r2
 800fa58:	6a3a      	ldr	r2, [r7, #32]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d305      	bcc.n	800fa6a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fa64:	6a3a      	ldr	r2, [r7, #32]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d910      	bls.n	800fa8c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fa70:	e1c9      	b.n	800fe06 <UART_SetConfig+0xc8e>
 800fa72:	bf00      	nop
 800fa74:	40011c00 	.word	0x40011c00
 800fa78:	58024400 	.word	0x58024400
 800fa7c:	58000c00 	.word	0x58000c00
 800fa80:	03d09000 	.word	0x03d09000
 800fa84:	003d0900 	.word	0x003d0900
 800fa88:	0801141c 	.word	0x0801141c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f04f 0100 	mov.w	r1, #0
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa98:	4ac1      	ldr	r2, [pc, #772]	; (800fda0 <UART_SetConfig+0xc28>)
 800fa9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa9e:	b29a      	uxth	r2, r3
 800faa0:	f04f 0300 	mov.w	r3, #0
 800faa4:	f7f0 fc34 	bl	8000310 <__aeabi_uldivmod>
 800faa8:	4602      	mov	r2, r0
 800faaa:	460b      	mov	r3, r1
 800faac:	4610      	mov	r0, r2
 800faae:	4619      	mov	r1, r3
 800fab0:	f04f 0200 	mov.w	r2, #0
 800fab4:	f04f 0300 	mov.w	r3, #0
 800fab8:	020b      	lsls	r3, r1, #8
 800faba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fabe:	0202      	lsls	r2, r0, #8
 800fac0:	6879      	ldr	r1, [r7, #4]
 800fac2:	6849      	ldr	r1, [r1, #4]
 800fac4:	0849      	lsrs	r1, r1, #1
 800fac6:	4608      	mov	r0, r1
 800fac8:	f04f 0100 	mov.w	r1, #0
 800facc:	1814      	adds	r4, r2, r0
 800face:	eb43 0501 	adc.w	r5, r3, r1
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	461a      	mov	r2, r3
 800fad8:	f04f 0300 	mov.w	r3, #0
 800fadc:	4620      	mov	r0, r4
 800fade:	4629      	mov	r1, r5
 800fae0:	f7f0 fc16 	bl	8000310 <__aeabi_uldivmod>
 800fae4:	4602      	mov	r2, r0
 800fae6:	460b      	mov	r3, r1
 800fae8:	4613      	mov	r3, r2
 800faea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800faec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800faf2:	d308      	bcc.n	800fb06 <UART_SetConfig+0x98e>
 800faf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fafa:	d204      	bcs.n	800fb06 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb02:	60da      	str	r2, [r3, #12]
 800fb04:	e17f      	b.n	800fe06 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800fb06:	2301      	movs	r3, #1
 800fb08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fb0c:	e17b      	b.n	800fe06 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	69db      	ldr	r3, [r3, #28]
 800fb12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fb16:	f040 80bd 	bne.w	800fc94 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800fb1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fb1e:	2b20      	cmp	r3, #32
 800fb20:	dc48      	bgt.n	800fbb4 <UART_SetConfig+0xa3c>
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	db7b      	blt.n	800fc1e <UART_SetConfig+0xaa6>
 800fb26:	2b20      	cmp	r3, #32
 800fb28:	d879      	bhi.n	800fc1e <UART_SetConfig+0xaa6>
 800fb2a:	a201      	add	r2, pc, #4	; (adr r2, 800fb30 <UART_SetConfig+0x9b8>)
 800fb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb30:	0800fbbb 	.word	0x0800fbbb
 800fb34:	0800fbc3 	.word	0x0800fbc3
 800fb38:	0800fc1f 	.word	0x0800fc1f
 800fb3c:	0800fc1f 	.word	0x0800fc1f
 800fb40:	0800fbcb 	.word	0x0800fbcb
 800fb44:	0800fc1f 	.word	0x0800fc1f
 800fb48:	0800fc1f 	.word	0x0800fc1f
 800fb4c:	0800fc1f 	.word	0x0800fc1f
 800fb50:	0800fbdb 	.word	0x0800fbdb
 800fb54:	0800fc1f 	.word	0x0800fc1f
 800fb58:	0800fc1f 	.word	0x0800fc1f
 800fb5c:	0800fc1f 	.word	0x0800fc1f
 800fb60:	0800fc1f 	.word	0x0800fc1f
 800fb64:	0800fc1f 	.word	0x0800fc1f
 800fb68:	0800fc1f 	.word	0x0800fc1f
 800fb6c:	0800fc1f 	.word	0x0800fc1f
 800fb70:	0800fbeb 	.word	0x0800fbeb
 800fb74:	0800fc1f 	.word	0x0800fc1f
 800fb78:	0800fc1f 	.word	0x0800fc1f
 800fb7c:	0800fc1f 	.word	0x0800fc1f
 800fb80:	0800fc1f 	.word	0x0800fc1f
 800fb84:	0800fc1f 	.word	0x0800fc1f
 800fb88:	0800fc1f 	.word	0x0800fc1f
 800fb8c:	0800fc1f 	.word	0x0800fc1f
 800fb90:	0800fc1f 	.word	0x0800fc1f
 800fb94:	0800fc1f 	.word	0x0800fc1f
 800fb98:	0800fc1f 	.word	0x0800fc1f
 800fb9c:	0800fc1f 	.word	0x0800fc1f
 800fba0:	0800fc1f 	.word	0x0800fc1f
 800fba4:	0800fc1f 	.word	0x0800fc1f
 800fba8:	0800fc1f 	.word	0x0800fc1f
 800fbac:	0800fc1f 	.word	0x0800fc1f
 800fbb0:	0800fc11 	.word	0x0800fc11
 800fbb4:	2b40      	cmp	r3, #64	; 0x40
 800fbb6:	d02e      	beq.n	800fc16 <UART_SetConfig+0xa9e>
 800fbb8:	e031      	b.n	800fc1e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fbba:	f7f9 ff81 	bl	8009ac0 <HAL_RCC_GetPCLK1Freq>
 800fbbe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fbc0:	e033      	b.n	800fc2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fbc2:	f7f9 ff93 	bl	8009aec <HAL_RCC_GetPCLK2Freq>
 800fbc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fbc8:	e02f      	b.n	800fc2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fbca:	f107 0314 	add.w	r3, r7, #20
 800fbce:	4618      	mov	r0, r3
 800fbd0:	f7fb fad6 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fbd4:	69bb      	ldr	r3, [r7, #24]
 800fbd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fbd8:	e027      	b.n	800fc2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fbda:	f107 0308 	add.w	r3, r7, #8
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7fb fc22 	bl	800b428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fbe8:	e01f      	b.n	800fc2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbea:	4b6e      	ldr	r3, [pc, #440]	; (800fda4 <UART_SetConfig+0xc2c>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f003 0320 	and.w	r3, r3, #32
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d009      	beq.n	800fc0a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fbf6:	4b6b      	ldr	r3, [pc, #428]	; (800fda4 <UART_SetConfig+0xc2c>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	08db      	lsrs	r3, r3, #3
 800fbfc:	f003 0303 	and.w	r3, r3, #3
 800fc00:	4a69      	ldr	r2, [pc, #420]	; (800fda8 <UART_SetConfig+0xc30>)
 800fc02:	fa22 f303 	lsr.w	r3, r2, r3
 800fc06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fc08:	e00f      	b.n	800fc2a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800fc0a:	4b67      	ldr	r3, [pc, #412]	; (800fda8 <UART_SetConfig+0xc30>)
 800fc0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fc0e:	e00c      	b.n	800fc2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fc10:	4b66      	ldr	r3, [pc, #408]	; (800fdac <UART_SetConfig+0xc34>)
 800fc12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fc14:	e009      	b.n	800fc2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fc16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fc1c:	e005      	b.n	800fc2a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800fc1e:	2300      	movs	r3, #0
 800fc20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fc22:	2301      	movs	r3, #1
 800fc24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fc28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	f000 80ea 	beq.w	800fe06 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc36:	4a5a      	ldr	r2, [pc, #360]	; (800fda0 <UART_SetConfig+0xc28>)
 800fc38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc40:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc44:	005a      	lsls	r2, r3, #1
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	085b      	lsrs	r3, r3, #1
 800fc4c:	441a      	add	r2, r3
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	685b      	ldr	r3, [r3, #4]
 800fc52:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5a:	2b0f      	cmp	r3, #15
 800fc5c:	d916      	bls.n	800fc8c <UART_SetConfig+0xb14>
 800fc5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc64:	d212      	bcs.n	800fc8c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fc66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	f023 030f 	bic.w	r3, r3, #15
 800fc6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc72:	085b      	lsrs	r3, r3, #1
 800fc74:	b29b      	uxth	r3, r3
 800fc76:	f003 0307 	and.w	r3, r3, #7
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800fc88:	60da      	str	r2, [r3, #12]
 800fc8a:	e0bc      	b.n	800fe06 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800fc92:	e0b8      	b.n	800fe06 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fc94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fc98:	2b20      	cmp	r3, #32
 800fc9a:	dc4b      	bgt.n	800fd34 <UART_SetConfig+0xbbc>
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f2c0 8087 	blt.w	800fdb0 <UART_SetConfig+0xc38>
 800fca2:	2b20      	cmp	r3, #32
 800fca4:	f200 8084 	bhi.w	800fdb0 <UART_SetConfig+0xc38>
 800fca8:	a201      	add	r2, pc, #4	; (adr r2, 800fcb0 <UART_SetConfig+0xb38>)
 800fcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcae:	bf00      	nop
 800fcb0:	0800fd3b 	.word	0x0800fd3b
 800fcb4:	0800fd43 	.word	0x0800fd43
 800fcb8:	0800fdb1 	.word	0x0800fdb1
 800fcbc:	0800fdb1 	.word	0x0800fdb1
 800fcc0:	0800fd4b 	.word	0x0800fd4b
 800fcc4:	0800fdb1 	.word	0x0800fdb1
 800fcc8:	0800fdb1 	.word	0x0800fdb1
 800fccc:	0800fdb1 	.word	0x0800fdb1
 800fcd0:	0800fd5b 	.word	0x0800fd5b
 800fcd4:	0800fdb1 	.word	0x0800fdb1
 800fcd8:	0800fdb1 	.word	0x0800fdb1
 800fcdc:	0800fdb1 	.word	0x0800fdb1
 800fce0:	0800fdb1 	.word	0x0800fdb1
 800fce4:	0800fdb1 	.word	0x0800fdb1
 800fce8:	0800fdb1 	.word	0x0800fdb1
 800fcec:	0800fdb1 	.word	0x0800fdb1
 800fcf0:	0800fd6b 	.word	0x0800fd6b
 800fcf4:	0800fdb1 	.word	0x0800fdb1
 800fcf8:	0800fdb1 	.word	0x0800fdb1
 800fcfc:	0800fdb1 	.word	0x0800fdb1
 800fd00:	0800fdb1 	.word	0x0800fdb1
 800fd04:	0800fdb1 	.word	0x0800fdb1
 800fd08:	0800fdb1 	.word	0x0800fdb1
 800fd0c:	0800fdb1 	.word	0x0800fdb1
 800fd10:	0800fdb1 	.word	0x0800fdb1
 800fd14:	0800fdb1 	.word	0x0800fdb1
 800fd18:	0800fdb1 	.word	0x0800fdb1
 800fd1c:	0800fdb1 	.word	0x0800fdb1
 800fd20:	0800fdb1 	.word	0x0800fdb1
 800fd24:	0800fdb1 	.word	0x0800fdb1
 800fd28:	0800fdb1 	.word	0x0800fdb1
 800fd2c:	0800fdb1 	.word	0x0800fdb1
 800fd30:	0800fd91 	.word	0x0800fd91
 800fd34:	2b40      	cmp	r3, #64	; 0x40
 800fd36:	d02e      	beq.n	800fd96 <UART_SetConfig+0xc1e>
 800fd38:	e03a      	b.n	800fdb0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd3a:	f7f9 fec1 	bl	8009ac0 <HAL_RCC_GetPCLK1Freq>
 800fd3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fd40:	e03c      	b.n	800fdbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd42:	f7f9 fed3 	bl	8009aec <HAL_RCC_GetPCLK2Freq>
 800fd46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800fd48:	e038      	b.n	800fdbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd4a:	f107 0314 	add.w	r3, r7, #20
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fb fa16 	bl	800b180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fd58:	e030      	b.n	800fdbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd5a:	f107 0308 	add.w	r3, r7, #8
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fb fb62 	bl	800b428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fd68:	e028      	b.n	800fdbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd6a:	4b0e      	ldr	r3, [pc, #56]	; (800fda4 <UART_SetConfig+0xc2c>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	f003 0320 	and.w	r3, r3, #32
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d009      	beq.n	800fd8a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd76:	4b0b      	ldr	r3, [pc, #44]	; (800fda4 <UART_SetConfig+0xc2c>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	08db      	lsrs	r3, r3, #3
 800fd7c:	f003 0303 	and.w	r3, r3, #3
 800fd80:	4a09      	ldr	r2, [pc, #36]	; (800fda8 <UART_SetConfig+0xc30>)
 800fd82:	fa22 f303 	lsr.w	r3, r2, r3
 800fd86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd88:	e018      	b.n	800fdbc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800fd8a:	4b07      	ldr	r3, [pc, #28]	; (800fda8 <UART_SetConfig+0xc30>)
 800fd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fd8e:	e015      	b.n	800fdbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd90:	4b06      	ldr	r3, [pc, #24]	; (800fdac <UART_SetConfig+0xc34>)
 800fd92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fd94:	e012      	b.n	800fdbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800fd9c:	e00e      	b.n	800fdbc <UART_SetConfig+0xc44>
 800fd9e:	bf00      	nop
 800fda0:	0801141c 	.word	0x0801141c
 800fda4:	58024400 	.word	0x58024400
 800fda8:	03d09000 	.word	0x03d09000
 800fdac:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800fdba:	bf00      	nop
    }

    if (pclk != 0U)
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d021      	beq.n	800fe06 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc6:	4a1a      	ldr	r2, [pc, #104]	; (800fe30 <UART_SetConfig+0xcb8>)
 800fdc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdcc:	461a      	mov	r2, r3
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	685b      	ldr	r3, [r3, #4]
 800fdd8:	085b      	lsrs	r3, r3, #1
 800fdda:	441a      	add	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	685b      	ldr	r3, [r3, #4]
 800fde0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fde4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde8:	2b0f      	cmp	r3, #15
 800fdea:	d909      	bls.n	800fe00 <UART_SetConfig+0xc88>
 800fdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fdf2:	d205      	bcs.n	800fe00 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf6:	b29a      	uxth	r2, r3
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	60da      	str	r2, [r3, #12]
 800fdfe:	e002      	b.n	800fe06 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800fe00:	2301      	movs	r3, #1
 800fe02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2201      	movs	r2, #1
 800fe0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2201      	movs	r2, #1
 800fe12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fe22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3738      	adds	r7, #56	; 0x38
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bdb0      	pop	{r4, r5, r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	0801141c 	.word	0x0801141c

0800fe34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b083      	sub	sp, #12
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe40:	f003 0301 	and.w	r3, r3, #1
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d00a      	beq.n	800fe5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	430a      	orrs	r2, r1
 800fe5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe62:	f003 0302 	and.w	r3, r3, #2
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d00a      	beq.n	800fe80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	685b      	ldr	r3, [r3, #4]
 800fe70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	430a      	orrs	r2, r1
 800fe7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe84:	f003 0304 	and.w	r3, r3, #4
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d00a      	beq.n	800fea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	430a      	orrs	r2, r1
 800fea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea6:	f003 0308 	and.w	r3, r3, #8
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00a      	beq.n	800fec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	685b      	ldr	r3, [r3, #4]
 800feb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	430a      	orrs	r2, r1
 800fec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fec8:	f003 0310 	and.w	r3, r3, #16
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00a      	beq.n	800fee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	430a      	orrs	r2, r1
 800fee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feea:	f003 0320 	and.w	r3, r3, #32
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00a      	beq.n	800ff08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	689b      	ldr	r3, [r3, #8]
 800fef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	430a      	orrs	r2, r1
 800ff06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d01a      	beq.n	800ff4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	430a      	orrs	r2, r1
 800ff28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ff32:	d10a      	bne.n	800ff4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	430a      	orrs	r2, r1
 800ff48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00a      	beq.n	800ff6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	430a      	orrs	r2, r1
 800ff6a:	605a      	str	r2, [r3, #4]
  }
}
 800ff6c:	bf00      	nop
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr

0800ff78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af02      	add	r7, sp, #8
 800ff7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	2200      	movs	r2, #0
 800ff84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ff88:	f7f3 fdd0 	bl	8003b2c <HAL_GetTick>
 800ff8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f003 0308 	and.w	r3, r3, #8
 800ff98:	2b08      	cmp	r3, #8
 800ff9a:	d10e      	bne.n	800ffba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ff9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffa0:	9300      	str	r3, [sp, #0]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f000 f82f 	bl	801000e <UART_WaitOnFlagUntilTimeout>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d001      	beq.n	800ffba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffb6:	2303      	movs	r3, #3
 800ffb8:	e025      	b.n	8010006 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f003 0304 	and.w	r3, r3, #4
 800ffc4:	2b04      	cmp	r3, #4
 800ffc6:	d10e      	bne.n	800ffe6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ffc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ffcc:	9300      	str	r3, [sp, #0]
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 f819 	bl	801000e <UART_WaitOnFlagUntilTimeout>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	e00f      	b.n	8010006 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2220      	movs	r2, #32
 800ffea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2220      	movs	r2, #32
 800fff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	2200      	movs	r2, #0
 800fffa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010004:	2300      	movs	r3, #0
}
 8010006:	4618      	mov	r0, r3
 8010008:	3710      	adds	r7, #16
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}

0801000e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801000e:	b580      	push	{r7, lr}
 8010010:	b09c      	sub	sp, #112	; 0x70
 8010012:	af00      	add	r7, sp, #0
 8010014:	60f8      	str	r0, [r7, #12]
 8010016:	60b9      	str	r1, [r7, #8]
 8010018:	603b      	str	r3, [r7, #0]
 801001a:	4613      	mov	r3, r2
 801001c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801001e:	e0a9      	b.n	8010174 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010020:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010026:	f000 80a5 	beq.w	8010174 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801002a:	f7f3 fd7f 	bl	8003b2c <HAL_GetTick>
 801002e:	4602      	mov	r2, r0
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8010036:	429a      	cmp	r2, r3
 8010038:	d302      	bcc.n	8010040 <UART_WaitOnFlagUntilTimeout+0x32>
 801003a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801003c:	2b00      	cmp	r3, #0
 801003e:	d140      	bne.n	80100c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010048:	e853 3f00 	ldrex	r3, [r3]
 801004c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801004e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010050:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010054:	667b      	str	r3, [r7, #100]	; 0x64
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	461a      	mov	r2, r3
 801005c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801005e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010060:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010062:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010064:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010066:	e841 2300 	strex	r3, r2, [r1]
 801006a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801006c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801006e:	2b00      	cmp	r3, #0
 8010070:	d1e6      	bne.n	8010040 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	3308      	adds	r3, #8
 8010078:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801007a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801007c:	e853 3f00 	ldrex	r3, [r3]
 8010080:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010084:	f023 0301 	bic.w	r3, r3, #1
 8010088:	663b      	str	r3, [r7, #96]	; 0x60
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	3308      	adds	r3, #8
 8010090:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010092:	64ba      	str	r2, [r7, #72]	; 0x48
 8010094:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801009a:	e841 2300 	strex	r3, r2, [r1]
 801009e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80100a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d1e5      	bne.n	8010072 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2220      	movs	r2, #32
 80100aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	2220      	movs	r2, #32
 80100b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2200      	movs	r2, #0
 80100ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80100be:	2303      	movs	r3, #3
 80100c0:	e069      	b.n	8010196 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f003 0304 	and.w	r3, r3, #4
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d051      	beq.n	8010174 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	69db      	ldr	r3, [r3, #28]
 80100d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80100de:	d149      	bne.n	8010174 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100f2:	e853 3f00 	ldrex	r3, [r3]
 80100f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80100f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80100fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	461a      	mov	r2, r3
 8010106:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010108:	637b      	str	r3, [r7, #52]	; 0x34
 801010a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801010c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801010e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010110:	e841 2300 	strex	r3, r2, [r1]
 8010114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1e6      	bne.n	80100ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	3308      	adds	r3, #8
 8010122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	e853 3f00 	ldrex	r3, [r3]
 801012a:	613b      	str	r3, [r7, #16]
   return(result);
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	f023 0301 	bic.w	r3, r3, #1
 8010132:	66bb      	str	r3, [r7, #104]	; 0x68
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	3308      	adds	r3, #8
 801013a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801013c:	623a      	str	r2, [r7, #32]
 801013e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010140:	69f9      	ldr	r1, [r7, #28]
 8010142:	6a3a      	ldr	r2, [r7, #32]
 8010144:	e841 2300 	strex	r3, r2, [r1]
 8010148:	61bb      	str	r3, [r7, #24]
   return(result);
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1e5      	bne.n	801011c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	2220      	movs	r2, #32
 8010154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	2220      	movs	r2, #32
 801015c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	2220      	movs	r2, #32
 8010164:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2200      	movs	r2, #0
 801016c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010170:	2303      	movs	r3, #3
 8010172:	e010      	b.n	8010196 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	69da      	ldr	r2, [r3, #28]
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	4013      	ands	r3, r2
 801017e:	68ba      	ldr	r2, [r7, #8]
 8010180:	429a      	cmp	r2, r3
 8010182:	bf0c      	ite	eq
 8010184:	2301      	moveq	r3, #1
 8010186:	2300      	movne	r3, #0
 8010188:	b2db      	uxtb	r3, r3
 801018a:	461a      	mov	r2, r3
 801018c:	79fb      	ldrb	r3, [r7, #7]
 801018e:	429a      	cmp	r2, r3
 8010190:	f43f af46 	beq.w	8010020 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010194:	2300      	movs	r3, #0
}
 8010196:	4618      	mov	r0, r3
 8010198:	3770      	adds	r7, #112	; 0x70
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
	...

080101a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b0a3      	sub	sp, #140	; 0x8c
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	4613      	mov	r3, r2
 80101ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	68ba      	ldr	r2, [r7, #8]
 80101b2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	88fa      	ldrh	r2, [r7, #6]
 80101b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	88fa      	ldrh	r2, [r7, #6]
 80101c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	2200      	movs	r2, #0
 80101c8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101d2:	d10e      	bne.n	80101f2 <UART_Start_Receive_IT+0x52>
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	691b      	ldr	r3, [r3, #16]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d105      	bne.n	80101e8 <UART_Start_Receive_IT+0x48>
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80101e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101e6:	e02d      	b.n	8010244 <UART_Start_Receive_IT+0xa4>
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	22ff      	movs	r2, #255	; 0xff
 80101ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80101f0:	e028      	b.n	8010244 <UART_Start_Receive_IT+0xa4>
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	689b      	ldr	r3, [r3, #8]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d10d      	bne.n	8010216 <UART_Start_Receive_IT+0x76>
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	691b      	ldr	r3, [r3, #16]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d104      	bne.n	801020c <UART_Start_Receive_IT+0x6c>
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	22ff      	movs	r2, #255	; 0xff
 8010206:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801020a:	e01b      	b.n	8010244 <UART_Start_Receive_IT+0xa4>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	227f      	movs	r2, #127	; 0x7f
 8010210:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010214:	e016      	b.n	8010244 <UART_Start_Receive_IT+0xa4>
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	689b      	ldr	r3, [r3, #8]
 801021a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801021e:	d10d      	bne.n	801023c <UART_Start_Receive_IT+0x9c>
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d104      	bne.n	8010232 <UART_Start_Receive_IT+0x92>
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	227f      	movs	r2, #127	; 0x7f
 801022c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8010230:	e008      	b.n	8010244 <UART_Start_Receive_IT+0xa4>
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	223f      	movs	r2, #63	; 0x3f
 8010236:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801023a:	e003      	b.n	8010244 <UART_Start_Receive_IT+0xa4>
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2200      	movs	r2, #0
 8010240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2200      	movs	r2, #0
 8010248:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	2222      	movs	r2, #34	; 0x22
 8010250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	3308      	adds	r3, #8
 801025a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801025c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801025e:	e853 3f00 	ldrex	r3, [r3]
 8010262:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010264:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010266:	f043 0301 	orr.w	r3, r3, #1
 801026a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	3308      	adds	r3, #8
 8010274:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010278:	673a      	str	r2, [r7, #112]	; 0x70
 801027a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801027c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801027e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010280:	e841 2300 	strex	r3, r2, [r1]
 8010284:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8010286:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010288:	2b00      	cmp	r3, #0
 801028a:	d1e3      	bne.n	8010254 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010294:	d153      	bne.n	801033e <UART_Start_Receive_IT+0x19e>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801029c:	88fa      	ldrh	r2, [r7, #6]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d34d      	bcc.n	801033e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	689b      	ldr	r3, [r3, #8]
 80102a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80102aa:	d107      	bne.n	80102bc <UART_Start_Receive_IT+0x11c>
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	691b      	ldr	r3, [r3, #16]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d103      	bne.n	80102bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	4a4b      	ldr	r2, [pc, #300]	; (80103e4 <UART_Start_Receive_IT+0x244>)
 80102b8:	671a      	str	r2, [r3, #112]	; 0x70
 80102ba:	e002      	b.n	80102c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4a4a      	ldr	r2, [pc, #296]	; (80103e8 <UART_Start_Receive_IT+0x248>)
 80102c0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	2200      	movs	r2, #0
 80102c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d01a      	beq.n	8010308 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102da:	e853 3f00 	ldrex	r3, [r3]
 80102de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80102e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	461a      	mov	r2, r3
 80102f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80102f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80102f6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80102fc:	e841 2300 	strex	r3, r2, [r1]
 8010300:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010304:	2b00      	cmp	r3, #0
 8010306:	d1e4      	bne.n	80102d2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	3308      	adds	r3, #8
 801030e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010312:	e853 3f00 	ldrex	r3, [r3]
 8010316:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801031e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	3308      	adds	r3, #8
 8010326:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010328:	64ba      	str	r2, [r7, #72]	; 0x48
 801032a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801032c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801032e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010330:	e841 2300 	strex	r3, r2, [r1]
 8010334:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1e5      	bne.n	8010308 <UART_Start_Receive_IT+0x168>
 801033c:	e04a      	b.n	80103d4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	689b      	ldr	r3, [r3, #8]
 8010342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010346:	d107      	bne.n	8010358 <UART_Start_Receive_IT+0x1b8>
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	691b      	ldr	r3, [r3, #16]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d103      	bne.n	8010358 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	4a26      	ldr	r2, [pc, #152]	; (80103ec <UART_Start_Receive_IT+0x24c>)
 8010354:	671a      	str	r2, [r3, #112]	; 0x70
 8010356:	e002      	b.n	801035e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	4a25      	ldr	r2, [pc, #148]	; (80103f0 <UART_Start_Receive_IT+0x250>)
 801035c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2200      	movs	r2, #0
 8010362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	691b      	ldr	r3, [r3, #16]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d019      	beq.n	80103a2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010376:	e853 3f00 	ldrex	r3, [r3]
 801037a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801037c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801037e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010382:	677b      	str	r3, [r7, #116]	; 0x74
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	461a      	mov	r2, r3
 801038a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801038c:	637b      	str	r3, [r7, #52]	; 0x34
 801038e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010390:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010394:	e841 2300 	strex	r3, r2, [r1]
 8010398:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801039a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039c:	2b00      	cmp	r3, #0
 801039e:	d1e6      	bne.n	801036e <UART_Start_Receive_IT+0x1ce>
 80103a0:	e018      	b.n	80103d4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	e853 3f00 	ldrex	r3, [r3]
 80103ae:	613b      	str	r3, [r7, #16]
   return(result);
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	f043 0320 	orr.w	r3, r3, #32
 80103b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	461a      	mov	r2, r3
 80103be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80103c0:	623b      	str	r3, [r7, #32]
 80103c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103c4:	69f9      	ldr	r1, [r7, #28]
 80103c6:	6a3a      	ldr	r2, [r7, #32]
 80103c8:	e841 2300 	strex	r3, r2, [r1]
 80103cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d1e6      	bne.n	80103a2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	378c      	adds	r7, #140	; 0x8c
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr
 80103e2:	bf00      	nop
 80103e4:	08010e41 	.word	0x08010e41
 80103e8:	08010b49 	.word	0x08010b49
 80103ec:	080109e7 	.word	0x080109e7
 80103f0:	08010887 	.word	0x08010887

080103f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80103f4:	b480      	push	{r7}
 80103f6:	b095      	sub	sp, #84	; 0x54
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010404:	e853 3f00 	ldrex	r3, [r3]
 8010408:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801040a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	461a      	mov	r2, r3
 8010418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801041a:	643b      	str	r3, [r7, #64]	; 0x40
 801041c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801041e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010422:	e841 2300 	strex	r3, r2, [r1]
 8010426:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1e6      	bne.n	80103fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3308      	adds	r3, #8
 8010434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010436:	6a3b      	ldr	r3, [r7, #32]
 8010438:	e853 3f00 	ldrex	r3, [r3]
 801043c:	61fb      	str	r3, [r7, #28]
   return(result);
 801043e:	69fa      	ldr	r2, [r7, #28]
 8010440:	4b1e      	ldr	r3, [pc, #120]	; (80104bc <UART_EndRxTransfer+0xc8>)
 8010442:	4013      	ands	r3, r2
 8010444:	64bb      	str	r3, [r7, #72]	; 0x48
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	3308      	adds	r3, #8
 801044c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801044e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010450:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010456:	e841 2300 	strex	r3, r2, [r1]
 801045a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801045c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1e5      	bne.n	801042e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010466:	2b01      	cmp	r3, #1
 8010468:	d118      	bne.n	801049c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	e853 3f00 	ldrex	r3, [r3]
 8010476:	60bb      	str	r3, [r7, #8]
   return(result);
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	f023 0310 	bic.w	r3, r3, #16
 801047e:	647b      	str	r3, [r7, #68]	; 0x44
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	461a      	mov	r2, r3
 8010486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010488:	61bb      	str	r3, [r7, #24]
 801048a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801048c:	6979      	ldr	r1, [r7, #20]
 801048e:	69ba      	ldr	r2, [r7, #24]
 8010490:	e841 2300 	strex	r3, r2, [r1]
 8010494:	613b      	str	r3, [r7, #16]
   return(result);
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d1e6      	bne.n	801046a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2220      	movs	r2, #32
 80104a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 80104b0:	bf00      	nop
 80104b2:	3754      	adds	r7, #84	; 0x54
 80104b4:	46bd      	mov	sp, r7
 80104b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ba:	4770      	bx	lr
 80104bc:	effffffe 	.word	0xeffffffe

080104c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2200      	movs	r2, #0
 80104d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2200      	movs	r2, #0
 80104da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f7fe fe34 	bl	800f14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80104e4:	bf00      	nop
 80104e6:	3710      	adds	r7, #16
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b08f      	sub	sp, #60	; 0x3c
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104fa:	2b21      	cmp	r3, #33	; 0x21
 80104fc:	d14c      	bne.n	8010598 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010504:	b29b      	uxth	r3, r3
 8010506:	2b00      	cmp	r3, #0
 8010508:	d132      	bne.n	8010570 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010510:	6a3b      	ldr	r3, [r7, #32]
 8010512:	e853 3f00 	ldrex	r3, [r3]
 8010516:	61fb      	str	r3, [r7, #28]
   return(result);
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801051e:	637b      	str	r3, [r7, #52]	; 0x34
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	461a      	mov	r2, r3
 8010526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010528:	62fb      	str	r3, [r7, #44]	; 0x2c
 801052a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801052c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801052e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010530:	e841 2300 	strex	r3, r2, [r1]
 8010534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010538:	2b00      	cmp	r3, #0
 801053a:	d1e6      	bne.n	801050a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	e853 3f00 	ldrex	r3, [r3]
 8010548:	60bb      	str	r3, [r7, #8]
   return(result);
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010550:	633b      	str	r3, [r7, #48]	; 0x30
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	461a      	mov	r2, r3
 8010558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055a:	61bb      	str	r3, [r7, #24]
 801055c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801055e:	6979      	ldr	r1, [r7, #20]
 8010560:	69ba      	ldr	r2, [r7, #24]
 8010562:	e841 2300 	strex	r3, r2, [r1]
 8010566:	613b      	str	r3, [r7, #16]
   return(result);
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d1e6      	bne.n	801053c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801056e:	e013      	b.n	8010598 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010574:	781a      	ldrb	r2, [r3, #0]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010580:	1c5a      	adds	r2, r3, #1
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801058c:	b29b      	uxth	r3, r3
 801058e:	3b01      	subs	r3, #1
 8010590:	b29a      	uxth	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8010598:	bf00      	nop
 801059a:	373c      	adds	r7, #60	; 0x3c
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr

080105a4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b091      	sub	sp, #68	; 0x44
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80105b2:	2b21      	cmp	r3, #33	; 0x21
 80105b4:	d151      	bne.n	801065a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80105bc:	b29b      	uxth	r3, r3
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d132      	bne.n	8010628 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105ca:	e853 3f00 	ldrex	r3, [r3]
 80105ce:	623b      	str	r3, [r7, #32]
   return(result);
 80105d0:	6a3b      	ldr	r3, [r7, #32]
 80105d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80105d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	461a      	mov	r2, r3
 80105de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e0:	633b      	str	r3, [r7, #48]	; 0x30
 80105e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105e8:	e841 2300 	strex	r3, r2, [r1]
 80105ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80105ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1e6      	bne.n	80105c2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	e853 3f00 	ldrex	r3, [r3]
 8010600:	60fb      	str	r3, [r7, #12]
   return(result);
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010608:	637b      	str	r3, [r7, #52]	; 0x34
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	461a      	mov	r2, r3
 8010610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010612:	61fb      	str	r3, [r7, #28]
 8010614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010616:	69b9      	ldr	r1, [r7, #24]
 8010618:	69fa      	ldr	r2, [r7, #28]
 801061a:	e841 2300 	strex	r3, r2, [r1]
 801061e:	617b      	str	r3, [r7, #20]
   return(result);
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d1e6      	bne.n	80105f4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010626:	e018      	b.n	801065a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801062c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801062e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010630:	881b      	ldrh	r3, [r3, #0]
 8010632:	461a      	mov	r2, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801063c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010642:	1c9a      	adds	r2, r3, #2
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801064e:	b29b      	uxth	r3, r3
 8010650:	3b01      	subs	r3, #1
 8010652:	b29a      	uxth	r2, r3
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801065a:	bf00      	nop
 801065c:	3744      	adds	r7, #68	; 0x44
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr

08010666 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010666:	b480      	push	{r7}
 8010668:	b091      	sub	sp, #68	; 0x44
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010674:	2b21      	cmp	r3, #33	; 0x21
 8010676:	d160      	bne.n	801073a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801067e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010680:	e057      	b.n	8010732 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010688:	b29b      	uxth	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d133      	bne.n	80106f6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	3308      	adds	r3, #8
 8010694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010698:	e853 3f00 	ldrex	r3, [r3]
 801069c:	623b      	str	r3, [r7, #32]
   return(result);
 801069e:	6a3b      	ldr	r3, [r7, #32]
 80106a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80106a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	3308      	adds	r3, #8
 80106ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106ae:	633a      	str	r2, [r7, #48]	; 0x30
 80106b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80106b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106b6:	e841 2300 	strex	r3, r2, [r1]
 80106ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80106bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d1e5      	bne.n	801068e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	e853 3f00 	ldrex	r3, [r3]
 80106ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106d6:	637b      	str	r3, [r7, #52]	; 0x34
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	461a      	mov	r2, r3
 80106de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106e0:	61fb      	str	r3, [r7, #28]
 80106e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e4:	69b9      	ldr	r1, [r7, #24]
 80106e6:	69fa      	ldr	r2, [r7, #28]
 80106e8:	e841 2300 	strex	r3, r2, [r1]
 80106ec:	617b      	str	r3, [r7, #20]
   return(result);
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d1e6      	bne.n	80106c2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80106f4:	e021      	b.n	801073a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	69db      	ldr	r3, [r3, #28]
 80106fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010700:	2b00      	cmp	r3, #0
 8010702:	d013      	beq.n	801072c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010708:	781a      	ldrb	r2, [r3, #0]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010714:	1c5a      	adds	r2, r3, #1
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010720:	b29b      	uxth	r3, r3
 8010722:	3b01      	subs	r3, #1
 8010724:	b29a      	uxth	r2, r3
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801072c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801072e:	3b01      	subs	r3, #1
 8010730:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010732:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010734:	2b00      	cmp	r3, #0
 8010736:	d1a4      	bne.n	8010682 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010738:	e7ff      	b.n	801073a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801073a:	bf00      	nop
 801073c:	3744      	adds	r7, #68	; 0x44
 801073e:	46bd      	mov	sp, r7
 8010740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010744:	4770      	bx	lr

08010746 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010746:	b480      	push	{r7}
 8010748:	b091      	sub	sp, #68	; 0x44
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010754:	2b21      	cmp	r3, #33	; 0x21
 8010756:	d165      	bne.n	8010824 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801075e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010760:	e05c      	b.n	801081c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010768:	b29b      	uxth	r3, r3
 801076a:	2b00      	cmp	r3, #0
 801076c:	d133      	bne.n	80107d6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	3308      	adds	r3, #8
 8010774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010776:	6a3b      	ldr	r3, [r7, #32]
 8010778:	e853 3f00 	ldrex	r3, [r3]
 801077c:	61fb      	str	r3, [r7, #28]
   return(result);
 801077e:	69fb      	ldr	r3, [r7, #28]
 8010780:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8010784:	637b      	str	r3, [r7, #52]	; 0x34
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3308      	adds	r3, #8
 801078c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801078e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010796:	e841 2300 	strex	r3, r2, [r1]
 801079a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d1e5      	bne.n	801076e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	e853 3f00 	ldrex	r3, [r3]
 80107ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107b6:	633b      	str	r3, [r7, #48]	; 0x30
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	461a      	mov	r2, r3
 80107be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c0:	61bb      	str	r3, [r7, #24]
 80107c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c4:	6979      	ldr	r1, [r7, #20]
 80107c6:	69ba      	ldr	r2, [r7, #24]
 80107c8:	e841 2300 	strex	r3, r2, [r1]
 80107cc:	613b      	str	r3, [r7, #16]
   return(result);
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d1e6      	bne.n	80107a2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80107d4:	e026      	b.n	8010824 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	69db      	ldr	r3, [r3, #28]
 80107dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d018      	beq.n	8010816 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107e8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80107ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ec:	881b      	ldrh	r3, [r3, #0]
 80107ee:	461a      	mov	r2, r3
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80107f8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107fe:	1c9a      	adds	r2, r3, #2
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801080a:	b29b      	uxth	r3, r3
 801080c:	3b01      	subs	r3, #1
 801080e:	b29a      	uxth	r2, r3
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8010816:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010818:	3b01      	subs	r3, #1
 801081a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801081c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801081e:	2b00      	cmp	r3, #0
 8010820:	d19f      	bne.n	8010762 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8010822:	e7ff      	b.n	8010824 <UART_TxISR_16BIT_FIFOEN+0xde>
 8010824:	bf00      	nop
 8010826:	3744      	adds	r7, #68	; 0x44
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b088      	sub	sp, #32
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	e853 3f00 	ldrex	r3, [r3]
 8010844:	60bb      	str	r3, [r7, #8]
   return(result);
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801084c:	61fb      	str	r3, [r7, #28]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	461a      	mov	r2, r3
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	61bb      	str	r3, [r7, #24]
 8010858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801085a:	6979      	ldr	r1, [r7, #20]
 801085c:	69ba      	ldr	r2, [r7, #24]
 801085e:	e841 2300 	strex	r3, r2, [r1]
 8010862:	613b      	str	r3, [r7, #16]
   return(result);
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d1e6      	bne.n	8010838 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2220      	movs	r2, #32
 801086e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2200      	movs	r2, #0
 8010876:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7fe fc5d 	bl	800f138 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801087e:	bf00      	nop
 8010880:	3720      	adds	r7, #32
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010886:	b580      	push	{r7, lr}
 8010888:	b096      	sub	sp, #88	; 0x58
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010894:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801089e:	2b22      	cmp	r3, #34	; 0x22
 80108a0:	f040 8095 	bne.w	80109ce <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80108ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80108b2:	b2d9      	uxtb	r1, r3
 80108b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80108b8:	b2da      	uxtb	r2, r3
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108be:	400a      	ands	r2, r1
 80108c0:	b2d2      	uxtb	r2, r2
 80108c2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80108c8:	1c5a      	adds	r2, r3, #1
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	3b01      	subs	r3, #1
 80108d8:	b29a      	uxth	r2, r3
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d178      	bne.n	80109de <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f4:	e853 3f00 	ldrex	r3, [r3]
 80108f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80108fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010900:	653b      	str	r3, [r7, #80]	; 0x50
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	461a      	mov	r2, r3
 8010908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801090a:	647b      	str	r3, [r7, #68]	; 0x44
 801090c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801090e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010910:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010912:	e841 2300 	strex	r3, r2, [r1]
 8010916:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801091a:	2b00      	cmp	r3, #0
 801091c:	d1e6      	bne.n	80108ec <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	3308      	adds	r3, #8
 8010924:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010928:	e853 3f00 	ldrex	r3, [r3]
 801092c:	623b      	str	r3, [r7, #32]
   return(result);
 801092e:	6a3b      	ldr	r3, [r7, #32]
 8010930:	f023 0301 	bic.w	r3, r3, #1
 8010934:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	3308      	adds	r3, #8
 801093c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801093e:	633a      	str	r2, [r7, #48]	; 0x30
 8010940:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010946:	e841 2300 	strex	r3, r2, [r1]
 801094a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094e:	2b00      	cmp	r3, #0
 8010950:	d1e5      	bne.n	801091e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2220      	movs	r2, #32
 8010956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2200      	movs	r2, #0
 801095e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010964:	2b01      	cmp	r3, #1
 8010966:	d12e      	bne.n	80109c6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2200      	movs	r2, #0
 801096c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010974:	693b      	ldr	r3, [r7, #16]
 8010976:	e853 3f00 	ldrex	r3, [r3]
 801097a:	60fb      	str	r3, [r7, #12]
   return(result);
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f023 0310 	bic.w	r3, r3, #16
 8010982:	64bb      	str	r3, [r7, #72]	; 0x48
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	461a      	mov	r2, r3
 801098a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801098c:	61fb      	str	r3, [r7, #28]
 801098e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010990:	69b9      	ldr	r1, [r7, #24]
 8010992:	69fa      	ldr	r2, [r7, #28]
 8010994:	e841 2300 	strex	r3, r2, [r1]
 8010998:	617b      	str	r3, [r7, #20]
   return(result);
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d1e6      	bne.n	801096e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	69db      	ldr	r3, [r3, #28]
 80109a6:	f003 0310 	and.w	r3, r3, #16
 80109aa:	2b10      	cmp	r3, #16
 80109ac:	d103      	bne.n	80109b6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	2210      	movs	r2, #16
 80109b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80109bc:	4619      	mov	r1, r3
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f7fe fbce 	bl	800f160 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80109c4:	e00b      	b.n	80109de <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7f1 f938 	bl	8001c3c <HAL_UART_RxCpltCallback>
}
 80109cc:	e007      	b.n	80109de <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	699a      	ldr	r2, [r3, #24]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f042 0208 	orr.w	r2, r2, #8
 80109dc:	619a      	str	r2, [r3, #24]
}
 80109de:	bf00      	nop
 80109e0:	3758      	adds	r7, #88	; 0x58
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b096      	sub	sp, #88	; 0x58
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109fe:	2b22      	cmp	r3, #34	; 0x22
 8010a00:	f040 8095 	bne.w	8010b2e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a0a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a12:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010a14:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010a18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010a1c:	4013      	ands	r3, r2
 8010a1e:	b29a      	uxth	r2, r3
 8010a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a22:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a28:	1c9a      	adds	r2, r3, #2
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a34:	b29b      	uxth	r3, r3
 8010a36:	3b01      	subs	r3, #1
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d178      	bne.n	8010b3e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a54:	e853 3f00 	ldrex	r3, [r3]
 8010a58:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010a60:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	461a      	mov	r2, r3
 8010a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8010a6c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a70:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a72:	e841 2300 	strex	r3, r2, [r1]
 8010a76:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d1e6      	bne.n	8010a4c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	3308      	adds	r3, #8
 8010a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a86:	6a3b      	ldr	r3, [r7, #32]
 8010a88:	e853 3f00 	ldrex	r3, [r3]
 8010a8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	f023 0301 	bic.w	r3, r3, #1
 8010a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	3308      	adds	r3, #8
 8010a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010aa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010aa6:	e841 2300 	strex	r3, r2, [r1]
 8010aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d1e5      	bne.n	8010a7e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2220      	movs	r2, #32
 8010ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2200      	movs	r2, #0
 8010abe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d12e      	bne.n	8010b26 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2200      	movs	r2, #0
 8010acc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	e853 3f00 	ldrex	r3, [r3]
 8010ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	f023 0310 	bic.w	r3, r3, #16
 8010ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	461a      	mov	r2, r3
 8010aea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aec:	61bb      	str	r3, [r7, #24]
 8010aee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af0:	6979      	ldr	r1, [r7, #20]
 8010af2:	69ba      	ldr	r2, [r7, #24]
 8010af4:	e841 2300 	strex	r3, r2, [r1]
 8010af8:	613b      	str	r3, [r7, #16]
   return(result);
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d1e6      	bne.n	8010ace <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	69db      	ldr	r3, [r3, #28]
 8010b06:	f003 0310 	and.w	r3, r3, #16
 8010b0a:	2b10      	cmp	r3, #16
 8010b0c:	d103      	bne.n	8010b16 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2210      	movs	r2, #16
 8010b14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	f7fe fb1e 	bl	800f160 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b24:	e00b      	b.n	8010b3e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8010b26:	6878      	ldr	r0, [r7, #4]
 8010b28:	f7f1 f888 	bl	8001c3c <HAL_UART_RxCpltCallback>
}
 8010b2c:	e007      	b.n	8010b3e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	699a      	ldr	r2, [r3, #24]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f042 0208 	orr.w	r2, r2, #8
 8010b3c:	619a      	str	r2, [r3, #24]
}
 8010b3e:	bf00      	nop
 8010b40:	3758      	adds	r7, #88	; 0x58
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
	...

08010b48 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b0a6      	sub	sp, #152	; 0x98
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b56:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	69db      	ldr	r3, [r3, #28]
 8010b60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b7e:	2b22      	cmp	r3, #34	; 0x22
 8010b80:	f040 814d 	bne.w	8010e1e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b8a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010b8e:	e0f4      	b.n	8010d7a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b96:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010b9a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8010b9e:	b2d9      	uxtb	r1, r3
 8010ba0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8010ba4:	b2da      	uxtb	r2, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010baa:	400a      	ands	r2, r1
 8010bac:	b2d2      	uxtb	r2, r2
 8010bae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bb4:	1c5a      	adds	r2, r3, #1
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	3b01      	subs	r3, #1
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	69db      	ldr	r3, [r3, #28]
 8010bd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010bd6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bda:	f003 0307 	and.w	r3, r3, #7
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d053      	beq.n	8010c8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010be2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010be6:	f003 0301 	and.w	r3, r3, #1
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d011      	beq.n	8010c12 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d00b      	beq.n	8010c12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	2201      	movs	r2, #1
 8010c00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c08:	f043 0201 	orr.w	r2, r3, #1
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c16:	f003 0302 	and.w	r3, r3, #2
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d011      	beq.n	8010c42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c22:	f003 0301 	and.w	r3, r3, #1
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d00b      	beq.n	8010c42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	2202      	movs	r2, #2
 8010c30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c38:	f043 0204 	orr.w	r2, r3, #4
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010c46:	f003 0304 	and.w	r3, r3, #4
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d011      	beq.n	8010c72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010c52:	f003 0301 	and.w	r3, r3, #1
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d00b      	beq.n	8010c72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	2204      	movs	r2, #4
 8010c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c68:	f043 0202 	orr.w	r2, r3, #2
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d006      	beq.n	8010c8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f7fe fa65 	bl	800f14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2200      	movs	r2, #0
 8010c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d171      	bne.n	8010d7a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010c9e:	e853 3f00 	ldrex	r3, [r3]
 8010ca2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8010ca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010ca6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010caa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010cb8:	66bb      	str	r3, [r7, #104]	; 0x68
 8010cba:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cbc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010cbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010cc0:	e841 2300 	strex	r3, r2, [r1]
 8010cc4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8010cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d1e4      	bne.n	8010c96 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	3308      	adds	r3, #8
 8010cd2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010cd6:	e853 3f00 	ldrex	r3, [r3]
 8010cda:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cde:	4b56      	ldr	r3, [pc, #344]	; (8010e38 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8010ce0:	4013      	ands	r3, r2
 8010ce2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	3308      	adds	r3, #8
 8010cea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010cec:	657a      	str	r2, [r7, #84]	; 0x54
 8010cee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010cf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010cf4:	e841 2300 	strex	r3, r2, [r1]
 8010cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8010cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d1e5      	bne.n	8010ccc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2220      	movs	r2, #32
 8010d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d12:	2b01      	cmp	r3, #1
 8010d14:	d12e      	bne.n	8010d74 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2200      	movs	r2, #0
 8010d1a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d24:	e853 3f00 	ldrex	r3, [r3]
 8010d28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d2c:	f023 0310 	bic.w	r3, r3, #16
 8010d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	461a      	mov	r2, r3
 8010d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010d3a:	643b      	str	r3, [r7, #64]	; 0x40
 8010d3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d42:	e841 2300 	strex	r3, r2, [r1]
 8010d46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d1e6      	bne.n	8010d1c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	69db      	ldr	r3, [r3, #28]
 8010d54:	f003 0310 	and.w	r3, r3, #16
 8010d58:	2b10      	cmp	r3, #16
 8010d5a:	d103      	bne.n	8010d64 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	2210      	movs	r2, #16
 8010d62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7fe f9f7 	bl	800f160 <HAL_UARTEx_RxEventCallback>
 8010d72:	e002      	b.n	8010d7a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7f0 ff61 	bl	8001c3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010d7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d006      	beq.n	8010d90 <UART_RxISR_8BIT_FIFOEN+0x248>
 8010d82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010d86:	f003 0320 	and.w	r3, r3, #32
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	f47f af00 	bne.w	8010b90 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010d96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010d9a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d045      	beq.n	8010e2e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010da8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d23e      	bcs.n	8010e2e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	3308      	adds	r3, #8
 8010db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db8:	6a3b      	ldr	r3, [r7, #32]
 8010dba:	e853 3f00 	ldrex	r3, [r3]
 8010dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8010dc0:	69fb      	ldr	r3, [r7, #28]
 8010dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010dc6:	673b      	str	r3, [r7, #112]	; 0x70
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	3308      	adds	r3, #8
 8010dce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dd8:	e841 2300 	strex	r3, r2, [r1]
 8010ddc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1e5      	bne.n	8010db0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	4a15      	ldr	r2, [pc, #84]	; (8010e3c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8010de8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	e853 3f00 	ldrex	r3, [r3]
 8010df6:	60bb      	str	r3, [r7, #8]
   return(result);
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	f043 0320 	orr.w	r3, r3, #32
 8010dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	461a      	mov	r2, r3
 8010e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010e08:	61bb      	str	r3, [r7, #24]
 8010e0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e0c:	6979      	ldr	r1, [r7, #20]
 8010e0e:	69ba      	ldr	r2, [r7, #24]
 8010e10:	e841 2300 	strex	r3, r2, [r1]
 8010e14:	613b      	str	r3, [r7, #16]
   return(result);
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d1e6      	bne.n	8010dea <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010e1c:	e007      	b.n	8010e2e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	699a      	ldr	r2, [r3, #24]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f042 0208 	orr.w	r2, r2, #8
 8010e2c:	619a      	str	r2, [r3, #24]
}
 8010e2e:	bf00      	nop
 8010e30:	3798      	adds	r7, #152	; 0x98
 8010e32:	46bd      	mov	sp, r7
 8010e34:	bd80      	pop	{r7, pc}
 8010e36:	bf00      	nop
 8010e38:	effffffe 	.word	0xeffffffe
 8010e3c:	08010887 	.word	0x08010887

08010e40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b0a8      	sub	sp, #160	; 0xa0
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010e4e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	69db      	ldr	r3, [r3, #28]
 8010e58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	689b      	ldr	r3, [r3, #8]
 8010e6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010e76:	2b22      	cmp	r3, #34	; 0x22
 8010e78:	f040 8151 	bne.w	801111e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010e82:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010e86:	e0f8      	b.n	801107a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e8e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8010e9a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010e9e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8010ea2:	4013      	ands	r3, r2
 8010ea4:	b29a      	uxth	r2, r3
 8010ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010eaa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010eb0:	1c9a      	adds	r2, r3, #2
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	3b01      	subs	r3, #1
 8010ec0:	b29a      	uxth	r2, r3
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	69db      	ldr	r3, [r3, #28]
 8010ece:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010ed2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ed6:	f003 0307 	and.w	r3, r3, #7
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d053      	beq.n	8010f86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010ede:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010ee2:	f003 0301 	and.w	r3, r3, #1
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d011      	beq.n	8010f0e <UART_RxISR_16BIT_FIFOEN+0xce>
 8010eea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d00b      	beq.n	8010f0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	2201      	movs	r2, #1
 8010efc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f04:	f043 0201 	orr.w	r2, r3, #1
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010f12:	f003 0302 	and.w	r3, r3, #2
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d011      	beq.n	8010f3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8010f1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f1e:	f003 0301 	and.w	r3, r3, #1
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d00b      	beq.n	8010f3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	2202      	movs	r2, #2
 8010f2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f34:	f043 0204 	orr.w	r2, r3, #4
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010f42:	f003 0304 	and.w	r3, r3, #4
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d011      	beq.n	8010f6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8010f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010f4e:	f003 0301 	and.w	r3, r3, #1
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d00b      	beq.n	8010f6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2204      	movs	r2, #4
 8010f5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f64:	f043 0202 	orr.w	r2, r3, #2
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d006      	beq.n	8010f86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010f78:	6878      	ldr	r0, [r7, #4]
 8010f7a:	f7fe f8e7 	bl	800f14c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2200      	movs	r2, #0
 8010f82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010f8c:	b29b      	uxth	r3, r3
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d173      	bne.n	801107a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f9a:	e853 3f00 	ldrex	r3, [r3]
 8010f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010fa2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010fb6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010fba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010fbc:	e841 2300 	strex	r3, r2, [r1]
 8010fc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d1e4      	bne.n	8010f92 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	3308      	adds	r3, #8
 8010fce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fd2:	e853 3f00 	ldrex	r3, [r3]
 8010fd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010fda:	4b57      	ldr	r3, [pc, #348]	; (8011138 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8010fdc:	4013      	ands	r3, r2
 8010fde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	3308      	adds	r3, #8
 8010fe8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010fec:	65ba      	str	r2, [r7, #88]	; 0x58
 8010fee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ff0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010ff2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ff4:	e841 2300 	strex	r3, r2, [r1]
 8010ff8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d1e3      	bne.n	8010fc8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2220      	movs	r2, #32
 8011004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2200      	movs	r2, #0
 801100c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011012:	2b01      	cmp	r3, #1
 8011014:	d12e      	bne.n	8011074 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2200      	movs	r2, #0
 801101a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011024:	e853 3f00 	ldrex	r3, [r3]
 8011028:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801102a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801102c:	f023 0310 	bic.w	r3, r3, #16
 8011030:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	461a      	mov	r2, r3
 8011038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801103a:	647b      	str	r3, [r7, #68]	; 0x44
 801103c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801103e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011040:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011042:	e841 2300 	strex	r3, r2, [r1]
 8011046:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801104a:	2b00      	cmp	r3, #0
 801104c:	d1e6      	bne.n	801101c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	69db      	ldr	r3, [r3, #28]
 8011054:	f003 0310 	and.w	r3, r3, #16
 8011058:	2b10      	cmp	r3, #16
 801105a:	d103      	bne.n	8011064 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2210      	movs	r2, #16
 8011062:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801106a:	4619      	mov	r1, r3
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f7fe f877 	bl	800f160 <HAL_UARTEx_RxEventCallback>
 8011072:	e002      	b.n	801107a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8011074:	6878      	ldr	r0, [r7, #4]
 8011076:	f7f0 fde1 	bl	8001c3c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801107a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801107e:	2b00      	cmp	r3, #0
 8011080:	d006      	beq.n	8011090 <UART_RxISR_16BIT_FIFOEN+0x250>
 8011082:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011086:	f003 0320 	and.w	r3, r3, #32
 801108a:	2b00      	cmp	r3, #0
 801108c:	f47f aefc 	bne.w	8010e88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011096:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801109a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d045      	beq.n	801112e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80110a8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d23e      	bcs.n	801112e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	3308      	adds	r3, #8
 80110b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ba:	e853 3f00 	ldrex	r3, [r3]
 80110be:	623b      	str	r3, [r7, #32]
   return(result);
 80110c0:	6a3b      	ldr	r3, [r7, #32]
 80110c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80110c6:	677b      	str	r3, [r7, #116]	; 0x74
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	3308      	adds	r3, #8
 80110ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80110d0:	633a      	str	r2, [r7, #48]	; 0x30
 80110d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110d8:	e841 2300 	strex	r3, r2, [r1]
 80110dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80110de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1e5      	bne.n	80110b0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	4a15      	ldr	r2, [pc, #84]	; (801113c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80110e8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	e853 3f00 	ldrex	r3, [r3]
 80110f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	f043 0320 	orr.w	r3, r3, #32
 80110fe:	673b      	str	r3, [r7, #112]	; 0x70
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	461a      	mov	r2, r3
 8011106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011108:	61fb      	str	r3, [r7, #28]
 801110a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801110c:	69b9      	ldr	r1, [r7, #24]
 801110e:	69fa      	ldr	r2, [r7, #28]
 8011110:	e841 2300 	strex	r3, r2, [r1]
 8011114:	617b      	str	r3, [r7, #20]
   return(result);
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d1e6      	bne.n	80110ea <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801111c:	e007      	b.n	801112e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	699a      	ldr	r2, [r3, #24]
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	f042 0208 	orr.w	r2, r2, #8
 801112c:	619a      	str	r2, [r3, #24]
}
 801112e:	bf00      	nop
 8011130:	37a0      	adds	r7, #160	; 0xa0
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}
 8011136:	bf00      	nop
 8011138:	effffffe 	.word	0xeffffffe
 801113c:	080109e7 	.word	0x080109e7

08011140 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011140:	b480      	push	{r7}
 8011142:	b083      	sub	sp, #12
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011148:	bf00      	nop
 801114a:	370c      	adds	r7, #12
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr

08011154 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801115c:	bf00      	nop
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr

08011168 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011168:	b480      	push	{r7}
 801116a:	b083      	sub	sp, #12
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011170:	bf00      	nop
 8011172:	370c      	adds	r7, #12
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801118a:	2b01      	cmp	r3, #1
 801118c:	d101      	bne.n	8011192 <HAL_UARTEx_DisableFifoMode+0x16>
 801118e:	2302      	movs	r3, #2
 8011190:	e027      	b.n	80111e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2201      	movs	r2, #1
 8011196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2224      	movs	r2, #36	; 0x24
 801119e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	681a      	ldr	r2, [r3, #0]
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	681b      	ldr	r3, [r3, #0]
 80111b4:	f022 0201 	bic.w	r2, r2, #1
 80111b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80111c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2200      	movs	r2, #0
 80111c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68fa      	ldr	r2, [r7, #12]
 80111ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2220      	movs	r2, #32
 80111d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2200      	movs	r2, #0
 80111dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80111e0:	2300      	movs	r3, #0
}
 80111e2:	4618      	mov	r0, r3
 80111e4:	3714      	adds	r7, #20
 80111e6:	46bd      	mov	sp, r7
 80111e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ec:	4770      	bx	lr

080111ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80111ee:	b580      	push	{r7, lr}
 80111f0:	b084      	sub	sp, #16
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	6078      	str	r0, [r7, #4]
 80111f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80111fe:	2b01      	cmp	r3, #1
 8011200:	d101      	bne.n	8011206 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011202:	2302      	movs	r3, #2
 8011204:	e02d      	b.n	8011262 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2201      	movs	r2, #1
 801120a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2224      	movs	r2, #36	; 0x24
 8011212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f022 0201 	bic.w	r2, r2, #1
 801122c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	681b      	ldr	r3, [r3, #0]
 8011232:	689b      	ldr	r3, [r3, #8]
 8011234:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	683a      	ldr	r2, [r7, #0]
 801123e:	430a      	orrs	r2, r1
 8011240:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 f850 	bl	80112e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	68fa      	ldr	r2, [r7, #12]
 801124e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2220      	movs	r2, #32
 8011254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2200      	movs	r2, #0
 801125c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011260:	2300      	movs	r3, #0
}
 8011262:	4618      	mov	r0, r3
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}

0801126a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801126a:	b580      	push	{r7, lr}
 801126c:	b084      	sub	sp, #16
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
 8011272:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801127a:	2b01      	cmp	r3, #1
 801127c:	d101      	bne.n	8011282 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801127e:	2302      	movs	r3, #2
 8011280:	e02d      	b.n	80112de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2201      	movs	r2, #1
 8011286:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2224      	movs	r2, #36	; 0x24
 801128e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	f022 0201 	bic.w	r2, r2, #1
 80112a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	689b      	ldr	r3, [r3, #8]
 80112b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	683a      	ldr	r2, [r7, #0]
 80112ba:	430a      	orrs	r2, r1
 80112bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f000 f812 	bl	80112e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	68fa      	ldr	r2, [r7, #12]
 80112ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2220      	movs	r2, #32
 80112d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2200      	movs	r2, #0
 80112d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80112dc:	2300      	movs	r3, #0
}
 80112de:	4618      	mov	r0, r3
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
	...

080112e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d108      	bne.n	801130a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2201      	movs	r2, #1
 80112fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2201      	movs	r2, #1
 8011304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011308:	e031      	b.n	801136e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801130a:	2310      	movs	r3, #16
 801130c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801130e:	2310      	movs	r3, #16
 8011310:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	689b      	ldr	r3, [r3, #8]
 8011318:	0e5b      	lsrs	r3, r3, #25
 801131a:	b2db      	uxtb	r3, r3
 801131c:	f003 0307 	and.w	r3, r3, #7
 8011320:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	689b      	ldr	r3, [r3, #8]
 8011328:	0f5b      	lsrs	r3, r3, #29
 801132a:	b2db      	uxtb	r3, r3
 801132c:	f003 0307 	and.w	r3, r3, #7
 8011330:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011332:	7bbb      	ldrb	r3, [r7, #14]
 8011334:	7b3a      	ldrb	r2, [r7, #12]
 8011336:	4911      	ldr	r1, [pc, #68]	; (801137c <UARTEx_SetNbDataToProcess+0x94>)
 8011338:	5c8a      	ldrb	r2, [r1, r2]
 801133a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801133e:	7b3a      	ldrb	r2, [r7, #12]
 8011340:	490f      	ldr	r1, [pc, #60]	; (8011380 <UARTEx_SetNbDataToProcess+0x98>)
 8011342:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011344:	fb93 f3f2 	sdiv	r3, r3, r2
 8011348:	b29a      	uxth	r2, r3
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011350:	7bfb      	ldrb	r3, [r7, #15]
 8011352:	7b7a      	ldrb	r2, [r7, #13]
 8011354:	4909      	ldr	r1, [pc, #36]	; (801137c <UARTEx_SetNbDataToProcess+0x94>)
 8011356:	5c8a      	ldrb	r2, [r1, r2]
 8011358:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801135c:	7b7a      	ldrb	r2, [r7, #13]
 801135e:	4908      	ldr	r1, [pc, #32]	; (8011380 <UARTEx_SetNbDataToProcess+0x98>)
 8011360:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011362:	fb93 f3f2 	sdiv	r3, r3, r2
 8011366:	b29a      	uxth	r2, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801136e:	bf00      	nop
 8011370:	3714      	adds	r7, #20
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop
 801137c:	08011434 	.word	0x08011434
 8011380:	0801143c 	.word	0x0801143c

08011384 <__libc_init_array>:
 8011384:	b570      	push	{r4, r5, r6, lr}
 8011386:	4d0d      	ldr	r5, [pc, #52]	; (80113bc <__libc_init_array+0x38>)
 8011388:	4c0d      	ldr	r4, [pc, #52]	; (80113c0 <__libc_init_array+0x3c>)
 801138a:	1b64      	subs	r4, r4, r5
 801138c:	10a4      	asrs	r4, r4, #2
 801138e:	2600      	movs	r6, #0
 8011390:	42a6      	cmp	r6, r4
 8011392:	d109      	bne.n	80113a8 <__libc_init_array+0x24>
 8011394:	4d0b      	ldr	r5, [pc, #44]	; (80113c4 <__libc_init_array+0x40>)
 8011396:	4c0c      	ldr	r4, [pc, #48]	; (80113c8 <__libc_init_array+0x44>)
 8011398:	f000 f820 	bl	80113dc <_init>
 801139c:	1b64      	subs	r4, r4, r5
 801139e:	10a4      	asrs	r4, r4, #2
 80113a0:	2600      	movs	r6, #0
 80113a2:	42a6      	cmp	r6, r4
 80113a4:	d105      	bne.n	80113b2 <__libc_init_array+0x2e>
 80113a6:	bd70      	pop	{r4, r5, r6, pc}
 80113a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80113ac:	4798      	blx	r3
 80113ae:	3601      	adds	r6, #1
 80113b0:	e7ee      	b.n	8011390 <__libc_init_array+0xc>
 80113b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80113b6:	4798      	blx	r3
 80113b8:	3601      	adds	r6, #1
 80113ba:	e7f2      	b.n	80113a2 <__libc_init_array+0x1e>
 80113bc:	0801144c 	.word	0x0801144c
 80113c0:	0801144c 	.word	0x0801144c
 80113c4:	0801144c 	.word	0x0801144c
 80113c8:	08011450 	.word	0x08011450

080113cc <memset>:
 80113cc:	4402      	add	r2, r0
 80113ce:	4603      	mov	r3, r0
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d100      	bne.n	80113d6 <memset+0xa>
 80113d4:	4770      	bx	lr
 80113d6:	f803 1b01 	strb.w	r1, [r3], #1
 80113da:	e7f9      	b.n	80113d0 <memset+0x4>

080113dc <_init>:
 80113dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113de:	bf00      	nop
 80113e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113e2:	bc08      	pop	{r3}
 80113e4:	469e      	mov	lr, r3
 80113e6:	4770      	bx	lr

080113e8 <_fini>:
 80113e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113ea:	bf00      	nop
 80113ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80113ee:	bc08      	pop	{r3}
 80113f0:	469e      	mov	lr, r3
 80113f2:	4770      	bx	lr
