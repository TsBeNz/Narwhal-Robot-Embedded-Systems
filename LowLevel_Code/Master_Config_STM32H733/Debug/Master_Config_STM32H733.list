
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f58c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800f85c  0800f85c  0001f85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f89c  0800f89c  0001f89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f8a4  0800f8a4  0001f8a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f8a8  0800f8a8  0001f8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800f8ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000c24  20000010  0800f8bc  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000c34  0800f8bc  00020c34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003cfda  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005912  00000000  00000000  0005d018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c68  00000000  00000000  00062930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001aa8  00000000  00000000  00064598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039139  00000000  00000000  00066040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029dcd  00000000  00000000  0009f179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cb8a  00000000  00000000  000c8f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00235ad0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000078f4  00000000  00000000  00235b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000010 	.word	0x20000010
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f844 	.word	0x0800f844

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000014 	.word	0x20000014
 800030c:	0800f844 	.word	0x0800f844

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <AS5047U_init>:
	return (Enc->Position * 0.000383495f);
}

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin) {
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	60f8      	str	r0, [r7, #12]
 8000610:	60b9      	str	r1, [r7, #8]
 8000612:	607a      	str	r2, [r7, #4]
 8000614:	603b      	str	r3, [r7, #0]
	dev->hspiHandle = hspiHandle;
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	68ba      	ldr	r2, [r7, #8]
 800061a:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	8b3a      	ldrh	r2, [r7, #24]
 800062c:	819a      	strh	r2, [r3, #12]
//	dev->Offset = Offset;
	dev->Error_Status.CORDIC_Overflow = 0;
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	2200      	movs	r2, #0
 8000632:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2200      	movs	r2, #0
 8000638:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2200      	movs	r2, #0
 800063e:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	2200      	movs	r2, #0
 8000644:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2200      	movs	r2, #0
 800064a:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	2200      	movs	r2, #0
 8000650:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2200      	movs	r2, #0
 8000656:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	2200      	movs	r2, #0
 800065c:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2200      	movs	r2, #0
 8000662:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2200      	movs	r2, #0
 8000668:	765a      	strb	r2, [r3, #25]
//	Encoder_command(dev,0x001A, 0x0080);
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev){
 8000676:	b580      	push	{r7, lr}
 8000678:	b084      	sub	sp, #16
 800067a:	af00      	add	r7, sp, #0
 800067c:	6078      	str	r0, [r7, #4]
	uint8_t cmd[2] = { 0x3F,0xFF };
 800067e:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000682:	81bb      	strh	r3, [r7, #12]
	uint8_t Buffer[2] = {};
 8000684:	2300      	movs	r3, #0
 8000686:	813b      	strh	r3, [r7, #8]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6898      	ldr	r0, [r3, #8]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	899b      	ldrh	r3, [r3, #12]
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	f007 fdb2 	bl	80081fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 1);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 010c 	add.w	r1, r7, #12
 80006a0:	2301      	movs	r3, #1
 80006a2:	2202      	movs	r2, #2
 80006a4:	f00b f810 	bl	800b6c8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	6898      	ldr	r0, [r3, #8]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	899b      	ldrh	r3, [r3, #12]
 80006b0:	2201      	movs	r2, #1
 80006b2:	4619      	mov	r1, r3
 80006b4:	f007 fda2 	bl	80081fc <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550 ; i++);			//delay before sent data (#Base clock 550MHz)
 80006b8:	2300      	movs	r3, #0
 80006ba:	81fb      	strh	r3, [r7, #14]
 80006bc:	e002      	b.n	80006c4 <AS5047U_Position_Highspeed_Read+0x4e>
 80006be:	89fb      	ldrh	r3, [r7, #14]
 80006c0:	3301      	adds	r3, #1
 80006c2:	81fb      	strh	r3, [r7, #14]
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	f240 2226 	movw	r2, #550	; 0x226
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d9f7      	bls.n	80006be <AS5047U_Position_Highspeed_Read+0x48>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6898      	ldr	r0, [r3, #8]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	899b      	ldrh	r3, [r3, #12]
 80006d6:	2200      	movs	r2, #0
 80006d8:	4619      	mov	r1, r3
 80006da:	f007 fd8f 	bl	80081fc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 1);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	f107 0108 	add.w	r1, r7, #8
 80006e6:	2301      	movs	r3, #1
 80006e8:	2202      	movs	r2, #2
 80006ea:	f00b f9df 	bl	800baac <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6898      	ldr	r0, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	f007 fd7f 	bl	80081fc <HAL_GPIO_WritePin>
	dev->Position = (((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1];
 80006fe:	7a3b      	ldrb	r3, [r7, #8]
 8000700:	021b      	lsls	r3, r3, #8
 8000702:	b21b      	sxth	r3, r3
 8000704:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000708:	b21a      	sxth	r2, r3
 800070a:	7a7b      	ldrb	r3, [r7, #9]
 800070c:	b21b      	sxth	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b21b      	sxth	r3, r3
 8000712:	b29a      	uxth	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	81da      	strh	r2, [r3, #14]
	return dev->Position;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	89db      	ldrh	r3, [r3, #14]
}
 800071c:	4618      	mov	r0, r3
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2224      	movs	r2, #36	; 0x24
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f00f f87f 	bl	800f834 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000738:	4a31      	ldr	r2, [pc, #196]	; (8000800 <MX_ADC3_Init+0xdc>)
 800073a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 800073c:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_ADC3_Init+0xd8>)
 800073e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000742:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800074a:	4b2c      	ldr	r3, [pc, #176]	; (80007fc <MX_ADC3_Init+0xd8>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000750:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000752:	2204      	movs	r2, #4
 8000754:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000758:	2200      	movs	r2, #0
 800075a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800075c:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_ADC3_Init+0xd8>)
 800075e:	2200      	movs	r2, #0
 8000760:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000764:	2201      	movs	r2, #1
 8000766:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_ADC3_Init+0xd8>)
 800076a:	2200      	movs	r2, #0
 800076c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	4b21      	ldr	r3, [pc, #132]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <MX_ADC3_Init+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000784:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000786:	2200      	movs	r2, #0
 8000788:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800078a:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <MX_ADC3_Init+0xd8>)
 800078c:	2200      	movs	r2, #0
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000790:	4b1a      	ldr	r3, [pc, #104]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000792:	2200      	movs	r2, #0
 8000794:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_ADC3_Init+0xd8>)
 8000798:	2200      	movs	r2, #0
 800079a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_ADC3_Init+0xd8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007a4:	4815      	ldr	r0, [pc, #84]	; (80007fc <MX_ADC3_Init+0xd8>)
 80007a6:	f003 fb43 	bl	8003e30 <HAL_ADC_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007b0:	f001 fa9e 	bl	8001cf0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80007b4:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_ADC3_Init+0xe0>)
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b8:	2306      	movs	r3, #6
 80007ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 80007bc:	2306      	movs	r3, #6
 80007be:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80007c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007c6:	2304      	movs	r3, #4
 80007c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <MX_ADC3_Init+0xd8>)
 80007e4:	f004 f8c8 	bl	8004978 <HAL_ADC_ConfigChannel>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80007ee:	f001 fa7f 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	3728      	adds	r7, #40	; 0x28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000040 	.word	0x20000040
 8000800:	58026000 	.word	0x58026000
 8000804:	c7520000 	.word	0xc7520000

08000808 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_ADC_MspInit+0x48>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d116      	bne.n	8000848 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <HAL_ADC_MspInit+0x4c>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <HAL_ADC_MspInit+0x4c>)
 8000822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_ADC_MspInit+0x4c>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	207f      	movs	r0, #127	; 0x7f
 800083e:	f005 f940 	bl	8005ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000842:	207f      	movs	r0, #127	; 0x7f
 8000844:	f005 f957 	bl	8005af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	58026000 	.word	0x58026000
 8000854:	58024400 	.word	0x58024400

08000858 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	68ba      	ldr	r2, [r7, #8]
 800086a:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	8b3a      	ldrh	r2, [r7, #24]
 800087c:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	b29a      	uxth	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	f897 2020 	ldrb.w	r2, [r7, #32]
 800088c:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681a      	ldr	r2, [r3, #0]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4619      	mov	r1, r3
 8000898:	4610      	mov	r0, r2
 800089a:	f00c f859 	bl	800c950 <HAL_TIM_PWM_Start>
}
 800089e:	bf00      	nop
 80008a0:	3710      	adds	r7, #16
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <Step_Driver>:


void Step_Driver(SteperParameter *step, float f_driver) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	ed87 0a00 	vstr	s0, [r7]
	float abs_f_driver = fabs(f_driver);
 80008b4:	edd7 7a00 	vldr	s15, [r7]
 80008b8:	eef0 7ae7 	vabs.f32	s15, s15
 80008bc:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t reg_out;
	if (abs_f_driver <= 5) {
 80008c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80008c4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80008c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d0:	d80d      	bhi.n	80008ee <Step_Driver+0x46>
		reg_out = 10000;
 80008d2:	f242 7310 	movw	r3, #10000	; 0x2710
 80008d6:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = 0;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2200      	movs	r2, #0
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2200      	movs	r2, #0
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
 80008ec:	e033      	b.n	8000956 <Step_Driver+0xae>
	} else if (abs_f_driver < 50) {
 80008ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80008f2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000998 <Step_Driver+0xf0>
 80008f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fe:	d50f      	bpl.n	8000920 <Step_Driver+0x78>
		reg_out = 10000;
 8000900:	f242 7310 	movw	r3, #10000	; 0x2710
 8000904:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	897a      	ldrh	r2, [r7, #10]
 800090e:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000910:	897b      	ldrh	r3, [r7, #10]
 8000912:	085b      	lsrs	r3, r3, #1
 8000914:	b29a      	uxth	r2, r3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
 800091e:	e01a      	b.n	8000956 <Step_Driver+0xae>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	89db      	ldrh	r3, [r3, #14]
 8000924:	ee07 3a90 	vmov	s15, r3
 8000928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800092c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000938:	ee17 3a90 	vmov	r3, s15
 800093c:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	897a      	ldrh	r2, [r7, #10]
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000948:	897b      	ldrh	r3, [r7, #10]
 800094a:	085b      	lsrs	r3, r3, #1
 800094c:	b29a      	uxth	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000956:	edd7 7a00 	vldr	s15, [r7]
 800095a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800095e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000962:	db09      	blt.n	8000978 <Step_Driver+0xd0>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6898      	ldr	r0, [r3, #8]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	8999      	ldrh	r1, [r3, #12]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	7c1b      	ldrb	r3, [r3, #16]
 8000970:	461a      	mov	r2, r3
 8000972:	f007 fc43 	bl	80081fc <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000976:	e00b      	b.n	8000990 <Step_Driver+0xe8>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6898      	ldr	r0, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	8999      	ldrh	r1, [r3, #12]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7c1b      	ldrb	r3, [r3, #16]
 8000984:	f083 0301 	eor.w	r3, r3, #1
 8000988:	b2db      	uxtb	r3, r3
 800098a:	461a      	mov	r2, r3
 800098c:	f007 fc36 	bl	80081fc <HAL_GPIO_WritePin>
}
 8000990:	bf00      	nop
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	42480000 	.word	0x42480000

0800099c <Traj_Coeff_Cal>:

void Traj_Coeff_Cal(TrajParameter *Traj, float T, float Pos_Final,
		float Pos_Now, float Vel_Now) {
 800099c:	b480      	push	{r7}
 800099e:	b08d      	sub	sp, #52	; 0x34
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6178      	str	r0, [r7, #20]
 80009a4:	ed87 0a04 	vstr	s0, [r7, #16]
 80009a8:	edc7 0a03 	vstr	s1, [r7, #12]
 80009ac:	ed87 1a02 	vstr	s2, [r7, #8]
 80009b0:	edc7 1a01 	vstr	s3, [r7, #4]
	float T_P2 = T * T;
 80009b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80009b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80009bc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float T_P3 = T_P2 * T;
 80009c0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80009c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80009c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009cc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float T_P4 = T_P3 * T;
 80009d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80009d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80009d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float T_P5 = T_P4 * T;
 80009e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80009e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80009e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ec:	edc7 7a08 	vstr	s15, [r7, #32]
	float ds = Pos_Now - Pos_Final;
 80009f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80009f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80009f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fc:	edc7 7a07 	vstr	s15, [r7, #28]
	float tfv0 = T * Vel_Now;
 8000a00:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a04:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a0c:	edc7 7a06 	vstr	s15, [r7, #24]
	Traj->TrajCoef[0] = Pos_Now;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	601a      	str	r2, [r3, #0]
	Traj->TrajCoef[1] = Vel_Now;
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	605a      	str	r2, [r3, #4]
	Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0)) / T_P3;
 8000a1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a20:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000a24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a28:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a2c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000a30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a3c:	eef1 6a67 	vneg.f32	s13, s15
 8000a40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	edc3 7a03 	vstr	s15, [r3, #12]
	Traj->TrajCoef[4] = (15 * ds + 8 * tfv0) / T_P4;
 8000a4e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a52:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000a56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a5e:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000a62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000a66:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000a6a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	edc3 7a04 	vstr	s15, [r3, #16]
	Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0)) / T_P5;
 8000a78:	edd7 7a07 	vldr	s15, [r7, #28]
 8000a7c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000a80:	edd7 7a06 	vldr	s15, [r7, #24]
 8000a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a88:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000a8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a90:	eef1 6a67 	vneg.f32	s13, s15
 8000a94:	ed97 7a08 	vldr	s14, [r7, #32]
 8000a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000aa2:	bf00      	nop
 8000aa4:	3734      	adds	r7, #52	; 0x34
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <TrajFollow>:

void TrajFollow(TrajParameter *Traj, float traj_t[5], float *Position,
		float *Velocity) {
 8000aae:	b480      	push	{r7}
 8000ab0:	b085      	sub	sp, #20
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	60f8      	str	r0, [r7, #12]
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	ed93 7a00 	vldr	s14, [r3]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	edd3 7a00 	vldr	s15, [r3]
 8000ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	edd3 6a03 	vldr	s13, [r3, #12]
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	3308      	adds	r3, #8
 8000ae0:	edd3 7a00 	vldr	s15, [r3]
 8000ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ae8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	edd3 6a04 	vldr	s13, [r3, #16]
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	330c      	adds	r3, #12
 8000af6:	edd3 7a00 	vldr	s15, [r3]
 8000afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000afe:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	edd3 6a05 	vldr	s13, [r3, #20]
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3310      	adds	r3, #16
 8000b0c:	edd3 7a00 	vldr	s15, [r3]
 8000b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b14:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	edc3 7a00 	vstr	s15, [r3]
	*Velocity = Traj->TrajCoef[1] + (3 * Traj->TrajCoef[3] * traj_t[1])
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b2a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000b2e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	3304      	adds	r3, #4
 8000b36:	edd3 7a00 	vldr	s15, [r3]
 8000b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b3e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (4 * Traj->TrajCoef[4] * traj_t[3])
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b48:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000b4c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	330c      	adds	r3, #12
 8000b54:	edd3 7a00 	vldr	s15, [r3]
 8000b58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b5c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (5 * Traj->TrajCoef[5] * traj_t[3]);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b66:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000b6a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	330c      	adds	r3, #12
 8000b72:	edd3 7a00 	vldr	s15, [r3]
 8000b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Velocity = Traj->TrajCoef[1] + (3 * Traj->TrajCoef[3] * traj_t[1])
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	edc3 7a00 	vstr	s15, [r3]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6178      	str	r0, [r7, #20]
 8000b98:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b9c:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 8000ba0:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ba4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	edc3 7a00 	vstr	s15, [r3]
	kalman->R = R; 			// Adjustable
 8000bae:	ed97 7b00 	vldr	d7, [r7]
 8000bb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman->x1 = 0.0;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
	kalman->x2 = 0.0;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
	kalman->p11 = 0.05;
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <Kalman_init+0x60>)
 8000bd0:	611a      	str	r2, [r3, #16]
	kalman->p12 = 0.05;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	4a06      	ldr	r2, [pc, #24]	; (8000bf0 <Kalman_init+0x60>)
 8000bd6:	615a      	str	r2, [r3, #20]
	kalman->p21 = 0.05;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <Kalman_init+0x60>)
 8000bdc:	619a      	str	r2, [r3, #24]
	kalman->p22 = 0.05;
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	4a03      	ldr	r2, [pc, #12]	; (8000bf0 <Kalman_init+0x60>)
 8000be2:	61da      	str	r2, [r3, #28]
}
 8000be4:	bf00      	nop
 8000be6:	371c      	adds	r7, #28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	3d4ccccd 	.word	0x3d4ccccd
 8000bf4:	00000000 	.word	0x00000000

08000bf8 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b0a5      	sub	sp, #148	; 0x94
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	edd3 7a05 	vldr	s15, [r3, #20]
 8000c0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c0e:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8000fc0 <KalmanFilter+0x3c8>
 8000c12:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c16:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000c20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c24:	ed9f 6be6 	vldr	d6, [pc, #920]	; 8000fc0 <KalmanFilter+0x3c8>
 8000c28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c2c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	edd3 7a00 	vldr	s15, [r3]
 8000c36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c3a:	ed9f 6be3 	vldr	d6, [pc, #908]	; 8000fc8 <KalmanFilter+0x3d0>
 8000c3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c42:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8000c46:	a3e6      	add	r3, pc, #920	; (adr r3, 8000fe0 <KalmanFilter+0x3e8>)
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 8000c50:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000c54:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000c58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	edd3 7a07 	vldr	s15, [r3, #28]
 8000c62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c66:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c6a:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c78:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000c7c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c8a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000c8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000c92:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c96:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000c9a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000c9e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000ca2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ca6:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000caa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cae:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8000cb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cb6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cc0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000cc8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	edd3 7a02 	vldr	s15, [r3, #8]
 8000cd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cd6:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000ce8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000cec:	ed97 7b00 	vldr	d7, [r7]
 8000cf0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000cf4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000cf8:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8000cfc:	ed97 7b00 	vldr	d7, [r7]
 8000d00:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d04:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d12:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000d16:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000d1a:	ed9f 5bad 	vldr	d5, [pc, #692]	; 8000fd0 <KalmanFilter+0x3d8>
 8000d1e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d28:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d2c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d30:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d34:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8000d38:	ed97 7b00 	vldr	d7, [r7]
 8000d3c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d40:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000d44:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8000d48:	ed97 7b00 	vldr	d7, [r7]
 8000d4c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d50:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8000d54:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8000d58:	ed97 7b00 	vldr	d7, [r7]
 8000d5c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d60:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000d64:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000d68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000d6c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	edd3 7a07 	vldr	s15, [r3, #28]
 8000d76:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d7a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8000fd0 <KalmanFilter+0x3d8>
 8000d7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d82:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	edd3 7a00 	vldr	s15, [r3]
 8000d8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d90:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8000fd8 <KalmanFilter+0x3e0>
 8000d94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d98:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 8000d9c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000da0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000da4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000da8:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8000dac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000db0:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000dba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000dbe:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8000dc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dc6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dda:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	edd3 7a06 	vldr	s15, [r3, #24]
 8000de4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000de8:	ed9f 5b79 	vldr	d5, [pc, #484]	; 8000fd0 <KalmanFilter+0x3d8>
 8000dec:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000df0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000df4:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8000df8:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8000dfc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000e00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e0a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e0e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8000e12:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000e16:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8000fd0 <KalmanFilter+0x3d8>
 8000e1a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e22:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	edd3 7a02 	vldr	s15, [r3, #8]
 8000e36:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e3a:	ed97 7b00 	vldr	d7, [r7]
 8000e3e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e4c:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8000fd0 <KalmanFilter+0x3d8>
 8000e50:	ee27 7b04 	vmul.f64	d7, d7, d4
 8000e54:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e58:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000e5c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000e60:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8000e64:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000e68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e6c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e76:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e84:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e88:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e8c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000e90:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e94:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000e98:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000e9c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000ea0:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000ea4:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8000ea8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000eac:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000eb0:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000eb4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000eb8:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ec2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ec6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000eca:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000fd0 <KalmanFilter+0x3d8>
 8000ece:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ed2:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000ed6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000eda:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ee4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ee8:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ef2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ef6:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000efa:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000efe:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000f02:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000f06:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000f0a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f0e:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f1c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2a:	ee37 5b07 	vadd.f64	d5, d7, d7
 8000f2e:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000f32:	ee35 7b07 	vadd.f64	d7, d5, d7
 8000f36:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000f3a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000f3e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f42:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f4c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	edd3 7a00 	vldr	s15, [r3]
 8000f56:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f5a:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000f5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f62:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f6c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000f70:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8000f74:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000f78:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8000f7c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8000f80:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8000f84:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000f88:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f8c:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8000f90:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8000f94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	edc3 7a02 	vstr	s15, [r3, #8]
	kalman->x2 = xx2;
 8000f9e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8000fa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->p11 = pp11;
 8000fac:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000fb0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	edc3 7a04 	vstr	s15, [r3, #16]
 8000fba:	e015      	b.n	8000fe8 <KalmanFilter+0x3f0>
 8000fbc:	f3af 8000 	nop.w
 8000fc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000fc4:	3f70624d 	.word	0x3f70624d
 8000fc8:	812dea12 	.word	0x812dea12
 8000fcc:	3d719799 	.word	0x3d719799
 8000fd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000fd4:	3f50624d 	.word	0x3f50624d
 8000fd8:	e826d695 	.word	0xe826d695
 8000fdc:	3e112e0b 	.word	0x3e112e0b
 8000fe0:	a0b5ed8d 	.word	0xa0b5ed8d
 8000fe4:	3eb0c6f7 	.word	0x3eb0c6f7
	kalman->p12 = pp12;
 8000fe8:	ed97 7b08 	vldr	d7, [r7, #32]
 8000fec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->p21 = pp21;
 8000ff6:	ed97 7b06 	vldr	d7, [r7, #24]
 8000ffa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman->p22 = pp22;
 8001004:	ed97 7b04 	vldr	d7, [r7, #16]
 8001008:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001012:	bf00      	nop
 8001014:	3794      	adds	r7, #148	; 0x94
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <PID_init>:

void PID_init(PIDParameter *PID, float Kp, float Ki, float Kd) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	ed87 0a02 	vstr	s0, [r7, #8]
 800102c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001030:	ed87 1a00 	vstr	s2, [r7]
	PID->Kp = Kp;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	601a      	str	r2, [r3, #0]
	PID->Ki = Ki;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
	PID->Kd = Kd;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	609a      	str	r2, [r3, #8]
	PID->ITerm = 0;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
	PID->Setpoint = 0;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
	PID->Feedback = 0;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
	PID->Error[0] = 0;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	61da      	str	r2, [r3, #28]
	PID->Output = 0;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <PID_Control>:

float PID_Control(PIDParameter *PID,float Setpoint,float Feedback){
 8001082:	b480      	push	{r7}
 8001084:	b085      	sub	sp, #20
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	ed87 0a02 	vstr	s0, [r7, #8]
 800108e:	edc7 0a01 	vstr	s1, [r7, #4]
	PID->Feedback = Feedback; 	// Feedback Input
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	615a      	str	r2, [r3, #20]
	PID->Setpoint = Setpoint;	// Setpoint Input
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	611a      	str	r2, [r3, #16]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80010aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	edc3 7a06 	vstr	s15, [r3, #24]
	PID->ITerm += PID->Error[0];
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	ed93 7a03 	vldr	s14, [r3, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80010c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	ed93 7a00 	vldr	s14, [r3]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80010d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	edd3 6a01 	vldr	s13, [r3, #4]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80010e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ea:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (PID->Kp * (PID->Error[0] - PID->Error[1])));
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	edd3 6a00 	vldr	s13, [r3]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	ed93 6a06 	vldr	s12, [r3, #24]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8001100:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001108:	ee77 7a27 	vadd.f32	s15, s14, s15
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edc3 7a08 	vstr	s15, [r3, #32]
	PID->Error[1] = PID->Error[0]; // Update Error
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	699a      	ldr	r2, [r3, #24]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	61da      	str	r2, [r3, #28]
	return PID->Output;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	ee07 3a90 	vmov	s15, r3
}
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	3714      	adds	r7, #20
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,float PosP,float PosI,float PosD,float VelP,float VelI,float VelD, float GearRatio ,float StepDriver){
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6278      	str	r0, [r7, #36]	; 0x24
 8001138:	ed87 0a08 	vstr	s0, [r7, #32]
 800113c:	edc7 0a07 	vstr	s1, [r7, #28]
 8001140:	ed87 1a06 	vstr	s2, [r7, #24]
 8001144:	edc7 1a05 	vstr	s3, [r7, #20]
 8001148:	ed87 2a04 	vstr	s4, [r7, #16]
 800114c:	edc7 2a03 	vstr	s5, [r7, #12]
 8001150:	ed87 3a02 	vstr	s6, [r7, #8]
 8001154:	edc7 3a01 	vstr	s7, [r7, #4]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	ed97 1a06 	vldr	s2, [r7, #24]
 800115e:	edd7 0a07 	vldr	s1, [r7, #28]
 8001162:	ed97 0a08 	vldr	s0, [r7, #32]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff5a 	bl	8001020 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	3330      	adds	r3, #48	; 0x30
 8001170:	ed97 1a03 	vldr	s2, [r7, #12]
 8001174:	edd7 0a04 	vldr	s1, [r7, #16]
 8001178:	ed97 0a05 	vldr	s0, [r7, #20]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff4f 	bl	8001020 <PID_init>
	Control->Vel_Gfeed = (GearRatio * StepDriver) / (2*PI);
 8001182:	ed97 7a02 	vldr	s14, [r7, #8]
 8001186:	edd7 7a01 	vldr	s15, [r7, #4]
 800118a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800118e:	eddf 6a05 	vldr	s13, [pc, #20]	; 80011a4 <CascadeControl_init+0x74>
 8001192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40c90fdb 	.word	0x40c90fdb

080011a8 <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		float Pos_Feed, float pos_set, float vel_set) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6178      	str	r0, [r7, #20]
 80011b0:	6139      	str	r1, [r7, #16]
 80011b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80011b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80011ba:	ed87 1a01 	vstr	s2, [r7, #4]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
	Control->VelocitySetpoint = vel_set;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	655a      	str	r2, [r3, #84]	; 0x54

	/*Kalman Filter*/
	Control->PositionFeedback = Pos_Feed;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
	KalmanFilter(kalman, Control->PositionFeedback); /*Kalman filter */
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80011d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011da:	eeb0 0b47 	vmov.f64	d0, d7
 80011de:	6938      	ldr	r0, [r7, #16]
 80011e0:	f7ff fd0a 	bl	8000bf8 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	659a      	str	r2, [r3, #88]	; 0x58

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80011fa:	eef0 0a47 	vmov.f32	s1, s14
 80011fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001202:	4610      	mov	r0, r2
 8001204:	f7ff ff3d 	bl	8001082 <PID_Control>
 8001208:	eef0 7a40 	vmov.f32	s15, s0
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->VelocitySetpoint += Control->PositionPIDOutput;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800121e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800123a:	eef0 0a47 	vmov.f32	s1, s14
 800123e:	eeb0 0a67 	vmov.f32	s0, s15
 8001242:	4610      	mov	r0, r2
 8001244:	f7ff ff1d 	bl	8001082 <PID_Control>
 8001248:	eef0 7a40 	vmov.f32	s15, s0
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			Control->VelocitySetpoint, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->VelocitySetpoint)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800125e:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Control->VelocityPIDOutput;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8001268:	ee77 7a27 	vadd.f32	s15, s14, s15
	Control->Output = (Control->Vel_Gfeed * Control->VelocitySetpoint)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_CRC_Init+0x50>)
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <MX_CRC_Init+0x54>)
 8001284:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_CRC_Init+0x50>)
 8001288:	2201      	movs	r2, #1
 800128a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_CRC_Init+0x50>)
 800128e:	2201      	movs	r2, #1
 8001290:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_CRC_Init+0x50>)
 8001294:	221d      	movs	r2, #29
 8001296:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_CRC_Init+0x50>)
 800129a:	2210      	movs	r2, #16
 800129c:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <MX_CRC_Init+0x50>)
 80012a0:	22c4      	movs	r2, #196	; 0xc4
 80012a2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_CRC_Init+0x50>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <MX_CRC_Init+0x50>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80012b0:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_CRC_Init+0x50>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <MX_CRC_Init+0x50>)
 80012b8:	f004 fc38 	bl	8005b2c <HAL_CRC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80012c2:	f000 fd15 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000b0 	.word	0x200000b0
 80012d0:	58024c00 	.word	0x58024c00

080012d4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0b      	ldr	r2, [pc, #44]	; (8001310 <HAL_CRC_MspInit+0x3c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10e      	bne.n	8001304 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_CRC_MspInit+0x40>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_CRC_MspInit+0x40>)
 80012ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <HAL_CRC_MspInit+0x40>)
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001304:	bf00      	nop
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr
 8001310:	58024c00 	.word	0x58024c00
 8001314:	58024400 	.word	0x58024400

08001318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_DMA_Init+0x3c>)
 8001320:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001324:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <MX_DMA_Init+0x3c>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_DMA_Init+0x3c>)
 8001330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	200b      	movs	r0, #11
 8001342:	f004 fbbe 	bl	8005ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001346:	200b      	movs	r0, #11
 8001348:	f004 fbd5 	bl	8005af6 <HAL_NVIC_EnableIRQ>

}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	58024400 	.word	0x58024400

08001358 <MX_GPIO_Init>:
        * the Code Generation settings)
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	; 0x30
 800135c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4b91      	ldr	r3, [pc, #580]	; (80015b4 <MX_GPIO_Init+0x25c>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4a8f      	ldr	r2, [pc, #572]	; (80015b4 <MX_GPIO_Init+0x25c>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4b8d      	ldr	r3, [pc, #564]	; (80015b4 <MX_GPIO_Init+0x25c>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138c:	4b89      	ldr	r3, [pc, #548]	; (80015b4 <MX_GPIO_Init+0x25c>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	4a88      	ldr	r2, [pc, #544]	; (80015b4 <MX_GPIO_Init+0x25c>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139c:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <MX_GPIO_Init+0x25c>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	f003 0304 	and.w	r3, r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013aa:	4b82      	ldr	r3, [pc, #520]	; (80015b4 <MX_GPIO_Init+0x25c>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a80      	ldr	r2, [pc, #512]	; (80015b4 <MX_GPIO_Init+0x25c>)
 80013b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b7e      	ldr	r3, [pc, #504]	; (80015b4 <MX_GPIO_Init+0x25c>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c8:	4b7a      	ldr	r3, [pc, #488]	; (80015b4 <MX_GPIO_Init+0x25c>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a79      	ldr	r2, [pc, #484]	; (80015b4 <MX_GPIO_Init+0x25c>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b76      	ldr	r3, [pc, #472]	; (80015b4 <MX_GPIO_Init+0x25c>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <MX_GPIO_Init+0x25c>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	4a71      	ldr	r2, [pc, #452]	; (80015b4 <MX_GPIO_Init+0x25c>)
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f6:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <MX_GPIO_Init+0x25c>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001404:	4b6b      	ldr	r3, [pc, #428]	; (80015b4 <MX_GPIO_Init+0x25c>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	4a6a      	ldr	r2, [pc, #424]	; (80015b4 <MX_GPIO_Init+0x25c>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001414:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <MX_GPIO_Init+0x25c>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001422:	2200      	movs	r2, #0
 8001424:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001428:	4863      	ldr	r0, [pc, #396]	; (80015b8 <MX_GPIO_Init+0x260>)
 800142a:	f006 fee7 	bl	80081fc <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED1_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001434:	4861      	ldr	r0, [pc, #388]	; (80015bc <MX_GPIO_Init+0x264>)
 8001436:	f006 fee1 	bl	80081fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	21c4      	movs	r1, #196	; 0xc4
 800143e:	4860      	ldr	r0, [pc, #384]	; (80015c0 <MX_GPIO_Init+0x268>)
 8001440:	f006 fedc 	bl	80081fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001444:	2200      	movs	r2, #0
 8001446:	f24c 0140 	movw	r1, #49216	; 0xc040
 800144a:	485e      	ldr	r0, [pc, #376]	; (80015c4 <MX_GPIO_Init+0x26c>)
 800144c:	f006 fed6 	bl	80081fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001456:	4859      	ldr	r0, [pc, #356]	; (80015bc <MX_GPIO_Init+0x264>)
 8001458:	f006 fed0 	bl	80081fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 800145c:	2201      	movs	r2, #1
 800145e:	213f      	movs	r1, #63	; 0x3f
 8001460:	4858      	ldr	r0, [pc, #352]	; (80015c4 <MX_GPIO_Init+0x26c>)
 8001462:	f006 fecb 	bl	80081fc <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001466:	f648 33df 	movw	r3, #35807	; 0x8bdf
 800146a:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	4619      	mov	r1, r3
 800147e:	484e      	ldr	r0, [pc, #312]	; (80015b8 <MX_GPIO_Init+0x260>)
 8001480:	f006 fd14 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001484:	f24e 032f 	movw	r3, #57391	; 0xe02f
 8001488:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148a:	2303      	movs	r3, #3
 800148c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	4848      	ldr	r0, [pc, #288]	; (80015bc <MX_GPIO_Init+0x264>)
 800149a:	f006 fd07 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800149e:	233c      	movs	r3, #60	; 0x3c
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4845      	ldr	r0, [pc, #276]	; (80015c8 <MX_GPIO_Init+0x270>)
 80014b2:	f006 fcfb 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 80014b6:	f44f 7344 	mov.w	r3, #784	; 0x310
 80014ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	483b      	ldr	r0, [pc, #236]	; (80015bc <MX_GPIO_Init+0x264>)
 80014d0:	f006 fcec 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d8:	2303      	movs	r3, #3
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4619      	mov	r1, r3
 80014e6:	4836      	ldr	r0, [pc, #216]	; (80015c0 <MX_GPIO_Init+0x268>)
 80014e8:	f006 fce0 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 031c 	add.w	r3, r7, #28
 80014fe:	4619      	mov	r1, r3
 8001500:	482f      	ldr	r0, [pc, #188]	; (80015c0 <MX_GPIO_Init+0x268>)
 8001502:	f006 fcd3 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001506:	23c4      	movs	r3, #196	; 0xc4
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4828      	ldr	r0, [pc, #160]	; (80015c0 <MX_GPIO_Init+0x268>)
 800151e:	f006 fcc5 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001528:	2303      	movs	r3, #3
 800152a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4820      	ldr	r0, [pc, #128]	; (80015b8 <MX_GPIO_Init+0x260>)
 8001538:	f006 fcb8 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 800153c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	481c      	ldr	r0, [pc, #112]	; (80015c4 <MX_GPIO_Init+0x26c>)
 8001552:	f006 fcab 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001556:	f24c 037f 	movw	r3, #49279	; 0xc07f
 800155a:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001568:	f107 031c 	add.w	r3, r7, #28
 800156c:	4619      	mov	r1, r3
 800156e:	4815      	ldr	r0, [pc, #84]	; (80015c4 <MX_GPIO_Init+0x26c>)
 8001570:	f006 fc9c 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <MX_GPIO_Init+0x270>)
 800158a:	f006 fc8f 	bl	8007eac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800158e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 031c 	add.w	r3, r7, #28
 80015a4:	4619      	mov	r1, r3
 80015a6:	4808      	ldr	r0, [pc, #32]	; (80015c8 <MX_GPIO_Init+0x270>)
 80015a8:	f006 fc80 	bl	8007eac <HAL_GPIO_Init>

}
 80015ac:	bf00      	nop
 80015ae:	3730      	adds	r7, #48	; 0x30
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	58024400 	.word	0x58024400
 80015b8:	58021000 	.word	0x58021000
 80015bc:	58020800 	.word	0x58020800
 80015c0:	58020400 	.word	0x58020400
 80015c4:	58020c00 	.word	0x58020c00
 80015c8:	58020000 	.word	0x58020000

080015cc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_I2C2_Init+0x74>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_I2C2_Init+0x78>)
 80015d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_I2C2_Init+0x74>)
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <MX_I2C2_Init+0x7c>)
 80015da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_I2C2_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_I2C2_Init+0x74>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_I2C2_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_I2C2_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_I2C2_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_I2C2_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_I2C2_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001606:	480e      	ldr	r0, [pc, #56]	; (8001640 <MX_I2C2_Init+0x74>)
 8001608:	f006 fe2c 	bl	8008264 <HAL_I2C_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001612:	f000 fb6d 	bl	8001cf0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001616:	2100      	movs	r1, #0
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <MX_I2C2_Init+0x74>)
 800161a:	f006 feb3 	bl	8008384 <HAL_I2CEx_ConfigAnalogFilter>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001624:	f000 fb64 	bl	8001cf0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_I2C2_Init+0x74>)
 800162c:	f006 fef5 	bl	800841a <HAL_I2CEx_ConfigDigitalFilter>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001636:	f000 fb5b 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000d4 	.word	0x200000d4
 8001644:	40005800 	.word	0x40005800
 8001648:	60404e72 	.word	0x60404e72

0800164c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0b6      	sub	sp, #216	; 0xd8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	22b4      	movs	r2, #180	; 0xb4
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f00e f8e1 	bl	800f834 <memset>
  if(i2cHandle->Instance==I2C2)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a25      	ldr	r2, [pc, #148]	; (800170c <HAL_I2C_MspInit+0xc0>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d142      	bne.n	8001702 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800167c:	2308      	movs	r3, #8
 800167e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4618      	mov	r0, r3
 800168c:	f007 fe84 	bl	8009398 <HAL_RCCEx_PeriphCLKConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001696:	f000 fb2b 	bl	8001cf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_I2C_MspInit+0xc4>)
 800169c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <HAL_I2C_MspInit+0xc4>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_I2C_MspInit+0xc4>)
 80016ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c0:	2312      	movs	r3, #18
 80016c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016d2:	2304      	movs	r3, #4
 80016d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80016dc:	4619      	mov	r1, r3
 80016de:	480d      	ldr	r0, [pc, #52]	; (8001714 <HAL_I2C_MspInit+0xc8>)
 80016e0:	f006 fbe4 	bl	8007eac <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <HAL_I2C_MspInit+0xc4>)
 80016e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016ea:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_I2C_MspInit+0xc4>)
 80016ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_I2C_MspInit+0xc4>)
 80016f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001702:	bf00      	nop
 8001704:	37d8      	adds	r7, #216	; 0xd8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40005800 	.word	0x40005800
 8001710:	58024400 	.word	0x58024400
 8001714:	58020400 	.word	0x58020400

08001718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800171e:	f002 f81f 	bl	8003760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001722:	f000 f983 	bl	8001a2c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001726:	f000 f9f9 	bl	8001b1c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172a:	f7ff fe15 	bl	8001358 <MX_GPIO_Init>
  MX_DMA_Init();
 800172e:	f7ff fdf3 	bl	8001318 <MX_DMA_Init>
  MX_ADC3_Init();
 8001732:	f7fe fff7 	bl	8000724 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001736:	f000 fd23 	bl	8002180 <MX_TIM1_Init>
  MX_TIM3_Init();
 800173a:	f000 fe05 	bl	8002348 <MX_TIM3_Init>
  MX_TIM4_Init();
 800173e:	f000 fe7b 	bl	8002438 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001742:	f000 fecf 	bl	80024e4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001746:	f000 ff5b 	bl	8002600 <MX_TIM8_Init>
  MX_TIM13_Init();
 800174a:	f000 ffb3 	bl	80026b4 <MX_TIM13_Init>
  MX_TIM14_Init();
 800174e:	f001 f801 	bl	8002754 <MX_TIM14_Init>
  MX_TIM15_Init();
 8001752:	f001 f84f 	bl	80027f4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001756:	f001 f8d5 	bl	8002904 <MX_TIM16_Init>
  MX_TIM17_Init();
 800175a:	f001 f94f 	bl	80029fc <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800175e:	f001 fe4f 	bl	8003400 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001762:	f001 fe9b 	bl	800349c <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8001766:	f000 fac9 	bl	8001cfc <MX_SPI3_Init>
  MX_SPI4_Init();
 800176a:	f000 fb1f 	bl	8001dac <MX_SPI4_Init>
  MX_TIM2_Init();
 800176e:	f000 fd97 	bl	80022a0 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001772:	f7ff ff2b 	bl	80015cc <MX_I2C2_Init>
  MX_CRC_Init();
 8001776:	f7ff fd81 	bl	800127c <MX_CRC_Init>
  MX_TIM24_Init();
 800177a:	f001 fa0b 	bl	8002b94 <MX_TIM24_Init>
  MX_TIM23_Init();
 800177e:	f001 f9b9 	bl	8002af4 <MX_TIM23_Init>
  MX_TIM6_Init();
 8001782:	f000 ff05 	bl	8002590 <MX_TIM6_Init>
  MX_UART5_Init();
 8001786:	f001 fdef 	bl	8003368 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	2101      	movs	r1, #1
 800178e:	4888      	ldr	r0, [pc, #544]	; (80019b0 <main+0x298>)
 8001790:	f006 fd34 	bl	80081fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 8001794:	2201      	movs	r2, #1
 8001796:	2102      	movs	r1, #2
 8001798:	4885      	ldr	r0, [pc, #532]	; (80019b0 <main+0x298>)
 800179a:	f006 fd2f 	bl	80081fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 800179e:	2201      	movs	r2, #1
 80017a0:	2104      	movs	r1, #4
 80017a2:	4883      	ldr	r0, [pc, #524]	; (80019b0 <main+0x298>)
 80017a4:	f006 fd2a 	bl	80081fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 80017a8:	2201      	movs	r2, #1
 80017aa:	2108      	movs	r1, #8
 80017ac:	4880      	ldr	r0, [pc, #512]	; (80019b0 <main+0x298>)
 80017ae:	f006 fd25 	bl	80081fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2110      	movs	r1, #16
 80017b6:	487e      	ldr	r0, [pc, #504]	; (80019b0 <main+0x298>)
 80017b8:	f006 fd20 	bl	80081fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 80017bc:	2201      	movs	r2, #1
 80017be:	2120      	movs	r1, #32
 80017c0:	487b      	ldr	r0, [pc, #492]	; (80019b0 <main+0x298>)
 80017c2:	f006 fd1b 	bl	80081fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2140      	movs	r1, #64	; 0x40
 80017ca:	4879      	ldr	r0, [pc, #484]	; (80019b0 <main+0x298>)
 80017cc:	f006 fd16 	bl	80081fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2140      	movs	r1, #64	; 0x40
 80017d4:	4877      	ldr	r0, [pc, #476]	; (80019b4 <main+0x29c>)
 80017d6:	f006 fd11 	bl	80081fc <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 80017da:	4b77      	ldr	r3, [pc, #476]	; (80019b8 <main+0x2a0>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	4b76      	ldr	r3, [pc, #472]	; (80019bc <main+0x2a4>)
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017ee:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8001998 <main+0x280>
 80017f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017fa:	4b71      	ldr	r3, [pc, #452]	; (80019c0 <main+0x2a8>)
 80017fc:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8001800:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001804:	2100      	movs	r1, #0
 8001806:	486f      	ldr	r0, [pc, #444]	; (80019c4 <main+0x2ac>)
 8001808:	f003 ffea 	bl	80057e0 <HAL_ADCEx_Calibration_Start>

//	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 14);
  	while (HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14) != HAL_OK)
 800180c:	e007      	b.n	800181e <main+0x106>

	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_5);
 800180e:	2320      	movs	r3, #32
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	4b6d      	ldr	r3, [pc, #436]	; (80019c8 <main+0x2b0>)
 8001814:	4a66      	ldr	r2, [pc, #408]	; (80019b0 <main+0x298>)
 8001816:	496d      	ldr	r1, [pc, #436]	; (80019cc <main+0x2b4>)
 8001818:	486d      	ldr	r0, [pc, #436]	; (80019d0 <main+0x2b8>)
 800181a:	f7fe fef5 	bl	8000608 <AS5047U_init>
  	while (HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14) != HAL_OK)
 800181e:	220e      	movs	r2, #14
 8001820:	496c      	ldr	r1, [pc, #432]	; (80019d4 <main+0x2bc>)
 8001822:	486d      	ldr	r0, [pc, #436]	; (80019d8 <main+0x2c0>)
 8001824:	f00c fc0e 	bl	800e044 <HAL_UART_Receive_DMA>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ef      	bne.n	800180e <main+0xf6>
	Kalman_init(&Kalman[0], 5000,0.001);
 800182e:	ed9f 1b5c 	vldr	d1, [pc, #368]	; 80019a0 <main+0x288>
 8001832:	ed9f 0b5d 	vldr	d0, [pc, #372]	; 80019a8 <main+0x290>
 8001836:	4869      	ldr	r0, [pc, #420]	; (80019dc <main+0x2c4>)
 8001838:	f7ff f9aa 	bl	8000b90 <Kalman_init>
	CascadeControl_init(&Control[0], 0.5, 0, 0, 0.2, 0, 0, 9, 1600);
 800183c:	eddf 3a68 	vldr	s7, [pc, #416]	; 80019e0 <main+0x2c8>
 8001840:	eeb2 3a02 	vmov.f32	s6, #34	; 0x41100000  9.0
 8001844:	eddf 2a67 	vldr	s5, [pc, #412]	; 80019e4 <main+0x2cc>
 8001848:	ed9f 2a66 	vldr	s4, [pc, #408]	; 80019e4 <main+0x2cc>
 800184c:	eddf 1a66 	vldr	s3, [pc, #408]	; 80019e8 <main+0x2d0>
 8001850:	ed9f 1a64 	vldr	s2, [pc, #400]	; 80019e4 <main+0x2cc>
 8001854:	eddf 0a63 	vldr	s1, [pc, #396]	; 80019e4 <main+0x2cc>
 8001858:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800185c:	4863      	ldr	r0, [pc, #396]	; (80019ec <main+0x2d4>)
 800185e:	f7ff fc67 	bl	8001130 <CascadeControl_init>
	Step_Driver_init(&Stepper[0], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 0);
 8001862:	2300      	movs	r3, #0
 8001864:	9302      	str	r3, [sp, #8]
 8001866:	4b62      	ldr	r3, [pc, #392]	; (80019f0 <main+0x2d8>)
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	2308      	movs	r3, #8
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <main+0x29c>)
 8001870:	2200      	movs	r2, #0
 8001872:	4960      	ldr	r1, [pc, #384]	; (80019f4 <main+0x2dc>)
 8001874:	4860      	ldr	r0, [pc, #384]	; (80019f8 <main+0x2e0>)
 8001876:	f7fe ffef 	bl	8000858 <Step_Driver_init>
	HAL_TIM_Base_Start_IT(&htim23);
 800187a:	4860      	ldr	r0, [pc, #384]	; (80019fc <main+0x2e4>)
 800187c:	f00a ff34 	bl	800c6e8 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Contorl_Flag) {
 8001880:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <main+0x2e8>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d036      	beq.n	80018f6 <main+0x1de>
			float Position, Velocity;
			Joint_Traj(&Position,&Velocity);
 8001888:	1d3a      	adds	r2, r7, #4
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f9c1 	bl	8001c18 <Joint_Traj>
			AS5047U_Position_Highspeed_Read(&Encoder[0]);
 8001896:	484e      	ldr	r0, [pc, #312]	; (80019d0 <main+0x2b8>)
 8001898:	f7fe feed 	bl	8000676 <AS5047U_Position_Highspeed_Read>
			position_test = (float) (Encoder[0].Position) * PI / 8192.0f;
 800189c:	4b4c      	ldr	r3, [pc, #304]	; (80019d0 <main+0x2b8>)
 800189e:	89db      	ldrh	r3, [r3, #14]
 80018a0:	ee07 3a90 	vmov	s15, r3
 80018a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018a8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001a04 <main+0x2ec>
 80018ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018b0:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001a08 <main+0x2f0>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	4b54      	ldr	r3, [pc, #336]	; (8001a0c <main+0x2f4>)
 80018ba:	edc3 7a00 	vstr	s15, [r3]
			CascadeControl(&Control[0], &Kalman[0], position_test,Position,Velocity);
 80018be:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <main+0x2f4>)
 80018c0:	edd3 7a00 	vldr	s15, [r3]
 80018c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80018c8:	edd7 6a01 	vldr	s13, [r7, #4]
 80018cc:	eeb0 1a66 	vmov.f32	s2, s13
 80018d0:	eef0 0a47 	vmov.f32	s1, s14
 80018d4:	eeb0 0a67 	vmov.f32	s0, s15
 80018d8:	4940      	ldr	r1, [pc, #256]	; (80019dc <main+0x2c4>)
 80018da:	4844      	ldr	r0, [pc, #272]	; (80019ec <main+0x2d4>)
 80018dc:	f7ff fc64 	bl	80011a8 <CascadeControl>
			Step_Driver(&Stepper[0], Control[0].Output);
 80018e0:	4b42      	ldr	r3, [pc, #264]	; (80019ec <main+0x2d4>)
 80018e2:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	4843      	ldr	r0, [pc, #268]	; (80019f8 <main+0x2e0>)
 80018ec:	f7fe ffdc 	bl	80008a8 <Step_Driver>
			Contorl_Flag = 0;
 80018f0:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <main+0x2e8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
		}
		if (traj_finish){
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <main+0x2f8>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d032      	beq.n	8001964 <main+0x24c>
			if(Control[0].PositionFeedback > 1.5){
 80018fe:	4b3b      	ldr	r3, [pc, #236]	; (80019ec <main+0x2d4>)
 8001900:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001904:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	dd11      	ble.n	8001936 <main+0x21e>
				Traj_Coeff_Cal(&Traj[0], 5, 0.5, Control[0].PositionFeedback, Control[0].VelocityFeedback);
 8001912:	4b36      	ldr	r3, [pc, #216]	; (80019ec <main+0x2d4>)
 8001914:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001918:	4b34      	ldr	r3, [pc, #208]	; (80019ec <main+0x2d4>)
 800191a:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800191e:	eef0 1a47 	vmov.f32	s3, s14
 8001922:	eeb0 1a67 	vmov.f32	s2, s15
 8001926:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800192a:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800192e:	4839      	ldr	r0, [pc, #228]	; (8001a14 <main+0x2fc>)
 8001930:	f7ff f834 	bl	800099c <Traj_Coeff_Cal>
 8001934:	e010      	b.n	8001958 <main+0x240>
			}
			else{
				Traj_Coeff_Cal(&Traj[0], 5, 1.6, Control[0].PositionFeedback, Control[0].VelocityFeedback);
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <main+0x2d4>)
 8001938:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800193c:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <main+0x2d4>)
 800193e:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001942:	eef0 1a47 	vmov.f32	s3, s14
 8001946:	eeb0 1a67 	vmov.f32	s2, s15
 800194a:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001a18 <main+0x300>
 800194e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001952:	4830      	ldr	r0, [pc, #192]	; (8001a14 <main+0x2fc>)
 8001954:	f7ff f822 	bl	800099c <Traj_Coeff_Cal>
			}
			traj_finish = 0;
 8001958:	4b2d      	ldr	r3, [pc, #180]	; (8001a10 <main+0x2f8>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
			T_Traj = 5;
 800195e:	4b2f      	ldr	r3, [pc, #188]	; (8001a1c <main+0x304>)
 8001960:	4a2f      	ldr	r2, [pc, #188]	; (8001a20 <main+0x308>)
 8001962:	601a      	str	r2, [r3, #0]
		}
		int a = HAL_GetTick();
 8001964:	f001 ff82 	bl	800386c <HAL_GetTick>
 8001968:	4603      	mov	r3, r0
 800196a:	60fb      	str	r3, [r7, #12]
		if (a - Last_Update_Time_MS >= 1000) {
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <main+0x30c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001978:	d382      	bcc.n	8001880 <main+0x168>
			Last_Update_Time_MS = a;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <main+0x30c>)
 800197e:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 					//read temperature sensor
 8001980:	4810      	ldr	r0, [pc, #64]	; (80019c4 <main+0x2ac>)
 8001982:	f002 fc5d 	bl	8004240 <HAL_ADC_Start_IT>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8001986:	f44f 7100 	mov.w	r1, #512	; 0x200
 800198a:	4827      	ldr	r0, [pc, #156]	; (8001a28 <main+0x310>)
 800198c:	f006 fc4f 	bl	800822e <HAL_GPIO_TogglePin>
  {
 8001990:	e776      	b.n	8001880 <main+0x168>
 8001992:	bf00      	nop
 8001994:	f3af 8000 	nop.w
 8001998:	00000000 	.word	0x00000000
 800199c:	40540000 	.word	0x40540000
 80019a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019a4:	3f50624d 	.word	0x3f50624d
 80019a8:	00000000 	.word	0x00000000
 80019ac:	40b38800 	.word	0x40b38800
 80019b0:	58020c00 	.word	0x58020c00
 80019b4:	58021000 	.word	0x58021000
 80019b8:	1ff1e840 	.word	0x1ff1e840
 80019bc:	1ff1e820 	.word	0x1ff1e820
 80019c0:	200004c0 	.word	0x200004c0
 80019c4:	20000040 	.word	0x20000040
 80019c8:	200000b0 	.word	0x200000b0
 80019cc:	200004d0 	.word	0x200004d0
 80019d0:	200003f0 	.word	0x200003f0
 80019d4:	20000030 	.word	0x20000030
 80019d8:	20000ba0 	.word	0x20000ba0
 80019dc:	200002e8 	.word	0x200002e8
 80019e0:	44c80000 	.word	0x44c80000
 80019e4:	00000000 	.word	0x00000000
 80019e8:	3e4ccccd 	.word	0x3e4ccccd
 80019ec:	2000012c 	.word	0x2000012c
 80019f0:	0007a120 	.word	0x0007a120
 80019f4:	200006c4 	.word	0x200006c4
 80019f8:	20000470 	.word	0x20000470
 80019fc:	20000924 	.word	0x20000924
 8001a00:	20000128 	.word	0x20000128
 8001a04:	40490fdb 	.word	0x40490fdb
 8001a08:	46000000 	.word	0x46000000
 8001a0c:	20000124 	.word	0x20000124
 8001a10:	2000002c 	.word	0x2000002c
 8001a14:	2000036c 	.word	0x2000036c
 8001a18:	3fcccccd 	.word	0x3fcccccd
 8001a1c:	200004c4 	.word	0x200004c4
 8001a20:	40a00000 	.word	0x40a00000
 8001a24:	200003ec 	.word	0x200003ec
 8001a28:	58020800 	.word	0x58020800

08001a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b09c      	sub	sp, #112	; 0x70
 8001a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a36:	224c      	movs	r2, #76	; 0x4c
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00d fefa 	bl	800f834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	2220      	movs	r2, #32
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f00d fef4 	bl	800f834 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a4c:	2002      	movs	r0, #2
 8001a4e:	f006 fd31 	bl	80084b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <SystemClock_Config+0xe8>)
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	4a2e      	ldr	r2, [pc, #184]	; (8001b14 <SystemClock_Config+0xe8>)
 8001a5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a60:	6193      	str	r3, [r2, #24]
 8001a62:	4b2c      	ldr	r3, [pc, #176]	; (8001b14 <SystemClock_Config+0xe8>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a6e:	bf00      	nop
 8001a70:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <SystemClock_Config+0xe8>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a7c:	d1f8      	bne.n	8001a70 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001a7e:	4b26      	ldr	r3, [pc, #152]	; (8001b18 <SystemClock_Config+0xec>)
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	f023 0303 	bic.w	r3, r3, #3
 8001a86:	4a24      	ldr	r2, [pc, #144]	; (8001b18 <SystemClock_Config+0xec>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8001aa4:	232c      	movs	r3, #44	; 0x2c
 8001aa6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001aac:	2302      	movs	r3, #2
 8001aae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001ab4:	230c      	movs	r3, #12
 8001ab6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001abc:	2300      	movs	r3, #0
 8001abe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f006 fd2f 	bl	8008528 <HAL_RCC_OscConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001ad0:	f000 f90e 	bl	8001cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ad4:	233f      	movs	r3, #63	; 0x3f
 8001ad6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001ae0:	2308      	movs	r3, #8
 8001ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ae4:	2340      	movs	r3, #64	; 0x40
 8001ae6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ae8:	2340      	movs	r3, #64	; 0x40
 8001aea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001af2:	2340      	movs	r3, #64	; 0x40
 8001af4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2103      	movs	r1, #3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 f8c0 	bl	8008c80 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001b06:	f000 f8f3 	bl	8001cf0 <Error_Handler>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3770      	adds	r7, #112	; 0x70
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	58024800 	.word	0x58024800
 8001b18:	58024400 	.word	0x58024400

08001b1c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0ae      	sub	sp, #184	; 0xb8
 8001b20:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	22b4      	movs	r2, #180	; 0xb4
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f00d fe83 	bl	800f834 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <PeriphCommonClock_Config+0x64>)
 8001b30:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001b32:	2302      	movs	r3, #2
 8001b34:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8001b36:	2310      	movs	r3, #16
 8001b38:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b46:	23c0      	movs	r3, #192	; 0xc0
 8001b48:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8001b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b56:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8001b5c:	2308      	movs	r3, #8
 8001b5e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f007 fc15 	bl	8009398 <HAL_RCCEx_PeriphCLKConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001b74:	f000 f8bc 	bl	8001cf0 <Error_Handler>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	37b8      	adds	r7, #184	; 0xb8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	00082003 	.word	0x00082003

08001b84 <HAL_ADC_ConvCpltCallback>:
////	__HAL_UART_CLEAR_OREFLAG(huart);
////    HAL_UART_DeInit();
//    HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14);
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <HAL_ADC_ConvCpltCallback+0x54>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d11c      	bne.n	8001bce <HAL_ADC_ConvCpltCallback+0x4a>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 8001b94:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <HAL_ADC_ConvCpltCallback+0x54>)
 8001b96:	f002 fc93 	bl	80044c0 <HAL_ADC_GetValue>
 8001b9a:	60f8      	str	r0, [r7, #12]
		Temperature = Temp_Calibration
				* (float) ((float) ADC_Output - *(unsigned short*) (0x1FF1E820))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <HAL_ADC_ConvCpltCallback+0x58>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	; (8001be0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001bb8:	edd3 7a00 	vldr	s15, [r3]
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
				+ 30.0f;
 8001bc0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001bc4:	ee77 7a87 	vadd.f32	s15, s15, s14
		Temperature = Temp_Calibration
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_ADC_ConvCpltCallback+0x60>)
 8001bca:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001bce:	bf00      	nop
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000040 	.word	0x20000040
 8001bdc:	1ff1e820 	.word	0x1ff1e820
 8001be0:	200004c0 	.word	0x200004c0
 8001be4:	200002cc 	.word	0x200002cc

08001be8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d102      	bne.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	701a      	strb	r2, [r3, #0]
	}
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	20000924 	.word	0x20000924
 8001c10:	20000128 	.word	0x20000128
 8001c14:	00000000 	.word	0x00000000

08001c18 <Joint_Traj>:

void Joint_Traj(float *Position, float *Velocity){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	if(!traj_finish){
 8001c22:	4b2f      	ldr	r3, [pc, #188]	; (8001ce0 <Joint_Traj+0xc8>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d14f      	bne.n	8001cca <Joint_Traj+0xb2>
		float traj_t_set[5];
		traj_t_set[0] = t;
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <Joint_Traj+0xcc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	60fb      	str	r3, [r7, #12]
		traj_t_set[1] = t*t;
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <Joint_Traj+0xcc>)
 8001c32:	ed93 7a00 	vldr	s14, [r3]
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <Joint_Traj+0xcc>)
 8001c38:	edd3 7a00 	vldr	s15, [r3]
 8001c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c40:	edc7 7a04 	vstr	s15, [r7, #16]
		traj_t_set[2] = traj_t_set[1]*t;
 8001c44:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <Joint_Traj+0xcc>)
 8001c4a:	edd3 7a00 	vldr	s15, [r3]
 8001c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c52:	edc7 7a05 	vstr	s15, [r7, #20]
		traj_t_set[3] = traj_t_set[2]*t;
 8001c56:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <Joint_Traj+0xcc>)
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c64:	edc7 7a06 	vstr	s15, [r7, #24]
		traj_t_set[4] = traj_t_set[3]*t;
 8001c68:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <Joint_Traj+0xcc>)
 8001c6e:	edd3 7a00 	vldr	s15, [r3]
 8001c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c76:	edc7 7a07 	vstr	s15, [r7, #28]
		/*for loop For 4 Join*/
		TrajFollow(&Traj[0], traj_t_set, Position, Velocity);
 8001c7a:	f107 010c 	add.w	r1, r7, #12
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4819      	ldr	r0, [pc, #100]	; (8001ce8 <Joint_Traj+0xd0>)
 8001c84:	f7fe ff13 	bl	8000aae <TrajFollow>
		/*for loop For 4 Join*/
		t += delta_t;
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <Joint_Traj+0xcc>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c92:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8001cd8 <Joint_Traj+0xc0>
 8001c96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c9a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <Joint_Traj+0xcc>)
 8001ca0:	edc3 7a00 	vstr	s15, [r3]
		if (t > T_Traj){
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <Joint_Traj+0xcc>)
 8001ca6:	ed93 7a00 	vldr	s14, [r3]
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <Joint_Traj+0xd4>)
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb8:	dc00      	bgt.n	8001cbc <Joint_Traj+0xa4>
			traj_finish = 1;
			t = 0;
		}
	}
}
 8001cba:	e006      	b.n	8001cca <Joint_Traj+0xb2>
			traj_finish = 1;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <Joint_Traj+0xc8>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
			t = 0;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <Joint_Traj+0xcc>)
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	f3af 8000 	nop.w
 8001cd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cdc:	3f50624d 	.word	0x3f50624d
 8001ce0:	2000002c 	.word	0x2000002c
 8001ce4:	20000120 	.word	0x20000120
 8001ce8:	2000036c 	.word	0x2000036c
 8001cec:	200004c4 	.word	0x200004c4

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <Error_Handler+0x8>
	...

08001cfc <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <MX_SPI3_Init+0xac>)
 8001d04:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d06:	4b27      	ldr	r3, [pc, #156]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d0c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0e:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d14:	4b23      	ldr	r3, [pc, #140]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d16:	2207      	movs	r2, #7
 8001d18:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d26:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d28:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d2e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d30:	4b1c      	ldr	r3, [pc, #112]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d32:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d3e:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d4c:	221d      	movs	r2, #29
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d58:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d8e:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_SPI3_Init+0xa8>)
 8001d90:	f009 fb94 	bl	800b4bc <HAL_SPI_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001d9a:	f7ff ffa9 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200004d0 	.word	0x200004d0
 8001da8:	40003c00 	.word	0x40003c00

08001dac <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001db0:	4b27      	ldr	r3, [pc, #156]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001db2:	4a28      	ldr	r2, [pc, #160]	; (8001e54 <MX_SPI4_Init+0xa8>)
 8001db4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001db8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001dbc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001dd8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001ddc:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001de0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001de4:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dec:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e04:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e2a:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <MX_SPI4_Init+0xa4>)
 8001e3e:	f009 fb3d 	bl	800b4bc <HAL_SPI_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8001e48:	f7ff ff52 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000558 	.word	0x20000558
 8001e54:	40013400 	.word	0x40013400

08001e58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b0b8      	sub	sp, #224	; 0xe0
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e70:	f107 0318 	add.w	r3, r7, #24
 8001e74:	22b4      	movs	r2, #180	; 0xb4
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f00d fcdb 	bl	800f834 <memset>
  if(spiHandle->Instance==SPI3)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a4b      	ldr	r2, [pc, #300]	; (8001fb0 <HAL_SPI_MspInit+0x158>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d156      	bne.n	8001f36 <HAL_SPI_MspInit+0xde>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001e88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8001e8e:	2319      	movs	r3, #25
 8001e90:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 8001e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e96:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eac:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001eb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb8:	f107 0318 	add.w	r3, r7, #24
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f007 fa6b 	bl	8009398 <HAL_RCCEx_PeriphCLKConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8001ec8:	f7ff ff12 	bl	8001cf0 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ecc:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed2:	4a38      	ldr	r2, [pc, #224]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ed8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001edc:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001ede:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eea:	4b32      	ldr	r3, [pc, #200]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	4a30      	ldr	r2, [pc, #192]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001ef2:	f043 0304 	orr.w	r3, r3, #4
 8001ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efa:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f22:	2306      	movs	r3, #6
 8001f24:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4822      	ldr	r0, [pc, #136]	; (8001fb8 <HAL_SPI_MspInit+0x160>)
 8001f30:	f005 ffbc 	bl	8007eac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001f34:	e038      	b.n	8001fa8 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_SPI_MspInit+0x164>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d133      	bne.n	8001fa8 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f46:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f4c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f64:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_SPI_MspInit+0x15c>)
 8001f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	60bb      	str	r3, [r7, #8]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8001f7c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f84:	2302      	movs	r3, #2
 8001f86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001f96:	2305      	movs	r3, #5
 8001f98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <HAL_SPI_MspInit+0x168>)
 8001fa4:	f005 ff82 	bl	8007eac <HAL_GPIO_Init>
}
 8001fa8:	bf00      	nop
 8001faa:	37e0      	adds	r7, #224	; 0xe0
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40003c00 	.word	0x40003c00
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58020800 	.word	0x58020800
 8001fbc:	40013400 	.word	0x40013400
 8001fc0:	58021000 	.word	0x58021000

08001fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_MspInit+0x30>)
 8001fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fd0:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <HAL_MspInit+0x30>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_MspInit+0x30>)
 8001fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	58024400 	.word	0x58024400

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002008:	e7fe      	b.n	8002008 <MemManage_Handler+0x4>

0800200a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200e:	e7fe      	b.n	800200e <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	e7fe      	b.n	8002014 <UsageFault_Handler+0x4>

08002016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002044:	f001 fbfe 	bl	8003844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002050:	4802      	ldr	r0, [pc, #8]	; (800205c <DMA1_Stream0_IRQHandler+0x10>)
 8002052:	f004 fc19 	bl	8006888 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000b28 	.word	0x20000b28

08002060 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <ADC3_IRQHandler+0x10>)
 8002066:	f002 fa39 	bl	80044dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000040 	.word	0x20000040

08002074 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <TIM23_IRQHandler+0x10>)
 800207a:	f00a fe2b 	bl	800ccd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000924 	.word	0x20000924

08002088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800208c:	4b34      	ldr	r3, [pc, #208]	; (8002160 <SystemInit+0xd8>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	4a33      	ldr	r2, [pc, #204]	; (8002160 <SystemInit+0xd8>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800209c:	4b31      	ldr	r3, [pc, #196]	; (8002164 <SystemInit+0xdc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	2b06      	cmp	r3, #6
 80020a6:	d807      	bhi.n	80020b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020a8:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <SystemInit+0xdc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 030f 	bic.w	r3, r3, #15
 80020b0:	4a2c      	ldr	r2, [pc, #176]	; (8002164 <SystemInit+0xdc>)
 80020b2:	f043 0307 	orr.w	r3, r3, #7
 80020b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <SystemInit+0xe0>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <SystemInit+0xe0>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <SystemInit+0xe0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <SystemInit+0xe0>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4926      	ldr	r1, [pc, #152]	; (8002168 <SystemInit+0xe0>)
 80020d0:	4b26      	ldr	r3, [pc, #152]	; (800216c <SystemInit+0xe4>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <SystemInit+0xdc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <SystemInit+0xdc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 030f 	bic.w	r3, r3, #15
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <SystemInit+0xdc>)
 80020ec:	f043 0307 	orr.w	r3, r3, #7
 80020f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <SystemInit+0xe0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <SystemInit+0xe0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <SystemInit+0xe0>)
 8002100:	2200      	movs	r2, #0
 8002102:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <SystemInit+0xe0>)
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <SystemInit+0xe8>)
 8002108:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <SystemInit+0xe0>)
 800210c:	4a19      	ldr	r2, [pc, #100]	; (8002174 <SystemInit+0xec>)
 800210e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002110:	4b15      	ldr	r3, [pc, #84]	; (8002168 <SystemInit+0xe0>)
 8002112:	4a19      	ldr	r2, [pc, #100]	; (8002178 <SystemInit+0xf0>)
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002116:	4b14      	ldr	r3, [pc, #80]	; (8002168 <SystemInit+0xe0>)
 8002118:	2200      	movs	r2, #0
 800211a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <SystemInit+0xe0>)
 800211e:	4a16      	ldr	r2, [pc, #88]	; (8002178 <SystemInit+0xf0>)
 8002120:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <SystemInit+0xe0>)
 8002124:	2200      	movs	r2, #0
 8002126:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <SystemInit+0xe0>)
 800212a:	4a13      	ldr	r2, [pc, #76]	; (8002178 <SystemInit+0xf0>)
 800212c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <SystemInit+0xe0>)
 8002130:	2200      	movs	r2, #0
 8002132:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <SystemInit+0xe0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0b      	ldr	r2, [pc, #44]	; (8002168 <SystemInit+0xe0>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <SystemInit+0xe0>)
 8002142:	2200      	movs	r2, #0
 8002144:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002146:	4b0d      	ldr	r3, [pc, #52]	; (800217c <SystemInit+0xf4>)
 8002148:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800214c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <SystemInit+0xd8>)
 8002150:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002154:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00
 8002164:	52002000 	.word	0x52002000
 8002168:	58024400 	.word	0x58024400
 800216c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002170:	02020200 	.word	0x02020200
 8002174:	01ff0000 	.word	0x01ff0000
 8002178:	01010280 	.word	0x01010280
 800217c:	52004000 	.word	0x52004000

08002180 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b098      	sub	sp, #96	; 0x60
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002186:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	605a      	str	r2, [r3, #4]
 8002190:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002192:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]
 80021a2:	615a      	str	r2, [r3, #20]
 80021a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	2234      	movs	r2, #52	; 0x34
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00d fb41 	bl	800f834 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021b2:	4b39      	ldr	r3, [pc, #228]	; (8002298 <MX_TIM1_Init+0x118>)
 80021b4:	4a39      	ldr	r2, [pc, #228]	; (800229c <MX_TIM1_Init+0x11c>)
 80021b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021b8:	4b37      	ldr	r3, [pc, #220]	; (8002298 <MX_TIM1_Init+0x118>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021be:	4b36      	ldr	r3, [pc, #216]	; (8002298 <MX_TIM1_Init+0x118>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021c4:	4b34      	ldr	r3, [pc, #208]	; (8002298 <MX_TIM1_Init+0x118>)
 80021c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <MX_TIM1_Init+0x118>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <MX_TIM1_Init+0x118>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021d8:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <MX_TIM1_Init+0x118>)
 80021da:	2200      	movs	r2, #0
 80021dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80021de:	482e      	ldr	r0, [pc, #184]	; (8002298 <MX_TIM1_Init+0x118>)
 80021e0:	f00a fb08 	bl	800c7f4 <HAL_TIM_OC_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80021ea:	f7ff fd81 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021f2:	2300      	movs	r3, #0
 80021f4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021fe:	4619      	mov	r1, r3
 8002200:	4825      	ldr	r0, [pc, #148]	; (8002298 <MX_TIM1_Init+0x118>)
 8002202:	f00b fd75 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800220c:	f7ff fd70 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002210:	2300      	movs	r3, #0
 8002212:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002218:	2300      	movs	r3, #0
 800221a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800221c:	2300      	movs	r3, #0
 800221e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002228:	2300      	movs	r3, #0
 800222a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800222c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002230:	2200      	movs	r2, #0
 8002232:	4619      	mov	r1, r3
 8002234:	4818      	ldr	r0, [pc, #96]	; (8002298 <MX_TIM1_Init+0x118>)
 8002236:	f00a fe6d 	bl	800cf14 <HAL_TIM_OC_ConfigChannel>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002240:	f7ff fd56 	bl	8001cf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002244:	2300      	movs	r3, #0
 8002246:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800225c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002266:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800226a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	4619      	mov	r1, r3
 8002278:	4807      	ldr	r0, [pc, #28]	; (8002298 <MX_TIM1_Init+0x118>)
 800227a:	f00b fdd5 	bl	800de28 <HAL_TIMEx_ConfigBreakDeadTime>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002284:	f7ff fd34 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002288:	4803      	ldr	r0, [pc, #12]	; (8002298 <MX_TIM1_Init+0x118>)
 800228a:	f000 ff41 	bl	8003110 <HAL_TIM_MspPostInit>

}
 800228e:	bf00      	nop
 8002290:	3760      	adds	r7, #96	; 0x60
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2000088c 	.word	0x2000088c
 800229c:	40010000 	.word	0x40010000

080022a0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08c      	sub	sp, #48	; 0x30
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	2224      	movs	r2, #36	; 0x24
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f00d fac0 	bl	800f834 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b4:	463b      	mov	r3, r7
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022be:	4b21      	ldr	r3, [pc, #132]	; (8002344 <MX_TIM2_Init+0xa4>)
 80022c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <MX_TIM2_Init+0xa4>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <MX_TIM2_Init+0xa4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16383;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <MX_TIM2_Init+0xa4>)
 80022d4:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80022d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <MX_TIM2_Init+0xa4>)
 80022dc:	2200      	movs	r2, #0
 80022de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022e0:	4b18      	ldr	r3, [pc, #96]	; (8002344 <MX_TIM2_Init+0xa4>)
 80022e2:	2280      	movs	r2, #128	; 0x80
 80022e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022e6:	2303      	movs	r3, #3
 80022e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022ee:	2301      	movs	r3, #1
 80022f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022fe:	2301      	movs	r3, #1
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	4619      	mov	r1, r3
 8002310:	480c      	ldr	r0, [pc, #48]	; (8002344 <MX_TIM2_Init+0xa4>)
 8002312:	f00a fc39 	bl	800cb88 <HAL_TIM_Encoder_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800231c:	f7ff fce8 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002320:	2300      	movs	r3, #0
 8002322:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002328:	463b      	mov	r3, r7
 800232a:	4619      	mov	r1, r3
 800232c:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_TIM2_Init+0xa4>)
 800232e:	f00b fcdf 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002338:	f7ff fcda 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800233c:	bf00      	nop
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200008d8 	.word	0x200008d8

08002348 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	; 0x38
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002368:	463b      	mov	r3, r7
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800237a:	4b2d      	ldr	r3, [pc, #180]	; (8002430 <MX_TIM3_Init+0xe8>)
 800237c:	4a2d      	ldr	r2, [pc, #180]	; (8002434 <MX_TIM3_Init+0xec>)
 800237e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002380:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <MX_TIM3_Init+0xe8>)
 8002382:	2200      	movs	r2, #0
 8002384:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002386:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <MX_TIM3_Init+0xe8>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800238c:	4b28      	ldr	r3, [pc, #160]	; (8002430 <MX_TIM3_Init+0xe8>)
 800238e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002392:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002394:	4b26      	ldr	r3, [pc, #152]	; (8002430 <MX_TIM3_Init+0xe8>)
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239a:	4b25      	ldr	r3, [pc, #148]	; (8002430 <MX_TIM3_Init+0xe8>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023a0:	4823      	ldr	r0, [pc, #140]	; (8002430 <MX_TIM3_Init+0xe8>)
 80023a2:	f00a f94a 	bl	800c63a <HAL_TIM_Base_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80023ac:	f7ff fca0 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ba:	4619      	mov	r1, r3
 80023bc:	481c      	ldr	r0, [pc, #112]	; (8002430 <MX_TIM3_Init+0xe8>)
 80023be:	f00a ff37 	bl	800d230 <HAL_TIM_ConfigClockSource>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80023c8:	f7ff fc92 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023cc:	4818      	ldr	r0, [pc, #96]	; (8002430 <MX_TIM3_Init+0xe8>)
 80023ce:	f00a fa68 	bl	800c8a2 <HAL_TIM_PWM_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80023d8:	f7ff fc8a 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023e4:	f107 031c 	add.w	r3, r7, #28
 80023e8:	4619      	mov	r1, r3
 80023ea:	4811      	ldr	r0, [pc, #68]	; (8002430 <MX_TIM3_Init+0xe8>)
 80023ec:	f00b fc80 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80023f6:	f7ff fc7b 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023fa:	2360      	movs	r3, #96	; 0x60
 80023fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800240a:	463b      	mov	r3, r7
 800240c:	2200      	movs	r2, #0
 800240e:	4619      	mov	r1, r3
 8002410:	4807      	ldr	r0, [pc, #28]	; (8002430 <MX_TIM3_Init+0xe8>)
 8002412:	f00a fdf9 	bl	800d008 <HAL_TIM_PWM_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800241c:	f7ff fc68 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002420:	4803      	ldr	r0, [pc, #12]	; (8002430 <MX_TIM3_Init+0xe8>)
 8002422:	f000 fe75 	bl	8003110 <HAL_TIM_MspPostInit>

}
 8002426:	bf00      	nop
 8002428:	3738      	adds	r7, #56	; 0x38
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200007a8 	.word	0x200007a8
 8002434:	40000400 	.word	0x40000400

08002438 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
 800243c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800243e:	f107 030c 	add.w	r3, r7, #12
 8002442:	2224      	movs	r2, #36	; 0x24
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f00d f9f4 	bl	800f834 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800244c:	463b      	mov	r3, r7
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002456:	4b21      	ldr	r3, [pc, #132]	; (80024dc <MX_TIM4_Init+0xa4>)
 8002458:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <MX_TIM4_Init+0xa8>)
 800245a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800245c:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <MX_TIM4_Init+0xa4>)
 800245e:	2200      	movs	r2, #0
 8002460:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <MX_TIM4_Init+0xa4>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8002468:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <MX_TIM4_Init+0xa4>)
 800246a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800246e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <MX_TIM4_Init+0xa4>)
 8002472:	2200      	movs	r2, #0
 8002474:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002476:	4b19      	ldr	r3, [pc, #100]	; (80024dc <MX_TIM4_Init+0xa4>)
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800247c:	2303      	movs	r3, #3
 800247e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002484:	2301      	movs	r3, #1
 8002486:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002494:	2301      	movs	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002498:	2300      	movs	r3, #0
 800249a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024a0:	f107 030c 	add.w	r3, r7, #12
 80024a4:	4619      	mov	r1, r3
 80024a6:	480d      	ldr	r0, [pc, #52]	; (80024dc <MX_TIM4_Init+0xa4>)
 80024a8:	f00a fb6e 	bl	800cb88 <HAL_TIM_Encoder_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80024b2:	f7ff fc1d 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024be:	463b      	mov	r3, r7
 80024c0:	4619      	mov	r1, r3
 80024c2:	4806      	ldr	r0, [pc, #24]	; (80024dc <MX_TIM4_Init+0xa4>)
 80024c4:	f00b fc14 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80024ce:	f7ff fc0f 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024d2:	bf00      	nop
 80024d4:	3730      	adds	r7, #48	; 0x30
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000678 	.word	0x20000678
 80024e0:	40000800 	.word	0x40000800

080024e4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08c      	sub	sp, #48	; 0x30
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024ea:	f107 030c 	add.w	r3, r7, #12
 80024ee:	2224      	movs	r2, #36	; 0x24
 80024f0:	2100      	movs	r1, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	f00d f99e 	bl	800f834 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	463b      	mov	r3, r7
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002502:	4b21      	ldr	r3, [pc, #132]	; (8002588 <MX_TIM5_Init+0xa4>)
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <MX_TIM5_Init+0xa8>)
 8002506:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002508:	4b1f      	ldr	r3, [pc, #124]	; (8002588 <MX_TIM5_Init+0xa4>)
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	4b1e      	ldr	r3, [pc, #120]	; (8002588 <MX_TIM5_Init+0xa4>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 16383;
 8002514:	4b1c      	ldr	r3, [pc, #112]	; (8002588 <MX_TIM5_Init+0xa4>)
 8002516:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800251a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251c:	4b1a      	ldr	r3, [pc, #104]	; (8002588 <MX_TIM5_Init+0xa4>)
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002522:	4b19      	ldr	r3, [pc, #100]	; (8002588 <MX_TIM5_Init+0xa4>)
 8002524:	2280      	movs	r2, #128	; 0x80
 8002526:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002528:	2303      	movs	r3, #3
 800252a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800252c:	2300      	movs	r3, #0
 800252e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002530:	2301      	movs	r3, #1
 8002532:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800253c:	2300      	movs	r3, #0
 800253e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002540:	2301      	movs	r3, #1
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002544:	2300      	movs	r3, #0
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	4619      	mov	r1, r3
 8002552:	480d      	ldr	r0, [pc, #52]	; (8002588 <MX_TIM5_Init+0xa4>)
 8002554:	f00a fb18 	bl	800cb88 <HAL_TIM_Encoder_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800255e:	f7ff fbc7 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800256a:	463b      	mov	r3, r7
 800256c:	4619      	mov	r1, r3
 800256e:	4806      	ldr	r0, [pc, #24]	; (8002588 <MX_TIM5_Init+0xa4>)
 8002570:	f00b fbbe 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800257a:	f7ff fbb9 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800257e:	bf00      	nop
 8002580:	3730      	adds	r7, #48	; 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000075c 	.word	0x2000075c
 800258c:	40000c00 	.word	0x40000c00

08002590 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025a0:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <MX_TIM6_Init+0x68>)
 80025a2:	4a16      	ldr	r2, [pc, #88]	; (80025fc <MX_TIM6_Init+0x6c>)
 80025a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <MX_TIM6_Init+0x68>)
 80025a8:	f44f 7289 	mov.w	r2, #274	; 0x112
 80025ac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ae:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <MX_TIM6_Init+0x68>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80025b4:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <MX_TIM6_Init+0x68>)
 80025b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_TIM6_Init+0x68>)
 80025be:	2200      	movs	r2, #0
 80025c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025c2:	480d      	ldr	r0, [pc, #52]	; (80025f8 <MX_TIM6_Init+0x68>)
 80025c4:	f00a f839 	bl	800c63a <HAL_TIM_Base_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80025ce:	f7ff fb8f 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d2:	2300      	movs	r3, #0
 80025d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	4619      	mov	r1, r3
 80025de:	4806      	ldr	r0, [pc, #24]	; (80025f8 <MX_TIM6_Init+0x68>)
 80025e0:	f00b fb86 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80025ea:	f7ff fb81 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000840 	.word	0x20000840
 80025fc:	40001000 	.word	0x40001000

08002600 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	2224      	movs	r2, #36	; 0x24
 800260c:	2100      	movs	r1, #0
 800260e:	4618      	mov	r0, r3
 8002610:	f00d f910 	bl	800f834 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002614:	463b      	mov	r3, r7
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <MX_TIM8_Init+0xac>)
 8002620:	4a23      	ldr	r2, [pc, #140]	; (80026b0 <MX_TIM8_Init+0xb0>)
 8002622:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <MX_TIM8_Init+0xac>)
 8002626:	2200      	movs	r2, #0
 8002628:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <MX_TIM8_Init+0xac>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_TIM8_Init+0xac>)
 8002632:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002636:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <MX_TIM8_Init+0xac>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <MX_TIM8_Init+0xac>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_TIM8_Init+0xac>)
 8002646:	2280      	movs	r2, #128	; 0x80
 8002648:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800264a:	2303      	movs	r3, #3
 800264c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002652:	2301      	movs	r3, #1
 8002654:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002662:	2301      	movs	r3, #1
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002666:	2300      	movs	r3, #0
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800266e:	f107 030c 	add.w	r3, r7, #12
 8002672:	4619      	mov	r1, r3
 8002674:	480d      	ldr	r0, [pc, #52]	; (80026ac <MX_TIM8_Init+0xac>)
 8002676:	f00a fa87 	bl	800cb88 <HAL_TIM_Encoder_Init>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002680:	f7ff fb36 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002690:	463b      	mov	r3, r7
 8002692:	4619      	mov	r1, r3
 8002694:	4805      	ldr	r0, [pc, #20]	; (80026ac <MX_TIM8_Init+0xac>)
 8002696:	f00b fb2b 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80026a0:	f7ff fb26 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80026a4:	bf00      	nop
 80026a6:	3730      	adds	r7, #48	; 0x30
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	2000062c 	.word	0x2000062c
 80026b0:	40010400 	.word	0x40010400

080026b4 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	611a      	str	r2, [r3, #16]
 80026c8:	615a      	str	r2, [r3, #20]
 80026ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <MX_TIM13_Init+0x98>)
 80026ce:	4a20      	ldr	r2, [pc, #128]	; (8002750 <MX_TIM13_Init+0x9c>)
 80026d0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 80026d2:	4b1e      	ldr	r3, [pc, #120]	; (800274c <MX_TIM13_Init+0x98>)
 80026d4:	f240 2225 	movw	r2, #549	; 0x225
 80026d8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <MX_TIM13_Init+0x98>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MX_TIM13_Init+0x98>)
 80026e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80026e6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e8:	4b18      	ldr	r3, [pc, #96]	; (800274c <MX_TIM13_Init+0x98>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ee:	4b17      	ldr	r3, [pc, #92]	; (800274c <MX_TIM13_Init+0x98>)
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80026f4:	4815      	ldr	r0, [pc, #84]	; (800274c <MX_TIM13_Init+0x98>)
 80026f6:	f009 ffa0 	bl	800c63a <HAL_TIM_Base_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8002700:	f7ff faf6 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8002704:	4811      	ldr	r0, [pc, #68]	; (800274c <MX_TIM13_Init+0x98>)
 8002706:	f00a f8cc 	bl	800c8a2 <HAL_TIM_PWM_Init>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8002710:	f7ff faee 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002714:	2360      	movs	r3, #96	; 0x60
 8002716:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8002718:	f240 13f3 	movw	r3, #499	; 0x1f3
 800271c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002726:	1d3b      	adds	r3, r7, #4
 8002728:	2200      	movs	r2, #0
 800272a:	4619      	mov	r1, r3
 800272c:	4807      	ldr	r0, [pc, #28]	; (800274c <MX_TIM13_Init+0x98>)
 800272e:	f00a fc6b 	bl	800d008 <HAL_TIM_PWM_ConfigChannel>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8002738:	f7ff fada 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800273c:	4803      	ldr	r0, [pc, #12]	; (800274c <MX_TIM13_Init+0x98>)
 800273e:	f000 fce7 	bl	8003110 <HAL_TIM_MspPostInit>

}
 8002742:	bf00      	nop
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	200007f4 	.word	0x200007f4
 8002750:	40001c00 	.word	0x40001c00

08002754 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
 8002768:	615a      	str	r2, [r3, #20]
 800276a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <MX_TIM14_Init+0x98>)
 800276e:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <MX_TIM14_Init+0x9c>)
 8002770:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <MX_TIM14_Init+0x98>)
 8002774:	f240 2225 	movw	r2, #549	; 0x225
 8002778:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277a:	4b1c      	ldr	r3, [pc, #112]	; (80027ec <MX_TIM14_Init+0x98>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8002780:	4b1a      	ldr	r3, [pc, #104]	; (80027ec <MX_TIM14_Init+0x98>)
 8002782:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002786:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002788:	4b18      	ldr	r3, [pc, #96]	; (80027ec <MX_TIM14_Init+0x98>)
 800278a:	2200      	movs	r2, #0
 800278c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800278e:	4b17      	ldr	r3, [pc, #92]	; (80027ec <MX_TIM14_Init+0x98>)
 8002790:	2280      	movs	r2, #128	; 0x80
 8002792:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002794:	4815      	ldr	r0, [pc, #84]	; (80027ec <MX_TIM14_Init+0x98>)
 8002796:	f009 ff50 	bl	800c63a <HAL_TIM_Base_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d001      	beq.n	80027a4 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80027a0:	f7ff faa6 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80027a4:	4811      	ldr	r0, [pc, #68]	; (80027ec <MX_TIM14_Init+0x98>)
 80027a6:	f00a f87c 	bl	800c8a2 <HAL_TIM_PWM_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80027b0:	f7ff fa9e 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027b4:	2360      	movs	r3, #96	; 0x60
 80027b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80027b8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80027bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	2200      	movs	r2, #0
 80027ca:	4619      	mov	r1, r3
 80027cc:	4807      	ldr	r0, [pc, #28]	; (80027ec <MX_TIM14_Init+0x98>)
 80027ce:	f00a fc1b 	bl	800d008 <HAL_TIM_PWM_ConfigChannel>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80027d8:	f7ff fa8a 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80027dc:	4803      	ldr	r0, [pc, #12]	; (80027ec <MX_TIM14_Init+0x98>)
 80027de:	f000 fc97 	bl	8003110 <HAL_TIM_MspPostInit>

}
 80027e2:	bf00      	nop
 80027e4:	3720      	adds	r7, #32
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000970 	.word	0x20000970
 80027f0:	40002000 	.word	0x40002000

080027f4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b098      	sub	sp, #96	; 0x60
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	605a      	str	r2, [r3, #4]
 8002804:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002806:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
 8002814:	611a      	str	r2, [r3, #16]
 8002816:	615a      	str	r2, [r3, #20]
 8002818:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2234      	movs	r2, #52	; 0x34
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f00d f807 	bl	800f834 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <MX_TIM15_Init+0x108>)
 8002828:	4a35      	ldr	r2, [pc, #212]	; (8002900 <MX_TIM15_Init+0x10c>)
 800282a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 800282c:	4b33      	ldr	r3, [pc, #204]	; (80028fc <MX_TIM15_Init+0x108>)
 800282e:	f240 2225 	movw	r2, #549	; 0x225
 8002832:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	4b31      	ldr	r3, [pc, #196]	; (80028fc <MX_TIM15_Init+0x108>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 800283a:	4b30      	ldr	r3, [pc, #192]	; (80028fc <MX_TIM15_Init+0x108>)
 800283c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002840:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002842:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <MX_TIM15_Init+0x108>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002848:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <MX_TIM15_Init+0x108>)
 800284a:	2200      	movs	r2, #0
 800284c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800284e:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <MX_TIM15_Init+0x108>)
 8002850:	2280      	movs	r2, #128	; 0x80
 8002852:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002854:	4829      	ldr	r0, [pc, #164]	; (80028fc <MX_TIM15_Init+0x108>)
 8002856:	f00a f824 	bl	800c8a2 <HAL_TIM_PWM_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8002860:	f7ff fa46 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002864:	2300      	movs	r3, #0
 8002866:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800286c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002870:	4619      	mov	r1, r3
 8002872:	4822      	ldr	r0, [pc, #136]	; (80028fc <MX_TIM15_Init+0x108>)
 8002874:	f00b fa3c 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 800287e:	f7ff fa37 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002882:	2360      	movs	r3, #96	; 0x60
 8002884:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800288a:	2300      	movs	r3, #0
 800288c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800288e:	2300      	movs	r3, #0
 8002890:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002896:	2300      	movs	r3, #0
 8002898:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800289e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028a2:	2200      	movs	r2, #0
 80028a4:	4619      	mov	r1, r3
 80028a6:	4815      	ldr	r0, [pc, #84]	; (80028fc <MX_TIM15_Init+0x108>)
 80028a8:	f00a fbae 	bl	800d008 <HAL_TIM_PWM_ConfigChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80028b2:	f7ff fa1d 	bl	8001cf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80028d8:	1d3b      	adds	r3, r7, #4
 80028da:	4619      	mov	r1, r3
 80028dc:	4807      	ldr	r0, [pc, #28]	; (80028fc <MX_TIM15_Init+0x108>)
 80028de:	f00b faa3 	bl	800de28 <HAL_TIMEx_ConfigBreakDeadTime>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80028e8:	f7ff fa02 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <MX_TIM15_Init+0x108>)
 80028ee:	f000 fc0f 	bl	8003110 <HAL_TIM_MspPostInit>

}
 80028f2:	bf00      	nop
 80028f4:	3760      	adds	r7, #96	; 0x60
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200006c4 	.word	0x200006c4
 8002900:	40014000 	.word	0x40014000

08002904 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b094      	sub	sp, #80	; 0x50
 8002908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800290a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	615a      	str	r2, [r3, #20]
 800291c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800291e:	463b      	mov	r3, r7
 8002920:	2234      	movs	r2, #52	; 0x34
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f00c ff85 	bl	800f834 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800292a:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <MX_TIM16_Init+0xf0>)
 800292c:	4a32      	ldr	r2, [pc, #200]	; (80029f8 <MX_TIM16_Init+0xf4>)
 800292e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8002930:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <MX_TIM16_Init+0xf0>)
 8002932:	f240 2225 	movw	r2, #549	; 0x225
 8002936:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002938:	4b2e      	ldr	r3, [pc, #184]	; (80029f4 <MX_TIM16_Init+0xf0>)
 800293a:	2200      	movs	r2, #0
 800293c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <MX_TIM16_Init+0xf0>)
 8002940:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002944:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <MX_TIM16_Init+0xf0>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800294c:	4b29      	ldr	r3, [pc, #164]	; (80029f4 <MX_TIM16_Init+0xf0>)
 800294e:	2200      	movs	r2, #0
 8002950:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002952:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <MX_TIM16_Init+0xf0>)
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002958:	4826      	ldr	r0, [pc, #152]	; (80029f4 <MX_TIM16_Init+0xf0>)
 800295a:	f009 fe6e 	bl	800c63a <HAL_TIM_Base_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8002964:	f7ff f9c4 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002968:	4822      	ldr	r0, [pc, #136]	; (80029f4 <MX_TIM16_Init+0xf0>)
 800296a:	f009 ff9a 	bl	800c8a2 <HAL_TIM_PWM_Init>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8002974:	f7ff f9bc 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002978:	2360      	movs	r3, #96	; 0x60
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 800297c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002980:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002982:	2300      	movs	r3, #0
 8002984:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002986:	2300      	movs	r3, #0
 8002988:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800298a:	2300      	movs	r3, #0
 800298c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800299a:	2200      	movs	r2, #0
 800299c:	4619      	mov	r1, r3
 800299e:	4815      	ldr	r0, [pc, #84]	; (80029f4 <MX_TIM16_Init+0xf0>)
 80029a0:	f00a fb32 	bl	800d008 <HAL_TIM_PWM_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 80029aa:	f7ff f9a1 	bl	8001cf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80029d0:	463b      	mov	r3, r7
 80029d2:	4619      	mov	r1, r3
 80029d4:	4807      	ldr	r0, [pc, #28]	; (80029f4 <MX_TIM16_Init+0xf0>)
 80029d6:	f00b fa27 	bl	800de28 <HAL_TIMEx_ConfigBreakDeadTime>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 80029e0:	f7ff f986 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80029e4:	4803      	ldr	r0, [pc, #12]	; (80029f4 <MX_TIM16_Init+0xf0>)
 80029e6:	f000 fb93 	bl	8003110 <HAL_TIM_MspPostInit>

}
 80029ea:	bf00      	nop
 80029ec:	3750      	adds	r7, #80	; 0x50
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200009bc 	.word	0x200009bc
 80029f8:	40014400 	.word	0x40014400

080029fc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b094      	sub	sp, #80	; 0x50
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	605a      	str	r2, [r3, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
 8002a0e:	60da      	str	r2, [r3, #12]
 8002a10:	611a      	str	r2, [r3, #16]
 8002a12:	615a      	str	r2, [r3, #20]
 8002a14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a16:	463b      	mov	r3, r7
 8002a18:	2234      	movs	r2, #52	; 0x34
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f00c ff09 	bl	800f834 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002a22:	4b32      	ldr	r3, [pc, #200]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a24:	4a32      	ldr	r2, [pc, #200]	; (8002af0 <MX_TIM17_Init+0xf4>)
 8002a26:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a2a:	f240 2225 	movw	r2, #549	; 0x225
 8002a2e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a30:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8002a36:	4b2d      	ldr	r3, [pc, #180]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a3c:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a3e:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a44:	4b29      	ldr	r3, [pc, #164]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a50:	4826      	ldr	r0, [pc, #152]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a52:	f009 fdf2 	bl	800c63a <HAL_TIM_Base_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8002a5c:	f7ff f948 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002a60:	4822      	ldr	r0, [pc, #136]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a62:	f009 ff1e 	bl	800c8a2 <HAL_TIM_PWM_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8002a6c:	f7ff f940 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a70:	2360      	movs	r3, #96	; 0x60
 8002a72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8002a74:	f240 13f3 	movw	r3, #499	; 0x1f3
 8002a78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a92:	2200      	movs	r2, #0
 8002a94:	4619      	mov	r1, r3
 8002a96:	4815      	ldr	r0, [pc, #84]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002a98:	f00a fab6 	bl	800d008 <HAL_TIM_PWM_ConfigChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8002aa2:	f7ff f925 	bl	8001cf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002abe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002ac8:	463b      	mov	r3, r7
 8002aca:	4619      	mov	r1, r3
 8002acc:	4807      	ldr	r0, [pc, #28]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002ace:	f00b f9ab 	bl	800de28 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8002ad8:	f7ff f90a 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002adc:	4803      	ldr	r0, [pc, #12]	; (8002aec <MX_TIM17_Init+0xf0>)
 8002ade:	f000 fb17 	bl	8003110 <HAL_TIM_MspPostInit>

}
 8002ae2:	bf00      	nop
 8002ae4:	3750      	adds	r7, #80	; 0x50
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000710 	.word	0x20000710
 8002af0:	40014800 	.word	0x40014800

08002af4 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8002b12:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <MX_TIM23_Init+0x98>)
 8002b14:	4a1e      	ldr	r2, [pc, #120]	; (8002b90 <MX_TIM23_Init+0x9c>)
 8002b16:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8002b18:	4b1c      	ldr	r3, [pc, #112]	; (8002b8c <MX_TIM23_Init+0x98>)
 8002b1a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002b1e:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <MX_TIM23_Init+0x98>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1000-1;
 8002b26:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <MX_TIM23_Init+0x98>)
 8002b28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b2c:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b2e:	4b17      	ldr	r3, [pc, #92]	; (8002b8c <MX_TIM23_Init+0x98>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b34:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <MX_TIM23_Init+0x98>)
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8002b3a:	4814      	ldr	r0, [pc, #80]	; (8002b8c <MX_TIM23_Init+0x98>)
 8002b3c:	f009 fd7d 	bl	800c63a <HAL_TIM_Base_Init>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8002b46:	f7ff f8d3 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8002b50:	f107 0310 	add.w	r3, r7, #16
 8002b54:	4619      	mov	r1, r3
 8002b56:	480d      	ldr	r0, [pc, #52]	; (8002b8c <MX_TIM23_Init+0x98>)
 8002b58:	f00a fb6a 	bl	800d230 <HAL_TIM_ConfigClockSource>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8002b62:	f7ff f8c5 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4806      	ldr	r0, [pc, #24]	; (8002b8c <MX_TIM23_Init+0x98>)
 8002b74:	f00b f8bc 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8002b7e:	f7ff f8b7 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8002b82:	bf00      	nop
 8002b84:	3720      	adds	r7, #32
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000924 	.word	0x20000924
 8002b90:	4000e000 	.word	0x4000e000

08002b94 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b9a:	f107 0310 	add.w	r3, r7, #16
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <MX_TIM24_Init+0x98>)
 8002bb4:	4a1e      	ldr	r2, [pc, #120]	; (8002c30 <MX_TIM24_Init+0x9c>)
 8002bb6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	; (8002c2c <MX_TIM24_Init+0x98>)
 8002bba:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002bbe:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	; (8002c2c <MX_TIM24_Init+0x98>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8002bc6:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <MX_TIM24_Init+0x98>)
 8002bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bcc:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bce:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <MX_TIM24_Init+0x98>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <MX_TIM24_Init+0x98>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8002bda:	4814      	ldr	r0, [pc, #80]	; (8002c2c <MX_TIM24_Init+0x98>)
 8002bdc:	f009 fd2d 	bl	800c63a <HAL_TIM_Base_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8002be6:	f7ff f883 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8002bf0:	f107 0310 	add.w	r3, r7, #16
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	480d      	ldr	r0, [pc, #52]	; (8002c2c <MX_TIM24_Init+0x98>)
 8002bf8:	f00a fb1a 	bl	800d230 <HAL_TIM_ConfigClockSource>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8002c02:	f7ff f875 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8002c0e:	1d3b      	adds	r3, r7, #4
 8002c10:	4619      	mov	r1, r3
 8002c12:	4806      	ldr	r0, [pc, #24]	; (8002c2c <MX_TIM24_Init+0x98>)
 8002c14:	f00b f86c 	bl	800dcf0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8002c1e:	f7ff f867 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200005e0 	.word	0x200005e0
 8002c30:	4000e400 	.word	0x4000e400

08002c34 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(tim_ocHandle->Instance==TIM1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_TIM_OC_MspInit+0x88>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d12e      	bne.n	8002cb4 <HAL_TIM_OC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_TIM_OC_MspInit+0x8c>)
 8002c58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c5c:	4a18      	ldr	r2, [pc, #96]	; (8002cc0 <HAL_TIM_OC_MspInit+0x8c>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002c66:	4b16      	ldr	r3, [pc, #88]	; (8002cc0 <HAL_TIM_OC_MspInit+0x8c>)
 8002c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c74:	4b12      	ldr	r3, [pc, #72]	; (8002cc0 <HAL_TIM_OC_MspInit+0x8c>)
 8002c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7a:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <HAL_TIM_OC_MspInit+0x8c>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c84:	4b0e      	ldr	r3, [pc, #56]	; (8002cc0 <HAL_TIM_OC_MspInit+0x8c>)
 8002c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 8002c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	4619      	mov	r1, r3
 8002cae:	4805      	ldr	r0, [pc, #20]	; (8002cc4 <HAL_TIM_OC_MspInit+0x90>)
 8002cb0:	f005 f8fc 	bl	8007eac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3728      	adds	r7, #40	; 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40010000 	.word	0x40010000
 8002cc0:	58024400 	.word	0x58024400
 8002cc4:	58020000 	.word	0x58020000

08002cc8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b090      	sub	sp, #64	; 0x40
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce8:	d14e      	bne.n	8002d88 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cea:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002cec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cf0:	4a75      	ldr	r2, [pc, #468]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002cf2:	f043 0301 	orr.w	r3, r3, #1
 8002cf6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cfa:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d06:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d08:	4b6f      	ldr	r3, [pc, #444]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0e:	4a6e      	ldr	r2, [pc, #440]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d18:	4b6b      	ldr	r3, [pc, #428]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d26:	4b68      	ldr	r3, [pc, #416]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2c:	4a66      	ldr	r2, [pc, #408]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d36:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	623b      	str	r3, [r7, #32]
 8002d42:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 8002d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d56:	2301      	movs	r3, #1
 8002d58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d5e:	4619      	mov	r1, r3
 8002d60:	485a      	ldr	r0, [pc, #360]	; (8002ecc <HAL_TIM_Encoder_MspInit+0x204>)
 8002d62:	f005 f8a3 	bl	8007eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 8002d66:	2308      	movs	r3, #8
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d76:	2301      	movs	r3, #1
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8002d7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4853      	ldr	r0, [pc, #332]	; (8002ed0 <HAL_TIM_Encoder_MspInit+0x208>)
 8002d82:	f005 f893 	bl	8007eac <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002d86:	e09b      	b.n	8002ec0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM4)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a51      	ldr	r2, [pc, #324]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d12f      	bne.n	8002df2 <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d92:	4b4d      	ldr	r3, [pc, #308]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002d94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d98:	4a4b      	ldr	r2, [pc, #300]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002da2:	4b49      	ldr	r3, [pc, #292]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	61fb      	str	r3, [r7, #28]
 8002dae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002db0:	4b45      	ldr	r3, [pc, #276]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db6:	4a44      	ldr	r2, [pc, #272]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002db8:	f043 0308 	orr.w	r3, r3, #8
 8002dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	61bb      	str	r3, [r7, #24]
 8002dcc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8002dce:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002de0:	2302      	movs	r3, #2
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002de8:	4619      	mov	r1, r3
 8002dea:	483b      	ldr	r0, [pc, #236]	; (8002ed8 <HAL_TIM_Encoder_MspInit+0x210>)
 8002dec:	f005 f85e 	bl	8007eac <HAL_GPIO_Init>
}
 8002df0:	e066      	b.n	8002ec0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM5)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a39      	ldr	r2, [pc, #228]	; (8002edc <HAL_TIM_Encoder_MspInit+0x214>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d12e      	bne.n	8002e5a <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dfc:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002dfe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e02:	4a31      	ldr	r2, [pc, #196]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e0c:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e20:	4a29      	ldr	r2, [pc, #164]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e50:	4619      	mov	r1, r3
 8002e52:	481e      	ldr	r0, [pc, #120]	; (8002ecc <HAL_TIM_Encoder_MspInit+0x204>)
 8002e54:	f005 f82a 	bl	8007eac <HAL_GPIO_Init>
}
 8002e58:	e032      	b.n	8002ec0 <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(tim_encoderHandle->Instance==TIM8)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a20      	ldr	r2, [pc, #128]	; (8002ee0 <HAL_TIM_Encoder_MspInit+0x218>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d12d      	bne.n	8002ec0 <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e6a:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e6c:	f043 0302 	orr.w	r3, r3, #2
 8002e70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e88:	4a0f      	ldr	r2, [pc, #60]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e92:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_TIM_Encoder_MspInit+0x200>)
 8002e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e98:	f003 0304 	and.w	r3, r3, #4
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8002ea0:	23c0      	movs	r3, #192	; 0xc0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002eb8:	4619      	mov	r1, r3
 8002eba:	480a      	ldr	r0, [pc, #40]	; (8002ee4 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002ebc:	f004 fff6 	bl	8007eac <HAL_GPIO_Init>
}
 8002ec0:	bf00      	nop
 8002ec2:	3740      	adds	r7, #64	; 0x40
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	58024400 	.word	0x58024400
 8002ecc:	58020000 	.word	0x58020000
 8002ed0:	58020400 	.word	0x58020400
 8002ed4:	40000800 	.word	0x40000800
 8002ed8:	58020c00 	.word	0x58020c00
 8002edc:	40000c00 	.word	0x40000c00
 8002ee0:	40010400 	.word	0x40010400
 8002ee4:	58020800 	.word	0x58020800

08002ee8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b090      	sub	sp, #64	; 0x40
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a67      	ldr	r2, [pc, #412]	; (80030a4 <HAL_TIM_Base_MspInit+0x1bc>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d12e      	bne.n	8002f68 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f0a:	4b67      	ldr	r3, [pc, #412]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f10:	4a65      	ldr	r2, [pc, #404]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f1a:	4b63      	ldr	r3, [pc, #396]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f26:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	4b5f      	ldr	r3, [pc, #380]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2e:	4a5e      	ldr	r2, [pc, #376]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f38:	4b5b      	ldr	r3, [pc, #364]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 8002f46:	2320      	movs	r3, #32
 8002f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f52:	2300      	movs	r3, #0
 8002f54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f56:	2302      	movs	r3, #2
 8002f58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 8002f5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4852      	ldr	r0, [pc, #328]	; (80030ac <HAL_TIM_Base_MspInit+0x1c4>)
 8002f62:	f004 ffa3 	bl	8007eac <HAL_GPIO_Init>
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8002f66:	e099      	b.n	800309c <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM6)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_TIM_Base_MspInit+0x1c8>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10f      	bne.n	8002f92 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f72:	4b4d      	ldr	r3, [pc, #308]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f78:	4a4b      	ldr	r2, [pc, #300]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f7a:	f043 0310 	orr.w	r3, r3, #16
 8002f7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f82:	4b49      	ldr	r3, [pc, #292]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f88:	f003 0310 	and.w	r3, r3, #16
 8002f8c:	623b      	str	r3, [r7, #32]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002f90:	e084      	b.n	800309c <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM13)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a47      	ldr	r2, [pc, #284]	; (80030b4 <HAL_TIM_Base_MspInit+0x1cc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d10f      	bne.n	8002fbc <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002f9c:	4b42      	ldr	r3, [pc, #264]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002f9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fa2:	4a41      	ldr	r2, [pc, #260]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fac:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002fae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
}
 8002fba:	e06f      	b.n	800309c <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM14)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a3d      	ldr	r2, [pc, #244]	; (80030b8 <HAL_TIM_Base_MspInit+0x1d0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fcc:	4a36      	ldr	r2, [pc, #216]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fd6:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	69bb      	ldr	r3, [r7, #24]
}
 8002fe4:	e05a      	b.n	800309c <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM16)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a34      	ldr	r2, [pc, #208]	; (80030bc <HAL_TIM_Base_MspInit+0x1d4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d10f      	bne.n	8003010 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002ff0:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ff2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ff6:	4a2c      	ldr	r2, [pc, #176]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8003002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	697b      	ldr	r3, [r7, #20]
}
 800300e:	e045      	b.n	800309c <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM17)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a2a      	ldr	r2, [pc, #168]	; (80030c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10f      	bne.n	800303a <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800301a:	4b23      	ldr	r3, [pc, #140]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 800301c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003020:	4a21      	ldr	r2, [pc, #132]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8003022:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003026:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800302a:	4b1f      	ldr	r3, [pc, #124]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 800302c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	693b      	ldr	r3, [r7, #16]
}
 8003038:	e030      	b.n	800309c <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM23)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a21      	ldr	r2, [pc, #132]	; (80030c4 <HAL_TIM_Base_MspInit+0x1dc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d117      	bne.n	8003074 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8003044:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8003046:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800304a:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 800304c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003050:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8003056:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800305a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	20a1      	movs	r0, #161	; 0xa1
 8003068:	f002 fd2b 	bl	8005ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 800306c:	20a1      	movs	r0, #161	; 0xa1
 800306e:	f002 fd42 	bl	8005af6 <HAL_NVIC_EnableIRQ>
}
 8003072:	e013      	b.n	800309c <HAL_TIM_Base_MspInit+0x1b4>
  else if(tim_baseHandle->Instance==TIM24)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <HAL_TIM_Base_MspInit+0x1e0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10e      	bne.n	800309c <HAL_TIM_Base_MspInit+0x1b4>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8003080:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003084:	4a08      	ldr	r2, [pc, #32]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8003086:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800308a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800308e:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_TIM_Base_MspInit+0x1c0>)
 8003090:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
}
 800309c:	bf00      	nop
 800309e:	3740      	adds	r7, #64	; 0x40
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40000400 	.word	0x40000400
 80030a8:	58024400 	.word	0x58024400
 80030ac:	58020400 	.word	0x58020400
 80030b0:	40001000 	.word	0x40001000
 80030b4:	40001c00 	.word	0x40001c00
 80030b8:	40002000 	.word	0x40002000
 80030bc:	40014400 	.word	0x40014400
 80030c0:	40014800 	.word	0x40014800
 80030c4:	4000e000 	.word	0x4000e000
 80030c8:	4000e400 	.word	0x4000e400

080030cc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a0b      	ldr	r2, [pc, #44]	; (8003108 <HAL_TIM_PWM_MspInit+0x3c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <HAL_TIM_PWM_MspInit+0x40>)
 80030e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030e4:	4a09      	ldr	r2, [pc, #36]	; (800310c <HAL_TIM_PWM_MspInit+0x40>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030ee:	4b07      	ldr	r3, [pc, #28]	; (800310c <HAL_TIM_PWM_MspInit+0x40>)
 80030f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40014000 	.word	0x40014000
 800310c:	58024400 	.word	0x58024400

08003110 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08e      	sub	sp, #56	; 0x38
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a83      	ldr	r2, [pc, #524]	; (800333c <HAL_TIM_MspPostInit+0x22c>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d120      	bne.n	8003174 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003132:	4b83      	ldr	r3, [pc, #524]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 8003134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003138:	4a81      	ldr	r2, [pc, #516]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003142:	4b7f      	ldr	r3, [pc, #508]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 8003144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8003150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315e:	2300      	movs	r3, #0
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003162:	2301      	movs	r3, #1
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8003166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800316a:	4619      	mov	r1, r3
 800316c:	4875      	ldr	r0, [pc, #468]	; (8003344 <HAL_TIM_MspPostInit+0x234>)
 800316e:	f004 fe9d 	bl	8007eac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003172:	e0de      	b.n	8003332 <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM3)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a73      	ldr	r2, [pc, #460]	; (8003348 <HAL_TIM_MspPostInit+0x238>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d11f      	bne.n	80031be <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317e:	4b70      	ldr	r3, [pc, #448]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 8003180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003184:	4a6e      	ldr	r2, [pc, #440]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 8003186:	f043 0302 	orr.w	r3, r3, #2
 800318a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800318e:	4b6c      	ldr	r3, [pc, #432]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 8003190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003194:	f003 0302 	and.w	r3, r3, #2
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 800319c:	2310      	movs	r3, #16
 800319e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a0:	2302      	movs	r3, #2
 80031a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2300      	movs	r3, #0
 80031aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031ac:	2302      	movs	r3, #2
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 80031b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b4:	4619      	mov	r1, r3
 80031b6:	4865      	ldr	r0, [pc, #404]	; (800334c <HAL_TIM_MspPostInit+0x23c>)
 80031b8:	f004 fe78 	bl	8007eac <HAL_GPIO_Init>
}
 80031bc:	e0b9      	b.n	8003332 <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM13)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a63      	ldr	r2, [pc, #396]	; (8003350 <HAL_TIM_MspPostInit+0x240>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d11f      	bne.n	8003208 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c8:	4b5d      	ldr	r3, [pc, #372]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 80031ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ce:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031d8:	4b59      	ldr	r3, [pc, #356]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 80031da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	61bb      	str	r3, [r7, #24]
 80031e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP1_Pin;
 80031e6:	2340      	movs	r3, #64	; 0x40
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f2:	2300      	movs	r3, #0
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80031f6:	2309      	movs	r3, #9
 80031f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80031fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fe:	4619      	mov	r1, r3
 8003200:	4850      	ldr	r0, [pc, #320]	; (8003344 <HAL_TIM_MspPostInit+0x234>)
 8003202:	f004 fe53 	bl	8007eac <HAL_GPIO_Init>
}
 8003206:	e094      	b.n	8003332 <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM14)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a51      	ldr	r2, [pc, #324]	; (8003354 <HAL_TIM_MspPostInit+0x244>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d11f      	bne.n	8003252 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	4b4b      	ldr	r3, [pc, #300]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 8003214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003218:	4a49      	ldr	r2, [pc, #292]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003222:	4b47      	ldr	r3, [pc, #284]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 8003224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003234:	2302      	movs	r3, #2
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003238:	2300      	movs	r3, #0
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323c:	2300      	movs	r3, #0
 800323e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8003240:	2309      	movs	r3, #9
 8003242:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8003244:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003248:	4619      	mov	r1, r3
 800324a:	483e      	ldr	r0, [pc, #248]	; (8003344 <HAL_TIM_MspPostInit+0x234>)
 800324c:	f004 fe2e 	bl	8007eac <HAL_GPIO_Init>
}
 8003250:	e06f      	b.n	8003332 <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM15)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a40      	ldr	r2, [pc, #256]	; (8003358 <HAL_TIM_MspPostInit+0x248>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d11f      	bne.n	800329c <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800325c:	4b38      	ldr	r3, [pc, #224]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 800325e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003262:	4a37      	ldr	r2, [pc, #220]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 8003264:	f043 0310 	orr.w	r3, r3, #16
 8003268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800326c:	4b34      	ldr	r3, [pc, #208]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 800326e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800327a:	2320      	movs	r3, #32
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327e:	2302      	movs	r3, #2
 8003280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003286:	2300      	movs	r3, #0
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800328a:	2304      	movs	r3, #4
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800328e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003292:	4619      	mov	r1, r3
 8003294:	4831      	ldr	r0, [pc, #196]	; (800335c <HAL_TIM_MspPostInit+0x24c>)
 8003296:	f004 fe09 	bl	8007eac <HAL_GPIO_Init>
}
 800329a:	e04a      	b.n	8003332 <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM16)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a2f      	ldr	r2, [pc, #188]	; (8003360 <HAL_TIM_MspPostInit+0x250>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d120      	bne.n	80032e8 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 80032a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ac:	4a24      	ldr	r2, [pc, #144]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032b6:	4b22      	ldr	r3, [pc, #136]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 80032b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP4_Pin;
 80032c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ca:	2302      	movs	r3, #2
 80032cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d2:	2300      	movs	r3, #0
 80032d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80032d6:	2301      	movs	r3, #1
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80032da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032de:	4619      	mov	r1, r3
 80032e0:	481a      	ldr	r0, [pc, #104]	; (800334c <HAL_TIM_MspPostInit+0x23c>)
 80032e2:	f004 fde3 	bl	8007eac <HAL_GPIO_Init>
}
 80032e6:	e024      	b.n	8003332 <HAL_TIM_MspPostInit+0x222>
  else if(timHandle->Instance==TIM17)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_TIM_MspPostInit+0x254>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d11f      	bne.n	8003332 <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 80032f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f8:	4a11      	ldr	r2, [pc, #68]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 80032fa:	f043 0302 	orr.w	r3, r3, #2
 80032fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <HAL_TIM_MspPostInit+0x230>)
 8003304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8003310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331a:	2300      	movs	r3, #0
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331e:	2300      	movs	r3, #0
 8003320:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003322:	2301      	movs	r3, #1
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 8003326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332a:	4619      	mov	r1, r3
 800332c:	4807      	ldr	r0, [pc, #28]	; (800334c <HAL_TIM_MspPostInit+0x23c>)
 800332e:	f004 fdbd 	bl	8007eac <HAL_GPIO_Init>
}
 8003332:	bf00      	nop
 8003334:	3738      	adds	r7, #56	; 0x38
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40010000 	.word	0x40010000
 8003340:	58024400 	.word	0x58024400
 8003344:	58020000 	.word	0x58020000
 8003348:	40000400 	.word	0x40000400
 800334c:	58020400 	.word	0x58020400
 8003350:	40001c00 	.word	0x40001c00
 8003354:	40002000 	.word	0x40002000
 8003358:	40014000 	.word	0x40014000
 800335c:	58021000 	.word	0x58021000
 8003360:	40014400 	.word	0x40014400
 8003364:	40014800 	.word	0x40014800

08003368 <MX_UART5_Init>:
UART_HandleTypeDef huart3;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <MX_UART5_Init+0x90>)
 800336e:	4a23      	ldr	r2, [pc, #140]	; (80033fc <MX_UART5_Init+0x94>)
 8003370:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8003372:	4b21      	ldr	r3, [pc, #132]	; (80033f8 <MX_UART5_Init+0x90>)
 8003374:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003378:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <MX_UART5_Init+0x90>)
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <MX_UART5_Init+0x90>)
 8003382:	2200      	movs	r2, #0
 8003384:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <MX_UART5_Init+0x90>)
 8003388:	2200      	movs	r2, #0
 800338a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800338c:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <MX_UART5_Init+0x90>)
 800338e:	220c      	movs	r2, #12
 8003390:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003392:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <MX_UART5_Init+0x90>)
 8003394:	2200      	movs	r2, #0
 8003396:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <MX_UART5_Init+0x90>)
 800339a:	2200      	movs	r2, #0
 800339c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800339e:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <MX_UART5_Init+0x90>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80033a4:	4b14      	ldr	r3, [pc, #80]	; (80033f8 <MX_UART5_Init+0x90>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033aa:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <MX_UART5_Init+0x90>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80033b0:	4811      	ldr	r0, [pc, #68]	; (80033f8 <MX_UART5_Init+0x90>)
 80033b2:	f00a fdf7 	bl	800dfa4 <HAL_UART_Init>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80033bc:	f7fe fc98 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033c0:	2100      	movs	r1, #0
 80033c2:	480d      	ldr	r0, [pc, #52]	; (80033f8 <MX_UART5_Init+0x90>)
 80033c4:	f00c f948 	bl	800f658 <HAL_UARTEx_SetTxFifoThreshold>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80033ce:	f7fe fc8f 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80033d2:	2100      	movs	r1, #0
 80033d4:	4808      	ldr	r0, [pc, #32]	; (80033f8 <MX_UART5_Init+0x90>)
 80033d6:	f00c f97d 	bl	800f6d4 <HAL_UARTEx_SetRxFifoThreshold>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80033e0:	f7fe fc86 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80033e4:	4804      	ldr	r0, [pc, #16]	; (80033f8 <MX_UART5_Init+0x90>)
 80033e6:	f00c f8fe 	bl	800f5e6 <HAL_UARTEx_DisableFifoMode>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80033f0:	f7fe fc7e 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	20000a98 	.word	0x20000a98
 80033fc:	40005000 	.word	0x40005000

08003400 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003404:	4b22      	ldr	r3, [pc, #136]	; (8003490 <MX_USART1_UART_Init+0x90>)
 8003406:	4a23      	ldr	r2, [pc, #140]	; (8003494 <MX_USART1_UART_Init+0x94>)
 8003408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800340a:	4b21      	ldr	r3, [pc, #132]	; (8003490 <MX_USART1_UART_Init+0x90>)
 800340c:	4a22      	ldr	r2, [pc, #136]	; (8003498 <MX_USART1_UART_Init+0x98>)
 800340e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003410:	4b1f      	ldr	r3, [pc, #124]	; (8003490 <MX_USART1_UART_Init+0x90>)
 8003412:	2200      	movs	r2, #0
 8003414:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003416:	4b1e      	ldr	r3, [pc, #120]	; (8003490 <MX_USART1_UART_Init+0x90>)
 8003418:	2200      	movs	r2, #0
 800341a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800341c:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <MX_USART1_UART_Init+0x90>)
 800341e:	2200      	movs	r2, #0
 8003420:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <MX_USART1_UART_Init+0x90>)
 8003424:	220c      	movs	r2, #12
 8003426:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <MX_USART1_UART_Init+0x90>)
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <MX_USART1_UART_Init+0x90>)
 8003430:	2200      	movs	r2, #0
 8003432:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003434:	4b16      	ldr	r3, [pc, #88]	; (8003490 <MX_USART1_UART_Init+0x90>)
 8003436:	2200      	movs	r2, #0
 8003438:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <MX_USART1_UART_Init+0x90>)
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <MX_USART1_UART_Init+0x90>)
 8003442:	2200      	movs	r2, #0
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003446:	4812      	ldr	r0, [pc, #72]	; (8003490 <MX_USART1_UART_Init+0x90>)
 8003448:	f00a fdac 	bl	800dfa4 <HAL_UART_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8003452:	f7fe fc4d 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003456:	2100      	movs	r1, #0
 8003458:	480d      	ldr	r0, [pc, #52]	; (8003490 <MX_USART1_UART_Init+0x90>)
 800345a:	f00c f8fd 	bl	800f658 <HAL_UARTEx_SetTxFifoThreshold>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8003464:	f7fe fc44 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003468:	2100      	movs	r1, #0
 800346a:	4809      	ldr	r0, [pc, #36]	; (8003490 <MX_USART1_UART_Init+0x90>)
 800346c:	f00c f932 	bl	800f6d4 <HAL_UARTEx_SetRxFifoThreshold>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8003476:	f7fe fc3b 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800347a:	4805      	ldr	r0, [pc, #20]	; (8003490 <MX_USART1_UART_Init+0x90>)
 800347c:	f00c f8b3 	bl	800f5e6 <HAL_UARTEx_DisableFifoMode>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003486:	f7fe fc33 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000ba0 	.word	0x20000ba0
 8003494:	40011000 	.word	0x40011000
 8003498:	001e8480 	.word	0x001e8480

0800349c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034a2:	4a23      	ldr	r2, [pc, #140]	; (8003530 <MX_USART3_UART_Init+0x94>)
 80034a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80034ae:	4b1f      	ldr	r3, [pc, #124]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80034c0:	4b1a      	ldr	r3, [pc, #104]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034c2:	220c      	movs	r2, #12
 80034c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80034cc:	4b17      	ldr	r3, [pc, #92]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034d2:	4b16      	ldr	r3, [pc, #88]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034d8:	4b14      	ldr	r3, [pc, #80]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034da:	2200      	movs	r2, #0
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80034e4:	4811      	ldr	r0, [pc, #68]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034e6:	f00a fd5d 	bl	800dfa4 <HAL_UART_Init>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80034f0:	f7fe fbfe 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80034f4:	2100      	movs	r1, #0
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <MX_USART3_UART_Init+0x90>)
 80034f8:	f00c f8ae 	bl	800f658 <HAL_UARTEx_SetTxFifoThreshold>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003502:	f7fe fbf5 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003506:	2100      	movs	r1, #0
 8003508:	4808      	ldr	r0, [pc, #32]	; (800352c <MX_USART3_UART_Init+0x90>)
 800350a:	f00c f8e3 	bl	800f6d4 <HAL_UARTEx_SetRxFifoThreshold>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003514:	f7fe fbec 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003518:	4804      	ldr	r0, [pc, #16]	; (800352c <MX_USART3_UART_Init+0x90>)
 800351a:	f00c f864 	bl	800f5e6 <HAL_UARTEx_DisableFifoMode>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003524:	f7fe fbe4 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003528:	bf00      	nop
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20000a08 	.word	0x20000a08
 8003530:	40004800 	.word	0x40004800

08003534 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08e      	sub	sp, #56	; 0x38
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800353c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	609a      	str	r2, [r3, #8]
 8003548:	60da      	str	r2, [r3, #12]
 800354a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a66      	ldr	r2, [pc, #408]	; (80036ec <HAL_UART_MspInit+0x1b8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d12f      	bne.n	80035b6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003556:	4b66      	ldr	r3, [pc, #408]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 8003558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800355c:	4a64      	ldr	r2, [pc, #400]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 800355e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003562:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003566:	4b62      	ldr	r3, [pc, #392]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 8003568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800356c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003570:	623b      	str	r3, [r7, #32]
 8003572:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003574:	4b5e      	ldr	r3, [pc, #376]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 8003576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800357a:	4a5d      	ldr	r2, [pc, #372]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 800357c:	f043 0302 	orr.w	r3, r3, #2
 8003580:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003584:	4b5a      	ldr	r3, [pc, #360]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 8003586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003592:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	2300      	movs	r3, #0
 80035a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80035a4:	230e      	movs	r3, #14
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	4619      	mov	r1, r3
 80035ae:	4851      	ldr	r0, [pc, #324]	; (80036f4 <HAL_UART_MspInit+0x1c0>)
 80035b0:	f004 fc7c 	bl	8007eac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80035b4:	e096      	b.n	80036e4 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a4f      	ldr	r2, [pc, #316]	; (80036f8 <HAL_UART_MspInit+0x1c4>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d15d      	bne.n	800367c <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035c0:	4b4b      	ldr	r3, [pc, #300]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 80035c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035c6:	4a4a      	ldr	r2, [pc, #296]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 80035c8:	f043 0310 	orr.w	r3, r3, #16
 80035cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035d0:	4b47      	ldr	r3, [pc, #284]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 80035d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035de:	4b44      	ldr	r3, [pc, #272]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 80035e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e4:	4a42      	ldr	r2, [pc, #264]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 80035e6:	f043 0302 	orr.w	r3, r3, #2
 80035ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035ee:	4b40      	ldr	r3, [pc, #256]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 80035f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80035fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003602:	2302      	movs	r3, #2
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800360a:	2300      	movs	r3, #0
 800360c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800360e:	2304      	movs	r3, #4
 8003610:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003616:	4619      	mov	r1, r3
 8003618:	4836      	ldr	r0, [pc, #216]	; (80036f4 <HAL_UART_MspInit+0x1c0>)
 800361a:	f004 fc47 	bl	8007eac <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003620:	4a37      	ldr	r2, [pc, #220]	; (8003700 <HAL_UART_MspInit+0x1cc>)
 8003622:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003624:	4b35      	ldr	r3, [pc, #212]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003626:	2229      	movs	r2, #41	; 0x29
 8003628:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362a:	4b34      	ldr	r3, [pc, #208]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003630:	4b32      	ldr	r3, [pc, #200]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003636:	4b31      	ldr	r3, [pc, #196]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800363c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800363e:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003640:	2200      	movs	r2, #0
 8003642:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003644:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003646:	2200      	movs	r2, #0
 8003648:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800364a:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 800364c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003650:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003652:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003654:	2200      	movs	r2, #0
 8003656:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003658:	4b28      	ldr	r3, [pc, #160]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 800365a:	2200      	movs	r2, #0
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800365e:	4827      	ldr	r0, [pc, #156]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003660:	f002 fb4e 	bl	8005d00 <HAL_DMA_Init>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_UART_MspInit+0x13a>
      Error_Handler();
 800366a:	f7fe fb41 	bl	8001cf0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a22      	ldr	r2, [pc, #136]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003672:	67da      	str	r2, [r3, #124]	; 0x7c
 8003674:	4a21      	ldr	r2, [pc, #132]	; (80036fc <HAL_UART_MspInit+0x1c8>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6393      	str	r3, [r2, #56]	; 0x38
}
 800367a:	e033      	b.n	80036e4 <HAL_UART_MspInit+0x1b0>
  else if(uartHandle->Instance==USART3)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_UART_MspInit+0x1d0>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d12e      	bne.n	80036e4 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003686:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 8003688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800368c:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 800368e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003692:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003696:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 8003698:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800369c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a0:	613b      	str	r3, [r7, #16]
 80036a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036a4:	4b12      	ldr	r3, [pc, #72]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 80036a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036aa:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 80036ac:	f043 0308 	orr.w	r3, r3, #8
 80036b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <HAL_UART_MspInit+0x1bc>)
 80036b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036d4:	2307      	movs	r3, #7
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036dc:	4619      	mov	r1, r3
 80036de:	480a      	ldr	r0, [pc, #40]	; (8003708 <HAL_UART_MspInit+0x1d4>)
 80036e0:	f004 fbe4 	bl	8007eac <HAL_GPIO_Init>
}
 80036e4:	bf00      	nop
 80036e6:	3738      	adds	r7, #56	; 0x38
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40005000 	.word	0x40005000
 80036f0:	58024400 	.word	0x58024400
 80036f4:	58020400 	.word	0x58020400
 80036f8:	40011000 	.word	0x40011000
 80036fc:	20000b28 	.word	0x20000b28
 8003700:	40020010 	.word	0x40020010
 8003704:	40004800 	.word	0x40004800
 8003708:	58020c00 	.word	0x58020c00

0800370c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800370c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003744 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003710:	f7fe fcba 	bl	8002088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003714:	480c      	ldr	r0, [pc, #48]	; (8003748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003716:	490d      	ldr	r1, [pc, #52]	; (800374c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003718:	4a0d      	ldr	r2, [pc, #52]	; (8003750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800371a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800371c:	e002      	b.n	8003724 <LoopCopyDataInit>

0800371e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800371e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003722:	3304      	adds	r3, #4

08003724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003728:	d3f9      	bcc.n	800371e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800372c:	4c0a      	ldr	r4, [pc, #40]	; (8003758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800372e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003730:	e001      	b.n	8003736 <LoopFillZerobss>

08003732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003734:	3204      	adds	r2, #4

08003736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003738:	d3fb      	bcc.n	8003732 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800373a:	f00c f857 	bl	800f7ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800373e:	f7fd ffeb 	bl	8001718 <main>
  bx  lr
 8003742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800374c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003750:	0800f8ac 	.word	0x0800f8ac
  ldr r2, =_sbss
 8003754:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003758:	20000c34 	.word	0x20000c34

0800375c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800375c:	e7fe      	b.n	800375c <ADC_IRQHandler>
	...

08003760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003766:	2003      	movs	r0, #3
 8003768:	f002 f9a0 	bl	8005aac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800376c:	f005 fc3e 	bl	8008fec <HAL_RCC_GetSysClockFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <HAL_Init+0x68>)
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	4913      	ldr	r1, [pc, #76]	; (80037cc <HAL_Init+0x6c>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <HAL_Init+0x68>)
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	4a0e      	ldr	r2, [pc, #56]	; (80037cc <HAL_Init+0x6c>)
 8003794:	5cd3      	ldrb	r3, [r2, r3]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
 80037a0:	4a0b      	ldr	r2, [pc, #44]	; (80037d0 <HAL_Init+0x70>)
 80037a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037a4:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <HAL_Init+0x74>)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037aa:	2000      	movs	r0, #0
 80037ac:	f000 f814 	bl	80037d8 <HAL_InitTick>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e002      	b.n	80037c0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80037ba:	f7fe fc03 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	58024400 	.word	0x58024400
 80037cc:	0800f85c 	.word	0x0800f85c
 80037d0:	20000004 	.word	0x20000004
 80037d4:	20000000 	.word	0x20000000

080037d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80037e0:	4b15      	ldr	r3, [pc, #84]	; (8003838 <HAL_InitTick+0x60>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e021      	b.n	8003830 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80037ec:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_InitTick+0x64>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b11      	ldr	r3, [pc, #68]	; (8003838 <HAL_InitTick+0x60>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	4619      	mov	r1, r3
 80037f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	4618      	mov	r0, r3
 8003804:	f002 f985 	bl	8005b12 <HAL_SYSTICK_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e00e      	b.n	8003830 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d80a      	bhi.n	800382e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003818:	2200      	movs	r2, #0
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	f002 f94f 	bl	8005ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003824:	4a06      	ldr	r2, [pc, #24]	; (8003840 <HAL_InitTick+0x68>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	2000000c 	.word	0x2000000c
 800383c:	20000000 	.word	0x20000000
 8003840:	20000008 	.word	0x20000008

08003844 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003848:	4b06      	ldr	r3, [pc, #24]	; (8003864 <HAL_IncTick+0x20>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x24>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4413      	add	r3, r2
 8003854:	4a04      	ldr	r2, [pc, #16]	; (8003868 <HAL_IncTick+0x24>)
 8003856:	6013      	str	r3, [r2, #0]
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2000000c 	.word	0x2000000c
 8003868:	20000c30 	.word	0x20000c30

0800386c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return uwTick;
 8003870:	4b03      	ldr	r3, [pc, #12]	; (8003880 <HAL_GetTick+0x14>)
 8003872:	681b      	ldr	r3, [r3, #0]
}
 8003874:	4618      	mov	r0, r3
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000c30 	.word	0x20000c30

08003884 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	431a      	orrs	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	609a      	str	r2, [r3, #8]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	609a      	str	r2, [r3, #8]
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b087      	sub	sp, #28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	3360      	adds	r3, #96	; 0x60
 80038fe:	461a      	mov	r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a10      	ldr	r2, [pc, #64]	; (800394c <LL_ADC_SetOffset+0x60>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d10b      	bne.n	8003928 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	4313      	orrs	r3, r2
 800391e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003926:	e00b      	b.n	8003940 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	431a      	orrs	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	601a      	str	r2, [r3, #0]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	58026000 	.word	0x58026000

08003950 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3360      	adds	r3, #96	; 0x60
 800395e:	461a      	mov	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	431a      	orrs	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	611a      	str	r2, [r3, #16]
}
 80039a2:	bf00      	nop
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a0c      	ldr	r2, [pc, #48]	; (80039f0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00e      	beq.n	80039e2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3360      	adds	r3, #96	; 0x60
 80039c8:	461a      	mov	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4413      	add	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	431a      	orrs	r2, r3
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	601a      	str	r2, [r3, #0]
  }
}
 80039e2:	bf00      	nop
 80039e4:	371c      	adds	r7, #28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	58026000 	.word	0x58026000

080039f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <LL_ADC_SetOffsetSaturation+0x40>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d10e      	bne.n	8003a26 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3360      	adds	r3, #96	; 0x60
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	431a      	orrs	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003a26:	bf00      	nop
 8003a28:	371c      	adds	r7, #28
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	58026000 	.word	0x58026000

08003a38 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <LL_ADC_SetOffsetSign+0x40>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d10e      	bne.n	8003a6a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3360      	adds	r3, #96	; 0x60
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	58026000 	.word	0x58026000

08003a7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3360      	adds	r3, #96	; 0x60
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <LL_ADC_SetOffsetState+0x50>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d108      	bne.n	8003ab0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003aae:	e007      	b.n	8003ac0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	601a      	str	r2, [r3, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	58026000 	.word	0x58026000

08003ad0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	60b9      	str	r1, [r7, #8]
 8003b00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3330      	adds	r3, #48	; 0x30
 8003b06:	461a      	mov	r2, r3
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	4413      	add	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	211f      	movs	r1, #31
 8003b22:	fa01 f303 	lsl.w	r3, r1, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	401a      	ands	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	0e9b      	lsrs	r3, r3, #26
 8003b2e:	f003 011f 	and.w	r1, r3, #31
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b42:	bf00      	nop
 8003b44:	371c      	adds	r7, #28
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003b62:	2301      	movs	r3, #1
 8003b64:	e000      	b.n	8003b68 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3314      	adds	r3, #20
 8003b84:	461a      	mov	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	0e5b      	lsrs	r3, r3, #25
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	4413      	add	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	0d1b      	lsrs	r3, r3, #20
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2107      	movs	r1, #7
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	401a      	ands	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	0d1b      	lsrs	r3, r3, #20
 8003bae:	f003 031f 	and.w	r3, r3, #31
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003bbe:	bf00      	nop
 8003bc0:	371c      	adds	r7, #28
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
	...

08003bcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b085      	sub	sp, #20
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a1a      	ldr	r2, [pc, #104]	; (8003c44 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d115      	bne.n	8003c0c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bec:	43db      	mvns	r3, r3
 8003bee:	401a      	ands	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0318 	and.w	r3, r3, #24
 8003bf6:	4914      	ldr	r1, [pc, #80]	; (8003c48 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003bf8:	40d9      	lsrs	r1, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	400b      	ands	r3, r1
 8003bfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c02:	431a      	orrs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8003c0a:	e014      	b.n	8003c36 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f003 0318 	and.w	r3, r3, #24
 8003c22:	4909      	ldr	r1, [pc, #36]	; (8003c48 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003c24:	40d9      	lsrs	r1, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	400b      	ands	r3, r1
 8003c2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003c36:	bf00      	nop
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	58026000 	.word	0x58026000
 8003c48:	000fffff 	.word	0x000fffff

08003c4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 031f 	and.w	r3, r3, #31
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6093      	str	r3, [r2, #8]
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	5fffffc0 	.word	0x5fffffc0

08003ca8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbc:	d101      	bne.n	8003cc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <LL_ADC_EnableInternalRegulator+0x24>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	6fffffc0 	.word	0x6fffffc0

08003cf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d0c:	d101      	bne.n	8003d12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <LL_ADC_Enable+0x24>)
 8003d2e:	4013      	ands	r3, r2
 8003d30:	f043 0201 	orr.w	r2, r3, #1
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	7fffffc0 	.word	0x7fffffc0

08003d48 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <LL_ADC_Disable+0x24>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	f043 0202 	orr.w	r2, r3, #2
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr
 8003d6c:	7fffffc0 	.word	0x7fffffc0

08003d70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d101      	bne.n	8003d88 <LL_ADC_IsEnabled+0x18>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <LL_ADC_IsEnabled+0x1a>
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d101      	bne.n	8003dae <LL_ADC_IsDisableOngoing+0x18>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <LL_ADC_IsDisableOngoing+0x1a>
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <LL_ADC_REG_StartConversion+0x24>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	f043 0204 	orr.w	r2, r3, #4
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	7fffffc0 	.word	0x7fffffc0

08003de4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b04      	cmp	r3, #4
 8003df6:	d101      	bne.n	8003dfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d101      	bne.n	8003e22 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e30:	b590      	push	{r4, r7, lr}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e1ee      	b.n	8004228 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d109      	bne.n	8003e6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7fc fcd5 	bl	8000808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff ff19 	bl	8003ca8 <LL_ADC_IsDeepPowerDownEnabled>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff feff 	bl	8003c84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff ff34 	bl	8003cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d114      	bne.n	8003ec0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff ff18 	bl	8003cd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ea0:	4b8e      	ldr	r3, [pc, #568]	; (80040dc <HAL_ADC_Init+0x2ac>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	4a8e      	ldr	r2, [pc, #568]	; (80040e0 <HAL_ADC_Init+0x2b0>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	099b      	lsrs	r3, r3, #6
 8003eae:	3301      	adds	r3, #1
 8003eb0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eb2:	e002      	b.n	8003eba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f9      	bne.n	8003eb4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff ff17 	bl	8003cf8 <LL_ADC_IsInternalRegulatorEnabled>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10d      	bne.n	8003eec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed4:	f043 0210 	orr.w	r2, r3, #16
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee0:	f043 0201 	orr.w	r2, r3, #1
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f7ff ff77 	bl	8003de4 <LL_ADC_REG_IsConversionOngoing>
 8003ef6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f040 8188 	bne.w	8004216 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 8184 	bne.w	8004216 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f12:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f16:	f043 0202 	orr.w	r2, r3, #2
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff24 	bl	8003d70 <LL_ADC_IsEnabled>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d136      	bne.n	8003f9c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a6c      	ldr	r2, [pc, #432]	; (80040e4 <HAL_ADC_Init+0x2b4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_ADC_Init+0x112>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a6a      	ldr	r2, [pc, #424]	; (80040e8 <HAL_ADC_Init+0x2b8>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10e      	bne.n	8003f60 <HAL_ADC_Init+0x130>
 8003f42:	4868      	ldr	r0, [pc, #416]	; (80040e4 <HAL_ADC_Init+0x2b4>)
 8003f44:	f7ff ff14 	bl	8003d70 <LL_ADC_IsEnabled>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	4867      	ldr	r0, [pc, #412]	; (80040e8 <HAL_ADC_Init+0x2b8>)
 8003f4c:	f7ff ff10 	bl	8003d70 <LL_ADC_IsEnabled>
 8003f50:	4603      	mov	r3, r0
 8003f52:	4323      	orrs	r3, r4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	e008      	b.n	8003f72 <HAL_ADC_Init+0x142>
 8003f60:	4862      	ldr	r0, [pc, #392]	; (80040ec <HAL_ADC_Init+0x2bc>)
 8003f62:	f7ff ff05 	bl	8003d70 <LL_ADC_IsEnabled>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d012      	beq.n	8003f9c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a5a      	ldr	r2, [pc, #360]	; (80040e4 <HAL_ADC_Init+0x2b4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_ADC_Init+0x15a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a58      	ldr	r2, [pc, #352]	; (80040e8 <HAL_ADC_Init+0x2b8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d101      	bne.n	8003f8e <HAL_ADC_Init+0x15e>
 8003f8a:	4a59      	ldr	r2, [pc, #356]	; (80040f0 <HAL_ADC_Init+0x2c0>)
 8003f8c:	e000      	b.n	8003f90 <HAL_ADC_Init+0x160>
 8003f8e:	4a59      	ldr	r2, [pc, #356]	; (80040f4 <HAL_ADC_Init+0x2c4>)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f7ff fc74 	bl	8003884 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a52      	ldr	r2, [pc, #328]	; (80040ec <HAL_ADC_Init+0x2bc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d129      	bne.n	8003ffa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7e5b      	ldrb	r3, [r3, #25]
 8003faa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003fb0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003fb6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d013      	beq.n	8003fe8 <HAL_ADC_Init+0x1b8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_ADC_Init+0x1b4>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b1c      	cmp	r3, #28
 8003fce:	d007      	beq.n	8003fe0 <HAL_ADC_Init+0x1b0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b18      	cmp	r3, #24
 8003fd6:	d101      	bne.n	8003fdc <HAL_ADC_Init+0x1ac>
 8003fd8:	2318      	movs	r3, #24
 8003fda:	e006      	b.n	8003fea <HAL_ADC_Init+0x1ba>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	e004      	b.n	8003fea <HAL_ADC_Init+0x1ba>
 8003fe0:	2310      	movs	r3, #16
 8003fe2:	e002      	b.n	8003fea <HAL_ADC_Init+0x1ba>
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	e000      	b.n	8003fea <HAL_ADC_Init+0x1ba>
 8003fe8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003fea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ff2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	e00e      	b.n	8004018 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	7e5b      	ldrb	r3, [r3, #25]
 8003ffe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004004:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800400a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004012:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004014:	4313      	orrs	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d106      	bne.n	8004030 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	3b01      	subs	r3, #1
 8004028:	045b      	lsls	r3, r3, #17
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004034:	2b00      	cmp	r3, #0
 8004036:	d009      	beq.n	800404c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4313      	orrs	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a26      	ldr	r2, [pc, #152]	; (80040ec <HAL_ADC_Init+0x2bc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d115      	bne.n	8004082 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <HAL_ADC_Init+0x2c8>)
 800405e:	4013      	ands	r3, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	69b9      	ldr	r1, [r7, #24]
 8004066:	430b      	orrs	r3, r1
 8004068:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	611a      	str	r2, [r3, #16]
 8004080:	e009      	b.n	8004096 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <HAL_ADC_Init+0x2cc>)
 800408a:	4013      	ands	r3, r2
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	430b      	orrs	r3, r1
 8004094:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fea2 	bl	8003de4 <LL_ADC_REG_IsConversionOngoing>
 80040a0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff feaf 	bl	8003e0a <LL_ADC_INJ_IsConversionOngoing>
 80040ac:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f040 808e 	bne.w	80041d2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f040 808a 	bne.w	80041d2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a0a      	ldr	r2, [pc, #40]	; (80040ec <HAL_ADC_Init+0x2bc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d11b      	bne.n	8004100 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	7e1b      	ldrb	r3, [r3, #24]
 80040cc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040d4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e018      	b.n	800410e <HAL_ADC_Init+0x2de>
 80040dc:	20000000 	.word	0x20000000
 80040e0:	053e2d63 	.word	0x053e2d63
 80040e4:	40022000 	.word	0x40022000
 80040e8:	40022100 	.word	0x40022100
 80040ec:	58026000 	.word	0x58026000
 80040f0:	40022300 	.word	0x40022300
 80040f4:	58026300 	.word	0x58026300
 80040f8:	fff04007 	.word	0xfff04007
 80040fc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7e1b      	ldrb	r3, [r3, #24]
 8004104:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	4b46      	ldr	r3, [pc, #280]	; (8004230 <HAL_ADC_Init+0x400>)
 8004116:	4013      	ands	r3, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6812      	ldr	r2, [r2, #0]
 800411c:	69b9      	ldr	r1, [r7, #24]
 800411e:	430b      	orrs	r3, r1
 8004120:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004128:	2b01      	cmp	r3, #1
 800412a:	d137      	bne.n	800419c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a3f      	ldr	r2, [pc, #252]	; (8004234 <HAL_ADC_Init+0x404>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d116      	bne.n	800416a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_ADC_Init+0x408>)
 8004144:	4013      	ands	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800414e:	4311      	orrs	r1, r2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004154:	4311      	orrs	r1, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800415a:	430a      	orrs	r2, r1
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	611a      	str	r2, [r3, #16]
 8004168:	e020      	b.n	80041ac <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691a      	ldr	r2, [r3, #16]
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <HAL_ADC_Init+0x40c>)
 8004172:	4013      	ands	r3, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004178:	3a01      	subs	r2, #1
 800417a:	0411      	lsls	r1, r2, #16
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004180:	4311      	orrs	r1, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800418c:	430a      	orrs	r2, r1
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0201 	orr.w	r2, r2, #1
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	e007      	b.n	80041ac <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691a      	ldr	r2, [r3, #16]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1b      	ldr	r2, [pc, #108]	; (8004234 <HAL_ADC_Init+0x404>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d002      	beq.n	80041d2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f001 f9e9 	bl	80055a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d10c      	bne.n	80041f4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e0:	f023 010f 	bic.w	r1, r3, #15
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	1e5a      	subs	r2, r3, #1
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
 80041f2:	e007      	b.n	8004204 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 020f 	bic.w	r2, r2, #15
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004208:	f023 0303 	bic.w	r3, r3, #3
 800420c:	f043 0201 	orr.w	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	661a      	str	r2, [r3, #96]	; 0x60
 8004214:	e007      	b.n	8004226 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421a:	f043 0210 	orr.w	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004226:	7ffb      	ldrb	r3, [r7, #31]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3724      	adds	r7, #36	; 0x24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd90      	pop	{r4, r7, pc}
 8004230:	ffffbffc 	.word	0xffffbffc
 8004234:	58026000 	.word	0x58026000
 8004238:	fc00f81f 	.word	0xfc00f81f
 800423c:	fc00f81e 	.word	0xfc00f81e

08004240 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a97      	ldr	r2, [pc, #604]	; (80044ac <HAL_ADC_Start_IT+0x26c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_ADC_Start_IT+0x1c>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a96      	ldr	r2, [pc, #600]	; (80044b0 <HAL_ADC_Start_IT+0x270>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_ADC_Start_IT+0x20>
 800425c:	4b95      	ldr	r3, [pc, #596]	; (80044b4 <HAL_ADC_Start_IT+0x274>)
 800425e:	e000      	b.n	8004262 <HAL_ADC_Start_IT+0x22>
 8004260:	4b95      	ldr	r3, [pc, #596]	; (80044b8 <HAL_ADC_Start_IT+0x278>)
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fcf2 	bl	8003c4c <LL_ADC_GetMultimode>
 8004268:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fdb8 	bl	8003de4 <LL_ADC_REG_IsConversionOngoing>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	f040 810f 	bne.w	800449a <HAL_ADC_Start_IT+0x25a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_ADC_Start_IT+0x4a>
 8004286:	2302      	movs	r3, #2
 8004288:	e10c      	b.n	80044a4 <HAL_ADC_Start_IT+0x264>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f001 f89c 	bl	80053d0 <ADC_Enable>
 8004298:	4603      	mov	r3, r0
 800429a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800429c:	7dfb      	ldrb	r3, [r7, #23]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f040 80f6 	bne.w	8004490 <HAL_ADC_Start_IT+0x250>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042a8:	4b84      	ldr	r3, [pc, #528]	; (80044bc <HAL_ADC_Start_IT+0x27c>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7d      	ldr	r2, [pc, #500]	; (80044b0 <HAL_ADC_Start_IT+0x270>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d002      	beq.n	80042c4 <HAL_ADC_Start_IT+0x84>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	e000      	b.n	80042c6 <HAL_ADC_Start_IT+0x86>
 80042c4:	4b79      	ldr	r3, [pc, #484]	; (80044ac <HAL_ADC_Start_IT+0x26c>)
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d002      	beq.n	80042d4 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d105      	bne.n	80042e0 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d006      	beq.n	80042fa <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f0:	f023 0206 	bic.w	r2, r3, #6
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	665a      	str	r2, [r3, #100]	; 0x64
 80042f8:	e002      	b.n	8004300 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	221c      	movs	r2, #28
 8004306:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 021c 	bic.w	r2, r2, #28
 800431e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	2b08      	cmp	r3, #8
 8004326:	d108      	bne.n	800433a <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0208 	orr.w	r2, r2, #8
 8004336:	605a      	str	r2, [r3, #4]
          break;
 8004338:	e008      	b.n	800434c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0204 	orr.w	r2, r2, #4
 8004348:	605a      	str	r2, [r3, #4]
          break;
 800434a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d107      	bne.n	8004364 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0210 	orr.w	r2, r2, #16
 8004362:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a51      	ldr	r2, [pc, #324]	; (80044b0 <HAL_ADC_Start_IT+0x270>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d002      	beq.n	8004374 <HAL_ADC_Start_IT+0x134>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	e000      	b.n	8004376 <HAL_ADC_Start_IT+0x136>
 8004374:	4b4d      	ldr	r3, [pc, #308]	; (80044ac <HAL_ADC_Start_IT+0x26c>)
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6812      	ldr	r2, [r2, #0]
 800437a:	4293      	cmp	r3, r2
 800437c:	d008      	beq.n	8004390 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b05      	cmp	r3, #5
 8004388:	d002      	beq.n	8004390 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b09      	cmp	r3, #9
 800438e:	d13b      	bne.n	8004408 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d02d      	beq.n	80043fa <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d110      	bne.n	80043d8 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0220 	bic.w	r2, r2, #32
 80043c4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d4:	605a      	str	r2, [r3, #4]
              break;
 80043d6:	e011      	b.n	80043fc <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0220 	orr.w	r2, r2, #32
 80043f6:	605a      	str	r2, [r3, #4]
              break;
 80043f8:	e000      	b.n	80043fc <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80043fa:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff fcdb 	bl	8003dbc <LL_ADC_REG_StartConversion>
 8004406:	e04c      	b.n	80044a2 <HAL_ADC_Start_IT+0x262>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <HAL_ADC_Start_IT+0x270>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d002      	beq.n	8004424 <HAL_ADC_Start_IT+0x1e4>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	e000      	b.n	8004426 <HAL_ADC_Start_IT+0x1e6>
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <HAL_ADC_Start_IT+0x26c>)
 8004426:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d035      	beq.n	80044a0 <HAL_ADC_Start_IT+0x260>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004438:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800443c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d110      	bne.n	800446e <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0220 	bic.w	r2, r2, #32
 800445a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800446a:	605a      	str	r2, [r3, #4]
              break;
 800446c:	e019      	b.n	80044a2 <HAL_ADC_Start_IT+0x262>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685a      	ldr	r2, [r3, #4]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0220 	orr.w	r2, r2, #32
 800448c:	605a      	str	r2, [r3, #4]
              break;
 800448e:	e008      	b.n	80044a2 <HAL_ADC_Start_IT+0x262>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004498:	e003      	b.n	80044a2 <HAL_ADC_Start_IT+0x262>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800449a:	2302      	movs	r3, #2
 800449c:	75fb      	strb	r3, [r7, #23]
 800449e:	e000      	b.n	80044a2 <HAL_ADC_Start_IT+0x262>
        }
 80044a0:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40022000 	.word	0x40022000
 80044b0:	40022100 	.word	0x40022100
 80044b4:	40022300 	.word	0x40022300
 80044b8:	58026300 	.word	0x58026300
 80044bc:	fffff0fe 	.word	0xfffff0fe

080044c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80044e4:	2300      	movs	r3, #0
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a87      	ldr	r2, [pc, #540]	; (800471c <HAL_ADC_IRQHandler+0x240>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d004      	beq.n	800450c <HAL_ADC_IRQHandler+0x30>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a86      	ldr	r2, [pc, #536]	; (8004720 <HAL_ADC_IRQHandler+0x244>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d101      	bne.n	8004510 <HAL_ADC_IRQHandler+0x34>
 800450c:	4b85      	ldr	r3, [pc, #532]	; (8004724 <HAL_ADC_IRQHandler+0x248>)
 800450e:	e000      	b.n	8004512 <HAL_ADC_IRQHandler+0x36>
 8004510:	4b85      	ldr	r3, [pc, #532]	; (8004728 <HAL_ADC_IRQHandler+0x24c>)
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fb9a 	bl	8003c4c <LL_ADC_GetMultimode>
 8004518:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d017      	beq.n	8004554 <HAL_ADC_IRQHandler+0x78>
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d012      	beq.n	8004554 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	d105      	bne.n	8004546 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f001 f9d6 	bl	80058f8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2202      	movs	r2, #2
 8004552:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d004      	beq.n	8004568 <HAL_ADC_IRQHandler+0x8c>
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8083 	beq.w	800467a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d07d      	beq.n	800467a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d105      	bne.n	8004596 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fa98 	bl	8003ad0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d062      	beq.n	800466c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a5d      	ldr	r2, [pc, #372]	; (8004720 <HAL_ADC_IRQHandler+0x244>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d002      	beq.n	80045b6 <HAL_ADC_IRQHandler+0xda>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	e000      	b.n	80045b8 <HAL_ADC_IRQHandler+0xdc>
 80045b6:	4b59      	ldr	r3, [pc, #356]	; (800471c <HAL_ADC_IRQHandler+0x240>)
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	4293      	cmp	r3, r2
 80045be:	d008      	beq.n	80045d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d002      	beq.n	80045d2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b09      	cmp	r3, #9
 80045d0:	d104      	bne.n	80045dc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	623b      	str	r3, [r7, #32]
 80045da:	e00c      	b.n	80045f6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a4f      	ldr	r2, [pc, #316]	; (8004720 <HAL_ADC_IRQHandler+0x244>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d002      	beq.n	80045ec <HAL_ADC_IRQHandler+0x110>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	e000      	b.n	80045ee <HAL_ADC_IRQHandler+0x112>
 80045ec:	4b4b      	ldr	r3, [pc, #300]	; (800471c <HAL_ADC_IRQHandler+0x240>)
 80045ee:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d135      	bne.n	800466c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b08      	cmp	r3, #8
 800460c:	d12e      	bne.n	800466c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fbe6 	bl	8003de4 <LL_ADC_REG_IsConversionOngoing>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d11a      	bne.n	8004654 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f022 020c 	bic.w	r2, r2, #12
 800462c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004632:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800463e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d112      	bne.n	800466c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464a:	f043 0201 	orr.w	r2, r3, #1
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	661a      	str	r2, [r3, #96]	; 0x60
 8004652:	e00b      	b.n	800466c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004658:	f043 0210 	orr.w	r2, r3, #16
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004664:	f043 0201 	orr.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7fd fa89 	bl	8001b84 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	220c      	movs	r2, #12
 8004678:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	f003 0320 	and.w	r3, r3, #32
 8004680:	2b00      	cmp	r3, #0
 8004682:	d004      	beq.n	800468e <HAL_ADC_IRQHandler+0x1b2>
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f003 0320 	and.w	r3, r3, #32
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10b      	bne.n	80046a6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a0 	beq.w	80047da <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 809a 	beq.w	80047da <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d105      	bne.n	80046be <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fa43 	bl	8003b4e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80046c8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff f9fe 	bl	8003ad0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046d4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a11      	ldr	r2, [pc, #68]	; (8004720 <HAL_ADC_IRQHandler+0x244>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d002      	beq.n	80046e6 <HAL_ADC_IRQHandler+0x20a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	e000      	b.n	80046e8 <HAL_ADC_IRQHandler+0x20c>
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_ADC_IRQHandler+0x240>)
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d008      	beq.n	8004702 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b06      	cmp	r3, #6
 80046fa:	d002      	beq.n	8004702 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b07      	cmp	r3, #7
 8004700:	d104      	bne.n	800470c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	e014      	b.n	8004736 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a03      	ldr	r2, [pc, #12]	; (8004720 <HAL_ADC_IRQHandler+0x244>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00a      	beq.n	800472c <HAL_ADC_IRQHandler+0x250>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	e008      	b.n	800472e <HAL_ADC_IRQHandler+0x252>
 800471c:	40022000 	.word	0x40022000
 8004720:	40022100 	.word	0x40022100
 8004724:	40022300 	.word	0x40022300
 8004728:	58026300 	.word	0x58026300
 800472c:	4b84      	ldr	r3, [pc, #528]	; (8004940 <HAL_ADC_IRQHandler+0x464>)
 800472e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d047      	beq.n	80047cc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800473c:	6a3b      	ldr	r3, [r7, #32]
 800473e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <HAL_ADC_IRQHandler+0x27a>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d03f      	beq.n	80047cc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800474c:	6a3b      	ldr	r3, [r7, #32]
 800474e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004752:	2b00      	cmp	r3, #0
 8004754:	d13a      	bne.n	80047cc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d133      	bne.n	80047cc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d12e      	bne.n	80047cc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fb49 	bl	8003e0a <LL_ADC_INJ_IsConversionOngoing>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d11a      	bne.n	80047b4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800478c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004792:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d112      	bne.n	80047cc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047aa:	f043 0201 	orr.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60
 80047b2:	e00b      	b.n	80047cc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b8:	f043 0210 	orr.w	r2, r3, #16
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c4:	f043 0201 	orr.w	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f001 f86b 	bl	80058a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2260      	movs	r2, #96	; 0x60
 80047d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d011      	beq.n	8004808 <HAL_ADC_IRQHandler+0x32c>
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00c      	beq.n	8004808 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f8a8 	bl	8004950 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2280      	movs	r2, #128	; 0x80
 8004806:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d012      	beq.n	8004838 <HAL_ADC_IRQHandler+0x35c>
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004820:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f001 f851 	bl	80058d0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004836:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800483e:	2b00      	cmp	r3, #0
 8004840:	d012      	beq.n	8004868 <HAL_ADC_IRQHandler+0x38c>
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00d      	beq.n	8004868 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004850:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 f843 	bl	80058e4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004866:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0310 	and.w	r3, r3, #16
 800486e:	2b00      	cmp	r3, #0
 8004870:	d043      	beq.n	80048fa <HAL_ADC_IRQHandler+0x41e>
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	d03e      	beq.n	80048fa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8004884:	2301      	movs	r3, #1
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
 8004888:	e021      	b.n	80048ce <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a2a      	ldr	r2, [pc, #168]	; (8004940 <HAL_ADC_IRQHandler+0x464>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_ADC_IRQHandler+0x3c8>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a29      	ldr	r2, [pc, #164]	; (8004944 <HAL_ADC_IRQHandler+0x468>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d101      	bne.n	80048a8 <HAL_ADC_IRQHandler+0x3cc>
 80048a4:	4b28      	ldr	r3, [pc, #160]	; (8004948 <HAL_ADC_IRQHandler+0x46c>)
 80048a6:	e000      	b.n	80048aa <HAL_ADC_IRQHandler+0x3ce>
 80048a8:	4b28      	ldr	r3, [pc, #160]	; (800494c <HAL_ADC_IRQHandler+0x470>)
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff f9dc 	bl	8003c68 <LL_ADC_GetMultiDMATransfer>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80048b6:	2301      	movs	r3, #1
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ba:	e008      	b.n	80048ce <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80048ca:	2301      	movs	r3, #1
 80048cc:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d10e      	bne.n	80048f2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048e4:	f043 0202 	orr.w	r2, r3, #2
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f839 	bl	8004964 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2210      	movs	r2, #16
 80048f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004900:	2b00      	cmp	r3, #0
 8004902:	d018      	beq.n	8004936 <HAL_ADC_IRQHandler+0x45a>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490a:	2b00      	cmp	r3, #0
 800490c:	d013      	beq.n	8004936 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004912:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800491e:	f043 0208 	orr.w	r2, r3, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800492e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 ffc3 	bl	80058bc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004936:	bf00      	nop
 8004938:	3728      	adds	r7, #40	; 0x28
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40022000 	.word	0x40022000
 8004944:	40022100 	.word	0x40022100
 8004948:	40022300 	.word	0x40022300
 800494c:	58026300 	.word	0x58026300

08004950 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004978:	b590      	push	{r4, r7, lr}
 800497a:	b0b9      	sub	sp, #228	; 0xe4
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004982:	2300      	movs	r3, #0
 8004984:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004992:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	4ab3      	ldr	r2, [pc, #716]	; (8004c68 <HAL_ADC_ConfigChannel+0x2f0>)
 800499a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d102      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x34>
 80049a6:	2302      	movs	r3, #2
 80049a8:	f000 bcfa 	b.w	80053a0 <HAL_ADC_ConfigChannel+0xa28>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fa13 	bl	8003de4 <LL_ADC_REG_IsConversionOngoing>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f040 84de 	bne.w	8005382 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4aa8      	ldr	r2, [pc, #672]	; (8004c6c <HAL_ADC_ConfigChannel+0x2f4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d033      	beq.n	8004a38 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d108      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x76>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	0e9b      	lsrs	r3, r3, #26
 80049e2:	f003 031f 	and.w	r3, r3, #31
 80049e6:	2201      	movs	r2, #1
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	e01d      	b.n	8004a2a <HAL_ADC_ConfigChannel+0xb2>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049fa:	fa93 f3a3 	rbit	r3, r3
 80049fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004a12:	2320      	movs	r3, #32
 8004a14:	e004      	b.n	8004a20 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004a16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f003 031f 	and.w	r3, r3, #31
 8004a24:	2201      	movs	r2, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6812      	ldr	r2, [r2, #0]
 8004a2e:	69d1      	ldr	r1, [r2, #28]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	430b      	orrs	r3, r1
 8004a36:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6859      	ldr	r1, [r3, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	461a      	mov	r2, r3
 8004a46:	f7ff f856 	bl	8003af6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff f9c8 	bl	8003de4 <LL_ADC_REG_IsConversionOngoing>
 8004a54:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7ff f9d4 	bl	8003e0a <LL_ADC_INJ_IsConversionOngoing>
 8004a62:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 8270 	bne.w	8004f50 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f040 826b 	bne.w	8004f50 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6819      	ldr	r1, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f7ff f874 	bl	8003b74 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a76      	ldr	r2, [pc, #472]	; (8004c6c <HAL_ADC_ConfigChannel+0x2f4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d10d      	bne.n	8004ab2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	08db      	lsrs	r3, r3, #3
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ab0:	e032      	b.n	8004b18 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004ab2:	4b6f      	ldr	r3, [pc, #444]	; (8004c70 <HAL_ADC_ConfigChannel+0x2f8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004abe:	d10b      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x160>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	695a      	ldr	r2, [r3, #20]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	089b      	lsrs	r3, r3, #2
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	e01d      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x19c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0310 	and.w	r3, r3, #16
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x186>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	e00a      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x19c>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	089b      	lsrs	r3, r3, #2
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d048      	beq.n	8004bb2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	6919      	ldr	r1, [r3, #16]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b30:	f7fe fedc 	bl	80038ec <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a4c      	ldr	r2, [pc, #304]	; (8004c6c <HAL_ADC_ConfigChannel+0x2f4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d119      	bne.n	8004b72 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6919      	ldr	r1, [r3, #16]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f7fe ff74 	bl	8003a38 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6919      	ldr	r1, [r3, #16]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d102      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x1f0>
 8004b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b66:	e000      	b.n	8004b6a <HAL_ADC_ConfigChannel+0x1f2>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f7fe ff42 	bl	80039f4 <LL_ADC_SetOffsetSaturation>
 8004b70:	e1ee      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6919      	ldr	r1, [r3, #16]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d102      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x212>
 8004b84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b88:	e000      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x214>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f7fe ff0f 	bl	80039b0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6919      	ldr	r1, [r3, #16]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	7e1b      	ldrb	r3, [r3, #24]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d102      	bne.n	8004ba8 <HAL_ADC_ConfigChannel+0x230>
 8004ba2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ba6:	e000      	b.n	8004baa <HAL_ADC_ConfigChannel+0x232>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	461a      	mov	r2, r3
 8004bac:	f7fe fee6 	bl	800397c <LL_ADC_SetDataRightShift>
 8004bb0:	e1ce      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2d      	ldr	r2, [pc, #180]	; (8004c6c <HAL_ADC_ConfigChannel+0x2f4>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	f040 8181 	bne.w	8004ec0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fec3 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x272>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe feb8 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004be0:	4603      	mov	r3, r0
 8004be2:	0e9b      	lsrs	r3, r3, #26
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	e01e      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x2b0>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2100      	movs	r1, #0
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fead 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004c08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004c10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004c18:	2320      	movs	r3, #32
 8004c1a:	e004      	b.n	8004c26 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004c1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x2c8>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	0e9b      	lsrs	r3, r3, #26
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	e01e      	b.n	8004c7e <HAL_ADC_ConfigChannel+0x306>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c4c:	fa93 f3a3 	rbit	r3, r3
 8004c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004c54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004c5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d107      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004c64:	2320      	movs	r3, #32
 8004c66:	e00a      	b.n	8004c7e <HAL_ADC_ConfigChannel+0x306>
 8004c68:	47ff0000 	.word	0x47ff0000
 8004c6c:	58026000 	.word	0x58026000
 8004c70:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8004c74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c78:	fab3 f383 	clz	r3, r3
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d106      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2200      	movs	r2, #0
 8004c88:	2100      	movs	r1, #0
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe fef6 	bl	8003a7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2101      	movs	r1, #1
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7fe fe5a 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x344>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2101      	movs	r1, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe fe4f 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	0e9b      	lsrs	r3, r3, #26
 8004cb6:	f003 021f 	and.w	r2, r3, #31
 8004cba:	e01e      	b.n	8004cfa <HAL_ADC_ConfigChannel+0x382>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fe44 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cd2:	fa93 f3a3 	rbit	r3, r3
 8004cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8004cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d101      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8004cea:	2320      	movs	r3, #32
 8004cec:	e004      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cf2:	fab3 f383 	clz	r3, r3
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d105      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x39a>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	0e9b      	lsrs	r3, r3, #26
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	e018      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x3cc>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d1e:	fa93 f3a3 	rbit	r3, r3
 8004d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004d36:	2320      	movs	r3, #32
 8004d38:	e004      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d3e:	fab3 f383 	clz	r3, r3
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d106      	bne.n	8004d56 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2101      	movs	r1, #1
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fe fe93 	bl	8003a7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2102      	movs	r1, #2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe fdf7 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10a      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x40a>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2102      	movs	r1, #2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fe fdec 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	0e9b      	lsrs	r3, r3, #26
 8004d7c:	f003 021f 	and.w	r2, r3, #31
 8004d80:	e01e      	b.n	8004dc0 <HAL_ADC_ConfigChannel+0x448>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2102      	movs	r1, #2
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe fde1 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d98:	fa93 f3a3 	rbit	r3, r3
 8004d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004da4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004db0:	2320      	movs	r3, #32
 8004db2:	e004      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004db8:	fab3 f383 	clz	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d105      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x460>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	0e9b      	lsrs	r3, r3, #26
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	e014      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x48a>
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004de0:	fa93 f3a3 	rbit	r3, r3
 8004de4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004df4:	2320      	movs	r3, #32
 8004df6:	e004      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d106      	bne.n	8004e14 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fe34 	bl	8003a7c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2103      	movs	r1, #3
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fe fd98 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x4c8>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2103      	movs	r1, #3
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fe fd8d 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004e36:	4603      	mov	r3, r0
 8004e38:	0e9b      	lsrs	r3, r3, #26
 8004e3a:	f003 021f 	and.w	r2, r3, #31
 8004e3e:	e017      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x4f8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2103      	movs	r1, #3
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe fd82 	bl	8003950 <LL_ADC_GetOffsetChannel>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e52:	fa93 f3a3 	rbit	r3, r3
 8004e56:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004e62:	2320      	movs	r3, #32
 8004e64:	e003      	b.n	8004e6e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e68:	fab3 f383 	clz	r3, r3
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x510>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	0e9b      	lsrs	r3, r3, #26
 8004e82:	f003 031f 	and.w	r3, r3, #31
 8004e86:	e011      	b.n	8004eac <HAL_ADC_ConfigChannel+0x534>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e90:	fa93 f3a3 	rbit	r3, r3
 8004e94:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e98:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004e9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004ea0:	2320      	movs	r3, #32
 8004ea2:	e003      	b.n	8004eac <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea6:	fab3 f383 	clz	r3, r3
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d14f      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2103      	movs	r1, #3
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fe fddf 	bl	8003a7c <LL_ADC_SetOffsetState>
 8004ebe:	e047      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	069b      	lsls	r3, r3, #26
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d107      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ee2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	069b      	lsls	r3, r3, #26
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d107      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f06:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	069b      	lsls	r3, r3, #26
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d107      	bne.n	8004f2c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f2a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	069b      	lsls	r3, r3, #26
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d107      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004f4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fe ff0b 	bl	8003d70 <LL_ADC_IsEnabled>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f040 8219 	bne.w	8005394 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6819      	ldr	r1, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fe fe2c 	bl	8003bcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	4aa1      	ldr	r2, [pc, #644]	; (8005200 <HAL_ADC_ConfigChannel+0x888>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	f040 812e 	bne.w	80051dc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <HAL_ADC_ConfigChannel+0x630>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	0e9b      	lsrs	r3, r3, #26
 8004f96:	3301      	adds	r3, #1
 8004f98:	f003 031f 	and.w	r3, r3, #31
 8004f9c:	2b09      	cmp	r3, #9
 8004f9e:	bf94      	ite	ls
 8004fa0:	2301      	movls	r3, #1
 8004fa2:	2300      	movhi	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	e019      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x664>
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004fc0:	2320      	movs	r3, #32
 8004fc2:	e003      	b.n	8004fcc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc6:	fab3 f383 	clz	r3, r3
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2b09      	cmp	r3, #9
 8004fd4:	bf94      	ite	ls
 8004fd6:	2301      	movls	r3, #1
 8004fd8:	2300      	movhi	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d079      	beq.n	80050d4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d107      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x684>
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	0e9b      	lsrs	r3, r3, #26
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	069b      	lsls	r3, r3, #26
 8004ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ffa:	e015      	b.n	8005028 <HAL_ADC_ConfigChannel+0x6b0>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005004:	fa93 f3a3 	rbit	r3, r3
 8005008:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800500a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800500e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005014:	2320      	movs	r3, #32
 8005016:	e003      	b.n	8005020 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3301      	adds	r3, #1
 8005022:	069b      	lsls	r3, r3, #26
 8005024:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005030:	2b00      	cmp	r3, #0
 8005032:	d109      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x6d0>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	0e9b      	lsrs	r3, r3, #26
 800503a:	3301      	adds	r3, #1
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	2101      	movs	r1, #1
 8005042:	fa01 f303 	lsl.w	r3, r1, r3
 8005046:	e017      	b.n	8005078 <HAL_ADC_ConfigChannel+0x700>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800504e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005050:	fa93 f3a3 	rbit	r3, r3
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005058:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800505a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005060:	2320      	movs	r3, #32
 8005062:	e003      	b.n	800506c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005066:	fab3 f383 	clz	r3, r3
 800506a:	b2db      	uxtb	r3, r3
 800506c:	3301      	adds	r3, #1
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2101      	movs	r1, #1
 8005074:	fa01 f303 	lsl.w	r3, r1, r3
 8005078:	ea42 0103 	orr.w	r1, r2, r3
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <HAL_ADC_ConfigChannel+0x726>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	0e9b      	lsrs	r3, r3, #26
 800508e:	3301      	adds	r3, #1
 8005090:	f003 021f 	and.w	r2, r3, #31
 8005094:	4613      	mov	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	4413      	add	r3, r2
 800509a:	051b      	lsls	r3, r3, #20
 800509c:	e018      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x758>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a6:	fa93 f3a3 	rbit	r3, r3
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80050ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80050b6:	2320      	movs	r3, #32
 80050b8:	e003      	b.n	80050c2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050bc:	fab3 f383 	clz	r3, r3
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	3301      	adds	r3, #1
 80050c4:	f003 021f 	and.w	r2, r3, #31
 80050c8:	4613      	mov	r3, r2
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	4413      	add	r3, r2
 80050ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050d0:	430b      	orrs	r3, r1
 80050d2:	e07e      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d107      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x778>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	0e9b      	lsrs	r3, r3, #26
 80050e6:	3301      	adds	r3, #1
 80050e8:	069b      	lsls	r3, r3, #26
 80050ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ee:	e015      	b.n	800511c <HAL_ADC_ConfigChannel+0x7a4>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f8:	fa93 f3a3 	rbit	r3, r3
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005108:	2320      	movs	r3, #32
 800510a:	e003      	b.n	8005114 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800510c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510e:	fab3 f383 	clz	r3, r3
 8005112:	b2db      	uxtb	r3, r3
 8005114:	3301      	adds	r3, #1
 8005116:	069b      	lsls	r3, r3, #26
 8005118:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <HAL_ADC_ConfigChannel+0x7c4>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	0e9b      	lsrs	r3, r3, #26
 800512e:	3301      	adds	r3, #1
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2101      	movs	r1, #1
 8005136:	fa01 f303 	lsl.w	r3, r1, r3
 800513a:	e017      	b.n	800516c <HAL_ADC_ConfigChannel+0x7f4>
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	fa93 f3a3 	rbit	r3, r3
 8005148:	61bb      	str	r3, [r7, #24]
  return result;
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005154:	2320      	movs	r3, #32
 8005156:	e003      	b.n	8005160 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	fab3 f383 	clz	r3, r3
 800515e:	b2db      	uxtb	r3, r3
 8005160:	3301      	adds	r3, #1
 8005162:	f003 031f 	and.w	r3, r3, #31
 8005166:	2101      	movs	r1, #1
 8005168:	fa01 f303 	lsl.w	r3, r1, r3
 800516c:	ea42 0103 	orr.w	r1, r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10d      	bne.n	8005198 <HAL_ADC_ConfigChannel+0x820>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	0e9b      	lsrs	r3, r3, #26
 8005182:	3301      	adds	r3, #1
 8005184:	f003 021f 	and.w	r2, r3, #31
 8005188:	4613      	mov	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4413      	add	r3, r2
 800518e:	3b1e      	subs	r3, #30
 8005190:	051b      	lsls	r3, r3, #20
 8005192:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005196:	e01b      	b.n	80051d0 <HAL_ADC_ConfigChannel+0x858>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	fa93 f3a3 	rbit	r3, r3
 80051a4:	60fb      	str	r3, [r7, #12]
  return result;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d101      	bne.n	80051b4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80051b0:	2320      	movs	r3, #32
 80051b2:	e003      	b.n	80051bc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	fab3 f383 	clz	r3, r3
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	3301      	adds	r3, #1
 80051be:	f003 021f 	and.w	r2, r3, #31
 80051c2:	4613      	mov	r3, r2
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	4413      	add	r3, r2
 80051c8:	3b1e      	subs	r3, #30
 80051ca:	051b      	lsls	r3, r3, #20
 80051cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051d0:	430b      	orrs	r3, r1
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	6892      	ldr	r2, [r2, #8]
 80051d6:	4619      	mov	r1, r3
 80051d8:	f7fe fccc 	bl	8003b74 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f280 80d7 	bge.w	8005394 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a06      	ldr	r2, [pc, #24]	; (8005204 <HAL_ADC_ConfigChannel+0x88c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d004      	beq.n	80051fa <HAL_ADC_ConfigChannel+0x882>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a04      	ldr	r2, [pc, #16]	; (8005208 <HAL_ADC_ConfigChannel+0x890>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10a      	bne.n	8005210 <HAL_ADC_ConfigChannel+0x898>
 80051fa:	4b04      	ldr	r3, [pc, #16]	; (800520c <HAL_ADC_ConfigChannel+0x894>)
 80051fc:	e009      	b.n	8005212 <HAL_ADC_ConfigChannel+0x89a>
 80051fe:	bf00      	nop
 8005200:	47ff0000 	.word	0x47ff0000
 8005204:	40022000 	.word	0x40022000
 8005208:	40022100 	.word	0x40022100
 800520c:	40022300 	.word	0x40022300
 8005210:	4b65      	ldr	r3, [pc, #404]	; (80053a8 <HAL_ADC_ConfigChannel+0xa30>)
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe fb5c 	bl	80038d0 <LL_ADC_GetCommonPathInternalCh>
 8005218:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a62      	ldr	r2, [pc, #392]	; (80053ac <HAL_ADC_ConfigChannel+0xa34>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_ADC_ConfigChannel+0x8b8>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a61      	ldr	r2, [pc, #388]	; (80053b0 <HAL_ADC_ConfigChannel+0xa38>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d10e      	bne.n	800524e <HAL_ADC_ConfigChannel+0x8d6>
 8005230:	485e      	ldr	r0, [pc, #376]	; (80053ac <HAL_ADC_ConfigChannel+0xa34>)
 8005232:	f7fe fd9d 	bl	8003d70 <LL_ADC_IsEnabled>
 8005236:	4604      	mov	r4, r0
 8005238:	485d      	ldr	r0, [pc, #372]	; (80053b0 <HAL_ADC_ConfigChannel+0xa38>)
 800523a:	f7fe fd99 	bl	8003d70 <LL_ADC_IsEnabled>
 800523e:	4603      	mov	r3, r0
 8005240:	4323      	orrs	r3, r4
 8005242:	2b00      	cmp	r3, #0
 8005244:	bf0c      	ite	eq
 8005246:	2301      	moveq	r3, #1
 8005248:	2300      	movne	r3, #0
 800524a:	b2db      	uxtb	r3, r3
 800524c:	e008      	b.n	8005260 <HAL_ADC_ConfigChannel+0x8e8>
 800524e:	4859      	ldr	r0, [pc, #356]	; (80053b4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005250:	f7fe fd8e 	bl	8003d70 <LL_ADC_IsEnabled>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf0c      	ite	eq
 800525a:	2301      	moveq	r3, #1
 800525c:	2300      	movne	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8084 	beq.w	800536e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a53      	ldr	r2, [pc, #332]	; (80053b8 <HAL_ADC_ConfigChannel+0xa40>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d132      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x95e>
 8005270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d12c      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a4c      	ldr	r2, [pc, #304]	; (80053b4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	f040 8086 	bne.w	8005394 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a47      	ldr	r2, [pc, #284]	; (80053ac <HAL_ADC_ConfigChannel+0xa34>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_ADC_ConfigChannel+0x924>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a46      	ldr	r2, [pc, #280]	; (80053b0 <HAL_ADC_ConfigChannel+0xa38>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d101      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x928>
 800529c:	4a47      	ldr	r2, [pc, #284]	; (80053bc <HAL_ADC_ConfigChannel+0xa44>)
 800529e:	e000      	b.n	80052a2 <HAL_ADC_ConfigChannel+0x92a>
 80052a0:	4a41      	ldr	r2, [pc, #260]	; (80053a8 <HAL_ADC_ConfigChannel+0xa30>)
 80052a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052aa:	4619      	mov	r1, r3
 80052ac:	4610      	mov	r0, r2
 80052ae:	f7fe fafc 	bl	80038aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052b2:	4b43      	ldr	r3, [pc, #268]	; (80053c0 <HAL_ADC_ConfigChannel+0xa48>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	4a42      	ldr	r2, [pc, #264]	; (80053c4 <HAL_ADC_ConfigChannel+0xa4c>)
 80052ba:	fba2 2303 	umull	r2, r3, r2, r3
 80052be:	099b      	lsrs	r3, r3, #6
 80052c0:	3301      	adds	r3, #1
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80052c6:	e002      	b.n	80052ce <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	3b01      	subs	r3, #1
 80052cc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f9      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052d4:	e05e      	b.n	8005394 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a3b      	ldr	r2, [pc, #236]	; (80053c8 <HAL_ADC_ConfigChannel+0xa50>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d120      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x9aa>
 80052e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d11a      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a30      	ldr	r2, [pc, #192]	; (80053b4 <HAL_ADC_ConfigChannel+0xa3c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d14e      	bne.n	8005394 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a2c      	ldr	r2, [pc, #176]	; (80053ac <HAL_ADC_ConfigChannel+0xa34>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_ADC_ConfigChannel+0x992>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a2a      	ldr	r2, [pc, #168]	; (80053b0 <HAL_ADC_ConfigChannel+0xa38>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <HAL_ADC_ConfigChannel+0x996>
 800530a:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <HAL_ADC_ConfigChannel+0xa44>)
 800530c:	e000      	b.n	8005310 <HAL_ADC_ConfigChannel+0x998>
 800530e:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <HAL_ADC_ConfigChannel+0xa30>)
 8005310:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005314:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f7fe fac5 	bl	80038aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005320:	e038      	b.n	8005394 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a29      	ldr	r2, [pc, #164]	; (80053cc <HAL_ADC_ConfigChannel+0xa54>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d133      	bne.n	8005394 <HAL_ADC_ConfigChannel+0xa1c>
 800532c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d12d      	bne.n	8005394 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1d      	ldr	r2, [pc, #116]	; (80053b4 <HAL_ADC_ConfigChannel+0xa3c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d128      	bne.n	8005394 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a19      	ldr	r2, [pc, #100]	; (80053ac <HAL_ADC_ConfigChannel+0xa34>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d004      	beq.n	8005356 <HAL_ADC_ConfigChannel+0x9de>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <HAL_ADC_ConfigChannel+0xa38>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d101      	bne.n	800535a <HAL_ADC_ConfigChannel+0x9e2>
 8005356:	4a19      	ldr	r2, [pc, #100]	; (80053bc <HAL_ADC_ConfigChannel+0xa44>)
 8005358:	e000      	b.n	800535c <HAL_ADC_ConfigChannel+0x9e4>
 800535a:	4a13      	ldr	r2, [pc, #76]	; (80053a8 <HAL_ADC_ConfigChannel+0xa30>)
 800535c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005360:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f7fe fa9f 	bl	80038aa <LL_ADC_SetCommonPathInternalCh>
 800536c:	e012      	b.n	8005394 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005372:	f043 0220 	orr.w	r2, r3, #32
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005380:	e008      	b.n	8005394 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800539c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	37e4      	adds	r7, #228	; 0xe4
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd90      	pop	{r4, r7, pc}
 80053a8:	58026300 	.word	0x58026300
 80053ac:	40022000 	.word	0x40022000
 80053b0:	40022100 	.word	0x40022100
 80053b4:	58026000 	.word	0x58026000
 80053b8:	c7520000 	.word	0xc7520000
 80053bc:	40022300 	.word	0x40022300
 80053c0:	20000000 	.word	0x20000000
 80053c4:	053e2d63 	.word	0x053e2d63
 80053c8:	c3210000 	.word	0xc3210000
 80053cc:	cb840000 	.word	0xcb840000

080053d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe fcc7 	bl	8003d70 <LL_ADC_IsEnabled>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d16e      	bne.n	80054c6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	4b38      	ldr	r3, [pc, #224]	; (80054d0 <ADC_Enable+0x100>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00d      	beq.n	8005412 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053fa:	f043 0210 	orr.w	r2, r3, #16
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005406:	f043 0201 	orr.w	r2, r3, #1
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e05a      	b.n	80054c8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fc82 	bl	8003d20 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800541c:	f7fe fa26 	bl	800386c <HAL_GetTick>
 8005420:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a2b      	ldr	r2, [pc, #172]	; (80054d4 <ADC_Enable+0x104>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <ADC_Enable+0x66>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a29      	ldr	r2, [pc, #164]	; (80054d8 <ADC_Enable+0x108>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d101      	bne.n	800543a <ADC_Enable+0x6a>
 8005436:	4b29      	ldr	r3, [pc, #164]	; (80054dc <ADC_Enable+0x10c>)
 8005438:	e000      	b.n	800543c <ADC_Enable+0x6c>
 800543a:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <ADC_Enable+0x110>)
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fc05 	bl	8003c4c <LL_ADC_GetMultimode>
 8005442:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a23      	ldr	r2, [pc, #140]	; (80054d8 <ADC_Enable+0x108>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d002      	beq.n	8005454 <ADC_Enable+0x84>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	e000      	b.n	8005456 <ADC_Enable+0x86>
 8005454:	4b1f      	ldr	r3, [pc, #124]	; (80054d4 <ADC_Enable+0x104>)
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6812      	ldr	r2, [r2, #0]
 800545a:	4293      	cmp	r3, r2
 800545c:	d02c      	beq.n	80054b8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d130      	bne.n	80054c6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005464:	e028      	b.n	80054b8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fc80 	bl	8003d70 <LL_ADC_IsEnabled>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4618      	mov	r0, r3
 800547c:	f7fe fc50 	bl	8003d20 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005480:	f7fe f9f4 	bl	800386c <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d914      	bls.n	80054b8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b01      	cmp	r3, #1
 800549a:	d00d      	beq.n	80054b8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054a0:	f043 0210 	orr.w	r2, r3, #16
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ac:	f043 0201 	orr.w	r2, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e007      	b.n	80054c8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d1cf      	bne.n	8005466 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	8000003f 	.word	0x8000003f
 80054d4:	40022000 	.word	0x40022000
 80054d8:	40022100 	.word	0x40022100
 80054dc:	40022300 	.word	0x40022300
 80054e0:	58026300 	.word	0x58026300

080054e4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fe fc50 	bl	8003d96 <LL_ADC_IsDisableOngoing>
 80054f6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fe fc37 	bl	8003d70 <LL_ADC_IsEnabled>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d047      	beq.n	8005598 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d144      	bne.n	8005598 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 030d 	and.w	r3, r3, #13
 8005518:	2b01      	cmp	r3, #1
 800551a:	d10c      	bne.n	8005536 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe fc11 	bl	8003d48 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2203      	movs	r2, #3
 800552c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800552e:	f7fe f99d 	bl	800386c <HAL_GetTick>
 8005532:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005534:	e029      	b.n	800558a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	f043 0210 	orr.w	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005546:	f043 0201 	orr.w	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e023      	b.n	800559a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005552:	f7fe f98b 	bl	800386c <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d914      	bls.n	800558a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00d      	beq.n	800558a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005572:	f043 0210 	orr.w	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557e:	f043 0201 	orr.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e007      	b.n	800559a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1dc      	bne.n	8005552 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
	...

080055a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a6b      	ldr	r2, [pc, #428]	; (8005760 <ADC_ConfigureBoostMode+0x1bc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <ADC_ConfigureBoostMode+0x1c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a6a      	ldr	r2, [pc, #424]	; (8005764 <ADC_ConfigureBoostMode+0x1c0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d109      	bne.n	80055d4 <ADC_ConfigureBoostMode+0x30>
 80055c0:	4b69      	ldr	r3, [pc, #420]	; (8005768 <ADC_ConfigureBoostMode+0x1c4>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	bf14      	ite	ne
 80055cc:	2301      	movne	r3, #1
 80055ce:	2300      	moveq	r3, #0
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e008      	b.n	80055e6 <ADC_ConfigureBoostMode+0x42>
 80055d4:	4b65      	ldr	r3, [pc, #404]	; (800576c <ADC_ConfigureBoostMode+0x1c8>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bf14      	ite	ne
 80055e0:	2301      	movne	r3, #1
 80055e2:	2300      	moveq	r3, #0
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d01c      	beq.n	8005624 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80055ea:	f003 fe79 	bl	80092e0 <HAL_RCC_GetHCLKFreq>
 80055ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055f8:	d010      	beq.n	800561c <ADC_ConfigureBoostMode+0x78>
 80055fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80055fe:	d871      	bhi.n	80056e4 <ADC_ConfigureBoostMode+0x140>
 8005600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005604:	d002      	beq.n	800560c <ADC_ConfigureBoostMode+0x68>
 8005606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560a:	d16b      	bne.n	80056e4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	0c1b      	lsrs	r3, r3, #16
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	60fb      	str	r3, [r7, #12]
        break;
 800561a:	e066      	b.n	80056ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	089b      	lsrs	r3, r3, #2
 8005620:	60fb      	str	r3, [r7, #12]
        break;
 8005622:	e062      	b.n	80056ea <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005624:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005628:	f004 fdb0 	bl	800a18c <HAL_RCCEx_GetPeriphCLKFreq>
 800562c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005636:	d051      	beq.n	80056dc <ADC_ConfigureBoostMode+0x138>
 8005638:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800563c:	d854      	bhi.n	80056e8 <ADC_ConfigureBoostMode+0x144>
 800563e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005642:	d047      	beq.n	80056d4 <ADC_ConfigureBoostMode+0x130>
 8005644:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005648:	d84e      	bhi.n	80056e8 <ADC_ConfigureBoostMode+0x144>
 800564a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800564e:	d03d      	beq.n	80056cc <ADC_ConfigureBoostMode+0x128>
 8005650:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005654:	d848      	bhi.n	80056e8 <ADC_ConfigureBoostMode+0x144>
 8005656:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800565a:	d033      	beq.n	80056c4 <ADC_ConfigureBoostMode+0x120>
 800565c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005660:	d842      	bhi.n	80056e8 <ADC_ConfigureBoostMode+0x144>
 8005662:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005666:	d029      	beq.n	80056bc <ADC_ConfigureBoostMode+0x118>
 8005668:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800566c:	d83c      	bhi.n	80056e8 <ADC_ConfigureBoostMode+0x144>
 800566e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005672:	d01a      	beq.n	80056aa <ADC_ConfigureBoostMode+0x106>
 8005674:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005678:	d836      	bhi.n	80056e8 <ADC_ConfigureBoostMode+0x144>
 800567a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800567e:	d014      	beq.n	80056aa <ADC_ConfigureBoostMode+0x106>
 8005680:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005684:	d830      	bhi.n	80056e8 <ADC_ConfigureBoostMode+0x144>
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800568a:	d00e      	beq.n	80056aa <ADC_ConfigureBoostMode+0x106>
 800568c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005690:	d82a      	bhi.n	80056e8 <ADC_ConfigureBoostMode+0x144>
 8005692:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005696:	d008      	beq.n	80056aa <ADC_ConfigureBoostMode+0x106>
 8005698:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800569c:	d824      	bhi.n	80056e8 <ADC_ConfigureBoostMode+0x144>
 800569e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056a2:	d002      	beq.n	80056aa <ADC_ConfigureBoostMode+0x106>
 80056a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056a8:	d11e      	bne.n	80056e8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	0c9b      	lsrs	r3, r3, #18
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	60fb      	str	r3, [r7, #12]
        break;
 80056ba:	e016      	b.n	80056ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	60fb      	str	r3, [r7, #12]
        break;
 80056c2:	e012      	b.n	80056ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	60fb      	str	r3, [r7, #12]
        break;
 80056ca:	e00e      	b.n	80056ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	099b      	lsrs	r3, r3, #6
 80056d0:	60fb      	str	r3, [r7, #12]
        break;
 80056d2:	e00a      	b.n	80056ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	09db      	lsrs	r3, r3, #7
 80056d8:	60fb      	str	r3, [r7, #12]
        break;
 80056da:	e006      	b.n	80056ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	0a1b      	lsrs	r3, r3, #8
 80056e0:	60fb      	str	r3, [r7, #12]
        break;
 80056e2:	e002      	b.n	80056ea <ADC_ConfigureBoostMode+0x146>
        break;
 80056e4:	bf00      	nop
 80056e6:	e000      	b.n	80056ea <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80056e8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	085b      	lsrs	r3, r3, #1
 80056ee:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <ADC_ConfigureBoostMode+0x1cc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d808      	bhi.n	800570a <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005706:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005708:	e025      	b.n	8005756 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a19      	ldr	r2, [pc, #100]	; (8005774 <ADC_ConfigureBoostMode+0x1d0>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d80a      	bhi.n	8005728 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005724:	609a      	str	r2, [r3, #8]
}
 8005726:	e016      	b.n	8005756 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4a13      	ldr	r2, [pc, #76]	; (8005778 <ADC_ConfigureBoostMode+0x1d4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d80a      	bhi.n	8005746 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005742:	609a      	str	r2, [r3, #8]
}
 8005744:	e007      	b.n	8005756 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	689a      	ldr	r2, [r3, #8]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005754:	609a      	str	r2, [r3, #8]
}
 8005756:	bf00      	nop
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40022000 	.word	0x40022000
 8005764:	40022100 	.word	0x40022100
 8005768:	40022300 	.word	0x40022300
 800576c:	58026300 	.word	0x58026300
 8005770:	005f5e10 	.word	0x005f5e10
 8005774:	00bebc20 	.word	0x00bebc20
 8005778:	017d7840 	.word	0x017d7840

0800577c <LL_ADC_StartCalibration>:
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <LL_ADC_StartCalibration+0x38>)
 800578e:	4013      	ands	r3, r2
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800579c:	430a      	orrs	r2, r1
 800579e:	4313      	orrs	r3, r2
 80057a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	609a      	str	r2, [r3, #8]
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	3ffeffc0 	.word	0x3ffeffc0

080057b8 <LL_ADC_IsCalibrationOnGoing>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057cc:	d101      	bne.n	80057d2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80057ec:	2300      	movs	r3, #0
 80057ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_ADCEx_Calibration_Start+0x1e>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e04c      	b.n	8005898 <HAL_ADCEx_Calibration_Start+0xb8>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005806:	68f8      	ldr	r0, [r7, #12]
 8005808:	f7ff fe6c 	bl	80054e4 <ADC_Disable>
 800580c:	4603      	mov	r3, r0
 800580e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005810:	7dfb      	ldrb	r3, [r7, #23]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d135      	bne.n	8005882 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800581a:	4b21      	ldr	r3, [pc, #132]	; (80058a0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800581c:	4013      	ands	r3, r2
 800581e:	f043 0202 	orr.w	r2, r3, #2
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	4618      	mov	r0, r3
 8005830:	f7ff ffa4 	bl	800577c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005834:	e014      	b.n	8005860 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	3301      	adds	r3, #1
 800583a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d30d      	bcc.n	8005860 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005848:	f023 0312 	bic.w	r3, r3, #18
 800584c:	f043 0210 	orr.w	r2, r3, #16
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e01b      	b.n	8005898 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff ffa7 	bl	80057b8 <LL_ADC_IsCalibrationOnGoing>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1e2      	bne.n	8005836 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005874:	f023 0303 	bic.w	r3, r3, #3
 8005878:	f043 0201 	orr.w	r2, r3, #1
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	661a      	str	r2, [r3, #96]	; 0x60
 8005880:	e005      	b.n	800588e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005886:	f043 0210 	orr.w	r2, r3, #16
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	ffffeefd 	.word	0xffffeefd
 80058a4:	25c3f800 	.word	0x25c3f800

080058a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <__NVIC_SetPriorityGrouping+0x40>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005928:	4013      	ands	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <__NVIC_SetPriorityGrouping+0x44>)
 8005936:	4313      	orrs	r3, r2
 8005938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800593a:	4a04      	ldr	r2, [pc, #16]	; (800594c <__NVIC_SetPriorityGrouping+0x40>)
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	60d3      	str	r3, [r2, #12]
}
 8005940:	bf00      	nop
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	e000ed00 	.word	0xe000ed00
 8005950:	05fa0000 	.word	0x05fa0000

08005954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005958:	4b04      	ldr	r3, [pc, #16]	; (800596c <__NVIC_GetPriorityGrouping+0x18>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	0a1b      	lsrs	r3, r3, #8
 800595e:	f003 0307 	and.w	r3, r3, #7
}
 8005962:	4618      	mov	r0, r3
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	e000ed00 	.word	0xe000ed00

08005970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	4603      	mov	r3, r0
 8005978:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800597a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800597e:	2b00      	cmp	r3, #0
 8005980:	db0b      	blt.n	800599a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005982:	88fb      	ldrh	r3, [r7, #6]
 8005984:	f003 021f 	and.w	r2, r3, #31
 8005988:	4907      	ldr	r1, [pc, #28]	; (80059a8 <__NVIC_EnableIRQ+0x38>)
 800598a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	2001      	movs	r0, #1
 8005992:	fa00 f202 	lsl.w	r2, r0, r2
 8005996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	e000e100 	.word	0xe000e100

080059ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	6039      	str	r1, [r7, #0]
 80059b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80059b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	db0a      	blt.n	80059d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	490c      	ldr	r1, [pc, #48]	; (80059f8 <__NVIC_SetPriority+0x4c>)
 80059c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059ca:	0112      	lsls	r2, r2, #4
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	440b      	add	r3, r1
 80059d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059d4:	e00a      	b.n	80059ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	4908      	ldr	r1, [pc, #32]	; (80059fc <__NVIC_SetPriority+0x50>)
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	3b04      	subs	r3, #4
 80059e4:	0112      	lsls	r2, r2, #4
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	440b      	add	r3, r1
 80059ea:	761a      	strb	r2, [r3, #24]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	e000e100 	.word	0xe000e100
 80059fc:	e000ed00 	.word	0xe000ed00

08005a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b089      	sub	sp, #36	; 0x24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 0307 	and.w	r3, r3, #7
 8005a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	f1c3 0307 	rsb	r3, r3, #7
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	bf28      	it	cs
 8005a1e:	2304      	movcs	r3, #4
 8005a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	3304      	adds	r3, #4
 8005a26:	2b06      	cmp	r3, #6
 8005a28:	d902      	bls.n	8005a30 <NVIC_EncodePriority+0x30>
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3b03      	subs	r3, #3
 8005a2e:	e000      	b.n	8005a32 <NVIC_EncodePriority+0x32>
 8005a30:	2300      	movs	r3, #0
 8005a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a34:	f04f 32ff 	mov.w	r2, #4294967295
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	43da      	mvns	r2, r3
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	401a      	ands	r2, r3
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a48:	f04f 31ff 	mov.w	r1, #4294967295
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a52:	43d9      	mvns	r1, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a58:	4313      	orrs	r3, r2
         );
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3724      	adds	r7, #36	; 0x24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a78:	d301      	bcc.n	8005a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e00f      	b.n	8005a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a7e:	4a0a      	ldr	r2, [pc, #40]	; (8005aa8 <SysTick_Config+0x40>)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a86:	210f      	movs	r1, #15
 8005a88:	f04f 30ff 	mov.w	r0, #4294967295
 8005a8c:	f7ff ff8e 	bl	80059ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a90:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <SysTick_Config+0x40>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a96:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <SysTick_Config+0x40>)
 8005a98:	2207      	movs	r2, #7
 8005a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	e000e010 	.word	0xe000e010

08005aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f7ff ff29 	bl	800590c <__NVIC_SetPriorityGrouping>
}
 8005aba:	bf00      	nop
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b086      	sub	sp, #24
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	4603      	mov	r3, r0
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
 8005ace:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ad0:	f7ff ff40 	bl	8005954 <__NVIC_GetPriorityGrouping>
 8005ad4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	68b9      	ldr	r1, [r7, #8]
 8005ada:	6978      	ldr	r0, [r7, #20]
 8005adc:	f7ff ff90 	bl	8005a00 <NVIC_EncodePriority>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff ff5f 	bl	80059ac <__NVIC_SetPriority>
}
 8005aee:	bf00      	nop
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	4603      	mov	r3, r0
 8005afe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7ff ff33 	bl	8005970 <__NVIC_EnableIRQ>
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff ffa4 	bl	8005a68 <SysTick_Config>
 8005b20:	4603      	mov	r3, r0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e054      	b.n	8005be8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	7f5b      	ldrb	r3, [r3, #29]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d105      	bne.n	8005b54 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fb fbc0 	bl	80012d4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	791b      	ldrb	r3, [r3, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10c      	bne.n	8005b7c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <HAL_CRC_Init+0xc4>)
 8005b68:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f022 0218 	bic.w	r2, r2, #24
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	e00c      	b.n	8005b96 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6899      	ldr	r1, [r3, #8]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f834 	bl	8005bf4 <HAL_CRCEx_Polynomial_Set>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e028      	b.n	8005be8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	795b      	ldrb	r3, [r3, #5]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d105      	bne.n	8005baa <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba6:	611a      	str	r2, [r3, #16]
 8005ba8:	e004      	b.n	8005bb4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6912      	ldr	r2, [r2, #16]
 8005bb2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695a      	ldr	r2, [r3, #20]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	04c11db7 	.word	0x04c11db7

08005bf4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c00:	2300      	movs	r3, #0
 8005c02:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005c04:	231f      	movs	r3, #31
 8005c06:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005c08:	bf00      	nop
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1e5a      	subs	r2, r3, #1
 8005c0e:	613a      	str	r2, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <HAL_CRCEx_Polynomial_Set+0x34>
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d0f0      	beq.n	8005c0a <HAL_CRCEx_Polynomial_Set+0x16>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b18      	cmp	r3, #24
 8005c2c:	d846      	bhi.n	8005cbc <HAL_CRCEx_Polynomial_Set+0xc8>
 8005c2e:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	08005cc3 	.word	0x08005cc3
 8005c38:	08005cbd 	.word	0x08005cbd
 8005c3c:	08005cbd 	.word	0x08005cbd
 8005c40:	08005cbd 	.word	0x08005cbd
 8005c44:	08005cbd 	.word	0x08005cbd
 8005c48:	08005cbd 	.word	0x08005cbd
 8005c4c:	08005cbd 	.word	0x08005cbd
 8005c50:	08005cbd 	.word	0x08005cbd
 8005c54:	08005cb1 	.word	0x08005cb1
 8005c58:	08005cbd 	.word	0x08005cbd
 8005c5c:	08005cbd 	.word	0x08005cbd
 8005c60:	08005cbd 	.word	0x08005cbd
 8005c64:	08005cbd 	.word	0x08005cbd
 8005c68:	08005cbd 	.word	0x08005cbd
 8005c6c:	08005cbd 	.word	0x08005cbd
 8005c70:	08005cbd 	.word	0x08005cbd
 8005c74:	08005ca5 	.word	0x08005ca5
 8005c78:	08005cbd 	.word	0x08005cbd
 8005c7c:	08005cbd 	.word	0x08005cbd
 8005c80:	08005cbd 	.word	0x08005cbd
 8005c84:	08005cbd 	.word	0x08005cbd
 8005c88:	08005cbd 	.word	0x08005cbd
 8005c8c:	08005cbd 	.word	0x08005cbd
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	08005c99 	.word	0x08005c99
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b06      	cmp	r3, #6
 8005c9c:	d913      	bls.n	8005cc6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005ca2:	e010      	b.n	8005cc6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2b07      	cmp	r3, #7
 8005ca8:	d90f      	bls.n	8005cca <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cae:	e00c      	b.n	8005cca <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2b0f      	cmp	r3, #15
 8005cb4:	d90b      	bls.n	8005cce <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cba:	e008      	b.n	8005cce <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8005cc0:	e006      	b.n	8005cd0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005cc2:	bf00      	nop
 8005cc4:	e004      	b.n	8005cd0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005cc6:	bf00      	nop
 8005cc8:	e002      	b.n	8005cd0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005cca:	bf00      	nop
 8005ccc:	e000      	b.n	8005cd0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005cce:	bf00      	nop
  }
  if (status == HAL_OK)
 8005cd0:	7dfb      	ldrb	r3, [r7, #23]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10d      	bne.n	8005cf2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f023 0118 	bic.w	r1, r3, #24
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d08:	f7fd fdb0 	bl	800386c <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e314      	b.n	8006342 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a66      	ldr	r2, [pc, #408]	; (8005eb8 <HAL_DMA_Init+0x1b8>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d04a      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a65      	ldr	r2, [pc, #404]	; (8005ebc <HAL_DMA_Init+0x1bc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d045      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a63      	ldr	r2, [pc, #396]	; (8005ec0 <HAL_DMA_Init+0x1c0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d040      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a62      	ldr	r2, [pc, #392]	; (8005ec4 <HAL_DMA_Init+0x1c4>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d03b      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a60      	ldr	r2, [pc, #384]	; (8005ec8 <HAL_DMA_Init+0x1c8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d036      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a5f      	ldr	r2, [pc, #380]	; (8005ecc <HAL_DMA_Init+0x1cc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d031      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5d      	ldr	r2, [pc, #372]	; (8005ed0 <HAL_DMA_Init+0x1d0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d02c      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a5c      	ldr	r2, [pc, #368]	; (8005ed4 <HAL_DMA_Init+0x1d4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d027      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a5a      	ldr	r2, [pc, #360]	; (8005ed8 <HAL_DMA_Init+0x1d8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d022      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a59      	ldr	r2, [pc, #356]	; (8005edc <HAL_DMA_Init+0x1dc>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d01d      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a57      	ldr	r2, [pc, #348]	; (8005ee0 <HAL_DMA_Init+0x1e0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d018      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a56      	ldr	r2, [pc, #344]	; (8005ee4 <HAL_DMA_Init+0x1e4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d013      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a54      	ldr	r2, [pc, #336]	; (8005ee8 <HAL_DMA_Init+0x1e8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00e      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a53      	ldr	r2, [pc, #332]	; (8005eec <HAL_DMA_Init+0x1ec>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d009      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a51      	ldr	r2, [pc, #324]	; (8005ef0 <HAL_DMA_Init+0x1f0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <HAL_DMA_Init+0xb8>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a50      	ldr	r2, [pc, #320]	; (8005ef4 <HAL_DMA_Init+0x1f4>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d101      	bne.n	8005dbc <HAL_DMA_Init+0xbc>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e000      	b.n	8005dbe <HAL_DMA_Init+0xbe>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 813c 	beq.w	800603c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a37      	ldr	r2, [pc, #220]	; (8005eb8 <HAL_DMA_Init+0x1b8>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d04a      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a36      	ldr	r2, [pc, #216]	; (8005ebc <HAL_DMA_Init+0x1bc>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d045      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a34      	ldr	r2, [pc, #208]	; (8005ec0 <HAL_DMA_Init+0x1c0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d040      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a33      	ldr	r2, [pc, #204]	; (8005ec4 <HAL_DMA_Init+0x1c4>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d03b      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a31      	ldr	r2, [pc, #196]	; (8005ec8 <HAL_DMA_Init+0x1c8>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d036      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a30      	ldr	r2, [pc, #192]	; (8005ecc <HAL_DMA_Init+0x1cc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d031      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a2e      	ldr	r2, [pc, #184]	; (8005ed0 <HAL_DMA_Init+0x1d0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d02c      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a2d      	ldr	r2, [pc, #180]	; (8005ed4 <HAL_DMA_Init+0x1d4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d027      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a2b      	ldr	r2, [pc, #172]	; (8005ed8 <HAL_DMA_Init+0x1d8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d022      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a2a      	ldr	r2, [pc, #168]	; (8005edc <HAL_DMA_Init+0x1dc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d01d      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <HAL_DMA_Init+0x1e0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d018      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <HAL_DMA_Init+0x1e4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d013      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a25      	ldr	r2, [pc, #148]	; (8005ee8 <HAL_DMA_Init+0x1e8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d00e      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a24      	ldr	r2, [pc, #144]	; (8005eec <HAL_DMA_Init+0x1ec>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d009      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a22      	ldr	r2, [pc, #136]	; (8005ef0 <HAL_DMA_Init+0x1f0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d004      	beq.n	8005e74 <HAL_DMA_Init+0x174>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a21      	ldr	r2, [pc, #132]	; (8005ef4 <HAL_DMA_Init+0x1f4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d108      	bne.n	8005e86 <HAL_DMA_Init+0x186>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e007      	b.n	8005e96 <HAL_DMA_Init+0x196>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0201 	bic.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e96:	e02f      	b.n	8005ef8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e98:	f7fd fce8 	bl	800386c <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	d928      	bls.n	8005ef8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2220      	movs	r2, #32
 8005eaa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2203      	movs	r2, #3
 8005eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e244      	b.n	8006342 <HAL_DMA_Init+0x642>
 8005eb8:	40020010 	.word	0x40020010
 8005ebc:	40020028 	.word	0x40020028
 8005ec0:	40020040 	.word	0x40020040
 8005ec4:	40020058 	.word	0x40020058
 8005ec8:	40020070 	.word	0x40020070
 8005ecc:	40020088 	.word	0x40020088
 8005ed0:	400200a0 	.word	0x400200a0
 8005ed4:	400200b8 	.word	0x400200b8
 8005ed8:	40020410 	.word	0x40020410
 8005edc:	40020428 	.word	0x40020428
 8005ee0:	40020440 	.word	0x40020440
 8005ee4:	40020458 	.word	0x40020458
 8005ee8:	40020470 	.word	0x40020470
 8005eec:	40020488 	.word	0x40020488
 8005ef0:	400204a0 	.word	0x400204a0
 8005ef4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 0301 	and.w	r3, r3, #1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1c8      	bne.n	8005e98 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4b84      	ldr	r3, [pc, #528]	; (8006124 <HAL_DMA_Init+0x424>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f1e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f2a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f36:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d107      	bne.n	8005f5c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	4313      	orrs	r3, r2
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b28      	cmp	r3, #40	; 0x28
 8005f62:	d903      	bls.n	8005f6c <HAL_DMA_Init+0x26c>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	2b2e      	cmp	r3, #46	; 0x2e
 8005f6a:	d91f      	bls.n	8005fac <HAL_DMA_Init+0x2ac>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	2b3e      	cmp	r3, #62	; 0x3e
 8005f72:	d903      	bls.n	8005f7c <HAL_DMA_Init+0x27c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b42      	cmp	r3, #66	; 0x42
 8005f7a:	d917      	bls.n	8005fac <HAL_DMA_Init+0x2ac>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	2b46      	cmp	r3, #70	; 0x46
 8005f82:	d903      	bls.n	8005f8c <HAL_DMA_Init+0x28c>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2b48      	cmp	r3, #72	; 0x48
 8005f8a:	d90f      	bls.n	8005fac <HAL_DMA_Init+0x2ac>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b4e      	cmp	r3, #78	; 0x4e
 8005f92:	d903      	bls.n	8005f9c <HAL_DMA_Init+0x29c>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b52      	cmp	r3, #82	; 0x52
 8005f9a:	d907      	bls.n	8005fac <HAL_DMA_Init+0x2ac>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	2b73      	cmp	r3, #115	; 0x73
 8005fa2:	d905      	bls.n	8005fb0 <HAL_DMA_Init+0x2b0>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b77      	cmp	r3, #119	; 0x77
 8005faa:	d801      	bhi.n	8005fb0 <HAL_DMA_Init+0x2b0>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <HAL_DMA_Init+0x2b2>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d003      	beq.n	8005fbe <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fbc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f023 0307 	bic.w	r3, r3, #7
 8005fd4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe4:	2b04      	cmp	r3, #4
 8005fe6:	d117      	bne.n	8006018 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00e      	beq.n	8006018 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fdcc 	bl	8007b98 <DMA_CheckFifoParam>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2240      	movs	r2, #64	; 0x40
 800600a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e194      	b.n	8006342 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f001 fd07 	bl	8007a34 <DMA_CalcBaseAndBitshift>
 8006026:	4603      	mov	r3, r0
 8006028:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	223f      	movs	r2, #63	; 0x3f
 8006034:	409a      	lsls	r2, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	609a      	str	r2, [r3, #8]
 800603a:	e0ca      	b.n	80061d2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a39      	ldr	r2, [pc, #228]	; (8006128 <HAL_DMA_Init+0x428>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d022      	beq.n	800608c <HAL_DMA_Init+0x38c>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a38      	ldr	r2, [pc, #224]	; (800612c <HAL_DMA_Init+0x42c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d01d      	beq.n	800608c <HAL_DMA_Init+0x38c>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a36      	ldr	r2, [pc, #216]	; (8006130 <HAL_DMA_Init+0x430>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_DMA_Init+0x38c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a35      	ldr	r2, [pc, #212]	; (8006134 <HAL_DMA_Init+0x434>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_DMA_Init+0x38c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a33      	ldr	r2, [pc, #204]	; (8006138 <HAL_DMA_Init+0x438>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_DMA_Init+0x38c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a32      	ldr	r2, [pc, #200]	; (800613c <HAL_DMA_Init+0x43c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_DMA_Init+0x38c>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a30      	ldr	r2, [pc, #192]	; (8006140 <HAL_DMA_Init+0x440>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_DMA_Init+0x38c>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a2f      	ldr	r2, [pc, #188]	; (8006144 <HAL_DMA_Init+0x444>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d101      	bne.n	8006090 <HAL_DMA_Init+0x390>
 800608c:	2301      	movs	r3, #1
 800608e:	e000      	b.n	8006092 <HAL_DMA_Init+0x392>
 8006090:	2300      	movs	r3, #0
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 8094 	beq.w	80061c0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a22      	ldr	r2, [pc, #136]	; (8006128 <HAL_DMA_Init+0x428>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d021      	beq.n	80060e6 <HAL_DMA_Init+0x3e6>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a21      	ldr	r2, [pc, #132]	; (800612c <HAL_DMA_Init+0x42c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d01c      	beq.n	80060e6 <HAL_DMA_Init+0x3e6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <HAL_DMA_Init+0x430>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d017      	beq.n	80060e6 <HAL_DMA_Init+0x3e6>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1e      	ldr	r2, [pc, #120]	; (8006134 <HAL_DMA_Init+0x434>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d012      	beq.n	80060e6 <HAL_DMA_Init+0x3e6>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1c      	ldr	r2, [pc, #112]	; (8006138 <HAL_DMA_Init+0x438>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d00d      	beq.n	80060e6 <HAL_DMA_Init+0x3e6>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1b      	ldr	r2, [pc, #108]	; (800613c <HAL_DMA_Init+0x43c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d008      	beq.n	80060e6 <HAL_DMA_Init+0x3e6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a19      	ldr	r2, [pc, #100]	; (8006140 <HAL_DMA_Init+0x440>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d003      	beq.n	80060e6 <HAL_DMA_Init+0x3e6>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a18      	ldr	r2, [pc, #96]	; (8006144 <HAL_DMA_Init+0x444>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4b11      	ldr	r3, [pc, #68]	; (8006148 <HAL_DMA_Init+0x448>)
 8006104:	4013      	ands	r3, r2
 8006106:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d01d      	beq.n	800614c <HAL_DMA_Init+0x44c>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	2b80      	cmp	r3, #128	; 0x80
 8006116:	d102      	bne.n	800611e <HAL_DMA_Init+0x41e>
 8006118:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800611c:	e017      	b.n	800614e <HAL_DMA_Init+0x44e>
 800611e:	2300      	movs	r3, #0
 8006120:	e015      	b.n	800614e <HAL_DMA_Init+0x44e>
 8006122:	bf00      	nop
 8006124:	fe10803f 	.word	0xfe10803f
 8006128:	58025408 	.word	0x58025408
 800612c:	5802541c 	.word	0x5802541c
 8006130:	58025430 	.word	0x58025430
 8006134:	58025444 	.word	0x58025444
 8006138:	58025458 	.word	0x58025458
 800613c:	5802546c 	.word	0x5802546c
 8006140:	58025480 	.word	0x58025480
 8006144:	58025494 	.word	0x58025494
 8006148:	fffe000f 	.word	0xfffe000f
 800614c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68d2      	ldr	r2, [r2, #12]
 8006152:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006154:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800615c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006164:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800616c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	69db      	ldr	r3, [r3, #28]
 8006172:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800617c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	461a      	mov	r2, r3
 8006192:	4b6e      	ldr	r3, [pc, #440]	; (800634c <HAL_DMA_Init+0x64c>)
 8006194:	4413      	add	r3, r2
 8006196:	4a6e      	ldr	r2, [pc, #440]	; (8006350 <HAL_DMA_Init+0x650>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	091b      	lsrs	r3, r3, #4
 800619e:	009a      	lsls	r2, r3, #2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fc45 	bl	8007a34 <DMA_CalcBaseAndBitshift>
 80061aa:	4603      	mov	r3, r0
 80061ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	2201      	movs	r2, #1
 80061b8:	409a      	lsls	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	e008      	b.n	80061d2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2240      	movs	r2, #64	; 0x40
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2203      	movs	r2, #3
 80061ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e0b7      	b.n	8006342 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a5f      	ldr	r2, [pc, #380]	; (8006354 <HAL_DMA_Init+0x654>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d072      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a5d      	ldr	r2, [pc, #372]	; (8006358 <HAL_DMA_Init+0x658>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d06d      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a5c      	ldr	r2, [pc, #368]	; (800635c <HAL_DMA_Init+0x65c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d068      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a5a      	ldr	r2, [pc, #360]	; (8006360 <HAL_DMA_Init+0x660>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d063      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a59      	ldr	r2, [pc, #356]	; (8006364 <HAL_DMA_Init+0x664>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d05e      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a57      	ldr	r2, [pc, #348]	; (8006368 <HAL_DMA_Init+0x668>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d059      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a56      	ldr	r2, [pc, #344]	; (800636c <HAL_DMA_Init+0x66c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d054      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a54      	ldr	r2, [pc, #336]	; (8006370 <HAL_DMA_Init+0x670>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d04f      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a53      	ldr	r2, [pc, #332]	; (8006374 <HAL_DMA_Init+0x674>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d04a      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a51      	ldr	r2, [pc, #324]	; (8006378 <HAL_DMA_Init+0x678>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d045      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a50      	ldr	r2, [pc, #320]	; (800637c <HAL_DMA_Init+0x67c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d040      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a4e      	ldr	r2, [pc, #312]	; (8006380 <HAL_DMA_Init+0x680>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d03b      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a4d      	ldr	r2, [pc, #308]	; (8006384 <HAL_DMA_Init+0x684>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d036      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a4b      	ldr	r2, [pc, #300]	; (8006388 <HAL_DMA_Init+0x688>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d031      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a4a      	ldr	r2, [pc, #296]	; (800638c <HAL_DMA_Init+0x68c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d02c      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a48      	ldr	r2, [pc, #288]	; (8006390 <HAL_DMA_Init+0x690>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d027      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a47      	ldr	r2, [pc, #284]	; (8006394 <HAL_DMA_Init+0x694>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d022      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a45      	ldr	r2, [pc, #276]	; (8006398 <HAL_DMA_Init+0x698>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d01d      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a44      	ldr	r2, [pc, #272]	; (800639c <HAL_DMA_Init+0x69c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d018      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a42      	ldr	r2, [pc, #264]	; (80063a0 <HAL_DMA_Init+0x6a0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a41      	ldr	r2, [pc, #260]	; (80063a4 <HAL_DMA_Init+0x6a4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a3f      	ldr	r2, [pc, #252]	; (80063a8 <HAL_DMA_Init+0x6a8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d009      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a3e      	ldr	r2, [pc, #248]	; (80063ac <HAL_DMA_Init+0x6ac>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_DMA_Init+0x5c2>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a3c      	ldr	r2, [pc, #240]	; (80063b0 <HAL_DMA_Init+0x6b0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d101      	bne.n	80062c6 <HAL_DMA_Init+0x5c6>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <HAL_DMA_Init+0x5c8>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d032      	beq.n	8006332 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f001 fcdf 	bl	8007c90 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	2b80      	cmp	r3, #128	; 0x80
 80062d8:	d102      	bne.n	80062e0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d010      	beq.n	8006320 <HAL_DMA_Init+0x620>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	2b08      	cmp	r3, #8
 8006304:	d80c      	bhi.n	8006320 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 fd5c 	bl	8007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800631c:	605a      	str	r2, [r3, #4]
 800631e:	e008      	b.n	8006332 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	a7fdabf8 	.word	0xa7fdabf8
 8006350:	cccccccd 	.word	0xcccccccd
 8006354:	40020010 	.word	0x40020010
 8006358:	40020028 	.word	0x40020028
 800635c:	40020040 	.word	0x40020040
 8006360:	40020058 	.word	0x40020058
 8006364:	40020070 	.word	0x40020070
 8006368:	40020088 	.word	0x40020088
 800636c:	400200a0 	.word	0x400200a0
 8006370:	400200b8 	.word	0x400200b8
 8006374:	40020410 	.word	0x40020410
 8006378:	40020428 	.word	0x40020428
 800637c:	40020440 	.word	0x40020440
 8006380:	40020458 	.word	0x40020458
 8006384:	40020470 	.word	0x40020470
 8006388:	40020488 	.word	0x40020488
 800638c:	400204a0 	.word	0x400204a0
 8006390:	400204b8 	.word	0x400204b8
 8006394:	58025408 	.word	0x58025408
 8006398:	5802541c 	.word	0x5802541c
 800639c:	58025430 	.word	0x58025430
 80063a0:	58025444 	.word	0x58025444
 80063a4:	58025458 	.word	0x58025458
 80063a8:	5802546c 	.word	0x5802546c
 80063ac:	58025480 	.word	0x58025480
 80063b0:	58025494 	.word	0x58025494

080063b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d101      	bne.n	80063d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e226      	b.n	800681e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d101      	bne.n	80063de <HAL_DMA_Start_IT+0x2a>
 80063da:	2302      	movs	r3, #2
 80063dc:	e21f      	b.n	800681e <HAL_DMA_Start_IT+0x46a>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	f040 820a 	bne.w	8006808 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a68      	ldr	r2, [pc, #416]	; (80065a8 <HAL_DMA_Start_IT+0x1f4>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d04a      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a66      	ldr	r2, [pc, #408]	; (80065ac <HAL_DMA_Start_IT+0x1f8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d045      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a65      	ldr	r2, [pc, #404]	; (80065b0 <HAL_DMA_Start_IT+0x1fc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d040      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a63      	ldr	r2, [pc, #396]	; (80065b4 <HAL_DMA_Start_IT+0x200>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d03b      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a62      	ldr	r2, [pc, #392]	; (80065b8 <HAL_DMA_Start_IT+0x204>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d036      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a60      	ldr	r2, [pc, #384]	; (80065bc <HAL_DMA_Start_IT+0x208>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d031      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a5f      	ldr	r2, [pc, #380]	; (80065c0 <HAL_DMA_Start_IT+0x20c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d02c      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a5d      	ldr	r2, [pc, #372]	; (80065c4 <HAL_DMA_Start_IT+0x210>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d027      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a5c      	ldr	r2, [pc, #368]	; (80065c8 <HAL_DMA_Start_IT+0x214>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d022      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a5a      	ldr	r2, [pc, #360]	; (80065cc <HAL_DMA_Start_IT+0x218>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01d      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a59      	ldr	r2, [pc, #356]	; (80065d0 <HAL_DMA_Start_IT+0x21c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d018      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a57      	ldr	r2, [pc, #348]	; (80065d4 <HAL_DMA_Start_IT+0x220>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a56      	ldr	r2, [pc, #344]	; (80065d8 <HAL_DMA_Start_IT+0x224>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a54      	ldr	r2, [pc, #336]	; (80065dc <HAL_DMA_Start_IT+0x228>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a53      	ldr	r2, [pc, #332]	; (80065e0 <HAL_DMA_Start_IT+0x22c>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_DMA_Start_IT+0xee>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a51      	ldr	r2, [pc, #324]	; (80065e4 <HAL_DMA_Start_IT+0x230>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d108      	bne.n	80064b4 <HAL_DMA_Start_IT+0x100>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0201 	bic.w	r2, r2, #1
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	e007      	b.n	80064c4 <HAL_DMA_Start_IT+0x110>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0201 	bic.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f001 f906 	bl	80076dc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a34      	ldr	r2, [pc, #208]	; (80065a8 <HAL_DMA_Start_IT+0x1f4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d04a      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a33      	ldr	r2, [pc, #204]	; (80065ac <HAL_DMA_Start_IT+0x1f8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d045      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a31      	ldr	r2, [pc, #196]	; (80065b0 <HAL_DMA_Start_IT+0x1fc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d040      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a30      	ldr	r2, [pc, #192]	; (80065b4 <HAL_DMA_Start_IT+0x200>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d03b      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a2e      	ldr	r2, [pc, #184]	; (80065b8 <HAL_DMA_Start_IT+0x204>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d036      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a2d      	ldr	r2, [pc, #180]	; (80065bc <HAL_DMA_Start_IT+0x208>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d031      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a2b      	ldr	r2, [pc, #172]	; (80065c0 <HAL_DMA_Start_IT+0x20c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d02c      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a2a      	ldr	r2, [pc, #168]	; (80065c4 <HAL_DMA_Start_IT+0x210>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d027      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a28      	ldr	r2, [pc, #160]	; (80065c8 <HAL_DMA_Start_IT+0x214>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d022      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a27      	ldr	r2, [pc, #156]	; (80065cc <HAL_DMA_Start_IT+0x218>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d01d      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a25      	ldr	r2, [pc, #148]	; (80065d0 <HAL_DMA_Start_IT+0x21c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d018      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a24      	ldr	r2, [pc, #144]	; (80065d4 <HAL_DMA_Start_IT+0x220>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d013      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a22      	ldr	r2, [pc, #136]	; (80065d8 <HAL_DMA_Start_IT+0x224>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00e      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a21      	ldr	r2, [pc, #132]	; (80065dc <HAL_DMA_Start_IT+0x228>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d009      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <HAL_DMA_Start_IT+0x22c>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d004      	beq.n	8006570 <HAL_DMA_Start_IT+0x1bc>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1e      	ldr	r2, [pc, #120]	; (80065e4 <HAL_DMA_Start_IT+0x230>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d101      	bne.n	8006574 <HAL_DMA_Start_IT+0x1c0>
 8006570:	2301      	movs	r3, #1
 8006572:	e000      	b.n	8006576 <HAL_DMA_Start_IT+0x1c2>
 8006574:	2300      	movs	r3, #0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d036      	beq.n	80065e8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f023 021e 	bic.w	r2, r3, #30
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f042 0216 	orr.w	r2, r2, #22
 800658c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	2b00      	cmp	r3, #0
 8006594:	d03e      	beq.n	8006614 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0208 	orr.w	r2, r2, #8
 80065a4:	601a      	str	r2, [r3, #0]
 80065a6:	e035      	b.n	8006614 <HAL_DMA_Start_IT+0x260>
 80065a8:	40020010 	.word	0x40020010
 80065ac:	40020028 	.word	0x40020028
 80065b0:	40020040 	.word	0x40020040
 80065b4:	40020058 	.word	0x40020058
 80065b8:	40020070 	.word	0x40020070
 80065bc:	40020088 	.word	0x40020088
 80065c0:	400200a0 	.word	0x400200a0
 80065c4:	400200b8 	.word	0x400200b8
 80065c8:	40020410 	.word	0x40020410
 80065cc:	40020428 	.word	0x40020428
 80065d0:	40020440 	.word	0x40020440
 80065d4:	40020458 	.word	0x40020458
 80065d8:	40020470 	.word	0x40020470
 80065dc:	40020488 	.word	0x40020488
 80065e0:	400204a0 	.word	0x400204a0
 80065e4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f023 020e 	bic.w	r2, r3, #14
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 020a 	orr.w	r2, r2, #10
 80065fa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	2b00      	cmp	r3, #0
 8006602:	d007      	beq.n	8006614 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0204 	orr.w	r2, r2, #4
 8006612:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a83      	ldr	r2, [pc, #524]	; (8006828 <HAL_DMA_Start_IT+0x474>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d072      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a82      	ldr	r2, [pc, #520]	; (800682c <HAL_DMA_Start_IT+0x478>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d06d      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a80      	ldr	r2, [pc, #512]	; (8006830 <HAL_DMA_Start_IT+0x47c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d068      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a7f      	ldr	r2, [pc, #508]	; (8006834 <HAL_DMA_Start_IT+0x480>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d063      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a7d      	ldr	r2, [pc, #500]	; (8006838 <HAL_DMA_Start_IT+0x484>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d05e      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7c      	ldr	r2, [pc, #496]	; (800683c <HAL_DMA_Start_IT+0x488>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d059      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a7a      	ldr	r2, [pc, #488]	; (8006840 <HAL_DMA_Start_IT+0x48c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d054      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a79      	ldr	r2, [pc, #484]	; (8006844 <HAL_DMA_Start_IT+0x490>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d04f      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a77      	ldr	r2, [pc, #476]	; (8006848 <HAL_DMA_Start_IT+0x494>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d04a      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a76      	ldr	r2, [pc, #472]	; (800684c <HAL_DMA_Start_IT+0x498>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d045      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a74      	ldr	r2, [pc, #464]	; (8006850 <HAL_DMA_Start_IT+0x49c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d040      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a73      	ldr	r2, [pc, #460]	; (8006854 <HAL_DMA_Start_IT+0x4a0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d03b      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a71      	ldr	r2, [pc, #452]	; (8006858 <HAL_DMA_Start_IT+0x4a4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d036      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a70      	ldr	r2, [pc, #448]	; (800685c <HAL_DMA_Start_IT+0x4a8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d031      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a6e      	ldr	r2, [pc, #440]	; (8006860 <HAL_DMA_Start_IT+0x4ac>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02c      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a6d      	ldr	r2, [pc, #436]	; (8006864 <HAL_DMA_Start_IT+0x4b0>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d027      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a6b      	ldr	r2, [pc, #428]	; (8006868 <HAL_DMA_Start_IT+0x4b4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d022      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a6a      	ldr	r2, [pc, #424]	; (800686c <HAL_DMA_Start_IT+0x4b8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d01d      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a68      	ldr	r2, [pc, #416]	; (8006870 <HAL_DMA_Start_IT+0x4bc>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d018      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a67      	ldr	r2, [pc, #412]	; (8006874 <HAL_DMA_Start_IT+0x4c0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a65      	ldr	r2, [pc, #404]	; (8006878 <HAL_DMA_Start_IT+0x4c4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00e      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a64      	ldr	r2, [pc, #400]	; (800687c <HAL_DMA_Start_IT+0x4c8>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a62      	ldr	r2, [pc, #392]	; (8006880 <HAL_DMA_Start_IT+0x4cc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <HAL_DMA_Start_IT+0x350>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a61      	ldr	r2, [pc, #388]	; (8006884 <HAL_DMA_Start_IT+0x4d0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d101      	bne.n	8006708 <HAL_DMA_Start_IT+0x354>
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <HAL_DMA_Start_IT+0x356>
 8006708:	2300      	movs	r3, #0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01a      	beq.n	8006744 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800672a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006742:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a37      	ldr	r2, [pc, #220]	; (8006828 <HAL_DMA_Start_IT+0x474>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d04a      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a36      	ldr	r2, [pc, #216]	; (800682c <HAL_DMA_Start_IT+0x478>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d045      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a34      	ldr	r2, [pc, #208]	; (8006830 <HAL_DMA_Start_IT+0x47c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d040      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a33      	ldr	r2, [pc, #204]	; (8006834 <HAL_DMA_Start_IT+0x480>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d03b      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a31      	ldr	r2, [pc, #196]	; (8006838 <HAL_DMA_Start_IT+0x484>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d036      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a30      	ldr	r2, [pc, #192]	; (800683c <HAL_DMA_Start_IT+0x488>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d031      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a2e      	ldr	r2, [pc, #184]	; (8006840 <HAL_DMA_Start_IT+0x48c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d02c      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <HAL_DMA_Start_IT+0x490>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d027      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a2b      	ldr	r2, [pc, #172]	; (8006848 <HAL_DMA_Start_IT+0x494>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d022      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a2a      	ldr	r2, [pc, #168]	; (800684c <HAL_DMA_Start_IT+0x498>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d01d      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <HAL_DMA_Start_IT+0x49c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a27      	ldr	r2, [pc, #156]	; (8006854 <HAL_DMA_Start_IT+0x4a0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a25      	ldr	r2, [pc, #148]	; (8006858 <HAL_DMA_Start_IT+0x4a4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a24      	ldr	r2, [pc, #144]	; (800685c <HAL_DMA_Start_IT+0x4a8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a22      	ldr	r2, [pc, #136]	; (8006860 <HAL_DMA_Start_IT+0x4ac>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_DMA_Start_IT+0x430>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a21      	ldr	r2, [pc, #132]	; (8006864 <HAL_DMA_Start_IT+0x4b0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d108      	bne.n	80067f6 <HAL_DMA_Start_IT+0x442>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f042 0201 	orr.w	r2, r2, #1
 80067f2:	601a      	str	r2, [r3, #0]
 80067f4:	e012      	b.n	800681c <HAL_DMA_Start_IT+0x468>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	e009      	b.n	800681c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800680e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40020010 	.word	0x40020010
 800682c:	40020028 	.word	0x40020028
 8006830:	40020040 	.word	0x40020040
 8006834:	40020058 	.word	0x40020058
 8006838:	40020070 	.word	0x40020070
 800683c:	40020088 	.word	0x40020088
 8006840:	400200a0 	.word	0x400200a0
 8006844:	400200b8 	.word	0x400200b8
 8006848:	40020410 	.word	0x40020410
 800684c:	40020428 	.word	0x40020428
 8006850:	40020440 	.word	0x40020440
 8006854:	40020458 	.word	0x40020458
 8006858:	40020470 	.word	0x40020470
 800685c:	40020488 	.word	0x40020488
 8006860:	400204a0 	.word	0x400204a0
 8006864:	400204b8 	.word	0x400204b8
 8006868:	58025408 	.word	0x58025408
 800686c:	5802541c 	.word	0x5802541c
 8006870:	58025430 	.word	0x58025430
 8006874:	58025444 	.word	0x58025444
 8006878:	58025458 	.word	0x58025458
 800687c:	5802546c 	.word	0x5802546c
 8006880:	58025480 	.word	0x58025480
 8006884:	58025494 	.word	0x58025494

08006888 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08a      	sub	sp, #40	; 0x28
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006894:	4b67      	ldr	r3, [pc, #412]	; (8006a34 <HAL_DMA_IRQHandler+0x1ac>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a67      	ldr	r2, [pc, #412]	; (8006a38 <HAL_DMA_IRQHandler+0x1b0>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	0a9b      	lsrs	r3, r3, #10
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a5f      	ldr	r2, [pc, #380]	; (8006a3c <HAL_DMA_IRQHandler+0x1b4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d04a      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a5d      	ldr	r2, [pc, #372]	; (8006a40 <HAL_DMA_IRQHandler+0x1b8>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d045      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a5c      	ldr	r2, [pc, #368]	; (8006a44 <HAL_DMA_IRQHandler+0x1bc>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d040      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a5a      	ldr	r2, [pc, #360]	; (8006a48 <HAL_DMA_IRQHandler+0x1c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d03b      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a59      	ldr	r2, [pc, #356]	; (8006a4c <HAL_DMA_IRQHandler+0x1c4>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d036      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a57      	ldr	r2, [pc, #348]	; (8006a50 <HAL_DMA_IRQHandler+0x1c8>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d031      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a56      	ldr	r2, [pc, #344]	; (8006a54 <HAL_DMA_IRQHandler+0x1cc>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d02c      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a54      	ldr	r2, [pc, #336]	; (8006a58 <HAL_DMA_IRQHandler+0x1d0>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d027      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a53      	ldr	r2, [pc, #332]	; (8006a5c <HAL_DMA_IRQHandler+0x1d4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d022      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a51      	ldr	r2, [pc, #324]	; (8006a60 <HAL_DMA_IRQHandler+0x1d8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d01d      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a50      	ldr	r2, [pc, #320]	; (8006a64 <HAL_DMA_IRQHandler+0x1dc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d018      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a4e      	ldr	r2, [pc, #312]	; (8006a68 <HAL_DMA_IRQHandler+0x1e0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d013      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a4d      	ldr	r2, [pc, #308]	; (8006a6c <HAL_DMA_IRQHandler+0x1e4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00e      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a4b      	ldr	r2, [pc, #300]	; (8006a70 <HAL_DMA_IRQHandler+0x1e8>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d009      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a4a      	ldr	r2, [pc, #296]	; (8006a74 <HAL_DMA_IRQHandler+0x1ec>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d004      	beq.n	800695a <HAL_DMA_IRQHandler+0xd2>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a48      	ldr	r2, [pc, #288]	; (8006a78 <HAL_DMA_IRQHandler+0x1f0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d101      	bne.n	800695e <HAL_DMA_IRQHandler+0xd6>
 800695a:	2301      	movs	r3, #1
 800695c:	e000      	b.n	8006960 <HAL_DMA_IRQHandler+0xd8>
 800695e:	2300      	movs	r3, #0
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 842b 	beq.w	80071bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	2208      	movs	r2, #8
 8006970:	409a      	lsls	r2, r3
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	4013      	ands	r3, r2
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 80a2 	beq.w	8006ac0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a2e      	ldr	r2, [pc, #184]	; (8006a3c <HAL_DMA_IRQHandler+0x1b4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d04a      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a2d      	ldr	r2, [pc, #180]	; (8006a40 <HAL_DMA_IRQHandler+0x1b8>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d045      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a2b      	ldr	r2, [pc, #172]	; (8006a44 <HAL_DMA_IRQHandler+0x1bc>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d040      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2a      	ldr	r2, [pc, #168]	; (8006a48 <HAL_DMA_IRQHandler+0x1c0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d03b      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a28      	ldr	r2, [pc, #160]	; (8006a4c <HAL_DMA_IRQHandler+0x1c4>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d036      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a27      	ldr	r2, [pc, #156]	; (8006a50 <HAL_DMA_IRQHandler+0x1c8>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d031      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a25      	ldr	r2, [pc, #148]	; (8006a54 <HAL_DMA_IRQHandler+0x1cc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d02c      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a24      	ldr	r2, [pc, #144]	; (8006a58 <HAL_DMA_IRQHandler+0x1d0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d027      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a22      	ldr	r2, [pc, #136]	; (8006a5c <HAL_DMA_IRQHandler+0x1d4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d022      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a21      	ldr	r2, [pc, #132]	; (8006a60 <HAL_DMA_IRQHandler+0x1d8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d01d      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <HAL_DMA_IRQHandler+0x1dc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d018      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a1e      	ldr	r2, [pc, #120]	; (8006a68 <HAL_DMA_IRQHandler+0x1e0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d013      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a1c      	ldr	r2, [pc, #112]	; (8006a6c <HAL_DMA_IRQHandler+0x1e4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00e      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a1b      	ldr	r2, [pc, #108]	; (8006a70 <HAL_DMA_IRQHandler+0x1e8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d009      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a19      	ldr	r2, [pc, #100]	; (8006a74 <HAL_DMA_IRQHandler+0x1ec>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d004      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x194>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a18      	ldr	r2, [pc, #96]	; (8006a78 <HAL_DMA_IRQHandler+0x1f0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d12f      	bne.n	8006a7c <HAL_DMA_IRQHandler+0x1f4>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	bf14      	ite	ne
 8006a2a:	2301      	movne	r3, #1
 8006a2c:	2300      	moveq	r3, #0
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	e02e      	b.n	8006a90 <HAL_DMA_IRQHandler+0x208>
 8006a32:	bf00      	nop
 8006a34:	20000000 	.word	0x20000000
 8006a38:	1b4e81b5 	.word	0x1b4e81b5
 8006a3c:	40020010 	.word	0x40020010
 8006a40:	40020028 	.word	0x40020028
 8006a44:	40020040 	.word	0x40020040
 8006a48:	40020058 	.word	0x40020058
 8006a4c:	40020070 	.word	0x40020070
 8006a50:	40020088 	.word	0x40020088
 8006a54:	400200a0 	.word	0x400200a0
 8006a58:	400200b8 	.word	0x400200b8
 8006a5c:	40020410 	.word	0x40020410
 8006a60:	40020428 	.word	0x40020428
 8006a64:	40020440 	.word	0x40020440
 8006a68:	40020458 	.word	0x40020458
 8006a6c:	40020470 	.word	0x40020470
 8006a70:	40020488 	.word	0x40020488
 8006a74:	400204a0 	.word	0x400204a0
 8006a78:	400204b8 	.word	0x400204b8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bf14      	ite	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	2300      	moveq	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d015      	beq.n	8006ac0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0204 	bic.w	r2, r2, #4
 8006aa2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa8:	f003 031f 	and.w	r3, r3, #31
 8006aac:	2208      	movs	r2, #8
 8006aae:	409a      	lsls	r2, r3
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ab8:	f043 0201 	orr.w	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac4:	f003 031f 	and.w	r3, r3, #31
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	fa22 f303 	lsr.w	r3, r2, r3
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d06e      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a69      	ldr	r2, [pc, #420]	; (8006c80 <HAL_DMA_IRQHandler+0x3f8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d04a      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a67      	ldr	r2, [pc, #412]	; (8006c84 <HAL_DMA_IRQHandler+0x3fc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d045      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a66      	ldr	r2, [pc, #408]	; (8006c88 <HAL_DMA_IRQHandler+0x400>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d040      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a64      	ldr	r2, [pc, #400]	; (8006c8c <HAL_DMA_IRQHandler+0x404>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d03b      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a63      	ldr	r2, [pc, #396]	; (8006c90 <HAL_DMA_IRQHandler+0x408>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d036      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a61      	ldr	r2, [pc, #388]	; (8006c94 <HAL_DMA_IRQHandler+0x40c>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d031      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a60      	ldr	r2, [pc, #384]	; (8006c98 <HAL_DMA_IRQHandler+0x410>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d02c      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a5e      	ldr	r2, [pc, #376]	; (8006c9c <HAL_DMA_IRQHandler+0x414>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d027      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a5d      	ldr	r2, [pc, #372]	; (8006ca0 <HAL_DMA_IRQHandler+0x418>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a5b      	ldr	r2, [pc, #364]	; (8006ca4 <HAL_DMA_IRQHandler+0x41c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01d      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a5a      	ldr	r2, [pc, #360]	; (8006ca8 <HAL_DMA_IRQHandler+0x420>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a58      	ldr	r2, [pc, #352]	; (8006cac <HAL_DMA_IRQHandler+0x424>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a57      	ldr	r2, [pc, #348]	; (8006cb0 <HAL_DMA_IRQHandler+0x428>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a55      	ldr	r2, [pc, #340]	; (8006cb4 <HAL_DMA_IRQHandler+0x42c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a54      	ldr	r2, [pc, #336]	; (8006cb8 <HAL_DMA_IRQHandler+0x430>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_DMA_IRQHandler+0x2ee>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a52      	ldr	r2, [pc, #328]	; (8006cbc <HAL_DMA_IRQHandler+0x434>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d10a      	bne.n	8006b8c <HAL_DMA_IRQHandler+0x304>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695b      	ldr	r3, [r3, #20]
 8006b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	bf14      	ite	ne
 8006b84:	2301      	movne	r3, #1
 8006b86:	2300      	moveq	r3, #0
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	e003      	b.n	8006b94 <HAL_DMA_IRQHandler+0x30c>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2300      	movs	r3, #0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00d      	beq.n	8006bb4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	409a      	lsls	r2, r3
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bac:	f043 0202 	orr.w	r2, r3, #2
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 808f 	beq.w	8006ce8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a2c      	ldr	r2, [pc, #176]	; (8006c80 <HAL_DMA_IRQHandler+0x3f8>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d04a      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <HAL_DMA_IRQHandler+0x3fc>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d045      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a29      	ldr	r2, [pc, #164]	; (8006c88 <HAL_DMA_IRQHandler+0x400>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d040      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a27      	ldr	r2, [pc, #156]	; (8006c8c <HAL_DMA_IRQHandler+0x404>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d03b      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a26      	ldr	r2, [pc, #152]	; (8006c90 <HAL_DMA_IRQHandler+0x408>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d036      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a24      	ldr	r2, [pc, #144]	; (8006c94 <HAL_DMA_IRQHandler+0x40c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d031      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a23      	ldr	r2, [pc, #140]	; (8006c98 <HAL_DMA_IRQHandler+0x410>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d02c      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a21      	ldr	r2, [pc, #132]	; (8006c9c <HAL_DMA_IRQHandler+0x414>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d027      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a20      	ldr	r2, [pc, #128]	; (8006ca0 <HAL_DMA_IRQHandler+0x418>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d022      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1e      	ldr	r2, [pc, #120]	; (8006ca4 <HAL_DMA_IRQHandler+0x41c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01d      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1d      	ldr	r2, [pc, #116]	; (8006ca8 <HAL_DMA_IRQHandler+0x420>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d018      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1b      	ldr	r2, [pc, #108]	; (8006cac <HAL_DMA_IRQHandler+0x424>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d013      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1a      	ldr	r2, [pc, #104]	; (8006cb0 <HAL_DMA_IRQHandler+0x428>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00e      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a18      	ldr	r2, [pc, #96]	; (8006cb4 <HAL_DMA_IRQHandler+0x42c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d009      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a17      	ldr	r2, [pc, #92]	; (8006cb8 <HAL_DMA_IRQHandler+0x430>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d004      	beq.n	8006c6a <HAL_DMA_IRQHandler+0x3e2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <HAL_DMA_IRQHandler+0x434>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d12a      	bne.n	8006cc0 <HAL_DMA_IRQHandler+0x438>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bf14      	ite	ne
 8006c78:	2301      	movne	r3, #1
 8006c7a:	2300      	moveq	r3, #0
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	e023      	b.n	8006cc8 <HAL_DMA_IRQHandler+0x440>
 8006c80:	40020010 	.word	0x40020010
 8006c84:	40020028 	.word	0x40020028
 8006c88:	40020040 	.word	0x40020040
 8006c8c:	40020058 	.word	0x40020058
 8006c90:	40020070 	.word	0x40020070
 8006c94:	40020088 	.word	0x40020088
 8006c98:	400200a0 	.word	0x400200a0
 8006c9c:	400200b8 	.word	0x400200b8
 8006ca0:	40020410 	.word	0x40020410
 8006ca4:	40020428 	.word	0x40020428
 8006ca8:	40020440 	.word	0x40020440
 8006cac:	40020458 	.word	0x40020458
 8006cb0:	40020470 	.word	0x40020470
 8006cb4:	40020488 	.word	0x40020488
 8006cb8:	400204a0 	.word	0x400204a0
 8006cbc:	400204b8 	.word	0x400204b8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00d      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	2204      	movs	r2, #4
 8006cd6:	409a      	lsls	r2, r3
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ce0:	f043 0204 	orr.w	r2, r3, #4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cec:	f003 031f 	and.w	r3, r3, #31
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	409a      	lsls	r2, r3
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 80a6 	beq.w	8006e4a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a85      	ldr	r2, [pc, #532]	; (8006f18 <HAL_DMA_IRQHandler+0x690>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d04a      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a83      	ldr	r2, [pc, #524]	; (8006f1c <HAL_DMA_IRQHandler+0x694>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d045      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a82      	ldr	r2, [pc, #520]	; (8006f20 <HAL_DMA_IRQHandler+0x698>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d040      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a80      	ldr	r2, [pc, #512]	; (8006f24 <HAL_DMA_IRQHandler+0x69c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d03b      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a7f      	ldr	r2, [pc, #508]	; (8006f28 <HAL_DMA_IRQHandler+0x6a0>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d036      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a7d      	ldr	r2, [pc, #500]	; (8006f2c <HAL_DMA_IRQHandler+0x6a4>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d031      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a7c      	ldr	r2, [pc, #496]	; (8006f30 <HAL_DMA_IRQHandler+0x6a8>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d02c      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a7a      	ldr	r2, [pc, #488]	; (8006f34 <HAL_DMA_IRQHandler+0x6ac>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d027      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a79      	ldr	r2, [pc, #484]	; (8006f38 <HAL_DMA_IRQHandler+0x6b0>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d022      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a77      	ldr	r2, [pc, #476]	; (8006f3c <HAL_DMA_IRQHandler+0x6b4>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d01d      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a76      	ldr	r2, [pc, #472]	; (8006f40 <HAL_DMA_IRQHandler+0x6b8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d018      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a74      	ldr	r2, [pc, #464]	; (8006f44 <HAL_DMA_IRQHandler+0x6bc>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d013      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a73      	ldr	r2, [pc, #460]	; (8006f48 <HAL_DMA_IRQHandler+0x6c0>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00e      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a71      	ldr	r2, [pc, #452]	; (8006f4c <HAL_DMA_IRQHandler+0x6c4>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d009      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a70      	ldr	r2, [pc, #448]	; (8006f50 <HAL_DMA_IRQHandler+0x6c8>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d004      	beq.n	8006d9e <HAL_DMA_IRQHandler+0x516>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a6e      	ldr	r2, [pc, #440]	; (8006f54 <HAL_DMA_IRQHandler+0x6cc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d10a      	bne.n	8006db4 <HAL_DMA_IRQHandler+0x52c>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0308 	and.w	r3, r3, #8
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	bf14      	ite	ne
 8006dac:	2301      	movne	r3, #1
 8006dae:	2300      	moveq	r3, #0
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	e009      	b.n	8006dc8 <HAL_DMA_IRQHandler+0x540>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0304 	and.w	r3, r3, #4
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bf14      	ite	ne
 8006dc2:	2301      	movne	r3, #1
 8006dc4:	2300      	moveq	r3, #0
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d03e      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	2210      	movs	r2, #16
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d018      	beq.n	8006e1c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d108      	bne.n	8006e0a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d024      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
 8006e08:	e01f      	b.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d01b      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
 8006e1a:	e016      	b.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d107      	bne.n	8006e3a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f022 0208 	bic.w	r2, r2, #8
 8006e38:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e4e:	f003 031f 	and.w	r3, r3, #31
 8006e52:	2220      	movs	r2, #32
 8006e54:	409a      	lsls	r2, r3
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 8110 	beq.w	8007080 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2c      	ldr	r2, [pc, #176]	; (8006f18 <HAL_DMA_IRQHandler+0x690>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d04a      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a2b      	ldr	r2, [pc, #172]	; (8006f1c <HAL_DMA_IRQHandler+0x694>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d045      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a29      	ldr	r2, [pc, #164]	; (8006f20 <HAL_DMA_IRQHandler+0x698>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d040      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a28      	ldr	r2, [pc, #160]	; (8006f24 <HAL_DMA_IRQHandler+0x69c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d03b      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a26      	ldr	r2, [pc, #152]	; (8006f28 <HAL_DMA_IRQHandler+0x6a0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d036      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a25      	ldr	r2, [pc, #148]	; (8006f2c <HAL_DMA_IRQHandler+0x6a4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d031      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a23      	ldr	r2, [pc, #140]	; (8006f30 <HAL_DMA_IRQHandler+0x6a8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d02c      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a22      	ldr	r2, [pc, #136]	; (8006f34 <HAL_DMA_IRQHandler+0x6ac>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d027      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a20      	ldr	r2, [pc, #128]	; (8006f38 <HAL_DMA_IRQHandler+0x6b0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d022      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1f      	ldr	r2, [pc, #124]	; (8006f3c <HAL_DMA_IRQHandler+0x6b4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01d      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a1d      	ldr	r2, [pc, #116]	; (8006f40 <HAL_DMA_IRQHandler+0x6b8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1c      	ldr	r2, [pc, #112]	; (8006f44 <HAL_DMA_IRQHandler+0x6bc>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d013      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1a      	ldr	r2, [pc, #104]	; (8006f48 <HAL_DMA_IRQHandler+0x6c0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a19      	ldr	r2, [pc, #100]	; (8006f4c <HAL_DMA_IRQHandler+0x6c4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <HAL_DMA_IRQHandler+0x6c8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_DMA_IRQHandler+0x678>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a16      	ldr	r2, [pc, #88]	; (8006f54 <HAL_DMA_IRQHandler+0x6cc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d12b      	bne.n	8006f58 <HAL_DMA_IRQHandler+0x6d0>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	bf14      	ite	ne
 8006f0e:	2301      	movne	r3, #1
 8006f10:	2300      	moveq	r3, #0
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	e02a      	b.n	8006f6c <HAL_DMA_IRQHandler+0x6e4>
 8006f16:	bf00      	nop
 8006f18:	40020010 	.word	0x40020010
 8006f1c:	40020028 	.word	0x40020028
 8006f20:	40020040 	.word	0x40020040
 8006f24:	40020058 	.word	0x40020058
 8006f28:	40020070 	.word	0x40020070
 8006f2c:	40020088 	.word	0x40020088
 8006f30:	400200a0 	.word	0x400200a0
 8006f34:	400200b8 	.word	0x400200b8
 8006f38:	40020410 	.word	0x40020410
 8006f3c:	40020428 	.word	0x40020428
 8006f40:	40020440 	.word	0x40020440
 8006f44:	40020458 	.word	0x40020458
 8006f48:	40020470 	.word	0x40020470
 8006f4c:	40020488 	.word	0x40020488
 8006f50:	400204a0 	.word	0x400204a0
 8006f54:	400204b8 	.word	0x400204b8
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	bf14      	ite	ne
 8006f66:	2301      	movne	r3, #1
 8006f68:	2300      	moveq	r3, #0
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 8087 	beq.w	8007080 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	2220      	movs	r2, #32
 8006f7c:	409a      	lsls	r2, r3
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d139      	bne.n	8007002 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0216 	bic.w	r2, r2, #22
 8006f9c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	695a      	ldr	r2, [r3, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <HAL_DMA_IRQHandler+0x736>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d007      	beq.n	8006fce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f022 0208 	bic.w	r2, r2, #8
 8006fcc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd2:	f003 031f 	and.w	r3, r3, #31
 8006fd6:	223f      	movs	r2, #63	; 0x3f
 8006fd8:	409a      	lsls	r2, r3
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 834a 	beq.w	800768c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
          }
          return;
 8007000:	e344      	b.n	800768c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800700c:	2b00      	cmp	r3, #0
 800700e:	d018      	beq.n	8007042 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d108      	bne.n	8007030 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007022:	2b00      	cmp	r3, #0
 8007024:	d02c      	beq.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	4798      	blx	r3
 800702e:	e027      	b.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d023      	beq.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	e01e      	b.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10f      	bne.n	8007070 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f022 0210 	bic.w	r2, r2, #16
 800705e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 8306 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 8088 	beq.w	80071a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2204      	movs	r2, #4
 800709c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a7a      	ldr	r2, [pc, #488]	; (8007290 <HAL_DMA_IRQHandler+0xa08>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d04a      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a79      	ldr	r2, [pc, #484]	; (8007294 <HAL_DMA_IRQHandler+0xa0c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d045      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a77      	ldr	r2, [pc, #476]	; (8007298 <HAL_DMA_IRQHandler+0xa10>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d040      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a76      	ldr	r2, [pc, #472]	; (800729c <HAL_DMA_IRQHandler+0xa14>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d03b      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a74      	ldr	r2, [pc, #464]	; (80072a0 <HAL_DMA_IRQHandler+0xa18>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d036      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a73      	ldr	r2, [pc, #460]	; (80072a4 <HAL_DMA_IRQHandler+0xa1c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d031      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a71      	ldr	r2, [pc, #452]	; (80072a8 <HAL_DMA_IRQHandler+0xa20>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d02c      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a70      	ldr	r2, [pc, #448]	; (80072ac <HAL_DMA_IRQHandler+0xa24>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d027      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a6e      	ldr	r2, [pc, #440]	; (80072b0 <HAL_DMA_IRQHandler+0xa28>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d022      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a6d      	ldr	r2, [pc, #436]	; (80072b4 <HAL_DMA_IRQHandler+0xa2c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d01d      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a6b      	ldr	r2, [pc, #428]	; (80072b8 <HAL_DMA_IRQHandler+0xa30>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d018      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a6a      	ldr	r2, [pc, #424]	; (80072bc <HAL_DMA_IRQHandler+0xa34>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d013      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a68      	ldr	r2, [pc, #416]	; (80072c0 <HAL_DMA_IRQHandler+0xa38>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d00e      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a67      	ldr	r2, [pc, #412]	; (80072c4 <HAL_DMA_IRQHandler+0xa3c>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a65      	ldr	r2, [pc, #404]	; (80072c8 <HAL_DMA_IRQHandler+0xa40>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d004      	beq.n	8007140 <HAL_DMA_IRQHandler+0x8b8>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a64      	ldr	r2, [pc, #400]	; (80072cc <HAL_DMA_IRQHandler+0xa44>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d108      	bne.n	8007152 <HAL_DMA_IRQHandler+0x8ca>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f022 0201 	bic.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	e007      	b.n	8007162 <HAL_DMA_IRQHandler+0x8da>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f022 0201 	bic.w	r2, r2, #1
 8007160:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]
 8007168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716a:	429a      	cmp	r2, r3
 800716c:	d307      	bcc.n	800717e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f2      	bne.n	8007162 <HAL_DMA_IRQHandler+0x8da>
 800717c:	e000      	b.n	8007180 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800717e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2203      	movs	r2, #3
 8007192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007196:	e003      	b.n	80071a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8272 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	4798      	blx	r3
 80071ba:	e26c      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a43      	ldr	r2, [pc, #268]	; (80072d0 <HAL_DMA_IRQHandler+0xa48>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d022      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a42      	ldr	r2, [pc, #264]	; (80072d4 <HAL_DMA_IRQHandler+0xa4c>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d01d      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a40      	ldr	r2, [pc, #256]	; (80072d8 <HAL_DMA_IRQHandler+0xa50>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d018      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3f      	ldr	r2, [pc, #252]	; (80072dc <HAL_DMA_IRQHandler+0xa54>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d013      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a3d      	ldr	r2, [pc, #244]	; (80072e0 <HAL_DMA_IRQHandler+0xa58>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00e      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a3c      	ldr	r2, [pc, #240]	; (80072e4 <HAL_DMA_IRQHandler+0xa5c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d009      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a3a      	ldr	r2, [pc, #232]	; (80072e8 <HAL_DMA_IRQHandler+0xa60>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d004      	beq.n	800720c <HAL_DMA_IRQHandler+0x984>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a39      	ldr	r2, [pc, #228]	; (80072ec <HAL_DMA_IRQHandler+0xa64>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d101      	bne.n	8007210 <HAL_DMA_IRQHandler+0x988>
 800720c:	2301      	movs	r3, #1
 800720e:	e000      	b.n	8007212 <HAL_DMA_IRQHandler+0x98a>
 8007210:	2300      	movs	r3, #0
 8007212:	2b00      	cmp	r3, #0
 8007214:	f000 823f 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2204      	movs	r2, #4
 800722a:	409a      	lsls	r2, r3
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80cd 	beq.w	80073d0 <HAL_DMA_IRQHandler+0xb48>
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 80c7 	beq.w	80073d0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	2204      	movs	r2, #4
 800724c:	409a      	lsls	r2, r3
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d049      	beq.n	80072f0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d109      	bne.n	800727a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726a:	2b00      	cmp	r3, #0
 800726c:	f000 8210 	beq.w	8007690 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007278:	e20a      	b.n	8007690 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	f000 8206 	beq.w	8007690 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800728c:	e200      	b.n	8007690 <HAL_DMA_IRQHandler+0xe08>
 800728e:	bf00      	nop
 8007290:	40020010 	.word	0x40020010
 8007294:	40020028 	.word	0x40020028
 8007298:	40020040 	.word	0x40020040
 800729c:	40020058 	.word	0x40020058
 80072a0:	40020070 	.word	0x40020070
 80072a4:	40020088 	.word	0x40020088
 80072a8:	400200a0 	.word	0x400200a0
 80072ac:	400200b8 	.word	0x400200b8
 80072b0:	40020410 	.word	0x40020410
 80072b4:	40020428 	.word	0x40020428
 80072b8:	40020440 	.word	0x40020440
 80072bc:	40020458 	.word	0x40020458
 80072c0:	40020470 	.word	0x40020470
 80072c4:	40020488 	.word	0x40020488
 80072c8:	400204a0 	.word	0x400204a0
 80072cc:	400204b8 	.word	0x400204b8
 80072d0:	58025408 	.word	0x58025408
 80072d4:	5802541c 	.word	0x5802541c
 80072d8:	58025430 	.word	0x58025430
 80072dc:	58025444 	.word	0x58025444
 80072e0:	58025458 	.word	0x58025458
 80072e4:	5802546c 	.word	0x5802546c
 80072e8:	58025480 	.word	0x58025480
 80072ec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d160      	bne.n	80073bc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a8c      	ldr	r2, [pc, #560]	; (8007530 <HAL_DMA_IRQHandler+0xca8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d04a      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a8a      	ldr	r2, [pc, #552]	; (8007534 <HAL_DMA_IRQHandler+0xcac>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d045      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a89      	ldr	r2, [pc, #548]	; (8007538 <HAL_DMA_IRQHandler+0xcb0>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d040      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a87      	ldr	r2, [pc, #540]	; (800753c <HAL_DMA_IRQHandler+0xcb4>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d03b      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a86      	ldr	r2, [pc, #536]	; (8007540 <HAL_DMA_IRQHandler+0xcb8>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d036      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a84      	ldr	r2, [pc, #528]	; (8007544 <HAL_DMA_IRQHandler+0xcbc>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d031      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a83      	ldr	r2, [pc, #524]	; (8007548 <HAL_DMA_IRQHandler+0xcc0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d02c      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a81      	ldr	r2, [pc, #516]	; (800754c <HAL_DMA_IRQHandler+0xcc4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d027      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a80      	ldr	r2, [pc, #512]	; (8007550 <HAL_DMA_IRQHandler+0xcc8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d022      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a7e      	ldr	r2, [pc, #504]	; (8007554 <HAL_DMA_IRQHandler+0xccc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d01d      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a7d      	ldr	r2, [pc, #500]	; (8007558 <HAL_DMA_IRQHandler+0xcd0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d018      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a7b      	ldr	r2, [pc, #492]	; (800755c <HAL_DMA_IRQHandler+0xcd4>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d013      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a7a      	ldr	r2, [pc, #488]	; (8007560 <HAL_DMA_IRQHandler+0xcd8>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00e      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a78      	ldr	r2, [pc, #480]	; (8007564 <HAL_DMA_IRQHandler+0xcdc>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d009      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a77      	ldr	r2, [pc, #476]	; (8007568 <HAL_DMA_IRQHandler+0xce0>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d004      	beq.n	800739a <HAL_DMA_IRQHandler+0xb12>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a75      	ldr	r2, [pc, #468]	; (800756c <HAL_DMA_IRQHandler+0xce4>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d108      	bne.n	80073ac <HAL_DMA_IRQHandler+0xb24>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0208 	bic.w	r2, r2, #8
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	e007      	b.n	80073bc <HAL_DMA_IRQHandler+0xb34>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0204 	bic.w	r2, r2, #4
 80073ba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	f000 8165 	beq.w	8007690 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80073ce:	e15f      	b.n	8007690 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2202      	movs	r2, #2
 80073da:	409a      	lsls	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	4013      	ands	r3, r2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 80c5 	beq.w	8007570 <HAL_DMA_IRQHandler+0xce8>
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80bf 	beq.w	8007570 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	f003 031f 	and.w	r3, r3, #31
 80073fa:	2202      	movs	r2, #2
 80073fc:	409a      	lsls	r2, r3
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d018      	beq.n	800743e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d109      	bne.n	800742a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 813a 	beq.w	8007694 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007428:	e134      	b.n	8007694 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 8130 	beq.w	8007694 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800743c:	e12a      	b.n	8007694 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f003 0320 	and.w	r3, r3, #32
 8007444:	2b00      	cmp	r3, #0
 8007446:	d168      	bne.n	800751a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a38      	ldr	r2, [pc, #224]	; (8007530 <HAL_DMA_IRQHandler+0xca8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d04a      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a37      	ldr	r2, [pc, #220]	; (8007534 <HAL_DMA_IRQHandler+0xcac>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d045      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a35      	ldr	r2, [pc, #212]	; (8007538 <HAL_DMA_IRQHandler+0xcb0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d040      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a34      	ldr	r2, [pc, #208]	; (800753c <HAL_DMA_IRQHandler+0xcb4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d03b      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a32      	ldr	r2, [pc, #200]	; (8007540 <HAL_DMA_IRQHandler+0xcb8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d036      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a31      	ldr	r2, [pc, #196]	; (8007544 <HAL_DMA_IRQHandler+0xcbc>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d031      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a2f      	ldr	r2, [pc, #188]	; (8007548 <HAL_DMA_IRQHandler+0xcc0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d02c      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a2e      	ldr	r2, [pc, #184]	; (800754c <HAL_DMA_IRQHandler+0xcc4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d027      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a2c      	ldr	r2, [pc, #176]	; (8007550 <HAL_DMA_IRQHandler+0xcc8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d022      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a2b      	ldr	r2, [pc, #172]	; (8007554 <HAL_DMA_IRQHandler+0xccc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d01d      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a29      	ldr	r2, [pc, #164]	; (8007558 <HAL_DMA_IRQHandler+0xcd0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d018      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a28      	ldr	r2, [pc, #160]	; (800755c <HAL_DMA_IRQHandler+0xcd4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a26      	ldr	r2, [pc, #152]	; (8007560 <HAL_DMA_IRQHandler+0xcd8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a25      	ldr	r2, [pc, #148]	; (8007564 <HAL_DMA_IRQHandler+0xcdc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a23      	ldr	r2, [pc, #140]	; (8007568 <HAL_DMA_IRQHandler+0xce0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_DMA_IRQHandler+0xc60>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a22      	ldr	r2, [pc, #136]	; (800756c <HAL_DMA_IRQHandler+0xce4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <HAL_DMA_IRQHandler+0xc72>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0214 	bic.w	r2, r2, #20
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e007      	b.n	800750a <HAL_DMA_IRQHandler+0xc82>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 020a 	bic.w	r2, r2, #10
 8007508:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 80b8 	beq.w	8007694 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800752c:	e0b2      	b.n	8007694 <HAL_DMA_IRQHandler+0xe0c>
 800752e:	bf00      	nop
 8007530:	40020010 	.word	0x40020010
 8007534:	40020028 	.word	0x40020028
 8007538:	40020040 	.word	0x40020040
 800753c:	40020058 	.word	0x40020058
 8007540:	40020070 	.word	0x40020070
 8007544:	40020088 	.word	0x40020088
 8007548:	400200a0 	.word	0x400200a0
 800754c:	400200b8 	.word	0x400200b8
 8007550:	40020410 	.word	0x40020410
 8007554:	40020428 	.word	0x40020428
 8007558:	40020440 	.word	0x40020440
 800755c:	40020458 	.word	0x40020458
 8007560:	40020470 	.word	0x40020470
 8007564:	40020488 	.word	0x40020488
 8007568:	400204a0 	.word	0x400204a0
 800756c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	2208      	movs	r2, #8
 800757a:	409a      	lsls	r2, r3
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	4013      	ands	r3, r2
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 8088 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8082 	beq.w	8007696 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a41      	ldr	r2, [pc, #260]	; (800769c <HAL_DMA_IRQHandler+0xe14>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d04a      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a3f      	ldr	r2, [pc, #252]	; (80076a0 <HAL_DMA_IRQHandler+0xe18>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d045      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a3e      	ldr	r2, [pc, #248]	; (80076a4 <HAL_DMA_IRQHandler+0xe1c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d040      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a3c      	ldr	r2, [pc, #240]	; (80076a8 <HAL_DMA_IRQHandler+0xe20>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d03b      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a3b      	ldr	r2, [pc, #236]	; (80076ac <HAL_DMA_IRQHandler+0xe24>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d036      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a39      	ldr	r2, [pc, #228]	; (80076b0 <HAL_DMA_IRQHandler+0xe28>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d031      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a38      	ldr	r2, [pc, #224]	; (80076b4 <HAL_DMA_IRQHandler+0xe2c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d02c      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a36      	ldr	r2, [pc, #216]	; (80076b8 <HAL_DMA_IRQHandler+0xe30>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d027      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a35      	ldr	r2, [pc, #212]	; (80076bc <HAL_DMA_IRQHandler+0xe34>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d022      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a33      	ldr	r2, [pc, #204]	; (80076c0 <HAL_DMA_IRQHandler+0xe38>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01d      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a32      	ldr	r2, [pc, #200]	; (80076c4 <HAL_DMA_IRQHandler+0xe3c>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d018      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a30      	ldr	r2, [pc, #192]	; (80076c8 <HAL_DMA_IRQHandler+0xe40>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d013      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a2f      	ldr	r2, [pc, #188]	; (80076cc <HAL_DMA_IRQHandler+0xe44>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d00e      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a2d      	ldr	r2, [pc, #180]	; (80076d0 <HAL_DMA_IRQHandler+0xe48>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a2c      	ldr	r2, [pc, #176]	; (80076d4 <HAL_DMA_IRQHandler+0xe4c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_DMA_IRQHandler+0xdaa>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a2a      	ldr	r2, [pc, #168]	; (80076d8 <HAL_DMA_IRQHandler+0xe50>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d108      	bne.n	8007644 <HAL_DMA_IRQHandler+0xdbc>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f022 021c 	bic.w	r2, r2, #28
 8007640:	601a      	str	r2, [r3, #0]
 8007642:	e007      	b.n	8007654 <HAL_DMA_IRQHandler+0xdcc>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 020e 	bic.w	r2, r2, #14
 8007652:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007658:	f003 031f 	and.w	r3, r3, #31
 800765c:	2201      	movs	r2, #1
 800765e:	409a      	lsls	r2, r3
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2201      	movs	r2, #1
 8007668:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767e:	2b00      	cmp	r3, #0
 8007680:	d009      	beq.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	4798      	blx	r3
 800768a:	e004      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800768c:	bf00      	nop
 800768e:	e002      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007694:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007696:	3728      	adds	r7, #40	; 0x28
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40020010 	.word	0x40020010
 80076a0:	40020028 	.word	0x40020028
 80076a4:	40020040 	.word	0x40020040
 80076a8:	40020058 	.word	0x40020058
 80076ac:	40020070 	.word	0x40020070
 80076b0:	40020088 	.word	0x40020088
 80076b4:	400200a0 	.word	0x400200a0
 80076b8:	400200b8 	.word	0x400200b8
 80076bc:	40020410 	.word	0x40020410
 80076c0:	40020428 	.word	0x40020428
 80076c4:	40020440 	.word	0x40020440
 80076c8:	40020458 	.word	0x40020458
 80076cc:	40020470 	.word	0x40020470
 80076d0:	40020488 	.word	0x40020488
 80076d4:	400204a0 	.word	0x400204a0
 80076d8:	400204b8 	.word	0x400204b8

080076dc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076f4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a84      	ldr	r2, [pc, #528]	; (800790c <DMA_SetConfig+0x230>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d072      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a82      	ldr	r2, [pc, #520]	; (8007910 <DMA_SetConfig+0x234>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d06d      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a81      	ldr	r2, [pc, #516]	; (8007914 <DMA_SetConfig+0x238>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d068      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a7f      	ldr	r2, [pc, #508]	; (8007918 <DMA_SetConfig+0x23c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d063      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a7e      	ldr	r2, [pc, #504]	; (800791c <DMA_SetConfig+0x240>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d05e      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a7c      	ldr	r2, [pc, #496]	; (8007920 <DMA_SetConfig+0x244>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d059      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a7b      	ldr	r2, [pc, #492]	; (8007924 <DMA_SetConfig+0x248>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d054      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a79      	ldr	r2, [pc, #484]	; (8007928 <DMA_SetConfig+0x24c>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d04f      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a78      	ldr	r2, [pc, #480]	; (800792c <DMA_SetConfig+0x250>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d04a      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a76      	ldr	r2, [pc, #472]	; (8007930 <DMA_SetConfig+0x254>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d045      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a75      	ldr	r2, [pc, #468]	; (8007934 <DMA_SetConfig+0x258>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d040      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a73      	ldr	r2, [pc, #460]	; (8007938 <DMA_SetConfig+0x25c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d03b      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a72      	ldr	r2, [pc, #456]	; (800793c <DMA_SetConfig+0x260>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d036      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a70      	ldr	r2, [pc, #448]	; (8007940 <DMA_SetConfig+0x264>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d031      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a6f      	ldr	r2, [pc, #444]	; (8007944 <DMA_SetConfig+0x268>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d02c      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a6d      	ldr	r2, [pc, #436]	; (8007948 <DMA_SetConfig+0x26c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d027      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a6c      	ldr	r2, [pc, #432]	; (800794c <DMA_SetConfig+0x270>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d022      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a6a      	ldr	r2, [pc, #424]	; (8007950 <DMA_SetConfig+0x274>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01d      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a69      	ldr	r2, [pc, #420]	; (8007954 <DMA_SetConfig+0x278>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d018      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a67      	ldr	r2, [pc, #412]	; (8007958 <DMA_SetConfig+0x27c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d013      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a66      	ldr	r2, [pc, #408]	; (800795c <DMA_SetConfig+0x280>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00e      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a64      	ldr	r2, [pc, #400]	; (8007960 <DMA_SetConfig+0x284>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d009      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a63      	ldr	r2, [pc, #396]	; (8007964 <DMA_SetConfig+0x288>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d004      	beq.n	80077e6 <DMA_SetConfig+0x10a>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a61      	ldr	r2, [pc, #388]	; (8007968 <DMA_SetConfig+0x28c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d101      	bne.n	80077ea <DMA_SetConfig+0x10e>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <DMA_SetConfig+0x110>
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80077f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800780a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a3e      	ldr	r2, [pc, #248]	; (800790c <DMA_SetConfig+0x230>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d04a      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a3d      	ldr	r2, [pc, #244]	; (8007910 <DMA_SetConfig+0x234>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d045      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a3b      	ldr	r2, [pc, #236]	; (8007914 <DMA_SetConfig+0x238>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d040      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a3a      	ldr	r2, [pc, #232]	; (8007918 <DMA_SetConfig+0x23c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d03b      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a38      	ldr	r2, [pc, #224]	; (800791c <DMA_SetConfig+0x240>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d036      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a37      	ldr	r2, [pc, #220]	; (8007920 <DMA_SetConfig+0x244>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d031      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a35      	ldr	r2, [pc, #212]	; (8007924 <DMA_SetConfig+0x248>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d02c      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a34      	ldr	r2, [pc, #208]	; (8007928 <DMA_SetConfig+0x24c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d027      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a32      	ldr	r2, [pc, #200]	; (800792c <DMA_SetConfig+0x250>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d022      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a31      	ldr	r2, [pc, #196]	; (8007930 <DMA_SetConfig+0x254>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d01d      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a2f      	ldr	r2, [pc, #188]	; (8007934 <DMA_SetConfig+0x258>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d018      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a2e      	ldr	r2, [pc, #184]	; (8007938 <DMA_SetConfig+0x25c>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d013      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a2c      	ldr	r2, [pc, #176]	; (800793c <DMA_SetConfig+0x260>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00e      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a2b      	ldr	r2, [pc, #172]	; (8007940 <DMA_SetConfig+0x264>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d009      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a29      	ldr	r2, [pc, #164]	; (8007944 <DMA_SetConfig+0x268>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d004      	beq.n	80078ac <DMA_SetConfig+0x1d0>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a28      	ldr	r2, [pc, #160]	; (8007948 <DMA_SetConfig+0x26c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d101      	bne.n	80078b0 <DMA_SetConfig+0x1d4>
 80078ac:	2301      	movs	r3, #1
 80078ae:	e000      	b.n	80078b2 <DMA_SetConfig+0x1d6>
 80078b0:	2300      	movs	r3, #0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d05a      	beq.n	800796c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	223f      	movs	r2, #63	; 0x3f
 80078c0:	409a      	lsls	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80078d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	2b40      	cmp	r3, #64	; 0x40
 80078e4:	d108      	bne.n	80078f8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80078f6:	e087      	b.n	8007a08 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	687a      	ldr	r2, [r7, #4]
 8007906:	60da      	str	r2, [r3, #12]
}
 8007908:	e07e      	b.n	8007a08 <DMA_SetConfig+0x32c>
 800790a:	bf00      	nop
 800790c:	40020010 	.word	0x40020010
 8007910:	40020028 	.word	0x40020028
 8007914:	40020040 	.word	0x40020040
 8007918:	40020058 	.word	0x40020058
 800791c:	40020070 	.word	0x40020070
 8007920:	40020088 	.word	0x40020088
 8007924:	400200a0 	.word	0x400200a0
 8007928:	400200b8 	.word	0x400200b8
 800792c:	40020410 	.word	0x40020410
 8007930:	40020428 	.word	0x40020428
 8007934:	40020440 	.word	0x40020440
 8007938:	40020458 	.word	0x40020458
 800793c:	40020470 	.word	0x40020470
 8007940:	40020488 	.word	0x40020488
 8007944:	400204a0 	.word	0x400204a0
 8007948:	400204b8 	.word	0x400204b8
 800794c:	58025408 	.word	0x58025408
 8007950:	5802541c 	.word	0x5802541c
 8007954:	58025430 	.word	0x58025430
 8007958:	58025444 	.word	0x58025444
 800795c:	58025458 	.word	0x58025458
 8007960:	5802546c 	.word	0x5802546c
 8007964:	58025480 	.word	0x58025480
 8007968:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a28      	ldr	r2, [pc, #160]	; (8007a14 <DMA_SetConfig+0x338>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d022      	beq.n	80079bc <DMA_SetConfig+0x2e0>
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <DMA_SetConfig+0x33c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d01d      	beq.n	80079bc <DMA_SetConfig+0x2e0>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a25      	ldr	r2, [pc, #148]	; (8007a1c <DMA_SetConfig+0x340>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d018      	beq.n	80079bc <DMA_SetConfig+0x2e0>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a24      	ldr	r2, [pc, #144]	; (8007a20 <DMA_SetConfig+0x344>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <DMA_SetConfig+0x2e0>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a22      	ldr	r2, [pc, #136]	; (8007a24 <DMA_SetConfig+0x348>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00e      	beq.n	80079bc <DMA_SetConfig+0x2e0>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a21      	ldr	r2, [pc, #132]	; (8007a28 <DMA_SetConfig+0x34c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d009      	beq.n	80079bc <DMA_SetConfig+0x2e0>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a1f      	ldr	r2, [pc, #124]	; (8007a2c <DMA_SetConfig+0x350>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d004      	beq.n	80079bc <DMA_SetConfig+0x2e0>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a1e      	ldr	r2, [pc, #120]	; (8007a30 <DMA_SetConfig+0x354>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d101      	bne.n	80079c0 <DMA_SetConfig+0x2e4>
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <DMA_SetConfig+0x2e6>
 80079c0:	2300      	movs	r3, #0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d020      	beq.n	8007a08 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	2201      	movs	r2, #1
 80079d0:	409a      	lsls	r2, r3
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d108      	bne.n	80079f8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	60da      	str	r2, [r3, #12]
}
 80079f6:	e007      	b.n	8007a08 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	60da      	str	r2, [r3, #12]
}
 8007a08:	bf00      	nop
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	58025408 	.word	0x58025408
 8007a18:	5802541c 	.word	0x5802541c
 8007a1c:	58025430 	.word	0x58025430
 8007a20:	58025444 	.word	0x58025444
 8007a24:	58025458 	.word	0x58025458
 8007a28:	5802546c 	.word	0x5802546c
 8007a2c:	58025480 	.word	0x58025480
 8007a30:	58025494 	.word	0x58025494

08007a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a42      	ldr	r2, [pc, #264]	; (8007b4c <DMA_CalcBaseAndBitshift+0x118>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d04a      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a41      	ldr	r2, [pc, #260]	; (8007b50 <DMA_CalcBaseAndBitshift+0x11c>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d045      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a3f      	ldr	r2, [pc, #252]	; (8007b54 <DMA_CalcBaseAndBitshift+0x120>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d040      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a3e      	ldr	r2, [pc, #248]	; (8007b58 <DMA_CalcBaseAndBitshift+0x124>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d03b      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a3c      	ldr	r2, [pc, #240]	; (8007b5c <DMA_CalcBaseAndBitshift+0x128>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d036      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a3b      	ldr	r2, [pc, #236]	; (8007b60 <DMA_CalcBaseAndBitshift+0x12c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d031      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a39      	ldr	r2, [pc, #228]	; (8007b64 <DMA_CalcBaseAndBitshift+0x130>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d02c      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a38      	ldr	r2, [pc, #224]	; (8007b68 <DMA_CalcBaseAndBitshift+0x134>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d027      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a36      	ldr	r2, [pc, #216]	; (8007b6c <DMA_CalcBaseAndBitshift+0x138>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d022      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a35      	ldr	r2, [pc, #212]	; (8007b70 <DMA_CalcBaseAndBitshift+0x13c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d01d      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a33      	ldr	r2, [pc, #204]	; (8007b74 <DMA_CalcBaseAndBitshift+0x140>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d018      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a32      	ldr	r2, [pc, #200]	; (8007b78 <DMA_CalcBaseAndBitshift+0x144>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d013      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a30      	ldr	r2, [pc, #192]	; (8007b7c <DMA_CalcBaseAndBitshift+0x148>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00e      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a2f      	ldr	r2, [pc, #188]	; (8007b80 <DMA_CalcBaseAndBitshift+0x14c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d009      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a2d      	ldr	r2, [pc, #180]	; (8007b84 <DMA_CalcBaseAndBitshift+0x150>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d004      	beq.n	8007adc <DMA_CalcBaseAndBitshift+0xa8>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a2c      	ldr	r2, [pc, #176]	; (8007b88 <DMA_CalcBaseAndBitshift+0x154>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d101      	bne.n	8007ae0 <DMA_CalcBaseAndBitshift+0xac>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <DMA_CalcBaseAndBitshift+0xae>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d024      	beq.n	8007b30 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	3b10      	subs	r3, #16
 8007aee:	4a27      	ldr	r2, [pc, #156]	; (8007b8c <DMA_CalcBaseAndBitshift+0x158>)
 8007af0:	fba2 2303 	umull	r2, r3, r2, r3
 8007af4:	091b      	lsrs	r3, r3, #4
 8007af6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f003 0307 	and.w	r3, r3, #7
 8007afe:	4a24      	ldr	r2, [pc, #144]	; (8007b90 <DMA_CalcBaseAndBitshift+0x15c>)
 8007b00:	5cd3      	ldrb	r3, [r2, r3]
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d908      	bls.n	8007b20 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	4b1f      	ldr	r3, [pc, #124]	; (8007b94 <DMA_CalcBaseAndBitshift+0x160>)
 8007b16:	4013      	ands	r3, r2
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	659a      	str	r2, [r3, #88]	; 0x58
 8007b1e:	e00d      	b.n	8007b3c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <DMA_CalcBaseAndBitshift+0x160>)
 8007b28:	4013      	ands	r3, r2
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8007b2e:	e005      	b.n	8007b3c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	40020010 	.word	0x40020010
 8007b50:	40020028 	.word	0x40020028
 8007b54:	40020040 	.word	0x40020040
 8007b58:	40020058 	.word	0x40020058
 8007b5c:	40020070 	.word	0x40020070
 8007b60:	40020088 	.word	0x40020088
 8007b64:	400200a0 	.word	0x400200a0
 8007b68:	400200b8 	.word	0x400200b8
 8007b6c:	40020410 	.word	0x40020410
 8007b70:	40020428 	.word	0x40020428
 8007b74:	40020440 	.word	0x40020440
 8007b78:	40020458 	.word	0x40020458
 8007b7c:	40020470 	.word	0x40020470
 8007b80:	40020488 	.word	0x40020488
 8007b84:	400204a0 	.word	0x400204a0
 8007b88:	400204b8 	.word	0x400204b8
 8007b8c:	aaaaaaab 	.word	0xaaaaaaab
 8007b90:	0800f86c 	.word	0x0800f86c
 8007b94:	fffffc00 	.word	0xfffffc00

08007b98 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d120      	bne.n	8007bee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d858      	bhi.n	8007c66 <DMA_CheckFifoParam+0xce>
 8007bb4:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <DMA_CheckFifoParam+0x24>)
 8007bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bba:	bf00      	nop
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bdf 	.word	0x08007bdf
 8007bc4:	08007bcd 	.word	0x08007bcd
 8007bc8:	08007c67 	.word	0x08007c67
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d048      	beq.n	8007c6a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bdc:	e045      	b.n	8007c6a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007be6:	d142      	bne.n	8007c6e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007bec:	e03f      	b.n	8007c6e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bf6:	d123      	bne.n	8007c40 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	d838      	bhi.n	8007c72 <DMA_CheckFifoParam+0xda>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <DMA_CheckFifoParam+0x70>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c1f 	.word	0x08007c1f
 8007c10:	08007c19 	.word	0x08007c19
 8007c14:	08007c31 	.word	0x08007c31
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	73fb      	strb	r3, [r7, #15]
        break;
 8007c1c:	e030      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d025      	beq.n	8007c76 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c2e:	e022      	b.n	8007c76 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c38:	d11f      	bne.n	8007c7a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007c3e:	e01c      	b.n	8007c7a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d902      	bls.n	8007c4e <DMA_CheckFifoParam+0xb6>
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d003      	beq.n	8007c54 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007c4c:	e018      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]
        break;
 8007c52:	e015      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00e      	beq.n	8007c7e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	73fb      	strb	r3, [r7, #15]
    break;
 8007c64:	e00b      	b.n	8007c7e <DMA_CheckFifoParam+0xe6>
        break;
 8007c66:	bf00      	nop
 8007c68:	e00a      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c6a:	bf00      	nop
 8007c6c:	e008      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c6e:	bf00      	nop
 8007c70:	e006      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c72:	bf00      	nop
 8007c74:	e004      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c76:	bf00      	nop
 8007c78:	e002      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
        break;
 8007c7a:	bf00      	nop
 8007c7c:	e000      	b.n	8007c80 <DMA_CheckFifoParam+0xe8>
    break;
 8007c7e:	bf00      	nop
    }
  }

  return status;
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop

08007c90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b085      	sub	sp, #20
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a38      	ldr	r2, [pc, #224]	; (8007d84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d022      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a36      	ldr	r2, [pc, #216]	; (8007d88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d01d      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a35      	ldr	r2, [pc, #212]	; (8007d8c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d018      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a33      	ldr	r2, [pc, #204]	; (8007d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d013      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a32      	ldr	r2, [pc, #200]	; (8007d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00e      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a30      	ldr	r2, [pc, #192]	; (8007d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d009      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a2f      	ldr	r2, [pc, #188]	; (8007d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a2d      	ldr	r2, [pc, #180]	; (8007da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d101      	bne.n	8007cf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e000      	b.n	8007cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01a      	beq.n	8007d2e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	3b08      	subs	r3, #8
 8007d00:	4a28      	ldr	r2, [pc, #160]	; (8007da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007d02:	fba2 2303 	umull	r2, r3, r2, r3
 8007d06:	091b      	lsrs	r3, r3, #4
 8007d08:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	4b26      	ldr	r3, [pc, #152]	; (8007da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	461a      	mov	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a24      	ldr	r2, [pc, #144]	; (8007dac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007d1c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f003 031f 	and.w	r3, r3, #31
 8007d24:	2201      	movs	r2, #1
 8007d26:	409a      	lsls	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007d2c:	e024      	b.n	8007d78 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	3b10      	subs	r3, #16
 8007d36:	4a1e      	ldr	r2, [pc, #120]	; (8007db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007d38:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3c:	091b      	lsrs	r3, r3, #4
 8007d3e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4a1c      	ldr	r2, [pc, #112]	; (8007db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d806      	bhi.n	8007d56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d902      	bls.n	8007d56 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	3308      	adds	r3, #8
 8007d54:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	4b18      	ldr	r3, [pc, #96]	; (8007dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007d5a:	4413      	add	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	461a      	mov	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007d68:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	2201      	movs	r2, #1
 8007d72:	409a      	lsls	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	58025408 	.word	0x58025408
 8007d88:	5802541c 	.word	0x5802541c
 8007d8c:	58025430 	.word	0x58025430
 8007d90:	58025444 	.word	0x58025444
 8007d94:	58025458 	.word	0x58025458
 8007d98:	5802546c 	.word	0x5802546c
 8007d9c:	58025480 	.word	0x58025480
 8007da0:	58025494 	.word	0x58025494
 8007da4:	cccccccd 	.word	0xcccccccd
 8007da8:	16009600 	.word	0x16009600
 8007dac:	58025880 	.word	0x58025880
 8007db0:	aaaaaaab 	.word	0xaaaaaaab
 8007db4:	400204b8 	.word	0x400204b8
 8007db8:	4002040f 	.word	0x4002040f
 8007dbc:	10008200 	.word	0x10008200
 8007dc0:	40020880 	.word	0x40020880

08007dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d04a      	beq.n	8007e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d847      	bhi.n	8007e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a25      	ldr	r2, [pc, #148]	; (8007e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d022      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a24      	ldr	r2, [pc, #144]	; (8007e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d01d      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a22      	ldr	r2, [pc, #136]	; (8007e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d018      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a21      	ldr	r2, [pc, #132]	; (8007e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d013      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1f      	ldr	r2, [pc, #124]	; (8007e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00e      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1e      	ldr	r2, [pc, #120]	; (8007e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d009      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a1c      	ldr	r2, [pc, #112]	; (8007e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d004      	beq.n	8007e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a1b      	ldr	r2, [pc, #108]	; (8007e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d101      	bne.n	8007e34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007e30:	2301      	movs	r3, #1
 8007e32:	e000      	b.n	8007e36 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007e34:	2300      	movs	r3, #0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00a      	beq.n	8007e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4b17      	ldr	r3, [pc, #92]	; (8007e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007e3e:	4413      	add	r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	461a      	mov	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007e4c:	671a      	str	r2, [r3, #112]	; 0x70
 8007e4e:	e009      	b.n	8007e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4b14      	ldr	r3, [pc, #80]	; (8007ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a11      	ldr	r2, [pc, #68]	; (8007ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007e62:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	3b01      	subs	r3, #1
 8007e68:	2201      	movs	r2, #1
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	58025408 	.word	0x58025408
 8007e80:	5802541c 	.word	0x5802541c
 8007e84:	58025430 	.word	0x58025430
 8007e88:	58025444 	.word	0x58025444
 8007e8c:	58025458 	.word	0x58025458
 8007e90:	5802546c 	.word	0x5802546c
 8007e94:	58025480 	.word	0x58025480
 8007e98:	58025494 	.word	0x58025494
 8007e9c:	1600963f 	.word	0x1600963f
 8007ea0:	58025940 	.word	0x58025940
 8007ea4:	1000823f 	.word	0x1000823f
 8007ea8:	40020940 	.word	0x40020940

08007eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b089      	sub	sp, #36	; 0x24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007eba:	4b86      	ldr	r3, [pc, #536]	; (80080d4 <HAL_GPIO_Init+0x228>)
 8007ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ebe:	e18c      	b.n	80081da <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ecc:	4013      	ands	r3, r2
 8007ece:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f000 817e 	beq.w	80081d4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	f003 0303 	and.w	r3, r3, #3
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d005      	beq.n	8007ef0 <HAL_GPIO_Init+0x44>
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f003 0303 	and.w	r3, r3, #3
 8007eec:	2b02      	cmp	r3, #2
 8007eee:	d130      	bne.n	8007f52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	2203      	movs	r2, #3
 8007efc:	fa02 f303 	lsl.w	r3, r2, r3
 8007f00:	43db      	mvns	r3, r3
 8007f02:	69ba      	ldr	r2, [r7, #24]
 8007f04:	4013      	ands	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	68da      	ldr	r2, [r3, #12]
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	005b      	lsls	r3, r3, #1
 8007f10:	fa02 f303 	lsl.w	r3, r2, r3
 8007f14:	69ba      	ldr	r2, [r7, #24]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f26:	2201      	movs	r2, #1
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f2e:	43db      	mvns	r3, r3
 8007f30:	69ba      	ldr	r2, [r7, #24]
 8007f32:	4013      	ands	r3, r2
 8007f34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	091b      	lsrs	r3, r3, #4
 8007f3c:	f003 0201 	and.w	r2, r3, #1
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d017      	beq.n	8007f8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	005b      	lsls	r3, r3, #1
 8007f68:	2203      	movs	r2, #3
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	43db      	mvns	r3, r3
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	4013      	ands	r3, r2
 8007f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d123      	bne.n	8007fe2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	08da      	lsrs	r2, r3, #3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3208      	adds	r2, #8
 8007fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f003 0307 	and.w	r3, r3, #7
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	220f      	movs	r2, #15
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	43db      	mvns	r3, r3
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	691a      	ldr	r2, [r3, #16]
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	f003 0307 	and.w	r3, r3, #7
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	fa02 f303 	lsl.w	r3, r2, r3
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	08da      	lsrs	r2, r3, #3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3208      	adds	r2, #8
 8007fdc:	69b9      	ldr	r1, [r7, #24]
 8007fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	005b      	lsls	r3, r3, #1
 8007fec:	2203      	movs	r2, #3
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	43db      	mvns	r3, r3
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f003 0203 	and.w	r2, r3, #3
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	4313      	orrs	r3, r2
 800800e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800801e:	2b00      	cmp	r3, #0
 8008020:	f000 80d8 	beq.w	80081d4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008024:	4b2c      	ldr	r3, [pc, #176]	; (80080d8 <HAL_GPIO_Init+0x22c>)
 8008026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800802a:	4a2b      	ldr	r2, [pc, #172]	; (80080d8 <HAL_GPIO_Init+0x22c>)
 800802c:	f043 0302 	orr.w	r3, r3, #2
 8008030:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008034:	4b28      	ldr	r3, [pc, #160]	; (80080d8 <HAL_GPIO_Init+0x22c>)
 8008036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	60fb      	str	r3, [r7, #12]
 8008040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008042:	4a26      	ldr	r2, [pc, #152]	; (80080dc <HAL_GPIO_Init+0x230>)
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	089b      	lsrs	r3, r3, #2
 8008048:	3302      	adds	r3, #2
 800804a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800804e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	220f      	movs	r2, #15
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43db      	mvns	r3, r3
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	4013      	ands	r3, r2
 8008064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a1d      	ldr	r2, [pc, #116]	; (80080e0 <HAL_GPIO_Init+0x234>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d04a      	beq.n	8008104 <HAL_GPIO_Init+0x258>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a1c      	ldr	r2, [pc, #112]	; (80080e4 <HAL_GPIO_Init+0x238>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d02b      	beq.n	80080ce <HAL_GPIO_Init+0x222>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a1b      	ldr	r2, [pc, #108]	; (80080e8 <HAL_GPIO_Init+0x23c>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d025      	beq.n	80080ca <HAL_GPIO_Init+0x21e>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a1a      	ldr	r2, [pc, #104]	; (80080ec <HAL_GPIO_Init+0x240>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d01f      	beq.n	80080c6 <HAL_GPIO_Init+0x21a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a19      	ldr	r2, [pc, #100]	; (80080f0 <HAL_GPIO_Init+0x244>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d019      	beq.n	80080c2 <HAL_GPIO_Init+0x216>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a18      	ldr	r2, [pc, #96]	; (80080f4 <HAL_GPIO_Init+0x248>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d013      	beq.n	80080be <HAL_GPIO_Init+0x212>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a17      	ldr	r2, [pc, #92]	; (80080f8 <HAL_GPIO_Init+0x24c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00d      	beq.n	80080ba <HAL_GPIO_Init+0x20e>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a16      	ldr	r2, [pc, #88]	; (80080fc <HAL_GPIO_Init+0x250>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d007      	beq.n	80080b6 <HAL_GPIO_Init+0x20a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a15      	ldr	r2, [pc, #84]	; (8008100 <HAL_GPIO_Init+0x254>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d101      	bne.n	80080b2 <HAL_GPIO_Init+0x206>
 80080ae:	2309      	movs	r3, #9
 80080b0:	e029      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080b2:	230a      	movs	r3, #10
 80080b4:	e027      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080b6:	2307      	movs	r3, #7
 80080b8:	e025      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080ba:	2306      	movs	r3, #6
 80080bc:	e023      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080be:	2305      	movs	r3, #5
 80080c0:	e021      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080c2:	2304      	movs	r3, #4
 80080c4:	e01f      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080c6:	2303      	movs	r3, #3
 80080c8:	e01d      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e01b      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e019      	b.n	8008106 <HAL_GPIO_Init+0x25a>
 80080d2:	bf00      	nop
 80080d4:	58000080 	.word	0x58000080
 80080d8:	58024400 	.word	0x58024400
 80080dc:	58000400 	.word	0x58000400
 80080e0:	58020000 	.word	0x58020000
 80080e4:	58020400 	.word	0x58020400
 80080e8:	58020800 	.word	0x58020800
 80080ec:	58020c00 	.word	0x58020c00
 80080f0:	58021000 	.word	0x58021000
 80080f4:	58021400 	.word	0x58021400
 80080f8:	58021800 	.word	0x58021800
 80080fc:	58021c00 	.word	0x58021c00
 8008100:	58022400 	.word	0x58022400
 8008104:	2300      	movs	r3, #0
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	f002 0203 	and.w	r2, r2, #3
 800810c:	0092      	lsls	r2, r2, #2
 800810e:	4093      	lsls	r3, r2
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	4313      	orrs	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008116:	4938      	ldr	r1, [pc, #224]	; (80081f8 <HAL_GPIO_Init+0x34c>)
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	089b      	lsrs	r3, r3, #2
 800811c:	3302      	adds	r3, #2
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	43db      	mvns	r3, r3
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	4013      	ands	r3, r2
 8008134:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008142:	69ba      	ldr	r2, [r7, #24]
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800814a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	43db      	mvns	r3, r3
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	4013      	ands	r3, r2
 8008162:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800816c:	2b00      	cmp	r3, #0
 800816e:	d003      	beq.n	8008178 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	4313      	orrs	r3, r2
 8008176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	43db      	mvns	r3, r3
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	4013      	ands	r3, r2
 800818e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	43db      	mvns	r3, r3
 80081b4:	69ba      	ldr	r2, [r7, #24]
 80081b6:	4013      	ands	r3, r2
 80081b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d003      	beq.n	80081ce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	3301      	adds	r3, #1
 80081d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	fa22 f303 	lsr.w	r3, r2, r3
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f47f ae6b 	bne.w	8007ec0 <HAL_GPIO_Init+0x14>
  }
}
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	3724      	adds	r7, #36	; 0x24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	58000400 	.word	0x58000400

080081fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b083      	sub	sp, #12
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	807b      	strh	r3, [r7, #2]
 8008208:	4613      	mov	r3, r2
 800820a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800820c:	787b      	ldrb	r3, [r7, #1]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008212:	887a      	ldrh	r2, [r7, #2]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008218:	e003      	b.n	8008222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800821a:	887b      	ldrh	r3, [r7, #2]
 800821c:	041a      	lsls	r2, r3, #16
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	619a      	str	r2, [r3, #24]
}
 8008222:	bf00      	nop
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	460b      	mov	r3, r1
 8008238:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008240:	887a      	ldrh	r2, [r7, #2]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4013      	ands	r3, r2
 8008246:	041a      	lsls	r2, r3, #16
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	43d9      	mvns	r1, r3
 800824c:	887b      	ldrh	r3, [r7, #2]
 800824e:	400b      	ands	r3, r1
 8008250:	431a      	orrs	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	619a      	str	r2, [r3, #24]
}
 8008256:	bf00      	nop
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
	...

08008264 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e07f      	b.n	8008376 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7f9 f9de 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2224      	movs	r2, #36	; 0x24
 8008294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0201 	bic.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80082b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d107      	bne.n	80082de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082da:	609a      	str	r2, [r3, #8]
 80082dc:	e006      	b.n	80082ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689a      	ldr	r2, [r3, #8]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80082ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d104      	bne.n	80082fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6859      	ldr	r1, [r3, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	4b1d      	ldr	r3, [pc, #116]	; (8008380 <HAL_I2C_Init+0x11c>)
 800830a:	430b      	orrs	r3, r1
 800830c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800831c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691a      	ldr	r2, [r3, #16]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	699b      	ldr	r3, [r3, #24]
 800832e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	69d9      	ldr	r1, [r3, #28]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a1a      	ldr	r2, [r3, #32]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	430a      	orrs	r2, r1
 8008346:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2220      	movs	r2, #32
 8008362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	02008000 	.word	0x02008000

08008384 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b20      	cmp	r3, #32
 8008398:	d138      	bne.n	800840c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d101      	bne.n	80083a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80083a4:	2302      	movs	r3, #2
 80083a6:	e032      	b.n	800840e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2224      	movs	r2, #36	; 0x24
 80083b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f022 0201 	bic.w	r2, r2, #1
 80083c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80083d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6819      	ldr	r1, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f042 0201 	orr.w	r2, r2, #1
 80083f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2220      	movs	r2, #32
 80083fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	e000      	b.n	800840e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800840c:	2302      	movs	r3, #2
  }
}
 800840e:	4618      	mov	r0, r3
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr

0800841a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800841a:	b480      	push	{r7}
 800841c:	b085      	sub	sp, #20
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b20      	cmp	r3, #32
 800842e:	d139      	bne.n	80084a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800843a:	2302      	movs	r3, #2
 800843c:	e033      	b.n	80084a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2224      	movs	r2, #36	; 0x24
 800844a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 0201 	bic.w	r2, r2, #1
 800845c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800846c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	021b      	lsls	r3, r3, #8
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	4313      	orrs	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0201 	orr.w	r2, r2, #1
 800848e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	e000      	b.n	80084a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80084a4:	2302      	movs	r3, #2
  }
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80084bc:	4b19      	ldr	r3, [pc, #100]	; (8008524 <HAL_PWREx_ConfigSupply+0x70>)
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d00a      	beq.n	80084de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80084c8:	4b16      	ldr	r3, [pc, #88]	; (8008524 <HAL_PWREx_ConfigSupply+0x70>)
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f003 0307 	and.w	r3, r3, #7
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d001      	beq.n	80084da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e01f      	b.n	800851a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	e01d      	b.n	800851a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80084de:	4b11      	ldr	r3, [pc, #68]	; (8008524 <HAL_PWREx_ConfigSupply+0x70>)
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f023 0207 	bic.w	r2, r3, #7
 80084e6:	490f      	ldr	r1, [pc, #60]	; (8008524 <HAL_PWREx_ConfigSupply+0x70>)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80084ee:	f7fb f9bd 	bl	800386c <HAL_GetTick>
 80084f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80084f4:	e009      	b.n	800850a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80084f6:	f7fb f9b9 	bl	800386c <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008504:	d901      	bls.n	800850a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e007      	b.n	800851a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800850a:	4b06      	ldr	r3, [pc, #24]	; (8008524 <HAL_PWREx_ConfigSupply+0x70>)
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008516:	d1ee      	bne.n	80084f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	58024800 	.word	0x58024800

08008528 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b08c      	sub	sp, #48	; 0x30
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d101      	bne.n	800853a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e397      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0301 	and.w	r3, r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 8087 	beq.w	8008656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008548:	4b9e      	ldr	r3, [pc, #632]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008552:	4b9c      	ldr	r3, [pc, #624]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	2b10      	cmp	r3, #16
 800855c:	d007      	beq.n	800856e <HAL_RCC_OscConfig+0x46>
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	2b18      	cmp	r3, #24
 8008562:	d110      	bne.n	8008586 <HAL_RCC_OscConfig+0x5e>
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d10b      	bne.n	8008586 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800856e:	4b95      	ldr	r3, [pc, #596]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008576:	2b00      	cmp	r3, #0
 8008578:	d06c      	beq.n	8008654 <HAL_RCC_OscConfig+0x12c>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d168      	bne.n	8008654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e371      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858e:	d106      	bne.n	800859e <HAL_RCC_OscConfig+0x76>
 8008590:	4b8c      	ldr	r3, [pc, #560]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a8b      	ldr	r2, [pc, #556]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	e02e      	b.n	80085fc <HAL_RCC_OscConfig+0xd4>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10c      	bne.n	80085c0 <HAL_RCC_OscConfig+0x98>
 80085a6:	4b87      	ldr	r3, [pc, #540]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a86      	ldr	r2, [pc, #536]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	4b84      	ldr	r3, [pc, #528]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a83      	ldr	r2, [pc, #524]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	e01d      	b.n	80085fc <HAL_RCC_OscConfig+0xd4>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085c8:	d10c      	bne.n	80085e4 <HAL_RCC_OscConfig+0xbc>
 80085ca:	4b7e      	ldr	r3, [pc, #504]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a7d      	ldr	r2, [pc, #500]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	4b7b      	ldr	r3, [pc, #492]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a7a      	ldr	r2, [pc, #488]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	e00b      	b.n	80085fc <HAL_RCC_OscConfig+0xd4>
 80085e4:	4b77      	ldr	r3, [pc, #476]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a76      	ldr	r2, [pc, #472]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	4b74      	ldr	r3, [pc, #464]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a73      	ldr	r2, [pc, #460]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80085f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d013      	beq.n	800862c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008604:	f7fb f932 	bl	800386c <HAL_GetTick>
 8008608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800860a:	e008      	b.n	800861e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800860c:	f7fb f92e 	bl	800386c <HAL_GetTick>
 8008610:	4602      	mov	r2, r0
 8008612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	2b64      	cmp	r3, #100	; 0x64
 8008618:	d901      	bls.n	800861e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e325      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800861e:	4b69      	ldr	r3, [pc, #420]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0f0      	beq.n	800860c <HAL_RCC_OscConfig+0xe4>
 800862a:	e014      	b.n	8008656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800862c:	f7fb f91e 	bl	800386c <HAL_GetTick>
 8008630:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008632:	e008      	b.n	8008646 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008634:	f7fb f91a 	bl	800386c <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b64      	cmp	r3, #100	; 0x64
 8008640:	d901      	bls.n	8008646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e311      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008646:	4b5f      	ldr	r3, [pc, #380]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1f0      	bne.n	8008634 <HAL_RCC_OscConfig+0x10c>
 8008652:	e000      	b.n	8008656 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 808a 	beq.w	8008778 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008664:	4b57      	ldr	r3, [pc, #348]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800866c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800866e:	4b55      	ldr	r3, [pc, #340]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008672:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <HAL_RCC_OscConfig+0x162>
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	2b18      	cmp	r3, #24
 800867e:	d137      	bne.n	80086f0 <HAL_RCC_OscConfig+0x1c8>
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d132      	bne.n	80086f0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800868a:	4b4e      	ldr	r3, [pc, #312]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f003 0304 	and.w	r3, r3, #4
 8008692:	2b00      	cmp	r3, #0
 8008694:	d005      	beq.n	80086a2 <HAL_RCC_OscConfig+0x17a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e2e3      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086a2:	4b48      	ldr	r3, [pc, #288]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f023 0219 	bic.w	r2, r3, #25
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	4945      	ldr	r1, [pc, #276]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80086b4:	f7fb f8da 	bl	800386c <HAL_GetTick>
 80086b8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086bc:	f7fb f8d6 	bl	800386c <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b02      	cmp	r3, #2
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e2cd      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086ce:	4b3d      	ldr	r3, [pc, #244]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f003 0304 	and.w	r3, r3, #4
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f0      	beq.n	80086bc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086da:	4b3a      	ldr	r3, [pc, #232]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	061b      	lsls	r3, r3, #24
 80086e8:	4936      	ldr	r1, [pc, #216]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80086ee:	e043      	b.n	8008778 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d026      	beq.n	8008746 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80086f8:	4b32      	ldr	r3, [pc, #200]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f023 0219 	bic.w	r2, r3, #25
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	492f      	ldr	r1, [pc, #188]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008706:	4313      	orrs	r3, r2
 8008708:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870a:	f7fb f8af 	bl	800386c <HAL_GetTick>
 800870e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008710:	e008      	b.n	8008724 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008712:	f7fb f8ab 	bl	800386c <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e2a2      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008724:	4b27      	ldr	r3, [pc, #156]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0f0      	beq.n	8008712 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008730:	4b24      	ldr	r3, [pc, #144]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	691b      	ldr	r3, [r3, #16]
 800873c:	061b      	lsls	r3, r3, #24
 800873e:	4921      	ldr	r1, [pc, #132]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008740:	4313      	orrs	r3, r2
 8008742:	604b      	str	r3, [r1, #4]
 8008744:	e018      	b.n	8008778 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008746:	4b1f      	ldr	r3, [pc, #124]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a1e      	ldr	r2, [pc, #120]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008752:	f7fb f88b 	bl	800386c <HAL_GetTick>
 8008756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008758:	e008      	b.n	800876c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800875a:	f7fb f887 	bl	800386c <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b02      	cmp	r3, #2
 8008766:	d901      	bls.n	800876c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e27e      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800876c:	4b15      	ldr	r3, [pc, #84]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0304 	and.w	r3, r3, #4
 8008774:	2b00      	cmp	r3, #0
 8008776:	d1f0      	bne.n	800875a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0310 	and.w	r3, r3, #16
 8008780:	2b00      	cmp	r3, #0
 8008782:	d06d      	beq.n	8008860 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008784:	4b0f      	ldr	r3, [pc, #60]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800878c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800878e:	4b0d      	ldr	r3, [pc, #52]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	2b08      	cmp	r3, #8
 8008798:	d007      	beq.n	80087aa <HAL_RCC_OscConfig+0x282>
 800879a:	69bb      	ldr	r3, [r7, #24]
 800879c:	2b18      	cmp	r3, #24
 800879e:	d11e      	bne.n	80087de <HAL_RCC_OscConfig+0x2b6>
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f003 0303 	and.w	r3, r3, #3
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d119      	bne.n	80087de <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087aa:	4b06      	ldr	r3, [pc, #24]	; (80087c4 <HAL_RCC_OscConfig+0x29c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d008      	beq.n	80087c8 <HAL_RCC_OscConfig+0x2a0>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	2b80      	cmp	r3, #128	; 0x80
 80087bc:	d004      	beq.n	80087c8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e253      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
 80087c2:	bf00      	nop
 80087c4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80087c8:	4ba3      	ldr	r3, [pc, #652]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a1b      	ldr	r3, [r3, #32]
 80087d4:	061b      	lsls	r3, r3, #24
 80087d6:	49a0      	ldr	r1, [pc, #640]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80087d8:	4313      	orrs	r3, r2
 80087da:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80087dc:	e040      	b.n	8008860 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d023      	beq.n	800882e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80087e6:	4b9c      	ldr	r3, [pc, #624]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a9b      	ldr	r2, [pc, #620]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80087ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087f2:	f7fb f83b 	bl	800386c <HAL_GetTick>
 80087f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80087f8:	e008      	b.n	800880c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80087fa:	f7fb f837 	bl	800386c <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	2b02      	cmp	r3, #2
 8008806:	d901      	bls.n	800880c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8008808:	2303      	movs	r3, #3
 800880a:	e22e      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800880c:	4b92      	ldr	r3, [pc, #584]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0f0      	beq.n	80087fa <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008818:	4b8f      	ldr	r3, [pc, #572]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a1b      	ldr	r3, [r3, #32]
 8008824:	061b      	lsls	r3, r3, #24
 8008826:	498c      	ldr	r1, [pc, #560]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008828:	4313      	orrs	r3, r2
 800882a:	60cb      	str	r3, [r1, #12]
 800882c:	e018      	b.n	8008860 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800882e:	4b8a      	ldr	r3, [pc, #552]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a89      	ldr	r2, [pc, #548]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883a:	f7fb f817 	bl	800386c <HAL_GetTick>
 800883e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008840:	e008      	b.n	8008854 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008842:	f7fb f813 	bl	800386c <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	2b02      	cmp	r3, #2
 800884e:	d901      	bls.n	8008854 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008850:	2303      	movs	r3, #3
 8008852:	e20a      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008854:	4b80      	ldr	r3, [pc, #512]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1f0      	bne.n	8008842 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b00      	cmp	r3, #0
 800886a:	d036      	beq.n	80088da <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d019      	beq.n	80088a8 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008874:	4b78      	ldr	r3, [pc, #480]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008878:	4a77      	ldr	r2, [pc, #476]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008880:	f7fa fff4 	bl	800386c <HAL_GetTick>
 8008884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008888:	f7fa fff0 	bl	800386c <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e1e7      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800889a:	4b6f      	ldr	r3, [pc, #444]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 800889c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0f0      	beq.n	8008888 <HAL_RCC_OscConfig+0x360>
 80088a6:	e018      	b.n	80088da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088a8:	4b6b      	ldr	r3, [pc, #428]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80088aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088ac:	4a6a      	ldr	r2, [pc, #424]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80088ae:	f023 0301 	bic.w	r3, r3, #1
 80088b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b4:	f7fa ffda 	bl	800386c <HAL_GetTick>
 80088b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088ba:	e008      	b.n	80088ce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80088bc:	f7fa ffd6 	bl	800386c <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d901      	bls.n	80088ce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e1cd      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80088ce:	4b62      	ldr	r3, [pc, #392]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80088d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d2:	f003 0302 	and.w	r3, r3, #2
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1f0      	bne.n	80088bc <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d036      	beq.n	8008954 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	699b      	ldr	r3, [r3, #24]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d019      	beq.n	8008922 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80088ee:	4b5a      	ldr	r3, [pc, #360]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a59      	ldr	r2, [pc, #356]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80088f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80088f8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088fa:	f7fa ffb7 	bl	800386c <HAL_GetTick>
 80088fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008900:	e008      	b.n	8008914 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008902:	f7fa ffb3 	bl	800386c <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	2b02      	cmp	r3, #2
 800890e:	d901      	bls.n	8008914 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e1aa      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008914:	4b50      	ldr	r3, [pc, #320]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0f0      	beq.n	8008902 <HAL_RCC_OscConfig+0x3da>
 8008920:	e018      	b.n	8008954 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008922:	4b4d      	ldr	r3, [pc, #308]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a4c      	ldr	r2, [pc, #304]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800892c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800892e:	f7fa ff9d 	bl	800386c <HAL_GetTick>
 8008932:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008934:	e008      	b.n	8008948 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008936:	f7fa ff99 	bl	800386c <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	2b02      	cmp	r3, #2
 8008942:	d901      	bls.n	8008948 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e190      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008948:	4b43      	ldr	r3, [pc, #268]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1f0      	bne.n	8008936 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0304 	and.w	r3, r3, #4
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 8085 	beq.w	8008a6c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008962:	4b3e      	ldr	r3, [pc, #248]	; (8008a5c <HAL_RCC_OscConfig+0x534>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a3d      	ldr	r2, [pc, #244]	; (8008a5c <HAL_RCC_OscConfig+0x534>)
 8008968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800896c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800896e:	f7fa ff7d 	bl	800386c <HAL_GetTick>
 8008972:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008974:	e008      	b.n	8008988 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008976:	f7fa ff79 	bl	800386c <HAL_GetTick>
 800897a:	4602      	mov	r2, r0
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	2b64      	cmp	r3, #100	; 0x64
 8008982:	d901      	bls.n	8008988 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8008984:	2303      	movs	r3, #3
 8008986:	e170      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008988:	4b34      	ldr	r3, [pc, #208]	; (8008a5c <HAL_RCC_OscConfig+0x534>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0f0      	beq.n	8008976 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d106      	bne.n	80089aa <HAL_RCC_OscConfig+0x482>
 800899c:	4b2e      	ldr	r3, [pc, #184]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 800899e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089a0:	4a2d      	ldr	r2, [pc, #180]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089a2:	f043 0301 	orr.w	r3, r3, #1
 80089a6:	6713      	str	r3, [r2, #112]	; 0x70
 80089a8:	e02d      	b.n	8008a06 <HAL_RCC_OscConfig+0x4de>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10c      	bne.n	80089cc <HAL_RCC_OscConfig+0x4a4>
 80089b2:	4b29      	ldr	r3, [pc, #164]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089b6:	4a28      	ldr	r2, [pc, #160]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089b8:	f023 0301 	bic.w	r3, r3, #1
 80089bc:	6713      	str	r3, [r2, #112]	; 0x70
 80089be:	4b26      	ldr	r3, [pc, #152]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089c2:	4a25      	ldr	r2, [pc, #148]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089c4:	f023 0304 	bic.w	r3, r3, #4
 80089c8:	6713      	str	r3, [r2, #112]	; 0x70
 80089ca:	e01c      	b.n	8008a06 <HAL_RCC_OscConfig+0x4de>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	2b05      	cmp	r3, #5
 80089d2:	d10c      	bne.n	80089ee <HAL_RCC_OscConfig+0x4c6>
 80089d4:	4b20      	ldr	r3, [pc, #128]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089d8:	4a1f      	ldr	r2, [pc, #124]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089da:	f043 0304 	orr.w	r3, r3, #4
 80089de:	6713      	str	r3, [r2, #112]	; 0x70
 80089e0:	4b1d      	ldr	r3, [pc, #116]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e4:	4a1c      	ldr	r2, [pc, #112]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	6713      	str	r3, [r2, #112]	; 0x70
 80089ec:	e00b      	b.n	8008a06 <HAL_RCC_OscConfig+0x4de>
 80089ee:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f2:	4a19      	ldr	r2, [pc, #100]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089f4:	f023 0301 	bic.w	r3, r3, #1
 80089f8:	6713      	str	r3, [r2, #112]	; 0x70
 80089fa:	4b17      	ldr	r3, [pc, #92]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 80089fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fe:	4a16      	ldr	r2, [pc, #88]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008a00:	f023 0304 	bic.w	r3, r3, #4
 8008a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d015      	beq.n	8008a3a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a0e:	f7fa ff2d 	bl	800386c <HAL_GetTick>
 8008a12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a14:	e00a      	b.n	8008a2c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a16:	f7fa ff29 	bl	800386c <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d901      	bls.n	8008a2c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8008a28:	2303      	movs	r3, #3
 8008a2a:	e11e      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <HAL_RCC_OscConfig+0x530>)
 8008a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d0ee      	beq.n	8008a16 <HAL_RCC_OscConfig+0x4ee>
 8008a38:	e018      	b.n	8008a6c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a3a:	f7fa ff17 	bl	800386c <HAL_GetTick>
 8008a3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a40:	e00e      	b.n	8008a60 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a42:	f7fa ff13 	bl	800386c <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d905      	bls.n	8008a60 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e108      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
 8008a58:	58024400 	.word	0x58024400
 8008a5c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008a60:	4b84      	ldr	r3, [pc, #528]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a64:	f003 0302 	and.w	r3, r3, #2
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1ea      	bne.n	8008a42 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80f9 	beq.w	8008c68 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008a76:	4b7f      	ldr	r3, [pc, #508]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a7e:	2b18      	cmp	r3, #24
 8008a80:	f000 80b4 	beq.w	8008bec <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	f040 8095 	bne.w	8008bb8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a8e:	4b79      	ldr	r3, [pc, #484]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a78      	ldr	r2, [pc, #480]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a9a:	f7fa fee7 	bl	800386c <HAL_GetTick>
 8008a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008aa0:	e008      	b.n	8008ab4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008aa2:	f7fa fee3 	bl	800386c <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	d901      	bls.n	8008ab4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e0da      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ab4:	4b6f      	ldr	r3, [pc, #444]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1f0      	bne.n	8008aa2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ac0:	4b6c      	ldr	r3, [pc, #432]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ac4:	4b6c      	ldr	r3, [pc, #432]	; (8008c78 <HAL_RCC_OscConfig+0x750>)
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ad0:	0112      	lsls	r2, r2, #4
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	4967      	ldr	r1, [pc, #412]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	628b      	str	r3, [r1, #40]	; 0x28
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	025b      	lsls	r3, r3, #9
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	3b01      	subs	r3, #1
 8008af6:	041b      	lsls	r3, r3, #16
 8008af8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b02:	3b01      	subs	r3, #1
 8008b04:	061b      	lsls	r3, r3, #24
 8008b06:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008b0a:	495a      	ldr	r1, [pc, #360]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008b10:	4b58      	ldr	r3, [pc, #352]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	4a57      	ldr	r2, [pc, #348]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b16:	f023 0301 	bic.w	r3, r3, #1
 8008b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008b1c:	4b55      	ldr	r3, [pc, #340]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b20:	4b56      	ldr	r3, [pc, #344]	; (8008c7c <HAL_RCC_OscConfig+0x754>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b28:	00d2      	lsls	r2, r2, #3
 8008b2a:	4952      	ldr	r1, [pc, #328]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008b30:	4b50      	ldr	r3, [pc, #320]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b34:	f023 020c 	bic.w	r2, r3, #12
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	494d      	ldr	r1, [pc, #308]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008b42:	4b4c      	ldr	r3, [pc, #304]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b46:	f023 0202 	bic.w	r2, r3, #2
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b4e:	4949      	ldr	r1, [pc, #292]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008b54:	4b47      	ldr	r3, [pc, #284]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	4a46      	ldr	r2, [pc, #280]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b60:	4b44      	ldr	r3, [pc, #272]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	4a43      	ldr	r2, [pc, #268]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008b6c:	4b41      	ldr	r3, [pc, #260]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	4a40      	ldr	r2, [pc, #256]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8008b78:	4b3e      	ldr	r3, [pc, #248]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b7c:	4a3d      	ldr	r2, [pc, #244]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b7e:	f043 0301 	orr.w	r3, r3, #1
 8008b82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b84:	4b3b      	ldr	r3, [pc, #236]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a3a      	ldr	r2, [pc, #232]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b90:	f7fa fe6c 	bl	800386c <HAL_GetTick>
 8008b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b96:	e008      	b.n	8008baa <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b98:	f7fa fe68 	bl	800386c <HAL_GetTick>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba0:	1ad3      	subs	r3, r2, r3
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d901      	bls.n	8008baa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e05f      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008baa:	4b32      	ldr	r3, [pc, #200]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0f0      	beq.n	8008b98 <HAL_RCC_OscConfig+0x670>
 8008bb6:	e057      	b.n	8008c68 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bb8:	4b2e      	ldr	r3, [pc, #184]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a2d      	ldr	r2, [pc, #180]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bc4:	f7fa fe52 	bl	800386c <HAL_GetTick>
 8008bc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bca:	e008      	b.n	8008bde <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bcc:	f7fa fe4e 	bl	800386c <HAL_GetTick>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d901      	bls.n	8008bde <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e045      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008bde:	4b25      	ldr	r3, [pc, #148]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1f0      	bne.n	8008bcc <HAL_RCC_OscConfig+0x6a4>
 8008bea:	e03d      	b.n	8008c68 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008bec:	4b21      	ldr	r3, [pc, #132]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008bf2:	4b20      	ldr	r3, [pc, #128]	; (8008c74 <HAL_RCC_OscConfig+0x74c>)
 8008bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d031      	beq.n	8008c64 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f003 0203 	and.w	r2, r3, #3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d12a      	bne.n	8008c64 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	091b      	lsrs	r3, r3, #4
 8008c12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d122      	bne.n	8008c64 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c28:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d11a      	bne.n	8008c64 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	0a5b      	lsrs	r3, r3, #9
 8008c32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d111      	bne.n	8008c64 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	0c1b      	lsrs	r3, r3, #16
 8008c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d108      	bne.n	8008c64 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	0e1b      	lsrs	r3, r3, #24
 8008c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d001      	beq.n	8008c68 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e000      	b.n	8008c6a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3730      	adds	r7, #48	; 0x30
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	58024400 	.word	0x58024400
 8008c78:	fffffc0c 	.word	0xfffffc0c
 8008c7c:	ffff0007 	.word	0xffff0007

08008c80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e19c      	b.n	8008fce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c94:	4b8a      	ldr	r3, [pc, #552]	; (8008ec0 <HAL_RCC_ClockConfig+0x240>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 030f 	and.w	r3, r3, #15
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d910      	bls.n	8008cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ca2:	4b87      	ldr	r3, [pc, #540]	; (8008ec0 <HAL_RCC_ClockConfig+0x240>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f023 020f 	bic.w	r2, r3, #15
 8008caa:	4985      	ldr	r1, [pc, #532]	; (8008ec0 <HAL_RCC_ClockConfig+0x240>)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cb2:	4b83      	ldr	r3, [pc, #524]	; (8008ec0 <HAL_RCC_ClockConfig+0x240>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 030f 	and.w	r3, r3, #15
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d001      	beq.n	8008cc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	e184      	b.n	8008fce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d010      	beq.n	8008cf2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	691a      	ldr	r2, [r3, #16]
 8008cd4:	4b7b      	ldr	r3, [pc, #492]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d908      	bls.n	8008cf2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ce0:	4b78      	ldr	r3, [pc, #480]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	4975      	ldr	r1, [pc, #468]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f003 0308 	and.w	r3, r3, #8
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d010      	beq.n	8008d20 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	695a      	ldr	r2, [r3, #20]
 8008d02:	4b70      	ldr	r3, [pc, #448]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d908      	bls.n	8008d20 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008d0e:	4b6d      	ldr	r3, [pc, #436]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	496a      	ldr	r1, [pc, #424]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0310 	and.w	r3, r3, #16
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d010      	beq.n	8008d4e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	699a      	ldr	r2, [r3, #24]
 8008d30:	4b64      	ldr	r3, [pc, #400]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d908      	bls.n	8008d4e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d3c:	4b61      	ldr	r3, [pc, #388]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d3e:	69db      	ldr	r3, [r3, #28]
 8008d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	495e      	ldr	r1, [pc, #376]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f003 0320 	and.w	r3, r3, #32
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d010      	beq.n	8008d7c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	69da      	ldr	r2, [r3, #28]
 8008d5e:	4b59      	ldr	r3, [pc, #356]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d908      	bls.n	8008d7c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008d6a:	4b56      	ldr	r3, [pc, #344]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	4953      	ldr	r1, [pc, #332]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0302 	and.w	r3, r3, #2
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d010      	beq.n	8008daa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	4b4d      	ldr	r3, [pc, #308]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	f003 030f 	and.w	r3, r3, #15
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d908      	bls.n	8008daa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d98:	4b4a      	ldr	r3, [pc, #296]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008d9a:	699b      	ldr	r3, [r3, #24]
 8008d9c:	f023 020f 	bic.w	r2, r3, #15
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	4947      	ldr	r1, [pc, #284]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008da6:	4313      	orrs	r3, r2
 8008da8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f003 0301 	and.w	r3, r3, #1
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d055      	beq.n	8008e62 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008db6:	4b43      	ldr	r3, [pc, #268]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	4940      	ldr	r1, [pc, #256]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	2b02      	cmp	r3, #2
 8008dce:	d107      	bne.n	8008de0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008dd0:	4b3c      	ldr	r3, [pc, #240]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d121      	bne.n	8008e20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e0f6      	b.n	8008fce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d107      	bne.n	8008df8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008de8:	4b36      	ldr	r3, [pc, #216]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d115      	bne.n	8008e20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e0ea      	b.n	8008fce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d107      	bne.n	8008e10 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008e00:	4b30      	ldr	r3, [pc, #192]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d109      	bne.n	8008e20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e0de      	b.n	8008fce <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e10:	4b2c      	ldr	r3, [pc, #176]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0304 	and.w	r3, r3, #4
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e0d6      	b.n	8008fce <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e20:	4b28      	ldr	r3, [pc, #160]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	f023 0207 	bic.w	r2, r3, #7
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	4925      	ldr	r1, [pc, #148]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e32:	f7fa fd1b 	bl	800386c <HAL_GetTick>
 8008e36:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e38:	e00a      	b.n	8008e50 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e3a:	f7fa fd17 	bl	800386c <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e0be      	b.n	8008fce <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e50:	4b1c      	ldr	r3, [pc, #112]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	00db      	lsls	r3, r3, #3
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d1eb      	bne.n	8008e3a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f003 0302 	and.w	r3, r3, #2
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d010      	beq.n	8008e90 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	4b14      	ldr	r3, [pc, #80]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	f003 030f 	and.w	r3, r3, #15
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d208      	bcs.n	8008e90 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e7e:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008e80:	699b      	ldr	r3, [r3, #24]
 8008e82:	f023 020f 	bic.w	r2, r3, #15
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	490e      	ldr	r1, [pc, #56]	; (8008ec4 <HAL_RCC_ClockConfig+0x244>)
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008e90:	4b0b      	ldr	r3, [pc, #44]	; (8008ec0 <HAL_RCC_ClockConfig+0x240>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 030f 	and.w	r3, r3, #15
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d214      	bcs.n	8008ec8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e9e:	4b08      	ldr	r3, [pc, #32]	; (8008ec0 <HAL_RCC_ClockConfig+0x240>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f023 020f 	bic.w	r2, r3, #15
 8008ea6:	4906      	ldr	r1, [pc, #24]	; (8008ec0 <HAL_RCC_ClockConfig+0x240>)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008eae:	4b04      	ldr	r3, [pc, #16]	; (8008ec0 <HAL_RCC_ClockConfig+0x240>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 030f 	and.w	r3, r3, #15
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d005      	beq.n	8008ec8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e086      	b.n	8008fce <HAL_RCC_ClockConfig+0x34e>
 8008ec0:	52002000 	.word	0x52002000
 8008ec4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d010      	beq.n	8008ef6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691a      	ldr	r2, [r3, #16]
 8008ed8:	4b3f      	ldr	r3, [pc, #252]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d208      	bcs.n	8008ef6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ee4:	4b3c      	ldr	r3, [pc, #240]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	4939      	ldr	r1, [pc, #228]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f003 0308 	and.w	r3, r3, #8
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d010      	beq.n	8008f24 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	695a      	ldr	r2, [r3, #20]
 8008f06:	4b34      	ldr	r3, [pc, #208]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d208      	bcs.n	8008f24 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008f12:	4b31      	ldr	r3, [pc, #196]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	492e      	ldr	r1, [pc, #184]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0310 	and.w	r3, r3, #16
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d010      	beq.n	8008f52 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	699a      	ldr	r2, [r3, #24]
 8008f34:	4b28      	ldr	r3, [pc, #160]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d208      	bcs.n	8008f52 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f40:	4b25      	ldr	r3, [pc, #148]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	699b      	ldr	r3, [r3, #24]
 8008f4c:	4922      	ldr	r1, [pc, #136]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d010      	beq.n	8008f80 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	69da      	ldr	r2, [r3, #28]
 8008f62:	4b1d      	ldr	r3, [pc, #116]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d208      	bcs.n	8008f80 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008f6e:	4b1a      	ldr	r3, [pc, #104]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	4917      	ldr	r1, [pc, #92]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f80:	f000 f834 	bl	8008fec <HAL_RCC_GetSysClockFreq>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b14      	ldr	r3, [pc, #80]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	0a1b      	lsrs	r3, r3, #8
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	4912      	ldr	r1, [pc, #72]	; (8008fdc <HAL_RCC_ClockConfig+0x35c>)
 8008f92:	5ccb      	ldrb	r3, [r1, r3]
 8008f94:	f003 031f 	and.w	r3, r3, #31
 8008f98:	fa22 f303 	lsr.w	r3, r2, r3
 8008f9c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f9e:	4b0e      	ldr	r3, [pc, #56]	; (8008fd8 <HAL_RCC_ClockConfig+0x358>)
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	f003 030f 	and.w	r3, r3, #15
 8008fa6:	4a0d      	ldr	r2, [pc, #52]	; (8008fdc <HAL_RCC_ClockConfig+0x35c>)
 8008fa8:	5cd3      	ldrb	r3, [r2, r3]
 8008faa:	f003 031f 	and.w	r3, r3, #31
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb4:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <HAL_RCC_ClockConfig+0x360>)
 8008fb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008fb8:	4a0a      	ldr	r2, [pc, #40]	; (8008fe4 <HAL_RCC_ClockConfig+0x364>)
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008fbe:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <HAL_RCC_ClockConfig+0x368>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fa fc08 	bl	80037d8 <HAL_InitTick>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	58024400 	.word	0x58024400
 8008fdc:	0800f85c 	.word	0x0800f85c
 8008fe0:	20000004 	.word	0x20000004
 8008fe4:	20000000 	.word	0x20000000
 8008fe8:	20000008 	.word	0x20000008

08008fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b089      	sub	sp, #36	; 0x24
 8008ff0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ff2:	4bb3      	ldr	r3, [pc, #716]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ff4:	691b      	ldr	r3, [r3, #16]
 8008ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ffa:	2b18      	cmp	r3, #24
 8008ffc:	f200 8155 	bhi.w	80092aa <HAL_RCC_GetSysClockFreq+0x2be>
 8009000:	a201      	add	r2, pc, #4	; (adr r2, 8009008 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009006:	bf00      	nop
 8009008:	0800906d 	.word	0x0800906d
 800900c:	080092ab 	.word	0x080092ab
 8009010:	080092ab 	.word	0x080092ab
 8009014:	080092ab 	.word	0x080092ab
 8009018:	080092ab 	.word	0x080092ab
 800901c:	080092ab 	.word	0x080092ab
 8009020:	080092ab 	.word	0x080092ab
 8009024:	080092ab 	.word	0x080092ab
 8009028:	08009093 	.word	0x08009093
 800902c:	080092ab 	.word	0x080092ab
 8009030:	080092ab 	.word	0x080092ab
 8009034:	080092ab 	.word	0x080092ab
 8009038:	080092ab 	.word	0x080092ab
 800903c:	080092ab 	.word	0x080092ab
 8009040:	080092ab 	.word	0x080092ab
 8009044:	080092ab 	.word	0x080092ab
 8009048:	08009099 	.word	0x08009099
 800904c:	080092ab 	.word	0x080092ab
 8009050:	080092ab 	.word	0x080092ab
 8009054:	080092ab 	.word	0x080092ab
 8009058:	080092ab 	.word	0x080092ab
 800905c:	080092ab 	.word	0x080092ab
 8009060:	080092ab 	.word	0x080092ab
 8009064:	080092ab 	.word	0x080092ab
 8009068:	0800909f 	.word	0x0800909f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800906c:	4b94      	ldr	r3, [pc, #592]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0320 	and.w	r3, r3, #32
 8009074:	2b00      	cmp	r3, #0
 8009076:	d009      	beq.n	800908c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009078:	4b91      	ldr	r3, [pc, #580]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	08db      	lsrs	r3, r3, #3
 800907e:	f003 0303 	and.w	r3, r3, #3
 8009082:	4a90      	ldr	r2, [pc, #576]	; (80092c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009084:	fa22 f303 	lsr.w	r3, r2, r3
 8009088:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800908a:	e111      	b.n	80092b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800908c:	4b8d      	ldr	r3, [pc, #564]	; (80092c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800908e:	61bb      	str	r3, [r7, #24]
    break;
 8009090:	e10e      	b.n	80092b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009092:	4b8d      	ldr	r3, [pc, #564]	; (80092c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009094:	61bb      	str	r3, [r7, #24]
    break;
 8009096:	e10b      	b.n	80092b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009098:	4b8c      	ldr	r3, [pc, #560]	; (80092cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800909a:	61bb      	str	r3, [r7, #24]
    break;
 800909c:	e108      	b.n	80092b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800909e:	4b88      	ldr	r3, [pc, #544]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a2:	f003 0303 	and.w	r3, r3, #3
 80090a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80090a8:	4b85      	ldr	r3, [pc, #532]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ac:	091b      	lsrs	r3, r3, #4
 80090ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80090b4:	4b82      	ldr	r3, [pc, #520]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	f003 0301 	and.w	r3, r3, #1
 80090bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80090be:	4b80      	ldr	r3, [pc, #512]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c2:	08db      	lsrs	r3, r3, #3
 80090c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	fb02 f303 	mul.w	r3, r2, r3
 80090ce:	ee07 3a90 	vmov	s15, r3
 80090d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	f000 80e1 	beq.w	80092a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	f000 8083 	beq.w	80091f0 <HAL_RCC_GetSysClockFreq+0x204>
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	f200 80a1 	bhi.w	8009234 <HAL_RCC_GetSysClockFreq+0x248>
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d003      	beq.n	8009100 <HAL_RCC_GetSysClockFreq+0x114>
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d056      	beq.n	80091ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80090fe:	e099      	b.n	8009234 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009100:	4b6f      	ldr	r3, [pc, #444]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0320 	and.w	r3, r3, #32
 8009108:	2b00      	cmp	r3, #0
 800910a:	d02d      	beq.n	8009168 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800910c:	4b6c      	ldr	r3, [pc, #432]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	08db      	lsrs	r3, r3, #3
 8009112:	f003 0303 	and.w	r3, r3, #3
 8009116:	4a6b      	ldr	r2, [pc, #428]	; (80092c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009118:	fa22 f303 	lsr.w	r3, r2, r3
 800911c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	ee07 3a90 	vmov	s15, r3
 8009124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	ee07 3a90 	vmov	s15, r3
 800912e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009136:	4b62      	ldr	r3, [pc, #392]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800913e:	ee07 3a90 	vmov	s15, r3
 8009142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009146:	ed97 6a02 	vldr	s12, [r7, #8]
 800914a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80092d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800914e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800915a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800915e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009162:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009166:	e087      	b.n	8009278 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	ee07 3a90 	vmov	s15, r3
 800916e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009172:	eddf 6a58 	vldr	s13, [pc, #352]	; 80092d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917a:	4b51      	ldr	r3, [pc, #324]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009182:	ee07 3a90 	vmov	s15, r3
 8009186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918a:	ed97 6a02 	vldr	s12, [r7, #8]
 800918e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80092d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800919e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091aa:	e065      	b.n	8009278 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	ee07 3a90 	vmov	s15, r3
 80091b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80092d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80091ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091be:	4b40      	ldr	r3, [pc, #256]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c6:	ee07 3a90 	vmov	s15, r3
 80091ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80091d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80092d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80091e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ee:	e043      	b.n	8009278 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	ee07 3a90 	vmov	s15, r3
 80091f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 80092dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80091fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009202:	4b2f      	ldr	r3, [pc, #188]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009212:	ed97 6a02 	vldr	s12, [r7, #8]
 8009216:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80092d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800921a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800921e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800922a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009232:	e021      	b.n	8009278 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	ee07 3a90 	vmov	s15, r3
 800923a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800923e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80092d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009246:	4b1e      	ldr	r3, [pc, #120]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009256:	ed97 6a02 	vldr	s12, [r7, #8]
 800925a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80092d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800925e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800926a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800926e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009276:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009278:	4b11      	ldr	r3, [pc, #68]	; (80092c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800927a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927c:	0a5b      	lsrs	r3, r3, #9
 800927e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009282:	3301      	adds	r3, #1
 8009284:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	ee07 3a90 	vmov	s15, r3
 800928c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009290:	edd7 6a07 	vldr	s13, [r7, #28]
 8009294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800929c:	ee17 3a90 	vmov	r3, s15
 80092a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80092a2:	e005      	b.n	80092b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80092a4:	2300      	movs	r3, #0
 80092a6:	61bb      	str	r3, [r7, #24]
    break;
 80092a8:	e002      	b.n	80092b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80092aa:	4b07      	ldr	r3, [pc, #28]	; (80092c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80092ac:	61bb      	str	r3, [r7, #24]
    break;
 80092ae:	bf00      	nop
  }

  return sysclockfreq;
 80092b0:	69bb      	ldr	r3, [r7, #24]
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3724      	adds	r7, #36	; 0x24
 80092b6:	46bd      	mov	sp, r7
 80092b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092bc:	4770      	bx	lr
 80092be:	bf00      	nop
 80092c0:	58024400 	.word	0x58024400
 80092c4:	03d09000 	.word	0x03d09000
 80092c8:	003d0900 	.word	0x003d0900
 80092cc:	017d7840 	.word	0x017d7840
 80092d0:	46000000 	.word	0x46000000
 80092d4:	4c742400 	.word	0x4c742400
 80092d8:	4a742400 	.word	0x4a742400
 80092dc:	4bbebc20 	.word	0x4bbebc20

080092e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092e6:	f7ff fe81 	bl	8008fec <HAL_RCC_GetSysClockFreq>
 80092ea:	4602      	mov	r2, r0
 80092ec:	4b10      	ldr	r3, [pc, #64]	; (8009330 <HAL_RCC_GetHCLKFreq+0x50>)
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	0a1b      	lsrs	r3, r3, #8
 80092f2:	f003 030f 	and.w	r3, r3, #15
 80092f6:	490f      	ldr	r1, [pc, #60]	; (8009334 <HAL_RCC_GetHCLKFreq+0x54>)
 80092f8:	5ccb      	ldrb	r3, [r1, r3]
 80092fa:	f003 031f 	and.w	r3, r3, #31
 80092fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009302:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009304:	4b0a      	ldr	r3, [pc, #40]	; (8009330 <HAL_RCC_GetHCLKFreq+0x50>)
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	f003 030f 	and.w	r3, r3, #15
 800930c:	4a09      	ldr	r2, [pc, #36]	; (8009334 <HAL_RCC_GetHCLKFreq+0x54>)
 800930e:	5cd3      	ldrb	r3, [r2, r3]
 8009310:	f003 031f 	and.w	r3, r3, #31
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	fa22 f303 	lsr.w	r3, r2, r3
 800931a:	4a07      	ldr	r2, [pc, #28]	; (8009338 <HAL_RCC_GetHCLKFreq+0x58>)
 800931c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800931e:	4a07      	ldr	r2, [pc, #28]	; (800933c <HAL_RCC_GetHCLKFreq+0x5c>)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009324:	4b04      	ldr	r3, [pc, #16]	; (8009338 <HAL_RCC_GetHCLKFreq+0x58>)
 8009326:	681b      	ldr	r3, [r3, #0]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	58024400 	.word	0x58024400
 8009334:	0800f85c 	.word	0x0800f85c
 8009338:	20000004 	.word	0x20000004
 800933c:	20000000 	.word	0x20000000

08009340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009344:	f7ff ffcc 	bl	80092e0 <HAL_RCC_GetHCLKFreq>
 8009348:	4602      	mov	r2, r0
 800934a:	4b06      	ldr	r3, [pc, #24]	; (8009364 <HAL_RCC_GetPCLK1Freq+0x24>)
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	091b      	lsrs	r3, r3, #4
 8009350:	f003 0307 	and.w	r3, r3, #7
 8009354:	4904      	ldr	r1, [pc, #16]	; (8009368 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009356:	5ccb      	ldrb	r3, [r1, r3]
 8009358:	f003 031f 	and.w	r3, r3, #31
 800935c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009360:	4618      	mov	r0, r3
 8009362:	bd80      	pop	{r7, pc}
 8009364:	58024400 	.word	0x58024400
 8009368:	0800f85c 	.word	0x0800f85c

0800936c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009370:	f7ff ffb6 	bl	80092e0 <HAL_RCC_GetHCLKFreq>
 8009374:	4602      	mov	r2, r0
 8009376:	4b06      	ldr	r3, [pc, #24]	; (8009390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	0a1b      	lsrs	r3, r3, #8
 800937c:	f003 0307 	and.w	r3, r3, #7
 8009380:	4904      	ldr	r1, [pc, #16]	; (8009394 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009382:	5ccb      	ldrb	r3, [r1, r3]
 8009384:	f003 031f 	and.w	r3, r3, #31
 8009388:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800938c:	4618      	mov	r0, r3
 800938e:	bd80      	pop	{r7, pc}
 8009390:	58024400 	.word	0x58024400
 8009394:	0800f85c 	.word	0x0800f85c

08009398 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b086      	sub	sp, #24
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80093a0:	2300      	movs	r3, #0
 80093a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093a4:	2300      	movs	r3, #0
 80093a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d03f      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80093bc:	d02a      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80093be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80093c2:	d824      	bhi.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80093c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093c8:	d018      	beq.n	80093fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80093ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093ce:	d81e      	bhi.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80093d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093d8:	d007      	beq.n	80093ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80093da:	e018      	b.n	800940e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093dc:	4bab      	ldr	r3, [pc, #684]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	4aaa      	ldr	r2, [pc, #680]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80093e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093e8:	e015      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3304      	adds	r3, #4
 80093ee:	2102      	movs	r1, #2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 feff 	bl	800b1f4 <RCCEx_PLL2_Config>
 80093f6:	4603      	mov	r3, r0
 80093f8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80093fa:	e00c      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	3324      	adds	r3, #36	; 0x24
 8009400:	2102      	movs	r1, #2
 8009402:	4618      	mov	r0, r3
 8009404:	f001 ffa8 	bl	800b358 <RCCEx_PLL3_Config>
 8009408:	4603      	mov	r3, r0
 800940a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800940c:	e003      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	75fb      	strb	r3, [r7, #23]
      break;
 8009412:	e000      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009416:	7dfb      	ldrb	r3, [r7, #23]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d109      	bne.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800941c:	4b9b      	ldr	r3, [pc, #620]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800941e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009420:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009428:	4998      	ldr	r1, [pc, #608]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800942a:	4313      	orrs	r3, r2
 800942c:	650b      	str	r3, [r1, #80]	; 0x50
 800942e:	e001      	b.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800943c:	2b00      	cmp	r3, #0
 800943e:	d03d      	beq.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009444:	2b04      	cmp	r3, #4
 8009446:	d826      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009448:	a201      	add	r2, pc, #4	; (adr r2, 8009450 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800944a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944e:	bf00      	nop
 8009450:	08009465 	.word	0x08009465
 8009454:	08009473 	.word	0x08009473
 8009458:	08009485 	.word	0x08009485
 800945c:	0800949d 	.word	0x0800949d
 8009460:	0800949d 	.word	0x0800949d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009464:	4b89      	ldr	r3, [pc, #548]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009468:	4a88      	ldr	r2, [pc, #544]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800946a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800946e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009470:	e015      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	3304      	adds	r3, #4
 8009476:	2100      	movs	r1, #0
 8009478:	4618      	mov	r0, r3
 800947a:	f001 febb 	bl	800b1f4 <RCCEx_PLL2_Config>
 800947e:	4603      	mov	r3, r0
 8009480:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009482:	e00c      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3324      	adds	r3, #36	; 0x24
 8009488:	2100      	movs	r1, #0
 800948a:	4618      	mov	r0, r3
 800948c:	f001 ff64 	bl	800b358 <RCCEx_PLL3_Config>
 8009490:	4603      	mov	r3, r0
 8009492:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009494:	e003      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	75fb      	strb	r3, [r7, #23]
      break;
 800949a:	e000      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800949c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d109      	bne.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094a4:	4b79      	ldr	r3, [pc, #484]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094a8:	f023 0207 	bic.w	r2, r3, #7
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b0:	4976      	ldr	r1, [pc, #472]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80094b2:	4313      	orrs	r3, r2
 80094b4:	650b      	str	r3, [r1, #80]	; 0x50
 80094b6:	e001      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094b8:	7dfb      	ldrb	r3, [r7, #23]
 80094ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d051      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094ce:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80094d2:	d036      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80094d4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80094d8:	d830      	bhi.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094de:	d032      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80094e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094e4:	d82a      	bhi.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094ea:	d02e      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80094ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80094f0:	d824      	bhi.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094f6:	d018      	beq.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80094f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094fc:	d81e      	bhi.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d003      	beq.n	800950a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009506:	d007      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009508:	e018      	b.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800950a:	4b60      	ldr	r3, [pc, #384]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950e:	4a5f      	ldr	r2, [pc, #380]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009514:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009516:	e019      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3304      	adds	r3, #4
 800951c:	2100      	movs	r1, #0
 800951e:	4618      	mov	r0, r3
 8009520:	f001 fe68 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009524:	4603      	mov	r3, r0
 8009526:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009528:	e010      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	3324      	adds	r3, #36	; 0x24
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f001 ff11 	bl	800b358 <RCCEx_PLL3_Config>
 8009536:	4603      	mov	r3, r0
 8009538:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800953a:	e007      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	75fb      	strb	r3, [r7, #23]
      break;
 8009540:	e004      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009542:	bf00      	nop
 8009544:	e002      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009546:	bf00      	nop
 8009548:	e000      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800954a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10a      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009552:	4b4e      	ldr	r3, [pc, #312]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009556:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009560:	494a      	ldr	r1, [pc, #296]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009562:	4313      	orrs	r3, r2
 8009564:	658b      	str	r3, [r1, #88]	; 0x58
 8009566:	e001      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009574:	2b00      	cmp	r3, #0
 8009576:	d051      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800957e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009582:	d036      	beq.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009584:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009588:	d830      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 800958a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800958e:	d032      	beq.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009594:	d82a      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009596:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800959a:	d02e      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x262>
 800959c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80095a0:	d824      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 80095a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095a6:	d018      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x242>
 80095a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095ac:	d81e      	bhi.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x254>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x222>
 80095b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80095b6:	d007      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80095b8:	e018      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ba:	4b34      	ldr	r3, [pc, #208]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095be:	4a33      	ldr	r2, [pc, #204]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80095c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095c6:	e019      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	3304      	adds	r3, #4
 80095cc:	2100      	movs	r1, #0
 80095ce:	4618      	mov	r0, r3
 80095d0:	f001 fe10 	bl	800b1f4 <RCCEx_PLL2_Config>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80095d8:	e010      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3324      	adds	r3, #36	; 0x24
 80095de:	2100      	movs	r1, #0
 80095e0:	4618      	mov	r0, r3
 80095e2:	f001 feb9 	bl	800b358 <RCCEx_PLL3_Config>
 80095e6:	4603      	mov	r3, r0
 80095e8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80095ea:	e007      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	75fb      	strb	r3, [r7, #23]
      break;
 80095f0:	e004      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80095f2:	bf00      	nop
 80095f4:	e002      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80095f6:	bf00      	nop
 80095f8:	e000      	b.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80095fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10a      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009602:	4b22      	ldr	r3, [pc, #136]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009606:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009610:	491e      	ldr	r1, [pc, #120]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009612:	4313      	orrs	r3, r2
 8009614:	658b      	str	r3, [r1, #88]	; 0x58
 8009616:	e001      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009618:	7dfb      	ldrb	r3, [r7, #23]
 800961a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d035      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800962c:	2b30      	cmp	r3, #48	; 0x30
 800962e:	d01c      	beq.n	800966a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009630:	2b30      	cmp	r3, #48	; 0x30
 8009632:	d817      	bhi.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009634:	2b20      	cmp	r3, #32
 8009636:	d00c      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009638:	2b20      	cmp	r3, #32
 800963a:	d813      	bhi.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800963c:	2b00      	cmp	r3, #0
 800963e:	d016      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8009640:	2b10      	cmp	r3, #16
 8009642:	d10f      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009644:	4b11      	ldr	r3, [pc, #68]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009648:	4a10      	ldr	r2, [pc, #64]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800964a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800964e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009650:	e00e      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	3304      	adds	r3, #4
 8009656:	2102      	movs	r1, #2
 8009658:	4618      	mov	r0, r3
 800965a:	f001 fdcb 	bl	800b1f4 <RCCEx_PLL2_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009662:	e005      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	75fb      	strb	r3, [r7, #23]
      break;
 8009668:	e002      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800966e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10c      	bne.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009682:	4902      	ldr	r1, [pc, #8]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009684:	4313      	orrs	r3, r2
 8009686:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009688:	e004      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800968a:	bf00      	nop
 800968c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800969c:	2b00      	cmp	r3, #0
 800969e:	d047      	beq.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096a8:	d030      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x374>
 80096aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096ae:	d82a      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80096b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096b4:	d02c      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80096b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80096ba:	d824      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80096bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c0:	d018      	beq.n	80096f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80096c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c6:	d81e      	bhi.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d003      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80096cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d0:	d007      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80096d2:	e018      	b.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096d4:	4bac      	ldr	r3, [pc, #688]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80096d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d8:	4aab      	ldr	r2, [pc, #684]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80096da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096e0:	e017      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	3304      	adds	r3, #4
 80096e6:	2100      	movs	r1, #0
 80096e8:	4618      	mov	r0, r3
 80096ea:	f001 fd83 	bl	800b1f4 <RCCEx_PLL2_Config>
 80096ee:	4603      	mov	r3, r0
 80096f0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80096f2:	e00e      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	3324      	adds	r3, #36	; 0x24
 80096f8:	2100      	movs	r1, #0
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 fe2c 	bl	800b358 <RCCEx_PLL3_Config>
 8009700:	4603      	mov	r3, r0
 8009702:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009704:	e005      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	75fb      	strb	r3, [r7, #23]
      break;
 800970a:	e002      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800970c:	bf00      	nop
 800970e:	e000      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009712:	7dfb      	ldrb	r3, [r7, #23]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d109      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009718:	4b9b      	ldr	r3, [pc, #620]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800971a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800971c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009724:	4998      	ldr	r1, [pc, #608]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009726:	4313      	orrs	r3, r2
 8009728:	650b      	str	r3, [r1, #80]	; 0x50
 800972a:	e001      	b.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
 800972e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009738:	2b00      	cmp	r3, #0
 800973a:	d049      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009744:	d02e      	beq.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009746:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800974a:	d828      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800974c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009750:	d02a      	beq.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009756:	d822      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009758:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800975c:	d026      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x414>
 800975e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009762:	d81c      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009764:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009768:	d010      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800976a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800976e:	d816      	bhi.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01d      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009778:	d111      	bne.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3304      	adds	r3, #4
 800977e:	2101      	movs	r1, #1
 8009780:	4618      	mov	r0, r3
 8009782:	f001 fd37 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800978a:	e012      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3324      	adds	r3, #36	; 0x24
 8009790:	2101      	movs	r1, #1
 8009792:	4618      	mov	r0, r3
 8009794:	f001 fde0 	bl	800b358 <RCCEx_PLL3_Config>
 8009798:	4603      	mov	r3, r0
 800979a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800979c:	e009      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
      break;
 80097a2:	e006      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80097a4:	bf00      	nop
 80097a6:	e004      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80097a8:	bf00      	nop
 80097aa:	e002      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80097ac:	bf00      	nop
 80097ae:	e000      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80097b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d109      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80097b8:	4b73      	ldr	r3, [pc, #460]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80097ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097c4:	4970      	ldr	r1, [pc, #448]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	650b      	str	r3, [r1, #80]	; 0x50
 80097ca:	e001      	b.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097cc:	7dfb      	ldrb	r3, [r7, #23]
 80097ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d04b      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80097e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097e6:	d02e      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80097e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097ec:	d828      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f2:	d02a      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80097f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097f8:	d822      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80097fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80097fe:	d026      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009800:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009804:	d81c      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800980a:	d010      	beq.n	800982e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800980c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009810:	d816      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d01d      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009816:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800981a:	d111      	bne.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3304      	adds	r3, #4
 8009820:	2101      	movs	r1, #1
 8009822:	4618      	mov	r0, r3
 8009824:	f001 fce6 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009828:	4603      	mov	r3, r0
 800982a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800982c:	e012      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	3324      	adds	r3, #36	; 0x24
 8009832:	2101      	movs	r1, #1
 8009834:	4618      	mov	r0, r3
 8009836:	f001 fd8f 	bl	800b358 <RCCEx_PLL3_Config>
 800983a:	4603      	mov	r3, r0
 800983c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800983e:	e009      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	75fb      	strb	r3, [r7, #23]
      break;
 8009844:	e006      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009846:	bf00      	nop
 8009848:	e004      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800984a:	bf00      	nop
 800984c:	e002      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800984e:	bf00      	nop
 8009850:	e000      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009854:	7dfb      	ldrb	r3, [r7, #23]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d10a      	bne.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800985a:	4b4b      	ldr	r3, [pc, #300]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800985c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009868:	4947      	ldr	r1, [pc, #284]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800986a:	4313      	orrs	r3, r2
 800986c:	658b      	str	r3, [r1, #88]	; 0x58
 800986e:	e001      	b.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d02f      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009888:	d00e      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800988a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800988e:	d814      	bhi.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009890:	2b00      	cmp	r3, #0
 8009892:	d015      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009898:	d10f      	bne.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800989a:	4b3b      	ldr	r3, [pc, #236]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	4a3a      	ldr	r2, [pc, #232]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80098a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098a6:	e00c      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	3304      	adds	r3, #4
 80098ac:	2101      	movs	r1, #1
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 fca0 	bl	800b1f4 <RCCEx_PLL2_Config>
 80098b4:	4603      	mov	r3, r0
 80098b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80098b8:	e003      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098ba:	2301      	movs	r3, #1
 80098bc:	75fb      	strb	r3, [r7, #23]
      break;
 80098be:	e000      	b.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80098c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098c2:	7dfb      	ldrb	r3, [r7, #23]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d109      	bne.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80098c8:	4b2f      	ldr	r3, [pc, #188]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80098ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098d4:	492c      	ldr	r1, [pc, #176]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80098d6:	4313      	orrs	r3, r2
 80098d8:	650b      	str	r3, [r1, #80]	; 0x50
 80098da:	e001      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098dc:	7dfb      	ldrb	r3, [r7, #23]
 80098de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d032      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d81b      	bhi.n	800992c <HAL_RCCEx_PeriphCLKConfig+0x594>
 80098f4:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	08009933 	.word	0x08009933
 8009900:	0800990d 	.word	0x0800990d
 8009904:	0800991b 	.word	0x0800991b
 8009908:	08009933 	.word	0x08009933
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800990c:	4b1e      	ldr	r3, [pc, #120]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800990e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009910:	4a1d      	ldr	r2, [pc, #116]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009918:	e00c      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	3304      	adds	r3, #4
 800991e:	2102      	movs	r1, #2
 8009920:	4618      	mov	r0, r3
 8009922:	f001 fc67 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009926:	4603      	mov	r3, r0
 8009928:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800992a:	e003      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
      break;
 8009930:	e000      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8009932:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d109      	bne.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800993a:	4b13      	ldr	r3, [pc, #76]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800993c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800993e:	f023 0203 	bic.w	r2, r3, #3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009946:	4910      	ldr	r1, [pc, #64]	; (8009988 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009948:	4313      	orrs	r3, r2
 800994a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800994c:	e001      	b.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800994e:	7dfb      	ldrb	r3, [r7, #23]
 8009950:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 808a 	beq.w	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009960:	4b0a      	ldr	r3, [pc, #40]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a09      	ldr	r2, [pc, #36]	; (800998c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8009966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800996a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800996c:	f7f9 ff7e 	bl	800386c <HAL_GetTick>
 8009970:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009972:	e00d      	b.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009974:	f7f9 ff7a 	bl	800386c <HAL_GetTick>
 8009978:	4602      	mov	r2, r0
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	2b64      	cmp	r3, #100	; 0x64
 8009980:	d906      	bls.n	8009990 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	75fb      	strb	r3, [r7, #23]
        break;
 8009986:	e009      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009988:	58024400 	.word	0x58024400
 800998c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009990:	4bb9      	ldr	r3, [pc, #740]	; (8009c78 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0eb      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d166      	bne.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80099a2:	4bb6      	ldr	r3, [pc, #728]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80099a4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099ac:	4053      	eors	r3, r2
 80099ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d013      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80099b6:	4bb1      	ldr	r3, [pc, #708]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80099b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099be:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099c0:	4bae      	ldr	r3, [pc, #696]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80099c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c4:	4aad      	ldr	r2, [pc, #692]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80099c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099cc:	4bab      	ldr	r3, [pc, #684]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80099ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099d0:	4aaa      	ldr	r2, [pc, #680]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80099d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099d6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80099d8:	4aa8      	ldr	r2, [pc, #672]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80099e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e8:	d115      	bne.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ea:	f7f9 ff3f 	bl	800386c <HAL_GetTick>
 80099ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80099f0:	e00b      	b.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099f2:	f7f9 ff3b 	bl	800386c <HAL_GetTick>
 80099f6:	4602      	mov	r2, r0
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	1ad3      	subs	r3, r2, r3
 80099fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d902      	bls.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	75fb      	strb	r3, [r7, #23]
            break;
 8009a08:	e005      	b.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009a0a:	4b9c      	ldr	r3, [pc, #624]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a0e:	f003 0302 	and.w	r3, r3, #2
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d0ed      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d126      	bne.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a2a:	d10d      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8009a2c:	4b93      	ldr	r3, [pc, #588]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a3a:	0919      	lsrs	r1, r3, #4
 8009a3c:	4b90      	ldr	r3, [pc, #576]	; (8009c80 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8009a3e:	400b      	ands	r3, r1
 8009a40:	498e      	ldr	r1, [pc, #568]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	610b      	str	r3, [r1, #16]
 8009a46:	e005      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8009a48:	4b8c      	ldr	r3, [pc, #560]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	4a8b      	ldr	r2, [pc, #556]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009a4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a52:	6113      	str	r3, [r2, #16]
 8009a54:	4b89      	ldr	r3, [pc, #548]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009a56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a62:	4986      	ldr	r1, [pc, #536]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	670b      	str	r3, [r1, #112]	; 0x70
 8009a68:	e004      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	75bb      	strb	r3, [r7, #22]
 8009a6e:	e001      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
 8009a72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0301 	and.w	r3, r3, #1
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d07e      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a84:	2b28      	cmp	r3, #40	; 0x28
 8009a86:	d867      	bhi.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8009a88:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009b5f 	.word	0x08009b5f
 8009a94:	08009b59 	.word	0x08009b59
 8009a98:	08009b59 	.word	0x08009b59
 8009a9c:	08009b59 	.word	0x08009b59
 8009aa0:	08009b59 	.word	0x08009b59
 8009aa4:	08009b59 	.word	0x08009b59
 8009aa8:	08009b59 	.word	0x08009b59
 8009aac:	08009b59 	.word	0x08009b59
 8009ab0:	08009b35 	.word	0x08009b35
 8009ab4:	08009b59 	.word	0x08009b59
 8009ab8:	08009b59 	.word	0x08009b59
 8009abc:	08009b59 	.word	0x08009b59
 8009ac0:	08009b59 	.word	0x08009b59
 8009ac4:	08009b59 	.word	0x08009b59
 8009ac8:	08009b59 	.word	0x08009b59
 8009acc:	08009b59 	.word	0x08009b59
 8009ad0:	08009b47 	.word	0x08009b47
 8009ad4:	08009b59 	.word	0x08009b59
 8009ad8:	08009b59 	.word	0x08009b59
 8009adc:	08009b59 	.word	0x08009b59
 8009ae0:	08009b59 	.word	0x08009b59
 8009ae4:	08009b59 	.word	0x08009b59
 8009ae8:	08009b59 	.word	0x08009b59
 8009aec:	08009b59 	.word	0x08009b59
 8009af0:	08009b5f 	.word	0x08009b5f
 8009af4:	08009b59 	.word	0x08009b59
 8009af8:	08009b59 	.word	0x08009b59
 8009afc:	08009b59 	.word	0x08009b59
 8009b00:	08009b59 	.word	0x08009b59
 8009b04:	08009b59 	.word	0x08009b59
 8009b08:	08009b59 	.word	0x08009b59
 8009b0c:	08009b59 	.word	0x08009b59
 8009b10:	08009b5f 	.word	0x08009b5f
 8009b14:	08009b59 	.word	0x08009b59
 8009b18:	08009b59 	.word	0x08009b59
 8009b1c:	08009b59 	.word	0x08009b59
 8009b20:	08009b59 	.word	0x08009b59
 8009b24:	08009b59 	.word	0x08009b59
 8009b28:	08009b59 	.word	0x08009b59
 8009b2c:	08009b59 	.word	0x08009b59
 8009b30:	08009b5f 	.word	0x08009b5f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3304      	adds	r3, #4
 8009b38:	2101      	movs	r1, #1
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f001 fb5a 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009b40:	4603      	mov	r3, r0
 8009b42:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b44:	e00c      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	3324      	adds	r3, #36	; 0x24
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 fc03 	bl	800b358 <RCCEx_PLL3_Config>
 8009b52:	4603      	mov	r3, r0
 8009b54:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8009b56:	e003      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b5c:	e000      	b.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8009b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b60:	7dfb      	ldrb	r3, [r7, #23]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d109      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009b66:	4b45      	ldr	r3, [pc, #276]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b72:	4942      	ldr	r1, [pc, #264]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009b74:	4313      	orrs	r3, r2
 8009b76:	654b      	str	r3, [r1, #84]	; 0x54
 8009b78:	e001      	b.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d037      	beq.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b8e:	2b05      	cmp	r3, #5
 8009b90:	d820      	bhi.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8009b92:	a201      	add	r2, pc, #4	; (adr r2, 8009b98 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8009b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b98:	08009bdb 	.word	0x08009bdb
 8009b9c:	08009bb1 	.word	0x08009bb1
 8009ba0:	08009bc3 	.word	0x08009bc3
 8009ba4:	08009bdb 	.word	0x08009bdb
 8009ba8:	08009bdb 	.word	0x08009bdb
 8009bac:	08009bdb 	.word	0x08009bdb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f001 fb1c 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009bc0:	e00c      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	3324      	adds	r3, #36	; 0x24
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f001 fbc5 	bl	800b358 <RCCEx_PLL3_Config>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009bd2:	e003      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd8:	e000      	b.n	8009bdc <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8009bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009be2:	4b26      	ldr	r3, [pc, #152]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009be6:	f023 0207 	bic.w	r2, r3, #7
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bee:	4923      	ldr	r1, [pc, #140]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	654b      	str	r3, [r1, #84]	; 0x54
 8009bf4:	e001      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0304 	and.w	r3, r3, #4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d040      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c0c:	2b05      	cmp	r3, #5
 8009c0e:	d821      	bhi.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8009c10:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8009c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c16:	bf00      	nop
 8009c18:	08009c5b 	.word	0x08009c5b
 8009c1c:	08009c31 	.word	0x08009c31
 8009c20:	08009c43 	.word	0x08009c43
 8009c24:	08009c5b 	.word	0x08009c5b
 8009c28:	08009c5b 	.word	0x08009c5b
 8009c2c:	08009c5b 	.word	0x08009c5b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3304      	adds	r3, #4
 8009c34:	2101      	movs	r1, #1
 8009c36:	4618      	mov	r0, r3
 8009c38:	f001 fadc 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c40:	e00c      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3324      	adds	r3, #36	; 0x24
 8009c46:	2101      	movs	r1, #1
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f001 fb85 	bl	800b358 <RCCEx_PLL3_Config>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009c52:	e003      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	75fb      	strb	r3, [r7, #23]
      break;
 8009c58:	e000      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8009c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c5c:	7dfb      	ldrb	r3, [r7, #23]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d110      	bne.n	8009c84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c62:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c66:	f023 0207 	bic.w	r2, r3, #7
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c70:	4902      	ldr	r1, [pc, #8]	; (8009c7c <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009c72:	4313      	orrs	r3, r2
 8009c74:	658b      	str	r3, [r1, #88]	; 0x58
 8009c76:	e007      	b.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8009c78:	58024800 	.word	0x58024800
 8009c7c:	58024400 	.word	0x58024400
 8009c80:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
 8009c86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0320 	and.w	r3, r3, #32
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d04b      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c9e:	d02e      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x966>
 8009ca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ca4:	d828      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009caa:	d02a      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8009cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cb0:	d822      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009cb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cb6:	d026      	beq.n	8009d06 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8009cb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009cbc:	d81c      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cc2:	d010      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8009cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009cc8:	d816      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d01d      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8009cce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cd2:	d111      	bne.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3304      	adds	r3, #4
 8009cd8:	2100      	movs	r1, #0
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f001 fa8a 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009ce4:	e012      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	3324      	adds	r3, #36	; 0x24
 8009cea:	2102      	movs	r1, #2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 fb33 	bl	800b358 <RCCEx_PLL3_Config>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8009cf6:	e009      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfc:	e006      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009cfe:	bf00      	nop
 8009d00:	e004      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009d02:	bf00      	nop
 8009d04:	e002      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009d06:	bf00      	nop
 8009d08:	e000      	b.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8009d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d0c:	7dfb      	ldrb	r3, [r7, #23]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009d12:	4bb2      	ldr	r3, [pc, #712]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d16:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d20:	49ae      	ldr	r1, [pc, #696]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009d22:	4313      	orrs	r3, r2
 8009d24:	654b      	str	r3, [r1, #84]	; 0x54
 8009d26:	e001      	b.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d04b      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009d3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d42:	d02e      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8009d44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009d48:	d828      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d4e:	d02a      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8009d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d54:	d822      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009d56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d5a:	d026      	beq.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8009d5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d60:	d81c      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d66:	d010      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8009d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d6c:	d816      	bhi.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d01d      	beq.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8009d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d76:	d111      	bne.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f001 fa38 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009d84:	4603      	mov	r3, r0
 8009d86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d88:	e012      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3324      	adds	r3, #36	; 0x24
 8009d8e:	2102      	movs	r1, #2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f001 fae1 	bl	800b358 <RCCEx_PLL3_Config>
 8009d96:	4603      	mov	r3, r0
 8009d98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009d9a:	e009      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009da0:	e006      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009da2:	bf00      	nop
 8009da4:	e004      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009da6:	bf00      	nop
 8009da8:	e002      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009daa:	bf00      	nop
 8009dac:	e000      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8009dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009db0:	7dfb      	ldrb	r3, [r7, #23]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10a      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009db6:	4b89      	ldr	r3, [pc, #548]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009dc4:	4985      	ldr	r1, [pc, #532]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	658b      	str	r3, [r1, #88]	; 0x58
 8009dca:	e001      	b.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dcc:	7dfb      	ldrb	r3, [r7, #23]
 8009dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d04b      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009de2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009de6:	d02e      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8009de8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009dec:	d828      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009df2:	d02a      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8009df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009df8:	d822      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009dfa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009dfe:	d026      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8009e00:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009e04:	d81c      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009e06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e0a:	d010      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8009e0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e10:	d816      	bhi.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d01d      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8009e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e1a:	d111      	bne.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f001 f9e6 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e2c:	e012      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3324      	adds	r3, #36	; 0x24
 8009e32:	2102      	movs	r1, #2
 8009e34:	4618      	mov	r0, r3
 8009e36:	f001 fa8f 	bl	800b358 <RCCEx_PLL3_Config>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009e3e:	e009      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	75fb      	strb	r3, [r7, #23]
      break;
 8009e44:	e006      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009e46:	bf00      	nop
 8009e48:	e004      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009e4a:	bf00      	nop
 8009e4c:	e002      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009e4e:	bf00      	nop
 8009e50:	e000      	b.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8009e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10a      	bne.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009e5a:	4b60      	ldr	r3, [pc, #384]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e68:	495c      	ldr	r1, [pc, #368]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	658b      	str	r3, [r1, #88]	; 0x58
 8009e6e:	e001      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f003 0308 	and.w	r3, r3, #8
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d018      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e88:	d10a      	bne.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3324      	adds	r3, #36	; 0x24
 8009e8e:	2102      	movs	r1, #2
 8009e90:	4618      	mov	r0, r3
 8009e92:	f001 fa61 	bl	800b358 <RCCEx_PLL3_Config>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8009ea0:	4b4e      	ldr	r3, [pc, #312]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009eac:	494b      	ldr	r1, [pc, #300]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f003 0310 	and.w	r3, r3, #16
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01a      	beq.n	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ec8:	d10a      	bne.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3324      	adds	r3, #36	; 0x24
 8009ece:	2102      	movs	r1, #2
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f001 fa41 	bl	800b358 <RCCEx_PLL3_Config>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009ee0:	4b3e      	ldr	r3, [pc, #248]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eee:	493b      	ldr	r1, [pc, #236]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d034      	beq.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f0a:	d01d      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8009f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f10:	d817      	bhi.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d003      	beq.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8009f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f1a:	d009      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009f1c:	e011      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	3304      	adds	r3, #4
 8009f22:	2100      	movs	r1, #0
 8009f24:	4618      	mov	r0, r3
 8009f26:	f001 f965 	bl	800b1f4 <RCCEx_PLL2_Config>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f2e:	e00c      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	3324      	adds	r3, #36	; 0x24
 8009f34:	2102      	movs	r1, #2
 8009f36:	4618      	mov	r0, r3
 8009f38:	f001 fa0e 	bl	800b358 <RCCEx_PLL3_Config>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009f40:	e003      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	75fb      	strb	r3, [r7, #23]
      break;
 8009f46:	e000      	b.n	8009f4a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8009f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10a      	bne.n	8009f66 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009f50:	4b22      	ldr	r3, [pc, #136]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f5e:	491f      	ldr	r1, [pc, #124]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	658b      	str	r3, [r1, #88]	; 0x58
 8009f64:	e001      	b.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f66:	7dfb      	ldrb	r3, [r7, #23]
 8009f68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d036      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f80:	d01c      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009f82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f86:	d816      	bhi.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f8c:	d003      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f92:	d007      	beq.n	8009fa4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8009f94:	e00f      	b.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f96:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9a:	4a10      	ldr	r2, [pc, #64]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009fa2:	e00c      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3324      	adds	r3, #36	; 0x24
 8009fa8:	2101      	movs	r1, #1
 8009faa:	4618      	mov	r0, r3
 8009fac:	f001 f9d4 	bl	800b358 <RCCEx_PLL3_Config>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009fb4:	e003      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	75fb      	strb	r3, [r7, #23]
      break;
 8009fba:	e000      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8009fbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d10d      	bne.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009fc4:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fd2:	4902      	ldr	r1, [pc, #8]	; (8009fdc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	654b      	str	r3, [r1, #84]	; 0x54
 8009fd8:	e004      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8009fda:	bf00      	nop
 8009fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d029      	beq.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d003      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8009ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffc:	d007      	beq.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009ffe:	e00f      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a000:	4b61      	ldr	r3, [pc, #388]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a004:	4a60      	ldr	r2, [pc, #384]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a00a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a00c:	e00b      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	3304      	adds	r3, #4
 800a012:	2102      	movs	r1, #2
 800a014:	4618      	mov	r0, r3
 800a016:	f001 f8ed 	bl	800b1f4 <RCCEx_PLL2_Config>
 800a01a:	4603      	mov	r3, r0
 800a01c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a01e:	e002      	b.n	800a026 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	75fb      	strb	r3, [r7, #23]
      break;
 800a024:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d109      	bne.n	800a040 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a02c:	4b56      	ldr	r3, [pc, #344]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a02e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a030:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a038:	4953      	ldr	r1, [pc, #332]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a03e:	e001      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a040:	7dfb      	ldrb	r3, [r7, #23]
 800a042:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00a      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	3324      	adds	r3, #36	; 0x24
 800a054:	2102      	movs	r1, #2
 800a056:	4618      	mov	r0, r3
 800a058:	f001 f97e 	bl	800b358 <RCCEx_PLL3_Config>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d030      	beq.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a07a:	d017      	beq.n	800a0ac <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a07c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a080:	d811      	bhi.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a086:	d013      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800a088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a08c:	d80b      	bhi.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d010      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800a092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a096:	d106      	bne.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a098:	4b3b      	ldr	r3, [pc, #236]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	4a3a      	ldr	r2, [pc, #232]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a09e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a0a4:	e007      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a0aa:	e004      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a0ac:	bf00      	nop
 800a0ae:	e002      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a0b0:	bf00      	nop
 800a0b2:	e000      	b.n	800a0b6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800a0b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d109      	bne.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0bc:	4b32      	ldr	r3, [pc, #200]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0c8:	492f      	ldr	r1, [pc, #188]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	654b      	str	r3, [r1, #84]	; 0x54
 800a0ce:	e001      	b.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d008      	beq.n	800a0f2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a0e0:	4b29      	ldr	r3, [pc, #164]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ec:	4926      	ldr	r1, [pc, #152]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d008      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0fe:	4b22      	ldr	r3, [pc, #136]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a102:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a10a:	491f      	ldr	r1, [pc, #124]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a10c:	4313      	orrs	r3, r2
 800a10e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00d      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a11c:	4b1a      	ldr	r3, [pc, #104]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a11e:	691b      	ldr	r3, [r3, #16]
 800a120:	4a19      	ldr	r2, [pc, #100]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a126:	6113      	str	r3, [r2, #16]
 800a128:	4b17      	ldr	r3, [pc, #92]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a132:	4915      	ldr	r1, [pc, #84]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a134:	4313      	orrs	r3, r2
 800a136:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	da08      	bge.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a140:	4b11      	ldr	r3, [pc, #68]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a144:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14c:	490e      	ldr	r1, [pc, #56]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a14e:	4313      	orrs	r3, r2
 800a150:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d009      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a15e:	4b0a      	ldr	r3, [pc, #40]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a162:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a16c:	4906      	ldr	r1, [pc, #24]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a172:	7dbb      	ldrb	r3, [r7, #22]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	e000      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	58024400 	.word	0x58024400

0800a18c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b090      	sub	sp, #64	; 0x40
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a19a:	f040 8089 	bne.w	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a19e:	4b95      	ldr	r3, [pc, #596]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1a2:	f003 0307 	and.w	r3, r3, #7
 800a1a6:	633b      	str	r3, [r7, #48]	; 0x30
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	2b04      	cmp	r3, #4
 800a1ac:	d87d      	bhi.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800a1ae:	a201      	add	r2, pc, #4	; (adr r2, 800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800a1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b4:	0800a1c9 	.word	0x0800a1c9
 800a1b8:	0800a1ed 	.word	0x0800a1ed
 800a1bc:	0800a211 	.word	0x0800a211
 800a1c0:	0800a2a5 	.word	0x0800a2a5
 800a1c4:	0800a235 	.word	0x0800a235

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1c8:	4b8a      	ldr	r3, [pc, #552]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1d4:	d107      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 feb8 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a1e4:	e3ed      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a1ea:	e3ea      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1ec:	4b81      	ldr	r3, [pc, #516]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1f8:	d107      	bne.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1fa:	f107 0318 	add.w	r3, r7, #24
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 fbfe 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a204:	69bb      	ldr	r3, [r7, #24]
 800a206:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a208:	e3db      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a20a:	2300      	movs	r3, #0
 800a20c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a20e:	e3d8      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a210:	4b78      	ldr	r3, [pc, #480]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a21c:	d107      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a21e:	f107 030c 	add.w	r3, r7, #12
 800a222:	4618      	mov	r0, r3
 800a224:	f000 fd40 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a22c:	e3c9      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a232:	e3c6      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a234:	4b6f      	ldr	r3, [pc, #444]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a23e:	4b6d      	ldr	r3, [pc, #436]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	2b04      	cmp	r3, #4
 800a248:	d10c      	bne.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800a24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d109      	bne.n	800a264 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a250:	4b68      	ldr	r3, [pc, #416]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	08db      	lsrs	r3, r3, #3
 800a256:	f003 0303 	and.w	r3, r3, #3
 800a25a:	4a67      	ldr	r2, [pc, #412]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a25c:	fa22 f303 	lsr.w	r3, r2, r3
 800a260:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a262:	e01e      	b.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a264:	4b63      	ldr	r3, [pc, #396]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a26c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a270:	d106      	bne.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800a272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a274:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a278:	d102      	bne.n	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a27a:	4b60      	ldr	r3, [pc, #384]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a27c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a27e:	e010      	b.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a280:	4b5c      	ldr	r3, [pc, #368]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a28c:	d106      	bne.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a294:	d102      	bne.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a296:	4b5a      	ldr	r3, [pc, #360]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a298:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a29a:	e002      	b.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a29c:	2300      	movs	r3, #0
 800a29e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a2a0:	e38f      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a2a2:	e38e      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a2a4:	4b57      	ldr	r3, [pc, #348]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2a8:	e38b      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a2ae:	e388      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2b6:	f040 80a7 	bne.w	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800a2ba:	4b4e      	ldr	r3, [pc, #312]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a2bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2be:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a2c2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2ca:	d054      	beq.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a2d2:	f200 808b 	bhi.w	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2dc:	f000 8083 	beq.w	800a3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a2e6:	f200 8081 	bhi.w	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2f0:	d02f      	beq.n	800a352 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2f8:	d878      	bhi.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d004      	beq.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a306:	d012      	beq.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800a308:	e070      	b.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a30a:	4b3a      	ldr	r3, [pc, #232]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a312:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a316:	d107      	bne.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 fe17 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a326:	e34c      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a32c:	e349      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a32e:	4b31      	ldr	r3, [pc, #196]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a33a:	d107      	bne.n	800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a33c:	f107 0318 	add.w	r3, r7, #24
 800a340:	4618      	mov	r0, r3
 800a342:	f000 fb5d 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a34a:	e33a      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a350:	e337      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a352:	4b28      	ldr	r3, [pc, #160]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a35a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a35e:	d107      	bne.n	800a370 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a360:	f107 030c 	add.w	r3, r7, #12
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fc9f 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a36e:	e328      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a370:	2300      	movs	r3, #0
 800a372:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a374:	e325      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a376:	4b1f      	ldr	r3, [pc, #124]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a37a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a37e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a380:	4b1c      	ldr	r3, [pc, #112]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0304 	and.w	r3, r3, #4
 800a388:	2b04      	cmp	r3, #4
 800a38a:	d10c      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800a38c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d109      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a392:	4b18      	ldr	r3, [pc, #96]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	08db      	lsrs	r3, r3, #3
 800a398:	f003 0303 	and.w	r3, r3, #3
 800a39c:	4a16      	ldr	r2, [pc, #88]	; (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800a39e:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a4:	e01e      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3a6:	4b13      	ldr	r3, [pc, #76]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3b2:	d106      	bne.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800a3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3ba:	d102      	bne.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a3bc:	4b0f      	ldr	r3, [pc, #60]	; (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c0:	e010      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3c2:	4b0c      	ldr	r3, [pc, #48]	; (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3ce:	d106      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800a3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3d6:	d102      	bne.n	800a3de <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a3d8:	4b09      	ldr	r3, [pc, #36]	; (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3dc:	e002      	b.n	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a3e2:	e2ee      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a3e4:	e2ed      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a3e6:	4b07      	ldr	r3, [pc, #28]	; (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3ea:	e2ea      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a3f0:	e2e7      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a3f2:	bf00      	nop
 800a3f4:	58024400 	.word	0x58024400
 800a3f8:	03d09000 	.word	0x03d09000
 800a3fc:	003d0900 	.word	0x003d0900
 800a400:	017d7840 	.word	0x017d7840
 800a404:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a40e:	f040 809c 	bne.w	800a54a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800a412:	4b9e      	ldr	r3, [pc, #632]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a416:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a41a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a422:	d054      	beq.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800a424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a42a:	f200 808b 	bhi.w	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a42e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a430:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a434:	f000 8083 	beq.w	800a53e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a43e:	f200 8081 	bhi.w	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a448:	d02f      	beq.n	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800a44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a450:	d878      	bhi.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800a452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a454:	2b00      	cmp	r3, #0
 800a456:	d004      	beq.n	800a462 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a45e:	d012      	beq.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800a460:	e070      	b.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a462:	4b8a      	ldr	r3, [pc, #552]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a46a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a46e:	d107      	bne.n	800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a474:	4618      	mov	r0, r3
 800a476:	f000 fd6b 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a47e:	e2a0      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a480:	2300      	movs	r3, #0
 800a482:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a484:	e29d      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a486:	4b81      	ldr	r3, [pc, #516]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a48e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a492:	d107      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a494:	f107 0318 	add.w	r3, r7, #24
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 fab1 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a49e:	69bb      	ldr	r3, [r7, #24]
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800a4a2:	e28e      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4a8:	e28b      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4aa:	4b78      	ldr	r3, [pc, #480]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4b6:	d107      	bne.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4b8:	f107 030c 	add.w	r3, r7, #12
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 fbf3 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a4c6:	e27c      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a4cc:	e279      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a4ce:	4b6f      	ldr	r3, [pc, #444]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a4d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a4d6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4d8:	4b6c      	ldr	r3, [pc, #432]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0304 	and.w	r3, r3, #4
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d10c      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d109      	bne.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a4ea:	4b68      	ldr	r3, [pc, #416]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	08db      	lsrs	r3, r3, #3
 800a4f0:	f003 0303 	and.w	r3, r3, #3
 800a4f4:	4a66      	ldr	r2, [pc, #408]	; (800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a4f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4fc:	e01e      	b.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4fe:	4b63      	ldr	r3, [pc, #396]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a50a:	d106      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800a50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a512:	d102      	bne.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a514:	4b5f      	ldr	r3, [pc, #380]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a518:	e010      	b.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a51a:	4b5c      	ldr	r3, [pc, #368]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a522:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a526:	d106      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800a528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a52a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a52e:	d102      	bne.n	800a536 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a530:	4b59      	ldr	r3, [pc, #356]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a532:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a534:	e002      	b.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a536:	2300      	movs	r3, #0
 800a538:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a53a:	e242      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a53c:	e241      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a53e:	4b57      	ldr	r3, [pc, #348]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a542:	e23e      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a548:	e23b      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a550:	f040 80a6 	bne.w	800a6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800a554:	4b4d      	ldr	r3, [pc, #308]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a558:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a55c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a560:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a564:	d054      	beq.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800a566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a56c:	f200 808b 	bhi.w	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a576:	f000 8083 	beq.w	800a680 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a580:	f200 8081 	bhi.w	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a58a:	d02f      	beq.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800a58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a592:	d878      	bhi.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a596:	2b00      	cmp	r3, #0
 800a598:	d004      	beq.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800a59a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a0:	d012      	beq.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800a5a2:	e070      	b.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5a4:	4b39      	ldr	r3, [pc, #228]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a5b0:	d107      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fcca 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5c0:	e1ff      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5c6:	e1fc      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5c8:	4b30      	ldr	r3, [pc, #192]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5d4:	d107      	bne.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5d6:	f107 0318 	add.w	r3, r7, #24
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f000 fa10 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a5e4:	e1ed      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a5ea:	e1ea      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5ec:	4b27      	ldr	r3, [pc, #156]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5f8:	d107      	bne.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5fa:	f107 030c 	add.w	r3, r7, #12
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 fb52 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a608:	e1db      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a60e:	e1d8      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a610:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a614:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a618:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a61a:	4b1c      	ldr	r3, [pc, #112]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b04      	cmp	r3, #4
 800a624:	d10c      	bne.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800a626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d109      	bne.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a62c:	4b17      	ldr	r3, [pc, #92]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	08db      	lsrs	r3, r3, #3
 800a632:	f003 0303 	and.w	r3, r3, #3
 800a636:	4a16      	ldr	r2, [pc, #88]	; (800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800a638:	fa22 f303 	lsr.w	r3, r2, r3
 800a63c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a63e:	e01e      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a640:	4b12      	ldr	r3, [pc, #72]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a64c:	d106      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a654:	d102      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a656:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800a658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a65a:	e010      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a65c:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a664:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a668:	d106      	bne.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800a66a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a66c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a670:	d102      	bne.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800a674:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a676:	e002      	b.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a67c:	e1a1      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a67e:	e1a0      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a680:	4b06      	ldr	r3, [pc, #24]	; (800a69c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800a682:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a684:	e19d      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a68a:	e19a      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a68c:	58024400 	.word	0x58024400
 800a690:	03d09000 	.word	0x03d09000
 800a694:	003d0900 	.word	0x003d0900
 800a698:	017d7840 	.word	0x017d7840
 800a69c:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a6a6:	d173      	bne.n	800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800a6a8:	4b9a      	ldr	r3, [pc, #616]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a6b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6b8:	d02f      	beq.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800a6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6c0:	d863      	bhi.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6ce:	d012      	beq.n	800a6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800a6d0:	e05b      	b.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6d2:	4b90      	ldr	r3, [pc, #576]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6de:	d107      	bne.n	800a6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6e0:	f107 0318 	add.w	r3, r7, #24
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 f98b 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a6ee:	e168      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a6f4:	e165      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6f6:	4b87      	ldr	r3, [pc, #540]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a6fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a702:	d107      	bne.n	800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a704:	f107 030c 	add.w	r3, r7, #12
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 facd 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a712:	e156      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a718:	e153      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a71a:	4b7e      	ldr	r3, [pc, #504]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a71e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a722:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a724:	4b7b      	ldr	r3, [pc, #492]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0304 	and.w	r3, r3, #4
 800a72c:	2b04      	cmp	r3, #4
 800a72e:	d10c      	bne.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800a730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a732:	2b00      	cmp	r3, #0
 800a734:	d109      	bne.n	800a74a <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a736:	4b77      	ldr	r3, [pc, #476]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	08db      	lsrs	r3, r3, #3
 800a73c:	f003 0303 	and.w	r3, r3, #3
 800a740:	4a75      	ldr	r2, [pc, #468]	; (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a742:	fa22 f303 	lsr.w	r3, r2, r3
 800a746:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a748:	e01e      	b.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a74a:	4b72      	ldr	r3, [pc, #456]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a756:	d106      	bne.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800a758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a75a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a75e:	d102      	bne.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a760:	4b6e      	ldr	r3, [pc, #440]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a764:	e010      	b.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a766:	4b6b      	ldr	r3, [pc, #428]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a772:	d106      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a77a:	d102      	bne.n	800a782 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a77c:	4b68      	ldr	r3, [pc, #416]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a780:	e002      	b.n	800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a782:	2300      	movs	r3, #0
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a786:	e11c      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a788:	e11b      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a78e:	e118      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a796:	d133      	bne.n	800a800 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800a798:	4b5e      	ldr	r3, [pc, #376]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a79a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a79c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7a0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d004      	beq.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ae:	d012      	beq.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800a7b0:	e023      	b.n	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7b2:	4b58      	ldr	r3, [pc, #352]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7be:	d107      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 fbc3 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7ce:	e0f8      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7d4:	e0f5      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7d6:	4b4f      	ldr	r3, [pc, #316]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7e2:	d107      	bne.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7e4:	f107 0318 	add.w	r3, r7, #24
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 f909 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a7ee:	6a3b      	ldr	r3, [r7, #32]
 800a7f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a7f2:	e0e6      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7f8:	e0e3      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a7fe:	e0e0      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a806:	f040 808d 	bne.w	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800a80a:	4b42      	ldr	r3, [pc, #264]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a80c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a812:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a81a:	d06b      	beq.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a822:	d874      	bhi.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a82a:	d056      	beq.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800a82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a832:	d86c      	bhi.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a83a:	d03b      	beq.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a842:	d864      	bhi.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a84a:	d021      	beq.n	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a852:	d85c      	bhi.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	2b00      	cmp	r3, #0
 800a858:	d004      	beq.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a860:	d004      	beq.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800a862:	e054      	b.n	800a90e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a864:	f000 f8b6 	bl	800a9d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a868:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800a86a:	e0aa      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a86c:	4b29      	ldr	r3, [pc, #164]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a878:	d107      	bne.n	800a88a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a87a:	f107 0318 	add.w	r3, r7, #24
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 f8be 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a888:	e09b      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a88e:	e098      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a890:	4b20      	ldr	r3, [pc, #128]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a89c:	d107      	bne.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a89e:	f107 030c 	add.w	r3, r7, #12
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 fa00 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8ac:	e089      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8b2:	e086      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a8b4:	4b17      	ldr	r3, [pc, #92]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d109      	bne.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8c0:	4b14      	ldr	r3, [pc, #80]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	08db      	lsrs	r3, r3, #3
 800a8c6:	f003 0303 	and.w	r3, r3, #3
 800a8ca:	4a13      	ldr	r2, [pc, #76]	; (800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800a8cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a8d2:	e076      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8d8:	e073      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8da:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8e6:	d102      	bne.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800a8e8:	4b0c      	ldr	r3, [pc, #48]	; (800a91c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800a8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a8ec:	e069      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a8f2:	e066      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8f4:	4b07      	ldr	r3, [pc, #28]	; (800a914 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a900:	d102      	bne.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800a902:	4b07      	ldr	r3, [pc, #28]	; (800a920 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800a904:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a906:	e05c      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a90c:	e059      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a912:	e056      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800a914:	58024400 	.word	0x58024400
 800a918:	03d09000 	.word	0x03d09000
 800a91c:	003d0900 	.word	0x003d0900
 800a920:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a92a:	d148      	bne.n	800a9be <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800a92c:	4b27      	ldr	r3, [pc, #156]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a934:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a93c:	d02a      	beq.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800a93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a940:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a944:	d838      	bhi.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d004      	beq.n	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800a94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a952:	d00d      	beq.n	800a970 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800a954:	e030      	b.n	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a956:	4b1d      	ldr	r3, [pc, #116]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a95e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a962:	d102      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800a964:	4b1a      	ldr	r3, [pc, #104]	; (800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a968:	e02b      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a96e:	e028      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a970:	4b16      	ldr	r3, [pc, #88]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a97c:	d107      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a97e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a982:	4618      	mov	r0, r3
 800a984:	f000 fae4 	bl	800af50 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a98c:	e019      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a992:	e016      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a994:	4b0d      	ldr	r3, [pc, #52]	; (800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a99c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9a0:	d107      	bne.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9a2:	f107 0318 	add.w	r3, r7, #24
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 f82a 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800a9b0:	e007      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9b6:	e004      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9bc:	e001      	b.n	800a9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800a9c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3740      	adds	r7, #64	; 0x40
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	58024400 	.word	0x58024400
 800a9d0:	017d7840 	.word	0x017d7840

0800a9d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9d8:	f7fe fc82 	bl	80092e0 <HAL_RCC_GetHCLKFreq>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	091b      	lsrs	r3, r3, #4
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	4904      	ldr	r1, [pc, #16]	; (800a9fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9ea:	5ccb      	ldrb	r3, [r1, r3]
 800a9ec:	f003 031f 	and.w	r3, r3, #31
 800a9f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	58024400 	.word	0x58024400
 800a9fc:	0800f85c 	.word	0x0800f85c

0800aa00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b089      	sub	sp, #36	; 0x24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa08:	4ba1      	ldr	r3, [pc, #644]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa0c:	f003 0303 	and.w	r3, r3, #3
 800aa10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aa12:	4b9f      	ldr	r3, [pc, #636]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa16:	0b1b      	lsrs	r3, r3, #12
 800aa18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa1e:	4b9c      	ldr	r3, [pc, #624]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa22:	091b      	lsrs	r3, r3, #4
 800aa24:	f003 0301 	and.w	r3, r3, #1
 800aa28:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800aa2a:	4b99      	ldr	r3, [pc, #612]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa2e:	08db      	lsrs	r3, r3, #3
 800aa30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	fb02 f303 	mul.w	r3, r2, r3
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f000 8111 	beq.w	800ac70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	f000 8083 	beq.w	800ab5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	f200 80a1 	bhi.w	800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d056      	beq.n	800ab18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa6a:	e099      	b.n	800aba0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa6c:	4b88      	ldr	r3, [pc, #544]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0320 	and.w	r3, r3, #32
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d02d      	beq.n	800aad4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aa78:	4b85      	ldr	r3, [pc, #532]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	08db      	lsrs	r3, r3, #3
 800aa7e:	f003 0303 	and.w	r3, r3, #3
 800aa82:	4a84      	ldr	r2, [pc, #528]	; (800ac94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa84:	fa22 f303 	lsr.w	r3, r2, r3
 800aa88:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	ee07 3a90 	vmov	s15, r3
 800aa90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa2:	4b7b      	ldr	r3, [pc, #492]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaaa:	ee07 3a90 	vmov	s15, r3
 800aaae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aabe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aace:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aad2:	e087      	b.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae6:	4b6a      	ldr	r3, [pc, #424]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaee:	ee07 3a90 	vmov	s15, r3
 800aaf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aafe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab16:	e065      	b.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	ee07 3a90 	vmov	s15, r3
 800ab1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab22:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2a:	4b59      	ldr	r3, [pc, #356]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab3e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab5a:	e043      	b.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab6e:	4b48      	ldr	r3, [pc, #288]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab82:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab9e:	e021      	b.n	800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	ee07 3a90 	vmov	s15, r3
 800aba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abaa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aca0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abb2:	4b37      	ldr	r3, [pc, #220]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abc6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abe2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800abe4:	4b2a      	ldr	r3, [pc, #168]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe8:	0a5b      	lsrs	r3, r3, #9
 800abea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac0a:	ee17 2a90 	vmov	r2, s15
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ac12:	4b1f      	ldr	r3, [pc, #124]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	0c1b      	lsrs	r3, r3, #16
 800ac18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac1c:	ee07 3a90 	vmov	s15, r3
 800ac20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac38:	ee17 2a90 	vmov	r2, s15
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ac40:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac44:	0e1b      	lsrs	r3, r3, #24
 800ac46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac4a:	ee07 3a90 	vmov	s15, r3
 800ac4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac66:	ee17 2a90 	vmov	r2, s15
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac6e:	e008      	b.n	800ac82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	609a      	str	r2, [r3, #8]
}
 800ac82:	bf00      	nop
 800ac84:	3724      	adds	r7, #36	; 0x24
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	58024400 	.word	0x58024400
 800ac94:	03d09000 	.word	0x03d09000
 800ac98:	46000000 	.word	0x46000000
 800ac9c:	4c742400 	.word	0x4c742400
 800aca0:	4a742400 	.word	0x4a742400
 800aca4:	4bbebc20 	.word	0x4bbebc20

0800aca8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b089      	sub	sp, #36	; 0x24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acb0:	4ba1      	ldr	r3, [pc, #644]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800acba:	4b9f      	ldr	r3, [pc, #636]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acbe:	0d1b      	lsrs	r3, r3, #20
 800acc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acc6:	4b9c      	ldr	r3, [pc, #624]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acca:	0a1b      	lsrs	r3, r3, #8
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800acd2:	4b99      	ldr	r3, [pc, #612]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acd6:	08db      	lsrs	r3, r3, #3
 800acd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	fb02 f303 	mul.w	r3, r2, r3
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 8111 	beq.w	800af18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	2b02      	cmp	r3, #2
 800acfa:	f000 8083 	beq.w	800ae04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	2b02      	cmp	r3, #2
 800ad02:	f200 80a1 	bhi.w	800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad06:	69bb      	ldr	r3, [r7, #24]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d003      	beq.n	800ad14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad0c:	69bb      	ldr	r3, [r7, #24]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d056      	beq.n	800adc0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad12:	e099      	b.n	800ae48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad14:	4b88      	ldr	r3, [pc, #544]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 0320 	and.w	r3, r3, #32
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d02d      	beq.n	800ad7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad20:	4b85      	ldr	r3, [pc, #532]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	08db      	lsrs	r3, r3, #3
 800ad26:	f003 0303 	and.w	r3, r3, #3
 800ad2a:	4a84      	ldr	r2, [pc, #528]	; (800af3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad30:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	ee07 3a90 	vmov	s15, r3
 800ad38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	ee07 3a90 	vmov	s15, r3
 800ad42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad4a:	4b7b      	ldr	r3, [pc, #492]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad52:	ee07 3a90 	vmov	s15, r3
 800ad56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad76:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ad7a:	e087      	b.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	ee07 3a90 	vmov	s15, r3
 800ad82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8e:	4b6a      	ldr	r3, [pc, #424]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad96:	ee07 3a90 	vmov	s15, r3
 800ad9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ada6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adbe:	e065      	b.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add2:	4b59      	ldr	r3, [pc, #356]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adda:	ee07 3a90 	vmov	s15, r3
 800adde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ade6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae02:	e043      	b.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae16:	4b48      	ldr	r3, [pc, #288]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1e:	ee07 3a90 	vmov	s15, r3
 800ae22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae46:	e021      	b.n	800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	ee07 3a90 	vmov	s15, r3
 800ae4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae5a:	4b37      	ldr	r3, [pc, #220]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ae8c:	4b2a      	ldr	r3, [pc, #168]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae90:	0a5b      	lsrs	r3, r3, #9
 800ae92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aea2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aea6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeb2:	ee17 2a90 	vmov	r2, s15
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aeba:	4b1f      	ldr	r3, [pc, #124]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	0c1b      	lsrs	r3, r3, #16
 800aec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aecc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aed0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aed4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee0:	ee17 2a90 	vmov	r2, s15
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aee8:	4b13      	ldr	r3, [pc, #76]	; (800af38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeec:	0e1b      	lsrs	r3, r3, #24
 800aeee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef2:	ee07 3a90 	vmov	s15, r3
 800aef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aefe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af02:	edd7 6a07 	vldr	s13, [r7, #28]
 800af06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af0e:	ee17 2a90 	vmov	r2, s15
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af16:	e008      	b.n	800af2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	609a      	str	r2, [r3, #8]
}
 800af2a:	bf00      	nop
 800af2c:	3724      	adds	r7, #36	; 0x24
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	58024400 	.word	0x58024400
 800af3c:	03d09000 	.word	0x03d09000
 800af40:	46000000 	.word	0x46000000
 800af44:	4c742400 	.word	0x4c742400
 800af48:	4a742400 	.word	0x4a742400
 800af4c:	4bbebc20 	.word	0x4bbebc20

0800af50 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800af50:	b480      	push	{r7}
 800af52:	b089      	sub	sp, #36	; 0x24
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af58:	4ba0      	ldr	r3, [pc, #640]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af5c:	f003 0303 	and.w	r3, r3, #3
 800af60:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800af62:	4b9e      	ldr	r3, [pc, #632]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af66:	091b      	lsrs	r3, r3, #4
 800af68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af6c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af6e:	4b9b      	ldr	r3, [pc, #620]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af72:	f003 0301 	and.w	r3, r3, #1
 800af76:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800af78:	4b98      	ldr	r3, [pc, #608]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7c:	08db      	lsrs	r3, r3, #3
 800af7e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	fb02 f303 	mul.w	r3, r2, r3
 800af88:	ee07 3a90 	vmov	s15, r3
 800af8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af90:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 8111 	beq.w	800b1be <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	f000 8083 	beq.w	800b0aa <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	f200 80a1 	bhi.w	800b0ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d003      	beq.n	800afba <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d056      	beq.n	800b066 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800afb8:	e099      	b.n	800b0ee <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800afba:	4b88      	ldr	r3, [pc, #544]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f003 0320 	and.w	r3, r3, #32
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d02d      	beq.n	800b022 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800afc6:	4b85      	ldr	r3, [pc, #532]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	08db      	lsrs	r3, r3, #3
 800afcc:	f003 0303 	and.w	r3, r3, #3
 800afd0:	4a83      	ldr	r2, [pc, #524]	; (800b1e0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800afd2:	fa22 f303 	lsr.w	r3, r2, r3
 800afd6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	ee07 3a90 	vmov	s15, r3
 800afde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	ee07 3a90 	vmov	s15, r3
 800afe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff0:	4b7a      	ldr	r3, [pc, #488]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff8:	ee07 3a90 	vmov	s15, r3
 800affc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b000:	ed97 6a03 	vldr	s12, [r7, #12]
 800b004:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b008:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b010:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b014:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b020:	e087      	b.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	ee07 3a90 	vmov	s15, r3
 800b028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b034:	4b69      	ldr	r3, [pc, #420]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03c:	ee07 3a90 	vmov	s15, r3
 800b040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b044:	ed97 6a03 	vldr	s12, [r7, #12]
 800b048:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b04c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b060:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b064:	e065      	b.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	ee07 3a90 	vmov	s15, r3
 800b06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b070:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b1ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b078:	4b58      	ldr	r3, [pc, #352]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b080:	ee07 3a90 	vmov	s15, r3
 800b084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b088:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b09c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0a8:	e043      	b.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	ee07 3a90 	vmov	s15, r3
 800b0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b1f0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0bc:	4b47      	ldr	r3, [pc, #284]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c4:	ee07 3a90 	vmov	s15, r3
 800b0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0d0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0ec:	e021      	b.n	800b132 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	ee07 3a90 	vmov	s15, r3
 800b0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b1e8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b100:	4b36      	ldr	r3, [pc, #216]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b110:	ed97 6a03 	vldr	s12, [r7, #12]
 800b114:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b1e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b130:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b132:	4b2a      	ldr	r3, [pc, #168]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b136:	0a5b      	lsrs	r3, r3, #9
 800b138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b13c:	ee07 3a90 	vmov	s15, r3
 800b140:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b144:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b148:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b14c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b158:	ee17 2a90 	vmov	r2, s15
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b160:	4b1e      	ldr	r3, [pc, #120]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b164:	0c1b      	lsrs	r3, r3, #16
 800b166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b172:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b176:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b17a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b17e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b182:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b186:	ee17 2a90 	vmov	r2, s15
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b18e:	4b13      	ldr	r3, [pc, #76]	; (800b1dc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b192:	0e1b      	lsrs	r3, r3, #24
 800b194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b198:	ee07 3a90 	vmov	s15, r3
 800b19c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1b4:	ee17 2a90 	vmov	r2, s15
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1bc:	e008      	b.n	800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	609a      	str	r2, [r3, #8]
}
 800b1d0:	bf00      	nop
 800b1d2:	3724      	adds	r7, #36	; 0x24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr
 800b1dc:	58024400 	.word	0x58024400
 800b1e0:	03d09000 	.word	0x03d09000
 800b1e4:	46000000 	.word	0x46000000
 800b1e8:	4c742400 	.word	0x4c742400
 800b1ec:	4a742400 	.word	0x4a742400
 800b1f0:	4bbebc20 	.word	0x4bbebc20

0800b1f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b202:	4b53      	ldr	r3, [pc, #332]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b206:	f003 0303 	and.w	r3, r3, #3
 800b20a:	2b03      	cmp	r3, #3
 800b20c:	d101      	bne.n	800b212 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e099      	b.n	800b346 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b212:	4b4f      	ldr	r3, [pc, #316]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a4e      	ldr	r2, [pc, #312]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b218:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b21c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b21e:	f7f8 fb25 	bl	800386c <HAL_GetTick>
 800b222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b224:	e008      	b.n	800b238 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b226:	f7f8 fb21 	bl	800386c <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	2b02      	cmp	r3, #2
 800b232:	d901      	bls.n	800b238 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e086      	b.n	800b346 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b238:	4b45      	ldr	r3, [pc, #276]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1f0      	bne.n	800b226 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b244:	4b42      	ldr	r3, [pc, #264]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b248:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	031b      	lsls	r3, r3, #12
 800b252:	493f      	ldr	r1, [pc, #252]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b254:	4313      	orrs	r3, r2
 800b256:	628b      	str	r3, [r1, #40]	; 0x28
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	3b01      	subs	r3, #1
 800b268:	025b      	lsls	r3, r3, #9
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	431a      	orrs	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	3b01      	subs	r3, #1
 800b274:	041b      	lsls	r3, r3, #16
 800b276:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b27a:	431a      	orrs	r2, r3
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	3b01      	subs	r3, #1
 800b282:	061b      	lsls	r3, r3, #24
 800b284:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b288:	4931      	ldr	r1, [pc, #196]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b28a:	4313      	orrs	r3, r2
 800b28c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b28e:	4b30      	ldr	r3, [pc, #192]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b292:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	492d      	ldr	r1, [pc, #180]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b29c:	4313      	orrs	r3, r2
 800b29e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b2a0:	4b2b      	ldr	r3, [pc, #172]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a4:	f023 0220 	bic.w	r2, r3, #32
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	699b      	ldr	r3, [r3, #24]
 800b2ac:	4928      	ldr	r1, [pc, #160]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b2b2:	4b27      	ldr	r3, [pc, #156]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	4a26      	ldr	r2, [pc, #152]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2b8:	f023 0310 	bic.w	r3, r3, #16
 800b2bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2be:	4b24      	ldr	r3, [pc, #144]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2c2:	4b24      	ldr	r3, [pc, #144]	; (800b354 <RCCEx_PLL2_Config+0x160>)
 800b2c4:	4013      	ands	r3, r2
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	69d2      	ldr	r2, [r2, #28]
 800b2ca:	00d2      	lsls	r2, r2, #3
 800b2cc:	4920      	ldr	r1, [pc, #128]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2d2:	4b1f      	ldr	r3, [pc, #124]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d6:	4a1e      	ldr	r2, [pc, #120]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2d8:	f043 0310 	orr.w	r3, r3, #16
 800b2dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d106      	bne.n	800b2f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2e4:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e8:	4a19      	ldr	r2, [pc, #100]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2f0:	e00f      	b.n	800b312 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d106      	bne.n	800b306 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2f8:	4b15      	ldr	r3, [pc, #84]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fc:	4a14      	ldr	r2, [pc, #80]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b2fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b302:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b304:	e005      	b.n	800b312 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b306:	4b12      	ldr	r3, [pc, #72]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30a:	4a11      	ldr	r2, [pc, #68]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b30c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b310:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b312:	4b0f      	ldr	r3, [pc, #60]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a0e      	ldr	r2, [pc, #56]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b318:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b31e:	f7f8 faa5 	bl	800386c <HAL_GetTick>
 800b322:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b324:	e008      	b.n	800b338 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b326:	f7f8 faa1 	bl	800386c <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	2b02      	cmp	r3, #2
 800b332:	d901      	bls.n	800b338 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e006      	b.n	800b346 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b338:	4b05      	ldr	r3, [pc, #20]	; (800b350 <RCCEx_PLL2_Config+0x15c>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d0f0      	beq.n	800b326 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b344:	7bfb      	ldrb	r3, [r7, #15]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3710      	adds	r7, #16
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	58024400 	.word	0x58024400
 800b354:	ffff0007 	.word	0xffff0007

0800b358 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b366:	4b53      	ldr	r3, [pc, #332]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b03      	cmp	r3, #3
 800b370:	d101      	bne.n	800b376 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b372:	2301      	movs	r3, #1
 800b374:	e099      	b.n	800b4aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b376:	4b4f      	ldr	r3, [pc, #316]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a4e      	ldr	r2, [pc, #312]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b37c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b380:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b382:	f7f8 fa73 	bl	800386c <HAL_GetTick>
 800b386:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b388:	e008      	b.n	800b39c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b38a:	f7f8 fa6f 	bl	800386c <HAL_GetTick>
 800b38e:	4602      	mov	r2, r0
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	1ad3      	subs	r3, r2, r3
 800b394:	2b02      	cmp	r3, #2
 800b396:	d901      	bls.n	800b39c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b398:	2303      	movs	r3, #3
 800b39a:	e086      	b.n	800b4aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b39c:	4b45      	ldr	r3, [pc, #276]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1f0      	bne.n	800b38a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b3a8:	4b42      	ldr	r3, [pc, #264]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	051b      	lsls	r3, r3, #20
 800b3b6:	493f      	ldr	r1, [pc, #252]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	628b      	str	r3, [r1, #40]	; 0x28
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	3b01      	subs	r3, #1
 800b3c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	025b      	lsls	r3, r3, #9
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	041b      	lsls	r3, r3, #16
 800b3da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	061b      	lsls	r3, r3, #24
 800b3e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b3ec:	4931      	ldr	r1, [pc, #196]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3f2:	4b30      	ldr	r3, [pc, #192]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b3f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	695b      	ldr	r3, [r3, #20]
 800b3fe:	492d      	ldr	r1, [pc, #180]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b400:	4313      	orrs	r3, r2
 800b402:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b404:	4b2b      	ldr	r3, [pc, #172]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b408:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	4928      	ldr	r1, [pc, #160]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b412:	4313      	orrs	r3, r2
 800b414:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b416:	4b27      	ldr	r3, [pc, #156]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	4a26      	ldr	r2, [pc, #152]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b41c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b420:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b422:	4b24      	ldr	r3, [pc, #144]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b426:	4b24      	ldr	r3, [pc, #144]	; (800b4b8 <RCCEx_PLL3_Config+0x160>)
 800b428:	4013      	ands	r3, r2
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	69d2      	ldr	r2, [r2, #28]
 800b42e:	00d2      	lsls	r2, r2, #3
 800b430:	4920      	ldr	r1, [pc, #128]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b432:	4313      	orrs	r3, r2
 800b434:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b436:	4b1f      	ldr	r3, [pc, #124]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43a:	4a1e      	ldr	r2, [pc, #120]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b43c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d106      	bne.n	800b456 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b448:	4b1a      	ldr	r3, [pc, #104]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44c:	4a19      	ldr	r2, [pc, #100]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b44e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b452:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b454:	e00f      	b.n	800b476 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d106      	bne.n	800b46a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b45c:	4b15      	ldr	r3, [pc, #84]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b460:	4a14      	ldr	r2, [pc, #80]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b462:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b466:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b468:	e005      	b.n	800b476 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b46a:	4b12      	ldr	r3, [pc, #72]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b46e:	4a11      	ldr	r2, [pc, #68]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b470:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b474:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b476:	4b0f      	ldr	r3, [pc, #60]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a0e      	ldr	r2, [pc, #56]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b47c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b482:	f7f8 f9f3 	bl	800386c <HAL_GetTick>
 800b486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b488:	e008      	b.n	800b49c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b48a:	f7f8 f9ef 	bl	800386c <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b02      	cmp	r3, #2
 800b496:	d901      	bls.n	800b49c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e006      	b.n	800b4aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b49c:	4b05      	ldr	r3, [pc, #20]	; (800b4b4 <RCCEx_PLL3_Config+0x15c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d0f0      	beq.n	800b48a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	58024400 	.word	0x58024400
 800b4b8:	ffff0007 	.word	0xffff0007

0800b4bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d101      	bne.n	800b4ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e0f1      	b.n	800b6b2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a78      	ldr	r2, [pc, #480]	; (800b6bc <HAL_SPI_Init+0x200>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d00f      	beq.n	800b4fe <HAL_SPI_Init+0x42>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a77      	ldr	r2, [pc, #476]	; (800b6c0 <HAL_SPI_Init+0x204>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d00a      	beq.n	800b4fe <HAL_SPI_Init+0x42>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a75      	ldr	r2, [pc, #468]	; (800b6c4 <HAL_SPI_Init+0x208>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d005      	beq.n	800b4fe <HAL_SPI_Init+0x42>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	68db      	ldr	r3, [r3, #12]
 800b4f6:	2b0f      	cmp	r3, #15
 800b4f8:	d901      	bls.n	800b4fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	e0d9      	b.n	800b6b2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f001 f880 	bl	800c604 <SPI_GetPacketSize>
 800b504:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a6c      	ldr	r2, [pc, #432]	; (800b6bc <HAL_SPI_Init+0x200>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d00c      	beq.n	800b52a <HAL_SPI_Init+0x6e>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a6a      	ldr	r2, [pc, #424]	; (800b6c0 <HAL_SPI_Init+0x204>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d007      	beq.n	800b52a <HAL_SPI_Init+0x6e>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a69      	ldr	r2, [pc, #420]	; (800b6c4 <HAL_SPI_Init+0x208>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d002      	beq.n	800b52a <HAL_SPI_Init+0x6e>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b08      	cmp	r3, #8
 800b528:	d811      	bhi.n	800b54e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b52e:	4a63      	ldr	r2, [pc, #396]	; (800b6bc <HAL_SPI_Init+0x200>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d009      	beq.n	800b548 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a61      	ldr	r2, [pc, #388]	; (800b6c0 <HAL_SPI_Init+0x204>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d004      	beq.n	800b548 <HAL_SPI_Init+0x8c>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a60      	ldr	r2, [pc, #384]	; (800b6c4 <HAL_SPI_Init+0x208>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d104      	bne.n	800b552 <HAL_SPI_Init+0x96>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b10      	cmp	r3, #16
 800b54c:	d901      	bls.n	800b552 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e0af      	b.n	800b6b2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7f6 fc76 	bl	8001e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 0201 	bic.w	r2, r2, #1
 800b582:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b58e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	699b      	ldr	r3, [r3, #24]
 800b594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b598:	d119      	bne.n	800b5ce <HAL_SPI_Init+0x112>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5a2:	d103      	bne.n	800b5ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d008      	beq.n	800b5be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10c      	bne.n	800b5ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b5b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5bc:	d107      	bne.n	800b5ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b5cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	69da      	ldr	r2, [r3, #28]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d6:	431a      	orrs	r2, r3
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	431a      	orrs	r2, r3
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e0:	ea42 0103 	orr.w	r1, r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68da      	ldr	r2, [r3, #12]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	430a      	orrs	r2, r1
 800b5ee:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f8:	431a      	orrs	r2, r3
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fe:	431a      	orrs	r2, r3
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	431a      	orrs	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	431a      	orrs	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	695b      	ldr	r3, [r3, #20]
 800b610:	431a      	orrs	r2, r3
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a1b      	ldr	r3, [r3, #32]
 800b616:	431a      	orrs	r2, r3
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	431a      	orrs	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b622:	431a      	orrs	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	431a      	orrs	r2, r3
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b62e:	ea42 0103 	orr.w	r1, r2, r3
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d113      	bne.n	800b66e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b658:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	689b      	ldr	r3, [r3, #8]
 800b660:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b66c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f022 0201 	bic.w	r2, r2, #1
 800b67c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	430a      	orrs	r2, r1
 800b69e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b6b0:	2300      	movs	r3, #0
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	40013000 	.word	0x40013000
 800b6c0:	40003800 	.word	0x40003800
 800b6c4:	40003c00 	.word	0x40003c00

0800b6c8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b08a      	sub	sp, #40	; 0x28
 800b6cc:	af02      	add	r7, sp, #8
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	603b      	str	r3, [r7, #0]
 800b6d4:	4613      	mov	r3, r2
 800b6d6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3320      	adds	r3, #32
 800b6de:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d101      	bne.n	800b6f2 <HAL_SPI_Transmit+0x2a>
 800b6ee:	2302      	movs	r3, #2
 800b6f0:	e1d7      	b.n	800baa2 <HAL_SPI_Transmit+0x3da>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6fa:	f7f8 f8b7 	bl	800386c <HAL_GetTick>
 800b6fe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d007      	beq.n	800b71c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800b70c:	2302      	movs	r3, #2
 800b70e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b718:	7efb      	ldrb	r3, [r7, #27]
 800b71a:	e1c2      	b.n	800baa2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <HAL_SPI_Transmit+0x60>
 800b722:	88fb      	ldrh	r3, [r7, #6]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d107      	bne.n	800b738 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800b734:	7efb      	ldrb	r3, [r7, #27]
 800b736:	e1b4      	b.n	800baa2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2203      	movs	r2, #3
 800b73c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	88fa      	ldrh	r2, [r7, #6]
 800b752:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	88fa      	ldrh	r2, [r7, #6]
 800b75a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2200      	movs	r2, #0
 800b762:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	2200      	movs	r2, #0
 800b768:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2200      	movs	r2, #0
 800b778:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800b788:	d107      	bne.n	800b79a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b798:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	4b96      	ldr	r3, [pc, #600]	; (800b9fc <HAL_SPI_Transmit+0x334>)
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	88f9      	ldrh	r1, [r7, #6]
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	6812      	ldr	r2, [r2, #0]
 800b7aa:	430b      	orrs	r3, r1
 800b7ac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f042 0201 	orr.w	r2, r2, #1
 800b7bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b7c6:	d107      	bne.n	800b7d8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	2b0f      	cmp	r3, #15
 800b7de:	d947      	bls.n	800b870 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b7e0:	e03f      	b.n	800b862 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	f003 0302 	and.w	r3, r3, #2
 800b7ec:	2b02      	cmp	r3, #2
 800b7ee:	d114      	bne.n	800b81a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6812      	ldr	r2, [r2, #0]
 800b7fa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b800:	1d1a      	adds	r2, r3, #4
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	3b01      	subs	r3, #1
 800b810:	b29a      	uxth	r2, r3
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b818:	e023      	b.n	800b862 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b81a:	f7f8 f827 	bl	800386c <HAL_GetTick>
 800b81e:	4602      	mov	r2, r0
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	429a      	cmp	r2, r3
 800b828:	d803      	bhi.n	800b832 <HAL_SPI_Transmit+0x16a>
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b830:	d102      	bne.n	800b838 <HAL_SPI_Transmit+0x170>
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d114      	bne.n	800b862 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 fe15 	bl	800c468 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b84c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2201      	movs	r2, #1
 800b85a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e11f      	b.n	800baa2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b868:	b29b      	uxth	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1b9      	bne.n	800b7e2 <HAL_SPI_Transmit+0x11a>
 800b86e:	e0f2      	b.n	800ba56 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	68db      	ldr	r3, [r3, #12]
 800b874:	2b07      	cmp	r3, #7
 800b876:	f240 80e7 	bls.w	800ba48 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b87a:	e05d      	b.n	800b938 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	f003 0302 	and.w	r3, r3, #2
 800b886:	2b02      	cmp	r3, #2
 800b888:	d132      	bne.n	800b8f0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b890:	b29b      	uxth	r3, r3
 800b892:	2b01      	cmp	r3, #1
 800b894:	d918      	bls.n	800b8c8 <HAL_SPI_Transmit+0x200>
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d014      	beq.n	800b8c8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	6812      	ldr	r2, [r2, #0]
 800b8a8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ae:	1d1a      	adds	r2, r3, #4
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	3b02      	subs	r3, #2
 800b8be:	b29a      	uxth	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b8c6:	e037      	b.n	800b938 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8cc:	881a      	ldrh	r2, [r3, #0]
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8d6:	1c9a      	adds	r2, r3, #2
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b8ee:	e023      	b.n	800b938 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8f0:	f7f7 ffbc 	bl	800386c <HAL_GetTick>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d803      	bhi.n	800b908 <HAL_SPI_Transmit+0x240>
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b906:	d102      	bne.n	800b90e <HAL_SPI_Transmit+0x246>
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d114      	bne.n	800b938 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f000 fdaa 	bl	800c468 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b922:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800b934:	2303      	movs	r3, #3
 800b936:	e0b4      	b.n	800baa2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b93e:	b29b      	uxth	r3, r3
 800b940:	2b00      	cmp	r3, #0
 800b942:	d19b      	bne.n	800b87c <HAL_SPI_Transmit+0x1b4>
 800b944:	e087      	b.n	800ba56 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	695b      	ldr	r3, [r3, #20]
 800b94c:	f003 0302 	and.w	r3, r3, #2
 800b950:	2b02      	cmp	r3, #2
 800b952:	d155      	bne.n	800ba00 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	d918      	bls.n	800b992 <HAL_SPI_Transmit+0x2ca>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b964:	2b40      	cmp	r3, #64	; 0x40
 800b966:	d914      	bls.n	800b992 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6812      	ldr	r2, [r2, #0]
 800b972:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b978:	1d1a      	adds	r2, r3, #4
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b984:	b29b      	uxth	r3, r3
 800b986:	3b04      	subs	r3, #4
 800b988:	b29a      	uxth	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b990:	e05a      	b.n	800ba48 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b998:	b29b      	uxth	r3, r3
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d917      	bls.n	800b9ce <HAL_SPI_Transmit+0x306>
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d013      	beq.n	800b9ce <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9aa:	881a      	ldrh	r2, [r3, #0]
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9b4:	1c9a      	adds	r2, r3, #2
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	3b02      	subs	r3, #2
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b9cc:	e03c      	b.n	800ba48 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	3320      	adds	r3, #32
 800b9d8:	7812      	ldrb	r2, [r2, #0]
 800b9da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9e0:	1c5a      	adds	r2, r3, #1
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800b9f8:	e026      	b.n	800ba48 <HAL_SPI_Transmit+0x380>
 800b9fa:	bf00      	nop
 800b9fc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba00:	f7f7 ff34 	bl	800386c <HAL_GetTick>
 800ba04:	4602      	mov	r2, r0
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d803      	bhi.n	800ba18 <HAL_SPI_Transmit+0x350>
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba16:	d102      	bne.n	800ba1e <HAL_SPI_Transmit+0x356>
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d114      	bne.n	800ba48 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	f000 fd22 	bl	800c468 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e02c      	b.n	800baa2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	f47f af78 	bne.w	800b946 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	9300      	str	r3, [sp, #0]
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2108      	movs	r1, #8
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f000 fda1 	bl	800c5a8 <SPI_WaitOnFlagUntilTimeout>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d007      	beq.n	800ba7c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba72:	f043 0220 	orr.w	r2, r3, #32
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f000 fcf3 	bl	800c468 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2201      	movs	r2, #1
 800ba8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e000      	b.n	800baa2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800baa0:	7efb      	ldrb	r3, [r7, #27]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3720      	adds	r7, #32
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop

0800baac <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b08a      	sub	sp, #40	; 0x28
 800bab0:	af02      	add	r7, sp, #8
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	603b      	str	r3, [r7, #0]
 800bab8:	4613      	mov	r3, r2
 800baba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800babc:	2300      	movs	r3, #0
 800babe:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3330      	adds	r3, #48	; 0x30
 800bac6:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bad0:	d112      	bne.n	800baf8 <HAL_SPI_Receive+0x4c>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d10e      	bne.n	800baf8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2204      	movs	r2, #4
 800bade:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bae2:	88fa      	ldrh	r2, [r7, #6]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	4613      	mov	r3, r2
 800baea:	68ba      	ldr	r2, [r7, #8]
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	68f8      	ldr	r0, [r7, #12]
 800baf0:	f000 f9ce 	bl	800be90 <HAL_SPI_TransmitReceive>
 800baf4:	4603      	mov	r3, r0
 800baf6:	e1c7      	b.n	800be88 <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d101      	bne.n	800bb06 <HAL_SPI_Receive+0x5a>
 800bb02:	2302      	movs	r3, #2
 800bb04:	e1c0      	b.n	800be88 <HAL_SPI_Receive+0x3dc>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bb0e:	f7f7 fead 	bl	800386c <HAL_GetTick>
 800bb12:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d007      	beq.n	800bb30 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800bb20:	2302      	movs	r3, #2
 800bb22:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bb2c:	7ffb      	ldrb	r3, [r7, #31]
 800bb2e:	e1ab      	b.n	800be88 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d002      	beq.n	800bb3c <HAL_SPI_Receive+0x90>
 800bb36:	88fb      	ldrh	r3, [r7, #6]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d107      	bne.n	800bb4c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bb48:	7ffb      	ldrb	r3, [r7, #31]
 800bb4a:	e19d      	b.n	800be88 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2204      	movs	r2, #4
 800bb50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	88fa      	ldrh	r2, [r7, #6]
 800bb66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	88fa      	ldrh	r2, [r7, #6]
 800bb6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2200      	movs	r2, #0
 800bb76:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	689b      	ldr	r3, [r3, #8]
 800bb98:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800bb9c:	d107      	bne.n	800bbae <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bbac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	685a      	ldr	r2, [r3, #4]
 800bbb4:	4b94      	ldr	r3, [pc, #592]	; (800be08 <HAL_SPI_Receive+0x35c>)
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	88f9      	ldrh	r1, [r7, #6]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	6812      	ldr	r2, [r2, #0]
 800bbbe:	430b      	orrs	r3, r1
 800bbc0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f042 0201 	orr.w	r2, r2, #1
 800bbd0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbda:	d107      	bne.n	800bbec <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbea:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	68db      	ldr	r3, [r3, #12]
 800bbf0:	2b0f      	cmp	r3, #15
 800bbf2:	d948      	bls.n	800bc86 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bbf4:	e040      	b.n	800bc78 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	695a      	ldr	r2, [r3, #20]
 800bbfc:	f248 0308 	movw	r3, #32776	; 0x8008
 800bc00:	4013      	ands	r3, r2
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d014      	beq.n	800bc30 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bc10:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc16:	1d1a      	adds	r2, r3, #4
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc22:	b29b      	uxth	r3, r3
 800bc24:	3b01      	subs	r3, #1
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bc2e:	e023      	b.n	800bc78 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc30:	f7f7 fe1c 	bl	800386c <HAL_GetTick>
 800bc34:	4602      	mov	r2, r0
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	1ad3      	subs	r3, r2, r3
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d803      	bhi.n	800bc48 <HAL_SPI_Receive+0x19c>
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc46:	d102      	bne.n	800bc4e <HAL_SPI_Receive+0x1a2>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d114      	bne.n	800bc78 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f000 fc0a 	bl	800c468 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bc74:	2303      	movs	r3, #3
 800bc76:	e107      	b.n	800be88 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1b8      	bne.n	800bbf6 <HAL_SPI_Receive+0x14a>
 800bc84:	e0ed      	b.n	800be62 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	2b07      	cmp	r3, #7
 800bc8c:	f240 80e2 	bls.w	800be54 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800bc90:	e05b      	b.n	800bd4a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	695b      	ldr	r3, [r3, #20]
 800bc98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d030      	beq.n	800bd02 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	695b      	ldr	r3, [r3, #20]
 800bca6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d014      	beq.n	800bcd8 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bcb8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcbe:	1d1a      	adds	r2, r3, #4
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	3b02      	subs	r3, #2
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bcd6:	e038      	b.n	800bd4a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bcdc:	69ba      	ldr	r2, [r7, #24]
 800bcde:	8812      	ldrh	r2, [r2, #0]
 800bce0:	b292      	uxth	r2, r2
 800bce2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bce8:	1c9a      	adds	r2, r3, #2
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd00:	e023      	b.n	800bd4a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd02:	f7f7 fdb3 	bl	800386c <HAL_GetTick>
 800bd06:	4602      	mov	r2, r0
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d803      	bhi.n	800bd1a <HAL_SPI_Receive+0x26e>
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd18:	d102      	bne.n	800bd20 <HAL_SPI_Receive+0x274>
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d114      	bne.n	800bd4a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 fba1 	bl	800c468 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd34:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2201      	movs	r2, #1
 800bd42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800bd46:	2303      	movs	r3, #3
 800bd48:	e09e      	b.n	800be88 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d19d      	bne.n	800bc92 <HAL_SPI_Receive+0x1e6>
 800bd56:	e084      	b.n	800be62 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	695b      	ldr	r3, [r3, #20]
 800bd5e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d052      	beq.n	800be0c <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d014      	beq.n	800bd9e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bd7e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd84:	1d1a      	adds	r2, r3, #4
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	3b04      	subs	r3, #4
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bd9c:	e05a      	b.n	800be54 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	695b      	ldr	r3, [r3, #20]
 800bda4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800bda8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdac:	d914      	bls.n	800bdd8 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	8812      	ldrh	r2, [r2, #0]
 800bdb6:	b292      	uxth	r2, r2
 800bdb8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdbe:	1c9a      	adds	r2, r3, #2
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	3b02      	subs	r3, #2
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800bdd6:	e03d      	b.n	800be54 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bde4:	7812      	ldrb	r2, [r2, #0]
 800bde6:	b2d2      	uxtb	r2, r2
 800bde8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdee:	1c5a      	adds	r2, r3, #1
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	b29a      	uxth	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800be06:	e025      	b.n	800be54 <HAL_SPI_Receive+0x3a8>
 800be08:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be0c:	f7f7 fd2e 	bl	800386c <HAL_GetTick>
 800be10:	4602      	mov	r2, r0
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d803      	bhi.n	800be24 <HAL_SPI_Receive+0x378>
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be22:	d102      	bne.n	800be2a <HAL_SPI_Receive+0x37e>
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d114      	bne.n	800be54 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f000 fb1c 	bl	800c468 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800be50:	2303      	movs	r3, #3
 800be52:	e019      	b.n	800be88 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f47f af7b 	bne.w	800bd58 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800be62:	68f8      	ldr	r0, [r7, #12]
 800be64:	f000 fb00 	bl	800c468 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2200      	movs	r2, #0
 800be6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2201      	movs	r2, #1
 800be74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e000      	b.n	800be88 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800be86:	7ffb      	ldrb	r3, [r7, #31]
}
 800be88:	4618      	mov	r0, r3
 800be8a:	3720      	adds	r7, #32
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b08e      	sub	sp, #56	; 0x38
 800be94:	af02      	add	r7, sp, #8
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	3320      	adds	r3, #32
 800beaa:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3330      	adds	r3, #48	; 0x30
 800beb2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800beba:	2b01      	cmp	r3, #1
 800bebc:	d101      	bne.n	800bec2 <HAL_SPI_TransmitReceive+0x32>
 800bebe:	2302      	movs	r3, #2
 800bec0:	e2ce      	b.n	800c460 <HAL_SPI_TransmitReceive+0x5d0>
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800beca:	f7f7 fccf 	bl	800386c <HAL_GetTick>
 800bece:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800bed0:	887b      	ldrh	r3, [r7, #2]
 800bed2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800bed4:	887b      	ldrh	r3, [r7, #2]
 800bed6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bede:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bee6:	7efb      	ldrb	r3, [r7, #27]
 800bee8:	2b01      	cmp	r3, #1
 800beea:	d014      	beq.n	800bf16 <HAL_SPI_TransmitReceive+0x86>
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bef2:	d106      	bne.n	800bf02 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d102      	bne.n	800bf02 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800befc:	7efb      	ldrb	r3, [r7, #27]
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d009      	beq.n	800bf16 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800bf02:	2302      	movs	r3, #2
 800bf04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf14:	e2a4      	b.n	800c460 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d005      	beq.n	800bf28 <HAL_SPI_TransmitReceive+0x98>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d002      	beq.n	800bf28 <HAL_SPI_TransmitReceive+0x98>
 800bf22:	887b      	ldrh	r3, [r7, #2]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d109      	bne.n	800bf3c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800bf36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf3a:	e291      	b.n	800c460 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	2b04      	cmp	r3, #4
 800bf46:	d003      	beq.n	800bf50 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	2205      	movs	r2, #5
 800bf4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2200      	movs	r2, #0
 800bf54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	887a      	ldrh	r2, [r7, #2]
 800bf62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	887a      	ldrh	r2, [r7, #2]
 800bf6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	887a      	ldrh	r2, [r7, #2]
 800bf78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	887a      	ldrh	r2, [r7, #2]
 800bf80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2200      	movs	r2, #0
 800bf88:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	685a      	ldr	r2, [r3, #4]
 800bf96:	4b9f      	ldr	r3, [pc, #636]	; (800c214 <HAL_SPI_TransmitReceive+0x384>)
 800bf98:	4013      	ands	r3, r2
 800bf9a:	8879      	ldrh	r1, [r7, #2]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	6812      	ldr	r2, [r2, #0]
 800bfa0:	430b      	orrs	r3, r1
 800bfa2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f042 0201 	orr.w	r2, r2, #1
 800bfb2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfbc:	d107      	bne.n	800bfce <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	2b0f      	cmp	r3, #15
 800bfd4:	d970      	bls.n	800c0b8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800bfd6:	e068      	b.n	800c0aa <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	695b      	ldr	r3, [r3, #20]
 800bfde:	f003 0302 	and.w	r3, r3, #2
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d11a      	bne.n	800c01c <HAL_SPI_TransmitReceive+0x18c>
 800bfe6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d017      	beq.n	800c01c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6812      	ldr	r2, [r2, #0]
 800bff6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bffc:	1d1a      	adds	r2, r3, #4
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c008:	b29b      	uxth	r3, r3
 800c00a:	3b01      	subs	r3, #1
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c01a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	695a      	ldr	r2, [r3, #20]
 800c022:	f248 0308 	movw	r3, #32776	; 0x8008
 800c026:	4013      	ands	r3, r2
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d01a      	beq.n	800c062 <HAL_SPI_TransmitReceive+0x1d2>
 800c02c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d017      	beq.n	800c062 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c03a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c03c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c042:	1d1a      	adds	r2, r3, #4
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c04e:	b29b      	uxth	r3, r3
 800c050:	3b01      	subs	r3, #1
 800c052:	b29a      	uxth	r2, r3
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c060:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c062:	f7f7 fc03 	bl	800386c <HAL_GetTick>
 800c066:	4602      	mov	r2, r0
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	1ad3      	subs	r3, r2, r3
 800c06c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c06e:	429a      	cmp	r2, r3
 800c070:	d803      	bhi.n	800c07a <HAL_SPI_TransmitReceive+0x1ea>
 800c072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c078:	d102      	bne.n	800c080 <HAL_SPI_TransmitReceive+0x1f0>
 800c07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d114      	bne.n	800c0aa <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f000 f9f1 	bl	800c468 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2201      	movs	r2, #1
 800c0a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e1da      	b.n	800c460 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c0aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d193      	bne.n	800bfd8 <HAL_SPI_TransmitReceive+0x148>
 800c0b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d190      	bne.n	800bfd8 <HAL_SPI_TransmitReceive+0x148>
 800c0b6:	e1ac      	b.n	800c412 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	2b07      	cmp	r3, #7
 800c0be:	f240 81a0 	bls.w	800c402 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c0c2:	e0a9      	b.n	800c218 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	f003 0302 	and.w	r3, r3, #2
 800c0ce:	2b02      	cmp	r3, #2
 800c0d0:	d139      	bne.n	800c146 <HAL_SPI_TransmitReceive+0x2b6>
 800c0d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d036      	beq.n	800c146 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c0d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d91c      	bls.n	800c118 <HAL_SPI_TransmitReceive+0x288>
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d018      	beq.n	800c118 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6812      	ldr	r2, [r2, #0]
 800c0f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c0f6:	1d1a      	adds	r2, r3, #4
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c102:	b29b      	uxth	r3, r3
 800c104:	3b02      	subs	r3, #2
 800c106:	b29a      	uxth	r2, r3
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c114:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c116:	e016      	b.n	800c146 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c11c:	881a      	ldrh	r2, [r3, #0]
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c126:	1c9a      	adds	r2, r3, #2
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c132:	b29b      	uxth	r3, r3
 800c134:	3b01      	subs	r3, #1
 800c136:	b29a      	uxth	r2, r3
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c144:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	695b      	ldr	r3, [r3, #20]
 800c14c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d03a      	beq.n	800c1ca <HAL_SPI_TransmitReceive+0x33a>
 800c154:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c156:	2b00      	cmp	r3, #0
 800c158:	d037      	beq.n	800c1ca <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	695b      	ldr	r3, [r3, #20]
 800c160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d018      	beq.n	800c19a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c170:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c172:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c178:	1d1a      	adds	r2, r3, #4
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c184:	b29b      	uxth	r3, r3
 800c186:	3b02      	subs	r3, #2
 800c188:	b29a      	uxth	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c196:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c198:	e017      	b.n	800c1ca <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c19e:	6a3a      	ldr	r2, [r7, #32]
 800c1a0:	8812      	ldrh	r2, [r2, #0]
 800c1a2:	b292      	uxth	r2, r2
 800c1a4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1aa:	1c9a      	adds	r2, r3, #2
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1c8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1ca:	f7f7 fb4f 	bl	800386c <HAL_GetTick>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	1ad3      	subs	r3, r2, r3
 800c1d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d803      	bhi.n	800c1e2 <HAL_SPI_TransmitReceive+0x352>
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e0:	d102      	bne.n	800c1e8 <HAL_SPI_TransmitReceive+0x358>
 800c1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d117      	bne.n	800c218 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f000 f93d 	bl	800c468 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2201      	movs	r2, #1
 800c20a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c20e:	2303      	movs	r3, #3
 800c210:	e126      	b.n	800c460 <HAL_SPI_TransmitReceive+0x5d0>
 800c212:	bf00      	nop
 800c214:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c218:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	f47f af52 	bne.w	800c0c4 <HAL_SPI_TransmitReceive+0x234>
 800c220:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c222:	2b00      	cmp	r3, #0
 800c224:	f47f af4e 	bne.w	800c0c4 <HAL_SPI_TransmitReceive+0x234>
 800c228:	e0f3      	b.n	800c412 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	f003 0302 	and.w	r3, r3, #2
 800c234:	2b02      	cmp	r3, #2
 800c236:	d15a      	bne.n	800c2ee <HAL_SPI_TransmitReceive+0x45e>
 800c238:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d057      	beq.n	800c2ee <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c23e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c240:	2b03      	cmp	r3, #3
 800c242:	d91c      	bls.n	800c27e <HAL_SPI_TransmitReceive+0x3ee>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c248:	2b40      	cmp	r3, #64	; 0x40
 800c24a:	d918      	bls.n	800c27e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6812      	ldr	r2, [r2, #0]
 800c256:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c25c:	1d1a      	adds	r2, r3, #4
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c268:	b29b      	uxth	r3, r3
 800c26a:	3b04      	subs	r3, #4
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c27a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c27c:	e037      	b.n	800c2ee <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c27e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c280:	2b01      	cmp	r3, #1
 800c282:	d91b      	bls.n	800c2bc <HAL_SPI_TransmitReceive+0x42c>
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d017      	beq.n	800c2bc <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c290:	881a      	ldrh	r2, [r3, #0]
 800c292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c294:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c29a:	1c9a      	adds	r2, r3, #2
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	3b02      	subs	r3, #2
 800c2aa:	b29a      	uxth	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c2ba:	e018      	b.n	800c2ee <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	3320      	adds	r3, #32
 800c2c6:	7812      	ldrb	r2, [r2, #0]
 800c2c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	b29a      	uxth	r2, r3
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	695b      	ldr	r3, [r3, #20]
 800c2f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d05e      	beq.n	800c3ba <HAL_SPI_TransmitReceive+0x52a>
 800c2fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d05b      	beq.n	800c3ba <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	695b      	ldr	r3, [r3, #20]
 800c308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d018      	beq.n	800c342 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c318:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c31a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c320:	1d1a      	adds	r2, r3, #4
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	3b04      	subs	r3, #4
 800c330:	b29a      	uxth	r2, r3
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c33e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c340:	e03b      	b.n	800c3ba <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	695b      	ldr	r3, [r3, #20]
 800c348:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800c34c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c350:	d918      	bls.n	800c384 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c356:	6a3a      	ldr	r2, [r7, #32]
 800c358:	8812      	ldrh	r2, [r2, #0]
 800c35a:	b292      	uxth	r2, r2
 800c35c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c362:	1c9a      	adds	r2, r3, #2
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c36e:	b29b      	uxth	r3, r3
 800c370:	3b02      	subs	r3, #2
 800c372:	b29a      	uxth	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c380:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c382:	e01a      	b.n	800c3ba <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c390:	7812      	ldrb	r2, [r2, #0]
 800c392:	b2d2      	uxtb	r2, r2
 800c394:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c39a:	1c5a      	adds	r2, r3, #1
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c3b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3ba:	f7f7 fa57 	bl	800386c <HAL_GetTick>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	1ad3      	subs	r3, r2, r3
 800c3c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d803      	bhi.n	800c3d2 <HAL_SPI_TransmitReceive+0x542>
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3d0:	d102      	bne.n	800c3d8 <HAL_SPI_TransmitReceive+0x548>
 800c3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d114      	bne.n	800c402 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 f845 	bl	800c468 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c3fe:	2303      	movs	r3, #3
 800c400:	e02e      	b.n	800c460 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c402:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c404:	2b00      	cmp	r3, #0
 800c406:	f47f af10 	bne.w	800c22a <HAL_SPI_TransmitReceive+0x39a>
 800c40a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f47f af0c 	bne.w	800c22a <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	9300      	str	r3, [sp, #0]
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	2200      	movs	r2, #0
 800c41a:	2108      	movs	r1, #8
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f000 f8c3 	bl	800c5a8 <SPI_WaitOnFlagUntilTimeout>
 800c422:	4603      	mov	r3, r0
 800c424:	2b00      	cmp	r3, #0
 800c426:	d007      	beq.n	800c438 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c42e:	f043 0220 	orr.w	r2, r3, #32
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f000 f815 	bl	800c468 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	2200      	movs	r2, #0
 800c442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2201      	movs	r2, #1
 800c44a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c454:	2b00      	cmp	r3, #0
 800c456:	d001      	beq.n	800c45c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800c458:	2301      	movs	r3, #1
 800c45a:	e001      	b.n	800c460 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800c45c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c460:	4618      	mov	r0, r3
 800c462:	3730      	adds	r7, #48	; 0x30
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c468:	b480      	push	{r7}
 800c46a:	b085      	sub	sp, #20
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	695b      	ldr	r3, [r3, #20]
 800c476:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	699a      	ldr	r2, [r3, #24]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f042 0208 	orr.w	r2, r2, #8
 800c486:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	699a      	ldr	r2, [r3, #24]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f042 0210 	orr.w	r2, r2, #16
 800c496:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f022 0201 	bic.w	r2, r2, #1
 800c4a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	6919      	ldr	r1, [r3, #16]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681a      	ldr	r2, [r3, #0]
 800c4b2:	4b3c      	ldr	r3, [pc, #240]	; (800c5a4 <SPI_CloseTransfer+0x13c>)
 800c4b4:	400b      	ands	r3, r1
 800c4b6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	689a      	ldr	r2, [r3, #8]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c4c6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d014      	beq.n	800c4fe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f003 0320 	and.w	r3, r3, #32
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d00f      	beq.n	800c4fe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	699a      	ldr	r2, [r3, #24]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f042 0220 	orr.w	r2, r2, #32
 800c4fc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b03      	cmp	r3, #3
 800c508:	d014      	beq.n	800c534 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00f      	beq.n	800c534 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c51a:	f043 0204 	orr.w	r2, r3, #4
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	699a      	ldr	r2, [r3, #24]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c532:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d00f      	beq.n	800c55e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c544:	f043 0201 	orr.w	r2, r3, #1
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	699a      	ldr	r2, [r3, #24]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c55c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00f      	beq.n	800c588 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c56e:	f043 0208 	orr.w	r2, r3, #8
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	699a      	ldr	r2, [r3, #24]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c586:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2200      	movs	r2, #0
 800c58c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2200      	movs	r2, #0
 800c594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c598:	bf00      	nop
 800c59a:	3714      	adds	r7, #20
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr
 800c5a4:	fffffc90 	.word	0xfffffc90

0800c5a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	60b9      	str	r1, [r7, #8]
 800c5b2:	603b      	str	r3, [r7, #0]
 800c5b4:	4613      	mov	r3, r2
 800c5b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c5b8:	e010      	b.n	800c5dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c5ba:	f7f7 f957 	bl	800386c <HAL_GetTick>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d803      	bhi.n	800c5d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5d0:	d102      	bne.n	800c5d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d101      	bne.n	800c5dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e00f      	b.n	800c5fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	695a      	ldr	r2, [r3, #20]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	bf0c      	ite	eq
 800c5ec:	2301      	moveq	r3, #1
 800c5ee:	2300      	movne	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d0df      	beq.n	800c5ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c610:	095b      	lsrs	r3, r3, #5
 800c612:	3301      	adds	r3, #1
 800c614:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68db      	ldr	r3, [r3, #12]
 800c61a:	3301      	adds	r3, #1
 800c61c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	3307      	adds	r3, #7
 800c622:	08db      	lsrs	r3, r3, #3
 800c624:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr

0800c63a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b082      	sub	sp, #8
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e049      	b.n	800c6e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d106      	bne.n	800c666 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7f6 fc41 	bl	8002ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2202      	movs	r2, #2
 800c66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	3304      	adds	r3, #4
 800c676:	4619      	mov	r1, r3
 800c678:	4610      	mov	r0, r2
 800c67a:	f000 fef9 	bl	800d470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2201      	movs	r2, #1
 800c682:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2201      	movs	r2, #1
 800c692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2201      	movs	r2, #1
 800c69a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2201      	movs	r2, #1
 800c6b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2201      	movs	r2, #1
 800c6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b085      	sub	sp, #20
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6f6:	b2db      	uxtb	r3, r3
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d001      	beq.n	800c700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c6fc:	2301      	movs	r3, #1
 800c6fe:	e05e      	b.n	800c7be <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2202      	movs	r2, #2
 800c704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68da      	ldr	r2, [r3, #12]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f042 0201 	orr.w	r2, r2, #1
 800c716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a2b      	ldr	r2, [pc, #172]	; (800c7cc <HAL_TIM_Base_Start_IT+0xe4>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d02c      	beq.n	800c77c <HAL_TIM_Base_Start_IT+0x94>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c72a:	d027      	beq.n	800c77c <HAL_TIM_Base_Start_IT+0x94>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a27      	ldr	r2, [pc, #156]	; (800c7d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d022      	beq.n	800c77c <HAL_TIM_Base_Start_IT+0x94>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a26      	ldr	r2, [pc, #152]	; (800c7d4 <HAL_TIM_Base_Start_IT+0xec>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d01d      	beq.n	800c77c <HAL_TIM_Base_Start_IT+0x94>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a24      	ldr	r2, [pc, #144]	; (800c7d8 <HAL_TIM_Base_Start_IT+0xf0>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d018      	beq.n	800c77c <HAL_TIM_Base_Start_IT+0x94>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a23      	ldr	r2, [pc, #140]	; (800c7dc <HAL_TIM_Base_Start_IT+0xf4>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d013      	beq.n	800c77c <HAL_TIM_Base_Start_IT+0x94>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a21      	ldr	r2, [pc, #132]	; (800c7e0 <HAL_TIM_Base_Start_IT+0xf8>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d00e      	beq.n	800c77c <HAL_TIM_Base_Start_IT+0x94>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a20      	ldr	r2, [pc, #128]	; (800c7e4 <HAL_TIM_Base_Start_IT+0xfc>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d009      	beq.n	800c77c <HAL_TIM_Base_Start_IT+0x94>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a1e      	ldr	r2, [pc, #120]	; (800c7e8 <HAL_TIM_Base_Start_IT+0x100>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d004      	beq.n	800c77c <HAL_TIM_Base_Start_IT+0x94>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a1d      	ldr	r2, [pc, #116]	; (800c7ec <HAL_TIM_Base_Start_IT+0x104>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d115      	bne.n	800c7a8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689a      	ldr	r2, [r3, #8]
 800c782:	4b1b      	ldr	r3, [pc, #108]	; (800c7f0 <HAL_TIM_Base_Start_IT+0x108>)
 800c784:	4013      	ands	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2b06      	cmp	r3, #6
 800c78c:	d015      	beq.n	800c7ba <HAL_TIM_Base_Start_IT+0xd2>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c794:	d011      	beq.n	800c7ba <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f042 0201 	orr.w	r2, r2, #1
 800c7a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7a6:	e008      	b.n	800c7ba <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	681a      	ldr	r2, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f042 0201 	orr.w	r2, r2, #1
 800c7b6:	601a      	str	r2, [r3, #0]
 800c7b8:	e000      	b.n	800c7bc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c7ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3714      	adds	r7, #20
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr
 800c7ca:	bf00      	nop
 800c7cc:	40010000 	.word	0x40010000
 800c7d0:	40000400 	.word	0x40000400
 800c7d4:	40000800 	.word	0x40000800
 800c7d8:	40000c00 	.word	0x40000c00
 800c7dc:	40010400 	.word	0x40010400
 800c7e0:	40001800 	.word	0x40001800
 800c7e4:	40014000 	.word	0x40014000
 800c7e8:	4000e000 	.word	0x4000e000
 800c7ec:	4000e400 	.word	0x4000e400
 800c7f0:	00010007 	.word	0x00010007

0800c7f4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800c802:	2301      	movs	r3, #1
 800c804:	e049      	b.n	800c89a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d106      	bne.n	800c820 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7f6 fa0a 	bl	8002c34 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2202      	movs	r2, #2
 800c824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681a      	ldr	r2, [r3, #0]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	3304      	adds	r3, #4
 800c830:	4619      	mov	r1, r3
 800c832:	4610      	mov	r0, r2
 800c834:	f000 fe1c 	bl	800d470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2201      	movs	r2, #1
 800c84c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2201      	movs	r2, #1
 800c87c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2201      	movs	r2, #1
 800c884:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	2201      	movs	r2, #1
 800c88c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2201      	movs	r2, #1
 800c894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c8a2:	b580      	push	{r7, lr}
 800c8a4:	b082      	sub	sp, #8
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d101      	bne.n	800c8b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e049      	b.n	800c948 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d106      	bne.n	800c8ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f7f6 fbff 	bl	80030cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2202      	movs	r2, #2
 800c8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	3304      	adds	r3, #4
 800c8de:	4619      	mov	r1, r3
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	f000 fdc5 	bl	800d470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2201      	movs	r2, #1
 800c902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2201      	movs	r2, #1
 800c90a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2201      	movs	r2, #1
 800c912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2201      	movs	r2, #1
 800c91a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2201      	movs	r2, #1
 800c92a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2201      	movs	r2, #1
 800c932:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2201      	movs	r2, #1
 800c93a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2201      	movs	r2, #1
 800c942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c946:	2300      	movs	r3, #0
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3708      	adds	r7, #8
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d109      	bne.n	800c974 <HAL_TIM_PWM_Start+0x24>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b01      	cmp	r3, #1
 800c96a:	bf14      	ite	ne
 800c96c:	2301      	movne	r3, #1
 800c96e:	2300      	moveq	r3, #0
 800c970:	b2db      	uxtb	r3, r3
 800c972:	e03c      	b.n	800c9ee <HAL_TIM_PWM_Start+0x9e>
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	2b04      	cmp	r3, #4
 800c978:	d109      	bne.n	800c98e <HAL_TIM_PWM_Start+0x3e>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c980:	b2db      	uxtb	r3, r3
 800c982:	2b01      	cmp	r3, #1
 800c984:	bf14      	ite	ne
 800c986:	2301      	movne	r3, #1
 800c988:	2300      	moveq	r3, #0
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	e02f      	b.n	800c9ee <HAL_TIM_PWM_Start+0x9e>
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2b08      	cmp	r3, #8
 800c992:	d109      	bne.n	800c9a8 <HAL_TIM_PWM_Start+0x58>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	bf14      	ite	ne
 800c9a0:	2301      	movne	r3, #1
 800c9a2:	2300      	moveq	r3, #0
 800c9a4:	b2db      	uxtb	r3, r3
 800c9a6:	e022      	b.n	800c9ee <HAL_TIM_PWM_Start+0x9e>
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	2b0c      	cmp	r3, #12
 800c9ac:	d109      	bne.n	800c9c2 <HAL_TIM_PWM_Start+0x72>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	bf14      	ite	ne
 800c9ba:	2301      	movne	r3, #1
 800c9bc:	2300      	moveq	r3, #0
 800c9be:	b2db      	uxtb	r3, r3
 800c9c0:	e015      	b.n	800c9ee <HAL_TIM_PWM_Start+0x9e>
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	2b10      	cmp	r3, #16
 800c9c6:	d109      	bne.n	800c9dc <HAL_TIM_PWM_Start+0x8c>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	bf14      	ite	ne
 800c9d4:	2301      	movne	r3, #1
 800c9d6:	2300      	moveq	r3, #0
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	e008      	b.n	800c9ee <HAL_TIM_PWM_Start+0x9e>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	bf14      	ite	ne
 800c9e8:	2301      	movne	r3, #1
 800c9ea:	2300      	moveq	r3, #0
 800c9ec:	b2db      	uxtb	r3, r3
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e0ab      	b.n	800cb4e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d104      	bne.n	800ca06 <HAL_TIM_PWM_Start+0xb6>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2202      	movs	r2, #2
 800ca00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ca04:	e023      	b.n	800ca4e <HAL_TIM_PWM_Start+0xfe>
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	d104      	bne.n	800ca16 <HAL_TIM_PWM_Start+0xc6>
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2202      	movs	r2, #2
 800ca10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ca14:	e01b      	b.n	800ca4e <HAL_TIM_PWM_Start+0xfe>
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	2b08      	cmp	r3, #8
 800ca1a:	d104      	bne.n	800ca26 <HAL_TIM_PWM_Start+0xd6>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2202      	movs	r2, #2
 800ca20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ca24:	e013      	b.n	800ca4e <HAL_TIM_PWM_Start+0xfe>
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	2b0c      	cmp	r3, #12
 800ca2a:	d104      	bne.n	800ca36 <HAL_TIM_PWM_Start+0xe6>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2202      	movs	r2, #2
 800ca30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ca34:	e00b      	b.n	800ca4e <HAL_TIM_PWM_Start+0xfe>
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	2b10      	cmp	r3, #16
 800ca3a:	d104      	bne.n	800ca46 <HAL_TIM_PWM_Start+0xf6>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2202      	movs	r2, #2
 800ca40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ca44:	e003      	b.n	800ca4e <HAL_TIM_PWM_Start+0xfe>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2202      	movs	r2, #2
 800ca4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	2201      	movs	r2, #1
 800ca54:	6839      	ldr	r1, [r7, #0]
 800ca56:	4618      	mov	r0, r3
 800ca58:	f001 f924 	bl	800dca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	4a3d      	ldr	r2, [pc, #244]	; (800cb58 <HAL_TIM_PWM_Start+0x208>)
 800ca62:	4293      	cmp	r3, r2
 800ca64:	d013      	beq.n	800ca8e <HAL_TIM_PWM_Start+0x13e>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a3c      	ldr	r2, [pc, #240]	; (800cb5c <HAL_TIM_PWM_Start+0x20c>)
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d00e      	beq.n	800ca8e <HAL_TIM_PWM_Start+0x13e>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a3a      	ldr	r2, [pc, #232]	; (800cb60 <HAL_TIM_PWM_Start+0x210>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d009      	beq.n	800ca8e <HAL_TIM_PWM_Start+0x13e>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a39      	ldr	r2, [pc, #228]	; (800cb64 <HAL_TIM_PWM_Start+0x214>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d004      	beq.n	800ca8e <HAL_TIM_PWM_Start+0x13e>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	4a37      	ldr	r2, [pc, #220]	; (800cb68 <HAL_TIM_PWM_Start+0x218>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d101      	bne.n	800ca92 <HAL_TIM_PWM_Start+0x142>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e000      	b.n	800ca94 <HAL_TIM_PWM_Start+0x144>
 800ca92:	2300      	movs	r3, #0
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d007      	beq.n	800caa8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800caa6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a2a      	ldr	r2, [pc, #168]	; (800cb58 <HAL_TIM_PWM_Start+0x208>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d02c      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1bc>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caba:	d027      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1bc>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a2a      	ldr	r2, [pc, #168]	; (800cb6c <HAL_TIM_PWM_Start+0x21c>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d022      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1bc>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	4a29      	ldr	r2, [pc, #164]	; (800cb70 <HAL_TIM_PWM_Start+0x220>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d01d      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1bc>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a27      	ldr	r2, [pc, #156]	; (800cb74 <HAL_TIM_PWM_Start+0x224>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d018      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1bc>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4a1f      	ldr	r2, [pc, #124]	; (800cb5c <HAL_TIM_PWM_Start+0x20c>)
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d013      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1bc>
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a23      	ldr	r2, [pc, #140]	; (800cb78 <HAL_TIM_PWM_Start+0x228>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d00e      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1bc>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a1b      	ldr	r2, [pc, #108]	; (800cb60 <HAL_TIM_PWM_Start+0x210>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d009      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1bc>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a1f      	ldr	r2, [pc, #124]	; (800cb7c <HAL_TIM_PWM_Start+0x22c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d004      	beq.n	800cb0c <HAL_TIM_PWM_Start+0x1bc>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a1e      	ldr	r2, [pc, #120]	; (800cb80 <HAL_TIM_PWM_Start+0x230>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d115      	bne.n	800cb38 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	689a      	ldr	r2, [r3, #8]
 800cb12:	4b1c      	ldr	r3, [pc, #112]	; (800cb84 <HAL_TIM_PWM_Start+0x234>)
 800cb14:	4013      	ands	r3, r2
 800cb16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2b06      	cmp	r3, #6
 800cb1c:	d015      	beq.n	800cb4a <HAL_TIM_PWM_Start+0x1fa>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb24:	d011      	beq.n	800cb4a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f042 0201 	orr.w	r2, r2, #1
 800cb34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb36:	e008      	b.n	800cb4a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	681a      	ldr	r2, [r3, #0]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f042 0201 	orr.w	r2, r2, #1
 800cb46:	601a      	str	r2, [r3, #0]
 800cb48:	e000      	b.n	800cb4c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	40010000 	.word	0x40010000
 800cb5c:	40010400 	.word	0x40010400
 800cb60:	40014000 	.word	0x40014000
 800cb64:	40014400 	.word	0x40014400
 800cb68:	40014800 	.word	0x40014800
 800cb6c:	40000400 	.word	0x40000400
 800cb70:	40000800 	.word	0x40000800
 800cb74:	40000c00 	.word	0x40000c00
 800cb78:	40001800 	.word	0x40001800
 800cb7c:	4000e000 	.word	0x4000e000
 800cb80:	4000e400 	.word	0x4000e400
 800cb84:	00010007 	.word	0x00010007

0800cb88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
 800cb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e08f      	b.n	800ccbc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7f6 f889 	bl	8002cc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2202      	movs	r2, #2
 800cbba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	6899      	ldr	r1, [r3, #8]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	4b3e      	ldr	r3, [pc, #248]	; (800ccc4 <HAL_TIM_Encoder_Init+0x13c>)
 800cbca:	400b      	ands	r3, r1
 800cbcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4610      	mov	r0, r2
 800cbda:	f000 fc49 	bl	800d470 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	689b      	ldr	r3, [r3, #8]
 800cbe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	699b      	ldr	r3, [r3, #24]
 800cbec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	6a1b      	ldr	r3, [r3, #32]
 800cbf4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	697a      	ldr	r2, [r7, #20]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cc00:	693a      	ldr	r2, [r7, #16]
 800cc02:	4b31      	ldr	r3, [pc, #196]	; (800ccc8 <HAL_TIM_Encoder_Init+0x140>)
 800cc04:	4013      	ands	r3, r2
 800cc06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	689a      	ldr	r2, [r3, #8]
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	699b      	ldr	r3, [r3, #24]
 800cc10:	021b      	lsls	r3, r3, #8
 800cc12:	4313      	orrs	r3, r2
 800cc14:	693a      	ldr	r2, [r7, #16]
 800cc16:	4313      	orrs	r3, r2
 800cc18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cc1a:	693a      	ldr	r2, [r7, #16]
 800cc1c:	4b2b      	ldr	r3, [pc, #172]	; (800cccc <HAL_TIM_Encoder_Init+0x144>)
 800cc1e:	4013      	ands	r3, r2
 800cc20:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cc22:	693a      	ldr	r2, [r7, #16]
 800cc24:	4b2a      	ldr	r3, [pc, #168]	; (800ccd0 <HAL_TIM_Encoder_Init+0x148>)
 800cc26:	4013      	ands	r3, r2
 800cc28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	68da      	ldr	r2, [r3, #12]
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	69db      	ldr	r3, [r3, #28]
 800cc32:	021b      	lsls	r3, r3, #8
 800cc34:	4313      	orrs	r3, r2
 800cc36:	693a      	ldr	r2, [r7, #16]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	011a      	lsls	r2, r3, #4
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	031b      	lsls	r3, r3, #12
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	693a      	ldr	r2, [r7, #16]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cc56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cc5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	685a      	ldr	r2, [r3, #4]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	695b      	ldr	r3, [r3, #20]
 800cc68:	011b      	lsls	r3, r3, #4
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	68fa      	ldr	r2, [r7, #12]
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	68fa      	ldr	r2, [r7, #12]
 800cc88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2201      	movs	r2, #1
 800ccae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3718      	adds	r7, #24
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	fffebff8 	.word	0xfffebff8
 800ccc8:	fffffcfc 	.word	0xfffffcfc
 800cccc:	fffff3f3 	.word	0xfffff3f3
 800ccd0:	ffff0f0f 	.word	0xffff0f0f

0800ccd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	691b      	ldr	r3, [r3, #16]
 800cce2:	f003 0302 	and.w	r3, r3, #2
 800cce6:	2b02      	cmp	r3, #2
 800cce8:	d122      	bne.n	800cd30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	f003 0302 	and.w	r3, r3, #2
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d11b      	bne.n	800cd30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f06f 0202 	mvn.w	r2, #2
 800cd00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2201      	movs	r2, #1
 800cd06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	699b      	ldr	r3, [r3, #24]
 800cd0e:	f003 0303 	and.w	r3, r3, #3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d003      	beq.n	800cd1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fb8c 	bl	800d434 <HAL_TIM_IC_CaptureCallback>
 800cd1c:	e005      	b.n	800cd2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fb7e 	bl	800d420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 fb8f 	bl	800d448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b04      	cmp	r3, #4
 800cd3c:	d122      	bne.n	800cd84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	f003 0304 	and.w	r3, r3, #4
 800cd48:	2b04      	cmp	r3, #4
 800cd4a:	d11b      	bne.n	800cd84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f06f 0204 	mvn.w	r2, #4
 800cd54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2202      	movs	r2, #2
 800cd5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	699b      	ldr	r3, [r3, #24]
 800cd62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d003      	beq.n	800cd72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fb62 	bl	800d434 <HAL_TIM_IC_CaptureCallback>
 800cd70:	e005      	b.n	800cd7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fb54 	bl	800d420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fb65 	bl	800d448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2200      	movs	r2, #0
 800cd82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	f003 0308 	and.w	r3, r3, #8
 800cd8e:	2b08      	cmp	r3, #8
 800cd90:	d122      	bne.n	800cdd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68db      	ldr	r3, [r3, #12]
 800cd98:	f003 0308 	and.w	r3, r3, #8
 800cd9c:	2b08      	cmp	r3, #8
 800cd9e:	d11b      	bne.n	800cdd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f06f 0208 	mvn.w	r2, #8
 800cda8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2204      	movs	r2, #4
 800cdae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	f003 0303 	and.w	r3, r3, #3
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d003      	beq.n	800cdc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fb38 	bl	800d434 <HAL_TIM_IC_CaptureCallback>
 800cdc4:	e005      	b.n	800cdd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	f000 fb2a 	bl	800d420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f000 fb3b 	bl	800d448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	691b      	ldr	r3, [r3, #16]
 800cdde:	f003 0310 	and.w	r3, r3, #16
 800cde2:	2b10      	cmp	r3, #16
 800cde4:	d122      	bne.n	800ce2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	f003 0310 	and.w	r3, r3, #16
 800cdf0:	2b10      	cmp	r3, #16
 800cdf2:	d11b      	bne.n	800ce2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	f06f 0210 	mvn.w	r2, #16
 800cdfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2208      	movs	r2, #8
 800ce02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	69db      	ldr	r3, [r3, #28]
 800ce0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d003      	beq.n	800ce1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fb0e 	bl	800d434 <HAL_TIM_IC_CaptureCallback>
 800ce18:	e005      	b.n	800ce26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 fb00 	bl	800d420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fb11 	bl	800d448 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	2b01      	cmp	r3, #1
 800ce38:	d10e      	bne.n	800ce58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d107      	bne.n	800ce58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f06f 0201 	mvn.w	r2, #1
 800ce50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f7f4 fec8 	bl	8001be8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	691b      	ldr	r3, [r3, #16]
 800ce5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce62:	2b80      	cmp	r3, #128	; 0x80
 800ce64:	d10e      	bne.n	800ce84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce70:	2b80      	cmp	r3, #128	; 0x80
 800ce72:	d107      	bne.n	800ce84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ce7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 f87c 	bl	800df7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	691b      	ldr	r3, [r3, #16]
 800ce8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce92:	d10e      	bne.n	800ceb2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce9e:	2b80      	cmp	r3, #128	; 0x80
 800cea0:	d107      	bne.n	800ceb2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ceaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 f86f 	bl	800df90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cebc:	2b40      	cmp	r3, #64	; 0x40
 800cebe:	d10e      	bne.n	800cede <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ceca:	2b40      	cmp	r3, #64	; 0x40
 800cecc:	d107      	bne.n	800cede <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ced6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 fabf 	bl	800d45c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	f003 0320 	and.w	r3, r3, #32
 800cee8:	2b20      	cmp	r3, #32
 800ceea:	d10e      	bne.n	800cf0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	68db      	ldr	r3, [r3, #12]
 800cef2:	f003 0320 	and.w	r3, r3, #32
 800cef6:	2b20      	cmp	r3, #32
 800cef8:	d107      	bne.n	800cf0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f06f 0220 	mvn.w	r2, #32
 800cf02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f001 f82f 	bl	800df68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cf0a:	bf00      	nop
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
	...

0800cf14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b086      	sub	sp, #24
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	60f8      	str	r0, [r7, #12]
 800cf1c:	60b9      	str	r1, [r7, #8]
 800cf1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d101      	bne.n	800cf32 <HAL_TIM_OC_ConfigChannel+0x1e>
 800cf2e:	2302      	movs	r3, #2
 800cf30:	e066      	b.n	800d000 <HAL_TIM_OC_ConfigChannel+0xec>
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b14      	cmp	r3, #20
 800cf3e:	d857      	bhi.n	800cff0 <HAL_TIM_OC_ConfigChannel+0xdc>
 800cf40:	a201      	add	r2, pc, #4	; (adr r2, 800cf48 <HAL_TIM_OC_ConfigChannel+0x34>)
 800cf42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf46:	bf00      	nop
 800cf48:	0800cf9d 	.word	0x0800cf9d
 800cf4c:	0800cff1 	.word	0x0800cff1
 800cf50:	0800cff1 	.word	0x0800cff1
 800cf54:	0800cff1 	.word	0x0800cff1
 800cf58:	0800cfab 	.word	0x0800cfab
 800cf5c:	0800cff1 	.word	0x0800cff1
 800cf60:	0800cff1 	.word	0x0800cff1
 800cf64:	0800cff1 	.word	0x0800cff1
 800cf68:	0800cfb9 	.word	0x0800cfb9
 800cf6c:	0800cff1 	.word	0x0800cff1
 800cf70:	0800cff1 	.word	0x0800cff1
 800cf74:	0800cff1 	.word	0x0800cff1
 800cf78:	0800cfc7 	.word	0x0800cfc7
 800cf7c:	0800cff1 	.word	0x0800cff1
 800cf80:	0800cff1 	.word	0x0800cff1
 800cf84:	0800cff1 	.word	0x0800cff1
 800cf88:	0800cfd5 	.word	0x0800cfd5
 800cf8c:	0800cff1 	.word	0x0800cff1
 800cf90:	0800cff1 	.word	0x0800cff1
 800cf94:	0800cff1 	.word	0x0800cff1
 800cf98:	0800cfe3 	.word	0x0800cfe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	68b9      	ldr	r1, [r7, #8]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f000 fb0a 	bl	800d5bc <TIM_OC1_SetConfig>
      break;
 800cfa8:	e025      	b.n	800cff6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68b9      	ldr	r1, [r7, #8]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 fb93 	bl	800d6dc <TIM_OC2_SetConfig>
      break;
 800cfb6:	e01e      	b.n	800cff6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	68b9      	ldr	r1, [r7, #8]
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 fc16 	bl	800d7f0 <TIM_OC3_SetConfig>
      break;
 800cfc4:	e017      	b.n	800cff6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	68b9      	ldr	r1, [r7, #8]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 fc97 	bl	800d900 <TIM_OC4_SetConfig>
      break;
 800cfd2:	e010      	b.n	800cff6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	68b9      	ldr	r1, [r7, #8]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 fcfa 	bl	800d9d4 <TIM_OC5_SetConfig>
      break;
 800cfe0:	e009      	b.n	800cff6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	68b9      	ldr	r1, [r7, #8]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f000 fd57 	bl	800da9c <TIM_OC6_SetConfig>
      break;
 800cfee:	e002      	b.n	800cff6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	75fb      	strb	r3, [r7, #23]
      break;
 800cff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2200      	movs	r2, #0
 800cffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3718      	adds	r7, #24
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b086      	sub	sp, #24
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d101      	bne.n	800d026 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d022:	2302      	movs	r3, #2
 800d024:	e0ff      	b.n	800d226 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2201      	movs	r2, #1
 800d02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2b14      	cmp	r3, #20
 800d032:	f200 80f0 	bhi.w	800d216 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d036:	a201      	add	r2, pc, #4	; (adr r2, 800d03c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03c:	0800d091 	.word	0x0800d091
 800d040:	0800d217 	.word	0x0800d217
 800d044:	0800d217 	.word	0x0800d217
 800d048:	0800d217 	.word	0x0800d217
 800d04c:	0800d0d1 	.word	0x0800d0d1
 800d050:	0800d217 	.word	0x0800d217
 800d054:	0800d217 	.word	0x0800d217
 800d058:	0800d217 	.word	0x0800d217
 800d05c:	0800d113 	.word	0x0800d113
 800d060:	0800d217 	.word	0x0800d217
 800d064:	0800d217 	.word	0x0800d217
 800d068:	0800d217 	.word	0x0800d217
 800d06c:	0800d153 	.word	0x0800d153
 800d070:	0800d217 	.word	0x0800d217
 800d074:	0800d217 	.word	0x0800d217
 800d078:	0800d217 	.word	0x0800d217
 800d07c:	0800d195 	.word	0x0800d195
 800d080:	0800d217 	.word	0x0800d217
 800d084:	0800d217 	.word	0x0800d217
 800d088:	0800d217 	.word	0x0800d217
 800d08c:	0800d1d5 	.word	0x0800d1d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68b9      	ldr	r1, [r7, #8]
 800d096:	4618      	mov	r0, r3
 800d098:	f000 fa90 	bl	800d5bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	699a      	ldr	r2, [r3, #24]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f042 0208 	orr.w	r2, r2, #8
 800d0aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	699a      	ldr	r2, [r3, #24]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f022 0204 	bic.w	r2, r2, #4
 800d0ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	6999      	ldr	r1, [r3, #24]
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	691a      	ldr	r2, [r3, #16]
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	430a      	orrs	r2, r1
 800d0cc:	619a      	str	r2, [r3, #24]
      break;
 800d0ce:	e0a5      	b.n	800d21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68b9      	ldr	r1, [r7, #8]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f000 fb00 	bl	800d6dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	699a      	ldr	r2, [r3, #24]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	699a      	ldr	r2, [r3, #24]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d0fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	6999      	ldr	r1, [r3, #24]
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	691b      	ldr	r3, [r3, #16]
 800d106:	021a      	lsls	r2, r3, #8
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	430a      	orrs	r2, r1
 800d10e:	619a      	str	r2, [r3, #24]
      break;
 800d110:	e084      	b.n	800d21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68b9      	ldr	r1, [r7, #8]
 800d118:	4618      	mov	r0, r3
 800d11a:	f000 fb69 	bl	800d7f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	69da      	ldr	r2, [r3, #28]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f042 0208 	orr.w	r2, r2, #8
 800d12c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	69da      	ldr	r2, [r3, #28]
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f022 0204 	bic.w	r2, r2, #4
 800d13c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	69d9      	ldr	r1, [r3, #28]
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	691a      	ldr	r2, [r3, #16]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	430a      	orrs	r2, r1
 800d14e:	61da      	str	r2, [r3, #28]
      break;
 800d150:	e064      	b.n	800d21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68b9      	ldr	r1, [r7, #8]
 800d158:	4618      	mov	r0, r3
 800d15a:	f000 fbd1 	bl	800d900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	69da      	ldr	r2, [r3, #28]
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d16c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	69da      	ldr	r2, [r3, #28]
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d17c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	69d9      	ldr	r1, [r3, #28]
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	021a      	lsls	r2, r3, #8
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	430a      	orrs	r2, r1
 800d190:	61da      	str	r2, [r3, #28]
      break;
 800d192:	e043      	b.n	800d21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	68b9      	ldr	r1, [r7, #8]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 fc1a 	bl	800d9d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f042 0208 	orr.w	r2, r2, #8
 800d1ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	f022 0204 	bic.w	r2, r2, #4
 800d1be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	691a      	ldr	r2, [r3, #16]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	430a      	orrs	r2, r1
 800d1d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d1d2:	e023      	b.n	800d21c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	68b9      	ldr	r1, [r7, #8]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f000 fc5e 	bl	800da9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	691b      	ldr	r3, [r3, #16]
 800d20a:	021a      	lsls	r2, r3, #8
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	430a      	orrs	r2, r1
 800d212:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800d214:	e002      	b.n	800d21c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800d216:	2301      	movs	r3, #1
 800d218:	75fb      	strb	r3, [r7, #23]
      break;
 800d21a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d224:	7dfb      	ldrb	r3, [r7, #23]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3718      	adds	r7, #24
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop

0800d230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d244:	2b01      	cmp	r3, #1
 800d246:	d101      	bne.n	800d24c <HAL_TIM_ConfigClockSource+0x1c>
 800d248:	2302      	movs	r3, #2
 800d24a:	e0dc      	b.n	800d406 <HAL_TIM_ConfigClockSource+0x1d6>
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2202      	movs	r2, #2
 800d258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d264:	68ba      	ldr	r2, [r7, #8]
 800d266:	4b6a      	ldr	r3, [pc, #424]	; (800d410 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d268:	4013      	ands	r3, r2
 800d26a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a64      	ldr	r2, [pc, #400]	; (800d414 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d282:	4293      	cmp	r3, r2
 800d284:	f000 80a9 	beq.w	800d3da <HAL_TIM_ConfigClockSource+0x1aa>
 800d288:	4a62      	ldr	r2, [pc, #392]	; (800d414 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	f200 80ae 	bhi.w	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d290:	4a61      	ldr	r2, [pc, #388]	; (800d418 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d292:	4293      	cmp	r3, r2
 800d294:	f000 80a1 	beq.w	800d3da <HAL_TIM_ConfigClockSource+0x1aa>
 800d298:	4a5f      	ldr	r2, [pc, #380]	; (800d418 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	f200 80a6 	bhi.w	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d2a0:	4a5e      	ldr	r2, [pc, #376]	; (800d41c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	f000 8099 	beq.w	800d3da <HAL_TIM_ConfigClockSource+0x1aa>
 800d2a8:	4a5c      	ldr	r2, [pc, #368]	; (800d41c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	f200 809e 	bhi.w	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d2b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d2b4:	f000 8091 	beq.w	800d3da <HAL_TIM_ConfigClockSource+0x1aa>
 800d2b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d2bc:	f200 8096 	bhi.w	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d2c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2c4:	f000 8089 	beq.w	800d3da <HAL_TIM_ConfigClockSource+0x1aa>
 800d2c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2cc:	f200 808e 	bhi.w	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d2d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2d4:	d03e      	beq.n	800d354 <HAL_TIM_ConfigClockSource+0x124>
 800d2d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2da:	f200 8087 	bhi.w	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2e2:	f000 8086 	beq.w	800d3f2 <HAL_TIM_ConfigClockSource+0x1c2>
 800d2e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2ea:	d87f      	bhi.n	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d2ec:	2b70      	cmp	r3, #112	; 0x70
 800d2ee:	d01a      	beq.n	800d326 <HAL_TIM_ConfigClockSource+0xf6>
 800d2f0:	2b70      	cmp	r3, #112	; 0x70
 800d2f2:	d87b      	bhi.n	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d2f4:	2b60      	cmp	r3, #96	; 0x60
 800d2f6:	d050      	beq.n	800d39a <HAL_TIM_ConfigClockSource+0x16a>
 800d2f8:	2b60      	cmp	r3, #96	; 0x60
 800d2fa:	d877      	bhi.n	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d2fc:	2b50      	cmp	r3, #80	; 0x50
 800d2fe:	d03c      	beq.n	800d37a <HAL_TIM_ConfigClockSource+0x14a>
 800d300:	2b50      	cmp	r3, #80	; 0x50
 800d302:	d873      	bhi.n	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d304:	2b40      	cmp	r3, #64	; 0x40
 800d306:	d058      	beq.n	800d3ba <HAL_TIM_ConfigClockSource+0x18a>
 800d308:	2b40      	cmp	r3, #64	; 0x40
 800d30a:	d86f      	bhi.n	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d30c:	2b30      	cmp	r3, #48	; 0x30
 800d30e:	d064      	beq.n	800d3da <HAL_TIM_ConfigClockSource+0x1aa>
 800d310:	2b30      	cmp	r3, #48	; 0x30
 800d312:	d86b      	bhi.n	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d314:	2b20      	cmp	r3, #32
 800d316:	d060      	beq.n	800d3da <HAL_TIM_ConfigClockSource+0x1aa>
 800d318:	2b20      	cmp	r3, #32
 800d31a:	d867      	bhi.n	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d05c      	beq.n	800d3da <HAL_TIM_ConfigClockSource+0x1aa>
 800d320:	2b10      	cmp	r3, #16
 800d322:	d05a      	beq.n	800d3da <HAL_TIM_ConfigClockSource+0x1aa>
 800d324:	e062      	b.n	800d3ec <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6818      	ldr	r0, [r3, #0]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	6899      	ldr	r1, [r3, #8]
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	685a      	ldr	r2, [r3, #4]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	68db      	ldr	r3, [r3, #12]
 800d336:	f000 fc95 	bl	800dc64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	68ba      	ldr	r2, [r7, #8]
 800d350:	609a      	str	r2, [r3, #8]
      break;
 800d352:	e04f      	b.n	800d3f4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6818      	ldr	r0, [r3, #0]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	6899      	ldr	r1, [r3, #8]
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	685a      	ldr	r2, [r3, #4]
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	68db      	ldr	r3, [r3, #12]
 800d364:	f000 fc7e 	bl	800dc64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	689a      	ldr	r2, [r3, #8]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d376:	609a      	str	r2, [r3, #8]
      break;
 800d378:	e03c      	b.n	800d3f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6818      	ldr	r0, [r3, #0]
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	6859      	ldr	r1, [r3, #4]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	461a      	mov	r2, r3
 800d388:	f000 fbee 	bl	800db68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2150      	movs	r1, #80	; 0x50
 800d392:	4618      	mov	r0, r3
 800d394:	f000 fc48 	bl	800dc28 <TIM_ITRx_SetConfig>
      break;
 800d398:	e02c      	b.n	800d3f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6818      	ldr	r0, [r3, #0]
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	6859      	ldr	r1, [r3, #4]
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	68db      	ldr	r3, [r3, #12]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	f000 fc0d 	bl	800dbc6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2160      	movs	r1, #96	; 0x60
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 fc38 	bl	800dc28 <TIM_ITRx_SetConfig>
      break;
 800d3b8:	e01c      	b.n	800d3f4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6818      	ldr	r0, [r3, #0]
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	6859      	ldr	r1, [r3, #4]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	f000 fbce 	bl	800db68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	2140      	movs	r1, #64	; 0x40
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 fc28 	bl	800dc28 <TIM_ITRx_SetConfig>
      break;
 800d3d8:	e00c      	b.n	800d3f4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	4619      	mov	r1, r3
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	f000 fc1f 	bl	800dc28 <TIM_ITRx_SetConfig>
      break;
 800d3ea:	e003      	b.n	800d3f4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d3f0:	e000      	b.n	800d3f4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800d3f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2200      	movs	r2, #0
 800d400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d404:	7bfb      	ldrb	r3, [r7, #15]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3710      	adds	r7, #16
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	ffceff88 	.word	0xffceff88
 800d414:	00100040 	.word	0x00100040
 800d418:	00100030 	.word	0x00100030
 800d41c:	00100020 	.word	0x00100020

0800d420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d428:	bf00      	nop
 800d42a:	370c      	adds	r7, #12
 800d42c:	46bd      	mov	sp, r7
 800d42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d432:	4770      	bx	lr

0800d434 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d434:	b480      	push	{r7}
 800d436:	b083      	sub	sp, #12
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d43c:	bf00      	nop
 800d43e:	370c      	adds	r7, #12
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d448:	b480      	push	{r7}
 800d44a:	b083      	sub	sp, #12
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b083      	sub	sp, #12
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr

0800d470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d470:	b480      	push	{r7}
 800d472:	b085      	sub	sp, #20
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	4a44      	ldr	r2, [pc, #272]	; (800d594 <TIM_Base_SetConfig+0x124>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d013      	beq.n	800d4b0 <TIM_Base_SetConfig+0x40>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d48e:	d00f      	beq.n	800d4b0 <TIM_Base_SetConfig+0x40>
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	4a41      	ldr	r2, [pc, #260]	; (800d598 <TIM_Base_SetConfig+0x128>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d00b      	beq.n	800d4b0 <TIM_Base_SetConfig+0x40>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a40      	ldr	r2, [pc, #256]	; (800d59c <TIM_Base_SetConfig+0x12c>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d007      	beq.n	800d4b0 <TIM_Base_SetConfig+0x40>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	4a3f      	ldr	r2, [pc, #252]	; (800d5a0 <TIM_Base_SetConfig+0x130>)
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d003      	beq.n	800d4b0 <TIM_Base_SetConfig+0x40>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4a3e      	ldr	r2, [pc, #248]	; (800d5a4 <TIM_Base_SetConfig+0x134>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d108      	bne.n	800d4c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4a33      	ldr	r2, [pc, #204]	; (800d594 <TIM_Base_SetConfig+0x124>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d027      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4d0:	d023      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	4a30      	ldr	r2, [pc, #192]	; (800d598 <TIM_Base_SetConfig+0x128>)
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d01f      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4a2f      	ldr	r2, [pc, #188]	; (800d59c <TIM_Base_SetConfig+0x12c>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d01b      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	4a2e      	ldr	r2, [pc, #184]	; (800d5a0 <TIM_Base_SetConfig+0x130>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d017      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a2d      	ldr	r2, [pc, #180]	; (800d5a4 <TIM_Base_SetConfig+0x134>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d013      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4a2c      	ldr	r2, [pc, #176]	; (800d5a8 <TIM_Base_SetConfig+0x138>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d00f      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	4a2b      	ldr	r2, [pc, #172]	; (800d5ac <TIM_Base_SetConfig+0x13c>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d00b      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	4a2a      	ldr	r2, [pc, #168]	; (800d5b0 <TIM_Base_SetConfig+0x140>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d007      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4a29      	ldr	r2, [pc, #164]	; (800d5b4 <TIM_Base_SetConfig+0x144>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d003      	beq.n	800d51a <TIM_Base_SetConfig+0xaa>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4a28      	ldr	r2, [pc, #160]	; (800d5b8 <TIM_Base_SetConfig+0x148>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d108      	bne.n	800d52c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	68db      	ldr	r3, [r3, #12]
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	4313      	orrs	r3, r2
 800d52a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	4313      	orrs	r3, r2
 800d538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	68fa      	ldr	r2, [r7, #12]
 800d53e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	689a      	ldr	r2, [r3, #8]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	4a10      	ldr	r2, [pc, #64]	; (800d594 <TIM_Base_SetConfig+0x124>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d00f      	beq.n	800d578 <TIM_Base_SetConfig+0x108>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	4a12      	ldr	r2, [pc, #72]	; (800d5a4 <TIM_Base_SetConfig+0x134>)
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d00b      	beq.n	800d578 <TIM_Base_SetConfig+0x108>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4a11      	ldr	r2, [pc, #68]	; (800d5a8 <TIM_Base_SetConfig+0x138>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d007      	beq.n	800d578 <TIM_Base_SetConfig+0x108>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	4a10      	ldr	r2, [pc, #64]	; (800d5ac <TIM_Base_SetConfig+0x13c>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d003      	beq.n	800d578 <TIM_Base_SetConfig+0x108>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a0f      	ldr	r2, [pc, #60]	; (800d5b0 <TIM_Base_SetConfig+0x140>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d103      	bne.n	800d580 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	691a      	ldr	r2, [r3, #16]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	615a      	str	r2, [r3, #20]
}
 800d586:	bf00      	nop
 800d588:	3714      	adds	r7, #20
 800d58a:	46bd      	mov	sp, r7
 800d58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d590:	4770      	bx	lr
 800d592:	bf00      	nop
 800d594:	40010000 	.word	0x40010000
 800d598:	40000400 	.word	0x40000400
 800d59c:	40000800 	.word	0x40000800
 800d5a0:	40000c00 	.word	0x40000c00
 800d5a4:	40010400 	.word	0x40010400
 800d5a8:	40014000 	.word	0x40014000
 800d5ac:	40014400 	.word	0x40014400
 800d5b0:	40014800 	.word	0x40014800
 800d5b4:	4000e000 	.word	0x4000e000
 800d5b8:	4000e400 	.word	0x4000e400

0800d5bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b087      	sub	sp, #28
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6a1b      	ldr	r3, [r3, #32]
 800d5ca:	f023 0201 	bic.w	r2, r3, #1
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6a1b      	ldr	r3, [r3, #32]
 800d5d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	699b      	ldr	r3, [r3, #24]
 800d5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	4b37      	ldr	r3, [pc, #220]	; (800d6c4 <TIM_OC1_SetConfig+0x108>)
 800d5e8:	4013      	ands	r3, r2
 800d5ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f023 0303 	bic.w	r3, r3, #3
 800d5f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	68fa      	ldr	r2, [r7, #12]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f023 0302 	bic.w	r3, r3, #2
 800d604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	689b      	ldr	r3, [r3, #8]
 800d60a:	697a      	ldr	r2, [r7, #20]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	4a2d      	ldr	r2, [pc, #180]	; (800d6c8 <TIM_OC1_SetConfig+0x10c>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d00f      	beq.n	800d638 <TIM_OC1_SetConfig+0x7c>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a2c      	ldr	r2, [pc, #176]	; (800d6cc <TIM_OC1_SetConfig+0x110>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d00b      	beq.n	800d638 <TIM_OC1_SetConfig+0x7c>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a2b      	ldr	r2, [pc, #172]	; (800d6d0 <TIM_OC1_SetConfig+0x114>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d007      	beq.n	800d638 <TIM_OC1_SetConfig+0x7c>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a2a      	ldr	r2, [pc, #168]	; (800d6d4 <TIM_OC1_SetConfig+0x118>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d003      	beq.n	800d638 <TIM_OC1_SetConfig+0x7c>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a29      	ldr	r2, [pc, #164]	; (800d6d8 <TIM_OC1_SetConfig+0x11c>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d10c      	bne.n	800d652 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	f023 0308 	bic.w	r3, r3, #8
 800d63e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	68db      	ldr	r3, [r3, #12]
 800d644:	697a      	ldr	r2, [r7, #20]
 800d646:	4313      	orrs	r3, r2
 800d648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f023 0304 	bic.w	r3, r3, #4
 800d650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	4a1c      	ldr	r2, [pc, #112]	; (800d6c8 <TIM_OC1_SetConfig+0x10c>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d00f      	beq.n	800d67a <TIM_OC1_SetConfig+0xbe>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a1b      	ldr	r2, [pc, #108]	; (800d6cc <TIM_OC1_SetConfig+0x110>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d00b      	beq.n	800d67a <TIM_OC1_SetConfig+0xbe>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a1a      	ldr	r2, [pc, #104]	; (800d6d0 <TIM_OC1_SetConfig+0x114>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d007      	beq.n	800d67a <TIM_OC1_SetConfig+0xbe>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a19      	ldr	r2, [pc, #100]	; (800d6d4 <TIM_OC1_SetConfig+0x118>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d003      	beq.n	800d67a <TIM_OC1_SetConfig+0xbe>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a18      	ldr	r2, [pc, #96]	; (800d6d8 <TIM_OC1_SetConfig+0x11c>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d111      	bne.n	800d69e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	695b      	ldr	r3, [r3, #20]
 800d68e:	693a      	ldr	r2, [r7, #16]
 800d690:	4313      	orrs	r3, r2
 800d692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	699b      	ldr	r3, [r3, #24]
 800d698:	693a      	ldr	r2, [r7, #16]
 800d69a:	4313      	orrs	r3, r2
 800d69c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	693a      	ldr	r2, [r7, #16]
 800d6a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	685a      	ldr	r2, [r3, #4]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	697a      	ldr	r2, [r7, #20]
 800d6b6:	621a      	str	r2, [r3, #32]
}
 800d6b8:	bf00      	nop
 800d6ba:	371c      	adds	r7, #28
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr
 800d6c4:	fffeff8f 	.word	0xfffeff8f
 800d6c8:	40010000 	.word	0x40010000
 800d6cc:	40010400 	.word	0x40010400
 800d6d0:	40014000 	.word	0x40014000
 800d6d4:	40014400 	.word	0x40014400
 800d6d8:	40014800 	.word	0x40014800

0800d6dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b087      	sub	sp, #28
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a1b      	ldr	r3, [r3, #32]
 800d6ea:	f023 0210 	bic.w	r2, r3, #16
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a1b      	ldr	r3, [r3, #32]
 800d6f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	4b34      	ldr	r3, [pc, #208]	; (800d7d8 <TIM_OC2_SetConfig+0xfc>)
 800d708:	4013      	ands	r3, r2
 800d70a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	021b      	lsls	r3, r3, #8
 800d71a:	68fa      	ldr	r2, [r7, #12]
 800d71c:	4313      	orrs	r3, r2
 800d71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	f023 0320 	bic.w	r3, r3, #32
 800d726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	011b      	lsls	r3, r3, #4
 800d72e:	697a      	ldr	r2, [r7, #20]
 800d730:	4313      	orrs	r3, r2
 800d732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	4a29      	ldr	r2, [pc, #164]	; (800d7dc <TIM_OC2_SetConfig+0x100>)
 800d738:	4293      	cmp	r3, r2
 800d73a:	d003      	beq.n	800d744 <TIM_OC2_SetConfig+0x68>
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	4a28      	ldr	r2, [pc, #160]	; (800d7e0 <TIM_OC2_SetConfig+0x104>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d10d      	bne.n	800d760 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d74a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	68db      	ldr	r3, [r3, #12]
 800d750:	011b      	lsls	r3, r3, #4
 800d752:	697a      	ldr	r2, [r7, #20]
 800d754:	4313      	orrs	r3, r2
 800d756:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d75e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	4a1e      	ldr	r2, [pc, #120]	; (800d7dc <TIM_OC2_SetConfig+0x100>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d00f      	beq.n	800d788 <TIM_OC2_SetConfig+0xac>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a1d      	ldr	r2, [pc, #116]	; (800d7e0 <TIM_OC2_SetConfig+0x104>)
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d00b      	beq.n	800d788 <TIM_OC2_SetConfig+0xac>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a1c      	ldr	r2, [pc, #112]	; (800d7e4 <TIM_OC2_SetConfig+0x108>)
 800d774:	4293      	cmp	r3, r2
 800d776:	d007      	beq.n	800d788 <TIM_OC2_SetConfig+0xac>
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	4a1b      	ldr	r2, [pc, #108]	; (800d7e8 <TIM_OC2_SetConfig+0x10c>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d003      	beq.n	800d788 <TIM_OC2_SetConfig+0xac>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	4a1a      	ldr	r2, [pc, #104]	; (800d7ec <TIM_OC2_SetConfig+0x110>)
 800d784:	4293      	cmp	r3, r2
 800d786:	d113      	bne.n	800d7b0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d78e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	695b      	ldr	r3, [r3, #20]
 800d79c:	009b      	lsls	r3, r3, #2
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	699b      	ldr	r3, [r3, #24]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	693a      	ldr	r2, [r7, #16]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	693a      	ldr	r2, [r7, #16]
 800d7b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	68fa      	ldr	r2, [r7, #12]
 800d7ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	685a      	ldr	r2, [r3, #4]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	697a      	ldr	r2, [r7, #20]
 800d7c8:	621a      	str	r2, [r3, #32]
}
 800d7ca:	bf00      	nop
 800d7cc:	371c      	adds	r7, #28
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	feff8fff 	.word	0xfeff8fff
 800d7dc:	40010000 	.word	0x40010000
 800d7e0:	40010400 	.word	0x40010400
 800d7e4:	40014000 	.word	0x40014000
 800d7e8:	40014400 	.word	0x40014400
 800d7ec:	40014800 	.word	0x40014800

0800d7f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b087      	sub	sp, #28
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6a1b      	ldr	r3, [r3, #32]
 800d7fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a1b      	ldr	r3, [r3, #32]
 800d80a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	69db      	ldr	r3, [r3, #28]
 800d816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	4b33      	ldr	r3, [pc, #204]	; (800d8e8 <TIM_OC3_SetConfig+0xf8>)
 800d81c:	4013      	ands	r3, r2
 800d81e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f023 0303 	bic.w	r3, r3, #3
 800d826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	68fa      	ldr	r2, [r7, #12]
 800d82e:	4313      	orrs	r3, r2
 800d830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	689b      	ldr	r3, [r3, #8]
 800d83e:	021b      	lsls	r3, r3, #8
 800d840:	697a      	ldr	r2, [r7, #20]
 800d842:	4313      	orrs	r3, r2
 800d844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a28      	ldr	r2, [pc, #160]	; (800d8ec <TIM_OC3_SetConfig+0xfc>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d003      	beq.n	800d856 <TIM_OC3_SetConfig+0x66>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a27      	ldr	r2, [pc, #156]	; (800d8f0 <TIM_OC3_SetConfig+0x100>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d10d      	bne.n	800d872 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d85c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	021b      	lsls	r3, r3, #8
 800d864:	697a      	ldr	r2, [r7, #20]
 800d866:	4313      	orrs	r3, r2
 800d868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a1d      	ldr	r2, [pc, #116]	; (800d8ec <TIM_OC3_SetConfig+0xfc>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d00f      	beq.n	800d89a <TIM_OC3_SetConfig+0xaa>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4a1c      	ldr	r2, [pc, #112]	; (800d8f0 <TIM_OC3_SetConfig+0x100>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d00b      	beq.n	800d89a <TIM_OC3_SetConfig+0xaa>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a1b      	ldr	r2, [pc, #108]	; (800d8f4 <TIM_OC3_SetConfig+0x104>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d007      	beq.n	800d89a <TIM_OC3_SetConfig+0xaa>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	4a1a      	ldr	r2, [pc, #104]	; (800d8f8 <TIM_OC3_SetConfig+0x108>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d003      	beq.n	800d89a <TIM_OC3_SetConfig+0xaa>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	4a19      	ldr	r2, [pc, #100]	; (800d8fc <TIM_OC3_SetConfig+0x10c>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d113      	bne.n	800d8c2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d8a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	695b      	ldr	r3, [r3, #20]
 800d8ae:	011b      	lsls	r3, r3, #4
 800d8b0:	693a      	ldr	r2, [r7, #16]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	699b      	ldr	r3, [r3, #24]
 800d8ba:	011b      	lsls	r3, r3, #4
 800d8bc:	693a      	ldr	r2, [r7, #16]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	68fa      	ldr	r2, [r7, #12]
 800d8cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	685a      	ldr	r2, [r3, #4]
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	697a      	ldr	r2, [r7, #20]
 800d8da:	621a      	str	r2, [r3, #32]
}
 800d8dc:	bf00      	nop
 800d8de:	371c      	adds	r7, #28
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	fffeff8f 	.word	0xfffeff8f
 800d8ec:	40010000 	.word	0x40010000
 800d8f0:	40010400 	.word	0x40010400
 800d8f4:	40014000 	.word	0x40014000
 800d8f8:	40014400 	.word	0x40014400
 800d8fc:	40014800 	.word	0x40014800

0800d900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d900:	b480      	push	{r7}
 800d902:	b087      	sub	sp, #28
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a1b      	ldr	r3, [r3, #32]
 800d90e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a1b      	ldr	r3, [r3, #32]
 800d91a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	685b      	ldr	r3, [r3, #4]
 800d920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	69db      	ldr	r3, [r3, #28]
 800d926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	4b24      	ldr	r3, [pc, #144]	; (800d9bc <TIM_OC4_SetConfig+0xbc>)
 800d92c:	4013      	ands	r3, r2
 800d92e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	021b      	lsls	r3, r3, #8
 800d93e:	68fa      	ldr	r2, [r7, #12]
 800d940:	4313      	orrs	r3, r2
 800d942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d94a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	031b      	lsls	r3, r3, #12
 800d952:	693a      	ldr	r2, [r7, #16]
 800d954:	4313      	orrs	r3, r2
 800d956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	4a19      	ldr	r2, [pc, #100]	; (800d9c0 <TIM_OC4_SetConfig+0xc0>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d00f      	beq.n	800d980 <TIM_OC4_SetConfig+0x80>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4a18      	ldr	r2, [pc, #96]	; (800d9c4 <TIM_OC4_SetConfig+0xc4>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d00b      	beq.n	800d980 <TIM_OC4_SetConfig+0x80>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	4a17      	ldr	r2, [pc, #92]	; (800d9c8 <TIM_OC4_SetConfig+0xc8>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d007      	beq.n	800d980 <TIM_OC4_SetConfig+0x80>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	4a16      	ldr	r2, [pc, #88]	; (800d9cc <TIM_OC4_SetConfig+0xcc>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d003      	beq.n	800d980 <TIM_OC4_SetConfig+0x80>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4a15      	ldr	r2, [pc, #84]	; (800d9d0 <TIM_OC4_SetConfig+0xd0>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d109      	bne.n	800d994 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d986:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	695b      	ldr	r3, [r3, #20]
 800d98c:	019b      	lsls	r3, r3, #6
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	4313      	orrs	r3, r2
 800d992:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	697a      	ldr	r2, [r7, #20]
 800d998:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	68fa      	ldr	r2, [r7, #12]
 800d99e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	685a      	ldr	r2, [r3, #4]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	693a      	ldr	r2, [r7, #16]
 800d9ac:	621a      	str	r2, [r3, #32]
}
 800d9ae:	bf00      	nop
 800d9b0:	371c      	adds	r7, #28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	feff8fff 	.word	0xfeff8fff
 800d9c0:	40010000 	.word	0x40010000
 800d9c4:	40010400 	.word	0x40010400
 800d9c8:	40014000 	.word	0x40014000
 800d9cc:	40014400 	.word	0x40014400
 800d9d0:	40014800 	.word	0x40014800

0800d9d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b087      	sub	sp, #28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6a1b      	ldr	r3, [r3, #32]
 800d9e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6a1b      	ldr	r3, [r3, #32]
 800d9ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	4b21      	ldr	r3, [pc, #132]	; (800da84 <TIM_OC5_SetConfig+0xb0>)
 800da00:	4013      	ands	r3, r2
 800da02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	4313      	orrs	r3, r2
 800da0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800da14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	689b      	ldr	r3, [r3, #8]
 800da1a:	041b      	lsls	r3, r3, #16
 800da1c:	693a      	ldr	r2, [r7, #16]
 800da1e:	4313      	orrs	r3, r2
 800da20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	4a18      	ldr	r2, [pc, #96]	; (800da88 <TIM_OC5_SetConfig+0xb4>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d00f      	beq.n	800da4a <TIM_OC5_SetConfig+0x76>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	4a17      	ldr	r2, [pc, #92]	; (800da8c <TIM_OC5_SetConfig+0xb8>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d00b      	beq.n	800da4a <TIM_OC5_SetConfig+0x76>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	4a16      	ldr	r2, [pc, #88]	; (800da90 <TIM_OC5_SetConfig+0xbc>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d007      	beq.n	800da4a <TIM_OC5_SetConfig+0x76>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	4a15      	ldr	r2, [pc, #84]	; (800da94 <TIM_OC5_SetConfig+0xc0>)
 800da3e:	4293      	cmp	r3, r2
 800da40:	d003      	beq.n	800da4a <TIM_OC5_SetConfig+0x76>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	4a14      	ldr	r2, [pc, #80]	; (800da98 <TIM_OC5_SetConfig+0xc4>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d109      	bne.n	800da5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800da50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	695b      	ldr	r3, [r3, #20]
 800da56:	021b      	lsls	r3, r3, #8
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	4313      	orrs	r3, r2
 800da5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	697a      	ldr	r2, [r7, #20]
 800da62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	693a      	ldr	r2, [r7, #16]
 800da76:	621a      	str	r2, [r3, #32]
}
 800da78:	bf00      	nop
 800da7a:	371c      	adds	r7, #28
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	fffeff8f 	.word	0xfffeff8f
 800da88:	40010000 	.word	0x40010000
 800da8c:	40010400 	.word	0x40010400
 800da90:	40014000 	.word	0x40014000
 800da94:	40014400 	.word	0x40014400
 800da98:	40014800 	.word	0x40014800

0800da9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b087      	sub	sp, #28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800dac4:	68fa      	ldr	r2, [r7, #12]
 800dac6:	4b22      	ldr	r3, [pc, #136]	; (800db50 <TIM_OC6_SetConfig+0xb4>)
 800dac8:	4013      	ands	r3, r2
 800daca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	021b      	lsls	r3, r3, #8
 800dad2:	68fa      	ldr	r2, [r7, #12]
 800dad4:	4313      	orrs	r3, r2
 800dad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dade:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	051b      	lsls	r3, r3, #20
 800dae6:	693a      	ldr	r2, [r7, #16]
 800dae8:	4313      	orrs	r3, r2
 800daea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	4a19      	ldr	r2, [pc, #100]	; (800db54 <TIM_OC6_SetConfig+0xb8>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d00f      	beq.n	800db14 <TIM_OC6_SetConfig+0x78>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	4a18      	ldr	r2, [pc, #96]	; (800db58 <TIM_OC6_SetConfig+0xbc>)
 800daf8:	4293      	cmp	r3, r2
 800dafa:	d00b      	beq.n	800db14 <TIM_OC6_SetConfig+0x78>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	4a17      	ldr	r2, [pc, #92]	; (800db5c <TIM_OC6_SetConfig+0xc0>)
 800db00:	4293      	cmp	r3, r2
 800db02:	d007      	beq.n	800db14 <TIM_OC6_SetConfig+0x78>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	4a16      	ldr	r2, [pc, #88]	; (800db60 <TIM_OC6_SetConfig+0xc4>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d003      	beq.n	800db14 <TIM_OC6_SetConfig+0x78>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4a15      	ldr	r2, [pc, #84]	; (800db64 <TIM_OC6_SetConfig+0xc8>)
 800db10:	4293      	cmp	r3, r2
 800db12:	d109      	bne.n	800db28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800db1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	695b      	ldr	r3, [r3, #20]
 800db20:	029b      	lsls	r3, r3, #10
 800db22:	697a      	ldr	r2, [r7, #20]
 800db24:	4313      	orrs	r3, r2
 800db26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	697a      	ldr	r2, [r7, #20]
 800db2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	685a      	ldr	r2, [r3, #4]
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	693a      	ldr	r2, [r7, #16]
 800db40:	621a      	str	r2, [r3, #32]
}
 800db42:	bf00      	nop
 800db44:	371c      	adds	r7, #28
 800db46:	46bd      	mov	sp, r7
 800db48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4c:	4770      	bx	lr
 800db4e:	bf00      	nop
 800db50:	feff8fff 	.word	0xfeff8fff
 800db54:	40010000 	.word	0x40010000
 800db58:	40010400 	.word	0x40010400
 800db5c:	40014000 	.word	0x40014000
 800db60:	40014400 	.word	0x40014400
 800db64:	40014800 	.word	0x40014800

0800db68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db68:	b480      	push	{r7}
 800db6a:	b087      	sub	sp, #28
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6a1b      	ldr	r3, [r3, #32]
 800db78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	6a1b      	ldr	r3, [r3, #32]
 800db7e:	f023 0201 	bic.w	r2, r3, #1
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	699b      	ldr	r3, [r3, #24]
 800db8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800db92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	011b      	lsls	r3, r3, #4
 800db98:	693a      	ldr	r2, [r7, #16]
 800db9a:	4313      	orrs	r3, r2
 800db9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	f023 030a 	bic.w	r3, r3, #10
 800dba4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dba6:	697a      	ldr	r2, [r7, #20]
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	693a      	ldr	r2, [r7, #16]
 800dbb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	697a      	ldr	r2, [r7, #20]
 800dbb8:	621a      	str	r2, [r3, #32]
}
 800dbba:	bf00      	nop
 800dbbc:	371c      	adds	r7, #28
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr

0800dbc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b087      	sub	sp, #28
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6a1b      	ldr	r3, [r3, #32]
 800dbd6:	f023 0210 	bic.w	r2, r3, #16
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	6a1b      	ldr	r3, [r3, #32]
 800dbe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dbf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	031b      	lsls	r3, r3, #12
 800dbf6:	697a      	ldr	r2, [r7, #20]
 800dbf8:	4313      	orrs	r3, r2
 800dbfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	011b      	lsls	r3, r3, #4
 800dc08:	693a      	ldr	r2, [r7, #16]
 800dc0a:	4313      	orrs	r3, r2
 800dc0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	697a      	ldr	r2, [r7, #20]
 800dc12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	693a      	ldr	r2, [r7, #16]
 800dc18:	621a      	str	r2, [r3, #32]
}
 800dc1a:	bf00      	nop
 800dc1c:	371c      	adds	r7, #28
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc24:	4770      	bx	lr
	...

0800dc28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	4b09      	ldr	r3, [pc, #36]	; (800dc60 <TIM_ITRx_SetConfig+0x38>)
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc40:	683a      	ldr	r2, [r7, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	4313      	orrs	r3, r2
 800dc46:	f043 0307 	orr.w	r3, r3, #7
 800dc4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	68fa      	ldr	r2, [r7, #12]
 800dc50:	609a      	str	r2, [r3, #8]
}
 800dc52:	bf00      	nop
 800dc54:	3714      	adds	r7, #20
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	ffcfff8f 	.word	0xffcfff8f

0800dc64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b087      	sub	sp, #28
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
 800dc70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	689b      	ldr	r3, [r3, #8]
 800dc76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc78:	697b      	ldr	r3, [r7, #20]
 800dc7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	021a      	lsls	r2, r3, #8
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	431a      	orrs	r2, r3
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	697a      	ldr	r2, [r7, #20]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	697a      	ldr	r2, [r7, #20]
 800dc96:	609a      	str	r2, [r3, #8]
}
 800dc98:	bf00      	nop
 800dc9a:	371c      	adds	r7, #28
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b087      	sub	sp, #28
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	f003 031f 	and.w	r3, r3, #31
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	fa02 f303 	lsl.w	r3, r2, r3
 800dcbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6a1a      	ldr	r2, [r3, #32]
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	43db      	mvns	r3, r3
 800dcc6:	401a      	ands	r2, r3
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	6a1a      	ldr	r2, [r3, #32]
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	f003 031f 	and.w	r3, r3, #31
 800dcd6:	6879      	ldr	r1, [r7, #4]
 800dcd8:	fa01 f303 	lsl.w	r3, r1, r3
 800dcdc:	431a      	orrs	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	621a      	str	r2, [r3, #32]
}
 800dce2:	bf00      	nop
 800dce4:	371c      	adds	r7, #28
 800dce6:	46bd      	mov	sp, r7
 800dce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcec:	4770      	bx	lr
	...

0800dcf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b085      	sub	sp, #20
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d101      	bne.n	800dd08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dd04:	2302      	movs	r3, #2
 800dd06:	e077      	b.n	800ddf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2202      	movs	r2, #2
 800dd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a35      	ldr	r2, [pc, #212]	; (800de04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d004      	beq.n	800dd3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a34      	ldr	r2, [pc, #208]	; (800de08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d108      	bne.n	800dd4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dd42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	68fa      	ldr	r2, [r7, #12]
 800dd66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	4a25      	ldr	r2, [pc, #148]	; (800de04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d02c      	beq.n	800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd7a:	d027      	beq.n	800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a22      	ldr	r2, [pc, #136]	; (800de0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d022      	beq.n	800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	4a21      	ldr	r2, [pc, #132]	; (800de10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d01d      	beq.n	800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	4a1f      	ldr	r2, [pc, #124]	; (800de14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d018      	beq.n	800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a1a      	ldr	r2, [pc, #104]	; (800de08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d013      	beq.n	800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a1b      	ldr	r2, [pc, #108]	; (800de18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d00e      	beq.n	800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4a1a      	ldr	r2, [pc, #104]	; (800de1c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d009      	beq.n	800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a18      	ldr	r2, [pc, #96]	; (800de20 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d004      	beq.n	800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	4a17      	ldr	r2, [pc, #92]	; (800de24 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d10c      	bne.n	800dde6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	68ba      	ldr	r2, [r7, #8]
 800ddda:	4313      	orrs	r3, r2
 800dddc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68ba      	ldr	r2, [r7, #8]
 800dde4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2201      	movs	r2, #1
 800ddea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3714      	adds	r7, #20
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	40010000 	.word	0x40010000
 800de08:	40010400 	.word	0x40010400
 800de0c:	40000400 	.word	0x40000400
 800de10:	40000800 	.word	0x40000800
 800de14:	40000c00 	.word	0x40000c00
 800de18:	40001800 	.word	0x40001800
 800de1c:	40014000 	.word	0x40014000
 800de20:	4000e000 	.word	0x4000e000
 800de24:	4000e400 	.word	0x4000e400

0800de28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800de28:	b480      	push	{r7}
 800de2a:	b085      	sub	sp, #20
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800de32:	2300      	movs	r3, #0
 800de34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de3c:	2b01      	cmp	r3, #1
 800de3e:	d101      	bne.n	800de44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800de40:	2302      	movs	r3, #2
 800de42:	e087      	b.n	800df54 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2201      	movs	r2, #1
 800de48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	68db      	ldr	r3, [r3, #12]
 800de56:	4313      	orrs	r3, r2
 800de58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	4313      	orrs	r3, r2
 800de66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	4313      	orrs	r3, r2
 800de74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4313      	orrs	r3, r2
 800de82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	691b      	ldr	r3, [r3, #16]
 800de8e:	4313      	orrs	r3, r2
 800de90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	4313      	orrs	r3, r2
 800de9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deaa:	4313      	orrs	r3, r2
 800deac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	699b      	ldr	r3, [r3, #24]
 800deb8:	041b      	lsls	r3, r3, #16
 800deba:	4313      	orrs	r3, r2
 800debc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4a27      	ldr	r2, [pc, #156]	; (800df60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dec4:	4293      	cmp	r3, r2
 800dec6:	d004      	beq.n	800ded2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a25      	ldr	r2, [pc, #148]	; (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800dece:	4293      	cmp	r3, r2
 800ded0:	d106      	bne.n	800dee0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	69db      	ldr	r3, [r3, #28]
 800dedc:	4313      	orrs	r3, r2
 800dede:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	4a1e      	ldr	r2, [pc, #120]	; (800df60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d004      	beq.n	800def4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4a1d      	ldr	r2, [pc, #116]	; (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800def0:	4293      	cmp	r3, r2
 800def2:	d126      	bne.n	800df42 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800defe:	051b      	lsls	r3, r3, #20
 800df00:	4313      	orrs	r3, r2
 800df02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	6a1b      	ldr	r3, [r3, #32]
 800df0e:	4313      	orrs	r3, r2
 800df10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1c:	4313      	orrs	r3, r2
 800df1e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a0e      	ldr	r2, [pc, #56]	; (800df60 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d004      	beq.n	800df34 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a0d      	ldr	r2, [pc, #52]	; (800df64 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d106      	bne.n	800df42 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df3e:	4313      	orrs	r3, r2
 800df40:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	68fa      	ldr	r2, [r7, #12]
 800df48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800df52:	2300      	movs	r3, #0
}
 800df54:	4618      	mov	r0, r3
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr
 800df60:	40010000 	.word	0x40010000
 800df64:	40010400 	.word	0x40010400

0800df68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800df70:	bf00      	nop
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800df7c:	b480      	push	{r7}
 800df7e:	b083      	sub	sp, #12
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800df84:	bf00      	nop
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr

0800df90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800df98:	bf00      	nop
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d101      	bne.n	800dfb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e042      	b.n	800e03c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d106      	bne.n	800dfce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f7f5 fab3 	bl	8003534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	2224      	movs	r2, #36	; 0x24
 800dfd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f022 0201 	bic.w	r2, r2, #1
 800dfe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f8ac 	bl	800e144 <UART_SetConfig>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d101      	bne.n	800dff6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	e022      	b.n	800e03c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d002      	beq.n	800e004 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fefe 	bl	800ee00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	685a      	ldr	r2, [r3, #4]
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	689a      	ldr	r2, [r3, #8]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f042 0201 	orr.w	r2, r2, #1
 800e032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 ff85 	bl	800ef44 <UART_CheckIdleState>
 800e03a:	4603      	mov	r3, r0
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b08a      	sub	sp, #40	; 0x28
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	4613      	mov	r3, r2
 800e050:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e058:	2b20      	cmp	r3, #32
 800e05a:	d142      	bne.n	800e0e2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d002      	beq.n	800e068 <HAL_UART_Receive_DMA+0x24>
 800e062:	88fb      	ldrh	r3, [r7, #6]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d101      	bne.n	800e06c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e068:	2301      	movs	r3, #1
 800e06a:	e03b      	b.n	800e0e4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e072:	2b01      	cmp	r3, #1
 800e074:	d101      	bne.n	800e07a <HAL_UART_Receive_DMA+0x36>
 800e076:	2302      	movs	r3, #2
 800e078:	e034      	b.n	800e0e4 <HAL_UART_Receive_DMA+0xa0>
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2201      	movs	r2, #1
 800e07e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a17      	ldr	r2, [pc, #92]	; (800e0ec <HAL_UART_Receive_DMA+0xa8>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d01f      	beq.n	800e0d2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d018      	beq.n	800e0d2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	e853 3f00 	ldrex	r3, [r3]
 800e0ac:	613b      	str	r3, [r7, #16]
   return(result);
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e0b4:	627b      	str	r3, [r7, #36]	; 0x24
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	623b      	str	r3, [r7, #32]
 800e0c0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c2:	69f9      	ldr	r1, [r7, #28]
 800e0c4:	6a3a      	ldr	r2, [r7, #32]
 800e0c6:	e841 2300 	strex	r3, r2, [r1]
 800e0ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1e6      	bne.n	800e0a0 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e0d2:	88fb      	ldrh	r3, [r7, #6]
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	68b9      	ldr	r1, [r7, #8]
 800e0d8:	68f8      	ldr	r0, [r7, #12]
 800e0da:	f001 f847 	bl	800f16c <UART_Start_Receive_DMA>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	e000      	b.n	800e0e4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e0e2:	2302      	movs	r3, #2
  }
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3728      	adds	r7, #40	; 0x28
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}
 800e0ec:	58000c00 	.word	0x58000c00

0800e0f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e118:	b480      	push	{r7}
 800e11a:	b083      	sub	sp, #12
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e120:	bf00      	nop
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr

0800e12c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e12c:	b480      	push	{r7}
 800e12e:	b083      	sub	sp, #12
 800e130:	af00      	add	r7, sp, #0
 800e132:	6078      	str	r0, [r7, #4]
 800e134:	460b      	mov	r3, r1
 800e136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e138:	bf00      	nop
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e144:	b5b0      	push	{r4, r5, r7, lr}
 800e146:	b08e      	sub	sp, #56	; 0x38
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e14c:	2300      	movs	r3, #0
 800e14e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	689a      	ldr	r2, [r3, #8]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	691b      	ldr	r3, [r3, #16]
 800e15a:	431a      	orrs	r2, r3
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	695b      	ldr	r3, [r3, #20]
 800e160:	431a      	orrs	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	69db      	ldr	r3, [r3, #28]
 800e166:	4313      	orrs	r3, r2
 800e168:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	4bbf      	ldr	r3, [pc, #764]	; (800e470 <UART_SetConfig+0x32c>)
 800e172:	4013      	ands	r3, r2
 800e174:	687a      	ldr	r2, [r7, #4]
 800e176:	6812      	ldr	r2, [r2, #0]
 800e178:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e17a:	430b      	orrs	r3, r1
 800e17c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	685b      	ldr	r3, [r3, #4]
 800e184:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	68da      	ldr	r2, [r3, #12]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	430a      	orrs	r2, r1
 800e192:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	699b      	ldr	r3, [r3, #24]
 800e198:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4ab5      	ldr	r2, [pc, #724]	; (800e474 <UART_SetConfig+0x330>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d004      	beq.n	800e1ae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	6a1b      	ldr	r3, [r3, #32]
 800e1a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e1aa:	4313      	orrs	r3, r2
 800e1ac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	689a      	ldr	r2, [r3, #8]
 800e1b4:	4bb0      	ldr	r3, [pc, #704]	; (800e478 <UART_SetConfig+0x334>)
 800e1b6:	4013      	ands	r3, r2
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	6812      	ldr	r2, [r2, #0]
 800e1bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e1be:	430b      	orrs	r3, r1
 800e1c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c8:	f023 010f 	bic.w	r1, r3, #15
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	430a      	orrs	r2, r1
 800e1d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	4aa7      	ldr	r2, [pc, #668]	; (800e47c <UART_SetConfig+0x338>)
 800e1de:	4293      	cmp	r3, r2
 800e1e0:	d176      	bne.n	800e2d0 <UART_SetConfig+0x18c>
 800e1e2:	4ba7      	ldr	r3, [pc, #668]	; (800e480 <UART_SetConfig+0x33c>)
 800e1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e1ea:	2b28      	cmp	r3, #40	; 0x28
 800e1ec:	d86c      	bhi.n	800e2c8 <UART_SetConfig+0x184>
 800e1ee:	a201      	add	r2, pc, #4	; (adr r2, 800e1f4 <UART_SetConfig+0xb0>)
 800e1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f4:	0800e299 	.word	0x0800e299
 800e1f8:	0800e2c9 	.word	0x0800e2c9
 800e1fc:	0800e2c9 	.word	0x0800e2c9
 800e200:	0800e2c9 	.word	0x0800e2c9
 800e204:	0800e2c9 	.word	0x0800e2c9
 800e208:	0800e2c9 	.word	0x0800e2c9
 800e20c:	0800e2c9 	.word	0x0800e2c9
 800e210:	0800e2c9 	.word	0x0800e2c9
 800e214:	0800e2a1 	.word	0x0800e2a1
 800e218:	0800e2c9 	.word	0x0800e2c9
 800e21c:	0800e2c9 	.word	0x0800e2c9
 800e220:	0800e2c9 	.word	0x0800e2c9
 800e224:	0800e2c9 	.word	0x0800e2c9
 800e228:	0800e2c9 	.word	0x0800e2c9
 800e22c:	0800e2c9 	.word	0x0800e2c9
 800e230:	0800e2c9 	.word	0x0800e2c9
 800e234:	0800e2a9 	.word	0x0800e2a9
 800e238:	0800e2c9 	.word	0x0800e2c9
 800e23c:	0800e2c9 	.word	0x0800e2c9
 800e240:	0800e2c9 	.word	0x0800e2c9
 800e244:	0800e2c9 	.word	0x0800e2c9
 800e248:	0800e2c9 	.word	0x0800e2c9
 800e24c:	0800e2c9 	.word	0x0800e2c9
 800e250:	0800e2c9 	.word	0x0800e2c9
 800e254:	0800e2b1 	.word	0x0800e2b1
 800e258:	0800e2c9 	.word	0x0800e2c9
 800e25c:	0800e2c9 	.word	0x0800e2c9
 800e260:	0800e2c9 	.word	0x0800e2c9
 800e264:	0800e2c9 	.word	0x0800e2c9
 800e268:	0800e2c9 	.word	0x0800e2c9
 800e26c:	0800e2c9 	.word	0x0800e2c9
 800e270:	0800e2c9 	.word	0x0800e2c9
 800e274:	0800e2b9 	.word	0x0800e2b9
 800e278:	0800e2c9 	.word	0x0800e2c9
 800e27c:	0800e2c9 	.word	0x0800e2c9
 800e280:	0800e2c9 	.word	0x0800e2c9
 800e284:	0800e2c9 	.word	0x0800e2c9
 800e288:	0800e2c9 	.word	0x0800e2c9
 800e28c:	0800e2c9 	.word	0x0800e2c9
 800e290:	0800e2c9 	.word	0x0800e2c9
 800e294:	0800e2c1 	.word	0x0800e2c1
 800e298:	2301      	movs	r3, #1
 800e29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e29e:	e326      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e2a0:	2304      	movs	r3, #4
 800e2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2a6:	e322      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e2a8:	2308      	movs	r3, #8
 800e2aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2ae:	e31e      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e2b0:	2310      	movs	r3, #16
 800e2b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2b6:	e31a      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e2b8:	2320      	movs	r3, #32
 800e2ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2be:	e316      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e2c0:	2340      	movs	r3, #64	; 0x40
 800e2c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2c6:	e312      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e2c8:	2380      	movs	r3, #128	; 0x80
 800e2ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e2ce:	e30e      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	4a6b      	ldr	r2, [pc, #428]	; (800e484 <UART_SetConfig+0x340>)
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	d130      	bne.n	800e33c <UART_SetConfig+0x1f8>
 800e2da:	4b69      	ldr	r3, [pc, #420]	; (800e480 <UART_SetConfig+0x33c>)
 800e2dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2de:	f003 0307 	and.w	r3, r3, #7
 800e2e2:	2b05      	cmp	r3, #5
 800e2e4:	d826      	bhi.n	800e334 <UART_SetConfig+0x1f0>
 800e2e6:	a201      	add	r2, pc, #4	; (adr r2, 800e2ec <UART_SetConfig+0x1a8>)
 800e2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ec:	0800e305 	.word	0x0800e305
 800e2f0:	0800e30d 	.word	0x0800e30d
 800e2f4:	0800e315 	.word	0x0800e315
 800e2f8:	0800e31d 	.word	0x0800e31d
 800e2fc:	0800e325 	.word	0x0800e325
 800e300:	0800e32d 	.word	0x0800e32d
 800e304:	2300      	movs	r3, #0
 800e306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e30a:	e2f0      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e30c:	2304      	movs	r3, #4
 800e30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e312:	e2ec      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e314:	2308      	movs	r3, #8
 800e316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e31a:	e2e8      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e31c:	2310      	movs	r3, #16
 800e31e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e322:	e2e4      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e324:	2320      	movs	r3, #32
 800e326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e32a:	e2e0      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e32c:	2340      	movs	r3, #64	; 0x40
 800e32e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e332:	e2dc      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e334:	2380      	movs	r3, #128	; 0x80
 800e336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e33a:	e2d8      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	4a51      	ldr	r2, [pc, #324]	; (800e488 <UART_SetConfig+0x344>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d130      	bne.n	800e3a8 <UART_SetConfig+0x264>
 800e346:	4b4e      	ldr	r3, [pc, #312]	; (800e480 <UART_SetConfig+0x33c>)
 800e348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e34a:	f003 0307 	and.w	r3, r3, #7
 800e34e:	2b05      	cmp	r3, #5
 800e350:	d826      	bhi.n	800e3a0 <UART_SetConfig+0x25c>
 800e352:	a201      	add	r2, pc, #4	; (adr r2, 800e358 <UART_SetConfig+0x214>)
 800e354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e358:	0800e371 	.word	0x0800e371
 800e35c:	0800e379 	.word	0x0800e379
 800e360:	0800e381 	.word	0x0800e381
 800e364:	0800e389 	.word	0x0800e389
 800e368:	0800e391 	.word	0x0800e391
 800e36c:	0800e399 	.word	0x0800e399
 800e370:	2300      	movs	r3, #0
 800e372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e376:	e2ba      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e378:	2304      	movs	r3, #4
 800e37a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e37e:	e2b6      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e380:	2308      	movs	r3, #8
 800e382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e386:	e2b2      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e388:	2310      	movs	r3, #16
 800e38a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e38e:	e2ae      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e390:	2320      	movs	r3, #32
 800e392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e396:	e2aa      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e398:	2340      	movs	r3, #64	; 0x40
 800e39a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e39e:	e2a6      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e3a0:	2380      	movs	r3, #128	; 0x80
 800e3a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3a6:	e2a2      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	4a37      	ldr	r2, [pc, #220]	; (800e48c <UART_SetConfig+0x348>)
 800e3ae:	4293      	cmp	r3, r2
 800e3b0:	d130      	bne.n	800e414 <UART_SetConfig+0x2d0>
 800e3b2:	4b33      	ldr	r3, [pc, #204]	; (800e480 <UART_SetConfig+0x33c>)
 800e3b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3b6:	f003 0307 	and.w	r3, r3, #7
 800e3ba:	2b05      	cmp	r3, #5
 800e3bc:	d826      	bhi.n	800e40c <UART_SetConfig+0x2c8>
 800e3be:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <UART_SetConfig+0x280>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e3dd 	.word	0x0800e3dd
 800e3c8:	0800e3e5 	.word	0x0800e3e5
 800e3cc:	0800e3ed 	.word	0x0800e3ed
 800e3d0:	0800e3f5 	.word	0x0800e3f5
 800e3d4:	0800e3fd 	.word	0x0800e3fd
 800e3d8:	0800e405 	.word	0x0800e405
 800e3dc:	2300      	movs	r3, #0
 800e3de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3e2:	e284      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e3e4:	2304      	movs	r3, #4
 800e3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3ea:	e280      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e3ec:	2308      	movs	r3, #8
 800e3ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3f2:	e27c      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e3f4:	2310      	movs	r3, #16
 800e3f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3fa:	e278      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e3fc:	2320      	movs	r3, #32
 800e3fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e402:	e274      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e404:	2340      	movs	r3, #64	; 0x40
 800e406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e40a:	e270      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e40c:	2380      	movs	r3, #128	; 0x80
 800e40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e412:	e26c      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	4a1d      	ldr	r2, [pc, #116]	; (800e490 <UART_SetConfig+0x34c>)
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d142      	bne.n	800e4a4 <UART_SetConfig+0x360>
 800e41e:	4b18      	ldr	r3, [pc, #96]	; (800e480 <UART_SetConfig+0x33c>)
 800e420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e422:	f003 0307 	and.w	r3, r3, #7
 800e426:	2b05      	cmp	r3, #5
 800e428:	d838      	bhi.n	800e49c <UART_SetConfig+0x358>
 800e42a:	a201      	add	r2, pc, #4	; (adr r2, 800e430 <UART_SetConfig+0x2ec>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e449 	.word	0x0800e449
 800e434:	0800e451 	.word	0x0800e451
 800e438:	0800e459 	.word	0x0800e459
 800e43c:	0800e461 	.word	0x0800e461
 800e440:	0800e469 	.word	0x0800e469
 800e444:	0800e495 	.word	0x0800e495
 800e448:	2300      	movs	r3, #0
 800e44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e44e:	e24e      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e450:	2304      	movs	r3, #4
 800e452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e456:	e24a      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e458:	2308      	movs	r3, #8
 800e45a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e45e:	e246      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e460:	2310      	movs	r3, #16
 800e462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e466:	e242      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e468:	2320      	movs	r3, #32
 800e46a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e46e:	e23e      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e470:	cfff69f3 	.word	0xcfff69f3
 800e474:	58000c00 	.word	0x58000c00
 800e478:	11fff4ff 	.word	0x11fff4ff
 800e47c:	40011000 	.word	0x40011000
 800e480:	58024400 	.word	0x58024400
 800e484:	40004400 	.word	0x40004400
 800e488:	40004800 	.word	0x40004800
 800e48c:	40004c00 	.word	0x40004c00
 800e490:	40005000 	.word	0x40005000
 800e494:	2340      	movs	r3, #64	; 0x40
 800e496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e49a:	e228      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e49c:	2380      	movs	r3, #128	; 0x80
 800e49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4a2:	e224      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	4ab1      	ldr	r2, [pc, #708]	; (800e770 <UART_SetConfig+0x62c>)
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d176      	bne.n	800e59c <UART_SetConfig+0x458>
 800e4ae:	4bb1      	ldr	r3, [pc, #708]	; (800e774 <UART_SetConfig+0x630>)
 800e4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4b6:	2b28      	cmp	r3, #40	; 0x28
 800e4b8:	d86c      	bhi.n	800e594 <UART_SetConfig+0x450>
 800e4ba:	a201      	add	r2, pc, #4	; (adr r2, 800e4c0 <UART_SetConfig+0x37c>)
 800e4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c0:	0800e565 	.word	0x0800e565
 800e4c4:	0800e595 	.word	0x0800e595
 800e4c8:	0800e595 	.word	0x0800e595
 800e4cc:	0800e595 	.word	0x0800e595
 800e4d0:	0800e595 	.word	0x0800e595
 800e4d4:	0800e595 	.word	0x0800e595
 800e4d8:	0800e595 	.word	0x0800e595
 800e4dc:	0800e595 	.word	0x0800e595
 800e4e0:	0800e56d 	.word	0x0800e56d
 800e4e4:	0800e595 	.word	0x0800e595
 800e4e8:	0800e595 	.word	0x0800e595
 800e4ec:	0800e595 	.word	0x0800e595
 800e4f0:	0800e595 	.word	0x0800e595
 800e4f4:	0800e595 	.word	0x0800e595
 800e4f8:	0800e595 	.word	0x0800e595
 800e4fc:	0800e595 	.word	0x0800e595
 800e500:	0800e575 	.word	0x0800e575
 800e504:	0800e595 	.word	0x0800e595
 800e508:	0800e595 	.word	0x0800e595
 800e50c:	0800e595 	.word	0x0800e595
 800e510:	0800e595 	.word	0x0800e595
 800e514:	0800e595 	.word	0x0800e595
 800e518:	0800e595 	.word	0x0800e595
 800e51c:	0800e595 	.word	0x0800e595
 800e520:	0800e57d 	.word	0x0800e57d
 800e524:	0800e595 	.word	0x0800e595
 800e528:	0800e595 	.word	0x0800e595
 800e52c:	0800e595 	.word	0x0800e595
 800e530:	0800e595 	.word	0x0800e595
 800e534:	0800e595 	.word	0x0800e595
 800e538:	0800e595 	.word	0x0800e595
 800e53c:	0800e595 	.word	0x0800e595
 800e540:	0800e585 	.word	0x0800e585
 800e544:	0800e595 	.word	0x0800e595
 800e548:	0800e595 	.word	0x0800e595
 800e54c:	0800e595 	.word	0x0800e595
 800e550:	0800e595 	.word	0x0800e595
 800e554:	0800e595 	.word	0x0800e595
 800e558:	0800e595 	.word	0x0800e595
 800e55c:	0800e595 	.word	0x0800e595
 800e560:	0800e58d 	.word	0x0800e58d
 800e564:	2301      	movs	r3, #1
 800e566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e56a:	e1c0      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e56c:	2304      	movs	r3, #4
 800e56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e572:	e1bc      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e574:	2308      	movs	r3, #8
 800e576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e57a:	e1b8      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e57c:	2310      	movs	r3, #16
 800e57e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e582:	e1b4      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e584:	2320      	movs	r3, #32
 800e586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e58a:	e1b0      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e58c:	2340      	movs	r3, #64	; 0x40
 800e58e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e592:	e1ac      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e594:	2380      	movs	r3, #128	; 0x80
 800e596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e59a:	e1a8      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	4a75      	ldr	r2, [pc, #468]	; (800e778 <UART_SetConfig+0x634>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d130      	bne.n	800e608 <UART_SetConfig+0x4c4>
 800e5a6:	4b73      	ldr	r3, [pc, #460]	; (800e774 <UART_SetConfig+0x630>)
 800e5a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5aa:	f003 0307 	and.w	r3, r3, #7
 800e5ae:	2b05      	cmp	r3, #5
 800e5b0:	d826      	bhi.n	800e600 <UART_SetConfig+0x4bc>
 800e5b2:	a201      	add	r2, pc, #4	; (adr r2, 800e5b8 <UART_SetConfig+0x474>)
 800e5b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b8:	0800e5d1 	.word	0x0800e5d1
 800e5bc:	0800e5d9 	.word	0x0800e5d9
 800e5c0:	0800e5e1 	.word	0x0800e5e1
 800e5c4:	0800e5e9 	.word	0x0800e5e9
 800e5c8:	0800e5f1 	.word	0x0800e5f1
 800e5cc:	0800e5f9 	.word	0x0800e5f9
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5d6:	e18a      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e5d8:	2304      	movs	r3, #4
 800e5da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5de:	e186      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e5e0:	2308      	movs	r3, #8
 800e5e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5e6:	e182      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e5e8:	2310      	movs	r3, #16
 800e5ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5ee:	e17e      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e5f0:	2320      	movs	r3, #32
 800e5f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5f6:	e17a      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e5f8:	2340      	movs	r3, #64	; 0x40
 800e5fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e5fe:	e176      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e600:	2380      	movs	r3, #128	; 0x80
 800e602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e606:	e172      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a5b      	ldr	r2, [pc, #364]	; (800e77c <UART_SetConfig+0x638>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d130      	bne.n	800e674 <UART_SetConfig+0x530>
 800e612:	4b58      	ldr	r3, [pc, #352]	; (800e774 <UART_SetConfig+0x630>)
 800e614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e616:	f003 0307 	and.w	r3, r3, #7
 800e61a:	2b05      	cmp	r3, #5
 800e61c:	d826      	bhi.n	800e66c <UART_SetConfig+0x528>
 800e61e:	a201      	add	r2, pc, #4	; (adr r2, 800e624 <UART_SetConfig+0x4e0>)
 800e620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e624:	0800e63d 	.word	0x0800e63d
 800e628:	0800e645 	.word	0x0800e645
 800e62c:	0800e64d 	.word	0x0800e64d
 800e630:	0800e655 	.word	0x0800e655
 800e634:	0800e65d 	.word	0x0800e65d
 800e638:	0800e665 	.word	0x0800e665
 800e63c:	2300      	movs	r3, #0
 800e63e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e642:	e154      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e644:	2304      	movs	r3, #4
 800e646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e64a:	e150      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e64c:	2308      	movs	r3, #8
 800e64e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e652:	e14c      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e654:	2310      	movs	r3, #16
 800e656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e65a:	e148      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e65c:	2320      	movs	r3, #32
 800e65e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e662:	e144      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e664:	2340      	movs	r3, #64	; 0x40
 800e666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e66a:	e140      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e66c:	2380      	movs	r3, #128	; 0x80
 800e66e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e672:	e13c      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a41      	ldr	r2, [pc, #260]	; (800e780 <UART_SetConfig+0x63c>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	f040 8082 	bne.w	800e784 <UART_SetConfig+0x640>
 800e680:	4b3c      	ldr	r3, [pc, #240]	; (800e774 <UART_SetConfig+0x630>)
 800e682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e684:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e688:	2b28      	cmp	r3, #40	; 0x28
 800e68a:	d86d      	bhi.n	800e768 <UART_SetConfig+0x624>
 800e68c:	a201      	add	r2, pc, #4	; (adr r2, 800e694 <UART_SetConfig+0x550>)
 800e68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e692:	bf00      	nop
 800e694:	0800e739 	.word	0x0800e739
 800e698:	0800e769 	.word	0x0800e769
 800e69c:	0800e769 	.word	0x0800e769
 800e6a0:	0800e769 	.word	0x0800e769
 800e6a4:	0800e769 	.word	0x0800e769
 800e6a8:	0800e769 	.word	0x0800e769
 800e6ac:	0800e769 	.word	0x0800e769
 800e6b0:	0800e769 	.word	0x0800e769
 800e6b4:	0800e741 	.word	0x0800e741
 800e6b8:	0800e769 	.word	0x0800e769
 800e6bc:	0800e769 	.word	0x0800e769
 800e6c0:	0800e769 	.word	0x0800e769
 800e6c4:	0800e769 	.word	0x0800e769
 800e6c8:	0800e769 	.word	0x0800e769
 800e6cc:	0800e769 	.word	0x0800e769
 800e6d0:	0800e769 	.word	0x0800e769
 800e6d4:	0800e749 	.word	0x0800e749
 800e6d8:	0800e769 	.word	0x0800e769
 800e6dc:	0800e769 	.word	0x0800e769
 800e6e0:	0800e769 	.word	0x0800e769
 800e6e4:	0800e769 	.word	0x0800e769
 800e6e8:	0800e769 	.word	0x0800e769
 800e6ec:	0800e769 	.word	0x0800e769
 800e6f0:	0800e769 	.word	0x0800e769
 800e6f4:	0800e751 	.word	0x0800e751
 800e6f8:	0800e769 	.word	0x0800e769
 800e6fc:	0800e769 	.word	0x0800e769
 800e700:	0800e769 	.word	0x0800e769
 800e704:	0800e769 	.word	0x0800e769
 800e708:	0800e769 	.word	0x0800e769
 800e70c:	0800e769 	.word	0x0800e769
 800e710:	0800e769 	.word	0x0800e769
 800e714:	0800e759 	.word	0x0800e759
 800e718:	0800e769 	.word	0x0800e769
 800e71c:	0800e769 	.word	0x0800e769
 800e720:	0800e769 	.word	0x0800e769
 800e724:	0800e769 	.word	0x0800e769
 800e728:	0800e769 	.word	0x0800e769
 800e72c:	0800e769 	.word	0x0800e769
 800e730:	0800e769 	.word	0x0800e769
 800e734:	0800e761 	.word	0x0800e761
 800e738:	2301      	movs	r3, #1
 800e73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e73e:	e0d6      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e740:	2304      	movs	r3, #4
 800e742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e746:	e0d2      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e748:	2308      	movs	r3, #8
 800e74a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e74e:	e0ce      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e750:	2310      	movs	r3, #16
 800e752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e756:	e0ca      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e758:	2320      	movs	r3, #32
 800e75a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e75e:	e0c6      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e760:	2340      	movs	r3, #64	; 0x40
 800e762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e766:	e0c2      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e768:	2380      	movs	r3, #128	; 0x80
 800e76a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e76e:	e0be      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e770:	40011400 	.word	0x40011400
 800e774:	58024400 	.word	0x58024400
 800e778:	40007800 	.word	0x40007800
 800e77c:	40007c00 	.word	0x40007c00
 800e780:	40011800 	.word	0x40011800
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	4aad      	ldr	r2, [pc, #692]	; (800ea40 <UART_SetConfig+0x8fc>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d176      	bne.n	800e87c <UART_SetConfig+0x738>
 800e78e:	4bad      	ldr	r3, [pc, #692]	; (800ea44 <UART_SetConfig+0x900>)
 800e790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e796:	2b28      	cmp	r3, #40	; 0x28
 800e798:	d86c      	bhi.n	800e874 <UART_SetConfig+0x730>
 800e79a:	a201      	add	r2, pc, #4	; (adr r2, 800e7a0 <UART_SetConfig+0x65c>)
 800e79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a0:	0800e845 	.word	0x0800e845
 800e7a4:	0800e875 	.word	0x0800e875
 800e7a8:	0800e875 	.word	0x0800e875
 800e7ac:	0800e875 	.word	0x0800e875
 800e7b0:	0800e875 	.word	0x0800e875
 800e7b4:	0800e875 	.word	0x0800e875
 800e7b8:	0800e875 	.word	0x0800e875
 800e7bc:	0800e875 	.word	0x0800e875
 800e7c0:	0800e84d 	.word	0x0800e84d
 800e7c4:	0800e875 	.word	0x0800e875
 800e7c8:	0800e875 	.word	0x0800e875
 800e7cc:	0800e875 	.word	0x0800e875
 800e7d0:	0800e875 	.word	0x0800e875
 800e7d4:	0800e875 	.word	0x0800e875
 800e7d8:	0800e875 	.word	0x0800e875
 800e7dc:	0800e875 	.word	0x0800e875
 800e7e0:	0800e855 	.word	0x0800e855
 800e7e4:	0800e875 	.word	0x0800e875
 800e7e8:	0800e875 	.word	0x0800e875
 800e7ec:	0800e875 	.word	0x0800e875
 800e7f0:	0800e875 	.word	0x0800e875
 800e7f4:	0800e875 	.word	0x0800e875
 800e7f8:	0800e875 	.word	0x0800e875
 800e7fc:	0800e875 	.word	0x0800e875
 800e800:	0800e85d 	.word	0x0800e85d
 800e804:	0800e875 	.word	0x0800e875
 800e808:	0800e875 	.word	0x0800e875
 800e80c:	0800e875 	.word	0x0800e875
 800e810:	0800e875 	.word	0x0800e875
 800e814:	0800e875 	.word	0x0800e875
 800e818:	0800e875 	.word	0x0800e875
 800e81c:	0800e875 	.word	0x0800e875
 800e820:	0800e865 	.word	0x0800e865
 800e824:	0800e875 	.word	0x0800e875
 800e828:	0800e875 	.word	0x0800e875
 800e82c:	0800e875 	.word	0x0800e875
 800e830:	0800e875 	.word	0x0800e875
 800e834:	0800e875 	.word	0x0800e875
 800e838:	0800e875 	.word	0x0800e875
 800e83c:	0800e875 	.word	0x0800e875
 800e840:	0800e86d 	.word	0x0800e86d
 800e844:	2301      	movs	r3, #1
 800e846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e84a:	e050      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e84c:	2304      	movs	r3, #4
 800e84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e852:	e04c      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e854:	2308      	movs	r3, #8
 800e856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e85a:	e048      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e85c:	2310      	movs	r3, #16
 800e85e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e862:	e044      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e864:	2320      	movs	r3, #32
 800e866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e86a:	e040      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e86c:	2340      	movs	r3, #64	; 0x40
 800e86e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e872:	e03c      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e874:	2380      	movs	r3, #128	; 0x80
 800e876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e87a:	e038      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a71      	ldr	r2, [pc, #452]	; (800ea48 <UART_SetConfig+0x904>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d130      	bne.n	800e8e8 <UART_SetConfig+0x7a4>
 800e886:	4b6f      	ldr	r3, [pc, #444]	; (800ea44 <UART_SetConfig+0x900>)
 800e888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e88a:	f003 0307 	and.w	r3, r3, #7
 800e88e:	2b05      	cmp	r3, #5
 800e890:	d826      	bhi.n	800e8e0 <UART_SetConfig+0x79c>
 800e892:	a201      	add	r2, pc, #4	; (adr r2, 800e898 <UART_SetConfig+0x754>)
 800e894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e898:	0800e8b1 	.word	0x0800e8b1
 800e89c:	0800e8b9 	.word	0x0800e8b9
 800e8a0:	0800e8c1 	.word	0x0800e8c1
 800e8a4:	0800e8c9 	.word	0x0800e8c9
 800e8a8:	0800e8d1 	.word	0x0800e8d1
 800e8ac:	0800e8d9 	.word	0x0800e8d9
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8b6:	e01a      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e8b8:	2304      	movs	r3, #4
 800e8ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8be:	e016      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e8c0:	2308      	movs	r3, #8
 800e8c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8c6:	e012      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e8c8:	2310      	movs	r3, #16
 800e8ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8ce:	e00e      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e8d0:	2320      	movs	r3, #32
 800e8d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8d6:	e00a      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e8d8:	2340      	movs	r3, #64	; 0x40
 800e8da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8de:	e006      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e8e0:	2380      	movs	r3, #128	; 0x80
 800e8e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e8e6:	e002      	b.n	800e8ee <UART_SetConfig+0x7aa>
 800e8e8:	2380      	movs	r3, #128	; 0x80
 800e8ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	4a55      	ldr	r2, [pc, #340]	; (800ea48 <UART_SetConfig+0x904>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	f040 80f0 	bne.w	800eada <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e8fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e8fe:	2b20      	cmp	r3, #32
 800e900:	dc46      	bgt.n	800e990 <UART_SetConfig+0x84c>
 800e902:	2b02      	cmp	r3, #2
 800e904:	db75      	blt.n	800e9f2 <UART_SetConfig+0x8ae>
 800e906:	3b02      	subs	r3, #2
 800e908:	2b1e      	cmp	r3, #30
 800e90a:	d872      	bhi.n	800e9f2 <UART_SetConfig+0x8ae>
 800e90c:	a201      	add	r2, pc, #4	; (adr r2, 800e914 <UART_SetConfig+0x7d0>)
 800e90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e912:	bf00      	nop
 800e914:	0800e997 	.word	0x0800e997
 800e918:	0800e9f3 	.word	0x0800e9f3
 800e91c:	0800e99f 	.word	0x0800e99f
 800e920:	0800e9f3 	.word	0x0800e9f3
 800e924:	0800e9f3 	.word	0x0800e9f3
 800e928:	0800e9f3 	.word	0x0800e9f3
 800e92c:	0800e9af 	.word	0x0800e9af
 800e930:	0800e9f3 	.word	0x0800e9f3
 800e934:	0800e9f3 	.word	0x0800e9f3
 800e938:	0800e9f3 	.word	0x0800e9f3
 800e93c:	0800e9f3 	.word	0x0800e9f3
 800e940:	0800e9f3 	.word	0x0800e9f3
 800e944:	0800e9f3 	.word	0x0800e9f3
 800e948:	0800e9f3 	.word	0x0800e9f3
 800e94c:	0800e9bf 	.word	0x0800e9bf
 800e950:	0800e9f3 	.word	0x0800e9f3
 800e954:	0800e9f3 	.word	0x0800e9f3
 800e958:	0800e9f3 	.word	0x0800e9f3
 800e95c:	0800e9f3 	.word	0x0800e9f3
 800e960:	0800e9f3 	.word	0x0800e9f3
 800e964:	0800e9f3 	.word	0x0800e9f3
 800e968:	0800e9f3 	.word	0x0800e9f3
 800e96c:	0800e9f3 	.word	0x0800e9f3
 800e970:	0800e9f3 	.word	0x0800e9f3
 800e974:	0800e9f3 	.word	0x0800e9f3
 800e978:	0800e9f3 	.word	0x0800e9f3
 800e97c:	0800e9f3 	.word	0x0800e9f3
 800e980:	0800e9f3 	.word	0x0800e9f3
 800e984:	0800e9f3 	.word	0x0800e9f3
 800e988:	0800e9f3 	.word	0x0800e9f3
 800e98c:	0800e9e5 	.word	0x0800e9e5
 800e990:	2b40      	cmp	r3, #64	; 0x40
 800e992:	d02a      	beq.n	800e9ea <UART_SetConfig+0x8a6>
 800e994:	e02d      	b.n	800e9f2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e996:	f7fc f81d 	bl	800a9d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e99a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e99c:	e02f      	b.n	800e9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e99e:	f107 0314 	add.w	r3, r7, #20
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fc f82c 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e9ac:	e027      	b.n	800e9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9ae:	f107 0308 	add.w	r3, r7, #8
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fc f978 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e9bc:	e01f      	b.n	800e9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9be:	4b21      	ldr	r3, [pc, #132]	; (800ea44 <UART_SetConfig+0x900>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f003 0320 	and.w	r3, r3, #32
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d009      	beq.n	800e9de <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e9ca:	4b1e      	ldr	r3, [pc, #120]	; (800ea44 <UART_SetConfig+0x900>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	08db      	lsrs	r3, r3, #3
 800e9d0:	f003 0303 	and.w	r3, r3, #3
 800e9d4:	4a1d      	ldr	r2, [pc, #116]	; (800ea4c <UART_SetConfig+0x908>)
 800e9d6:	fa22 f303 	lsr.w	r3, r2, r3
 800e9da:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9dc:	e00f      	b.n	800e9fe <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800e9de:	4b1b      	ldr	r3, [pc, #108]	; (800ea4c <UART_SetConfig+0x908>)
 800e9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e9e2:	e00c      	b.n	800e9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9e4:	4b1a      	ldr	r3, [pc, #104]	; (800ea50 <UART_SetConfig+0x90c>)
 800e9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e9e8:	e009      	b.n	800e9fe <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e9f0:	e005      	b.n	800e9fe <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e9fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f000 81e6 	beq.w	800edd2 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0a:	4a12      	ldr	r2, [pc, #72]	; (800ea54 <UART_SetConfig+0x910>)
 800ea0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea10:	461a      	mov	r2, r3
 800ea12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea14:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea18:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	685a      	ldr	r2, [r3, #4]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	4413      	add	r3, r2
 800ea24:	6a3a      	ldr	r2, [r7, #32]
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d305      	bcc.n	800ea36 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ea30:	6a3a      	ldr	r2, [r7, #32]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d910      	bls.n	800ea58 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800ea36:	2301      	movs	r3, #1
 800ea38:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ea3c:	e1c9      	b.n	800edd2 <UART_SetConfig+0xc8e>
 800ea3e:	bf00      	nop
 800ea40:	40011c00 	.word	0x40011c00
 800ea44:	58024400 	.word	0x58024400
 800ea48:	58000c00 	.word	0x58000c00
 800ea4c:	03d09000 	.word	0x03d09000
 800ea50:	003d0900 	.word	0x003d0900
 800ea54:	0800f874 	.word	0x0800f874
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f04f 0100 	mov.w	r1, #0
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea64:	4ac1      	ldr	r2, [pc, #772]	; (800ed6c <UART_SetConfig+0xc28>)
 800ea66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	f04f 0300 	mov.w	r3, #0
 800ea70:	f7f1 fc4e 	bl	8000310 <__aeabi_uldivmod>
 800ea74:	4602      	mov	r2, r0
 800ea76:	460b      	mov	r3, r1
 800ea78:	4610      	mov	r0, r2
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	f04f 0200 	mov.w	r2, #0
 800ea80:	f04f 0300 	mov.w	r3, #0
 800ea84:	020b      	lsls	r3, r1, #8
 800ea86:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ea8a:	0202      	lsls	r2, r0, #8
 800ea8c:	6879      	ldr	r1, [r7, #4]
 800ea8e:	6849      	ldr	r1, [r1, #4]
 800ea90:	0849      	lsrs	r1, r1, #1
 800ea92:	4608      	mov	r0, r1
 800ea94:	f04f 0100 	mov.w	r1, #0
 800ea98:	1814      	adds	r4, r2, r0
 800ea9a:	eb43 0501 	adc.w	r5, r3, r1
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	685b      	ldr	r3, [r3, #4]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	f04f 0300 	mov.w	r3, #0
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	4629      	mov	r1, r5
 800eaac:	f7f1 fc30 	bl	8000310 <__aeabi_uldivmod>
 800eab0:	4602      	mov	r2, r0
 800eab2:	460b      	mov	r3, r1
 800eab4:	4613      	mov	r3, r2
 800eab6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eabe:	d308      	bcc.n	800ead2 <UART_SetConfig+0x98e>
 800eac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eac6:	d204      	bcs.n	800ead2 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eace:	60da      	str	r2, [r3, #12]
 800ead0:	e17f      	b.n	800edd2 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800ead2:	2301      	movs	r3, #1
 800ead4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ead8:	e17b      	b.n	800edd2 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	69db      	ldr	r3, [r3, #28]
 800eade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eae2:	f040 80bd 	bne.w	800ec60 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800eae6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eaea:	2b20      	cmp	r3, #32
 800eaec:	dc48      	bgt.n	800eb80 <UART_SetConfig+0xa3c>
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	db7b      	blt.n	800ebea <UART_SetConfig+0xaa6>
 800eaf2:	2b20      	cmp	r3, #32
 800eaf4:	d879      	bhi.n	800ebea <UART_SetConfig+0xaa6>
 800eaf6:	a201      	add	r2, pc, #4	; (adr r2, 800eafc <UART_SetConfig+0x9b8>)
 800eaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafc:	0800eb87 	.word	0x0800eb87
 800eb00:	0800eb8f 	.word	0x0800eb8f
 800eb04:	0800ebeb 	.word	0x0800ebeb
 800eb08:	0800ebeb 	.word	0x0800ebeb
 800eb0c:	0800eb97 	.word	0x0800eb97
 800eb10:	0800ebeb 	.word	0x0800ebeb
 800eb14:	0800ebeb 	.word	0x0800ebeb
 800eb18:	0800ebeb 	.word	0x0800ebeb
 800eb1c:	0800eba7 	.word	0x0800eba7
 800eb20:	0800ebeb 	.word	0x0800ebeb
 800eb24:	0800ebeb 	.word	0x0800ebeb
 800eb28:	0800ebeb 	.word	0x0800ebeb
 800eb2c:	0800ebeb 	.word	0x0800ebeb
 800eb30:	0800ebeb 	.word	0x0800ebeb
 800eb34:	0800ebeb 	.word	0x0800ebeb
 800eb38:	0800ebeb 	.word	0x0800ebeb
 800eb3c:	0800ebb7 	.word	0x0800ebb7
 800eb40:	0800ebeb 	.word	0x0800ebeb
 800eb44:	0800ebeb 	.word	0x0800ebeb
 800eb48:	0800ebeb 	.word	0x0800ebeb
 800eb4c:	0800ebeb 	.word	0x0800ebeb
 800eb50:	0800ebeb 	.word	0x0800ebeb
 800eb54:	0800ebeb 	.word	0x0800ebeb
 800eb58:	0800ebeb 	.word	0x0800ebeb
 800eb5c:	0800ebeb 	.word	0x0800ebeb
 800eb60:	0800ebeb 	.word	0x0800ebeb
 800eb64:	0800ebeb 	.word	0x0800ebeb
 800eb68:	0800ebeb 	.word	0x0800ebeb
 800eb6c:	0800ebeb 	.word	0x0800ebeb
 800eb70:	0800ebeb 	.word	0x0800ebeb
 800eb74:	0800ebeb 	.word	0x0800ebeb
 800eb78:	0800ebeb 	.word	0x0800ebeb
 800eb7c:	0800ebdd 	.word	0x0800ebdd
 800eb80:	2b40      	cmp	r3, #64	; 0x40
 800eb82:	d02e      	beq.n	800ebe2 <UART_SetConfig+0xa9e>
 800eb84:	e031      	b.n	800ebea <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb86:	f7fa fbdb 	bl	8009340 <HAL_RCC_GetPCLK1Freq>
 800eb8a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800eb8c:	e033      	b.n	800ebf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb8e:	f7fa fbed 	bl	800936c <HAL_RCC_GetPCLK2Freq>
 800eb92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800eb94:	e02f      	b.n	800ebf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb96:	f107 0314 	add.w	r3, r7, #20
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7fb ff30 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eba4:	e027      	b.n	800ebf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eba6:	f107 0308 	add.w	r3, r7, #8
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f7fc f87c 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebb4:	e01f      	b.n	800ebf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ebb6:	4b6e      	ldr	r3, [pc, #440]	; (800ed70 <UART_SetConfig+0xc2c>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f003 0320 	and.w	r3, r3, #32
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d009      	beq.n	800ebd6 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebc2:	4b6b      	ldr	r3, [pc, #428]	; (800ed70 <UART_SetConfig+0xc2c>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	08db      	lsrs	r3, r3, #3
 800ebc8:	f003 0303 	and.w	r3, r3, #3
 800ebcc:	4a69      	ldr	r2, [pc, #420]	; (800ed74 <UART_SetConfig+0xc30>)
 800ebce:	fa22 f303 	lsr.w	r3, r2, r3
 800ebd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebd4:	e00f      	b.n	800ebf6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800ebd6:	4b67      	ldr	r3, [pc, #412]	; (800ed74 <UART_SetConfig+0xc30>)
 800ebd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebda:	e00c      	b.n	800ebf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebdc:	4b66      	ldr	r3, [pc, #408]	; (800ed78 <UART_SetConfig+0xc34>)
 800ebde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebe0:	e009      	b.n	800ebf6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ebe8:	e005      	b.n	800ebf6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ebea:	2300      	movs	r3, #0
 800ebec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ebf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f000 80ea 	beq.w	800edd2 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec02:	4a5a      	ldr	r2, [pc, #360]	; (800ed6c <UART_SetConfig+0xc28>)
 800ec04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec08:	461a      	mov	r2, r3
 800ec0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec10:	005a      	lsls	r2, r3, #1
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	085b      	lsrs	r3, r3, #1
 800ec18:	441a      	add	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec26:	2b0f      	cmp	r3, #15
 800ec28:	d916      	bls.n	800ec58 <UART_SetConfig+0xb14>
 800ec2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec30:	d212      	bcs.n	800ec58 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ec32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec34:	b29b      	uxth	r3, r3
 800ec36:	f023 030f 	bic.w	r3, r3, #15
 800ec3a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ec3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3e:	085b      	lsrs	r3, r3, #1
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	f003 0307 	and.w	r3, r3, #7
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ec54:	60da      	str	r2, [r3, #12]
 800ec56:	e0bc      	b.n	800edd2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ec5e:	e0b8      	b.n	800edd2 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ec60:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ec64:	2b20      	cmp	r3, #32
 800ec66:	dc4b      	bgt.n	800ed00 <UART_SetConfig+0xbbc>
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	f2c0 8087 	blt.w	800ed7c <UART_SetConfig+0xc38>
 800ec6e:	2b20      	cmp	r3, #32
 800ec70:	f200 8084 	bhi.w	800ed7c <UART_SetConfig+0xc38>
 800ec74:	a201      	add	r2, pc, #4	; (adr r2, 800ec7c <UART_SetConfig+0xb38>)
 800ec76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec7a:	bf00      	nop
 800ec7c:	0800ed07 	.word	0x0800ed07
 800ec80:	0800ed0f 	.word	0x0800ed0f
 800ec84:	0800ed7d 	.word	0x0800ed7d
 800ec88:	0800ed7d 	.word	0x0800ed7d
 800ec8c:	0800ed17 	.word	0x0800ed17
 800ec90:	0800ed7d 	.word	0x0800ed7d
 800ec94:	0800ed7d 	.word	0x0800ed7d
 800ec98:	0800ed7d 	.word	0x0800ed7d
 800ec9c:	0800ed27 	.word	0x0800ed27
 800eca0:	0800ed7d 	.word	0x0800ed7d
 800eca4:	0800ed7d 	.word	0x0800ed7d
 800eca8:	0800ed7d 	.word	0x0800ed7d
 800ecac:	0800ed7d 	.word	0x0800ed7d
 800ecb0:	0800ed7d 	.word	0x0800ed7d
 800ecb4:	0800ed7d 	.word	0x0800ed7d
 800ecb8:	0800ed7d 	.word	0x0800ed7d
 800ecbc:	0800ed37 	.word	0x0800ed37
 800ecc0:	0800ed7d 	.word	0x0800ed7d
 800ecc4:	0800ed7d 	.word	0x0800ed7d
 800ecc8:	0800ed7d 	.word	0x0800ed7d
 800eccc:	0800ed7d 	.word	0x0800ed7d
 800ecd0:	0800ed7d 	.word	0x0800ed7d
 800ecd4:	0800ed7d 	.word	0x0800ed7d
 800ecd8:	0800ed7d 	.word	0x0800ed7d
 800ecdc:	0800ed7d 	.word	0x0800ed7d
 800ece0:	0800ed7d 	.word	0x0800ed7d
 800ece4:	0800ed7d 	.word	0x0800ed7d
 800ece8:	0800ed7d 	.word	0x0800ed7d
 800ecec:	0800ed7d 	.word	0x0800ed7d
 800ecf0:	0800ed7d 	.word	0x0800ed7d
 800ecf4:	0800ed7d 	.word	0x0800ed7d
 800ecf8:	0800ed7d 	.word	0x0800ed7d
 800ecfc:	0800ed5d 	.word	0x0800ed5d
 800ed00:	2b40      	cmp	r3, #64	; 0x40
 800ed02:	d02e      	beq.n	800ed62 <UART_SetConfig+0xc1e>
 800ed04:	e03a      	b.n	800ed7c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed06:	f7fa fb1b 	bl	8009340 <HAL_RCC_GetPCLK1Freq>
 800ed0a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ed0c:	e03c      	b.n	800ed88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ed0e:	f7fa fb2d 	bl	800936c <HAL_RCC_GetPCLK2Freq>
 800ed12:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ed14:	e038      	b.n	800ed88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed16:	f107 0314 	add.w	r3, r7, #20
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7fb fe70 	bl	800aa00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ed20:	69bb      	ldr	r3, [r7, #24]
 800ed22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed24:	e030      	b.n	800ed88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed26:	f107 0308 	add.w	r3, r7, #8
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	f7fb ffbc 	bl	800aca8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed34:	e028      	b.n	800ed88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ed36:	4b0e      	ldr	r3, [pc, #56]	; (800ed70 <UART_SetConfig+0xc2c>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 0320 	and.w	r3, r3, #32
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d009      	beq.n	800ed56 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ed42:	4b0b      	ldr	r3, [pc, #44]	; (800ed70 <UART_SetConfig+0xc2c>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	08db      	lsrs	r3, r3, #3
 800ed48:	f003 0303 	and.w	r3, r3, #3
 800ed4c:	4a09      	ldr	r2, [pc, #36]	; (800ed74 <UART_SetConfig+0xc30>)
 800ed4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ed52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ed54:	e018      	b.n	800ed88 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ed56:	4b07      	ldr	r3, [pc, #28]	; (800ed74 <UART_SetConfig+0xc30>)
 800ed58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed5a:	e015      	b.n	800ed88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ed5c:	4b06      	ldr	r3, [pc, #24]	; (800ed78 <UART_SetConfig+0xc34>)
 800ed5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed60:	e012      	b.n	800ed88 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ed68:	e00e      	b.n	800ed88 <UART_SetConfig+0xc44>
 800ed6a:	bf00      	nop
 800ed6c:	0800f874 	.word	0x0800f874
 800ed70:	58024400 	.word	0x58024400
 800ed74:	03d09000 	.word	0x03d09000
 800ed78:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ed80:	2301      	movs	r3, #1
 800ed82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ed86:	bf00      	nop
    }

    if (pclk != 0U)
 800ed88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d021      	beq.n	800edd2 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed92:	4a1a      	ldr	r2, [pc, #104]	; (800edfc <UART_SetConfig+0xcb8>)
 800ed94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9c:	fbb3 f2f2 	udiv	r2, r3, r2
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	085b      	lsrs	r3, r3, #1
 800eda6:	441a      	add	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	fbb2 f3f3 	udiv	r3, r2, r3
 800edb0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800edb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb4:	2b0f      	cmp	r3, #15
 800edb6:	d909      	bls.n	800edcc <UART_SetConfig+0xc88>
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edbe:	d205      	bcs.n	800edcc <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800edc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	60da      	str	r2, [r3, #12]
 800edca:	e002      	b.n	800edd2 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800edcc:	2301      	movs	r3, #1
 800edce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2201      	movs	r2, #1
 800edd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2201      	movs	r2, #1
 800edde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2200      	movs	r2, #0
 800ede6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800edee:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800edf2:	4618      	mov	r0, r3
 800edf4:	3738      	adds	r7, #56	; 0x38
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bdb0      	pop	{r4, r5, r7, pc}
 800edfa:	bf00      	nop
 800edfc:	0800f874 	.word	0x0800f874

0800ee00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee0c:	f003 0301 	and.w	r3, r3, #1
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d00a      	beq.n	800ee2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	685b      	ldr	r3, [r3, #4]
 800ee1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	430a      	orrs	r2, r1
 800ee28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2e:	f003 0302 	and.w	r3, r3, #2
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d00a      	beq.n	800ee4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	430a      	orrs	r2, r1
 800ee4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee50:	f003 0304 	and.w	r3, r3, #4
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00a      	beq.n	800ee6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	430a      	orrs	r2, r1
 800ee6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee72:	f003 0308 	and.w	r3, r3, #8
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d00a      	beq.n	800ee90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	430a      	orrs	r2, r1
 800ee8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee94:	f003 0310 	and.w	r3, r3, #16
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00a      	beq.n	800eeb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	430a      	orrs	r2, r1
 800eeb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeb6:	f003 0320 	and.w	r3, r3, #32
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00a      	beq.n	800eed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	689b      	ldr	r3, [r3, #8]
 800eec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	430a      	orrs	r2, r1
 800eed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d01a      	beq.n	800ef16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	430a      	orrs	r2, r1
 800eef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eefa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eefe:	d10a      	bne.n	800ef16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	430a      	orrs	r2, r1
 800ef14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d00a      	beq.n	800ef38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	685b      	ldr	r3, [r3, #4]
 800ef28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	430a      	orrs	r2, r1
 800ef36:	605a      	str	r2, [r3, #4]
  }
}
 800ef38:	bf00      	nop
 800ef3a:	370c      	adds	r7, #12
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b086      	sub	sp, #24
 800ef48:	af02      	add	r7, sp, #8
 800ef4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2200      	movs	r2, #0
 800ef50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ef54:	f7f4 fc8a 	bl	800386c <HAL_GetTick>
 800ef58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f003 0308 	and.w	r3, r3, #8
 800ef64:	2b08      	cmp	r3, #8
 800ef66:	d10e      	bne.n	800ef86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef6c:	9300      	str	r3, [sp, #0]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ef76:	6878      	ldr	r0, [r7, #4]
 800ef78:	f000 f82f 	bl	800efda <UART_WaitOnFlagUntilTimeout>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d001      	beq.n	800ef86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef82:	2303      	movs	r3, #3
 800ef84:	e025      	b.n	800efd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f003 0304 	and.w	r3, r3, #4
 800ef90:	2b04      	cmp	r3, #4
 800ef92:	d10e      	bne.n	800efb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ef94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2200      	movs	r2, #0
 800ef9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f819 	bl	800efda <UART_WaitOnFlagUntilTimeout>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d001      	beq.n	800efb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800efae:	2303      	movs	r3, #3
 800efb0:	e00f      	b.n	800efd2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2220      	movs	r2, #32
 800efb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2220      	movs	r2, #32
 800efbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2200      	movs	r2, #0
 800efc6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800efd0:	2300      	movs	r3, #0
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}

0800efda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b09c      	sub	sp, #112	; 0x70
 800efde:	af00      	add	r7, sp, #0
 800efe0:	60f8      	str	r0, [r7, #12]
 800efe2:	60b9      	str	r1, [r7, #8]
 800efe4:	603b      	str	r3, [r7, #0]
 800efe6:	4613      	mov	r3, r2
 800efe8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efea:	e0a9      	b.n	800f140 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800efec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eff2:	f000 80a5 	beq.w	800f140 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eff6:	f7f4 fc39 	bl	800386c <HAL_GetTick>
 800effa:	4602      	mov	r2, r0
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	1ad3      	subs	r3, r2, r3
 800f000:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f002:	429a      	cmp	r2, r3
 800f004:	d302      	bcc.n	800f00c <UART_WaitOnFlagUntilTimeout+0x32>
 800f006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d140      	bne.n	800f08e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f014:	e853 3f00 	ldrex	r3, [r3]
 800f018:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f01c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f020:	667b      	str	r3, [r7, #100]	; 0x64
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	461a      	mov	r2, r3
 800f028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f02a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f02c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f02e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f030:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f032:	e841 2300 	strex	r3, r2, [r1]
 800f036:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d1e6      	bne.n	800f00c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	3308      	adds	r3, #8
 800f044:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f048:	e853 3f00 	ldrex	r3, [r3]
 800f04c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f050:	f023 0301 	bic.w	r3, r3, #1
 800f054:	663b      	str	r3, [r7, #96]	; 0x60
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	3308      	adds	r3, #8
 800f05c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f05e:	64ba      	str	r2, [r7, #72]	; 0x48
 800f060:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f066:	e841 2300 	strex	r3, r2, [r1]
 800f06a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f06c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d1e5      	bne.n	800f03e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2220      	movs	r2, #32
 800f076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	2220      	movs	r2, #32
 800f07e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2200      	movs	r2, #0
 800f086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f08a:	2303      	movs	r3, #3
 800f08c:	e069      	b.n	800f162 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f003 0304 	and.w	r3, r3, #4
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d051      	beq.n	800f140 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	69db      	ldr	r3, [r3, #28]
 800f0a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f0a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f0aa:	d149      	bne.n	800f140 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f0b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0be:	e853 3f00 	ldrex	r3, [r3]
 800f0c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f0ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f0d4:	637b      	str	r3, [r7, #52]	; 0x34
 800f0d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f0da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f0dc:	e841 2300 	strex	r3, r2, [r1]
 800f0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d1e6      	bne.n	800f0b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	3308      	adds	r3, #8
 800f0ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	e853 3f00 	ldrex	r3, [r3]
 800f0f6:	613b      	str	r3, [r7, #16]
   return(result);
 800f0f8:	693b      	ldr	r3, [r7, #16]
 800f0fa:	f023 0301 	bic.w	r3, r3, #1
 800f0fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	3308      	adds	r3, #8
 800f106:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f108:	623a      	str	r2, [r7, #32]
 800f10a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f10c:	69f9      	ldr	r1, [r7, #28]
 800f10e:	6a3a      	ldr	r2, [r7, #32]
 800f110:	e841 2300 	strex	r3, r2, [r1]
 800f114:	61bb      	str	r3, [r7, #24]
   return(result);
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d1e5      	bne.n	800f0e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2220      	movs	r2, #32
 800f120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2220      	movs	r2, #32
 800f128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	2220      	movs	r2, #32
 800f130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2200      	movs	r2, #0
 800f138:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f13c:	2303      	movs	r3, #3
 800f13e:	e010      	b.n	800f162 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	69da      	ldr	r2, [r3, #28]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	4013      	ands	r3, r2
 800f14a:	68ba      	ldr	r2, [r7, #8]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	bf0c      	ite	eq
 800f150:	2301      	moveq	r3, #1
 800f152:	2300      	movne	r3, #0
 800f154:	b2db      	uxtb	r3, r3
 800f156:	461a      	mov	r2, r3
 800f158:	79fb      	ldrb	r3, [r7, #7]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	f43f af46 	beq.w	800efec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	3770      	adds	r7, #112	; 0x70
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
	...

0800f16c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b096      	sub	sp, #88	; 0x58
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	4613      	mov	r3, r2
 800f178:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	68ba      	ldr	r2, [r7, #8]
 800f17e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	88fa      	ldrh	r2, [r7, #6]
 800f184:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2200      	movs	r2, #0
 800f18c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2222      	movs	r2, #34	; 0x22
 800f194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d02c      	beq.n	800f1fa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1a4:	4a42      	ldr	r2, [pc, #264]	; (800f2b0 <UART_Start_Receive_DMA+0x144>)
 800f1a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1ac:	4a41      	ldr	r2, [pc, #260]	; (800f2b4 <UART_Start_Receive_DMA+0x148>)
 800f1ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1b4:	4a40      	ldr	r2, [pc, #256]	; (800f2b8 <UART_Start_Receive_DMA+0x14c>)
 800f1b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f1bc:	2200      	movs	r2, #0
 800f1be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	3324      	adds	r3, #36	; 0x24
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	88fb      	ldrh	r3, [r7, #6]
 800f1d4:	f7f7 f8ee 	bl	80063b4 <HAL_DMA_Start_IT>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00d      	beq.n	800f1fa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2210      	movs	r2, #16
 800f1e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2220      	movs	r2, #32
 800f1f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	e055      	b.n	800f2a6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	691b      	ldr	r3, [r3, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d018      	beq.n	800f23c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f212:	e853 3f00 	ldrex	r3, [r3]
 800f216:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f21e:	657b      	str	r3, [r7, #84]	; 0x54
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	461a      	mov	r2, r3
 800f226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f228:	64bb      	str	r3, [r7, #72]	; 0x48
 800f22a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f22c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f22e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f230:	e841 2300 	strex	r3, r2, [r1]
 800f234:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d1e6      	bne.n	800f20a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	3308      	adds	r3, #8
 800f242:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f246:	e853 3f00 	ldrex	r3, [r3]
 800f24a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f24e:	f043 0301 	orr.w	r3, r3, #1
 800f252:	653b      	str	r3, [r7, #80]	; 0x50
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	3308      	adds	r3, #8
 800f25a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f25c:	637a      	str	r2, [r7, #52]	; 0x34
 800f25e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f260:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f262:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f264:	e841 2300 	strex	r3, r2, [r1]
 800f268:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d1e5      	bne.n	800f23c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	3308      	adds	r3, #8
 800f276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	e853 3f00 	ldrex	r3, [r3]
 800f27e:	613b      	str	r3, [r7, #16]
   return(result);
 800f280:	693b      	ldr	r3, [r7, #16]
 800f282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f286:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	3308      	adds	r3, #8
 800f28e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f290:	623a      	str	r2, [r7, #32]
 800f292:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f294:	69f9      	ldr	r1, [r7, #28]
 800f296:	6a3a      	ldr	r2, [r7, #32]
 800f298:	e841 2300 	strex	r3, r2, [r1]
 800f29c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1e5      	bne.n	800f270 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f2a4:	2300      	movs	r3, #0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3758      	adds	r7, #88	; 0x58
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	0800f40d 	.word	0x0800f40d
 800f2b4:	0800f52f 	.word	0x0800f52f
 800f2b8:	0800f567 	.word	0x0800f567

0800f2bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b08f      	sub	sp, #60	; 0x3c
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2ca:	6a3b      	ldr	r3, [r7, #32]
 800f2cc:	e853 3f00 	ldrex	r3, [r3]
 800f2d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f2d2:	69fb      	ldr	r3, [r7, #28]
 800f2d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f2d8:	637b      	str	r3, [r7, #52]	; 0x34
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	461a      	mov	r2, r3
 800f2e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2e4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2ea:	e841 2300 	strex	r3, r2, [r1]
 800f2ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d1e6      	bne.n	800f2c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3308      	adds	r3, #8
 800f2fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	e853 3f00 	ldrex	r3, [r3]
 800f304:	60bb      	str	r3, [r7, #8]
   return(result);
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f30c:	633b      	str	r3, [r7, #48]	; 0x30
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	3308      	adds	r3, #8
 800f314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f316:	61ba      	str	r2, [r7, #24]
 800f318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f31a:	6979      	ldr	r1, [r7, #20]
 800f31c:	69ba      	ldr	r2, [r7, #24]
 800f31e:	e841 2300 	strex	r3, r2, [r1]
 800f322:	613b      	str	r3, [r7, #16]
   return(result);
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d1e5      	bne.n	800f2f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2220      	movs	r2, #32
 800f32e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f332:	bf00      	nop
 800f334:	373c      	adds	r7, #60	; 0x3c
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
	...

0800f340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f340:	b480      	push	{r7}
 800f342:	b095      	sub	sp, #84	; 0x54
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f34e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f350:	e853 3f00 	ldrex	r3, [r3]
 800f354:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f35c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	461a      	mov	r2, r3
 800f364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f366:	643b      	str	r3, [r7, #64]	; 0x40
 800f368:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f36a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f36c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f36e:	e841 2300 	strex	r3, r2, [r1]
 800f372:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f376:	2b00      	cmp	r3, #0
 800f378:	d1e6      	bne.n	800f348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	3308      	adds	r3, #8
 800f380:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f382:	6a3b      	ldr	r3, [r7, #32]
 800f384:	e853 3f00 	ldrex	r3, [r3]
 800f388:	61fb      	str	r3, [r7, #28]
   return(result);
 800f38a:	69fa      	ldr	r2, [r7, #28]
 800f38c:	4b1e      	ldr	r3, [pc, #120]	; (800f408 <UART_EndRxTransfer+0xc8>)
 800f38e:	4013      	ands	r3, r2
 800f390:	64bb      	str	r3, [r7, #72]	; 0x48
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	3308      	adds	r3, #8
 800f398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f39a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f39c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f39e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3a2:	e841 2300 	strex	r3, r2, [r1]
 800f3a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d1e5      	bne.n	800f37a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d118      	bne.n	800f3e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	e853 3f00 	ldrex	r3, [r3]
 800f3c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3c4:	68bb      	ldr	r3, [r7, #8]
 800f3c6:	f023 0310 	bic.w	r3, r3, #16
 800f3ca:	647b      	str	r3, [r7, #68]	; 0x44
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3d4:	61bb      	str	r3, [r7, #24]
 800f3d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d8:	6979      	ldr	r1, [r7, #20]
 800f3da:	69ba      	ldr	r2, [r7, #24]
 800f3dc:	e841 2300 	strex	r3, r2, [r1]
 800f3e0:	613b      	str	r3, [r7, #16]
   return(result);
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d1e6      	bne.n	800f3b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2220      	movs	r2, #32
 800f3ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f3fc:	bf00      	nop
 800f3fe:	3754      	adds	r7, #84	; 0x54
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr
 800f408:	effffffe 	.word	0xeffffffe

0800f40c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b09c      	sub	sp, #112	; 0x70
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f418:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	69db      	ldr	r3, [r3, #28]
 800f41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f422:	d071      	beq.n	800f508 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f426:	2200      	movs	r2, #0
 800f428:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f42c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f434:	e853 3f00 	ldrex	r3, [r3]
 800f438:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f43a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f43c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f440:	66bb      	str	r3, [r7, #104]	; 0x68
 800f442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	461a      	mov	r2, r3
 800f448:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f44a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f44c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f44e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f450:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f452:	e841 2300 	strex	r3, r2, [r1]
 800f456:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f458:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1e6      	bne.n	800f42c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f45e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3308      	adds	r3, #8
 800f464:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f468:	e853 3f00 	ldrex	r3, [r3]
 800f46c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f470:	f023 0301 	bic.w	r3, r3, #1
 800f474:	667b      	str	r3, [r7, #100]	; 0x64
 800f476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	3308      	adds	r3, #8
 800f47c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f47e:	647a      	str	r2, [r7, #68]	; 0x44
 800f480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f486:	e841 2300 	strex	r3, r2, [r1]
 800f48a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d1e5      	bne.n	800f45e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	3308      	adds	r3, #8
 800f498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49c:	e853 3f00 	ldrex	r3, [r3]
 800f4a0:	623b      	str	r3, [r7, #32]
   return(result);
 800f4a2:	6a3b      	ldr	r3, [r7, #32]
 800f4a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4a8:	663b      	str	r3, [r7, #96]	; 0x60
 800f4aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	3308      	adds	r3, #8
 800f4b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f4b2:	633a      	str	r2, [r7, #48]	; 0x30
 800f4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4ba:	e841 2300 	strex	r3, r2, [r1]
 800f4be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d1e5      	bne.n	800f492 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f4c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4c8:	2220      	movs	r2, #32
 800f4ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f4ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4d2:	2b01      	cmp	r3, #1
 800f4d4:	d118      	bne.n	800f508 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	e853 3f00 	ldrex	r3, [r3]
 800f4e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	f023 0310 	bic.w	r3, r3, #16
 800f4ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	461a      	mov	r2, r3
 800f4f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f4f4:	61fb      	str	r3, [r7, #28]
 800f4f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f8:	69b9      	ldr	r1, [r7, #24]
 800f4fa:	69fa      	ldr	r2, [r7, #28]
 800f4fc:	e841 2300 	strex	r3, r2, [r1]
 800f500:	617b      	str	r3, [r7, #20]
   return(result);
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d1e6      	bne.n	800f4d6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d107      	bne.n	800f520 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f512:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f516:	4619      	mov	r1, r3
 800f518:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f51a:	f7fe fe07 	bl	800e12c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f51e:	e002      	b.n	800f526 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f520:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f522:	f7fe fde5 	bl	800e0f0 <HAL_UART_RxCpltCallback>
}
 800f526:	bf00      	nop
 800f528:	3770      	adds	r7, #112	; 0x70
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b084      	sub	sp, #16
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f53a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f540:	2b01      	cmp	r3, #1
 800f542:	d109      	bne.n	800f558 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f54a:	085b      	lsrs	r3, r3, #1
 800f54c:	b29b      	uxth	r3, r3
 800f54e:	4619      	mov	r1, r3
 800f550:	68f8      	ldr	r0, [r7, #12]
 800f552:	f7fe fdeb 	bl	800e12c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f556:	e002      	b.n	800f55e <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f558:	68f8      	ldr	r0, [r7, #12]
 800f55a:	f7fe fdd3 	bl	800e104 <HAL_UART_RxHalfCpltCallback>
}
 800f55e:	bf00      	nop
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b086      	sub	sp, #24
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f572:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f57a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f582:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	689b      	ldr	r3, [r3, #8]
 800f58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f58e:	2b80      	cmp	r3, #128	; 0x80
 800f590:	d109      	bne.n	800f5a6 <UART_DMAError+0x40>
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	2b21      	cmp	r3, #33	; 0x21
 800f596:	d106      	bne.n	800f5a6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	2200      	movs	r2, #0
 800f59c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f5a0:	6978      	ldr	r0, [r7, #20]
 800f5a2:	f7ff fe8b 	bl	800f2bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5b0:	2b40      	cmp	r3, #64	; 0x40
 800f5b2:	d109      	bne.n	800f5c8 <UART_DMAError+0x62>
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2b22      	cmp	r3, #34	; 0x22
 800f5b8:	d106      	bne.n	800f5c8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f5c2:	6978      	ldr	r0, [r7, #20]
 800f5c4:	f7ff febc 	bl	800f340 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5ce:	f043 0210 	orr.w	r2, r3, #16
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f5d8:	6978      	ldr	r0, [r7, #20]
 800f5da:	f7fe fd9d 	bl	800e118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f5de:	bf00      	nop
 800f5e0:	3718      	adds	r7, #24
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bd80      	pop	{r7, pc}

0800f5e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5e6:	b480      	push	{r7}
 800f5e8:	b085      	sub	sp, #20
 800f5ea:	af00      	add	r7, sp, #0
 800f5ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d101      	bne.n	800f5fc <HAL_UARTEx_DisableFifoMode+0x16>
 800f5f8:	2302      	movs	r3, #2
 800f5fa:	e027      	b.n	800f64c <HAL_UARTEx_DisableFifoMode+0x66>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2201      	movs	r2, #1
 800f600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2224      	movs	r2, #36	; 0x24
 800f608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f022 0201 	bic.w	r2, r2, #1
 800f622:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f62a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	2200      	movs	r2, #0
 800f630:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	68fa      	ldr	r2, [r7, #12]
 800f638:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2220      	movs	r2, #32
 800f63e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2200      	movs	r2, #0
 800f646:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f64a:	2300      	movs	r3, #0
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3714      	adds	r7, #20
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d101      	bne.n	800f670 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f66c:	2302      	movs	r3, #2
 800f66e:	e02d      	b.n	800f6cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2201      	movs	r2, #1
 800f674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2224      	movs	r2, #36	; 0x24
 800f67c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	681a      	ldr	r2, [r3, #0]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f022 0201 	bic.w	r2, r2, #1
 800f696:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	430a      	orrs	r2, r1
 800f6aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 f84f 	bl	800f750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	68fa      	ldr	r2, [r7, #12]
 800f6b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2220      	movs	r2, #32
 800f6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	2200      	movs	r2, #0
 800f6c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f6ca:	2300      	movs	r3, #0
}
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	3710      	adds	r7, #16
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d101      	bne.n	800f6ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6e8:	2302      	movs	r3, #2
 800f6ea:	e02d      	b.n	800f748 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2224      	movs	r2, #36	; 0x24
 800f6f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	681a      	ldr	r2, [r3, #0]
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f022 0201 	bic.w	r2, r2, #1
 800f712:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	689b      	ldr	r3, [r3, #8]
 800f71a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	683a      	ldr	r2, [r7, #0]
 800f724:	430a      	orrs	r2, r1
 800f726:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 f811 	bl	800f750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	68fa      	ldr	r2, [r7, #12]
 800f734:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	2220      	movs	r2, #32
 800f73a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2200      	movs	r2, #0
 800f742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f746:	2300      	movs	r3, #0
}
 800f748:	4618      	mov	r0, r3
 800f74a:	3710      	adds	r7, #16
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}

0800f750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f750:	b480      	push	{r7}
 800f752:	b085      	sub	sp, #20
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d108      	bne.n	800f772 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2201      	movs	r2, #1
 800f764:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2201      	movs	r2, #1
 800f76c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f770:	e031      	b.n	800f7d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f772:	2310      	movs	r3, #16
 800f774:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f776:	2310      	movs	r3, #16
 800f778:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	689b      	ldr	r3, [r3, #8]
 800f780:	0e5b      	lsrs	r3, r3, #25
 800f782:	b2db      	uxtb	r3, r3
 800f784:	f003 0307 	and.w	r3, r3, #7
 800f788:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	0f5b      	lsrs	r3, r3, #29
 800f792:	b2db      	uxtb	r3, r3
 800f794:	f003 0307 	and.w	r3, r3, #7
 800f798:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f79a:	7bbb      	ldrb	r3, [r7, #14]
 800f79c:	7b3a      	ldrb	r2, [r7, #12]
 800f79e:	4911      	ldr	r1, [pc, #68]	; (800f7e4 <UARTEx_SetNbDataToProcess+0x94>)
 800f7a0:	5c8a      	ldrb	r2, [r1, r2]
 800f7a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f7a6:	7b3a      	ldrb	r2, [r7, #12]
 800f7a8:	490f      	ldr	r1, [pc, #60]	; (800f7e8 <UARTEx_SetNbDataToProcess+0x98>)
 800f7aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f7ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7b0:	b29a      	uxth	r2, r3
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7b8:	7bfb      	ldrb	r3, [r7, #15]
 800f7ba:	7b7a      	ldrb	r2, [r7, #13]
 800f7bc:	4909      	ldr	r1, [pc, #36]	; (800f7e4 <UARTEx_SetNbDataToProcess+0x94>)
 800f7be:	5c8a      	ldrb	r2, [r1, r2]
 800f7c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f7c4:	7b7a      	ldrb	r2, [r7, #13]
 800f7c6:	4908      	ldr	r1, [pc, #32]	; (800f7e8 <UARTEx_SetNbDataToProcess+0x98>)
 800f7c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f7ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f7d6:	bf00      	nop
 800f7d8:	3714      	adds	r7, #20
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e0:	4770      	bx	lr
 800f7e2:	bf00      	nop
 800f7e4:	0800f88c 	.word	0x0800f88c
 800f7e8:	0800f894 	.word	0x0800f894

0800f7ec <__libc_init_array>:
 800f7ec:	b570      	push	{r4, r5, r6, lr}
 800f7ee:	4d0d      	ldr	r5, [pc, #52]	; (800f824 <__libc_init_array+0x38>)
 800f7f0:	4c0d      	ldr	r4, [pc, #52]	; (800f828 <__libc_init_array+0x3c>)
 800f7f2:	1b64      	subs	r4, r4, r5
 800f7f4:	10a4      	asrs	r4, r4, #2
 800f7f6:	2600      	movs	r6, #0
 800f7f8:	42a6      	cmp	r6, r4
 800f7fa:	d109      	bne.n	800f810 <__libc_init_array+0x24>
 800f7fc:	4d0b      	ldr	r5, [pc, #44]	; (800f82c <__libc_init_array+0x40>)
 800f7fe:	4c0c      	ldr	r4, [pc, #48]	; (800f830 <__libc_init_array+0x44>)
 800f800:	f000 f820 	bl	800f844 <_init>
 800f804:	1b64      	subs	r4, r4, r5
 800f806:	10a4      	asrs	r4, r4, #2
 800f808:	2600      	movs	r6, #0
 800f80a:	42a6      	cmp	r6, r4
 800f80c:	d105      	bne.n	800f81a <__libc_init_array+0x2e>
 800f80e:	bd70      	pop	{r4, r5, r6, pc}
 800f810:	f855 3b04 	ldr.w	r3, [r5], #4
 800f814:	4798      	blx	r3
 800f816:	3601      	adds	r6, #1
 800f818:	e7ee      	b.n	800f7f8 <__libc_init_array+0xc>
 800f81a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f81e:	4798      	blx	r3
 800f820:	3601      	adds	r6, #1
 800f822:	e7f2      	b.n	800f80a <__libc_init_array+0x1e>
 800f824:	0800f8a4 	.word	0x0800f8a4
 800f828:	0800f8a4 	.word	0x0800f8a4
 800f82c:	0800f8a4 	.word	0x0800f8a4
 800f830:	0800f8a8 	.word	0x0800f8a8

0800f834 <memset>:
 800f834:	4402      	add	r2, r0
 800f836:	4603      	mov	r3, r0
 800f838:	4293      	cmp	r3, r2
 800f83a:	d100      	bne.n	800f83e <memset+0xa>
 800f83c:	4770      	bx	lr
 800f83e:	f803 1b01 	strb.w	r1, [r3], #1
 800f842:	e7f9      	b.n	800f838 <memset+0x4>

0800f844 <_init>:
 800f844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f846:	bf00      	nop
 800f848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f84a:	bc08      	pop	{r3}
 800f84c:	469e      	mov	lr, r3
 800f84e:	4770      	bx	lr

0800f850 <_fini>:
 800f850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f852:	bf00      	nop
 800f854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f856:	bc08      	pop	{r3}
 800f858:	469e      	mov	lr, r3
 800f85a:	4770      	bx	lr
