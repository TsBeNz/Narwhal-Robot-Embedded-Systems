
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001642c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  08016700  08016700  00026700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080169c0  080169c0  000269c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080169c8  080169c8  000269c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080169cc  080169cc  000269cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  080169d0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        00000034  20000094  08016a64  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000013a8  200000c8  08016a98  000300c8  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20001470  08016a98  00031470  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002bf25  00000000  00000000  000300f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a83  00000000  00000000  0005c01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d90  00000000  00000000  00060aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001b98  00000000  00000000  00062830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039786  00000000  00000000  000643c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002c1f9  00000000  00000000  0009db4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cf5f  00000000  00000000  000c9d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00236ca6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000080c8  00000000  00000000  00236cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000c8 	.word	0x200000c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080166e4 	.word	0x080166e4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000cc 	.word	0x200000cc
 800030c:	080166e4 	.word	0x080166e4

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

double EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8ef 	bl	8000808 <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	89db      	ldrh	r3, [r3, #14]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000658 <EncPulse2Rad_Read+0x44>
 800063a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	ed93 7b08 	vldr	d7, [r3, #32]
 8000648:	ee36 7b47 	vsub.f64	d7, d6, d7
//	return (Enc->Position * 0.000383495f);
}
 800064c:	eeb0 0b47 	vmov.f64	d0, d7
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	39c90fd4 	.word	0x39c90fd4
 800065c:	00000000 	.word	0x00000000

08000660 <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,double offset) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6178      	str	r0, [r7, #20]
 8000668:	6139      	str	r1, [r7, #16]
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	ed87 0b00 	vstr	d0, [r7]
	dev->hspiHandle = hspiHandle;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	8c3a      	ldrh	r2, [r7, #32]
 8000688:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 800068a:	8c3b      	ldrh	r3, [r7, #32]
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f00b f927 	bl	800b8e4 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2200      	movs	r2, #0
 800069a:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2200      	movs	r2, #0
 80006a0:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	2200      	movs	r2, #0
 80006a6:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	2200      	movs	r2, #0
 80006ac:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2200      	movs	r2, #0
 80006b2:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2200      	movs	r2, #0
 80006b8:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2200      	movs	r2, #0
 80006be:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2200      	movs	r2, #0
 80006c4:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2200      	movs	r2, #0
 80006ca:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2200      	movs	r2, #0
 80006d0:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006d2:	ed97 7b00 	vldr	d7, [r7]
 80006d6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80006f0 <AS5047U_init+0x90>
 80006da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	ed83 7b08 	vstr	d7, [r3, #32]
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	f3af 8000 	nop.w
 80006f0:	80000000 	.word	0x80000000
 80006f4:	3f3921fa 	.word	0x3f3921fa

080006f8 <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
 8000704:	4613      	mov	r3, r2
 8000706:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <AS5047U_Write+0x10c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	723b      	strb	r3, [r7, #8]
 800070e:	f107 0309 	add.w	r3, r7, #9
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000722:	b2db      	uxtb	r3, r3
 8000724:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f107 0108 	add.w	r1, r7, #8
 8000734:	2202      	movs	r2, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f008 fb60 	bl	8008dfc <HAL_CRC_Calculate>
 800073c:	4603      	mov	r3, r0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6898      	ldr	r0, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	899b      	ldrh	r3, [r3, #12]
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	f00b f8c7 	bl	800b8e4 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
 800075a:	e002      	b.n	8000762 <AS5047U_Write+0x6a>
 800075c:	89fb      	ldrh	r3, [r7, #14]
 800075e:	3301      	adds	r3, #1
 8000760:	81fb      	strh	r3, [r7, #14]
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	f240 2226 	movw	r2, #550	; 0x226
 8000768:	4293      	cmp	r3, r2
 800076a:	d9f7      	bls.n	800075c <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	f107 0108 	add.w	r1, r7, #8
 8000774:	2301      	movs	r3, #1
 8000776:	2203      	movs	r2, #3
 8000778:	f00f fdc8 	bl	801030c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6898      	ldr	r0, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f00b f8ac 	bl	800b8e4 <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b29b      	uxth	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f107 0108 	add.w	r1, r7, #8
 80007a4:	2202      	movs	r2, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 fb28 	bl	8008dfc <HAL_CRC_Calculate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6898      	ldr	r0, [r3, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	899b      	ldrh	r3, [r3, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	f00b f88f 	bl	800b8e4 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007c6:	2300      	movs	r3, #0
 80007c8:	81bb      	strh	r3, [r7, #12]
 80007ca:	e002      	b.n	80007d2 <AS5047U_Write+0xda>
 80007cc:	89bb      	ldrh	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	81bb      	strh	r3, [r7, #12]
 80007d2:	89bb      	ldrh	r3, [r7, #12]
 80007d4:	f240 2226 	movw	r2, #550	; 0x226
 80007d8:	4293      	cmp	r3, r2
 80007da:	d9f7      	bls.n	80007cc <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f107 0108 	add.w	r1, r7, #8
 80007e4:	2301      	movs	r3, #1
 80007e6:	2203      	movs	r2, #3
 80007e8:	f00f fd90 	bl	801030c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6898      	ldr	r0, [r3, #8]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f00b f874 	bl	800b8e4 <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08016700 	.word	0x08016700

08000808 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 8000814:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000818:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 800081a:	2300      	movs	r3, #0
 800081c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 800081e:	2300      	movs	r3, #0
 8000820:	82fb      	strh	r3, [r7, #22]
 8000822:	e002      	b.n	800082a <AS5047U_Position_Highspeed_Read+0x22>
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	3301      	adds	r3, #1
 8000828:	82fb      	strh	r3, [r7, #22]
 800082a:	8afb      	ldrh	r3, [r7, #22]
 800082c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000830:	d9f8      	bls.n	8000824 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6898      	ldr	r0, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	899b      	ldrh	r3, [r3, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	f00b f851 	bl	800b8e4 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f107 0110 	add.w	r1, r7, #16
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	2202      	movs	r2, #2
 800084e:	f00f fd5d 	bl	801030c <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6898      	ldr	r0, [r3, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	899b      	ldrh	r3, [r3, #12]
 800085a:	2201      	movs	r2, #1
 800085c:	4619      	mov	r1, r3
 800085e:	f00b f841 	bl	800b8e4 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000862:	2300      	movs	r3, #0
 8000864:	82bb      	strh	r3, [r7, #20]
 8000866:	e002      	b.n	800086e <AS5047U_Position_Highspeed_Read+0x66>
 8000868:	8abb      	ldrh	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	82bb      	strh	r3, [r7, #20]
 800086e:	8abb      	ldrh	r3, [r7, #20]
 8000870:	f240 2226 	movw	r2, #550	; 0x226
 8000874:	4293      	cmp	r3, r2
 8000876:	d9f7      	bls.n	8000868 <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6898      	ldr	r0, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	899b      	ldrh	r3, [r3, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f00b f82e 	bl	800b8e4 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	f107 010c 	add.w	r1, r7, #12
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2202      	movs	r2, #2
 8000894:	f00f ff2c 	bl	80106f0 <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6898      	ldr	r0, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	899b      	ldrh	r3, [r3, #12]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	f00b f81e 	bl	800b8e4 <HAL_GPIO_WritePin>
	if (dir == 1){
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d111      	bne.n	80008d2 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008c8:	4053      	eors	r3, r2
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	81da      	strh	r2, [r3, #14]
 80008d0:	e00c      	b.n	80008ec <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008dc:	b21a      	sxth	r2, r3
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	89db      	ldrh	r3, [r3, #14]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Tmp75_Init>:
#include "Tmp75.h"

//I2C_HandleTypeDef hi2c2;

void Tmp75_Init(I2C_HandleTypeDef *hi2c) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	/*configuration register = 0x01
	 [res][res][OS][FQ][POL][TM][SD][RES][RES][RES][RES][RES][RES][RES][RES][RES]
	   0    0   1   0    0    0   0   0    0    0    0    0    0    0    0    0   =  0x2000
	 */
	Write_Register(0x01, 0x2000,hi2c);
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000906:	2001      	movs	r0, #1
 8000908:	f000 f804 	bl	8000914 <Write_Register>

}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <Write_Register>:

void Write_Register(uint8_t register_pointer, uint16_t register_value, I2C_HandleTypeDef *hi2c) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af02      	add	r7, sp, #8
 800091a:	4603      	mov	r3, r0
 800091c:	603a      	str	r2, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	460b      	mov	r3, r1
 8000922:	80bb      	strh	r3, [r7, #4]
	uint8_t data[3];
	data[0] = register_pointer;     // TMP75_ADDR
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	733b      	strb	r3, [r7, #12]
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	b29b      	uxth	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	737b      	strb	r3, [r7, #13]
	data[2] = register_value;       // LSB byte of 16bit data
 8000932:	88bb      	ldrh	r3, [r7, #4]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, data, 3, 100);
 8000938:	f107 020c 	add.w	r2, r7, #12
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2303      	movs	r3, #3
 8000942:	2192      	movs	r1, #146	; 0x92
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f00b f891 	bl	800ba6c <HAL_I2C_Master_Transmit>

}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, I2C_HandleTypeDef *hi2c) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af02      	add	r7, sp, #8
 8000958:	4603      	mov	r3, r0
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	73fb      	strb	r3, [r7, #15]
	// first set the register pointer to the register wanted to be read
	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, &register_pointer, 1, 100);
 8000960:	f107 020f 	add.w	r2, r7, #15
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	2192      	movs	r1, #146	; 0x92
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f00b f87d 	bl	800ba6c <HAL_I2C_Master_Transmit>

	// receive the 2 x 8bit data into the receive buffer
	HAL_I2C_Master_Receive(hi2c, TMP75_ADDR, receive_buffer, 2, 100);
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2302      	movs	r3, #2
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	2192      	movs	r1, #146	; 0x92
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f00b f969 	bl	800bc54 <HAL_I2C_Master_Receive>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <One_ShotTemp>:

void One_ShotTemp(I2C_HandleTypeDef *hi2c) {
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	//One-Shot register = 0x04 and write any value to start aconversion
	Write_Register(0x04, 0x0000,hi2c);
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	2100      	movs	r1, #0
 8000996:	2004      	movs	r0, #4
 8000998:	f7ff ffbc 	bl	8000914 <Write_Register>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <Read_TempCelsius>:

void Read_TempCelsius(double *receive_buffer,I2C_HandleTypeDef *hi2c) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	uint8_t buffer[2];
	uint16_t TempSum;
	Read_Register(0x00, buffer,hi2c);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff ffc9 	bl	8000952 <Read_Register>
	TempSum = (((buffer[0] << 8) | buffer[1]) >> 4);
 80009c0:	7b3b      	ldrb	r3, [r7, #12]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	7b7a      	ldrb	r2, [r7, #13]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	111b      	asrs	r3, r3, #4
 80009ca:	81fb      	strh	r3, [r7, #14]
	*receive_buffer = (TempSum * FTMP75_TEMP_AD_STEP);
 80009cc:	89fb      	ldrh	r3, [r7, #14]
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80009f0 <Read_TempCelsius+0x48>
 80009da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	ed83 7b00 	vstr	d7, [r3]
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	f3af 8000 	nop.w
 80009f0:	00000000 	.word	0x00000000
 80009f4:	3fb00000 	.word	0x3fb00000

080009f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2224      	movs	r2, #36	; 0x24
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f014 fe37 	bl	8015684 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a18:	4a33      	ldr	r2, [pc, #204]	; (8000ae8 <MX_ADC1_Init+0xf0>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a1e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a76:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a78:	f006 f9d4 	bl	8006e24 <HAL_ADC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a82:	f004 f831 	bl	8004ae8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8000a86:	2305      	movs	r3, #5
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a9a:	f007 ff59 	bl	8008950 <HAL_ADCEx_MultiModeConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000aa4:	f004 f820 	bl	8004ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_ADC1_Init+0xf4>)
 8000aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aac:	2306      	movs	r3, #6
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ab8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	2304      	movs	r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000ace:	f006 ff4d 	bl	800796c <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ad8:	f004 f806 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000e4 	.word	0x200000e4
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	21800100 	.word	0x21800100

08000af0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2224      	movs	r2, #36	; 0x24
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f014 fdc1 	bl	8015684 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <MX_ADC2_Init+0xb8>)
 8000b06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b0a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000b0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b58:	f006 f964 	bl	8006e24 <HAL_ADC_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000b62:	f003 ffc1 	bl	8004ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_ADC2_Init+0xbc>)
 8000b68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b72:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b8c:	f006 feee 	bl	800796c <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b96:	f003 ffa7 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000154 	.word	0x20000154
 8000ba8:	40022100 	.word	0x40022100
 8000bac:	21800100 	.word	0x21800100

08000bb0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2224      	movs	r2, #36	; 0x24
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f014 fd61 	bl	8015684 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bc4:	4a32      	ldr	r2, [pc, #200]	; (8000c90 <MX_ADC3_Init+0xe0>)
 8000bc6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c34:	4815      	ldr	r0, [pc, #84]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c36:	f006 f8f5 	bl	8006e24 <HAL_ADC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000c40:	f003 ff52 	bl	8004ae8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_ADC3_Init+0xe4>)
 8000c46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c50:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c54:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c56:	2304      	movs	r3, #4
 8000c58:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c74:	f006 fe7a 	bl	800796c <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000c7e:	f003 ff33 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001c4 	.word	0x200001c4
 8000c90:	58026000 	.word	0x58026000
 8000c94:	c7520000 	.word	0xc7520000

08000c98 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a47      	ldr	r2, [pc, #284]	; (8000dd4 <HAL_ADC_MspInit+0x13c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d133      	bne.n	8000d22 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a45      	ldr	r2, [pc, #276]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000cc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10e      	bne.n	8000cea <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ccc:	4b43      	ldr	r3, [pc, #268]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd2:	4a42      	ldr	r2, [pc, #264]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cdc:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfa:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d08:	2320      	movs	r3, #32
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4831      	ldr	r0, [pc, #196]	; (8000de0 <HAL_ADC_MspInit+0x148>)
 8000d1c:	f00a fc3a 	bl	800b594 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d20:	e054      	b.n	8000dcc <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <HAL_ADC_MspInit+0x14c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d133      	bne.n	8000d94 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000d34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10e      	bne.n	8000d5c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7a:	2320      	movs	r3, #32
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4814      	ldr	r0, [pc, #80]	; (8000de0 <HAL_ADC_MspInit+0x148>)
 8000d8e:	f00a fc01 	bl	800b594 <HAL_GPIO_Init>
}
 8000d92:	e01b      	b.n	8000dcc <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_ADC_MspInit+0x150>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d116      	bne.n	8000dcc <HAL_ADC_MspInit+0x134>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	207f      	movs	r0, #127	; 0x7f
 8000dc2:	f007 ff82 	bl	8008cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000dc6:	207f      	movs	r0, #127	; 0x7f
 8000dc8:	f007 ff99 	bl	8008cfe <HAL_NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	20000234 	.word	0x20000234
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020800 	.word	0x58020800
 8000de4:	40022100 	.word	0x40022100
 8000de8:	58026000 	.word	0x58026000

08000dec <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	8b3a      	ldrh	r2, [r7, #24]
 8000e10:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e20:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f010 fa41 	bl	80112b4 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <Step_Driver>:


void Step_Driver(SteperParameter *step, double f_driver) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	ed87 0b00 	vstr	d0, [r7]
	double abs_f_driver = fabs(f_driver);
 8000e5c:	ed97 7b00 	vldr	d7, [r7]
 8000e60:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e64:	ed87 7b06 	vstr	d7, [r7, #24]
	uint16_t reg_out;
	if (abs_f_driver <= 5) {
 8000e68:	ed97 7b06 	vldr	d7, [r7, #24]
 8000e6c:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8000e70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e78:	d80e      	bhi.n	8000e98 <Step_Driver+0x48>
		reg_out = 20000;
 8000e7a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000e7e:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = 20000;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
 8000e96:	e033      	b.n	8000f00 <Step_Driver+0xb0>
	} else if (abs_f_driver < 25) {
 8000e98:	ed97 7b06 	vldr	d7, [r7, #24]
 8000e9c:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8000ea0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea8:	d50f      	bpl.n	8000eca <Step_Driver+0x7a>
		reg_out = 20000;
 8000eaa:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000eae:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	8afa      	ldrh	r2, [r7, #22]
 8000eb8:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000eba:	8afb      	ldrh	r3, [r7, #22]
 8000ebc:	085b      	lsrs	r3, r3, #1
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec8:	e01a      	b.n	8000f00 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	89db      	ldrh	r3, [r3, #14]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000ed6:	ed97 6b06 	vldr	d6, [r7, #24]
 8000eda:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ede:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	8afa      	ldrh	r2, [r7, #22]
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000ef2:	8afb      	ldrh	r3, [r7, #22]
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000f00:	ed97 7b00 	vldr	d7, [r7]
 8000f04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0c:	db09      	blt.n	8000f22 <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6898      	ldr	r0, [r3, #8]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	8999      	ldrh	r1, [r3, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	7c1b      	ldrb	r3, [r3, #16]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f00a fce2 	bl	800b8e4 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000f20:	e00b      	b.n	8000f3a <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6898      	ldr	r0, [r3, #8]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8999      	ldrh	r1, [r3, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	7c1b      	ldrb	r3, [r3, #16]
 8000f2e:	f083 0301 	eor.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	f00a fcd5 	bl	800b8e4 <HAL_GPIO_WritePin>
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <Servo_init>:

/*
 * Servo Drive init
 */
void Servo_init(ServoParameter *Servo,TIM_HandleTypeDef *htim,
		uint32_t Channel){
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
	Servo->htim = htim;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	601a      	str	r2, [r3, #0]
	Servo->Channel = Channel;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(Servo->htim, Servo->Channel);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f010 f9a5 	bl	80112b4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <Servo_init+0x3e>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f240 52db 	movw	r2, #1499	; 0x5db
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f7e:	e031      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d106      	bne.n	8000f96 <Servo_init+0x54>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f240 53db 	movw	r3, #1499	; 0x5db
 8000f92:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f94:	e026      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d106      	bne.n	8000fac <Servo_init+0x6a>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fa8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000faa:	e01b      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b0c      	cmp	r3, #12
 8000fb2:	d106      	bne.n	8000fc2 <Servo_init+0x80>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fc0:	e010      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b10      	cmp	r3, #16
 8000fc8:	d106      	bne.n	8000fd8 <Servo_init+0x96>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000fd6:	e005      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fe2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <Traj_Coeff_Cal>:
	uint16_t Pulse_in  =  (uint16_t)(((((int16_t)Deg)+90)*5.55555f) + 999);
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Deg);
}

void Traj_Coeff_Cal(TrajParameter *Traj, double T, double Pos_Final,
  double Pos_Now, double Vel_Final, double Vel_Now) {
 8000fec:	b480      	push	{r7}
 8000fee:	b09b      	sub	sp, #108	; 0x6c
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000ff4:	ed87 0b08 	vstr	d0, [r7, #32]
 8000ff8:	ed87 1b06 	vstr	d1, [r7, #24]
 8000ffc:	ed87 2b04 	vstr	d2, [r7, #16]
 8001000:	ed87 3b02 	vstr	d3, [r7, #8]
 8001004:	ed87 4b00 	vstr	d4, [r7]
 Traj->T = T;
 8001008:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800100a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800100e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 double T_P2 = T * T;
 8001012:	ed97 7b08 	vldr	d7, [r7, #32]
 8001016:	ee27 7b07 	vmul.f64	d7, d7, d7
 800101a:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 double T_P3 = T_P2 * T;
 800101e:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001022:	ed97 7b08 	vldr	d7, [r7, #32]
 8001026:	ee26 7b07 	vmul.f64	d7, d6, d7
 800102a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 double T_P4 = T_P3 * T;
 800102e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001032:	ed97 7b08 	vldr	d7, [r7, #32]
 8001036:	ee26 7b07 	vmul.f64	d7, d6, d7
 800103a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 double T_P5 = T_P4 * T;
 800103e:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8001042:	ed97 7b08 	vldr	d7, [r7, #32]
 8001046:	ee26 7b07 	vmul.f64	d7, d6, d7
 800104a:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 double ds = Pos_Now - Pos_Final;
 800104e:	ed97 6b04 	vldr	d6, [r7, #16]
 8001052:	ed97 7b06 	vldr	d7, [r7, #24]
 8001056:	ee36 7b47 	vsub.f64	d7, d6, d7
 800105a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 double tfv0 = T * Vel_Now;
 800105e:	ed97 6b08 	vldr	d6, [r7, #32]
 8001062:	ed97 7b00 	vldr	d7, [r7]
 8001066:	ee26 7b07 	vmul.f64	d7, d6, d7
 800106a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 double tfv1 = T * Vel_Final;
 800106e:	ed97 6b08 	vldr	d6, [r7, #32]
 8001072:	ed97 7b02 	vldr	d7, [r7, #8]
 8001076:	ee26 7b07 	vmul.f64	d7, d6, d7
 800107a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 Traj->TrajCoef[0] = Pos_Now;
 800107e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001080:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001084:	e9c1 2300 	strd	r2, r3, [r1]
 Traj->TrajCoef[1] = Vel_Now;
 8001088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800108a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800108e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0 + 2*tfv1)) / T_P3;
 8001092:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001096:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800109a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800109e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80010a2:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80010a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010ae:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80010b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80010b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80010be:	eeb1 5b47 	vneg.f64	d5, d7
 80010c2:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80010c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010cc:	ed83 7b06 	vstr	d7, [r3, #24]
 Traj->TrajCoef[4] = (15 * ds + 8 * tfv0 + 7*tfv1) / T_P4;
 80010d0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80010d4:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
 80010d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80010dc:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80010e0:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80010e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010ec:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80010f0:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80010f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010f8:	ee36 5b07 	vadd.f64	d5, d6, d7
 80010fc:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8001100:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001106:	ed83 7b08 	vstr	d7, [r3, #32]
 Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0 + tfv1)) / T_P5;
 800110a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800110e:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001112:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001116:	ee36 6b07 	vadd.f64	d6, d6, d7
 800111a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800111e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001122:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8001126:	ee27 7b06 	vmul.f64	d7, d7, d6
 800112a:	eeb1 5b47 	vneg.f64	d5, d7
 800112e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8001132:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001138:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 800113c:	bf00      	nop
 800113e:	376c      	adds	r7, #108	; 0x6c
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <TrajFollow>:

void TrajFollow(TrajParameter *Traj, double traj_t[5], double *Position,
		double *Velocity) {
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	ed93 6b00 	vldr	d6, [r3]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	ed93 5b02 	vldr	d5, [r3, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ed93 7b00 	vldr	d7, [r3]
 8001168:	ee25 7b07 	vmul.f64	d7, d5, d7
 800116c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	ed93 5b06 	vldr	d5, [r3, #24]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	3310      	adds	r3, #16
 800117a:	ed93 7b00 	vldr	d7, [r3]
 800117e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001182:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	ed93 5b08 	vldr	d5, [r3, #32]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	3318      	adds	r3, #24
 8001190:	ed93 7b00 	vldr	d7, [r3]
 8001194:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001198:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[5] * traj_t[4]);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3320      	adds	r3, #32
 80011a6:	ed93 7b00 	vldr	d7, [r3]
 80011aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011ae:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	ed83 7b00 	vstr	d7, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	ed93 6b02 	vldr	d6, [r3, #8]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	ed93 7b06 	vldr	d7, [r3, #24]
 80011c4:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80011c8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	3308      	adds	r3, #8
 80011d0:	ed93 7b00 	vldr	d7, [r3]
 80011d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011d8:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	ed93 7b08 	vldr	d7, [r3, #32]
 80011e2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011e6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	3310      	adds	r3, #16
 80011ee:	ed93 7b00 	vldr	d7, [r3]
 80011f2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011f6:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001200:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8001204:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3318      	adds	r3, #24
 800120c:	ed93 7b00 	vldr	d7, [r3]
 8001210:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001214:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	ed83 7b00 	vstr	d7, [r3]
}
 800121e:	bf00      	nop
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	0000      	movs	r0, r0
 800122c:	0000      	movs	r0, r0
	...

08001230 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8001230:	b480      	push	{r7}
 8001232:	b087      	sub	sp, #28
 8001234:	af00      	add	r7, sp, #0
 8001236:	6178      	str	r0, [r7, #20]
 8001238:	ed87 0b02 	vstr	d0, [r7, #8]
 800123c:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 8001240:	6979      	ldr	r1, [r7, #20]
 8001242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001246:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->R = R; 			// Adjustable
 800124a:	6979      	ldr	r1, [r7, #20]
 800124c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001250:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalman->x1 = 0.0;
 8001254:	6979      	ldr	r1, [r7, #20]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = 0.0;
 8001262:	6979      	ldr	r1, [r7, #20]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = 0.05;
 8001270:	6979      	ldr	r1, [r7, #20]
 8001272:	a30f      	add	r3, pc, #60	; (adr r3, 80012b0 <Kalman_init+0x80>)
 8001274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001278:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = 0.05;
 800127c:	6979      	ldr	r1, [r7, #20]
 800127e:	a30c      	add	r3, pc, #48	; (adr r3, 80012b0 <Kalman_init+0x80>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = 0.05;
 8001288:	6979      	ldr	r1, [r7, #20]
 800128a:	a309      	add	r3, pc, #36	; (adr r3, 80012b0 <Kalman_init+0x80>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = 0.05;
 8001294:	6979      	ldr	r1, [r7, #20]
 8001296:	a306      	add	r3, pc, #24	; (adr r3, 80012b0 <Kalman_init+0x80>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80012a0:	bf00      	nop
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	f3af 8000 	nop.w
 80012b0:	9999999a 	.word	0x9999999a
 80012b4:	3fa99999 	.word	0x3fa99999

080012b8 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 80012b8:	b480      	push	{r7}
 80012ba:	b0a5      	sub	sp, #148	; 0x94
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80012ca:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8001620 <KalmanFilter+0x368>
 80012ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012d2:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80012dc:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 8001620 <KalmanFilter+0x368>
 80012e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012e4:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	ed93 7b00 	vldr	d7, [r3]
 80012ee:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8001628 <KalmanFilter+0x370>
 80012f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012f6:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 80012fa:	a3d1      	add	r3, pc, #836	; (adr r3, 8001640 <KalmanFilter+0x388>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 8001304:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001308:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800130c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001316:	ee26 7b07 	vmul.f64	d7, d6, d7
 800131a:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	ed93 7b02 	vldr	d7, [r3, #8]
 8001324:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001328:	ee27 6b06 	vmul.f64	d6, d7, d6
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	ed93 7b08 	vldr	d7, [r3, #32]
 8001332:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001336:	ee27 7b05 	vmul.f64	d7, d7, d5
 800133a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800133e:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001342:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001346:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800134a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800134e:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001352:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001356:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 800135a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800135e:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	ed93 7b02 	vldr	d7, [r3, #8]
 8001368:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800136c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	ed93 7b04 	vldr	d7, [r3, #16]
 8001376:	ee26 6b07 	vmul.f64	d6, d6, d7
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	ed93 7b08 	vldr	d7, [r3, #32]
 8001380:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001384:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001388:	ed97 7b00 	vldr	d7, [r7]
 800138c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001390:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001394:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8001398:	ed97 7b00 	vldr	d7, [r7]
 800139c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013a0:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80013aa:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 80013b2:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8001630 <KalmanFilter+0x378>
 80013b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	ed93 7b06 	vldr	d7, [r3, #24]
 80013c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013c8:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 80013cc:	ed97 7b00 	vldr	d7, [r7]
 80013d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013d8:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 80013dc:	ed97 7b00 	vldr	d7, [r7]
 80013e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013e4:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 80013e8:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 80013ec:	ed97 7b00 	vldr	d7, [r7]
 80013f0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013f4:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 80013f8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80013fc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001400:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800140a:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8001630 <KalmanFilter+0x378>
 800140e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001412:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	ed93 7b00 	vldr	d7, [r3]
 800141c:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8001638 <KalmanFilter+0x380>
 8001420:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001424:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 8001428:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800142c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001430:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001434:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8001438:	ee36 7b07 	vadd.f64	d7, d6, d7
 800143c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001446:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 800144a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800144e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	ed93 6b02 	vldr	d6, [r3, #8]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	ed93 7b08 	vldr	d7, [r3, #32]
 800145e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001468:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8001630 <KalmanFilter+0x378>
 800146c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001470:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001474:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001478:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 800147c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001480:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800148a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800148e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001492:	ed9f 5b67 	vldr	d5, [pc, #412]	; 8001630 <KalmanFilter+0x378>
 8001496:	ee27 7b05 	vmul.f64	d7, d7, d5
 800149a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800149e:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	ed93 6b06 	vldr	d6, [r3, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	ed93 5b04 	vldr	d5, [r3, #16]
 80014ae:	ed97 7b00 	vldr	d7, [r7]
 80014b2:	ee35 5b47 	vsub.f64	d5, d5, d7
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	ed93 7b06 	vldr	d7, [r3, #24]
 80014bc:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 8001630 <KalmanFilter+0x378>
 80014c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80014c4:	ee35 5b07 	vadd.f64	d5, d5, d7
 80014c8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80014cc:	ee25 4b07 	vmul.f64	d4, d5, d7
 80014d0:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 80014d4:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80014d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014dc:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	ed93 6b02 	vldr	d6, [r3, #8]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	ed93 7b08 	vldr	d7, [r3, #32]
 80014ec:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80014f0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80014f4:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80014f8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80014fc:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001500:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001504:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001508:	ee35 5b07 	vadd.f64	d5, d5, d7
 800150c:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001510:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001514:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001518:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800151c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001520:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800152a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800152e:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8001630 <KalmanFilter+0x378>
 8001532:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001536:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800153a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800153e:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	ed93 7b02 	vldr	d7, [r3, #8]
 8001548:	ee37 6b07 	vadd.f64	d6, d7, d7
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001552:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001556:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800155a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800155e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001562:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001566:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800156a:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	ed93 7b02 	vldr	d7, [r3, #8]
 8001574:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800157e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001582:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001586:	ee35 7b07 	vadd.f64	d7, d5, d7
 800158a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800158e:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001592:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001596:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	ed93 5b00 	vldr	d5, [r3]
 80015a6:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80015aa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 80015b8:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80015bc:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015c0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80015c4:	ee25 4b07 	vmul.f64	d4, d5, d7
 80015c8:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 80015cc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80015d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80015d4:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 80015d8:	68f9      	ldr	r1, [r7, #12]
 80015da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80015de:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = xx2;
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80015e8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = pp11;
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015f2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = pp12;
 80015f6:	68f9      	ldr	r1, [r7, #12]
 80015f8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80015fc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = pp21;
 8001600:	68f9      	ldr	r1, [r7, #12]
 8001602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001606:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = pp22;
 800160a:	68f9      	ldr	r1, [r7, #12]
 800160c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001610:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001614:	bf00      	nop
 8001616:	3794      	adds	r7, #148	; 0x94
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	d2f1a9fc 	.word	0xd2f1a9fc
 8001624:	3f70624d 	.word	0x3f70624d
 8001628:	812dea12 	.word	0x812dea12
 800162c:	3d719799 	.word	0x3d719799
 8001630:	d2f1a9fc 	.word	0xd2f1a9fc
 8001634:	3f50624d 	.word	0x3f50624d
 8001638:	e826d695 	.word	0xe826d695
 800163c:	3e112e0b 	.word	0x3e112e0b
 8001640:	a0b5ed8d 	.word	0xa0b5ed8d
 8001644:	3eb0c6f7 	.word	0x3eb0c6f7

08001648 <PID_init>:

double BaseENCRead(){
	return 970.0f;  //fsaldfkjas;dflkjas;dflksjf;asdf
}

void PID_init(PIDParameter *PID, double Kp, double Ki, double Kd) {
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	61f8      	str	r0, [r7, #28]
 8001650:	ed87 0b04 	vstr	d0, [r7, #16]
 8001654:	ed87 1b02 	vstr	d1, [r7, #8]
 8001658:	ed87 2b00 	vstr	d2, [r7]
	PID->Kp = Kp;
 800165c:	69f9      	ldr	r1, [r7, #28]
 800165e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001662:	e9c1 2300 	strd	r2, r3, [r1]
	PID->Ki = Ki;
 8001666:	69f9      	ldr	r1, [r7, #28]
 8001668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800166c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	PID->Kd = Kd;
 8001670:	69f9      	ldr	r1, [r7, #28]
 8001672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001676:	e9c1 2304 	strd	r2, r3, [r1, #16]
	PID->ITerm = 0;
 800167a:	69f9      	ldr	r1, [r7, #28]
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PID->Setpoint = 0;
 8001688:	69f9      	ldr	r1, [r7, #28]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Feedback = 0;
 8001696:	69f9      	ldr	r1, [r7, #28]
 8001698:	f04f 0200 	mov.w	r2, #0
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Error[0] = 0;
 80016a4:	69f9      	ldr	r1, [r7, #28]
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID->Error[1] = 0;
 80016b2:	69f9      	ldr	r1, [r7, #28]
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	PID->Output = 0;
 80016c0:	69f9      	ldr	r1, [r7, #28]
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 80016ce:	bf00      	nop
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <PID_Control>:

double PID_Control(PIDParameter *PID,double Setpoint,double Feedback){
 80016da:	b480      	push	{r7}
 80016dc:	b087      	sub	sp, #28
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6178      	str	r0, [r7, #20]
 80016e2:	ed87 0b02 	vstr	d0, [r7, #8]
 80016e6:	ed87 1b00 	vstr	d1, [r7]
	PID->Feedback = Feedback; 	// Feedback Input
 80016ea:	6979      	ldr	r1, [r7, #20]
 80016ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80016f0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Setpoint = Setpoint;	// Setpoint Input
 80016f4:	6979      	ldr	r1, [r7, #20]
 80016f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	ed93 6b08 	vldr	d6, [r3, #32]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800170a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	PID->ITerm += PID->Error[0];
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	ed93 6b06 	vldr	d6, [r3, #24]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001720:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	ed83 7b06 	vstr	d7, [r3, #24]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	ed93 6b00 	vldr	d6, [r3]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001736:	ee26 6b07 	vmul.f64	d6, d6, d7
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	ed93 5b02 	vldr	d5, [r3, #8]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	ed93 7b06 	vldr	d7, [r3, #24]
 8001746:	ee25 7b07 	vmul.f64	d7, d5, d7
 800174a:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	ed93 5b04 	vldr	d5, [r3, #16]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001760:	ee34 7b47 	vsub.f64	d7, d4, d7
 8001764:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001768:	ee36 7b07 	vadd.f64	d7, d6, d7
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	PID->Error[1] = PID->Error[0]; // Update Error
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001778:	6979      	ldr	r1, [r7, #20]
 800177a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	return PID->Output;
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001784:	ec43 2b17 	vmov	d7, r2, r3
}
 8001788:	eeb0 0b47 	vmov.f64	d0, d7
 800178c:	371c      	adds	r7, #28
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,double PosP,double PosI,double PosD,double VelP,double VelI,double VelD, double GFeed){
 8001796:	b580      	push	{r7, lr}
 8001798:	b090      	sub	sp, #64	; 0x40
 800179a:	af00      	add	r7, sp, #0
 800179c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800179e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 80017a2:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 80017a6:	ed87 2b08 	vstr	d2, [r7, #32]
 80017aa:	ed87 3b06 	vstr	d3, [r7, #24]
 80017ae:	ed87 4b04 	vstr	d4, [r7, #16]
 80017b2:	ed87 5b02 	vstr	d5, [r7, #8]
 80017b6:	ed87 6b00 	vstr	d6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 80017ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017bc:	ed97 2b08 	vldr	d2, [r7, #32]
 80017c0:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 80017c4:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff3d 	bl	8001648 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 80017ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d0:	3360      	adds	r3, #96	; 0x60
 80017d2:	ed97 2b02 	vldr	d2, [r7, #8]
 80017d6:	ed97 1b04 	vldr	d1, [r7, #16]
 80017da:	ed97 0b06 	vldr	d0, [r7, #24]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff32 	bl	8001648 <PID_init>
	Control->Vel_Gfeed = GFeed;
 80017e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80017e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017ea:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 80017ee:	bf00      	nop
 80017f0:	3740      	adds	r7, #64	; 0x40
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		double Pos_Feed, double pos_set, double vel_set) {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b088      	sub	sp, #32
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	61f8      	str	r0, [r7, #28]
 80017fe:	61b9      	str	r1, [r7, #24]
 8001800:	ed87 0b04 	vstr	d0, [r7, #16]
 8001804:	ed87 1b02 	vstr	d1, [r7, #8]
 8001808:	ed87 2b00 	vstr	d2, [r7]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 800180c:	69f9      	ldr	r1, [r7, #28]
 800180e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001812:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Control->VelocitySetpoint = vel_set;
 8001816:	69f9      	ldr	r1, [r7, #28]
 8001818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800181c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 8001820:	ed97 0b04 	vldr	d0, [r7, #16]
 8001824:	69b8      	ldr	r0, [r7, #24]
 8001826:	f7ff fd47 	bl	80012b8 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001830:	69f9      	ldr	r1, [r7, #28]
 8001832:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	Control->PositionFeedback = kalman->x1;
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800183c:	69f9      	ldr	r1, [r7, #28]
 800183e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001850:	eeb0 1b46 	vmov.f64	d1, d6
 8001854:	eeb0 0b47 	vmov.f64	d0, d7
 8001858:	4610      	mov	r0, r2
 800185a:	f7ff ff3e 	bl	80016da <PID_Control>
 800185e:	eeb0 7b40 	vmov.f64	d7, d0
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8001874:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	ed93 6b2e 	vldr	d6, [r3, #184]	; 0xb8
 8001890:	eeb0 1b46 	vmov.f64	d1, d6
 8001894:	eeb0 0b47 	vmov.f64	d0, d7
 8001898:	4610      	mov	r0, r2
 800189a:	f7ff ff1e 	bl	80016da <PID_Control>
 800189e:	eeb0 7b40 	vmov.f64	d7, d0
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 80018b4:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ Control->VelocityPIDOutput;
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 80018be:	ee36 7b07 	vadd.f64	d7, d6, d7
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
//	Control->Output = Control->VelocityPIDOutput;
}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_CRC_Init+0x50>)
 80018d6:	4a13      	ldr	r2, [pc, #76]	; (8001924 <MX_CRC_Init+0x54>)
 80018d8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_CRC_Init+0x50>)
 80018dc:	2201      	movs	r2, #1
 80018de:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_CRC_Init+0x50>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_CRC_Init+0x50>)
 80018e8:	221d      	movs	r2, #29
 80018ea:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_CRC_Init+0x50>)
 80018ee:	2210      	movs	r2, #16
 80018f0:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_CRC_Init+0x50>)
 80018f4:	22c4      	movs	r2, #196	; 0xc4
 80018f6:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_CRC_Init+0x50>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_CRC_Init+0x50>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_CRC_Init+0x50>)
 8001906:	2201      	movs	r2, #1
 8001908:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_CRC_Init+0x50>)
 800190c:	f007 fa12 	bl	8008d34 <HAL_CRC_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8001916:	f003 f8e7 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000238 	.word	0x20000238
 8001924:	58024c00 	.word	0x58024c00

08001928 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <HAL_CRC_MspInit+0x3c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d10e      	bne.n	8001958 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_CRC_MspInit+0x40>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	4a09      	ldr	r2, [pc, #36]	; (8001968 <HAL_CRC_MspInit+0x40>)
 8001942:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <HAL_CRC_MspInit+0x40>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001958:	bf00      	nop
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	58024c00 	.word	0x58024c00
 8001968:	58024400 	.word	0x58024400

0800196c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_DMA_Init+0x5c>)
 8001974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001978:	4a13      	ldr	r2, [pc, #76]	; (80019c8 <MX_DMA_Init+0x5c>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_DMA_Init+0x5c>)
 8001984:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	200b      	movs	r0, #11
 8001996:	f007 f998 	bl	8008cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800199a:	200b      	movs	r0, #11
 800199c:	f007 f9af 	bl	8008cfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	200c      	movs	r0, #12
 80019a6:	f007 f990 	bl	8008cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80019aa:	200c      	movs	r0, #12
 80019ac:	f007 f9a7 	bl	8008cfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	200d      	movs	r0, #13
 80019b6:	f007 f988 	bl	8008cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80019ba:	200d      	movs	r0, #13
 80019bc:	f007 f99f 	bl	8008cfe <HAL_NVIC_EnableIRQ>

}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	58024400 	.word	0x58024400

080019cc <MX_GPIO_Init>:
        * the Code Generation settings)
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e2:	4b91      	ldr	r3, [pc, #580]	; (8001c28 <MX_GPIO_Init+0x25c>)
 80019e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e8:	4a8f      	ldr	r2, [pc, #572]	; (8001c28 <MX_GPIO_Init+0x25c>)
 80019ea:	f043 0310 	orr.w	r3, r3, #16
 80019ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f2:	4b8d      	ldr	r3, [pc, #564]	; (8001c28 <MX_GPIO_Init+0x25c>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	61bb      	str	r3, [r7, #24]
 80019fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a00:	4b89      	ldr	r3, [pc, #548]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a06:	4a88      	ldr	r2, [pc, #544]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a08:	f043 0304 	orr.w	r3, r3, #4
 8001a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a10:	4b85      	ldr	r3, [pc, #532]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1e:	4b82      	ldr	r3, [pc, #520]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a24:	4a80      	ldr	r2, [pc, #512]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3c:	4b7a      	ldr	r3, [pc, #488]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a42:	4a79      	ldr	r2, [pc, #484]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4c:	4b76      	ldr	r3, [pc, #472]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5a:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a60:	4a71      	ldr	r2, [pc, #452]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a62:	f043 0302 	orr.w	r3, r3, #2
 8001a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a78:	4b6b      	ldr	r3, [pc, #428]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	4a6a      	ldr	r2, [pc, #424]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a88:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <MX_GPIO_Init+0x25c>)
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001a96:	2200      	movs	r2, #0
 8001a98:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001a9c:	4863      	ldr	r0, [pc, #396]	; (8001c2c <MX_GPIO_Init+0x260>)
 8001a9e:	f009 ff21 	bl	800b8e4 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001aa8:	4861      	ldr	r0, [pc, #388]	; (8001c30 <MX_GPIO_Init+0x264>)
 8001aaa:	f009 ff1b 	bl	800b8e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	21c4      	movs	r1, #196	; 0xc4
 8001ab2:	4860      	ldr	r0, [pc, #384]	; (8001c34 <MX_GPIO_Init+0x268>)
 8001ab4:	f009 ff16 	bl	800b8e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001abe:	485e      	ldr	r0, [pc, #376]	; (8001c38 <MX_GPIO_Init+0x26c>)
 8001ac0:	f009 ff10 	bl	800b8e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aca:	4859      	ldr	r0, [pc, #356]	; (8001c30 <MX_GPIO_Init+0x264>)
 8001acc:	f009 ff0a 	bl	800b8e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	213f      	movs	r1, #63	; 0x3f
 8001ad4:	4858      	ldr	r0, [pc, #352]	; (8001c38 <MX_GPIO_Init+0x26c>)
 8001ad6:	f009 ff05 	bl	800b8e4 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001ada:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001ade:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	484e      	ldr	r0, [pc, #312]	; (8001c2c <MX_GPIO_Init+0x260>)
 8001af4:	f009 fd4e 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001af8:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8001afc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4848      	ldr	r0, [pc, #288]	; (8001c30 <MX_GPIO_Init+0x264>)
 8001b0e:	f009 fd41 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001b12:	233c      	movs	r3, #60	; 0x3c
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 031c 	add.w	r3, r7, #28
 8001b22:	4619      	mov	r1, r3
 8001b24:	4845      	ldr	r0, [pc, #276]	; (8001c3c <MX_GPIO_Init+0x270>)
 8001b26:	f009 fd35 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 8001b2a:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	4619      	mov	r1, r3
 8001b42:	483b      	ldr	r0, [pc, #236]	; (8001c30 <MX_GPIO_Init+0x264>)
 8001b44:	f009 fd26 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4836      	ldr	r0, [pc, #216]	; (8001c34 <MX_GPIO_Init+0x268>)
 8001b5c:	f009 fd1a 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b64:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	482f      	ldr	r0, [pc, #188]	; (8001c34 <MX_GPIO_Init+0x268>)
 8001b76:	f009 fd0d 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001b7a:	23c4      	movs	r3, #196	; 0xc4
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4828      	ldr	r0, [pc, #160]	; (8001c34 <MX_GPIO_Init+0x268>)
 8001b92:	f009 fcff 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4820      	ldr	r0, [pc, #128]	; (8001c2c <MX_GPIO_Init+0x260>)
 8001bac:	f009 fcf2 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001bb0:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	481c      	ldr	r0, [pc, #112]	; (8001c38 <MX_GPIO_Init+0x26c>)
 8001bc6:	f009 fce5 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001bca:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001bce:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4815      	ldr	r0, [pc, #84]	; (8001c38 <MX_GPIO_Init+0x26c>)
 8001be4:	f009 fcd6 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480f      	ldr	r0, [pc, #60]	; (8001c3c <MX_GPIO_Init+0x270>)
 8001bfe:	f009 fcc9 	bl	800b594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4808      	ldr	r0, [pc, #32]	; (8001c3c <MX_GPIO_Init+0x270>)
 8001c1c:	f009 fcba 	bl	800b594 <HAL_GPIO_Init>

}
 8001c20:	bf00      	nop
 8001c22:	3730      	adds	r7, #48	; 0x30
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	58024400 	.word	0x58024400
 8001c2c:	58021000 	.word	0x58021000
 8001c30:	58020800 	.word	0x58020800
 8001c34:	58020400 	.word	0x58020400
 8001c38:	58020c00 	.word	0x58020c00
 8001c3c:	58020000 	.word	0x58020000

08001c40 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <MX_I2C2_Init+0x78>)
 8001c48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <MX_I2C2_Init+0x7c>)
 8001c4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c7a:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c7c:	f009 fe66 	bl	800b94c <HAL_I2C_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c86:	f002 ff2f 	bl	8004ae8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c8e:	f00b f997 	bl	800cfc0 <HAL_I2CEx_ConfigAnalogFilter>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c98:	f002 ff26 	bl	8004ae8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001ca0:	f00b f9d9 	bl	800d056 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001caa:	f002 ff1d 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	2000025c 	.word	0x2000025c
 8001cb8:	40005800 	.word	0x40005800
 8001cbc:	60404e72 	.word	0x60404e72

08001cc0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b0b6      	sub	sp, #216	; 0xd8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	22b4      	movs	r2, #180	; 0xb4
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f013 fccf 	bl	8015684 <memset>
  if(i2cHandle->Instance==I2C2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a29      	ldr	r2, [pc, #164]	; (8001d90 <HAL_I2C_MspInit+0xd0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d14a      	bne.n	8001d86 <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cfa:	f107 0310 	add.w	r3, r7, #16
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f00c f96a 	bl	800dfd8 <HAL_RCCEx_PeriphCLKConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d0a:	f002 feed 	bl	8004ae8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_I2C_MspInit+0xd4>)
 8001d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_I2C_MspInit+0xd4>)
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_I2C_MspInit+0xd4>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d34:	2312      	movs	r3, #18
 8001d36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d46:	2304      	movs	r3, #4
 8001d48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4811      	ldr	r0, [pc, #68]	; (8001d98 <HAL_I2C_MspInit+0xd8>)
 8001d54:	f009 fc1e 	bl	800b594 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d58:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_I2C_MspInit+0xd4>)
 8001d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d5e:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <HAL_I2C_MspInit+0xd4>)
 8001d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_I2C_MspInit+0xd4>)
 8001d6a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2022      	movs	r0, #34	; 0x22
 8001d7c:	f006 ffa5 	bl	8008cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001d80:	2022      	movs	r0, #34	; 0x22
 8001d82:	f006 ffbc 	bl	8008cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001d86:	bf00      	nop
 8001d88:	37d8      	adds	r7, #216	; 0xd8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40005800 	.word	0x40005800
 8001d94:	58024400 	.word	0x58024400
 8001d98:	58020400 	.word	0x58020400
 8001d9c:	00000000 	.word	0x00000000

08001da0 <IPK>:
 *
 **************** Output ********************
 * q[4]				---> JointSpace Position
 *
 */
Kinematics_StatusTypeDef IPK(double gammabar[3], double chi[3], double q[4]) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	ed2d 8b02 	vpush	{d8}
 8001da6:	b08e      	sub	sp, #56	; 0x38
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	double c2;
	double q2;
	double q3;
	double s2;
	double x24;
	x24 = gammabar[1] * sqrt(chi[0] * chi[0] + chi[1] * chi[1]) - 20.0;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3308      	adds	r3, #8
 8001db4:	ed93 8b00 	vldr	d8, [r3]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	ed93 6b00 	vldr	d6, [r3]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	ed93 7b00 	vldr	d7, [r3]
 8001dc4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	3308      	adds	r3, #8
 8001dcc:	ed93 5b00 	vldr	d5, [r3]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	3308      	adds	r3, #8
 8001dd4:	ed93 7b00 	vldr	d7, [r3]
 8001dd8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ddc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001de0:	eeb0 0b47 	vmov.f64	d0, d7
 8001de4:	f013 fcf4 	bl	80157d0 <sqrt>
 8001de8:	eeb0 7b40 	vmov.f64	d7, d0
 8001dec:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001df0:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001df4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001df8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	c2 = x24 * x24
 8001dfc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001e00:	ee27 6b07 	vmul.f64	d6, d7, d7
			+ ((chi[2] + 268.23) - 295.89) * ((chi[2] + 268.23) - 295.89);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	3310      	adds	r3, #16
 8001e08:	ed93 7b00 	vldr	d7, [r3]
 8001e0c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8001fc0 <IPK+0x220>
 8001e10:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001e14:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8001fc8 <IPK+0x228>
 8001e18:	ee37 5b45 	vsub.f64	d5, d7, d5
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	3310      	adds	r3, #16
 8001e20:	ed93 7b00 	vldr	d7, [r3]
 8001e24:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8001fc0 <IPK+0x220>
 8001e28:	ee37 7b04 	vadd.f64	d7, d7, d4
 8001e2c:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8001fc8 <IPK+0x228>
 8001e30:	ee37 7b44 	vsub.f64	d7, d7, d4
 8001e34:	ee25 7b07 	vmul.f64	d7, d5, d7
	c2 = x24 * x24
 8001e38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e3c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	s2 = sqrt(c2);
 8001e40:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001e44:	f013 fcc4 	bl	80157d0 <sqrt>
 8001e48:	ed87 0b08 	vstr	d0, [r7, #32]
	if ((s2 <= 760.0) && (s2 >= 0.0)) {
 8001e4c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e50:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8001fd0 <IPK+0x230>
 8001e54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	f200 80a8 	bhi.w	8001fb0 <IPK+0x210>
 8001e60:	ed97 7b08 	vldr	d7, [r7, #32]
 8001e64:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6c:	f2c0 80a0 	blt.w	8001fb0 <IPK+0x210>
		c2 = ((c2 - 144400.0) - 144400.0) / 288800.0;
 8001e70:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001e74:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8001fd8 <IPK+0x238>
 8001e78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e7c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001fd8 <IPK+0x238>
 8001e80:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001e84:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8001fe0 <IPK+0x240>
 8001e88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e8c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		s2 = gammabar[2] * sqrt(1.0 - c2 * c2);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3310      	adds	r3, #16
 8001e94:	ed93 8b00 	vldr	d8, [r3]
 8001e98:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001e9c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001ea0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001ea4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8001eac:	f013 fc90 	bl	80157d0 <sqrt>
 8001eb0:	eeb0 7b40 	vmov.f64	d7, d0
 8001eb4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001eb8:	ed87 7b08 	vstr	d7, [r7, #32]
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	3310      	adds	r3, #16
 8001ec0:	ed93 7b00 	vldr	d7, [r3]
 8001ec4:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001fc0 <IPK+0x220>
 8001ec8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ecc:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8001fc8 <IPK+0x228>
 8001ed0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ed4:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8001ed8:	eeb0 0b47 	vmov.f64	d0, d7
 8001edc:	f013 fc74 	bl	80157c8 <atan2>
 8001ee0:	eeb0 8b40 	vmov.f64	d8, d0
				- atan2(380.0 * s2, 380.0 * c2 + 380.0)) - 1.5707963267948966;
 8001ee4:	ed97 7b08 	vldr	d7, [r7, #32]
 8001ee8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001fe8 <IPK+0x248>
 8001eec:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ef0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ef4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8001fe8 <IPK+0x248>
 8001ef8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001efc:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8001fe8 <IPK+0x248>
 8001f00:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001f04:	eeb0 1b47 	vmov.f64	d1, d7
 8001f08:	eeb0 0b46 	vmov.f64	d0, d6
 8001f0c:	f013 fc5c 	bl	80157c8 <atan2>
 8001f10:	eeb0 7b40 	vmov.f64	d7, d0
 8001f14:	ee38 7b47 	vsub.f64	d7, d8, d7
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8001f18:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8001ff0 <IPK+0x250>
 8001f1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f20:	ed87 7b06 	vstr	d7, [r7, #24]
		q3 = atan2(s2, c2) + 1.5707963267948966;
 8001f24:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001f28:	ed97 0b08 	vldr	d0, [r7, #32]
 8001f2c:	f013 fc4c 	bl	80157c8 <atan2>
 8001f30:	eeb0 7b40 	vmov.f64	d7, d0
 8001f34:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001ff0 <IPK+0x250>
 8001f38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f3c:	ed87 7b04 	vstr	d7, [r7, #16]
		q[0] = atan2(gammabar[0] * chi[1], gammabar[0] * chi[0]);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	ed93 6b00 	vldr	d6, [r3]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	3308      	adds	r3, #8
 8001f4a:	ed93 7b00 	vldr	d7, [r3]
 8001f4e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	ed93 6b00 	vldr	d6, [r3]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	ed93 7b00 	vldr	d7, [r3]
 8001f5e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001f62:	eeb0 1b47 	vmov.f64	d1, d7
 8001f66:	eeb0 0b45 	vmov.f64	d0, d5
 8001f6a:	f013 fc2d 	bl	80157c8 <atan2>
 8001f6e:	eeb0 7b40 	vmov.f64	d7, d0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	ed83 7b00 	vstr	d7, [r3]
		q[1] = q2;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f103 0108 	add.w	r1, r3, #8
 8001f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f82:	e9c1 2300 	strd	r2, r3, [r1]
		q[2] = q3;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f103 0110 	add.w	r1, r3, #16
 8001f8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f90:	e9c1 2300 	strd	r2, r3, [r1]
		q[3] = -q2 - q3;
 8001f94:	ed97 7b06 	vldr	d7, [r7, #24]
 8001f98:	eeb1 6b47 	vneg.f64	d6, d7
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	ed97 7b04 	vldr	d7, [r7, #16]
 8001fa4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fa8:	ed83 7b00 	vstr	d7, [r3]
		return Kinematics_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	e000      	b.n	8001fb2 <IPK+0x212>
	} else {
		return Error_Link_length;
 8001fb0:	2301      	movs	r3, #1
	}
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3738      	adds	r7, #56	; 0x38
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	ecbd 8b02 	vpop	{d8}
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	147ae148 	.word	0x147ae148
 8001fc4:	4070c3ae 	.word	0x4070c3ae
 8001fc8:	70a3d70a 	.word	0x70a3d70a
 8001fcc:	40727e3d 	.word	0x40727e3d
 8001fd0:	00000000 	.word	0x00000000
 8001fd4:	4087c000 	.word	0x4087c000
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	4101a080 	.word	0x4101a080
 8001fe0:	00000000 	.word	0x00000000
 8001fe4:	4111a080 	.word	0x4111a080
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	4077c000 	.word	0x4077c000
 8001ff0:	54442d18 	.word	0x54442d18
 8001ff4:	3ff921fb 	.word	0x3ff921fb

08001ff8 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(double q[3], double chi_dot[3], double qv[4])

Kinematics_StatusTypeDef IVK(double q[4], double chi_dot[3], double qv[4])
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	ed2d 8b04 	vpush	{d8-d9}
 8001ffe:	b0a6      	sub	sp, #152	; 0x98
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  double qvbar_idx_1;
  double qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3308      	adds	r3, #8
 800200c:	ed93 6b00 	vldr	d6, [r3]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3310      	adds	r3, #16
 8002014:	ed93 7b00 	vldr	d7, [r3]
 8002018:	ee36 7b07 	vadd.f64	d7, d6, d7
 800201c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = sin(qvbar_idx_1);
 8002020:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8002024:	f013 fb84 	bl	8015730 <sin>
 8002028:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78
  Jv4_tmp = cos(q[0]);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	ed93 7b00 	vldr	d7, [r3]
 8002032:	eeb0 0b47 	vmov.f64	d0, d7
 8002036:	f013 fb2f 	bl	8015698 <cos>
 800203a:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
  b_Jv4_tmp = sin(q[0]);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	ed93 7b00 	vldr	d7, [r3]
 8002044:	eeb0 0b47 	vmov.f64	d0, d7
 8002048:	f013 fb72 	bl	8015730 <sin>
 800204c:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 8002050:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8002054:	f013 fb20 	bl	8015698 <cos>
 8002058:	eeb0 7b40 	vmov.f64	d7, d0
 800205c:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 8002380 <IVK+0x388>
 8002060:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002064:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3308      	adds	r3, #8
 800206c:	ed93 7b00 	vldr	d7, [r3]
 8002070:	eeb0 0b47 	vmov.f64	d0, d7
 8002074:	f013 fb5c 	bl	8015730 <sin>
 8002078:	eeb0 7b40 	vmov.f64	d7, d0
 800207c:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8002380 <IVK+0x388>
 8002080:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002084:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 8002088:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800208c:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002090:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002094:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002098:	ee36 7b47 	vsub.f64	d7, d6, d7
 800209c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 80020a0:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80020a4:	eeb1 6b47 	vneg.f64	d6, d7
 80020a8:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80020ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80020b0:	ed87 7b04 	vstr	d7, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 80020b4:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80020b8:	eeb1 8b47 	vneg.f64	d8, d7
 80020bc:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80020c0:	ed9f 6baf 	vldr	d6, [pc, #700]	; 8002380 <IVK+0x388>
 80020c4:	ee27 9b06 	vmul.f64	d9, d7, d6
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3308      	adds	r3, #8
 80020cc:	ed93 7b00 	vldr	d7, [r3]
 80020d0:	eeb0 0b47 	vmov.f64	d0, d7
 80020d4:	f013 fae0 	bl	8015698 <cos>
 80020d8:	eeb0 7b40 	vmov.f64	d7, d0
 80020dc:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002380 <IVK+0x388>
 80020e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020e4:	ee39 7b07 	vadd.f64	d7, d9, d7
 80020e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80020ec:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 80020f0:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80020f4:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8002388 <IVK+0x390>
 80020f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020fc:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002100:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002104:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 8002108:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800210c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002110:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002114:	ed87 7b06 	vstr	d7, [r7, #24]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	ed93 7b00 	vldr	d7, [r3]
 800211e:	eeb0 0b47 	vmov.f64	d0, d7
 8002122:	f013 fb05 	bl	8015730 <sin>
 8002126:	eeb0 7b40 	vmov.f64	d7, d0
 800212a:	eeb1 8b47 	vneg.f64	d8, d7
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3308      	adds	r3, #8
 8002132:	ed93 6b00 	vldr	d6, [r3]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3310      	adds	r3, #16
 800213a:	ed93 7b00 	vldr	d7, [r3]
 800213e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002142:	eeb0 0b47 	vmov.f64	d0, d7
 8002146:	f013 faf3 	bl	8015730 <sin>
 800214a:	eeb0 7b40 	vmov.f64	d7, d0
 800214e:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002380 <IVK+0x388>
 8002152:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3308      	adds	r3, #8
 800215a:	ed93 7b00 	vldr	d7, [r3]
 800215e:	eeb0 0b47 	vmov.f64	d0, d7
 8002162:	f013 fa99 	bl	8015698 <cos>
 8002166:	eeb0 7b40 	vmov.f64	d7, d0
 800216a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002380 <IVK+0x388>
 800216e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002172:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002176:	ee28 7b07 	vmul.f64	d7, d8, d7
 800217a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3308      	adds	r3, #8
 8002182:	ed93 6b00 	vldr	d6, [r3]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3310      	adds	r3, #16
 800218a:	ed93 7b00 	vldr	d7, [r3]
 800218e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002192:	eeb0 0b47 	vmov.f64	d0, d7
 8002196:	f013 facb 	bl	8015730 <sin>
 800219a:	eeb0 7b40 	vmov.f64	d7, d0
 800219e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002388 <IVK+0x390>
 80021a2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021a6:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80021aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021ae:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
  Jv4[2] = 0.0;
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 80021be:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 80021c2:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80021c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021ca:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[8] = qvbar_idx_1;
 80021ce:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80021d2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  r1 = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  r2 = 1;
 80021dc:	2301      	movs	r3, #1
 80021de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  rtemp = 2;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 80021e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80021ec:	eeb0 6bc7 	vabs.f64	d6, d7
 80021f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80021f4:	eeb0 7bc7 	vabs.f64	d7, d7
 80021f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80021fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002200:	dd05      	ble.n	800220e <IVK+0x216>
    r1 = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    r2 = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  }
  Jv4[r2] /= Jv4[r1];
 800220e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	3398      	adds	r3, #152	; 0x98
 8002216:	443b      	add	r3, r7
 8002218:	3b88      	subs	r3, #136	; 0x88
 800221a:	ed93 5b00 	vldr	d5, [r3]
 800221e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	3398      	adds	r3, #152	; 0x98
 8002226:	443b      	add	r3, r7
 8002228:	3b88      	subs	r3, #136	; 0x88
 800222a:	ed93 6b00 	vldr	d6, [r3]
 800222e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002232:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	3398      	adds	r3, #152	; 0x98
 800223a:	443b      	add	r3, r7
 800223c:	3b88      	subs	r3, #136	; 0x88
 800223e:	ed83 7b00 	vstr	d7, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 8002242:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	3398      	adds	r3, #152	; 0x98
 800224a:	443b      	add	r3, r7
 800224c:	3b88      	subs	r3, #136	; 0x88
 800224e:	ed93 6b00 	vldr	d6, [r3]
 8002252:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8002390 <IVK+0x398>
 8002256:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800225a:	ed87 7b08 	vstr	d7, [r7, #32]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 800225e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002262:	3303      	adds	r3, #3
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	3398      	adds	r3, #152	; 0x98
 8002268:	443b      	add	r3, r7
 800226a:	3b88      	subs	r3, #136	; 0x88
 800226c:	ed93 6b00 	vldr	d6, [r3]
 8002270:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	3398      	adds	r3, #152	; 0x98
 8002278:	443b      	add	r3, r7
 800227a:	3b88      	subs	r3, #136	; 0x88
 800227c:	ed93 5b00 	vldr	d5, [r3]
 8002280:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002284:	3303      	adds	r3, #3
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	3398      	adds	r3, #152	; 0x98
 800228a:	443b      	add	r3, r7
 800228c:	3b88      	subs	r3, #136	; 0x88
 800228e:	ed93 7b00 	vldr	d7, [r3]
 8002292:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002296:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800229a:	3303      	adds	r3, #3
 800229c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	3398      	adds	r3, #152	; 0x98
 80022a4:	443b      	add	r3, r7
 80022a6:	3b88      	subs	r3, #136	; 0x88
 80022a8:	ed83 7b00 	vstr	d7, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 80022ac:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80022b0:	ed97 5b08 	vldr	d5, [r7, #32]
 80022b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022b8:	3303      	adds	r3, #3
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	3398      	adds	r3, #152	; 0x98
 80022be:	443b      	add	r3, r7
 80022c0:	3b88      	subs	r3, #136	; 0x88
 80022c2:	ed93 7b00 	vldr	d7, [r3]
 80022c6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80022ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022ce:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 80022d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022d6:	3306      	adds	r3, #6
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	3398      	adds	r3, #152	; 0x98
 80022dc:	443b      	add	r3, r7
 80022de:	3b88      	subs	r3, #136	; 0x88
 80022e0:	ed93 6b00 	vldr	d6, [r3]
 80022e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	3398      	adds	r3, #152	; 0x98
 80022ec:	443b      	add	r3, r7
 80022ee:	3b88      	subs	r3, #136	; 0x88
 80022f0:	ed93 5b00 	vldr	d5, [r3]
 80022f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022f8:	3306      	adds	r3, #6
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	3398      	adds	r3, #152	; 0x98
 80022fe:	443b      	add	r3, r7
 8002300:	3b88      	subs	r3, #136	; 0x88
 8002302:	ed93 7b00 	vldr	d7, [r3]
 8002306:	ee25 7b07 	vmul.f64	d7, d5, d7
 800230a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800230e:	3306      	adds	r3, #6
 8002310:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	3398      	adds	r3, #152	; 0x98
 8002318:	443b      	add	r3, r7
 800231a:	3b88      	subs	r3, #136	; 0x88
 800231c:	ed83 7b00 	vstr	d7, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 8002320:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8002324:	ed97 5b08 	vldr	d5, [r7, #32]
 8002328:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800232c:	3306      	adds	r3, #6
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	3398      	adds	r3, #152	; 0x98
 8002332:	443b      	add	r3, r7
 8002334:	3b88      	subs	r3, #136	; 0x88
 8002336:	ed93 7b00 	vldr	d7, [r3]
 800233a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800233e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002342:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 8002346:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800234a:	eeb0 6bc7 	vabs.f64	d6, d7
 800234e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002352:	3303      	adds	r3, #3
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	3398      	adds	r3, #152	; 0x98
 8002358:	443b      	add	r3, r7
 800235a:	3b88      	subs	r3, #136	; 0x88
 800235c:	ed93 7b00 	vldr	d7, [r3]
 8002360:	eeb0 7bc7 	vabs.f64	d7, d7
 8002364:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800236c:	dd14      	ble.n	8002398 <IVK+0x3a0>
    rtemp = r2;
 800236e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002372:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    r2 = 2;
 8002376:	2302      	movs	r3, #2
 8002378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800237c:	e00c      	b.n	8002398 <IVK+0x3a0>
 800237e:	bf00      	nop
 8002380:	00000000 	.word	0x00000000
 8002384:	4077c000 	.word	0x4077c000
 8002388:	00000000 	.word	0x00000000
 800238c:	c077c000 	.word	0xc077c000
	...
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 8002398:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800239c:	3303      	adds	r3, #3
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	3398      	adds	r3, #152	; 0x98
 80023a2:	443b      	add	r3, r7
 80023a4:	3b88      	subs	r3, #136	; 0x88
 80023a6:	ed93 5b00 	vldr	d5, [r3]
 80023aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ae:	3303      	adds	r3, #3
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	3398      	adds	r3, #152	; 0x98
 80023b4:	443b      	add	r3, r7
 80023b6:	3b88      	subs	r3, #136	; 0x88
 80023b8:	ed93 6b00 	vldr	d6, [r3]
 80023bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023c0:	3303      	adds	r3, #3
 80023c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	3398      	adds	r3, #152	; 0x98
 80023ca:	443b      	add	r3, r7
 80023cc:	3b88      	subs	r3, #136	; 0x88
 80023ce:	ed83 7b00 	vstr	d7, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 80023d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023d6:	3306      	adds	r3, #6
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	3398      	adds	r3, #152	; 0x98
 80023dc:	443b      	add	r3, r7
 80023de:	3b88      	subs	r3, #136	; 0x88
 80023e0:	ed93 6b00 	vldr	d6, [r3]
 80023e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023e8:	3303      	adds	r3, #3
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	3398      	adds	r3, #152	; 0x98
 80023ee:	443b      	add	r3, r7
 80023f0:	3b88      	subs	r3, #136	; 0x88
 80023f2:	ed93 5b00 	vldr	d5, [r3]
 80023f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023fa:	3306      	adds	r3, #6
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	3398      	adds	r3, #152	; 0x98
 8002400:	443b      	add	r3, r7
 8002402:	3b88      	subs	r3, #136	; 0x88
 8002404:	ed93 7b00 	vldr	d7, [r3]
 8002408:	ee25 7b07 	vmul.f64	d7, d5, d7
 800240c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002410:	3306      	adds	r3, #6
 8002412:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	3398      	adds	r3, #152	; 0x98
 800241a:	443b      	add	r3, r7
 800241c:	3b88      	subs	r3, #136	; 0x88
 800241e:	ed83 7b00 	vstr	d7, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 8002422:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	4413      	add	r3, r2
 800242c:	ed93 6b00 	vldr	d6, [r3]
 8002430:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	4413      	add	r3, r2
 800243a:	ed93 5b00 	vldr	d5, [r3]
 800243e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	3398      	adds	r3, #152	; 0x98
 8002446:	443b      	add	r3, r7
 8002448:	3b88      	subs	r3, #136	; 0x88
 800244a:	ed93 7b00 	vldr	d7, [r3]
 800244e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002452:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002456:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 800245a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	4413      	add	r3, r2
 8002464:	ed93 6b00 	vldr	d6, [r3]
 8002468:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4413      	add	r3, r2
 8002472:	ed93 5b00 	vldr	d5, [r3]
 8002476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	3398      	adds	r3, #152	; 0x98
 800247e:	443b      	add	r3, r7
 8002480:	3b88      	subs	r3, #136	; 0x88
 8002482:	ed93 7b00 	vldr	d7, [r3]
 8002486:	ee25 7b07 	vmul.f64	d7, d5, d7
 800248a:	ee36 6b47 	vsub.f64	d6, d6, d7
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 800248e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002492:	3303      	adds	r3, #3
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	3398      	adds	r3, #152	; 0x98
 8002498:	443b      	add	r3, r7
 800249a:	3b88      	subs	r3, #136	; 0x88
 800249c:	ed93 5b00 	vldr	d5, [r3]
 80024a0:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80024a4:	ee25 7b07 	vmul.f64	d7, d5, d7
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80024a8:	ee36 5b47 	vsub.f64	d5, d6, d7
                Jv4[rtemp + 6];
 80024ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024b0:	3306      	adds	r3, #6
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	3398      	adds	r3, #152	; 0x98
 80024b6:	443b      	add	r3, r7
 80024b8:	3b88      	subs	r3, #136	; 0x88
 80024ba:	ed93 6b00 	vldr	d6, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80024be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024c2:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 80024c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ca:	3306      	adds	r3, #6
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	3398      	adds	r3, #152	; 0x98
 80024d0:	443b      	add	r3, r7
 80024d2:	3b88      	subs	r3, #136	; 0x88
 80024d4:	ed93 6b00 	vldr	d6, [r3]
 80024d8:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80024dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80024e0:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 80024e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024e8:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_1 /= Jv4[r2 + 3];
 80024ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024f0:	3303      	adds	r3, #3
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	3398      	adds	r3, #152	; 0x98
 80024f6:	443b      	add	r3, r7
 80024f8:	3b88      	subs	r3, #136	; 0x88
 80024fa:	ed93 6b00 	vldr	d6, [r3]
 80024fe:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8002502:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002506:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 800250a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	4413      	add	r3, r2
 8002514:	ed93 6b00 	vldr	d6, [r3]
 8002518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800251c:	3306      	adds	r3, #6
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	3398      	adds	r3, #152	; 0x98
 8002522:	443b      	add	r3, r7
 8002524:	3b88      	subs	r3, #136	; 0x88
 8002526:	ed93 5b00 	vldr	d5, [r3]
 800252a:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800252e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002532:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002536:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800253a:	3303      	adds	r3, #3
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	3398      	adds	r3, #152	; 0x98
 8002540:	443b      	add	r3, r7
 8002542:	3b88      	subs	r3, #136	; 0x88
 8002544:	ed93 5b00 	vldr	d5, [r3]
 8002548:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800254c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002550:	ee36 5b47 	vsub.f64	d5, d6, d7
      Jv4[r1];
 8002554:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	3398      	adds	r3, #152	; 0x98
 800255c:	443b      	add	r3, r7
 800255e:	3b88      	subs	r3, #136	; 0x88
 8002560:	ed93 6b00 	vldr	d6, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002564:	ee85 7b06 	vdiv.f64	d7, d5, d6
  qv[0] =
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	ed83 7b00 	vstr	d7, [r3]
  qv[1] = qvbar_idx_1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f103 0108 	add.w	r1, r3, #8
 8002574:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002578:	e9c1 2300 	strd	r2, r3, [r1]
  qv[2] = qvbar_idx_2;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f103 0110 	add.w	r1, r3, #16
 8002582:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002586:	e9c1 2300 	strd	r2, r3, [r1]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 800258a:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800258e:	eeb1 6b47 	vneg.f64	d6, d7
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3318      	adds	r3, #24
 8002596:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800259a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800259e:	ed83 7b00 	vstr	d7, [r3]
  return Kinematics_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3798      	adds	r7, #152	; 0x98
 80025a8:	46bd      	mov	sp, r7
 80025aa:	ecbd 8b04 	vpop	{d8-d9}
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <FPK>:
 * Arguments    : const double q[5]
 *                double l3
 *                double Pne[3]
 * Return Type  : void
 */
void FPK(double q[5], double l3, double Pne[3]) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	ed2d 8b08 	vpush	{d8-d11}
 80025b6:	b094      	sub	sp, #80	; 0x50
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	ed87 0b00 	vstr	d0, [r7]
 80025c0:	60b9      	str	r1, [r7, #8]
	double e_Pne_tmp;
	double f_Pne_tmp;
	double g_Pne_tmp;
	double h_Pne_tmp;
	/* offset */
	Pne_tmp = cos(q[0]);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	ed93 7b00 	vldr	d7, [r3]
 80025c8:	eeb0 0b47 	vmov.f64	d0, d7
 80025cc:	f013 f864 	bl	8015698 <cos>
 80025d0:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	b_Pne_tmp = sin(q[2]);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	3310      	adds	r3, #16
 80025d8:	ed93 7b00 	vldr	d7, [r3]
 80025dc:	eeb0 0b47 	vmov.f64	d0, d7
 80025e0:	f013 f8a6 	bl	8015730 <sin>
 80025e4:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	c_Pne_tmp = cos(q[2]);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3310      	adds	r3, #16
 80025ec:	ed93 7b00 	vldr	d7, [r3]
 80025f0:	eeb0 0b47 	vmov.f64	d0, d7
 80025f4:	f013 f850 	bl	8015698 <cos>
 80025f8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	d_Pne_tmp = sin(q[1]);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	3308      	adds	r3, #8
 8002600:	ed93 7b00 	vldr	d7, [r3]
 8002604:	eeb0 0b47 	vmov.f64	d0, d7
 8002608:	f013 f892 	bl	8015730 <sin>
 800260c:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	e_Pne_tmp = cos(q[1]);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3308      	adds	r3, #8
 8002614:	ed93 7b00 	vldr	d7, [r3]
 8002618:	eeb0 0b47 	vmov.f64	d0, d7
 800261c:	f013 f83c 	bl	8015698 <cos>
 8002620:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	f_Pne_tmp = sin(q[0]);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	ed93 7b00 	vldr	d7, [r3]
 800262a:	eeb0 0b47 	vmov.f64	d0, d7
 800262e:	f013 f87f 	bl	8015730 <sin>
 8002632:	ed87 0b08 	vstr	d0, [r7, #32]
	g_Pne_tmp = cos(q[3]);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3318      	adds	r3, #24
 800263a:	ed93 7b00 	vldr	d7, [r3]
 800263e:	eeb0 0b47 	vmov.f64	d0, d7
 8002642:	f013 f829 	bl	8015698 <cos>
 8002646:	ed87 0b06 	vstr	d0, [r7, #24]
	h_Pne_tmp = sin(q[3]);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	3318      	adds	r3, #24
 800264e:	ed93 7b00 	vldr	d7, [r3]
 8002652:	eeb0 0b47 	vmov.f64	d0, d7
 8002656:	f013 f86b 	bl	8015730 <sin>
 800265a:	ed87 0b04 	vstr	d0, [r7, #16]
	Pne[0] =
			((380.0
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 800265e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8002662:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002666:	ee26 6b07 	vmul.f64	d6, d6, d7
 800266a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800266e:	ee26 6b07 	vmul.f64	d6, d6, d7
							- Pne_tmp * d_Pne_tmp * b_Pne_tmp)
 8002672:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8002676:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800267a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800267e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002682:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002686:	ee36 7b47 	vsub.f64	d7, d6, d7
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 800268a:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 80029f8 <FPK+0x448>
 800268e:	ee27 8b06 	vmul.f64	d8, d7, d6
					+ l3
							* (g_Pne_tmp
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	ed93 7b00 	vldr	d7, [r3]
 8002698:	eeb0 0b47 	vmov.f64	d0, d7
 800269c:	f012 fffc 	bl	8015698 <cos>
 80026a0:	eeb0 9b40 	vmov.f64	d9, d0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	3308      	adds	r3, #8
 80026a8:	ed93 7b00 	vldr	d7, [r3]
 80026ac:	eeb0 0b47 	vmov.f64	d0, d7
 80026b0:	f012 fff2 	bl	8015698 <cos>
 80026b4:	eeb0 7b40 	vmov.f64	d7, d0
 80026b8:	ee29 6b07 	vmul.f64	d6, d9, d7
 80026bc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80026c0:	ee26 6b07 	vmul.f64	d6, d6, d7
											+ Pne_tmp * c_Pne_tmp * d_Pne_tmp)
 80026c4:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 80026c8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80026cc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80026d0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80026d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026d8:	ee36 6b07 	vadd.f64	d6, d6, d7
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 80026dc:	ed97 7b06 	vldr	d7, [r7, #24]
 80026e0:	ee26 9b07 	vmul.f64	d9, d6, d7
									+ h_Pne_tmp
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	ed93 7b00 	vldr	d7, [r3]
 80026ea:	eeb0 0b47 	vmov.f64	d0, d7
 80026ee:	f012 ffd3 	bl	8015698 <cos>
 80026f2:	eeb0 ab40 	vmov.f64	d10, d0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	3308      	adds	r3, #8
 80026fa:	ed93 7b00 	vldr	d7, [r3]
 80026fe:	eeb0 0b47 	vmov.f64	d0, d7
 8002702:	f012 ffc9 	bl	8015698 <cos>
 8002706:	eeb0 7b40 	vmov.f64	d7, d0
 800270a:	ee2a ab07 	vmul.f64	d10, d10, d7
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3310      	adds	r3, #16
 8002712:	ed93 7b00 	vldr	d7, [r3]
 8002716:	eeb0 0b47 	vmov.f64	d0, d7
 800271a:	f012 ffbd 	bl	8015698 <cos>
 800271e:	eeb0 7b40 	vmov.f64	d7, d0
 8002722:	ee2a ab07 	vmul.f64	d10, d10, d7
													- cos(q[0]) * sin(q[1])
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	ed93 7b00 	vldr	d7, [r3]
 800272c:	eeb0 0b47 	vmov.f64	d0, d7
 8002730:	f012 ffb2 	bl	8015698 <cos>
 8002734:	eeb0 bb40 	vmov.f64	d11, d0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	3308      	adds	r3, #8
 800273c:	ed93 7b00 	vldr	d7, [r3]
 8002740:	eeb0 0b47 	vmov.f64	d0, d7
 8002744:	f012 fff4 	bl	8015730 <sin>
 8002748:	eeb0 7b40 	vmov.f64	d7, d0
 800274c:	ee2b bb07 	vmul.f64	d11, d11, d7
															* sin(q[2]))))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3310      	adds	r3, #16
 8002754:	ed93 7b00 	vldr	d7, [r3]
 8002758:	eeb0 0b47 	vmov.f64	d0, d7
 800275c:	f012 ffe8 	bl	8015730 <sin>
 8002760:	eeb0 7b40 	vmov.f64	d7, d0
 8002764:	ee2b 7b07 	vmul.f64	d7, d11, d7
													- cos(q[0]) * sin(q[1])
 8002768:	ee3a 6b47 	vsub.f64	d6, d10, d7
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 800276c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002770:	ee26 7b07 	vmul.f64	d7, d6, d7
									+ h_Pne_tmp
 8002774:	ee39 6b07 	vadd.f64	d6, d9, d7
							* (g_Pne_tmp
 8002778:	ed97 7b00 	vldr	d7, [r7]
 800277c:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ l3
 8002780:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ 20.0 * Pne_tmp) - 380.0 * Pne_tmp * d_Pne_tmp;
 8002784:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002788:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 800278c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002790:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002794:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002798:	ed9f 5b97 	vldr	d5, [pc, #604]	; 80029f8 <FPK+0x448>
 800279c:	ee27 5b05 	vmul.f64	d5, d7, d5
 80027a0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80027a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027a8:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[0] =
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	ed83 7b00 	vstr	d7, [r3]
	Pne[1] = ((l3
			* (g_Pne_tmp
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 80027b2:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80027b6:	ed97 7b08 	vldr	d7, [r7, #32]
 80027ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 80027be:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80027c2:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ c_Pne_tmp * f_Pne_tmp * d_Pne_tmp)
 80027c6:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 80027ca:	ed97 7b08 	vldr	d7, [r7, #32]
 80027ce:	ee25 5b07 	vmul.f64	d5, d5, d7
 80027d2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80027d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027da:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 80027de:	ed97 7b06 	vldr	d7, [r7, #24]
 80027e2:	ee26 6b07 	vmul.f64	d6, d6, d7
					- h_Pne_tmp
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 80027e6:	ed97 5b08 	vldr	d5, [r7, #32]
 80027ea:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80027ee:	ee25 5b07 	vmul.f64	d5, d5, d7
 80027f2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80027f6:	ee25 5b07 	vmul.f64	d5, d5, d7
									- e_Pne_tmp * c_Pne_tmp * f_Pne_tmp))
 80027fa:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 80027fe:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002802:	ee24 4b07 	vmul.f64	d4, d4, d7
 8002806:	ed97 7b08 	vldr	d7, [r7, #32]
 800280a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800280e:	ee35 5b47 	vsub.f64	d5, d5, d7
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002812:	ed97 7b04 	vldr	d7, [r7, #16]
 8002816:	ee25 7b07 	vmul.f64	d7, d5, d7
					- h_Pne_tmp
 800281a:	ee36 6b47 	vsub.f64	d6, d6, d7
			* (g_Pne_tmp
 800281e:	ed97 7b00 	vldr	d7, [r7]
 8002822:	ee26 8b07 	vmul.f64	d8, d6, d7
			- 380.0
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	ed93 7b00 	vldr	d7, [r3]
 800282c:	eeb0 0b47 	vmov.f64	d0, d7
 8002830:	f012 ff7e 	bl	8015730 <sin>
 8002834:	eeb0 9b40 	vmov.f64	d9, d0
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	3308      	adds	r3, #8
 800283c:	ed93 7b00 	vldr	d7, [r3]
 8002840:	eeb0 0b47 	vmov.f64	d0, d7
 8002844:	f012 ff74 	bl	8015730 <sin>
 8002848:	eeb0 7b40 	vmov.f64	d7, d0
 800284c:	ee29 9b07 	vmul.f64	d9, d9, d7
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3310      	adds	r3, #16
 8002854:	ed93 7b00 	vldr	d7, [r3]
 8002858:	eeb0 0b47 	vmov.f64	d0, d7
 800285c:	f012 ff68 	bl	8015730 <sin>
 8002860:	eeb0 7b40 	vmov.f64	d7, d0
 8002864:	ee29 9b07 	vmul.f64	d9, d9, d7
							- cos(q[1]) * cos(q[2]) * sin(q[0])))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3308      	adds	r3, #8
 800286c:	ed93 7b00 	vldr	d7, [r3]
 8002870:	eeb0 0b47 	vmov.f64	d0, d7
 8002874:	f012 ff10 	bl	8015698 <cos>
 8002878:	eeb0 ab40 	vmov.f64	d10, d0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3310      	adds	r3, #16
 8002880:	ed93 7b00 	vldr	d7, [r3]
 8002884:	eeb0 0b47 	vmov.f64	d0, d7
 8002888:	f012 ff06 	bl	8015698 <cos>
 800288c:	eeb0 7b40 	vmov.f64	d7, d0
 8002890:	ee2a ab07 	vmul.f64	d10, d10, d7
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	ed93 7b00 	vldr	d7, [r3]
 800289a:	eeb0 0b47 	vmov.f64	d0, d7
 800289e:	f012 ff47 	bl	8015730 <sin>
 80028a2:	eeb0 7b40 	vmov.f64	d7, d0
 80028a6:	ee2a 7b07 	vmul.f64	d7, d10, d7
 80028aa:	ee39 7b47 	vsub.f64	d7, d9, d7
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 80028ae:	ed9f 6b52 	vldr	d6, [pc, #328]	; 80029f8 <FPK+0x448>
 80028b2:	ee27 7b06 	vmul.f64	d7, d7, d6
			- 380.0
 80028b6:	ee38 6b47 	vsub.f64	d6, d8, d7
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 80028ba:	ed97 7b08 	vldr	d7, [r7, #32]
 80028be:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80028c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80028c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80028ca:	ed97 7b08 	vldr	d7, [r7, #32]
 80028ce:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 80029f8 <FPK+0x448>
 80028d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80028d6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80028da:	ee25 7b07 	vmul.f64	d7, d5, d7
	Pne[1] = ((l3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	3308      	adds	r3, #8
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 80028e2:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[1] = ((l3
 80028e6:	ed83 7b00 	vstr	d7, [r3]
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 80028ea:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80028ee:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80028f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80028f6:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 80028fa:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80028fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002902:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002906:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80029f8 <FPK+0x448>
 800290a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800290e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002a00 <FPK+0x450>
 8002912:	ee37 6b06 	vadd.f64	d6, d7, d6
			+ 380.0 * e_Pne_tmp)
 8002916:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800291a:	ed9f 5b37 	vldr	d5, [pc, #220]	; 80029f8 <FPK+0x448>
 800291e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002922:	ee36 8b07 	vadd.f64	d8, d6, d7
			- l3
					* (g_Pne_tmp
							* (cos(q[1]) * cos(q[2]) - d_Pne_tmp * b_Pne_tmp)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3308      	adds	r3, #8
 800292a:	ed93 7b00 	vldr	d7, [r3]
 800292e:	eeb0 0b47 	vmov.f64	d0, d7
 8002932:	f012 feb1 	bl	8015698 <cos>
 8002936:	eeb0 9b40 	vmov.f64	d9, d0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3310      	adds	r3, #16
 800293e:	ed93 7b00 	vldr	d7, [r3]
 8002942:	eeb0 0b47 	vmov.f64	d0, d7
 8002946:	f012 fea7 	bl	8015698 <cos>
 800294a:	eeb0 7b40 	vmov.f64	d7, d0
 800294e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002952:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8002956:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800295a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800295e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002962:	ed97 7b06 	vldr	d7, [r7, #24]
 8002966:	ee26 9b07 	vmul.f64	d9, d6, d7
							- h_Pne_tmp
									* (cos(q[1]) * sin(q[2])
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3308      	adds	r3, #8
 800296e:	ed93 7b00 	vldr	d7, [r3]
 8002972:	eeb0 0b47 	vmov.f64	d0, d7
 8002976:	f012 fe8f 	bl	8015698 <cos>
 800297a:	eeb0 ab40 	vmov.f64	d10, d0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	3310      	adds	r3, #16
 8002982:	ed93 7b00 	vldr	d7, [r3]
 8002986:	eeb0 0b47 	vmov.f64	d0, d7
 800298a:	f012 fed1 	bl	8015730 <sin>
 800298e:	eeb0 7b40 	vmov.f64	d7, d0
 8002992:	ee2a ab07 	vmul.f64	d10, d10, d7
											+ cos(q[2]) * sin(q[1])));
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	3310      	adds	r3, #16
 800299a:	ed93 7b00 	vldr	d7, [r3]
 800299e:	eeb0 0b47 	vmov.f64	d0, d7
 80029a2:	f012 fe79 	bl	8015698 <cos>
 80029a6:	eeb0 bb40 	vmov.f64	d11, d0
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3308      	adds	r3, #8
 80029ae:	ed93 7b00 	vldr	d7, [r3]
 80029b2:	eeb0 0b47 	vmov.f64	d0, d7
 80029b6:	f012 febb 	bl	8015730 <sin>
 80029ba:	eeb0 7b40 	vmov.f64	d7, d0
 80029be:	ee2b 7b07 	vmul.f64	d7, d11, d7
 80029c2:	ee3a 6b07 	vadd.f64	d6, d10, d7
									* (cos(q[1]) * sin(q[2])
 80029c6:	ed97 7b04 	vldr	d7, [r7, #16]
 80029ca:	ee26 7b07 	vmul.f64	d7, d6, d7
							- h_Pne_tmp
 80029ce:	ee39 6b47 	vsub.f64	d6, d9, d7
					* (g_Pne_tmp
 80029d2:	ed97 7b00 	vldr	d7, [r7]
 80029d6:	ee26 7b07 	vmul.f64	d7, d6, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	3310      	adds	r3, #16
			- l3
 80029de:	ee38 7b47 	vsub.f64	d7, d8, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 80029e2:	ed83 7b00 	vstr	d7, [r3]
}
 80029e6:	bf00      	nop
 80029e8:	3750      	adds	r7, #80	; 0x50
 80029ea:	46bd      	mov	sp, r7
 80029ec:	ecbd 8b08 	vpop	{d8-d11}
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	f3af 8000 	nop.w
 80029f8:	00000000 	.word	0x00000000
 80029fc:	4077c000 	.word	0x4077c000
 8002a00:	70a3d70a 	.word	0x70a3d70a
 8002a04:	40727e3d 	.word	0x40727e3d

08002a08 <ChessPose>:
	twist_tmp = l3 * sin((q[1] + q[2]) + q[3]);
	twist[2] = (qd[1] * ((twist_tmp_tmp - twist_tmp_tmp_tmp) + twist_tmp)
			+ qd[2] * (twist_tmp_tmp + twist_tmp)) + g_twist_tmp * d_twist_tmp;
}

void ChessPose(uint8_t Chess_Index, double Chess_Theta, double ChessPosition[2]) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b094      	sub	sp, #80	; 0x50
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	ed87 0b00 	vstr	d0, [r7]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	73fb      	strb	r3, [r7, #15]
	/*
	 *
	 */
	uint8_t X = (Chess_Index%8) + 1;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	3301      	adds	r3, #1
 8002a22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t N = (Chess_Index/8) + 1;
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	double l = 260;
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	4b40      	ldr	r3, [pc, #256]	; (8002b38 <ChessPose+0x130>)
 8002a38:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double L = 400;
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <ChessPose+0x134>)
 8002a42:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double b_positionx_tmp;
	double c_positionx_tmp;
	double d_positionx_tmp;
	double e_positionx_tmp;
	double positionx_tmp;
	positionx_tmp = cos(Chess_Theta);
 8002a46:	ed97 0b00 	vldr	d0, [r7]
 8002a4a:	f012 fe25 	bl	8015698 <cos>
 8002a4e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	b_positionx_tmp = sin(Chess_Theta);
 8002a52:	ed97 0b00 	vldr	d0, [r7]
 8002a56:	f012 fe6b 	bl	8015730 <sin>
 8002a5a:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	c_positionx_tmp = 9.0 * L / 16.0;
 8002a5e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002a62:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002a66:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a6a:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8002a6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a72:	ed87 7b08 	vstr	d7, [r7, #32]
	d_positionx_tmp = X * L / 8.0 - c_positionx_tmp;
 8002a76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002a82:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002a86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002a8a:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002a8e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002a92:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a96:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002a9a:	ed87 7b06 	vstr	d7, [r7, #24]
	e_positionx_tmp = N * L / 8.0;
 8002a9e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002aaa:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002aae:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002ab2:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002ab6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002aba:	ed87 7b04 	vstr	d7, [r7, #16]
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002abe:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002ac2:	ed97 7b06 	vldr	d7, [r7, #24]
 8002ac6:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp * positionx_tmp)) + l)
 8002aca:	ed97 5b08 	vldr	d5, [r7, #32]
 8002ace:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002ad2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002ad6:	ed97 5b04 	vldr	d5, [r7, #16]
 8002ada:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002ade:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ae2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002ae6:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ L / 2.0;
 8002aea:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8002aee:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002af2:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002af6:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	ed83 7b00 	vstr	d7, [r3]
	ChessPosition[1] = -positionx_tmp * d_positionx_tmp
 8002b00:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b04:	eeb1 6b47 	vneg.f64	d6, d7
 8002b08:	ed97 7b06 	vldr	d7, [r7, #24]
 8002b0c:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp;
 8002b10:	ed97 5b04 	vldr	d5, [r7, #16]
 8002b14:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b18:	ee35 5b47 	vsub.f64	d5, d5, d7
 8002b1c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002b20:	ee25 7b07 	vmul.f64	d7, d5, d7
	ChessPosition[1] = -positionx_tmp * d_positionx_tmp
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	3308      	adds	r3, #8
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp;
 8002b28:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[1] = -positionx_tmp * d_positionx_tmp
 8002b2c:	ed83 7b00 	vstr	d7, [r3]
}
 8002b30:	bf00      	nop
 8002b32:	3750      	adds	r7, #80	; 0x50
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40704000 	.word	0x40704000
 8002b3c:	40790000 	.word	0x40790000

08002b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b096      	sub	sp, #88	; 0x58
 8002b44:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b46:	f003 fde1 	bl	800670c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b4a:	f000 fb55 	bl	80031f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002b4e:	f000 fbcb 	bl	80032e8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b52:	f7fe ff3b 	bl	80019cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002b56:	f7fe ff09 	bl	800196c <MX_DMA_Init>
  MX_ADC3_Init();
 8002b5a:	f7fe f829 	bl	8000bb0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002b5e:	f002 fa3d 	bl	8004fdc <MX_TIM1_Init>
  MX_TIM3_Init();
 8002b62:	f002 fb1f 	bl	80051a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002b66:	f002 fb95 	bl	8005294 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002b6a:	f002 fbe9 	bl	8005340 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002b6e:	f002 fca3 	bl	80054b8 <MX_TIM8_Init>
  MX_TIM13_Init();
 8002b72:	f002 fcfb 	bl	800556c <MX_TIM13_Init>
  MX_TIM14_Init();
 8002b76:	f002 fd49 	bl	800560c <MX_TIM14_Init>
  MX_TIM15_Init();
 8002b7a:	f002 fd97 	bl	80056ac <MX_TIM15_Init>
  MX_TIM16_Init();
 8002b7e:	f002 fe1d 	bl	80057bc <MX_TIM16_Init>
  MX_TIM17_Init();
 8002b82:	f002 fe97 	bl	80058b4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002b86:	f003 fbcd 	bl	8006324 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002b8a:	f003 fc19 	bl	80063c0 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002b8e:	f001 ffb1 	bl	8004af4 <MX_SPI3_Init>
  MX_SPI4_Init();
 8002b92:	f002 f807 	bl	8004ba4 <MX_SPI4_Init>
  MX_I2C2_Init();
 8002b96:	f7ff f853 	bl	8001c40 <MX_I2C2_Init>
  MX_CRC_Init();
 8002b9a:	f7fe fe99 	bl	80018d0 <MX_CRC_Init>
  MX_TIM24_Init();
 8002b9e:	f002 ff55 	bl	8005a4c <MX_TIM24_Init>
  MX_TIM23_Init();
 8002ba2:	f002 ff03 	bl	80059ac <MX_TIM23_Init>
  MX_TIM6_Init();
 8002ba6:	f002 fc4f 	bl	8005448 <MX_TIM6_Init>
  MX_UART5_Init();
 8002baa:	f003 fb69 	bl	8006280 <MX_UART5_Init>
  MX_ADC1_Init();
 8002bae:	f7fd ff23 	bl	80009f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002bb2:	f7fd ff9d 	bl	8000af0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002bb6:	f002 faa1 	bl	80050fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	MX_DMA_Init();
 8002bba:	f7fe fed7 	bl	800196c <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	2140      	movs	r1, #64	; 0x40
 8002bc2:	48c9      	ldr	r0, [pc, #804]	; (8002ee8 <main+0x3a8>)
 8002bc4:	f008 fe8e 	bl	800b8e4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2140      	movs	r1, #64	; 0x40
 8002bcc:	48c7      	ldr	r0, [pc, #796]	; (8002eec <main+0x3ac>)
 8002bce:	f008 fe89 	bl	800b8e4 <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 8002bd2:	4bc7      	ldr	r3, [pc, #796]	; (8002ef0 <main+0x3b0>)
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4bc6      	ldr	r3, [pc, #792]	; (8002ef4 <main+0x3b4>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002be6:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8002e80 <main+0x340>
 8002bea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002bee:	4bc2      	ldr	r3, [pc, #776]	; (8002ef8 <main+0x3b8>)
 8002bf0:	ed83 7b00 	vstr	d7, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002bf4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	48c0      	ldr	r0, [pc, #768]	; (8002efc <main+0x3bc>)
 8002bfc:	f005 fe12 	bl	8008824 <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0,6500);
 8002c00:	2301      	movs	r3, #1
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8002e88 <main+0x348>
 8002c08:	4bbd      	ldr	r3, [pc, #756]	; (8002f00 <main+0x3c0>)
 8002c0a:	4ab7      	ldr	r2, [pc, #732]	; (8002ee8 <main+0x3a8>)
 8002c0c:	49bd      	ldr	r1, [pc, #756]	; (8002f04 <main+0x3c4>)
 8002c0e:	48be      	ldr	r0, [pc, #760]	; (8002f08 <main+0x3c8>)
 8002c10:	f7fd fd26 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1,10100);
 8002c14:	2302      	movs	r3, #2
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8002e90 <main+0x350>
 8002c1c:	4bb8      	ldr	r3, [pc, #736]	; (8002f00 <main+0x3c0>)
 8002c1e:	4ab2      	ldr	r2, [pc, #712]	; (8002ee8 <main+0x3a8>)
 8002c20:	49b8      	ldr	r1, [pc, #736]	; (8002f04 <main+0x3c4>)
 8002c22:	48ba      	ldr	r0, [pc, #744]	; (8002f0c <main+0x3cc>)
 8002c24:	f7fd fd1c 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2,3165);
 8002c28:	2304      	movs	r3, #4
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8002e98 <main+0x358>
 8002c30:	4bb3      	ldr	r3, [pc, #716]	; (8002f00 <main+0x3c0>)
 8002c32:	4aad      	ldr	r2, [pc, #692]	; (8002ee8 <main+0x3a8>)
 8002c34:	49b3      	ldr	r1, [pc, #716]	; (8002f04 <main+0x3c4>)
 8002c36:	48b6      	ldr	r0, [pc, #728]	; (8002f10 <main+0x3d0>)
 8002c38:	f7fd fd12 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3,6970);
 8002c3c:	2308      	movs	r3, #8
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	ed9f 0b97 	vldr	d0, [pc, #604]	; 8002ea0 <main+0x360>
 8002c44:	4bae      	ldr	r3, [pc, #696]	; (8002f00 <main+0x3c0>)
 8002c46:	4aa8      	ldr	r2, [pc, #672]	; (8002ee8 <main+0x3a8>)
 8002c48:	49ae      	ldr	r1, [pc, #696]	; (8002f04 <main+0x3c4>)
 8002c4a:	48b2      	ldr	r0, [pc, #712]	; (8002f14 <main+0x3d4>)
 8002c4c:	f7fd fd08 	bl	8000660 <AS5047U_init>

	HAL_Delay(50);
 8002c50:	2032      	movs	r0, #50	; 0x32
 8002c52:	f003 fded 	bl	8006830 <HAL_Delay>
//	AS5047U_Write(&Encoder[0], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[1], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[2], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[3], 0x0019, 0b00100000);

	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	211a      	movs	r1, #26
 8002c5a:	48ab      	ldr	r0, [pc, #684]	; (8002f08 <main+0x3c8>)
 8002c5c:	f7fd fd4c 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 8002c60:	2240      	movs	r2, #64	; 0x40
 8002c62:	211a      	movs	r1, #26
 8002c64:	48a9      	ldr	r0, [pc, #676]	; (8002f0c <main+0x3cc>)
 8002c66:	f7fd fd47 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 8002c6a:	2240      	movs	r2, #64	; 0x40
 8002c6c:	211a      	movs	r1, #26
 8002c6e:	48a8      	ldr	r0, [pc, #672]	; (8002f10 <main+0x3d0>)
 8002c70:	f7fd fd42 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 8002c74:	2240      	movs	r2, #64	; 0x40
 8002c76:	211a      	movs	r1, #26
 8002c78:	48a6      	ldr	r0, [pc, #664]	; (8002f14 <main+0x3d4>)
 8002c7a:	f7fd fd3d 	bl	80006f8 <AS5047U_Write>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 5000, 0.001);
 8002c7e:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8002ea8 <main+0x368>
 8002c82:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8002eb0 <main+0x370>
 8002c86:	48a4      	ldr	r0, [pc, #656]	; (8002f18 <main+0x3d8>)
 8002c88:	f7fe fad2 	bl	8001230 <Kalman_init>
	Kalman_init(&Kalman[1], 5000, 0.001);
 8002c8c:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8002ea8 <main+0x368>
 8002c90:	ed9f 0b87 	vldr	d0, [pc, #540]	; 8002eb0 <main+0x370>
 8002c94:	48a1      	ldr	r0, [pc, #644]	; (8002f1c <main+0x3dc>)
 8002c96:	f7fe facb 	bl	8001230 <Kalman_init>
	Kalman_init(&Kalman[2], 5000, 0.001);
 8002c9a:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8002ea8 <main+0x368>
 8002c9e:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8002eb0 <main+0x370>
 8002ca2:	489f      	ldr	r0, [pc, #636]	; (8002f20 <main+0x3e0>)
 8002ca4:	f7fe fac4 	bl	8001230 <Kalman_init>
	Kalman_init(&Kalman[3], 5000, 0.001);
 8002ca8:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8002ea8 <main+0x368>
 8002cac:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8002eb0 <main+0x370>
 8002cb0:	489c      	ldr	r0, [pc, #624]	; (8002f24 <main+0x3e4>)
 8002cb2:	f7fe fabd 	bl	8001230 <Kalman_init>
	Kalman_init(&Kalman[5], 5000, 0.001);
 8002cb6:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8002ea8 <main+0x368>
 8002cba:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8002eb0 <main+0x370>
 8002cbe:	489a      	ldr	r0, [pc, #616]	; (8002f28 <main+0x3e8>)
 8002cc0:	f7fe fab6 	bl	8001230 <Kalman_init>
//	CascadeControl_init(&Control[0], 0.6, 0, 0, 15, 0.5, 10, 400);
//	CascadeControl_init(&Control[1], 0.7, 0, 0.3, 10, 0, 10, 410);
//	CascadeControl_init(&Control[2], 0.82, 0, 0.2, 10, 0, 30, 400);
//	CascadeControl_init(&Control[3], 0.7, 0.001, 0, 9, 0.1, 3, 500);

	CascadeControl_init(&Control[0], 0.75, 0, 0, 15, 0.5, 10, 400);
 8002cc4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8002eb8 <main+0x378>
 8002cc8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002ccc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002cd0:	eeb2 3b0e 	vmov.f64	d3, #46	; 0x41700000  15.0
 8002cd4:	ed9f 2b7a 	vldr	d2, [pc, #488]	; 8002ec0 <main+0x380>
 8002cd8:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8002ec0 <main+0x380>
 8002cdc:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002ce0:	4892      	ldr	r0, [pc, #584]	; (8002f2c <main+0x3ec>)
 8002ce2:	f7fe fd58 	bl	8001796 <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.5, 0, 0.5, 10, 0, 30, 410);
 8002ce6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8002ec8 <main+0x388>
 8002cea:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002cee:	ed9f 4b74 	vldr	d4, [pc, #464]	; 8002ec0 <main+0x380>
 8002cf2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002cf6:	eeb6 2b00 	vmov.f64	d2, #96	; 0x3f000000  0.5
 8002cfa:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002ec0 <main+0x380>
 8002cfe:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002d02:	488b      	ldr	r0, [pc, #556]	; (8002f30 <main+0x3f0>)
 8002d04:	f7fe fd47 	bl	8001796 <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.5, 0, 0.3, 25, 0, 30, 800);
 8002d08:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002ed0 <main+0x390>
 8002d0c:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002d10:	ed9f 4b6b 	vldr	d4, [pc, #428]	; 8002ec0 <main+0x380>
 8002d14:	eeb3 3b09 	vmov.f64	d3, #57	; 0x41c80000  25.0
 8002d18:	ed9f 2b6f 	vldr	d2, [pc, #444]	; 8002ed8 <main+0x398>
 8002d1c:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8002ec0 <main+0x380>
 8002d20:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002d24:	4883      	ldr	r0, [pc, #524]	; (8002f34 <main+0x3f4>)
 8002d26:	f7fe fd36 	bl	8001796 <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.75, 0, 0.3, 9, 0, 3, 420);
 8002d2a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002ee0 <main+0x3a0>
 8002d2e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002d32:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8002ec0 <main+0x380>
 8002d36:	eeb2 3b02 	vmov.f64	d3, #34	; 0x41100000  9.0
 8002d3a:	ed9f 2b67 	vldr	d2, [pc, #412]	; 8002ed8 <main+0x398>
 8002d3e:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8002ec0 <main+0x380>
 8002d42:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002d46:	487c      	ldr	r0, [pc, #496]	; (8002f38 <main+0x3f8>)
 8002d48:	f7fe fd25 	bl	8001796 <CascadeControl_init>

	/*  Power Supply Temperature Sensor */
//	TPM75_init(&TempSensor, &hi2c2, 0, 0, 1);
	Tmp75_Init(&hi2c2);
 8002d4c:	487b      	ldr	r0, [pc, #492]	; (8002f3c <main+0x3fc>)
 8002d4e:	f7fd fdd3 	bl	80008f8 <Tmp75_Init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8002d52:	2101      	movs	r1, #1
 8002d54:	486c      	ldr	r0, [pc, #432]	; (8002f08 <main+0x3c8>)
 8002d56:	f7fd fc5d 	bl	8000614 <EncPulse2Rad_Read>
 8002d5a:	eeb0 7b40 	vmov.f64	d7, d0
 8002d5e:	4b78      	ldr	r3, [pc, #480]	; (8002f40 <main+0x400>)
 8002d60:	ed83 7b00 	vstr	d7, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8002d64:	2100      	movs	r1, #0
 8002d66:	4869      	ldr	r0, [pc, #420]	; (8002f0c <main+0x3cc>)
 8002d68:	f7fd fc54 	bl	8000614 <EncPulse2Rad_Read>
 8002d6c:	eeb0 7b40 	vmov.f64	d7, d0
 8002d70:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <main+0x400>)
 8002d72:	ed83 7b02 	vstr	d7, [r3, #8]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 8002d76:	2100      	movs	r1, #0
 8002d78:	4865      	ldr	r0, [pc, #404]	; (8002f10 <main+0x3d0>)
 8002d7a:	f7fd fc4b 	bl	8000614 <EncPulse2Rad_Read>
 8002d7e:	eeb0 7b40 	vmov.f64	d7, d0
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <main+0x400>)
 8002d84:	ed83 7b04 	vstr	d7, [r3, #16]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4862      	ldr	r0, [pc, #392]	; (8002f14 <main+0x3d4>)
 8002d8c:	f7fd fc42 	bl	8000614 <EncPulse2Rad_Read>
 8002d90:	eeb0 7b40 	vmov.f64	d7, d0
 8002d94:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <main+0x400>)
 8002d96:	ed83 7b06 	vstr	d7, [r3, #24]
	SetPoint_Velocity[0] = 0;
 8002d9a:	496a      	ldr	r1, [pc, #424]	; (8002f44 <main+0x404>)
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9c1 2300 	strd	r2, r3, [r1]
	SetPoint_Velocity[1] = 0;
 8002da8:	4966      	ldr	r1, [pc, #408]	; (8002f44 <main+0x404>)
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	f04f 0300 	mov.w	r3, #0
 8002db2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	SetPoint_Velocity[2] = 0;
 8002db6:	4963      	ldr	r1, [pc, #396]	; (8002f44 <main+0x404>)
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	SetPoint_Velocity[3] = 0;
 8002dc4:	495f      	ldr	r1, [pc, #380]	; (8002f44 <main+0x404>)
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	9302      	str	r3, [sp, #8]
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <main+0x408>)
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	2301      	movs	r3, #1
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	4b43      	ldr	r3, [pc, #268]	; (8002eec <main+0x3ac>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	495a      	ldr	r1, [pc, #360]	; (8002f4c <main+0x40c>)
 8002de4:	485a      	ldr	r0, [pc, #360]	; (8002f50 <main+0x410>)
 8002de6:	f7fe f801 	bl	8000dec <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 8002dea:	2300      	movs	r3, #0
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <main+0x408>)
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	2302      	movs	r3, #2
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	4b3d      	ldr	r3, [pc, #244]	; (8002eec <main+0x3ac>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4956      	ldr	r1, [pc, #344]	; (8002f54 <main+0x414>)
 8002dfc:	4856      	ldr	r0, [pc, #344]	; (8002f58 <main+0x418>)
 8002dfe:	f7fd fff5 	bl	8000dec <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 1);
 8002e02:	2301      	movs	r3, #1
 8002e04:	9302      	str	r3, [sp, #8]
 8002e06:	4b50      	ldr	r3, [pc, #320]	; (8002f48 <main+0x408>)
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4b37      	ldr	r3, [pc, #220]	; (8002eec <main+0x3ac>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	4952      	ldr	r1, [pc, #328]	; (8002f5c <main+0x41c>)
 8002e14:	4852      	ldr	r0, [pc, #328]	; (8002f60 <main+0x420>)
 8002e16:	f7fd ffe9 	bl	8000dec <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 1);
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	9302      	str	r3, [sp, #8]
 8002e1e:	4b4a      	ldr	r3, [pc, #296]	; (8002f48 <main+0x408>)
 8002e20:	9301      	str	r3, [sp, #4]
 8002e22:	2308      	movs	r3, #8
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4b31      	ldr	r3, [pc, #196]	; (8002eec <main+0x3ac>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	494e      	ldr	r1, [pc, #312]	; (8002f64 <main+0x424>)
 8002e2c:	484e      	ldr	r0, [pc, #312]	; (8002f68 <main+0x428>)
 8002e2e:	f7fd ffdd 	bl	8000dec <Step_Driver_init>

	/*         	  Servo             */
	Servo_init(&Servo[0], &htim5, TIM_CHANNEL_1);
 8002e32:	2200      	movs	r2, #0
 8002e34:	494d      	ldr	r1, [pc, #308]	; (8002f6c <main+0x42c>)
 8002e36:	484e      	ldr	r0, [pc, #312]	; (8002f70 <main+0x430>)
 8002e38:	f7fe f883 	bl	8000f42 <Servo_init>
	Servo_init(&Servo[2], &htim5, TIM_CHANNEL_2);
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	494b      	ldr	r1, [pc, #300]	; (8002f6c <main+0x42c>)
 8002e40:	484c      	ldr	r0, [pc, #304]	; (8002f74 <main+0x434>)
 8002e42:	f7fe f87e 	bl	8000f42 <Servo_init>

	/*			Trajectory			*/
	Test_traj_Val[0] = 0;
 8002e46:	494c      	ldr	r1, [pc, #304]	; (8002f78 <main+0x438>)
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9c1 2300 	strd	r2, r3, [r1]
	Test_traj_Val[1] = 0;
 8002e54:	4948      	ldr	r1, [pc, #288]	; (8002f78 <main+0x438>)
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Test_traj_Val[2] = 0;
 8002e62:	4945      	ldr	r1, [pc, #276]	; (8002f78 <main+0x438>)
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Test_traj_Val[3] = 0;
 8002e70:	4941      	ldr	r1, [pc, #260]	; (8002f78 <main+0x438>)
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e07f      	b.n	8002f7c <main+0x43c>
 8002e7c:	f3af 8000 	nop.w
 8002e80:	00000000 	.word	0x00000000
 8002e84:	40540000 	.word	0x40540000
 8002e88:	00000000 	.word	0x00000000
 8002e8c:	40b96400 	.word	0x40b96400
 8002e90:	00000000 	.word	0x00000000
 8002e94:	40c3ba00 	.word	0x40c3ba00
 8002e98:	00000000 	.word	0x00000000
 8002e9c:	40a8ba00 	.word	0x40a8ba00
 8002ea0:	00000000 	.word	0x00000000
 8002ea4:	40bb3a00 	.word	0x40bb3a00
 8002ea8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002eac:	3f50624d 	.word	0x3f50624d
 8002eb0:	00000000 	.word	0x00000000
 8002eb4:	40b38800 	.word	0x40b38800
 8002eb8:	00000000 	.word	0x00000000
 8002ebc:	40790000 	.word	0x40790000
	...
 8002ecc:	4079a000 	.word	0x4079a000
 8002ed0:	00000000 	.word	0x00000000
 8002ed4:	40890000 	.word	0x40890000
 8002ed8:	33333333 	.word	0x33333333
 8002edc:	3fd33333 	.word	0x3fd33333
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	407a4000 	.word	0x407a4000
 8002ee8:	58020c00 	.word	0x58020c00
 8002eec:	58021000 	.word	0x58021000
 8002ef0:	1ff1e840 	.word	0x1ff1e840
 8002ef4:	1ff1e820 	.word	0x1ff1e820
 8002ef8:	200002b0 	.word	0x200002b0
 8002efc:	200001c4 	.word	0x200001c4
 8002f00:	20000238 	.word	0x20000238
 8002f04:	20000c1c 	.word	0x20000c1c
 8002f08:	200002b8 	.word	0x200002b8
 8002f0c:	200002e0 	.word	0x200002e0
 8002f10:	20000308 	.word	0x20000308
 8002f14:	20000330 	.word	0x20000330
 8002f18:	20000358 	.word	0x20000358
 8002f1c:	20000398 	.word	0x20000398
 8002f20:	200003d8 	.word	0x200003d8
 8002f24:	20000418 	.word	0x20000418
 8002f28:	20000498 	.word	0x20000498
 8002f2c:	20000498 	.word	0x20000498
 8002f30:	20000570 	.word	0x20000570
 8002f34:	20000648 	.word	0x20000648
 8002f38:	20000720 	.word	0x20000720
 8002f3c:	2000025c 	.word	0x2000025c
 8002f40:	20000b60 	.word	0x20000b60
 8002f44:	20000b88 	.word	0x20000b88
 8002f48:	0007a120 	.word	0x0007a120
 8002f4c:	20000f40 	.word	0x20000f40
 8002f50:	200007f8 	.word	0x200007f8
 8002f54:	20000f8c 	.word	0x20000f8c
 8002f58:	2000080c 	.word	0x2000080c
 8002f5c:	20000fd8 	.word	0x20000fd8
 8002f60:	20000820 	.word	0x20000820
 8002f64:	20001024 	.word	0x20001024
 8002f68:	20000834 	.word	0x20000834
 8002f6c:	20000e5c 	.word	0x20000e5c
 8002f70:	20000848 	.word	0x20000848
 8002f74:	20000858 	.word	0x20000858
 8002f78:	20000be0 	.word	0x20000be0
 8002f7c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj_Flag = 0;
 8002f80:	4b87      	ldr	r3, [pc, #540]	; (80031a0 <main+0x660>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
	t = 0;
 8002f86:	4987      	ldr	r1, [pc, #540]	; (80031a4 <main+0x664>)
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 8002f94:	4884      	ldr	r0, [pc, #528]	; (80031a8 <main+0x668>)
 8002f96:	f00e f8af 	bl	80110f8 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8002f9a:	220e      	movs	r2, #14
 8002f9c:	4983      	ldr	r1, [pc, #524]	; (80031ac <main+0x66c>)
 8002f9e:	4884      	ldr	r0, [pc, #528]	; (80031b0 <main+0x670>)
 8002fa0:	f00f fe1e 	bl	8012be0 <HAL_UART_Receive_IT>

	ChessMoveStates = Chess_idle;
 8002fa4:	4b83      	ldr	r3, [pc, #524]	; (80031b4 <main+0x674>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Test_traj) {
 8002faa:	4b83      	ldr	r3, [pc, #524]	; (80031b8 <main+0x678>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <main+0x488>
			Test_traj = 0;
 8002fb2:	4b81      	ldr	r3, [pc, #516]	; (80031b8 <main+0x678>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
			JMoveTaskSpace(TaskSpace_Live_Ex1, Time_Live_Ex1);
 8002fb8:	4b80      	ldr	r3, [pc, #512]	; (80031bc <main+0x67c>)
 8002fba:	ed93 7b00 	vldr	d7, [r3]
 8002fbe:	eeb0 0b47 	vmov.f64	d0, d7
 8002fc2:	487f      	ldr	r0, [pc, #508]	; (80031c0 <main+0x680>)
 8002fc4:	f001 fafc 	bl	80045c0 <JMoveTaskSpace>
		}
		if (Test_traj2) {
 8002fc8:	4b7e      	ldr	r3, [pc, #504]	; (80031c4 <main+0x684>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01f      	beq.n	8003010 <main+0x4d0>
			Test_traj2 = 0;
 8002fd0:	4b7c      	ldr	r3, [pc, #496]	; (80031c4 <main+0x684>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
			double TaskSpace_Live_Ex1_ChangeZ[3];
			TaskSpace_Live_Ex1_ChangeZ[0] = TaskSpace_Live_Ex1[0];
 8002fd6:	4b7a      	ldr	r3, [pc, #488]	; (80031c0 <main+0x680>)
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
			TaskSpace_Live_Ex1_ChangeZ[1] = TaskSpace_Live_Ex1[1];
 8002fe0:	4b77      	ldr	r3, [pc, #476]	; (80031c0 <main+0x680>)
 8002fe2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fe6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			TaskSpace_Live_Ex1_ChangeZ[2] = TaskSpace_Live_Ex1[2] - 100;
 8002fea:	4b75      	ldr	r3, [pc, #468]	; (80031c0 <main+0x680>)
 8002fec:	ed93 7b04 	vldr	d7, [r3, #16]
 8002ff0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8003190 <main+0x650>
 8002ff4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ff8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			JMoveTaskSpace(TaskSpace_Live_Ex1_ChangeZ, Time_Live_Ex1);
 8002ffc:	4b6f      	ldr	r3, [pc, #444]	; (80031bc <main+0x67c>)
 8002ffe:	ed93 7b00 	vldr	d7, [r3]
 8003002:	f107 0320 	add.w	r3, r7, #32
 8003006:	eeb0 0b47 	vmov.f64	d0, d7
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fad8 	bl	80045c0 <JMoveTaskSpace>
		}

	   uint8_t tune_joint = 3;
 8003010:	2303      	movs	r3, #3
 8003012:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	   if (tune_PID[0] != tune_PID[1]){
 8003016:	4b6c      	ldr	r3, [pc, #432]	; (80031c8 <main+0x688>)
 8003018:	ed93 6b00 	vldr	d6, [r3]
 800301c:	4b6a      	ldr	r3, [pc, #424]	; (80031c8 <main+0x688>)
 800301e:	ed93 7b02 	vldr	d7, [r3, #8]
 8003022:	eeb4 6b47 	vcmp.f64	d6, d7
 8003026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302a:	d070      	beq.n	800310e <main+0x5ce>
		   	tune_PID[1] = tune_PID[0];
 800302c:	4b66      	ldr	r3, [pc, #408]	; (80031c8 <main+0x688>)
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	4965      	ldr	r1, [pc, #404]	; (80031c8 <main+0x688>)
 8003034:	e9c1 2302 	strd	r2, r3, [r1, #8]
			t = 0;
 8003038:	495a      	ldr	r1, [pc, #360]	; (80031a4 <main+0x664>)
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9c1 2300 	strd	r2, r3, [r1]
			double Joint[4] = {0,0,0,0};
 8003046:	463b      	mov	r3, r7
 8003048:	2220      	movs	r2, #32
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f012 fb19 	bl	8015684 <memset>
			for (int i = 0; i < 4; i++) {
 8003052:	2300      	movs	r3, #0
 8003054:	647b      	str	r3, [r7, #68]	; 0x44
 8003056:	e012      	b.n	800307e <main+0x53e>
				Joint[i] = Control[i].PositionFeedback;
 8003058:	4a5c      	ldr	r2, [pc, #368]	; (80031cc <main+0x68c>)
 800305a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305c:	21d8      	movs	r1, #216	; 0xd8
 800305e:	fb01 f303 	mul.w	r3, r1, r3
 8003062:	4413      	add	r3, r2
 8003064:	3350      	adds	r3, #80	; 0x50
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800306c:	00c9      	lsls	r1, r1, #3
 800306e:	3148      	adds	r1, #72	; 0x48
 8003070:	4439      	add	r1, r7
 8003072:	3948      	subs	r1, #72	; 0x48
 8003074:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 8003078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800307a:	3301      	adds	r3, #1
 800307c:	647b      	str	r3, [r7, #68]	; 0x44
 800307e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003080:	2b03      	cmp	r3, #3
 8003082:	dde9      	ble.n	8003058 <main+0x518>
			}
			Joint[tune_joint] = tune_PID[0];
 8003084:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003088:	4b4f      	ldr	r3, [pc, #316]	; (80031c8 <main+0x688>)
 800308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308e:	00c9      	lsls	r1, r1, #3
 8003090:	3148      	adds	r1, #72	; 0x48
 8003092:	4439      	add	r1, r7
 8003094:	3948      	subs	r1, #72	; 0x48
 8003096:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 800309a:	2300      	movs	r3, #0
 800309c:	643b      	str	r3, [r7, #64]	; 0x40
 800309e:	e030      	b.n	8003102 <main+0x5c2>
				Traj_Coeff_Cal(&Traj[i], T_tune_PID, Joint[i], Control[i].PositionFeedback,0, Control[i].VelocityFeedback);
 80030a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4a49      	ldr	r2, [pc, #292]	; (80031d0 <main+0x690>)
 80030ac:	441a      	add	r2, r3
 80030ae:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <main+0x694>)
 80030b0:	ed93 7b00 	vldr	d7, [r3]
 80030b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	3348      	adds	r3, #72	; 0x48
 80030ba:	443b      	add	r3, r7
 80030bc:	3b48      	subs	r3, #72	; 0x48
 80030be:	ed93 6b00 	vldr	d6, [r3]
 80030c2:	4942      	ldr	r1, [pc, #264]	; (80031cc <main+0x68c>)
 80030c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c6:	20d8      	movs	r0, #216	; 0xd8
 80030c8:	fb00 f303 	mul.w	r3, r0, r3
 80030cc:	440b      	add	r3, r1
 80030ce:	3350      	adds	r3, #80	; 0x50
 80030d0:	ed93 5b00 	vldr	d5, [r3]
 80030d4:	493d      	ldr	r1, [pc, #244]	; (80031cc <main+0x68c>)
 80030d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d8:	20d8      	movs	r0, #216	; 0xd8
 80030da:	fb00 f303 	mul.w	r3, r0, r3
 80030de:	440b      	add	r3, r1
 80030e0:	33b8      	adds	r3, #184	; 0xb8
 80030e2:	ed93 4b00 	vldr	d4, [r3]
 80030e6:	ed9f 3b2c 	vldr	d3, [pc, #176]	; 8003198 <main+0x658>
 80030ea:	eeb0 2b45 	vmov.f64	d2, d5
 80030ee:	eeb0 1b46 	vmov.f64	d1, d6
 80030f2:	eeb0 0b47 	vmov.f64	d0, d7
 80030f6:	4610      	mov	r0, r2
 80030f8:	f7fd ff78 	bl	8000fec <Traj_Coeff_Cal>
			for (int i = 0; i < 4; i++) {
 80030fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fe:	3301      	adds	r3, #1
 8003100:	643b      	str	r3, [r7, #64]	; 0x40
 8003102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003104:	2b03      	cmp	r3, #3
 8003106:	ddcb      	ble.n	80030a0 <main+0x560>
			}
			Traj_Flag = 0x0F;
 8003108:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <main+0x660>)
 800310a:	220f      	movs	r2, #15
 800310c:	701a      	strb	r2, [r3, #0]
	   }

		if (Contorl_Flag) {
 800310e:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <main+0x698>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <main+0x5e0>
			Control_Function();
 8003116:	f001 f837 	bl	8004188 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 800311a:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <main+0x698>)
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 8003120:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <main+0x69c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <main+0x5f2>
			Narwhal_Protocol();
 8003128:	f000 f9c6 	bl	80034b8 <Narwhal_Protocol>
			Protocol_Flag = 0;
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <main+0x69c>)
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10) {
 8003132:	f003 fb71 	bl	8006818 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <main+0x6a0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b09      	cmp	r3, #9
 8003140:	d910      	bls.n	8003164 <main+0x624>
			Software_Timer_100ms = HAL_GetTick();
 8003142:	f003 fb69 	bl	8006818 <HAL_GetTick>
 8003146:	4603      	mov	r3, r0
 8003148:	4a25      	ldr	r2, [pc, #148]	; (80031e0 <main+0x6a0>)
 800314a:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 				//	read temperature sensor
 800314c:	4825      	ldr	r0, [pc, #148]	; (80031e4 <main+0x6a4>)
 800314e:	f004 f871 	bl	8007234 <HAL_ADC_Start_IT>
			One_ShotTemp(&hi2c2);
 8003152:	4825      	ldr	r0, [pc, #148]	; (80031e8 <main+0x6a8>)
 8003154:	f7fd fc19 	bl	800098a <One_ShotTemp>
			Read_TempCelsius(&TPM75_Temp,&hi2c2);
 8003158:	4923      	ldr	r1, [pc, #140]	; (80031e8 <main+0x6a8>)
 800315a:	4824      	ldr	r0, [pc, #144]	; (80031ec <main+0x6ac>)
 800315c:	f7fd fc24 	bl	80009a8 <Read_TempCelsius>
			ChessMoveStateMachine();
 8003160:	f001 fb3a 	bl	80047d8 <ChessMoveStateMachine>
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 8003164:	f003 fb58 	bl	8006818 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <main+0x6b0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003174:	f4ff af19 	bcc.w	8002faa <main+0x46a>
			Software_Timer_1s = HAL_GetTick();
 8003178:	f003 fb4e 	bl	8006818 <HAL_GetTick>
 800317c:	4603      	mov	r3, r0
 800317e:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <main+0x6b0>)
 8003180:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8003182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003186:	481b      	ldr	r0, [pc, #108]	; (80031f4 <main+0x6b4>)
 8003188:	f008 fbc5 	bl	800b916 <HAL_GPIO_TogglePin>
  {
 800318c:	e70d      	b.n	8002faa <main+0x46a>
 800318e:	bf00      	nop
 8003190:	00000000 	.word	0x00000000
 8003194:	40590000 	.word	0x40590000
	...
 80031a0:	20000bb9 	.word	0x20000bb9
 80031a4:	20000bb0 	.word	0x20000bb0
 80031a8:	200010bc 	.word	0x200010bc
 80031ac:	20000094 	.word	0x20000094
 80031b0:	200011cc 	.word	0x200011cc
 80031b4:	20000bc7 	.word	0x20000bc7
 80031b8:	20000bd8 	.word	0x20000bd8
 80031bc:	20000018 	.word	0x20000018
 80031c0:	20000c00 	.word	0x20000c00
 80031c4:	20000bd9 	.word	0x20000bd9
 80031c8:	20000bc8 	.word	0x20000bc8
 80031cc:	20000498 	.word	0x20000498
 80031d0:	200009d0 	.word	0x200009d0
 80031d4:	20000010 	.word	0x20000010
 80031d8:	20000bb8 	.word	0x20000bb8
 80031dc:	20000bba 	.word	0x20000bba
 80031e0:	20000bc0 	.word	0x20000bc0
 80031e4:	200001c4 	.word	0x200001c4
 80031e8:	2000025c 	.word	0x2000025c
 80031ec:	20000b58 	.word	0x20000b58
 80031f0:	20000bbc 	.word	0x20000bbc
 80031f4:	58020800 	.word	0x58020800

080031f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b09c      	sub	sp, #112	; 0x70
 80031fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003202:	224c      	movs	r2, #76	; 0x4c
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f012 fa3c 	bl	8015684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	2220      	movs	r2, #32
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f012 fa36 	bl	8015684 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003218:	2002      	movs	r0, #2
 800321a:	f009 ff69 	bl	800d0f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800321e:	2300      	movs	r3, #0
 8003220:	603b      	str	r3, [r7, #0]
 8003222:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <SystemClock_Config+0xe8>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	4a2e      	ldr	r2, [pc, #184]	; (80032e0 <SystemClock_Config+0xe8>)
 8003228:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800322c:	6193      	str	r3, [r2, #24]
 800322e:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <SystemClock_Config+0xe8>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800323a:	bf00      	nop
 800323c:	4b28      	ldr	r3, [pc, #160]	; (80032e0 <SystemClock_Config+0xe8>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d1f8      	bne.n	800323c <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800324a:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <SystemClock_Config+0xec>)
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	4a24      	ldr	r2, [pc, #144]	; (80032e4 <SystemClock_Config+0xec>)
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800325a:	2301      	movs	r3, #1
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800325e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003264:	2302      	movs	r3, #2
 8003266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003268:	2302      	movs	r3, #2
 800326a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800326c:	2302      	movs	r3, #2
 800326e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8003270:	232c      	movs	r3, #44	; 0x2c
 8003272:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8003274:	2301      	movs	r3, #1
 8003276:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003278:	2302      	movs	r3, #2
 800327a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800327c:	2302      	movs	r3, #2
 800327e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003280:	230c      	movs	r3, #12
 8003282:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003284:	2300      	movs	r3, #0
 8003286:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800328c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003290:	4618      	mov	r0, r3
 8003292:	f009 ff67 	bl	800d164 <HAL_RCC_OscConfig>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800329c:	f001 fc24 	bl	8004ae8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032a0:	233f      	movs	r3, #63	; 0x3f
 80032a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032a4:	2303      	movs	r3, #3
 80032a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80032ac:	2308      	movs	r3, #8
 80032ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80032b0:	2340      	movs	r3, #64	; 0x40
 80032b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80032b4:	2340      	movs	r3, #64	; 0x40
 80032b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80032b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80032be:	2340      	movs	r3, #64	; 0x40
 80032c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032c2:	1d3b      	adds	r3, r7, #4
 80032c4:	2103      	movs	r1, #3
 80032c6:	4618      	mov	r0, r3
 80032c8:	f00a fafa 	bl	800d8c0 <HAL_RCC_ClockConfig>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80032d2:	f001 fc09 	bl	8004ae8 <Error_Handler>
  }
}
 80032d6:	bf00      	nop
 80032d8:	3770      	adds	r7, #112	; 0x70
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	58024800 	.word	0x58024800
 80032e4:	58024400 	.word	0x58024400

080032e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b0ae      	sub	sp, #184	; 0xb8
 80032ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	22b4      	movs	r2, #180	; 0xb4
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f012 f9c5 	bl	8015684 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 80032fa:	4b14      	ldr	r3, [pc, #80]	; (800334c <PeriphCommonClock_Config+0x64>)
 80032fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80032fe:	2302      	movs	r3, #2
 8003300:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8003302:	2310      	movs	r3, #16
 8003304:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003306:	2302      	movs	r3, #2
 8003308:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800330a:	2302      	movs	r3, #2
 800330c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800330e:	2302      	movs	r3, #2
 8003310:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003312:	23c0      	movs	r3, #192	; 0xc0
 8003314:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800331e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003322:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8003324:	2301      	movs	r3, #1
 8003326:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8003328:	2308      	movs	r3, #8
 800332a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800332c:	2300      	movs	r3, #0
 800332e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	4618      	mov	r0, r3
 8003336:	f00a fe4f 	bl	800dfd8 <HAL_RCCEx_PeriphCLKConfig>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8003340:	f001 fbd2 	bl	8004ae8 <Error_Handler>
  }
}
 8003344:	bf00      	nop
 8003346:	37b8      	adds	r7, #184	; 0xb8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	00082003 	.word	0x00082003

08003350 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a06      	ldr	r2, [pc, #24]	; (8003374 <HAL_UART_RxCpltCallback+0x24>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d102      	bne.n	8003366 <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <HAL_UART_RxCpltCallback+0x28>)
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]
	}
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	200011cc 	.word	0x200011cc
 8003378:	20000bba 	.word	0x20000bba

0800337c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(Neopixel.htim, TIM_CHANNEL_1);
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003386:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f00e f8ad 	bl	80114ec <HAL_TIM_PWM_Stop_DMA>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000858 	.word	0x20000858

080033a0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a18      	ldr	r2, [pc, #96]	; (800340c <HAL_ADC_ConvCpltCallback+0x6c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d129      	bne.n	8003404 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 80033b0:	4816      	ldr	r0, [pc, #88]	; (800340c <HAL_ADC_ConvCpltCallback+0x6c>)
 80033b2:	f004 f87f 	bl	80074b4 <HAL_ADC_GetValue>
 80033b6:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 19)
 80033b8:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_ADC_ConvCpltCallback+0x70>)
 80033ba:	ed93 7b00 	vldr	d7, [r3]
 80033be:	eeb3 6b03 	vmov.f64	d6, #51	; 0x41980000  19.0
 80033c2:	ee27 6b06 	vmul.f64	d6, d7, d6
				+ (Temp_Calibration
						* (double) ((double) ADC_Output
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eeb8 5b67 	vcvt.f64.u32	d5, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80033d0:	4b10      	ldr	r3, [pc, #64]	; (8003414 <HAL_ADC_ConvCpltCallback+0x74>)
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	ee07 3a90 	vmov	s15, r3
						* (double) ((double) ADC_Output
 80033d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033dc:	ee35 5b47 	vsub.f64	d5, d5, d7
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_ADC_ConvCpltCallback+0x78>)
 80033e2:	ed93 7b00 	vldr	d7, [r3]
 80033e6:	ee25 7b07 	vmul.f64	d7, d5, d7
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80033ea:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 80033ee:	ee37 7b05 	vadd.f64	d7, d7, d5
				+ (Temp_Calibration
 80033f2:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ 20;
 80033f6:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80033fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
		Temperature = ((Temperature * 19)
 80033fe:	4b04      	ldr	r3, [pc, #16]	; (8003410 <HAL_ADC_ConvCpltCallback+0x70>)
 8003400:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	200001c4 	.word	0x200001c4
 8003410:	200002a8 	.word	0x200002a8
 8003414:	1ff1e820 	.word	0x1ff1e820
 8003418:	200002b0 	.word	0x200002b0

0800341c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a06      	ldr	r2, [pc, #24]	; (8003440 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d102      	bne.n	8003432 <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 800342c:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800342e:	2201      	movs	r2, #1
 8003430:	701a      	strb	r2, [r3, #0]
	}
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	200010bc 	.word	0x200010bc
 8003444:	20000bb8 	.word	0x20000bb8

08003448 <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	461a      	mov	r2, r3
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4805      	ldr	r0, [pc, #20]	; (8003470 <CRC8+0x28>)
 800345c:	f005 fcce 	bl	8008dfc <HAL_CRC_Calculate>
 8003460:	4603      	mov	r3, r0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	b2db      	uxtb	r3, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000238 	.word	0x20000238

08003474 <SentData>:
inline void SentData(uint8_t range){
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 800347e:	79fc      	ldrb	r4, [r7, #7]
 8003480:	79fb      	ldrb	r3, [r7, #7]
 8003482:	4619      	mov	r1, r3
 8003484:	4809      	ldr	r0, [pc, #36]	; (80034ac <SentData+0x38>)
 8003486:	f7ff ffdf 	bl	8003448 <CRC8>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	4b07      	ldr	r3, [pc, #28]	; (80034ac <SentData+0x38>)
 8003490:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	b29b      	uxth	r3, r3
 8003496:	3301      	adds	r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	4903      	ldr	r1, [pc, #12]	; (80034ac <SentData+0x38>)
 800349e:	4804      	ldr	r0, [pc, #16]	; (80034b0 <SentData+0x3c>)
 80034a0:	f00f faf6 	bl	8012a90 <HAL_UART_Transmit_IT>
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd90      	pop	{r4, r7, pc}
 80034ac:	200000a4 	.word	0x200000a4
 80034b0:	200011cc 	.word	0x200011cc
 80034b4:	00000000 	.word	0x00000000

080034b8 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 80034b8:	b5b0      	push	{r4, r5, r7, lr}
 80034ba:	b0c6      	sub	sp, #280	; 0x118
 80034bc:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 80034be:	4bc6      	ldr	r3, [pc, #792]	; (80037d8 <Narwhal_Protocol+0x320>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2bff      	cmp	r3, #255	; 0xff
 80034c4:	f040 863c 	bne.w	8004140 <Narwhal_Protocol+0xc88>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 80034c8:	210d      	movs	r1, #13
 80034ca:	48c3      	ldr	r0, [pc, #780]	; (80037d8 <Narwhal_Protocol+0x320>)
 80034cc:	f7ff ffbc 	bl	8003448 <CRC8>
 80034d0:	4603      	mov	r3, r0
 80034d2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
		if (CRC_Cal == UART5_rxBuffer[13]) {
 80034d6:	4bc0      	ldr	r3, [pc, #768]	; (80037d8 <Narwhal_Protocol+0x320>)
 80034d8:	7b5b      	ldrb	r3, [r3, #13]
 80034da:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 80034de:	429a      	cmp	r2, r3
 80034e0:	f040 8627 	bne.w	8004132 <Narwhal_Protocol+0xc7a>
			UART5_txBuffer[0] = 0xFF;
 80034e4:	4bbd      	ldr	r3, [pc, #756]	; (80037dc <Narwhal_Protocol+0x324>)
 80034e6:	22ff      	movs	r2, #255	; 0xff
 80034e8:	701a      	strb	r2, [r3, #0]

			double q_Feed[4];
			double dq[4];
			double d_Task[3];
			double q_in[5] = {0,0,0,0,0};
 80034ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034ee:	2228      	movs	r2, #40	; 0x28
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f012 f8c6 	bl	8015684 <memset>
			double task[3] = { -500, 300, 50 };
 80034f8:	4bb9      	ldr	r3, [pc, #740]	; (80037e0 <Narwhal_Protocol+0x328>)
 80034fa:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80034fe:	461d      	mov	r5, r3
 8003500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003504:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003508:	e884 0003 	stmia.w	r4, {r0, r1}
			uint16_t Temperature_Protocol = Temperature * 1000;
 800350c:	4bb5      	ldr	r3, [pc, #724]	; (80037e4 <Narwhal_Protocol+0x32c>)
 800350e:	ed93 7b00 	vldr	d7, [r3]
 8003512:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80037c8 <Narwhal_Protocol+0x310>
 8003516:	ee27 7b06 	vmul.f64	d7, d7, d6
 800351a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800351e:	ee17 3a90 	vmov	r3, s15
 8003522:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
			uint16_t Temperature_Protocol2 = TPM75_Temp * 1000;
 8003526:	4bb0      	ldr	r3, [pc, #704]	; (80037e8 <Narwhal_Protocol+0x330>)
 8003528:	ed93 7b00 	vldr	d7, [r3]
 800352c:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 80037c8 <Narwhal_Protocol+0x310>
 8003530:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003534:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003538:	ee17 3a90 	vmov	r3, s15
 800353c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 8003540:	4ba5      	ldr	r3, [pc, #660]	; (80037d8 <Narwhal_Protocol+0x320>)
 8003542:	785b      	ldrb	r3, [r3, #1]
 8003544:	3ba0      	subs	r3, #160	; 0xa0
 8003546:	2b5f      	cmp	r3, #95	; 0x5f
 8003548:	f200 85ec 	bhi.w	8004124 <Narwhal_Protocol+0xc6c>
 800354c:	a201      	add	r2, pc, #4	; (adr r2, 8003554 <Narwhal_Protocol+0x9c>)
 800354e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003552:	bf00      	nop
 8003554:	08003cf3 	.word	0x08003cf3
 8003558:	08003d19 	.word	0x08003d19
 800355c:	08003d3f 	.word	0x08003d3f
 8003560:	08004125 	.word	0x08004125
 8003564:	08004125 	.word	0x08004125
 8003568:	08004125 	.word	0x08004125
 800356c:	08004125 	.word	0x08004125
 8003570:	08004125 	.word	0x08004125
 8003574:	08004125 	.word	0x08004125
 8003578:	08004125 	.word	0x08004125
 800357c:	08003daf 	.word	0x08003daf
 8003580:	08003e33 	.word	0x08003e33
 8003584:	08004125 	.word	0x08004125
 8003588:	08004125 	.word	0x08004125
 800358c:	08004125 	.word	0x08004125
 8003590:	08003f2d 	.word	0x08003f2d
 8003594:	08004125 	.word	0x08004125
 8003598:	08004125 	.word	0x08004125
 800359c:	08004125 	.word	0x08004125
 80035a0:	08004125 	.word	0x08004125
 80035a4:	08004125 	.word	0x08004125
 80035a8:	08004125 	.word	0x08004125
 80035ac:	08004125 	.word	0x08004125
 80035b0:	08004125 	.word	0x08004125
 80035b4:	08004125 	.word	0x08004125
 80035b8:	08004125 	.word	0x08004125
 80035bc:	08004125 	.word	0x08004125
 80035c0:	08004125 	.word	0x08004125
 80035c4:	08004125 	.word	0x08004125
 80035c8:	08004125 	.word	0x08004125
 80035cc:	08004125 	.word	0x08004125
 80035d0:	08004125 	.word	0x08004125
 80035d4:	08004125 	.word	0x08004125
 80035d8:	08004125 	.word	0x08004125
 80035dc:	08004125 	.word	0x08004125
 80035e0:	08004125 	.word	0x08004125
 80035e4:	08004125 	.word	0x08004125
 80035e8:	08004125 	.word	0x08004125
 80035ec:	08004125 	.word	0x08004125
 80035f0:	08004125 	.word	0x08004125
 80035f4:	08004125 	.word	0x08004125
 80035f8:	08004125 	.word	0x08004125
 80035fc:	08004125 	.word	0x08004125
 8003600:	08004125 	.word	0x08004125
 8003604:	08004125 	.word	0x08004125
 8003608:	08004125 	.word	0x08004125
 800360c:	08004125 	.word	0x08004125
 8003610:	08004125 	.word	0x08004125
 8003614:	08004125 	.word	0x08004125
 8003618:	08004125 	.word	0x08004125
 800361c:	08004125 	.word	0x08004125
 8003620:	08004125 	.word	0x08004125
 8003624:	08004125 	.word	0x08004125
 8003628:	08004125 	.word	0x08004125
 800362c:	08004125 	.word	0x08004125
 8003630:	08004125 	.word	0x08004125
 8003634:	08004125 	.word	0x08004125
 8003638:	08004125 	.word	0x08004125
 800363c:	08004125 	.word	0x08004125
 8003640:	08004125 	.word	0x08004125
 8003644:	08004125 	.word	0x08004125
 8003648:	08004125 	.word	0x08004125
 800364c:	08004125 	.word	0x08004125
 8003650:	08004125 	.word	0x08004125
 8003654:	08004125 	.word	0x08004125
 8003658:	08004125 	.word	0x08004125
 800365c:	08004125 	.word	0x08004125
 8003660:	08004125 	.word	0x08004125
 8003664:	08004125 	.word	0x08004125
 8003668:	08004125 	.word	0x08004125
 800366c:	08004125 	.word	0x08004125
 8003670:	08004125 	.word	0x08004125
 8003674:	08004125 	.word	0x08004125
 8003678:	08004125 	.word	0x08004125
 800367c:	08004125 	.word	0x08004125
 8003680:	08004125 	.word	0x08004125
 8003684:	08004125 	.word	0x08004125
 8003688:	08004125 	.word	0x08004125
 800368c:	08004125 	.word	0x08004125
 8003690:	08004125 	.word	0x08004125
 8003694:	080036d5 	.word	0x080036d5
 8003698:	080036eb 	.word	0x080036eb
 800369c:	08004125 	.word	0x08004125
 80036a0:	08004125 	.word	0x08004125
 80036a4:	08004125 	.word	0x08004125
 80036a8:	08003701 	.word	0x08003701
 80036ac:	08004125 	.word	0x08004125
 80036b0:	08004125 	.word	0x08004125
 80036b4:	08004125 	.word	0x08004125
 80036b8:	08004125 	.word	0x08004125
 80036bc:	080037ad 	.word	0x080037ad
 80036c0:	080038d9 	.word	0x080038d9
 80036c4:	08004125 	.word	0x08004125
 80036c8:	08003a57 	.word	0x08003a57
 80036cc:	08003bf3 	.word	0x08003bf3
 80036d0:	08003cdf 	.word	0x08003cdf
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 80036d4:	4b41      	ldr	r3, [pc, #260]	; (80037dc <Narwhal_Protocol+0x324>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80036da:	4b40      	ldr	r3, [pc, #256]	; (80037dc <Narwhal_Protocol+0x324>)
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80036e0:	2003      	movs	r0, #3
 80036e2:	f7ff fec7 	bl	8003474 <SentData>
				break;
 80036e6:	f000 bd31 	b.w	800414c <Narwhal_Protocol+0xc94>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 80036ea:	4b3c      	ldr	r3, [pc, #240]	; (80037dc <Narwhal_Protocol+0x324>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80036f0:	4b3a      	ldr	r3, [pc, #232]	; (80037dc <Narwhal_Protocol+0x324>)
 80036f2:	22ff      	movs	r2, #255	; 0xff
 80036f4:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80036f6:	2003      	movs	r0, #3
 80036f8:	f7ff febc 	bl	8003474 <SentData>
				break;
 80036fc:	f000 bd26 	b.w	800414c <Narwhal_Protocol+0xc94>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {;
 8003700:	4b3a      	ldr	r3, [pc, #232]	; (80037ec <Narwhal_Protocol+0x334>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d146      	bne.n	8003796 <Narwhal_Protocol+0x2de>
					t = 0;
 8003708:	4939      	ldr	r1, [pc, #228]	; (80037f0 <Narwhal_Protocol+0x338>)
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800371c:	e02d      	b.n	800377a <Narwhal_Protocol+0x2c2>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 800371e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003722:	4613      	mov	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4a32      	ldr	r2, [pc, #200]	; (80037f4 <Narwhal_Protocol+0x33c>)
 800372c:	441a      	add	r2, r3
 800372e:	4932      	ldr	r1, [pc, #200]	; (80037f8 <Narwhal_Protocol+0x340>)
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003734:	20d8      	movs	r0, #216	; 0xd8
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	440b      	add	r3, r1
 800373c:	3350      	adds	r3, #80	; 0x50
 800373e:	ed93 7b00 	vldr	d7, [r3]
 8003742:	492d      	ldr	r1, [pc, #180]	; (80037f8 <Narwhal_Protocol+0x340>)
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003748:	20d8      	movs	r0, #216	; 0xd8
 800374a:	fb00 f303 	mul.w	r3, r0, r3
 800374e:	440b      	add	r3, r1
 8003750:	33b8      	adds	r3, #184	; 0xb8
 8003752:	ed93 6b00 	vldr	d6, [r3]
 8003756:	eeb0 4b46 	vmov.f64	d4, d6
 800375a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 80037d0 <Narwhal_Protocol+0x318>
 800375e:	eeb0 2b47 	vmov.f64	d2, d7
 8003762:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80037d0 <Narwhal_Protocol+0x318>
 8003766:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800376a:	4610      	mov	r0, r2
 800376c:	f7fd fc3e 	bl	8000fec <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8003770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003774:	3301      	adds	r3, #1
 8003776:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377e:	2b03      	cmp	r3, #3
 8003780:	ddcd      	ble.n	800371e <Narwhal_Protocol+0x266>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <Narwhal_Protocol+0x334>)
 8003784:	220f      	movs	r2, #15
 8003786:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <Narwhal_Protocol+0x344>)
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 800378e:	4b13      	ldr	r3, [pc, #76]	; (80037dc <Narwhal_Protocol+0x324>)
 8003790:	2200      	movs	r2, #0
 8003792:	709a      	strb	r2, [r3, #2]
 8003794:	e002      	b.n	800379c <Narwhal_Protocol+0x2e4>
				} else {
					UART5_txBuffer[2] = 0x01;
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <Narwhal_Protocol+0x324>)
 8003798:	2201      	movs	r2, #1
 800379a:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <Narwhal_Protocol+0x324>)
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80037a2:	2003      	movs	r0, #3
 80037a4:	f7ff fe66 	bl	8003474 <SentData>
				break;
 80037a8:	f000 bcd0 	b.w	800414c <Narwhal_Protocol+0xc94>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 80037ac:	4910      	ldr	r1, [pc, #64]	; (80037f0 <Narwhal_Protocol+0x338>)
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 80037ba:	2300      	movs	r3, #0
 80037bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80037c0:	e075      	b.n	80038ae <Narwhal_Protocol+0x3f6>
 80037c2:	bf00      	nop
 80037c4:	f3af 8000 	nop.w
 80037c8:	00000000 	.word	0x00000000
 80037cc:	408f4000 	.word	0x408f4000
	...
 80037d8:	20000094 	.word	0x20000094
 80037dc:	200000a4 	.word	0x200000a4
 80037e0:	08016708 	.word	0x08016708
 80037e4:	200002a8 	.word	0x200002a8
 80037e8:	20000b58 	.word	0x20000b58
 80037ec:	20000bb9 	.word	0x20000bb9
 80037f0:	20000bb0 	.word	0x20000bb0
 80037f4:	200009d0 	.word	0x200009d0
 80037f8:	20000498 	.word	0x20000498
 80037fc:	20000bbb 	.word	0x20000bbb
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003800:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003804:	3301      	adds	r3, #1
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4acd      	ldr	r2, [pc, #820]	; (8003b40 <Narwhal_Protocol+0x688>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 800380c:	021b      	lsls	r3, r3, #8
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 800380e:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003810:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	3303      	adds	r3, #3
 8003818:	49c9      	ldr	r1, [pc, #804]	; (8003b40 <Narwhal_Protocol+0x688>)
 800381a:	5ccb      	ldrb	r3, [r1, r3]
 800381c:	b21b      	sxth	r3, r3
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 800381e:	4313      	orrs	r3, r2
 8003820:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003822:	ee07 3a90 	vmov	s15, r3
 8003826:	eeb8 6be7 	vcvt.f64.s32	d6, s15
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 800382a:	ed9f 5bbf 	vldr	d5, [pc, #764]	; 8003b28 <Narwhal_Protocol+0x670>
 800382e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003832:	ed87 7b2a 	vstr	d7, [r7, #168]	; 0xa8
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003836:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4ac0      	ldr	r2, [pc, #768]	; (8003b44 <Narwhal_Protocol+0x68c>)
 8003844:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8003846:	49c0      	ldr	r1, [pc, #768]	; (8003b48 <Narwhal_Protocol+0x690>)
 8003848:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800384c:	20d8      	movs	r0, #216	; 0xd8
 800384e:	fb00 f303 	mul.w	r3, r0, r3
 8003852:	440b      	add	r3, r1
 8003854:	3350      	adds	r3, #80	; 0x50
 8003856:	ed93 6b00 	vldr	d6, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 800385a:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800385e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003862:	49b9      	ldr	r1, [pc, #740]	; (8003b48 <Narwhal_Protocol+0x690>)
 8003864:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003868:	20d8      	movs	r0, #216	; 0xd8
 800386a:	fb00 f303 	mul.w	r3, r0, r3
 800386e:	440b      	add	r3, r1
 8003870:	3350      	adds	r3, #80	; 0x50
 8003872:	ed93 6b00 	vldr	d6, [r3]
 8003876:	49b4      	ldr	r1, [pc, #720]	; (8003b48 <Narwhal_Protocol+0x690>)
 8003878:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800387c:	20d8      	movs	r0, #216	; 0xd8
 800387e:	fb00 f303 	mul.w	r3, r0, r3
 8003882:	440b      	add	r3, r1
 8003884:	33b8      	adds	r3, #184	; 0xb8
 8003886:	ed93 5b00 	vldr	d5, [r3]
 800388a:	eeb0 4b45 	vmov.f64	d4, d5
 800388e:	ed9f 3ba8 	vldr	d3, [pc, #672]	; 8003b30 <Narwhal_Protocol+0x678>
 8003892:	eeb0 2b46 	vmov.f64	d2, d6
 8003896:	eeb0 1b47 	vmov.f64	d1, d7
 800389a:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 800389e:	4610      	mov	r0, r2
 80038a0:	f7fd fba4 	bl	8000fec <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 80038a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038a8:	3301      	adds	r3, #1
 80038aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80038ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	dda4      	ble.n	8003800 <Narwhal_Protocol+0x348>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 80038b6:	4ba5      	ldr	r3, [pc, #660]	; (8003b4c <Narwhal_Protocol+0x694>)
 80038b8:	220f      	movs	r2, #15
 80038ba:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 80038bc:	4ba4      	ldr	r3, [pc, #656]	; (8003b50 <Narwhal_Protocol+0x698>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 80038c2:	4ba4      	ldr	r3, [pc, #656]	; (8003b54 <Narwhal_Protocol+0x69c>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80038c8:	4ba2      	ldr	r3, [pc, #648]	; (8003b54 <Narwhal_Protocol+0x69c>)
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80038ce:	2003      	movs	r0, #3
 80038d0:	f7ff fdd0 	bl	8003474 <SentData>
				break;
 80038d4:	f000 bc3a 	b.w	800414c <Narwhal_Protocol+0xc94>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 80038d8:	4b9b      	ldr	r3, [pc, #620]	; (8003b48 <Narwhal_Protocol+0x690>)
 80038da:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80038de:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80038e2:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80038e6:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 80038ea:	4b97      	ldr	r3, [pc, #604]	; (8003b48 <Narwhal_Protocol+0x690>)
 80038ec:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 80038f0:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80038f4:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 80038f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 80038fc:	4b92      	ldr	r3, [pc, #584]	; (8003b48 <Narwhal_Protocol+0x690>)
 80038fe:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8003902:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003906:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 800390a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 800390e:	4b8e      	ldr	r3, [pc, #568]	; (8003b48 <Narwhal_Protocol+0x690>)
 8003910:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8003914:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8003918:	f5a1 718c 	sub.w	r1, r1, #280	; 0x118
 800391c:	e9c1 2306 	strd	r2, r3, [r1, #24]
				for (int i = 0; i < 3; i++) {
 8003920:	2300      	movs	r3, #0
 8003922:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003926:	e026      	b.n	8003976 <Narwhal_Protocol+0x4be>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003928:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800392c:	3301      	adds	r3, #1
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	4a83      	ldr	r2, [pc, #524]	; (8003b40 <Narwhal_Protocol+0x688>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	021b      	lsls	r3, r3, #8
 8003936:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003938:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	3303      	adds	r3, #3
 8003940:	497f      	ldr	r1, [pc, #508]	; (8003b40 <Narwhal_Protocol+0x688>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003946:	4313      	orrs	r3, r2
 8003948:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003952:	ed9f 5b79 	vldr	d5, [pc, #484]	; 8003b38 <Narwhal_Protocol+0x680>
 8003956:	ee86 7b05 	vdiv.f64	d7, d6, d5
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 800395a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003964:	443b      	add	r3, r7
 8003966:	3b98      	subs	r3, #152	; 0x98
 8003968:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 800396c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003970:	3301      	adds	r3, #1
 8003972:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003976:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397a:	2b02      	cmp	r3, #2
 800397c:	ddd4      	ble.n	8003928 <Narwhal_Protocol+0x470>
				}
				IVK(q_Feed, d_Task, dq);
 800397e:	f107 0220 	add.w	r2, r7, #32
 8003982:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8003986:	463b      	mov	r3, r7
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe fb35 	bl	8001ff8 <IVK>
				t = 0;
 800398e:	4972      	ldr	r1, [pc, #456]	; (8003b58 <Narwhal_Protocol+0x6a0>)
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 3; i++) {
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80039a2:	e044      	b.n	8003a2e <Narwhal_Protocol+0x576>
					double Setpoint = Control[i].PositionFeedback + dq[i];
 80039a4:	4a68      	ldr	r2, [pc, #416]	; (8003b48 <Narwhal_Protocol+0x690>)
 80039a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039aa:	21d8      	movs	r1, #216	; 0xd8
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3350      	adds	r3, #80	; 0x50
 80039b4:	ed93 6b00 	vldr	d6, [r3]
 80039b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80039c2:	443b      	add	r3, r7
 80039c4:	3bf8      	subs	r3, #248	; 0xf8
 80039c6:	ed93 7b00 	vldr	d7, [r3]
 80039ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039ce:	ed87 7b2c 	vstr	d7, [r7, #176]	; 0xb0
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 80039d2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4a59      	ldr	r2, [pc, #356]	; (8003b44 <Narwhal_Protocol+0x68c>)
 80039e0:	441a      	add	r2, r3
 80039e2:	4959      	ldr	r1, [pc, #356]	; (8003b48 <Narwhal_Protocol+0x690>)
 80039e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039e8:	20d8      	movs	r0, #216	; 0xd8
 80039ea:	fb00 f303 	mul.w	r3, r0, r3
 80039ee:	440b      	add	r3, r1
 80039f0:	3350      	adds	r3, #80	; 0x50
 80039f2:	ed93 7b00 	vldr	d7, [r3]
 80039f6:	4954      	ldr	r1, [pc, #336]	; (8003b48 <Narwhal_Protocol+0x690>)
 80039f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80039fc:	20d8      	movs	r0, #216	; 0xd8
 80039fe:	fb00 f303 	mul.w	r3, r0, r3
 8003a02:	440b      	add	r3, r1
 8003a04:	33b8      	adds	r3, #184	; 0xb8
 8003a06:	ed93 6b00 	vldr	d6, [r3]
 8003a0a:	eeb0 4b46 	vmov.f64	d4, d6
 8003a0e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8003b30 <Narwhal_Protocol+0x678>
 8003a12:	eeb0 2b47 	vmov.f64	d2, d7
 8003a16:	ed97 1b2c 	vldr	d1, [r7, #176]	; 0xb0
 8003a1a:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f7fd fae4 	bl	8000fec <Traj_Coeff_Cal>
				for (int i = 0; i < 3; i++) {
 8003a24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	ddb6      	ble.n	80039a4 <Narwhal_Protocol+0x4ec>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003a36:	4b45      	ldr	r3, [pc, #276]	; (8003b4c <Narwhal_Protocol+0x694>)
 8003a38:	220f      	movs	r2, #15
 8003a3a:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003a3c:	4b44      	ldr	r3, [pc, #272]	; (8003b50 <Narwhal_Protocol+0x698>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003a42:	4b44      	ldr	r3, [pc, #272]	; (8003b54 <Narwhal_Protocol+0x69c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003a48:	4b42      	ldr	r3, [pc, #264]	; (8003b54 <Narwhal_Protocol+0x69c>)
 8003a4a:	22ff      	movs	r2, #255	; 0xff
 8003a4c:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003a4e:	2003      	movs	r0, #3
 8003a50:	f7ff fd10 	bl	8003474 <SentData>
				break;
 8003a54:	e37a      	b.n	800414c <Narwhal_Protocol+0xc94>
			case 0xFD:
				/* Joint Set */
				t = 0;
 8003a56:	4940      	ldr	r1, [pc, #256]	; (8003b58 <Narwhal_Protocol+0x6a0>)
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9c1 2300 	strd	r2, r3, [r1]
				double Joint[4];
				double T = 2;
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003a6c:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8
				double Distance;
				for (int i = 0; i < 4; i++) {
 8003a70:	2300      	movs	r3, #0
 8003a72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a76:	e043      	b.n	8003b00 <Narwhal_Protocol+0x648>
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4a2f      	ldr	r2, [pc, #188]	; (8003b40 <Narwhal_Protocol+0x688>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	3303      	adds	r3, #3
 8003a90:	492b      	ldr	r1, [pc, #172]	; (8003b40 <Narwhal_Protocol+0x688>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003aa2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8003b28 <Narwhal_Protocol+0x670>
 8003aa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003ab4:	443b      	add	r3, r7
 8003ab6:	3bf8      	subs	r3, #248	; 0xf8
 8003ab8:	ed83 7b00 	vstr	d7, [r3]
					Distance += fabs(Joint[i] - Control[i].PositionFeedback);
 8003abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003ac6:	443b      	add	r3, r7
 8003ac8:	3bf8      	subs	r3, #248	; 0xf8
 8003aca:	ed93 6b00 	vldr	d6, [r3]
 8003ace:	4a1e      	ldr	r2, [pc, #120]	; (8003b48 <Narwhal_Protocol+0x690>)
 8003ad0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ad4:	21d8      	movs	r1, #216	; 0xd8
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	3350      	adds	r3, #80	; 0x50
 8003ade:	ed93 7b00 	vldr	d7, [r3]
 8003ae2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8003ae6:	eeb0 7bc7 	vabs.f64	d7, d7
 8003aea:	ed97 6b40 	vldr	d6, [r7, #256]	; 0x100
 8003aee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003af2:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
				for (int i = 0; i < 4; i++) {
 8003af6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afa:	3301      	adds	r3, #1
 8003afc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	ddb7      	ble.n	8003a78 <Narwhal_Protocol+0x5c0>
				}
				T +=  Distance*0.0;
 8003b08:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8003b0c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8003b30 <Narwhal_Protocol+0x678>
 8003b10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003b14:	ed97 6b2e 	vldr	d6, [r7, #184]	; 0xb8
 8003b18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b1c:	ed87 7b2e 	vstr	d7, [r7, #184]	; 0xb8
				for (int i = 0; i < 4; i++) {
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b26:	e050      	b.n	8003bca <Narwhal_Protocol+0x712>
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	408f4000 	.word	0x408f4000
	...
 8003b3c:	40490000 	.word	0x40490000
 8003b40:	20000094 	.word	0x20000094
 8003b44:	200009d0 	.word	0x200009d0
 8003b48:	20000498 	.word	0x20000498
 8003b4c:	20000bb9 	.word	0x20000bb9
 8003b50:	20000bbb 	.word	0x20000bbb
 8003b54:	200000a4 	.word	0x200000a4
 8003b58:	20000bb0 	.word	0x20000bb0
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 8003b5c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4ab9      	ldr	r2, [pc, #740]	; (8003e50 <Narwhal_Protocol+0x998>)
 8003b6a:	441a      	add	r2, r3
 8003b6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003b76:	443b      	add	r3, r7
 8003b78:	3bf8      	subs	r3, #248	; 0xf8
 8003b7a:	ed93 7b00 	vldr	d7, [r3]
 8003b7e:	49b5      	ldr	r1, [pc, #724]	; (8003e54 <Narwhal_Protocol+0x99c>)
 8003b80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b84:	20d8      	movs	r0, #216	; 0xd8
 8003b86:	fb00 f303 	mul.w	r3, r0, r3
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3350      	adds	r3, #80	; 0x50
 8003b8e:	ed93 6b00 	vldr	d6, [r3]
 8003b92:	49b0      	ldr	r1, [pc, #704]	; (8003e54 <Narwhal_Protocol+0x99c>)
 8003b94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b98:	20d8      	movs	r0, #216	; 0xd8
 8003b9a:	fb00 f303 	mul.w	r3, r0, r3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	33b8      	adds	r3, #184	; 0xb8
 8003ba2:	ed93 5b00 	vldr	d5, [r3]
 8003ba6:	eeb0 4b45 	vmov.f64	d4, d5
 8003baa:	ed9f 3ba5 	vldr	d3, [pc, #660]	; 8003e40 <Narwhal_Protocol+0x988>
 8003bae:	eeb0 2b46 	vmov.f64	d2, d6
 8003bb2:	eeb0 1b47 	vmov.f64	d1, d7
 8003bb6:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 8003bba:	4610      	mov	r0, r2
 8003bbc:	f7fd fa16 	bl	8000fec <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003bc0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	ddc4      	ble.n	8003b5c <Narwhal_Protocol+0x6a4>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003bd2:	4ba1      	ldr	r3, [pc, #644]	; (8003e58 <Narwhal_Protocol+0x9a0>)
 8003bd4:	220f      	movs	r2, #15
 8003bd6:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003bd8:	4ba0      	ldr	r3, [pc, #640]	; (8003e5c <Narwhal_Protocol+0x9a4>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8003bde:	4ba0      	ldr	r3, [pc, #640]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003be0:	2203      	movs	r2, #3
 8003be2:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003be4:	4b9e      	ldr	r3, [pc, #632]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003be6:	22ff      	movs	r2, #255	; 0xff
 8003be8:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003bea:	2003      	movs	r0, #3
 8003bec:	f7ff fc42 	bl	8003474 <SentData>
				break;
 8003bf0:	e2ac      	b.n	800414c <Narwhal_Protocol+0xc94>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 8003bf2:	499c      	ldr	r1, [pc, #624]	; (8003e64 <Narwhal_Protocol+0x9ac>)
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003c06:	e056      	b.n	8003cb6 <Narwhal_Protocol+0x7fe>
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4a95      	ldr	r2, [pc, #596]	; (8003e68 <Narwhal_Protocol+0x9b0>)
 8003c12:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c14:	021b      	lsls	r3, r3, #8
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c16:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	3303      	adds	r3, #3
 8003c20:	4991      	ldr	r1, [pc, #580]	; (8003e68 <Narwhal_Protocol+0x9b0>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	b21b      	sxth	r3, r3
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c26:	4313      	orrs	r3, r2
 8003c28:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c32:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8003e48 <Narwhal_Protocol+0x990>
 8003c36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003c3a:	ed87 7b30 	vstr	d7, [r7, #192]	; 0xc0
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003c3e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003c42:	4613      	mov	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4a81      	ldr	r2, [pc, #516]	; (8003e50 <Narwhal_Protocol+0x998>)
 8003c4c:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8003c4e:	4981      	ldr	r1, [pc, #516]	; (8003e54 <Narwhal_Protocol+0x99c>)
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c54:	20d8      	movs	r0, #216	; 0xd8
 8003c56:	fb00 f303 	mul.w	r3, r0, r3
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3350      	adds	r3, #80	; 0x50
 8003c5e:	ed93 6b00 	vldr	d6, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003c62:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8003c66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c6a:	497a      	ldr	r1, [pc, #488]	; (8003e54 <Narwhal_Protocol+0x99c>)
 8003c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c70:	20d8      	movs	r0, #216	; 0xd8
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	440b      	add	r3, r1
 8003c78:	3350      	adds	r3, #80	; 0x50
 8003c7a:	ed93 6b00 	vldr	d6, [r3]
 8003c7e:	4975      	ldr	r1, [pc, #468]	; (8003e54 <Narwhal_Protocol+0x99c>)
 8003c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c84:	20d8      	movs	r0, #216	; 0xd8
 8003c86:	fb00 f303 	mul.w	r3, r0, r3
 8003c8a:	440b      	add	r3, r1
 8003c8c:	33b8      	adds	r3, #184	; 0xb8
 8003c8e:	ed93 5b00 	vldr	d5, [r3]
 8003c92:	eeb0 4b45 	vmov.f64	d4, d5
 8003c96:	ed9f 3b6a 	vldr	d3, [pc, #424]	; 8003e40 <Narwhal_Protocol+0x988>
 8003c9a:	eeb0 2b46 	vmov.f64	d2, d6
 8003c9e:	eeb0 1b47 	vmov.f64	d1, d7
 8003ca2:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003ca6:	4610      	mov	r0, r2
 8003ca8:	f7fd f9a0 	bl	8000fec <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	dda4      	ble.n	8003c08 <Narwhal_Protocol+0x750>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003cbe:	4b66      	ldr	r3, [pc, #408]	; (8003e58 <Narwhal_Protocol+0x9a0>)
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003cc4:	4b65      	ldr	r3, [pc, #404]	; (8003e5c <Narwhal_Protocol+0x9a4>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003cca:	4b65      	ldr	r3, [pc, #404]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003cd0:	4b63      	ldr	r3, [pc, #396]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003cd2:	22ff      	movs	r2, #255	; 0xff
 8003cd4:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003cd6:	2003      	movs	r0, #3
 8003cd8:	f7ff fbcc 	bl	8003474 <SentData>
				break;
 8003cdc:	e236      	b.n	800414c <Narwhal_Protocol+0xc94>
			case 0xFF:
				/* Chess Move */
				UART5_txBuffer[2] = 0x05;
 8003cde:	4b60      	ldr	r3, [pc, #384]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003ce0:	2205      	movs	r2, #5
 8003ce2:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003ce4:	4b5e      	ldr	r3, [pc, #376]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003ce6:	22ff      	movs	r2, #255	; 0xff
 8003ce8:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003cea:	2003      	movs	r0, #3
 8003cec:	f7ff fbc2 	bl	8003474 <SentData>
				break;
 8003cf0:	e22c      	b.n	800414c <Narwhal_Protocol+0xc94>
				/* 		Data to MCU End	*/

				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 8003cf2:	4b5b      	ldr	r3, [pc, #364]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003cf4:	22ee      	movs	r2, #238	; 0xee
 8003cf6:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8003cf8:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	4b57      	ldr	r3, [pc, #348]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003d04:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 8003d06:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	4b54      	ldr	r3, [pc, #336]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003d0e:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8003d10:	2004      	movs	r0, #4
 8003d12:	f7ff fbaf 	bl	8003474 <SentData>
				break;
 8003d16:	e219      	b.n	800414c <Narwhal_Protocol+0xc94>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8003d18:	4b51      	ldr	r3, [pc, #324]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003d1a:	22ee      	movs	r2, #238	; 0xee
 8003d1c:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 8003d1e:	4b53      	ldr	r3, [pc, #332]	; (8003e6c <Narwhal_Protocol+0x9b4>)
 8003d20:	89db      	ldrh	r3, [r3, #14]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	4b4d      	ldr	r3, [pc, #308]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003d2a:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 8003d2c:	4b4f      	ldr	r3, [pc, #316]	; (8003e6c <Narwhal_Protocol+0x9b4>)
 8003d2e:	89db      	ldrh	r3, [r3, #14]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	4b4b      	ldr	r3, [pc, #300]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003d34:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8003d36:	2004      	movs	r0, #4
 8003d38:	f7ff fb9c 	bl	8003474 <SentData>
				break;
 8003d3c:	e206      	b.n	800414c <Narwhal_Protocol+0xc94>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8003d3e:	4b48      	ldr	r3, [pc, #288]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003d40:	22ee      	movs	r2, #238	; 0xee
 8003d42:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8003d44:	2300      	movs	r3, #0
 8003d46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d4a:	e028      	b.n	8003d9e <Narwhal_Protocol+0x8e6>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 8003d4c:	4947      	ldr	r1, [pc, #284]	; (8003e6c <Narwhal_Protocol+0x9b4>)
 8003d4e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	440b      	add	r3, r1
 8003d5c:	330e      	adds	r3, #14
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	0a1b      	lsrs	r3, r3, #8
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d68:	3301      	adds	r3, #1
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	b2d1      	uxtb	r1, r2
 8003d6e:	4a3c      	ldr	r2, [pc, #240]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003d70:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 8003d72:	493e      	ldr	r1, [pc, #248]	; (8003e6c <Narwhal_Protocol+0x9b4>)
 8003d74:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	440b      	add	r3, r1
 8003d82:	330e      	adds	r3, #14
 8003d84:	881a      	ldrh	r2, [r3, #0]
 8003d86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	3303      	adds	r3, #3
 8003d8e:	b2d1      	uxtb	r1, r2
 8003d90:	4a33      	ldr	r2, [pc, #204]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003d92:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003d94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d9e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	ddd2      	ble.n	8003d4c <Narwhal_Protocol+0x894>
				}
				SentData(12);
 8003da6:	200c      	movs	r0, #12
 8003da8:	f7ff fb64 	bl	8003474 <SentData>
				break;
 8003dac:	e1ce      	b.n	800414c <Narwhal_Protocol+0xc94>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 8003dae:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003db0:	22ee      	movs	r2, #238	; 0xee
 8003db2:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003dba:	e02c      	b.n	8003e16 <Narwhal_Protocol+0x95e>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <Narwhal_Protocol+0x99c>)
 8003dbe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003dc2:	21d8      	movs	r1, #216	; 0xd8
 8003dc4:	fb01 f303 	mul.w	r3, r1, r3
 8003dc8:	4413      	add	r3, r2
 8003dca:	3350      	adds	r3, #80	; 0x50
 8003dcc:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 8003dd0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8003e48 <Narwhal_Protocol+0x990>
 8003dd4:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003dd8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003ddc:	ee17 3a90 	vmov	r3, s15
 8003de0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003de4:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8003de8:	121b      	asrs	r3, r3, #8
 8003dea:	b21a      	sxth	r2, r3
 8003dec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003df0:	3301      	adds	r3, #1
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	b2d1      	uxtb	r1, r2
 8003df6:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003df8:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003dfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	3303      	adds	r3, #3
 8003e02:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8003e06:	b2d1      	uxtb	r1, r2
 8003e08:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003e0a:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003e0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e10:	3301      	adds	r3, #1
 8003e12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003e16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	ddce      	ble.n	8003dbc <Narwhal_Protocol+0x904>
				}
				UART5_txBuffer[10] = 0;
 8003e1e:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	72da      	strb	r2, [r3, #11]
				SentData(12);
 8003e2a:	200c      	movs	r0, #12
 8003e2c:	f7ff fb22 	bl	8003474 <SentData>
				break;
 8003e30:	e18c      	b.n	800414c <Narwhal_Protocol+0xc94>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <Narwhal_Protocol+0x9a8>)
 8003e34:	22ee      	movs	r2, #238	; 0xee
 8003e36:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */

				for (int i = 0; i < 4; i++) {
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e3e:	e02f      	b.n	8003ea0 <Narwhal_Protocol+0x9e8>
	...
 8003e4c:	408f4000 	.word	0x408f4000
 8003e50:	200009d0 	.word	0x200009d0
 8003e54:	20000498 	.word	0x20000498
 8003e58:	20000bb9 	.word	0x20000bb9
 8003e5c:	20000bbb 	.word	0x20000bbb
 8003e60:	200000a4 	.word	0x200000a4
 8003e64:	20000bb0 	.word	0x20000bb0
 8003e68:	20000094 	.word	0x20000094
 8003e6c:	200002b8 	.word	0x200002b8
					q_in[i] = Control[i].PositionFeedback;
 8003e70:	4abf      	ldr	r2, [pc, #764]	; (8004170 <Narwhal_Protocol+0xcb8>)
 8003e72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e76:	21d8      	movs	r1, #216	; 0xd8
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3350      	adds	r3, #80	; 0x50
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8003e88:	00c9      	lsls	r1, r1, #3
 8003e8a:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8003e8e:	4439      	add	r1, r7
 8003e90:	39d8      	subs	r1, #216	; 0xd8
 8003e92:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003e96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ea0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	dde3      	ble.n	8003e70 <Narwhal_Protocol+0x9b8>
				}
				FPK(q_in, 269.0f, task);
 8003ea8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003eac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	ed9f 0bab 	vldr	d0, [pc, #684]	; 8004160 <Narwhal_Protocol+0xca8>
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe fb7a 	bl	80025b0 <FPK>

				for (int i = 0; i < 3; i++) {
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ec2:	e02b      	b.n	8003f1c <Narwhal_Protocol+0xa64>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8003ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003ece:	443b      	add	r3, r7
 8003ed0:	3bb0      	subs	r3, #176	; 0xb0
 8003ed2:	ed93 7b00 	vldr	d7, [r3]
 8003ed6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8003eda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003ede:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003ee2:	ee17 3a90 	vmov	r3, s15
 8003ee6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003eea:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8003eee:	121b      	asrs	r3, r3, #8
 8003ef0:	b21a      	sxth	r2, r3
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	b2d1      	uxtb	r1, r2
 8003efc:	4a9d      	ldr	r2, [pc, #628]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8003efe:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	3303      	adds	r3, #3
 8003f08:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8003f0c:	b2d1      	uxtb	r1, r2
 8003f0e:	4a99      	ldr	r2, [pc, #612]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8003f10:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f16:	3301      	adds	r3, #1
 8003f18:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	ddcf      	ble.n	8003ec4 <Narwhal_Protocol+0xa0c>
				}
				SentData(8);
 8003f24:	2008      	movs	r0, #8
 8003f26:	f7ff faa5 	bl	8003474 <SentData>
				break;
 8003f2a:	e10f      	b.n	800414c <Narwhal_Protocol+0xc94>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 8003f2c:	4b91      	ldr	r3, [pc, #580]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8003f2e:	22ee      	movs	r2, #238	; 0xee
 8003f30:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
				for (int i = 0; i < 4; i++) {
 8003f32:	2300      	movs	r3, #0
 8003f34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f38:	e017      	b.n	8003f6a <Narwhal_Protocol+0xab2>
					q_in[i] = Control[i].PositionFeedback;
 8003f3a:	4a8d      	ldr	r2, [pc, #564]	; (8004170 <Narwhal_Protocol+0xcb8>)
 8003f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f40:	21d8      	movs	r1, #216	; 0xd8
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	3350      	adds	r3, #80	; 0x50
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8003f52:	00c9      	lsls	r1, r1, #3
 8003f54:	f501 718c 	add.w	r1, r1, #280	; 0x118
 8003f58:	4439      	add	r1, r7
 8003f5a:	39d8      	subs	r1, #216	; 0xd8
 8003f5c:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f64:	3301      	adds	r3, #1
 8003f66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	dde3      	ble.n	8003f3a <Narwhal_Protocol+0xa82>
				}
				FPK(q_in, 269.0f, task);
 8003f72:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003f76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	ed9f 0b78 	vldr	d0, [pc, #480]	; 8004160 <Narwhal_Protocol+0xca8>
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe fb15 	bl	80025b0 <FPK>

				/* Station Encoder */
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 8003f86:	4b7c      	ldr	r3, [pc, #496]	; (8004178 <Narwhal_Protocol+0xcc0>)
 8003f88:	89db      	ldrh	r3, [r3, #14]
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	4b78      	ldr	r3, [pc, #480]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8003f92:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 8003f94:	4b78      	ldr	r3, [pc, #480]	; (8004178 <Narwhal_Protocol+0xcc0>)
 8003f96:	89db      	ldrh	r3, [r3, #14]
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b76      	ldr	r3, [pc, #472]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8003f9c:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8003f9e:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	4b72      	ldr	r3, [pc, #456]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8003faa:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 8003fac:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	4b70      	ldr	r3, [pc, #448]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8003fb4:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol2 >> 8) & 0xFF);
 8003fb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	4b6c      	ldr	r3, [pc, #432]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8003fc2:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol2 & 0xFF);
 8003fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4b6a      	ldr	r3, [pc, #424]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8003fcc:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 8003fce:	2300      	movs	r3, #0
 8003fd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003fd4:	e02c      	b.n	8004030 <Narwhal_Protocol+0xb78>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003fd6:	4a66      	ldr	r2, [pc, #408]	; (8004170 <Narwhal_Protocol+0xcb8>)
 8003fd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fdc:	21d8      	movs	r1, #216	; 0xd8
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3350      	adds	r3, #80	; 0x50
 8003fe6:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 8003fea:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004168 <Narwhal_Protocol+0xcb0>
 8003fee:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003ff2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003ff6:	ee17 3a90 	vmov	r3, s15
 8003ffa:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003ffe:	f9b7 30a2 	ldrsh.w	r3, [r7, #162]	; 0xa2
 8004002:	121b      	asrs	r3, r3, #8
 8004004:	b21a      	sxth	r2, r3
 8004006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400a:	3304      	adds	r3, #4
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	b2d1      	uxtb	r1, r2
 8004010:	4a58      	ldr	r2, [pc, #352]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8004012:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	3309      	adds	r3, #9
 800401c:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8004020:	b2d1      	uxtb	r1, r2
 8004022:	4a54      	ldr	r2, [pc, #336]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8004024:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004026:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800402a:	3301      	adds	r3, #1
 800402c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004034:	2b03      	cmp	r3, #3
 8004036:	ddce      	ble.n	8003fd6 <Narwhal_Protocol+0xb1e>
				}
				UART5_txBuffer[16] = 0;
 8004038:	4b4e      	ldr	r3, [pc, #312]	; (8004174 <Narwhal_Protocol+0xcbc>)
 800403a:	2200      	movs	r2, #0
 800403c:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 800403e:	4b4d      	ldr	r3, [pc, #308]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8004040:	2200      	movs	r2, #0
 8004042:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 8004044:	2300      	movs	r3, #0
 8004046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800404a:	e029      	b.n	80040a0 <Narwhal_Protocol+0xbe8>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 800404c:	4a4b      	ldr	r2, [pc, #300]	; (800417c <Narwhal_Protocol+0xcc4>)
 800404e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	ed93 7b00 	vldr	d7, [r3]
 800405a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8004168 <Narwhal_Protocol+0xcb0>
 800405e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004062:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004066:	ee17 3a90 	vmov	r3, s15
 800406a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800406e:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8004072:	121b      	asrs	r3, r3, #8
 8004074:	b21a      	sxth	r2, r3
 8004076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800407a:	3309      	adds	r3, #9
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	b2d1      	uxtb	r1, r2
 8004080:	4a3c      	ldr	r2, [pc, #240]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8004082:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004084:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	3313      	adds	r3, #19
 800408c:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8004090:	b2d1      	uxtb	r1, r2
 8004092:	4a38      	ldr	r2, [pc, #224]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8004094:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004096:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800409a:	3301      	adds	r3, #1
 800409c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80040a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	ddd1      	ble.n	800404c <Narwhal_Protocol+0xb94>
				}
				UART5_txBuffer[26] = 0;
 80040a8:	4b32      	ldr	r3, [pc, #200]	; (8004174 <Narwhal_Protocol+0xcbc>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <Narwhal_Protocol+0xcbc>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80040ba:	e02b      	b.n	8004114 <Narwhal_Protocol+0xc5c>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 80040bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80040c6:	443b      	add	r3, r7
 80040c8:	3bb0      	subs	r3, #176	; 0xb0
 80040ca:	ed93 7b00 	vldr	d7, [r3]
 80040ce:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80040d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80040da:	ee17 3a90 	vmov	r3, s15
 80040de:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80040e2:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80040e6:	121b      	asrs	r3, r3, #8
 80040e8:	b21a      	sxth	r2, r3
 80040ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040ee:	330e      	adds	r3, #14
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	b2d1      	uxtb	r1, r2
 80040f4:	4a1f      	ldr	r2, [pc, #124]	; (8004174 <Narwhal_Protocol+0xcbc>)
 80040f6:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80040f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	331d      	adds	r3, #29
 8004100:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8004104:	b2d1      	uxtb	r1, r2
 8004106:	4a1b      	ldr	r2, [pc, #108]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8004108:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 800410a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800410e:	3301      	adds	r3, #1
 8004110:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004118:	2b02      	cmp	r3, #2
 800411a:	ddcf      	ble.n	80040bc <Narwhal_Protocol+0xc04>
				}
				SentData(34);
 800411c:	2022      	movs	r0, #34	; 0x22
 800411e:	f7ff f9a9 	bl	8003474 <SentData>
				break;
 8004122:	e013      	b.n	800414c <Narwhal_Protocol+0xc94>
			default:
				UART5_txBuffer[2] = 0xFF;
 8004124:	4b13      	ldr	r3, [pc, #76]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8004126:	22ff      	movs	r2, #255	; 0xff
 8004128:	709a      	strb	r2, [r3, #2]
				SentData(3);
 800412a:	2003      	movs	r0, #3
 800412c:	f7ff f9a2 	bl	8003474 <SentData>
 8004130:	e00c      	b.n	800414c <Narwhal_Protocol+0xc94>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 8004132:	4b10      	ldr	r3, [pc, #64]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8004134:	22cc      	movs	r2, #204	; 0xcc
 8004136:	705a      	strb	r2, [r3, #1]
			SentData(3);
 8004138:	2003      	movs	r0, #3
 800413a:	f7ff f99b 	bl	8003474 <SentData>
 800413e:	e005      	b.n	800414c <Narwhal_Protocol+0xc94>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <Narwhal_Protocol+0xcbc>)
 8004142:	22aa      	movs	r2, #170	; 0xaa
 8004144:	705a      	strb	r2, [r3, #1]
		SentData(3);
 8004146:	2003      	movs	r0, #3
 8004148:	f7ff f994 	bl	8003474 <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 800414c:	220e      	movs	r2, #14
 800414e:	490c      	ldr	r1, [pc, #48]	; (8004180 <Narwhal_Protocol+0xcc8>)
 8004150:	480c      	ldr	r0, [pc, #48]	; (8004184 <Narwhal_Protocol+0xccc>)
 8004152:	f00e fd45 	bl	8012be0 <HAL_UART_Receive_IT>
}
 8004156:	bf00      	nop
 8004158:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800415c:	46bd      	mov	sp, r7
 800415e:	bdb0      	pop	{r4, r5, r7, pc}
 8004160:	00000000 	.word	0x00000000
 8004164:	4070d000 	.word	0x4070d000
 8004168:	00000000 	.word	0x00000000
 800416c:	408f4000 	.word	0x408f4000
 8004170:	20000498 	.word	0x20000498
 8004174:	200000a4 	.word	0x200000a4
 8004178:	200002b8 	.word	0x200002b8
 800417c:	20000b60 	.word	0x20000b60
 8004180:	20000094 	.word	0x20000094
 8004184:	200011cc 	.word	0x200011cc

08004188 <Control_Function>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 0;
}

inline void Control_Function() {
 8004188:	b5b0      	push	{r4, r5, r7, lr}
 800418a:	b0b8      	sub	sp, #224	; 0xe0
 800418c:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	double J1, J2, J3, J4;
	J1 = EncPulse2Rad_Read(&Encoder[0], 1);
 800418e:	2101      	movs	r1, #1
 8004190:	48a5      	ldr	r0, [pc, #660]	; (8004428 <Control_Function+0x2a0>)
 8004192:	f7fc fa3f 	bl	8000614 <EncPulse2Rad_Read>
 8004196:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
	J2 = EncPulse2Rad_Read(&Encoder[1], 0);
 800419a:	2100      	movs	r1, #0
 800419c:	48a3      	ldr	r0, [pc, #652]	; (800442c <Control_Function+0x2a4>)
 800419e:	f7fc fa39 	bl	8000614 <EncPulse2Rad_Read>
 80041a2:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
	J3 = EncPulse2Rad_Read(&Encoder[2], 0);
 80041a6:	2100      	movs	r1, #0
 80041a8:	48a1      	ldr	r0, [pc, #644]	; (8004430 <Control_Function+0x2a8>)
 80041aa:	f7fc fa33 	bl	8000614 <EncPulse2Rad_Read>
 80041ae:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
	J4 = EncPulse2Rad_Read(&Encoder[3], 0);
 80041b2:	2100      	movs	r1, #0
 80041b4:	489f      	ldr	r0, [pc, #636]	; (8004434 <Control_Function+0x2ac>)
 80041b6:	f7fc fa2d 	bl	8000614 <EncPulse2Rad_Read>
 80041ba:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0

	/***** Joint Space SetPoint Gen *****/
	if (Chessmove_State == 0) {
 80041be:	4b9e      	ldr	r3, [pc, #632]	; (8004438 <Control_Function+0x2b0>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 808d 	bne.w	80042e2 <Control_Function+0x15a>
		if (Traj_Flag & 0x0F) {
 80041c8:	4b9c      	ldr	r3, [pc, #624]	; (800443c <Control_Function+0x2b4>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f003 030f 	and.w	r3, r3, #15
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f000 816a 	beq.w	80044aa <Control_Function+0x322>
			double traj_t_set[5];
			traj_t_set[0] = t;
 80041d6:	4b9a      	ldr	r3, [pc, #616]	; (8004440 <Control_Function+0x2b8>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 80041e0:	4b97      	ldr	r3, [pc, #604]	; (8004440 <Control_Function+0x2b8>)
 80041e2:	ed93 6b00 	vldr	d6, [r3]
 80041e6:	4b96      	ldr	r3, [pc, #600]	; (8004440 <Control_Function+0x2b8>)
 80041e8:	ed93 7b00 	vldr	d7, [r3]
 80041ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80041f0:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 80041f4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80041f8:	4b91      	ldr	r3, [pc, #580]	; (8004440 <Control_Function+0x2b8>)
 80041fa:	ed93 7b00 	vldr	d7, [r3]
 80041fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004202:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 8004206:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800420a:	4b8d      	ldr	r3, [pc, #564]	; (8004440 <Control_Function+0x2b8>)
 800420c:	ed93 7b00 	vldr	d7, [r3]
 8004210:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004214:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 8004218:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800421c:	4b88      	ldr	r3, [pc, #544]	; (8004440 <Control_Function+0x2b8>)
 800421e:	ed93 7b00 	vldr	d7, [r3]
 8004222:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004226:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 0; i < 4; i++) {
 800422a:	2300      	movs	r3, #0
 800422c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004230:	e048      	b.n	80042c4 <Control_Function+0x13c>
				if (Traj_Flag & (0x01 << i)) {
 8004232:	4b82      	ldr	r3, [pc, #520]	; (800443c <Control_Function+0x2b4>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800423c:	fa42 f303 	asr.w	r3, r2, r3
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	d038      	beq.n	80042ba <Control_Function+0x132>
					TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 8004248:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4a7b      	ldr	r2, [pc, #492]	; (8004444 <Control_Function+0x2bc>)
 8004256:	1898      	adds	r0, r3, r2
 8004258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	4a7a      	ldr	r2, [pc, #488]	; (8004448 <Control_Function+0x2c0>)
 8004260:	441a      	add	r2, r3
 8004262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4978      	ldr	r1, [pc, #480]	; (800444c <Control_Function+0x2c4>)
 800426a:	440b      	add	r3, r1
 800426c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004270:	f7fc ff6a 	bl	8001148 <TrajFollow>
							&SetPoint_Velocity[i]);
					if (t >= Traj[i].T) {
 8004274:	4973      	ldr	r1, [pc, #460]	; (8004444 <Control_Function+0x2bc>)
 8004276:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	1a9b      	subs	r3, r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	440b      	add	r3, r1
 8004284:	3330      	adds	r3, #48	; 0x30
 8004286:	ed93 6b00 	vldr	d6, [r3]
 800428a:	4b6d      	ldr	r3, [pc, #436]	; (8004440 <Control_Function+0x2b8>)
 800428c:	ed93 7b00 	vldr	d7, [r3]
 8004290:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004298:	d80f      	bhi.n	80042ba <Control_Function+0x132>
						Traj_Flag &= ((0x01 << i) ^ 0xFF);
 800429a:	2201      	movs	r2, #1
 800429c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	b25b      	sxtb	r3, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	b25a      	sxtb	r2, r3
 80042aa:	4b64      	ldr	r3, [pc, #400]	; (800443c <Control_Function+0x2b4>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	b25b      	sxtb	r3, r3
 80042b0:	4013      	ands	r3, r2
 80042b2:	b25b      	sxtb	r3, r3
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	4b61      	ldr	r3, [pc, #388]	; (800443c <Control_Function+0x2b4>)
 80042b8:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 80042ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042be:	3301      	adds	r3, #1
 80042c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80042c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	ddb2      	ble.n	8004232 <Control_Function+0xaa>
					}
				}
			}
			t += delta_t;
 80042cc:	4b5c      	ldr	r3, [pc, #368]	; (8004440 <Control_Function+0x2b8>)
 80042ce:	ed93 7b00 	vldr	d7, [r3]
 80042d2:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8004420 <Control_Function+0x298>
 80042d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042da:	4b59      	ldr	r3, [pc, #356]	; (8004440 <Control_Function+0x2b8>)
 80042dc:	ed83 7b00 	vstr	d7, [r3]
 80042e0:	e0e3      	b.n	80044aa <Control_Function+0x322>
		}
	}

	else if (Chessmove_State == 1) {
 80042e2:	4b55      	ldr	r3, [pc, #340]	; (8004438 <Control_Function+0x2b0>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	f040 80df 	bne.w	80044aa <Control_Function+0x322>
		if (Traj_Flag & 0x0F) {
 80042ec:	4b53      	ldr	r3, [pc, #332]	; (800443c <Control_Function+0x2b4>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 80d8 	beq.w	80044aa <Control_Function+0x322>
			double gamma[3] = { 1, 1, -1 };
 80042fa:	4b55      	ldr	r3, [pc, #340]	; (8004450 <Control_Function+0x2c8>)
 80042fc:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8004300:	461d      	mov	r5, r3
 8004302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004306:	e895 0003 	ldmia.w	r5, {r0, r1}
 800430a:	e884 0003 	stmia.w	r4, {r0, r1}
			//*********** Chi Output ************//
			double SetPointPosition[4];
			double SetPointVelocity[4];

			double traj_t_set[5];
			traj_t_set[0] = t;
 800430e:	4b4c      	ldr	r3, [pc, #304]	; (8004440 <Control_Function+0x2b8>)
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 8004318:	4b49      	ldr	r3, [pc, #292]	; (8004440 <Control_Function+0x2b8>)
 800431a:	ed93 6b00 	vldr	d6, [r3]
 800431e:	4b48      	ldr	r3, [pc, #288]	; (8004440 <Control_Function+0x2b8>)
 8004320:	ed93 7b00 	vldr	d7, [r3]
 8004324:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004328:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 800432c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8004330:	4b43      	ldr	r3, [pc, #268]	; (8004440 <Control_Function+0x2b8>)
 8004332:	ed93 7b00 	vldr	d7, [r3]
 8004336:	ee26 7b07 	vmul.f64	d7, d6, d7
 800433a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 800433e:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004342:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <Control_Function+0x2b8>)
 8004344:	ed93 7b00 	vldr	d7, [r3]
 8004348:	ee26 7b07 	vmul.f64	d7, d6, d7
 800434c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 8004350:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8004354:	4b3a      	ldr	r3, [pc, #232]	; (8004440 <Control_Function+0x2b8>)
 8004356:	ed93 7b00 	vldr	d7, [r3]
 800435a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800435e:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 4; i < 7; i++) {
 8004362:	2304      	movs	r3, #4
 8004364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004368:	e040      	b.n	80043ec <Control_Function+0x264>
				TrajFollow(&Traj[i], traj_t_set, &Chi_t[i], &ChiDot_t[i]);
 800436a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800436e:	4613      	mov	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4a33      	ldr	r2, [pc, #204]	; (8004444 <Control_Function+0x2bc>)
 8004378:	1898      	adds	r0, r3, r2
 800437a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800437e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004382:	00db      	lsls	r3, r3, #3
 8004384:	18d4      	adds	r4, r2, r3
 8004386:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800438a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4413      	add	r3, r2
 8004392:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004396:	4622      	mov	r2, r4
 8004398:	f7fc fed6 	bl	8001148 <TrajFollow>
				if (t >= Traj[i].T) {
 800439c:	4929      	ldr	r1, [pc, #164]	; (8004444 <Control_Function+0x2bc>)
 800439e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80043a2:	4613      	mov	r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	440b      	add	r3, r1
 80043ac:	3330      	adds	r3, #48	; 0x30
 80043ae:	ed93 6b00 	vldr	d6, [r3]
 80043b2:	4b23      	ldr	r3, [pc, #140]	; (8004440 <Control_Function+0x2b8>)
 80043b4:	ed93 7b00 	vldr	d7, [r3]
 80043b8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d80f      	bhi.n	80043e2 <Control_Function+0x25a>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 80043c2:	2201      	movs	r2, #1
 80043c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	b25b      	sxtb	r3, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	b25a      	sxtb	r2, r3
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <Control_Function+0x2b4>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	4013      	ands	r3, r2
 80043da:	b25b      	sxtb	r3, r3
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	4b17      	ldr	r3, [pc, #92]	; (800443c <Control_Function+0x2b4>)
 80043e0:	701a      	strb	r2, [r3, #0]
			for (int i = 4; i < 7; i++) {
 80043e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043e6:	3301      	adds	r3, #1
 80043e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043f0:	2b06      	cmp	r3, #6
 80043f2:	ddba      	ble.n	800436a <Control_Function+0x1e2>
				}
			}
			IPK(gamma, Chi_t, SetPointPosition);
 80043f4:	463a      	mov	r2, r7
 80043f6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80043fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd fcce 	bl	8001da0 <IPK>
			IVK(SetPointPosition, ChiDot_t, SetPointVelocity);
 8004404:	f107 0220 	add.w	r2, r7, #32
 8004408:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800440c:	463b      	mov	r3, r7
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd fdf2 	bl	8001ff8 <IVK>
			for (int i = 0; i < 4; i++) {
 8004414:	2300      	movs	r3, #0
 8004416:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800441a:	e038      	b.n	800448e <Control_Function+0x306>
 800441c:	f3af 8000 	nop.w
 8004420:	d2f1a9fc 	.word	0xd2f1a9fc
 8004424:	3f50624d 	.word	0x3f50624d
 8004428:	200002b8 	.word	0x200002b8
 800442c:	200002e0 	.word	0x200002e0
 8004430:	20000308 	.word	0x20000308
 8004434:	20000330 	.word	0x20000330
 8004438:	20000bbb 	.word	0x20000bbb
 800443c:	20000bb9 	.word	0x20000bb9
 8004440:	20000bb0 	.word	0x20000bb0
 8004444:	200009d0 	.word	0x200009d0
 8004448:	20000b60 	.word	0x20000b60
 800444c:	20000b88 	.word	0x20000b88
 8004450:	08016720 	.word	0x08016720
				TrajFollow(&Traj[i], traj_t_set, &SetPointPosition[i],
 8004454:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004458:	4613      	mov	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	1a9b      	subs	r3, r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4a47      	ldr	r2, [pc, #284]	; (8004580 <Control_Function+0x3f8>)
 8004462:	1898      	adds	r0, r3, r2
 8004464:	463a      	mov	r2, r7
 8004466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	18d4      	adds	r4, r2, r3
 800446e:	f107 0220 	add.w	r2, r7, #32
 8004472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800447e:	4622      	mov	r2, r4
 8004480:	f7fc fe62 	bl	8001148 <TrajFollow>
			for (int i = 0; i < 4; i++) {
 8004484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004488:	3301      	adds	r3, #1
 800448a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800448e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004492:	2b03      	cmp	r3, #3
 8004494:	ddde      	ble.n	8004454 <Control_Function+0x2cc>
						&SetPointVelocity[i]);
			}
			t += delta_t;
 8004496:	4b3b      	ldr	r3, [pc, #236]	; (8004584 <Control_Function+0x3fc>)
 8004498:	ed93 7b00 	vldr	d7, [r3]
 800449c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8004578 <Control_Function+0x3f0>
 80044a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044a4:	4b37      	ldr	r3, [pc, #220]	; (8004584 <Control_Function+0x3fc>)
 80044a6:	ed83 7b00 	vstr	d7, [r3]
		}
	}

	CascadeControl(&Control[0], &Kalman[0], J1, SetPoint_Position[0], SetPoint_Velocity[0]);
 80044aa:	4b37      	ldr	r3, [pc, #220]	; (8004588 <Control_Function+0x400>)
 80044ac:	ed93 7b00 	vldr	d7, [r3]
 80044b0:	4b36      	ldr	r3, [pc, #216]	; (800458c <Control_Function+0x404>)
 80044b2:	ed93 6b00 	vldr	d6, [r3]
 80044b6:	eeb0 2b46 	vmov.f64	d2, d6
 80044ba:	eeb0 1b47 	vmov.f64	d1, d7
 80044be:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 80044c2:	4933      	ldr	r1, [pc, #204]	; (8004590 <Control_Function+0x408>)
 80044c4:	4833      	ldr	r0, [pc, #204]	; (8004594 <Control_Function+0x40c>)
 80044c6:	f7fd f996 	bl	80017f6 <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2, SetPoint_Position[1], SetPoint_Velocity[1]);
 80044ca:	4b2f      	ldr	r3, [pc, #188]	; (8004588 <Control_Function+0x400>)
 80044cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80044d0:	4b2e      	ldr	r3, [pc, #184]	; (800458c <Control_Function+0x404>)
 80044d2:	ed93 6b02 	vldr	d6, [r3, #8]
 80044d6:	eeb0 2b46 	vmov.f64	d2, d6
 80044da:	eeb0 1b47 	vmov.f64	d1, d7
 80044de:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 80044e2:	492d      	ldr	r1, [pc, #180]	; (8004598 <Control_Function+0x410>)
 80044e4:	482d      	ldr	r0, [pc, #180]	; (800459c <Control_Function+0x414>)
 80044e6:	f7fd f986 	bl	80017f6 <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3, SetPoint_Position[2], SetPoint_Velocity[2]);
 80044ea:	4b27      	ldr	r3, [pc, #156]	; (8004588 <Control_Function+0x400>)
 80044ec:	ed93 7b04 	vldr	d7, [r3, #16]
 80044f0:	4b26      	ldr	r3, [pc, #152]	; (800458c <Control_Function+0x404>)
 80044f2:	ed93 6b04 	vldr	d6, [r3, #16]
 80044f6:	eeb0 2b46 	vmov.f64	d2, d6
 80044fa:	eeb0 1b47 	vmov.f64	d1, d7
 80044fe:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 8004502:	4927      	ldr	r1, [pc, #156]	; (80045a0 <Control_Function+0x418>)
 8004504:	4827      	ldr	r0, [pc, #156]	; (80045a4 <Control_Function+0x41c>)
 8004506:	f7fd f976 	bl	80017f6 <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4, SetPoint_Position[3], SetPoint_Velocity[3]);
 800450a:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <Control_Function+0x400>)
 800450c:	ed93 7b06 	vldr	d7, [r3, #24]
 8004510:	4b1e      	ldr	r3, [pc, #120]	; (800458c <Control_Function+0x404>)
 8004512:	ed93 6b06 	vldr	d6, [r3, #24]
 8004516:	eeb0 2b46 	vmov.f64	d2, d6
 800451a:	eeb0 1b47 	vmov.f64	d1, d7
 800451e:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8004522:	4921      	ldr	r1, [pc, #132]	; (80045a8 <Control_Function+0x420>)
 8004524:	4821      	ldr	r0, [pc, #132]	; (80045ac <Control_Function+0x424>)
 8004526:	f7fd f966 	bl	80017f6 <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 800452a:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <Control_Function+0x40c>)
 800452c:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004530:	eeb0 0b47 	vmov.f64	d0, d7
 8004534:	481e      	ldr	r0, [pc, #120]	; (80045b0 <Control_Function+0x428>)
 8004536:	f7fc fc8b 	bl	8000e50 <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <Control_Function+0x40c>)
 800453c:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8004540:	eeb0 0b47 	vmov.f64	d0, d7
 8004544:	481b      	ldr	r0, [pc, #108]	; (80045b4 <Control_Function+0x42c>)
 8004546:	f7fc fc83 	bl	8000e50 <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 800454a:	4b12      	ldr	r3, [pc, #72]	; (8004594 <Control_Function+0x40c>)
 800454c:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 8004550:	eeb0 0b47 	vmov.f64	d0, d7
 8004554:	4818      	ldr	r0, [pc, #96]	; (80045b8 <Control_Function+0x430>)
 8004556:	f7fc fc7b 	bl	8000e50 <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <Control_Function+0x40c>)
 800455c:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 8004560:	eeb0 0b47 	vmov.f64	d0, d7
 8004564:	4815      	ldr	r0, [pc, #84]	; (80045bc <Control_Function+0x434>)
 8004566:	f7fc fc73 	bl	8000e50 <Step_Driver>
}
 800456a:	bf00      	nop
 800456c:	37e0      	adds	r7, #224	; 0xe0
 800456e:	46bd      	mov	sp, r7
 8004570:	bdb0      	pop	{r4, r5, r7, pc}
 8004572:	bf00      	nop
 8004574:	f3af 8000 	nop.w
 8004578:	d2f1a9fc 	.word	0xd2f1a9fc
 800457c:	3f50624d 	.word	0x3f50624d
 8004580:	200009d0 	.word	0x200009d0
 8004584:	20000bb0 	.word	0x20000bb0
 8004588:	20000b60 	.word	0x20000b60
 800458c:	20000b88 	.word	0x20000b88
 8004590:	20000358 	.word	0x20000358
 8004594:	20000498 	.word	0x20000498
 8004598:	20000398 	.word	0x20000398
 800459c:	20000570 	.word	0x20000570
 80045a0:	200003d8 	.word	0x200003d8
 80045a4:	20000648 	.word	0x20000648
 80045a8:	20000418 	.word	0x20000418
 80045ac:	20000720 	.word	0x20000720
 80045b0:	200007f8 	.word	0x200007f8
 80045b4:	2000080c 	.word	0x2000080c
 80045b8:	20000820 	.word	0x20000820
 80045bc:	20000834 	.word	0x20000834

080045c0 <JMoveTaskSpace>:

inline void JMoveTaskSpace(double Task2Go[3], double Time2Move){
 80045c0:	b5b0      	push	{r4, r5, r7, lr}
 80045c2:	b094      	sub	sp, #80	; 0x50
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	ed87 0b00 	vstr	d0, [r7]
	double gamma[3] = { 1, 1, -1 };
 80045cc:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <JMoveTaskSpace+0xc8>)
 80045ce:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80045d2:	461d      	mov	r5, r3
 80045d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80045dc:	e884 0003 	stmia.w	r4, {r0, r1}
	double q_inv[4];
	IPK(gamma, Task2Go, q_inv);
 80045e0:	f107 0210 	add.w	r2, r7, #16
 80045e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045e8:	68f9      	ldr	r1, [r7, #12]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fbd8 	bl	8001da0 <IPK>
	t = 0;
 80045f0:	4926      	ldr	r1, [pc, #152]	; (800468c <JMoveTaskSpace+0xcc>)
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 4; i++) {
 80045fe:	2300      	movs	r3, #0
 8004600:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004602:	e02f      	b.n	8004664 <JMoveTaskSpace+0xa4>
		Traj_Coeff_Cal(&Traj[i], Time2Move, q_inv[i], Control[i].PositionFeedback, 0,
 8004604:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004606:	4613      	mov	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4a20      	ldr	r2, [pc, #128]	; (8004690 <JMoveTaskSpace+0xd0>)
 8004610:	441a      	add	r2, r3
 8004612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	3350      	adds	r3, #80	; 0x50
 8004618:	443b      	add	r3, r7
 800461a:	3b40      	subs	r3, #64	; 0x40
 800461c:	ed93 7b00 	vldr	d7, [r3]
 8004620:	491c      	ldr	r1, [pc, #112]	; (8004694 <JMoveTaskSpace+0xd4>)
 8004622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004624:	20d8      	movs	r0, #216	; 0xd8
 8004626:	fb00 f303 	mul.w	r3, r0, r3
 800462a:	440b      	add	r3, r1
 800462c:	3350      	adds	r3, #80	; 0x50
 800462e:	ed93 6b00 	vldr	d6, [r3]
 8004632:	4918      	ldr	r1, [pc, #96]	; (8004694 <JMoveTaskSpace+0xd4>)
 8004634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004636:	20d8      	movs	r0, #216	; 0xd8
 8004638:	fb00 f303 	mul.w	r3, r0, r3
 800463c:	440b      	add	r3, r1
 800463e:	33b8      	adds	r3, #184	; 0xb8
 8004640:	ed93 5b00 	vldr	d5, [r3]
 8004644:	eeb0 4b45 	vmov.f64	d4, d5
 8004648:	ed9f 3b0d 	vldr	d3, [pc, #52]	; 8004680 <JMoveTaskSpace+0xc0>
 800464c:	eeb0 2b46 	vmov.f64	d2, d6
 8004650:	eeb0 1b47 	vmov.f64	d1, d7
 8004654:	ed97 0b00 	vldr	d0, [r7]
 8004658:	4610      	mov	r0, r2
 800465a:	f7fc fcc7 	bl	8000fec <Traj_Coeff_Cal>
	for (int i = 0; i < 4; i++) {
 800465e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004660:	3301      	adds	r3, #1
 8004662:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004666:	2b03      	cmp	r3, #3
 8004668:	ddcc      	ble.n	8004604 <JMoveTaskSpace+0x44>
				Control[i].VelocityFeedback);
	}
	Traj_Flag = 0x0F;
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <JMoveTaskSpace+0xd8>)
 800466c:	220f      	movs	r2, #15
 800466e:	701a      	strb	r2, [r3, #0]
	Chessmove_State = 0;
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <JMoveTaskSpace+0xdc>)
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
}
 8004676:	bf00      	nop
 8004678:	3750      	adds	r7, #80	; 0x50
 800467a:	46bd      	mov	sp, r7
 800467c:	bdb0      	pop	{r4, r5, r7, pc}
 800467e:	bf00      	nop
	...
 8004688:	08016720 	.word	0x08016720
 800468c:	20000bb0 	.word	0x20000bb0
 8004690:	200009d0 	.word	0x200009d0
 8004694:	20000498 	.word	0x20000498
 8004698:	20000bb9 	.word	0x20000bb9
 800469c:	20000bbb 	.word	0x20000bbb

080046a0 <ChessNotMovePathWay>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 1; // Change to TaskSpace Traj
}

inline void ChessNotMovePathWay(uint8_t Index2Move, double Z_Offset, uint8_t IsJMove) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b0a0      	sub	sp, #128	; 0x80
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	4603      	mov	r3, r0
 80046a8:	ed87 0b00 	vstr	d0, [r7]
 80046ac:	460a      	mov	r2, r1
 80046ae:	73fb      	strb	r3, [r7, #15]
 80046b0:	4613      	mov	r3, r2
 80046b2:	73bb      	strb	r3, [r7, #14]
	double BaseEnc;
	double PositionXY[2];

	/***** Base Encoder Read *****/
//	BaseEnc = BaseENCRead();   //?????????????????????????????????????????????????????????
	BaseEnc = 0;
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	ChessPose(Index2Move, BaseEnc, PositionXY);
 80046c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	4611      	mov	r1, r2
 80046c8:	ed97 0b1e 	vldr	d0, [r7, #120]	; 0x78
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7fe f99b 	bl	8002a08 <ChessPose>
	double q_Feed[4];
	double Pne[3];
	q_Feed[0] = Control[0].PositionFeedback;
 80046d2:	4b3f      	ldr	r3, [pc, #252]	; (80047d0 <ChessNotMovePathWay+0x130>)
 80046d4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80046d8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	q_Feed[1] = Control[1].PositionFeedback;
 80046dc:	4b3c      	ldr	r3, [pc, #240]	; (80047d0 <ChessNotMovePathWay+0x130>)
 80046de:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 80046e2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	q_Feed[2] = Control[2].PositionFeedback;
 80046e6:	4b3a      	ldr	r3, [pc, #232]	; (80047d0 <ChessNotMovePathWay+0x130>)
 80046e8:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 80046ec:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	q_Feed[3] = Control[3].PositionFeedback;
 80046f0:	4b37      	ldr	r3, [pc, #220]	; (80047d0 <ChessNotMovePathWay+0x130>)
 80046f2:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 80046f6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58

	FPK(q_Feed, 269.0f, Pne);
 80046fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80046fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004702:	4611      	mov	r1, r2
 8004704:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 80047b8 <ChessNotMovePathWay+0x118>
 8004708:	4618      	mov	r0, r3
 800470a:	f7fd ff51 	bl	80025b0 <FPK>
	double Time2MoveDynamic = 1.3;
 800470e:	a32c      	add	r3, pc, #176	; (adr r3, 80047c0 <ChessNotMovePathWay+0x120>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	Time2MoveDynamic += (sqrt(
			((PositionXY[0] - Pne[0]) * (PositionXY[0] - Pne[0]))
 8004718:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800471c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004720:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004724:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 8004728:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800472c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004730:	ee26 6b07 	vmul.f64	d6, d6, d7
					+ ((PositionXY[1] - Pne[1]) * (PositionXY[1] - Pne[1])))) * 0.0075;
 8004734:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8004738:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800473c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004740:	ed97 4b1a 	vldr	d4, [r7, #104]	; 0x68
 8004744:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004748:	ee34 7b47 	vsub.f64	d7, d4, d7
 800474c:	ee25 7b07 	vmul.f64	d7, d5, d7
	Time2MoveDynamic += (sqrt(
 8004750:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004754:	eeb0 0b47 	vmov.f64	d0, d7
 8004758:	f011 f83a 	bl	80157d0 <sqrt>
 800475c:	eeb0 7b40 	vmov.f64	d7, d0
					+ ((PositionXY[1] - Pne[1]) * (PositionXY[1] - Pne[1])))) * 0.0075;
 8004760:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80047c8 <ChessNotMovePathWay+0x128>
 8004764:	ee27 7b06 	vmul.f64	d7, d7, d6
	Time2MoveDynamic += (sqrt(
 8004768:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800476c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004770:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70

	double TaskSpace2Go[3];
	TaskSpace2Go[0] = PositionXY[0];
 8004774:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004778:	e9c7 2304 	strd	r2, r3, [r7, #16]
	TaskSpace2Go[1] = PositionXY[1];
 800477c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004780:	e9c7 2306 	strd	r2, r3, [r7, #24]
	TaskSpace2Go[2] = Z_Offset;
 8004784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004788:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (IsJMove){
 800478c:	7bbb      	ldrb	r3, [r7, #14]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <ChessNotMovePathWay+0x102>
		JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004792:	f107 0310 	add.w	r3, r7, #16
 8004796:	ed97 0b1c 	vldr	d0, [r7, #112]	; 0x70
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff ff10 	bl	80045c0 <JMoveTaskSpace>
	}
	else{
		JMoveTaskSpace(TaskSpace2Go, 3);
	}
}
 80047a0:	e006      	b.n	80047b0 <ChessNotMovePathWay+0x110>
		JMoveTaskSpace(TaskSpace2Go, 3);
 80047a2:	f107 0310 	add.w	r3, r7, #16
 80047a6:	eeb0 0b08 	vmov.f64	d0, #8	; 0x40400000  3.0
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff ff08 	bl	80045c0 <JMoveTaskSpace>
}
 80047b0:	bf00      	nop
 80047b2:	3780      	adds	r7, #128	; 0x80
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	00000000 	.word	0x00000000
 80047bc:	4070d000 	.word	0x4070d000
 80047c0:	cccccccd 	.word	0xcccccccd
 80047c4:	3ff4cccc 	.word	0x3ff4cccc
 80047c8:	eb851eb8 	.word	0xeb851eb8
 80047cc:	3f7eb851 	.word	0x3f7eb851
 80047d0:	20000498 	.word	0x20000498
 80047d4:	00000000 	.word	0x00000000

080047d8 <ChessMoveStateMachine>:

void ChessMoveStateMachine() {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
	static uint8_t ChangeState = 0;
	double Speed_Error = 0.05;
 80047de:	a3a9      	add	r3, pc, #676	; (adr r3, 8004a84 <ChessMoveStateMachine+0x2ac>)
 80047e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e4:	e9c7 2300 	strd	r2, r3, [r7]
	switch (ChessMoveStates) {
 80047e8:	4b9f      	ldr	r3, [pc, #636]	; (8004a68 <ChessMoveStateMachine+0x290>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b09      	cmp	r3, #9
 80047ee:	f200 8128 	bhi.w	8004a42 <ChessMoveStateMachine+0x26a>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <ChessMoveStateMachine+0x20>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	08004821 	.word	0x08004821
 80047fc:	08004833 	.word	0x08004833
 8004800:	08004887 	.word	0x08004887
 8004804:	080048db 	.word	0x080048db
 8004808:	080048e3 	.word	0x080048e3
 800480c:	08004937 	.word	0x08004937
 8004810:	08004989 	.word	0x08004989
 8004814:	080049db 	.word	0x080049db
 8004818:	080049e3 	.word	0x080049e3
 800481c:	08004a35 	.word	0x08004a35
	case Chess_idle:
		if (Chess_Move_Start_Flag) {
 8004820:	4b92      	ldr	r3, [pc, #584]	; (8004a6c <ChessMoveStateMachine+0x294>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 810e 	beq.w	8004a46 <ChessMoveStateMachine+0x26e>
			ChessMoveStates = Move_2_Start_Top_Point;
 800482a:	4b8f      	ldr	r3, [pc, #572]	; (8004a68 <ChessMoveStateMachine+0x290>)
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004830:	e109      	b.n	8004a46 <ChessMoveStateMachine+0x26e>
	case Move_2_Start_Top_Point:
		if (ChangeState) {
 8004832:	4b8f      	ldr	r3, [pc, #572]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00d      	beq.n	8004856 <ChessMoveStateMachine+0x7e>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 1);
 800483a:	4b8e      	ldr	r3, [pc, #568]	; (8004a74 <ChessMoveStateMachine+0x29c>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	4a8e      	ldr	r2, [pc, #568]	; (8004a78 <ChessMoveStateMachine+0x2a0>)
 8004840:	ed92 7b00 	vldr	d7, [r2]
 8004844:	2101      	movs	r1, #1
 8004846:	eeb0 0b47 	vmov.f64	d0, d7
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff ff28 	bl	80046a0 <ChessNotMovePathWay>
			ChangeState = 0;
 8004850:	4b87      	ldr	r3, [pc, #540]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004852:	2200      	movs	r2, #0
 8004854:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004856:	4b89      	ldr	r3, [pc, #548]	; (8004a7c <ChessMoveStateMachine+0x2a4>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 80f5 	bne.w	8004a4a <ChessMoveStateMachine+0x272>
			if(All_Joint_Speed_Avg() <= Speed_Error){
 8004860:	f000 f914 	bl	8004a8c <All_Joint_Speed_Avg>
 8004864:	eeb0 6b40 	vmov.f64	d6, d0
 8004868:	ed97 7b00 	vldr	d7, [r7]
 800486c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004874:	da00      	bge.n	8004878 <ChessMoveStateMachine+0xa0>
				ChessMoveStates = Move_2_Start_Grip_Point;
				ChangeState = 1;
			}
		}
		break;
 8004876:	e0e8      	b.n	8004a4a <ChessMoveStateMachine+0x272>
				ChessMoveStates = Move_2_Start_Grip_Point;
 8004878:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <ChessMoveStateMachine+0x290>)
 800487a:	2202      	movs	r2, #2
 800487c:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 800487e:	4b7c      	ldr	r3, [pc, #496]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004880:	2201      	movs	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
		break;
 8004884:	e0e1      	b.n	8004a4a <ChessMoveStateMachine+0x272>
	case Move_2_Start_Grip_Point:
		if (ChangeState) {
 8004886:	4b7a      	ldr	r3, [pc, #488]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00d      	beq.n	80048aa <ChessMoveStateMachine+0xd2>
			ChessNotMovePathWay(ChessIndex[0], Z_2GripOffset, 0);
 800488e:	4b79      	ldr	r3, [pc, #484]	; (8004a74 <ChessMoveStateMachine+0x29c>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	4a7b      	ldr	r2, [pc, #492]	; (8004a80 <ChessMoveStateMachine+0x2a8>)
 8004894:	ed92 7b00 	vldr	d7, [r2]
 8004898:	2100      	movs	r1, #0
 800489a:	eeb0 0b47 	vmov.f64	d0, d7
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fefe 	bl	80046a0 <ChessNotMovePathWay>
			ChangeState = 0;
 80048a4:	4b72      	ldr	r3, [pc, #456]	; (8004a70 <ChessMoveStateMachine+0x298>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80048aa:	4b74      	ldr	r3, [pc, #464]	; (8004a7c <ChessMoveStateMachine+0x2a4>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 80cd 	bne.w	8004a4e <ChessMoveStateMachine+0x276>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80048b4:	f000 f8ea 	bl	8004a8c <All_Joint_Speed_Avg>
 80048b8:	eeb0 6b40 	vmov.f64	d6, d0
 80048bc:	ed97 7b00 	vldr	d7, [r7]
 80048c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80048c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c8:	da00      	bge.n	80048cc <ChessMoveStateMachine+0xf4>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
				ChangeState = 1;
			}
		}
		break;
 80048ca:	e0c0      	b.n	8004a4e <ChessMoveStateMachine+0x276>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
 80048cc:	4b66      	ldr	r3, [pc, #408]	; (8004a68 <ChessMoveStateMachine+0x290>)
 80048ce:	2203      	movs	r2, #3
 80048d0:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 80048d2:	4b67      	ldr	r3, [pc, #412]	; (8004a70 <ChessMoveStateMachine+0x298>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	701a      	strb	r2, [r3, #0]
		break;
 80048d8:	e0b9      	b.n	8004a4e <ChessMoveStateMachine+0x276>
	case Move_2_Start_Point_and_Griping:
		// Grip Chess

		ChessMoveStates = Back_2_Start_Top_Point;
 80048da:	4b63      	ldr	r3, [pc, #396]	; (8004a68 <ChessMoveStateMachine+0x290>)
 80048dc:	2204      	movs	r2, #4
 80048de:	701a      	strb	r2, [r3, #0]
		break;
 80048e0:	e0be      	b.n	8004a60 <ChessMoveStateMachine+0x288>
	case Back_2_Start_Top_Point:
		if (ChangeState) {
 80048e2:	4b63      	ldr	r3, [pc, #396]	; (8004a70 <ChessMoveStateMachine+0x298>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00d      	beq.n	8004906 <ChessMoveStateMachine+0x12e>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 0);
 80048ea:	4b62      	ldr	r3, [pc, #392]	; (8004a74 <ChessMoveStateMachine+0x29c>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	4a62      	ldr	r2, [pc, #392]	; (8004a78 <ChessMoveStateMachine+0x2a0>)
 80048f0:	ed92 7b00 	vldr	d7, [r2]
 80048f4:	2100      	movs	r1, #0
 80048f6:	eeb0 0b47 	vmov.f64	d0, d7
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fed0 	bl	80046a0 <ChessNotMovePathWay>
			ChangeState = 0;
 8004900:	4b5b      	ldr	r3, [pc, #364]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004906:	4b5d      	ldr	r3, [pc, #372]	; (8004a7c <ChessMoveStateMachine+0x2a4>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 80a1 	bne.w	8004a52 <ChessMoveStateMachine+0x27a>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004910:	f000 f8bc 	bl	8004a8c <All_Joint_Speed_Avg>
 8004914:	eeb0 6b40 	vmov.f64	d6, d0
 8004918:	ed97 7b00 	vldr	d7, [r7]
 800491c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004924:	da00      	bge.n	8004928 <ChessMoveStateMachine+0x150>
				ChessMoveStates = Move_2_End_Top_Point;
				ChangeState = 1;
			}
		}
		break;
 8004926:	e094      	b.n	8004a52 <ChessMoveStateMachine+0x27a>
				ChessMoveStates = Move_2_End_Top_Point;
 8004928:	4b4f      	ldr	r3, [pc, #316]	; (8004a68 <ChessMoveStateMachine+0x290>)
 800492a:	2205      	movs	r2, #5
 800492c:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 800492e:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004930:	2201      	movs	r2, #1
 8004932:	701a      	strb	r2, [r3, #0]
		break;
 8004934:	e08d      	b.n	8004a52 <ChessMoveStateMachine+0x27a>

		// Finish To Grip Chess

	case Move_2_End_Top_Point:
		if (ChangeState) {
 8004936:	4b4e      	ldr	r3, [pc, #312]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00d      	beq.n	800495a <ChessMoveStateMachine+0x182>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 1);
 800493e:	4b4d      	ldr	r3, [pc, #308]	; (8004a74 <ChessMoveStateMachine+0x29c>)
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	4a4d      	ldr	r2, [pc, #308]	; (8004a78 <ChessMoveStateMachine+0x2a0>)
 8004944:	ed92 7b00 	vldr	d7, [r2]
 8004948:	2101      	movs	r1, #1
 800494a:	eeb0 0b47 	vmov.f64	d0, d7
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fea6 	bl	80046a0 <ChessNotMovePathWay>
			ChangeState = 0;
 8004954:	4b46      	ldr	r3, [pc, #280]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800495a:	4b48      	ldr	r3, [pc, #288]	; (8004a7c <ChessMoveStateMachine+0x2a4>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d179      	bne.n	8004a56 <ChessMoveStateMachine+0x27e>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004962:	f000 f893 	bl	8004a8c <All_Joint_Speed_Avg>
 8004966:	eeb0 6b40 	vmov.f64	d6, d0
 800496a:	ed97 7b00 	vldr	d7, [r7]
 800496e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004976:	da00      	bge.n	800497a <ChessMoveStateMachine+0x1a2>
				ChessMoveStates = Move_2_End_Ungrip_Point;
				ChangeState = 1;
			}
		}
		break;
 8004978:	e06d      	b.n	8004a56 <ChessMoveStateMachine+0x27e>
				ChessMoveStates = Move_2_End_Ungrip_Point;
 800497a:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <ChessMoveStateMachine+0x290>)
 800497c:	2206      	movs	r2, #6
 800497e:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8004980:	4b3b      	ldr	r3, [pc, #236]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004982:	2201      	movs	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
		break;
 8004986:	e066      	b.n	8004a56 <ChessMoveStateMachine+0x27e>
	case Move_2_End_Ungrip_Point:
		if (ChangeState) {
 8004988:	4b39      	ldr	r3, [pc, #228]	; (8004a70 <ChessMoveStateMachine+0x298>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00d      	beq.n	80049ac <ChessMoveStateMachine+0x1d4>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0);
 8004990:	4b38      	ldr	r3, [pc, #224]	; (8004a74 <ChessMoveStateMachine+0x29c>)
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	4a3a      	ldr	r2, [pc, #232]	; (8004a80 <ChessMoveStateMachine+0x2a8>)
 8004996:	ed92 7b00 	vldr	d7, [r2]
 800499a:	2100      	movs	r1, #0
 800499c:	eeb0 0b47 	vmov.f64	d0, d7
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fe7d 	bl	80046a0 <ChessNotMovePathWay>
			ChangeState = 0;
 80049a6:	4b32      	ldr	r3, [pc, #200]	; (8004a70 <ChessMoveStateMachine+0x298>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80049ac:	4b33      	ldr	r3, [pc, #204]	; (8004a7c <ChessMoveStateMachine+0x2a4>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d152      	bne.n	8004a5a <ChessMoveStateMachine+0x282>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80049b4:	f000 f86a 	bl	8004a8c <All_Joint_Speed_Avg>
 80049b8:	eeb0 6b40 	vmov.f64	d6, d0
 80049bc:	ed97 7b00 	vldr	d7, [r7]
 80049c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80049c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c8:	da00      	bge.n	80049cc <ChessMoveStateMachine+0x1f4>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
				ChangeState = 1;
			}
		}
		break;
 80049ca:	e046      	b.n	8004a5a <ChessMoveStateMachine+0x282>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
 80049cc:	4b26      	ldr	r3, [pc, #152]	; (8004a68 <ChessMoveStateMachine+0x290>)
 80049ce:	2207      	movs	r2, #7
 80049d0:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 80049d2:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <ChessMoveStateMachine+0x298>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
		break;
 80049d8:	e03f      	b.n	8004a5a <ChessMoveStateMachine+0x282>
	case Move_2_End_Point_and_Ungriping:
		// Grip Chess

		ChessMoveStates = Back_2_End_Top_Point;
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <ChessMoveStateMachine+0x290>)
 80049dc:	2208      	movs	r2, #8
 80049de:	701a      	strb	r2, [r3, #0]
		break;
 80049e0:	e03e      	b.n	8004a60 <ChessMoveStateMachine+0x288>
	case Back_2_End_Top_Point:
		if (ChangeState) {
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <ChessMoveStateMachine+0x298>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <ChessMoveStateMachine+0x22e>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 0);
 80049ea:	4b22      	ldr	r3, [pc, #136]	; (8004a74 <ChessMoveStateMachine+0x29c>)
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	4a22      	ldr	r2, [pc, #136]	; (8004a78 <ChessMoveStateMachine+0x2a0>)
 80049f0:	ed92 7b00 	vldr	d7, [r2]
 80049f4:	2100      	movs	r1, #0
 80049f6:	eeb0 0b47 	vmov.f64	d0, d7
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fe50 	bl	80046a0 <ChessNotMovePathWay>
			ChangeState = 0;
 8004a00:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004a06:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <ChessMoveStateMachine+0x2a4>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d127      	bne.n	8004a5e <ChessMoveStateMachine+0x286>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004a0e:	f000 f83d 	bl	8004a8c <All_Joint_Speed_Avg>
 8004a12:	eeb0 6b40 	vmov.f64	d6, d0
 8004a16:	ed97 7b00 	vldr	d7, [r7]
 8004a1a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a22:	da00      	bge.n	8004a26 <ChessMoveStateMachine+0x24e>
				ChessMoveStates = ChessMove_Finish;
				ChangeState = 1;
			}
		}
		break;
 8004a24:	e01b      	b.n	8004a5e <ChessMoveStateMachine+0x286>
				ChessMoveStates = ChessMove_Finish;
 8004a26:	4b10      	ldr	r3, [pc, #64]	; (8004a68 <ChessMoveStateMachine+0x290>)
 8004a28:	2209      	movs	r2, #9
 8004a2a:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8004a2c:	4b10      	ldr	r3, [pc, #64]	; (8004a70 <ChessMoveStateMachine+0x298>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	701a      	strb	r2, [r3, #0]
		break;
 8004a32:	e014      	b.n	8004a5e <ChessMoveStateMachine+0x286>
	case ChessMove_Finish:
		Chess_Move_Start_Flag = 0;
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <ChessMoveStateMachine+0x294>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
		ChessMoveStates = Chess_idle;
 8004a3a:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <ChessMoveStateMachine+0x290>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
		break;
 8004a40:	e00e      	b.n	8004a60 <ChessMoveStateMachine+0x288>
	default:
		break;
 8004a42:	bf00      	nop
 8004a44:	e00c      	b.n	8004a60 <ChessMoveStateMachine+0x288>
		break;
 8004a46:	bf00      	nop
 8004a48:	e00a      	b.n	8004a60 <ChessMoveStateMachine+0x288>
		break;
 8004a4a:	bf00      	nop
 8004a4c:	e008      	b.n	8004a60 <ChessMoveStateMachine+0x288>
		break;
 8004a4e:	bf00      	nop
 8004a50:	e006      	b.n	8004a60 <ChessMoveStateMachine+0x288>
		break;
 8004a52:	bf00      	nop
 8004a54:	e004      	b.n	8004a60 <ChessMoveStateMachine+0x288>
		break;
 8004a56:	bf00      	nop
 8004a58:	e002      	b.n	8004a60 <ChessMoveStateMachine+0x288>
		break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <ChessMoveStateMachine+0x288>
		break;
 8004a5e:	bf00      	nop
	}
}
 8004a60:	bf00      	nop
 8004a62:	3708      	adds	r7, #8
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000bc7 	.word	0x20000bc7
 8004a6c:	20000bc6 	.word	0x20000bc6
 8004a70:	20000c18 	.word	0x20000c18
 8004a74:	20000bc4 	.word	0x20000bc4
 8004a78:	20000000 	.word	0x20000000
 8004a7c:	20000bb9 	.word	0x20000bb9
 8004a80:	20000008 	.word	0x20000008
 8004a84:	9999999a 	.word	0x9999999a
 8004a88:	3fa99999 	.word	0x3fa99999

08004a8c <All_Joint_Speed_Avg>:

double All_Joint_Speed_Avg(){
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
	double Buf;
	for (int i=4;i<4;i++){
 8004a92:	2304      	movs	r3, #4
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	e013      	b.n	8004ac0 <All_Joint_Speed_Avg+0x34>
		Buf += fabs(Control[i].VelocityFeedback);
 8004a98:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <All_Joint_Speed_Avg+0x58>)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	21d8      	movs	r1, #216	; 0xd8
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	33b8      	adds	r3, #184	; 0xb8
 8004aa6:	ed93 7b00 	vldr	d7, [r3]
 8004aaa:	eeb0 7bc7 	vabs.f64	d7, d7
 8004aae:	ed97 6b02 	vldr	d6, [r7, #8]
 8004ab2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ab6:	ed87 7b02 	vstr	d7, [r7, #8]
	for (int i=4;i<4;i++){
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3301      	adds	r3, #1
 8004abe:	607b      	str	r3, [r7, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	dde8      	ble.n	8004a98 <All_Joint_Speed_Avg+0xc>
	}
	return Buf/4.0f;
 8004ac6:	ed97 7b02 	vldr	d7, [r7, #8]
 8004aca:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004ace:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004ad2:	eeb0 7b45 	vmov.f64	d7, d5
}
 8004ad6:	eeb0 0b47 	vmov.f64	d0, d7
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr
 8004ae4:	20000498 	.word	0x20000498

08004ae8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004aec:	b672      	cpsid	i
}
 8004aee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004af0:	e7fe      	b.n	8004af0 <Error_Handler+0x8>
	...

08004af4 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004afa:	4a29      	ldr	r2, [pc, #164]	; (8004ba0 <MX_SPI3_Init+0xac>)
 8004afc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004afe:	4b27      	ldr	r3, [pc, #156]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004b04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004b06:	4b25      	ldr	r3, [pc, #148]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b0c:	4b23      	ldr	r3, [pc, #140]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b0e:	2207      	movs	r2, #7
 8004b10:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b12:	4b22      	ldr	r3, [pc, #136]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004b18:	4b20      	ldr	r3, [pc, #128]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004b20:	4b1e      	ldr	r3, [pc, #120]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b22:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004b26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004b28:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b2a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8004b2e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b30:	4b1a      	ldr	r3, [pc, #104]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b36:	4b19      	ldr	r3, [pc, #100]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b3c:	4b17      	ldr	r3, [pc, #92]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8004b42:	4b16      	ldr	r3, [pc, #88]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b44:	221d      	movs	r2, #29
 8004b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b48:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b4e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004b50:	4b12      	ldr	r3, [pc, #72]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004b56:	4b11      	ldr	r3, [pc, #68]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b5c:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004b62:	4b0e      	ldr	r3, [pc, #56]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004b68:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004b6e:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004b74:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004b80:	4b06      	ldr	r3, [pc, #24]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004b86:	4805      	ldr	r0, [pc, #20]	; (8004b9c <MX_SPI3_Init+0xa8>)
 8004b88:	f00b faba 	bl	8010100 <HAL_SPI_Init>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8004b92:	f7ff ffa9 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004b96:	bf00      	nop
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	20000c1c 	.word	0x20000c1c
 8004ba0:	40003c00 	.word	0x40003c00

08004ba4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8004ba8:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004baa:	4a28      	ldr	r2, [pc, #160]	; (8004c4c <MX_SPI4_Init+0xa8>)
 8004bac:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8004bae:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004bb4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8004bbc:	4b22      	ldr	r3, [pc, #136]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bbe:	220f      	movs	r2, #15
 8004bc0:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bc2:	4b21      	ldr	r3, [pc, #132]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bc8:	4b1f      	ldr	r3, [pc, #124]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8004bce:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004bd4:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004bd6:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004bdc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bde:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8004be4:	4b18      	ldr	r3, [pc, #96]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bea:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8004bf0:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004bf6:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bfc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004bfe:	4b12      	ldr	r3, [pc, #72]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c0a:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c10:	4b0d      	ldr	r3, [pc, #52]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004c16:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004c22:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004c28:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c30:	2200      	movs	r2, #0
 8004c32:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8004c34:	4804      	ldr	r0, [pc, #16]	; (8004c48 <MX_SPI4_Init+0xa4>)
 8004c36:	f00b fa63 	bl	8010100 <HAL_SPI_Init>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8004c40:	f7ff ff52 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8004c44:	bf00      	nop
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20000ca4 	.word	0x20000ca4
 8004c4c:	40013400 	.word	0x40013400

08004c50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b0b8      	sub	sp, #224	; 0xe0
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	60da      	str	r2, [r3, #12]
 8004c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c68:	f107 0318 	add.w	r3, r7, #24
 8004c6c:	22b4      	movs	r2, #180	; 0xb4
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f010 fd07 	bl	8015684 <memset>
  if(spiHandle->Instance==SPI3)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a4b      	ldr	r2, [pc, #300]	; (8004da8 <HAL_SPI_MspInit+0x158>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d156      	bne.n	8004d2e <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c84:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8004c86:	2319      	movs	r3, #25
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 8004c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c8e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8004c90:	2302      	movs	r3, #2
 8004c92:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8004c94:	2302      	movs	r3, #2
 8004c96:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8004c98:	2302      	movs	r3, #2
 8004c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8004ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ca4:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8004caa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cae:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004cb0:	f107 0318 	add.w	r3, r7, #24
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f009 f98f 	bl	800dfd8 <HAL_RCCEx_PeriphCLKConfig>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d001      	beq.n	8004cc4 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8004cc0:	f7ff ff12 	bl	8004ae8 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004cc4:	4b39      	ldr	r3, [pc, #228]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cca:	4a38      	ldr	r2, [pc, #224]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004cd4:	4b35      	ldr	r3, [pc, #212]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ce2:	4b32      	ldr	r3, [pc, #200]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ce8:	4a30      	ldr	r2, [pc, #192]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004cea:	f043 0304 	orr.w	r3, r3, #4
 8004cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cf2:	4b2e      	ldr	r3, [pc, #184]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004d00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004d04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d14:	2300      	movs	r3, #0
 8004d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004d1a:	2306      	movs	r3, #6
 8004d1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d24:	4619      	mov	r1, r3
 8004d26:	4822      	ldr	r0, [pc, #136]	; (8004db0 <HAL_SPI_MspInit+0x160>)
 8004d28:	f006 fc34 	bl	800b594 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8004d2c:	e038      	b.n	8004da0 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a20      	ldr	r2, [pc, #128]	; (8004db4 <HAL_SPI_MspInit+0x164>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d133      	bne.n	8004da0 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8004d38:	4b1c      	ldr	r3, [pc, #112]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d3e:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d48:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d52:	60fb      	str	r3, [r7, #12]
 8004d54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d5c:	4a13      	ldr	r2, [pc, #76]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004d5e:	f043 0310 	orr.w	r3, r3, #16
 8004d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_SPI_MspInit+0x15c>)
 8004d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8004d74:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8004d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004d8e:	2305      	movs	r3, #5
 8004d90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4807      	ldr	r0, [pc, #28]	; (8004db8 <HAL_SPI_MspInit+0x168>)
 8004d9c:	f006 fbfa 	bl	800b594 <HAL_GPIO_Init>
}
 8004da0:	bf00      	nop
 8004da2:	37e0      	adds	r7, #224	; 0xe0
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40003c00 	.word	0x40003c00
 8004dac:	58024400 	.word	0x58024400
 8004db0:	58020800 	.word	0x58020800
 8004db4:	40013400 	.word	0x40013400
 8004db8:	58021000 	.word	0x58021000

08004dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <HAL_MspInit+0x30>)
 8004dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dc8:	4a08      	ldr	r2, [pc, #32]	; (8004dec <HAL_MspInit+0x30>)
 8004dca:	f043 0302 	orr.w	r3, r3, #2
 8004dce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004dd2:	4b06      	ldr	r3, [pc, #24]	; (8004dec <HAL_MspInit+0x30>)
 8004dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004de0:	bf00      	nop
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	58024400 	.word	0x58024400

08004df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004df4:	e7fe      	b.n	8004df4 <NMI_Handler+0x4>

08004df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004df6:	b480      	push	{r7}
 8004df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dfa:	e7fe      	b.n	8004dfa <HardFault_Handler+0x4>

08004dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e00:	e7fe      	b.n	8004e00 <MemManage_Handler+0x4>

08004e02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e06:	e7fe      	b.n	8004e06 <BusFault_Handler+0x4>

08004e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e0c:	e7fe      	b.n	8004e0c <UsageFault_Handler+0x4>

08004e0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e2e:	bf00      	nop
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e3c:	f001 fcd8 	bl	80067f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e40:	bf00      	nop
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004e48:	4802      	ldr	r0, [pc, #8]	; (8004e54 <DMA1_Stream0_IRQHandler+0x10>)
 8004e4a:	f005 fa2f 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2000137c 	.word	0x2000137c

08004e58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004e5c:	4802      	ldr	r0, [pc, #8]	; (8004e68 <DMA1_Stream1_IRQHandler+0x10>)
 8004e5e:	f005 fa25 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200013f4 	.word	0x200013f4

08004e6c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8004e70:	4802      	ldr	r0, [pc, #8]	; (8004e7c <DMA1_Stream2_IRQHandler+0x10>)
 8004e72:	f005 fa1b 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004e76:	bf00      	nop
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20001154 	.word	0x20001154

08004e80 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004e84:	4802      	ldr	r0, [pc, #8]	; (8004e90 <I2C2_ER_IRQHandler+0x10>)
 8004e86:	f006 ffdb 	bl	800be40 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	2000025c 	.word	0x2000025c

08004e94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004e98:	4802      	ldr	r0, [pc, #8]	; (8004ea4 <USART3_IRQHandler+0x10>)
 8004e9a:	f00d fef7 	bl	8012c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200012ec 	.word	0x200012ec

08004ea8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004eac:	4802      	ldr	r0, [pc, #8]	; (8004eb8 <UART5_IRQHandler+0x10>)
 8004eae:	f00d feed 	bl	8012c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8004eb2:	bf00      	nop
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200011cc 	.word	0x200011cc

08004ebc <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8004ec0:	4802      	ldr	r0, [pc, #8]	; (8004ecc <ADC3_IRQHandler+0x10>)
 8004ec2:	f002 fb05 	bl	80074d0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8004ec6:	bf00      	nop
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	200001c4 	.word	0x200001c4

08004ed0 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8004ed4:	4802      	ldr	r0, [pc, #8]	; (8004ee0 <TIM23_IRQHandler+0x10>)
 8004ed6:	f00c fca7 	bl	8011828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8004eda:	bf00      	nop
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200010bc 	.word	0x200010bc

08004ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004ee8:	4b34      	ldr	r3, [pc, #208]	; (8004fbc <SystemInit+0xd8>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	4a33      	ldr	r2, [pc, #204]	; (8004fbc <SystemInit+0xd8>)
 8004ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004ef8:	4b31      	ldr	r3, [pc, #196]	; (8004fc0 <SystemInit+0xdc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	2b06      	cmp	r3, #6
 8004f02:	d807      	bhi.n	8004f14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004f04:	4b2e      	ldr	r3, [pc, #184]	; (8004fc0 <SystemInit+0xdc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f023 030f 	bic.w	r3, r3, #15
 8004f0c:	4a2c      	ldr	r2, [pc, #176]	; (8004fc0 <SystemInit+0xdc>)
 8004f0e:	f043 0307 	orr.w	r3, r3, #7
 8004f12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004f14:	4b2b      	ldr	r3, [pc, #172]	; (8004fc4 <SystemInit+0xe0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2a      	ldr	r2, [pc, #168]	; (8004fc4 <SystemInit+0xe0>)
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004f20:	4b28      	ldr	r3, [pc, #160]	; (8004fc4 <SystemInit+0xe0>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004f26:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <SystemInit+0xe0>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4926      	ldr	r1, [pc, #152]	; (8004fc4 <SystemInit+0xe0>)
 8004f2c:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <SystemInit+0xe4>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004f32:	4b23      	ldr	r3, [pc, #140]	; (8004fc0 <SystemInit+0xdc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004f3e:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <SystemInit+0xdc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f023 030f 	bic.w	r3, r3, #15
 8004f46:	4a1e      	ldr	r2, [pc, #120]	; (8004fc0 <SystemInit+0xdc>)
 8004f48:	f043 0307 	orr.w	r3, r3, #7
 8004f4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004f4e:	4b1d      	ldr	r3, [pc, #116]	; (8004fc4 <SystemInit+0xe0>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004f54:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <SystemInit+0xe0>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <SystemInit+0xe0>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004f60:	4b18      	ldr	r3, [pc, #96]	; (8004fc4 <SystemInit+0xe0>)
 8004f62:	4a1a      	ldr	r2, [pc, #104]	; (8004fcc <SystemInit+0xe8>)
 8004f64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004f66:	4b17      	ldr	r3, [pc, #92]	; (8004fc4 <SystemInit+0xe0>)
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <SystemInit+0xec>)
 8004f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004f6c:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <SystemInit+0xe0>)
 8004f6e:	4a19      	ldr	r2, [pc, #100]	; (8004fd4 <SystemInit+0xf0>)
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004f72:	4b14      	ldr	r3, [pc, #80]	; (8004fc4 <SystemInit+0xe0>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004f78:	4b12      	ldr	r3, [pc, #72]	; (8004fc4 <SystemInit+0xe0>)
 8004f7a:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <SystemInit+0xf0>)
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <SystemInit+0xe0>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004f84:	4b0f      	ldr	r3, [pc, #60]	; (8004fc4 <SystemInit+0xe0>)
 8004f86:	4a13      	ldr	r2, [pc, #76]	; (8004fd4 <SystemInit+0xf0>)
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	; (8004fc4 <SystemInit+0xe0>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <SystemInit+0xe0>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0b      	ldr	r2, [pc, #44]	; (8004fc4 <SystemInit+0xe0>)
 8004f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f9c:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <SystemInit+0xe0>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <SystemInit+0xf4>)
 8004fa4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004faa:	4b04      	ldr	r3, [pc, #16]	; (8004fbc <SystemInit+0xd8>)
 8004fac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fb0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	e000ed00 	.word	0xe000ed00
 8004fc0:	52002000 	.word	0x52002000
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	eaf6ed7f 	.word	0xeaf6ed7f
 8004fcc:	02020200 	.word	0x02020200
 8004fd0:	01ff0000 	.word	0x01ff0000
 8004fd4:	01010280 	.word	0x01010280
 8004fd8:	52004000 	.word	0x52004000

08004fdc <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b098      	sub	sp, #96	; 0x60
 8004fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fe2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	605a      	str	r2, [r3, #4]
 8004fec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
 8004ffa:	60da      	str	r2, [r3, #12]
 8004ffc:	611a      	str	r2, [r3, #16]
 8004ffe:	615a      	str	r2, [r3, #20]
 8005000:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005002:	1d3b      	adds	r3, r7, #4
 8005004:	2234      	movs	r2, #52	; 0x34
 8005006:	2100      	movs	r1, #0
 8005008:	4618      	mov	r0, r3
 800500a:	f010 fb3b 	bl	8015684 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800500e:	4b39      	ldr	r3, [pc, #228]	; (80050f4 <MX_TIM1_Init+0x118>)
 8005010:	4a39      	ldr	r2, [pc, #228]	; (80050f8 <MX_TIM1_Init+0x11c>)
 8005012:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005014:	4b37      	ldr	r3, [pc, #220]	; (80050f4 <MX_TIM1_Init+0x118>)
 8005016:	2200      	movs	r2, #0
 8005018:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501a:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <MX_TIM1_Init+0x118>)
 800501c:	2200      	movs	r2, #0
 800501e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 8005020:	4b34      	ldr	r3, [pc, #208]	; (80050f4 <MX_TIM1_Init+0x118>)
 8005022:	f240 1257 	movw	r2, #343	; 0x157
 8005026:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005028:	4b32      	ldr	r3, [pc, #200]	; (80050f4 <MX_TIM1_Init+0x118>)
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800502e:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <MX_TIM1_Init+0x118>)
 8005030:	2200      	movs	r2, #0
 8005032:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005034:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <MX_TIM1_Init+0x118>)
 8005036:	2280      	movs	r2, #128	; 0x80
 8005038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800503a:	482e      	ldr	r0, [pc, #184]	; (80050f4 <MX_TIM1_Init+0x118>)
 800503c:	f00c f8e2 	bl	8011204 <HAL_TIM_PWM_Init>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8005046:	f7ff fd4f 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800504a:	2300      	movs	r3, #0
 800504c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800504e:	2300      	movs	r3, #0
 8005050:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005052:	2300      	movs	r3, #0
 8005054:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005056:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800505a:	4619      	mov	r1, r3
 800505c:	4825      	ldr	r0, [pc, #148]	; (80050f4 <MX_TIM1_Init+0x118>)
 800505e:	f00d fb6d 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005068:	f7ff fd3e 	bl	8004ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800506c:	2360      	movs	r3, #96	; 0x60
 800506e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005070:	2300      	movs	r3, #0
 8005072:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005074:	2300      	movs	r3, #0
 8005076:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005078:	2300      	movs	r3, #0
 800507a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800507c:	2304      	movs	r3, #4
 800507e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005080:	2300      	movs	r3, #0
 8005082:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005084:	2300      	movs	r3, #0
 8005086:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005088:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800508c:	2200      	movs	r2, #0
 800508e:	4619      	mov	r1, r3
 8005090:	4818      	ldr	r0, [pc, #96]	; (80050f4 <MX_TIM1_Init+0x118>)
 8005092:	f00c fce9 	bl	8011a68 <HAL_TIM_PWM_ConfigChannel>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800509c:	f7ff fd24 	bl	8004ae8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80050ac:	2300      	movs	r3, #0
 80050ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80050b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80050be:	2300      	movs	r3, #0
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80050c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80050d0:	1d3b      	adds	r3, r7, #4
 80050d2:	4619      	mov	r1, r3
 80050d4:	4807      	ldr	r0, [pc, #28]	; (80050f4 <MX_TIM1_Init+0x118>)
 80050d6:	f00d fbcd 	bl	8012874 <HAL_TIMEx_ConfigBreakDeadTime>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d001      	beq.n	80050e4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80050e0:	f7ff fd02 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80050e4:	4803      	ldr	r0, [pc, #12]	; (80050f4 <MX_TIM1_Init+0x118>)
 80050e6:	f000 ff79 	bl	8005fdc <HAL_TIM_MspPostInit>

}
 80050ea:	bf00      	nop
 80050ec:	3760      	adds	r7, #96	; 0x60
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000d2c 	.word	0x20000d2c
 80050f8:	40010000 	.word	0x40010000

080050fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	; 0x30
 8005100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005102:	f107 030c 	add.w	r3, r7, #12
 8005106:	2224      	movs	r2, #36	; 0x24
 8005108:	2100      	movs	r1, #0
 800510a:	4618      	mov	r0, r3
 800510c:	f010 faba 	bl	8015684 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005110:	463b      	mov	r3, r7
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	605a      	str	r2, [r3, #4]
 8005118:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800511a:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <MX_TIM2_Init+0xa4>)
 800511c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005120:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005122:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <MX_TIM2_Init+0xa4>)
 8005124:	2200      	movs	r2, #0
 8005126:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005128:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <MX_TIM2_Init+0xa4>)
 800512a:	2200      	movs	r2, #0
 800512c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800512e:	4b1c      	ldr	r3, [pc, #112]	; (80051a0 <MX_TIM2_Init+0xa4>)
 8005130:	f04f 32ff 	mov.w	r2, #4294967295
 8005134:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005136:	4b1a      	ldr	r3, [pc, #104]	; (80051a0 <MX_TIM2_Init+0xa4>)
 8005138:	2200      	movs	r2, #0
 800513a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800513c:	4b18      	ldr	r3, [pc, #96]	; (80051a0 <MX_TIM2_Init+0xa4>)
 800513e:	2200      	movs	r2, #0
 8005140:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005142:	2301      	movs	r3, #1
 8005144:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800514a:	2301      	movs	r3, #1
 800514c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005156:	2300      	movs	r3, #0
 8005158:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800515a:	2301      	movs	r3, #1
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800515e:	2300      	movs	r3, #0
 8005160:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005162:	2300      	movs	r3, #0
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005166:	f107 030c 	add.w	r3, r7, #12
 800516a:	4619      	mov	r1, r3
 800516c:	480c      	ldr	r0, [pc, #48]	; (80051a0 <MX_TIM2_Init+0xa4>)
 800516e:	f00c fab5 	bl	80116dc <HAL_TIM_Encoder_Init>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005178:	f7ff fcb6 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800517c:	2300      	movs	r3, #0
 800517e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005180:	2300      	movs	r3, #0
 8005182:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005184:	463b      	mov	r3, r7
 8005186:	4619      	mov	r1, r3
 8005188:	4805      	ldr	r0, [pc, #20]	; (80051a0 <MX_TIM2_Init+0xa4>)
 800518a:	f00d fad7 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005194:	f7ff fca8 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005198:	bf00      	nop
 800519a:	3730      	adds	r7, #48	; 0x30
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000d78 	.word	0x20000d78

080051a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08e      	sub	sp, #56	; 0x38
 80051a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80051aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051b8:	f107 031c 	add.w	r3, r7, #28
 80051bc:	2200      	movs	r2, #0
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	605a      	str	r2, [r3, #4]
 80051c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051c4:	463b      	mov	r3, r7
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	605a      	str	r2, [r3, #4]
 80051cc:	609a      	str	r2, [r3, #8]
 80051ce:	60da      	str	r2, [r3, #12]
 80051d0:	611a      	str	r2, [r3, #16]
 80051d2:	615a      	str	r2, [r3, #20]
 80051d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80051d6:	4b2d      	ldr	r3, [pc, #180]	; (800528c <MX_TIM3_Init+0xe8>)
 80051d8:	4a2d      	ldr	r2, [pc, #180]	; (8005290 <MX_TIM3_Init+0xec>)
 80051da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80051dc:	4b2b      	ldr	r3, [pc, #172]	; (800528c <MX_TIM3_Init+0xe8>)
 80051de:	2200      	movs	r2, #0
 80051e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051e2:	4b2a      	ldr	r3, [pc, #168]	; (800528c <MX_TIM3_Init+0xe8>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80051e8:	4b28      	ldr	r3, [pc, #160]	; (800528c <MX_TIM3_Init+0xe8>)
 80051ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051f0:	4b26      	ldr	r3, [pc, #152]	; (800528c <MX_TIM3_Init+0xe8>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80051f6:	4b25      	ldr	r3, [pc, #148]	; (800528c <MX_TIM3_Init+0xe8>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80051fc:	4823      	ldr	r0, [pc, #140]	; (800528c <MX_TIM3_Init+0xe8>)
 80051fe:	f00b ff24 	bl	801104a <HAL_TIM_Base_Init>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005208:	f7ff fc6e 	bl	8004ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800520c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005210:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005216:	4619      	mov	r1, r3
 8005218:	481c      	ldr	r0, [pc, #112]	; (800528c <MX_TIM3_Init+0xe8>)
 800521a:	f00c fd39 	bl	8011c90 <HAL_TIM_ConfigClockSource>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8005224:	f7ff fc60 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005228:	4818      	ldr	r0, [pc, #96]	; (800528c <MX_TIM3_Init+0xe8>)
 800522a:	f00b ffeb 	bl	8011204 <HAL_TIM_PWM_Init>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005234:	f7ff fc58 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800523c:	2300      	movs	r3, #0
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005240:	f107 031c 	add.w	r3, r7, #28
 8005244:	4619      	mov	r1, r3
 8005246:	4811      	ldr	r0, [pc, #68]	; (800528c <MX_TIM3_Init+0xe8>)
 8005248:	f00d fa78 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005252:	f7ff fc49 	bl	8004ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005256:	2360      	movs	r3, #96	; 0x60
 8005258:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800525a:	2300      	movs	r3, #0
 800525c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800525e:	2300      	movs	r3, #0
 8005260:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005262:	2300      	movs	r3, #0
 8005264:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005266:	463b      	mov	r3, r7
 8005268:	2200      	movs	r2, #0
 800526a:	4619      	mov	r1, r3
 800526c:	4807      	ldr	r0, [pc, #28]	; (800528c <MX_TIM3_Init+0xe8>)
 800526e:	f00c fbfb 	bl	8011a68 <HAL_TIM_PWM_ConfigChannel>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8005278:	f7ff fc36 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800527c:	4803      	ldr	r0, [pc, #12]	; (800528c <MX_TIM3_Init+0xe8>)
 800527e:	f000 fead 	bl	8005fdc <HAL_TIM_MspPostInit>

}
 8005282:	bf00      	nop
 8005284:	3738      	adds	r7, #56	; 0x38
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000dc4 	.word	0x20000dc4
 8005290:	40000400 	.word	0x40000400

08005294 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08c      	sub	sp, #48	; 0x30
 8005298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800529a:	f107 030c 	add.w	r3, r7, #12
 800529e:	2224      	movs	r2, #36	; 0x24
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f010 f9ee 	bl	8015684 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052a8:	463b      	mov	r3, r7
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	605a      	str	r2, [r3, #4]
 80052b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80052b2:	4b21      	ldr	r3, [pc, #132]	; (8005338 <MX_TIM4_Init+0xa4>)
 80052b4:	4a21      	ldr	r2, [pc, #132]	; (800533c <MX_TIM4_Init+0xa8>)
 80052b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80052b8:	4b1f      	ldr	r3, [pc, #124]	; (8005338 <MX_TIM4_Init+0xa4>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052be:	4b1e      	ldr	r3, [pc, #120]	; (8005338 <MX_TIM4_Init+0xa4>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 80052c4:	4b1c      	ldr	r3, [pc, #112]	; (8005338 <MX_TIM4_Init+0xa4>)
 80052c6:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80052ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052cc:	4b1a      	ldr	r3, [pc, #104]	; (8005338 <MX_TIM4_Init+0xa4>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052d2:	4b19      	ldr	r3, [pc, #100]	; (8005338 <MX_TIM4_Init+0xa4>)
 80052d4:	2280      	movs	r2, #128	; 0x80
 80052d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80052d8:	2303      	movs	r3, #3
 80052da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80052e0:	2301      	movs	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80052ec:	2300      	movs	r3, #0
 80052ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80052f0:	2301      	movs	r3, #1
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80052f4:	2300      	movs	r3, #0
 80052f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80052fc:	f107 030c 	add.w	r3, r7, #12
 8005300:	4619      	mov	r1, r3
 8005302:	480d      	ldr	r0, [pc, #52]	; (8005338 <MX_TIM4_Init+0xa4>)
 8005304:	f00c f9ea 	bl	80116dc <HAL_TIM_Encoder_Init>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800530e:	f7ff fbeb 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005312:	2300      	movs	r3, #0
 8005314:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800531a:	463b      	mov	r3, r7
 800531c:	4619      	mov	r1, r3
 800531e:	4806      	ldr	r0, [pc, #24]	; (8005338 <MX_TIM4_Init+0xa4>)
 8005320:	f00d fa0c 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800532a:	f7ff fbdd 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800532e:	bf00      	nop
 8005330:	3730      	adds	r7, #48	; 0x30
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000e10 	.word	0x20000e10
 800533c:	40000800 	.word	0x40000800

08005340 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08e      	sub	sp, #56	; 0x38
 8005344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	605a      	str	r2, [r3, #4]
 8005350:	609a      	str	r2, [r3, #8]
 8005352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005354:	f107 031c 	add.w	r3, r7, #28
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005360:	463b      	mov	r3, r7
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	605a      	str	r2, [r3, #4]
 8005368:	609a      	str	r2, [r3, #8]
 800536a:	60da      	str	r2, [r3, #12]
 800536c:	611a      	str	r2, [r3, #16]
 800536e:	615a      	str	r2, [r3, #20]
 8005370:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005372:	4b33      	ldr	r3, [pc, #204]	; (8005440 <MX_TIM5_Init+0x100>)
 8005374:	4a33      	ldr	r2, [pc, #204]	; (8005444 <MX_TIM5_Init+0x104>)
 8005376:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8005378:	4b31      	ldr	r3, [pc, #196]	; (8005440 <MX_TIM5_Init+0x100>)
 800537a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800537e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005380:	4b2f      	ldr	r3, [pc, #188]	; (8005440 <MX_TIM5_Init+0x100>)
 8005382:	2200      	movs	r2, #0
 8005384:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8005386:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <MX_TIM5_Init+0x100>)
 8005388:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800538c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800538e:	4b2c      	ldr	r3, [pc, #176]	; (8005440 <MX_TIM5_Init+0x100>)
 8005390:	2200      	movs	r2, #0
 8005392:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005394:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <MX_TIM5_Init+0x100>)
 8005396:	2200      	movs	r2, #0
 8005398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800539a:	4829      	ldr	r0, [pc, #164]	; (8005440 <MX_TIM5_Init+0x100>)
 800539c:	f00b fe55 	bl	801104a <HAL_TIM_Base_Init>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 80053a6:	f7ff fb9f 	bl	8004ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80053b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b4:	4619      	mov	r1, r3
 80053b6:	4822      	ldr	r0, [pc, #136]	; (8005440 <MX_TIM5_Init+0x100>)
 80053b8:	f00c fc6a 	bl	8011c90 <HAL_TIM_ConfigClockSource>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 80053c2:	f7ff fb91 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80053c6:	481e      	ldr	r0, [pc, #120]	; (8005440 <MX_TIM5_Init+0x100>)
 80053c8:	f00b ff1c 	bl	8011204 <HAL_TIM_PWM_Init>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80053d2:	f7ff fb89 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053da:	2300      	movs	r3, #0
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80053de:	f107 031c 	add.w	r3, r7, #28
 80053e2:	4619      	mov	r1, r3
 80053e4:	4816      	ldr	r0, [pc, #88]	; (8005440 <MX_TIM5_Init+0x100>)
 80053e6:	f00d f9a9 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80053f0:	f7ff fb7a 	bl	8004ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053f4:	2360      	movs	r3, #96	; 0x60
 80053f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 80053f8:	f240 53db 	movw	r3, #1499	; 0x5db
 80053fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053fe:	2300      	movs	r3, #0
 8005400:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005402:	2300      	movs	r3, #0
 8005404:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005406:	463b      	mov	r3, r7
 8005408:	2200      	movs	r2, #0
 800540a:	4619      	mov	r1, r3
 800540c:	480c      	ldr	r0, [pc, #48]	; (8005440 <MX_TIM5_Init+0x100>)
 800540e:	f00c fb2b 	bl	8011a68 <HAL_TIM_PWM_ConfigChannel>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8005418:	f7ff fb66 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800541c:	463b      	mov	r3, r7
 800541e:	2204      	movs	r2, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4807      	ldr	r0, [pc, #28]	; (8005440 <MX_TIM5_Init+0x100>)
 8005424:	f00c fb20 	bl	8011a68 <HAL_TIM_PWM_ConfigChannel>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 800542e:	f7ff fb5b 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005432:	4803      	ldr	r0, [pc, #12]	; (8005440 <MX_TIM5_Init+0x100>)
 8005434:	f000 fdd2 	bl	8005fdc <HAL_TIM_MspPostInit>

}
 8005438:	bf00      	nop
 800543a:	3738      	adds	r7, #56	; 0x38
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20000e5c 	.word	0x20000e5c
 8005444:	40000c00 	.word	0x40000c00

08005448 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800544e:	1d3b      	adds	r3, r7, #4
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005458:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <MX_TIM6_Init+0x68>)
 800545a:	4a16      	ldr	r2, [pc, #88]	; (80054b4 <MX_TIM6_Init+0x6c>)
 800545c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <MX_TIM6_Init+0x68>)
 8005460:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005464:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <MX_TIM6_Init+0x68>)
 8005468:	2200      	movs	r2, #0
 800546a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800546c:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <MX_TIM6_Init+0x68>)
 800546e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005472:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005474:	4b0e      	ldr	r3, [pc, #56]	; (80054b0 <MX_TIM6_Init+0x68>)
 8005476:	2200      	movs	r2, #0
 8005478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800547a:	480d      	ldr	r0, [pc, #52]	; (80054b0 <MX_TIM6_Init+0x68>)
 800547c:	f00b fde5 	bl	801104a <HAL_TIM_Base_Init>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005486:	f7ff fb2f 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005492:	1d3b      	adds	r3, r7, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4806      	ldr	r0, [pc, #24]	; (80054b0 <MX_TIM6_Init+0x68>)
 8005498:	f00d f950 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80054a2:	f7ff fb21 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000ea8 	.word	0x20000ea8
 80054b4:	40001000 	.word	0x40001000

080054b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08c      	sub	sp, #48	; 0x30
 80054bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80054be:	f107 030c 	add.w	r3, r7, #12
 80054c2:	2224      	movs	r2, #36	; 0x24
 80054c4:	2100      	movs	r1, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f010 f8dc 	bl	8015684 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054cc:	463b      	mov	r3, r7
 80054ce:	2200      	movs	r2, #0
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	605a      	str	r2, [r3, #4]
 80054d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80054d6:	4b23      	ldr	r3, [pc, #140]	; (8005564 <MX_TIM8_Init+0xac>)
 80054d8:	4a23      	ldr	r2, [pc, #140]	; (8005568 <MX_TIM8_Init+0xb0>)
 80054da:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80054dc:	4b21      	ldr	r3, [pc, #132]	; (8005564 <MX_TIM8_Init+0xac>)
 80054de:	2200      	movs	r2, #0
 80054e0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054e2:	4b20      	ldr	r3, [pc, #128]	; (8005564 <MX_TIM8_Init+0xac>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <MX_TIM8_Init+0xac>)
 80054ea:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80054ee:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054f0:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <MX_TIM8_Init+0xac>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80054f6:	4b1b      	ldr	r3, [pc, #108]	; (8005564 <MX_TIM8_Init+0xac>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054fc:	4b19      	ldr	r3, [pc, #100]	; (8005564 <MX_TIM8_Init+0xac>)
 80054fe:	2280      	movs	r2, #128	; 0x80
 8005500:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005502:	2303      	movs	r3, #3
 8005504:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005506:	2300      	movs	r3, #0
 8005508:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800550a:	2301      	movs	r3, #1
 800550c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005516:	2300      	movs	r3, #0
 8005518:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800551a:	2301      	movs	r3, #1
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800551e:	2300      	movs	r3, #0
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005526:	f107 030c 	add.w	r3, r7, #12
 800552a:	4619      	mov	r1, r3
 800552c:	480d      	ldr	r0, [pc, #52]	; (8005564 <MX_TIM8_Init+0xac>)
 800552e:	f00c f8d5 	bl	80116dc <HAL_TIM_Encoder_Init>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005538:	f7ff fad6 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800553c:	2300      	movs	r3, #0
 800553e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005540:	2300      	movs	r3, #0
 8005542:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005544:	2300      	movs	r3, #0
 8005546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005548:	463b      	mov	r3, r7
 800554a:	4619      	mov	r1, r3
 800554c:	4805      	ldr	r0, [pc, #20]	; (8005564 <MX_TIM8_Init+0xac>)
 800554e:	f00d f8f5 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005558:	f7ff fac6 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800555c:	bf00      	nop
 800555e:	3730      	adds	r7, #48	; 0x30
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20000ef4 	.word	0x20000ef4
 8005568:	40010400 	.word	0x40010400

0800556c <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005572:	1d3b      	adds	r3, r7, #4
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]
 8005578:	605a      	str	r2, [r3, #4]
 800557a:	609a      	str	r2, [r3, #8]
 800557c:	60da      	str	r2, [r3, #12]
 800557e:	611a      	str	r2, [r3, #16]
 8005580:	615a      	str	r2, [r3, #20]
 8005582:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <MX_TIM13_Init+0x98>)
 8005586:	4a20      	ldr	r2, [pc, #128]	; (8005608 <MX_TIM13_Init+0x9c>)
 8005588:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 800558a:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <MX_TIM13_Init+0x98>)
 800558c:	f240 2225 	movw	r2, #549	; 0x225
 8005590:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005592:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <MX_TIM13_Init+0x98>)
 8005594:	2200      	movs	r2, #0
 8005596:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8005598:	4b1a      	ldr	r3, [pc, #104]	; (8005604 <MX_TIM13_Init+0x98>)
 800559a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800559e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055a0:	4b18      	ldr	r3, [pc, #96]	; (8005604 <MX_TIM13_Init+0x98>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055a6:	4b17      	ldr	r3, [pc, #92]	; (8005604 <MX_TIM13_Init+0x98>)
 80055a8:	2280      	movs	r2, #128	; 0x80
 80055aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80055ac:	4815      	ldr	r0, [pc, #84]	; (8005604 <MX_TIM13_Init+0x98>)
 80055ae:	f00b fd4c 	bl	801104a <HAL_TIM_Base_Init>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 80055b8:	f7ff fa96 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80055bc:	4811      	ldr	r0, [pc, #68]	; (8005604 <MX_TIM13_Init+0x98>)
 80055be:	f00b fe21 	bl	8011204 <HAL_TIM_PWM_Init>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 80055c8:	f7ff fa8e 	bl	8004ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055cc:	2360      	movs	r3, #96	; 0x60
 80055ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80055d0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80055d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80055de:	1d3b      	adds	r3, r7, #4
 80055e0:	2200      	movs	r2, #0
 80055e2:	4619      	mov	r1, r3
 80055e4:	4807      	ldr	r0, [pc, #28]	; (8005604 <MX_TIM13_Init+0x98>)
 80055e6:	f00c fa3f 	bl	8011a68 <HAL_TIM_PWM_ConfigChannel>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 80055f0:	f7ff fa7a 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80055f4:	4803      	ldr	r0, [pc, #12]	; (8005604 <MX_TIM13_Init+0x98>)
 80055f6:	f000 fcf1 	bl	8005fdc <HAL_TIM_MspPostInit>

}
 80055fa:	bf00      	nop
 80055fc:	3720      	adds	r7, #32
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000f40 	.word	0x20000f40
 8005608:	40001c00 	.word	0x40001c00

0800560c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005612:	1d3b      	adds	r3, r7, #4
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	611a      	str	r2, [r3, #16]
 8005620:	615a      	str	r2, [r3, #20]
 8005622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005624:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <MX_TIM14_Init+0x98>)
 8005626:	4a20      	ldr	r2, [pc, #128]	; (80056a8 <MX_TIM14_Init+0x9c>)
 8005628:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 800562a:	4b1e      	ldr	r3, [pc, #120]	; (80056a4 <MX_TIM14_Init+0x98>)
 800562c:	f240 2225 	movw	r2, #549	; 0x225
 8005630:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005632:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <MX_TIM14_Init+0x98>)
 8005634:	2200      	movs	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8005638:	4b1a      	ldr	r3, [pc, #104]	; (80056a4 <MX_TIM14_Init+0x98>)
 800563a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800563e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005640:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <MX_TIM14_Init+0x98>)
 8005642:	2200      	movs	r2, #0
 8005644:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005646:	4b17      	ldr	r3, [pc, #92]	; (80056a4 <MX_TIM14_Init+0x98>)
 8005648:	2280      	movs	r2, #128	; 0x80
 800564a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800564c:	4815      	ldr	r0, [pc, #84]	; (80056a4 <MX_TIM14_Init+0x98>)
 800564e:	f00b fcfc 	bl	801104a <HAL_TIM_Base_Init>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8005658:	f7ff fa46 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800565c:	4811      	ldr	r0, [pc, #68]	; (80056a4 <MX_TIM14_Init+0x98>)
 800565e:	f00b fdd1 	bl	8011204 <HAL_TIM_PWM_Init>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8005668:	f7ff fa3e 	bl	8004ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800566c:	2360      	movs	r3, #96	; 0x60
 800566e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8005670:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800567e:	1d3b      	adds	r3, r7, #4
 8005680:	2200      	movs	r2, #0
 8005682:	4619      	mov	r1, r3
 8005684:	4807      	ldr	r0, [pc, #28]	; (80056a4 <MX_TIM14_Init+0x98>)
 8005686:	f00c f9ef 	bl	8011a68 <HAL_TIM_PWM_ConfigChannel>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8005690:	f7ff fa2a 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8005694:	4803      	ldr	r0, [pc, #12]	; (80056a4 <MX_TIM14_Init+0x98>)
 8005696:	f000 fca1 	bl	8005fdc <HAL_TIM_MspPostInit>

}
 800569a:	bf00      	nop
 800569c:	3720      	adds	r7, #32
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	20000f8c 	.word	0x20000f8c
 80056a8:	40002000 	.word	0x40002000

080056ac <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b098      	sub	sp, #96	; 0x60
 80056b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
 80056c6:	605a      	str	r2, [r3, #4]
 80056c8:	609a      	str	r2, [r3, #8]
 80056ca:	60da      	str	r2, [r3, #12]
 80056cc:	611a      	str	r2, [r3, #16]
 80056ce:	615a      	str	r2, [r3, #20]
 80056d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80056d2:	1d3b      	adds	r3, r7, #4
 80056d4:	2234      	movs	r2, #52	; 0x34
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f00f ffd3 	bl	8015684 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80056de:	4b35      	ldr	r3, [pc, #212]	; (80057b4 <MX_TIM15_Init+0x108>)
 80056e0:	4a35      	ldr	r2, [pc, #212]	; (80057b8 <MX_TIM15_Init+0x10c>)
 80056e2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 80056e4:	4b33      	ldr	r3, [pc, #204]	; (80057b4 <MX_TIM15_Init+0x108>)
 80056e6:	f240 2225 	movw	r2, #549	; 0x225
 80056ea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ec:	4b31      	ldr	r3, [pc, #196]	; (80057b4 <MX_TIM15_Init+0x108>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 80056f2:	4b30      	ldr	r3, [pc, #192]	; (80057b4 <MX_TIM15_Init+0x108>)
 80056f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80056f8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056fa:	4b2e      	ldr	r3, [pc, #184]	; (80057b4 <MX_TIM15_Init+0x108>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005700:	4b2c      	ldr	r3, [pc, #176]	; (80057b4 <MX_TIM15_Init+0x108>)
 8005702:	2200      	movs	r2, #0
 8005704:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005706:	4b2b      	ldr	r3, [pc, #172]	; (80057b4 <MX_TIM15_Init+0x108>)
 8005708:	2280      	movs	r2, #128	; 0x80
 800570a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800570c:	4829      	ldr	r0, [pc, #164]	; (80057b4 <MX_TIM15_Init+0x108>)
 800570e:	f00b fd79 	bl	8011204 <HAL_TIM_PWM_Init>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8005718:	f7ff f9e6 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800571c:	2300      	movs	r3, #0
 800571e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005720:	2300      	movs	r3, #0
 8005722:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005724:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005728:	4619      	mov	r1, r3
 800572a:	4822      	ldr	r0, [pc, #136]	; (80057b4 <MX_TIM15_Init+0x108>)
 800572c:	f00d f806 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8005736:	f7ff f9d7 	bl	8004ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800573a:	2360      	movs	r3, #96	; 0x60
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 800573e:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005742:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005744:	2300      	movs	r3, #0
 8005746:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005748:	2300      	movs	r3, #0
 800574a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800574c:	2300      	movs	r3, #0
 800574e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005750:	2300      	movs	r3, #0
 8005752:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005754:	2300      	movs	r3, #0
 8005756:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005758:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800575c:	2200      	movs	r2, #0
 800575e:	4619      	mov	r1, r3
 8005760:	4814      	ldr	r0, [pc, #80]	; (80057b4 <MX_TIM15_Init+0x108>)
 8005762:	f00c f981 	bl	8011a68 <HAL_TIM_PWM_ConfigChannel>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d001      	beq.n	8005770 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800576c:	f7ff f9bc 	bl	8004ae8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005770:	2300      	movs	r3, #0
 8005772:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005774:	2300      	movs	r3, #0
 8005776:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005788:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800578e:	2300      	movs	r3, #0
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005792:	1d3b      	adds	r3, r7, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4807      	ldr	r0, [pc, #28]	; (80057b4 <MX_TIM15_Init+0x108>)
 8005798:	f00d f86c 	bl	8012874 <HAL_TIMEx_ConfigBreakDeadTime>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80057a2:	f7ff f9a1 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80057a6:	4803      	ldr	r0, [pc, #12]	; (80057b4 <MX_TIM15_Init+0x108>)
 80057a8:	f000 fc18 	bl	8005fdc <HAL_TIM_MspPostInit>

}
 80057ac:	bf00      	nop
 80057ae:	3760      	adds	r7, #96	; 0x60
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000fd8 	.word	0x20000fd8
 80057b8:	40014000 	.word	0x40014000

080057bc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b094      	sub	sp, #80	; 0x50
 80057c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80057c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	605a      	str	r2, [r3, #4]
 80057cc:	609a      	str	r2, [r3, #8]
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	611a      	str	r2, [r3, #16]
 80057d2:	615a      	str	r2, [r3, #20]
 80057d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80057d6:	463b      	mov	r3, r7
 80057d8:	2234      	movs	r2, #52	; 0x34
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f00f ff51 	bl	8015684 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80057e2:	4b32      	ldr	r3, [pc, #200]	; (80058ac <MX_TIM16_Init+0xf0>)
 80057e4:	4a32      	ldr	r2, [pc, #200]	; (80058b0 <MX_TIM16_Init+0xf4>)
 80057e6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 80057e8:	4b30      	ldr	r3, [pc, #192]	; (80058ac <MX_TIM16_Init+0xf0>)
 80057ea:	f240 2225 	movw	r2, #549	; 0x225
 80057ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057f0:	4b2e      	ldr	r3, [pc, #184]	; (80058ac <MX_TIM16_Init+0xf0>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 80057f6:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <MX_TIM16_Init+0xf0>)
 80057f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057fc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057fe:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <MX_TIM16_Init+0xf0>)
 8005800:	2200      	movs	r2, #0
 8005802:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005804:	4b29      	ldr	r3, [pc, #164]	; (80058ac <MX_TIM16_Init+0xf0>)
 8005806:	2200      	movs	r2, #0
 8005808:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800580a:	4b28      	ldr	r3, [pc, #160]	; (80058ac <MX_TIM16_Init+0xf0>)
 800580c:	2280      	movs	r2, #128	; 0x80
 800580e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005810:	4826      	ldr	r0, [pc, #152]	; (80058ac <MX_TIM16_Init+0xf0>)
 8005812:	f00b fc1a 	bl	801104a <HAL_TIM_Base_Init>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d001      	beq.n	8005820 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 800581c:	f7ff f964 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8005820:	4822      	ldr	r0, [pc, #136]	; (80058ac <MX_TIM16_Init+0xf0>)
 8005822:	f00b fcef 	bl	8011204 <HAL_TIM_PWM_Init>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 800582c:	f7ff f95c 	bl	8004ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005830:	2360      	movs	r3, #96	; 0x60
 8005832:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8005834:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005838:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800583a:	2300      	movs	r3, #0
 800583c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800583e:	2300      	movs	r3, #0
 8005840:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005842:	2300      	movs	r3, #0
 8005844:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005846:	2300      	movs	r3, #0
 8005848:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800584a:	2300      	movs	r3, #0
 800584c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800584e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005852:	2200      	movs	r2, #0
 8005854:	4619      	mov	r1, r3
 8005856:	4815      	ldr	r0, [pc, #84]	; (80058ac <MX_TIM16_Init+0xf0>)
 8005858:	f00c f906 	bl	8011a68 <HAL_TIM_PWM_ConfigChannel>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8005862:	f7ff f941 	bl	8004ae8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005866:	2300      	movs	r3, #0
 8005868:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800586a:	2300      	movs	r3, #0
 800586c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800586e:	2300      	movs	r3, #0
 8005870:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005876:	2300      	movs	r3, #0
 8005878:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800587a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800587e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005884:	2300      	movs	r3, #0
 8005886:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005888:	463b      	mov	r3, r7
 800588a:	4619      	mov	r1, r3
 800588c:	4807      	ldr	r0, [pc, #28]	; (80058ac <MX_TIM16_Init+0xf0>)
 800588e:	f00c fff1 	bl	8012874 <HAL_TIMEx_ConfigBreakDeadTime>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8005898:	f7ff f926 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800589c:	4803      	ldr	r0, [pc, #12]	; (80058ac <MX_TIM16_Init+0xf0>)
 800589e:	f000 fb9d 	bl	8005fdc <HAL_TIM_MspPostInit>

}
 80058a2:	bf00      	nop
 80058a4:	3750      	adds	r7, #80	; 0x50
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20001024 	.word	0x20001024
 80058b0:	40014400 	.word	0x40014400

080058b4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b094      	sub	sp, #80	; 0x50
 80058b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80058ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
 80058c2:	605a      	str	r2, [r3, #4]
 80058c4:	609a      	str	r2, [r3, #8]
 80058c6:	60da      	str	r2, [r3, #12]
 80058c8:	611a      	str	r2, [r3, #16]
 80058ca:	615a      	str	r2, [r3, #20]
 80058cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80058ce:	463b      	mov	r3, r7
 80058d0:	2234      	movs	r2, #52	; 0x34
 80058d2:	2100      	movs	r1, #0
 80058d4:	4618      	mov	r0, r3
 80058d6:	f00f fed5 	bl	8015684 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80058da:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <MX_TIM17_Init+0xf0>)
 80058dc:	4a32      	ldr	r2, [pc, #200]	; (80059a8 <MX_TIM17_Init+0xf4>)
 80058de:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 80058e0:	4b30      	ldr	r3, [pc, #192]	; (80059a4 <MX_TIM17_Init+0xf0>)
 80058e2:	f240 2225 	movw	r2, #549	; 0x225
 80058e6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058e8:	4b2e      	ldr	r3, [pc, #184]	; (80059a4 <MX_TIM17_Init+0xf0>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80058ee:	4b2d      	ldr	r3, [pc, #180]	; (80059a4 <MX_TIM17_Init+0xf0>)
 80058f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80058f4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058f6:	4b2b      	ldr	r3, [pc, #172]	; (80059a4 <MX_TIM17_Init+0xf0>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80058fc:	4b29      	ldr	r3, [pc, #164]	; (80059a4 <MX_TIM17_Init+0xf0>)
 80058fe:	2200      	movs	r2, #0
 8005900:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005902:	4b28      	ldr	r3, [pc, #160]	; (80059a4 <MX_TIM17_Init+0xf0>)
 8005904:	2280      	movs	r2, #128	; 0x80
 8005906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005908:	4826      	ldr	r0, [pc, #152]	; (80059a4 <MX_TIM17_Init+0xf0>)
 800590a:	f00b fb9e 	bl	801104a <HAL_TIM_Base_Init>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8005914:	f7ff f8e8 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8005918:	4822      	ldr	r0, [pc, #136]	; (80059a4 <MX_TIM17_Init+0xf0>)
 800591a:	f00b fc73 	bl	8011204 <HAL_TIM_PWM_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8005924:	f7ff f8e0 	bl	8004ae8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005928:	2360      	movs	r3, #96	; 0x60
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 800592c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005930:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005932:	2300      	movs	r3, #0
 8005934:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005936:	2300      	movs	r3, #0
 8005938:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800593a:	2300      	movs	r3, #0
 800593c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800593e:	2300      	movs	r3, #0
 8005940:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005942:	2300      	movs	r3, #0
 8005944:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005946:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800594a:	2200      	movs	r2, #0
 800594c:	4619      	mov	r1, r3
 800594e:	4815      	ldr	r0, [pc, #84]	; (80059a4 <MX_TIM17_Init+0xf0>)
 8005950:	f00c f88a 	bl	8011a68 <HAL_TIM_PWM_ConfigChannel>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800595a:	f7ff f8c5 	bl	8004ae8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800595e:	2300      	movs	r3, #0
 8005960:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005966:	2300      	movs	r3, #0
 8005968:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005976:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800597c:	2300      	movs	r3, #0
 800597e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005980:	463b      	mov	r3, r7
 8005982:	4619      	mov	r1, r3
 8005984:	4807      	ldr	r0, [pc, #28]	; (80059a4 <MX_TIM17_Init+0xf0>)
 8005986:	f00c ff75 	bl	8012874 <HAL_TIMEx_ConfigBreakDeadTime>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8005990:	f7ff f8aa 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8005994:	4803      	ldr	r0, [pc, #12]	; (80059a4 <MX_TIM17_Init+0xf0>)
 8005996:	f000 fb21 	bl	8005fdc <HAL_TIM_MspPostInit>

}
 800599a:	bf00      	nop
 800599c:	3750      	adds	r7, #80	; 0x50
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20001070 	.word	0x20001070
 80059a8:	40014800 	.word	0x40014800

080059ac <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80059b2:	f107 0310 	add.w	r3, r7, #16
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	609a      	str	r2, [r3, #8]
 80059be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059c0:	1d3b      	adds	r3, r7, #4
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	605a      	str	r2, [r3, #4]
 80059c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80059ca:	4b1e      	ldr	r3, [pc, #120]	; (8005a44 <MX_TIM23_Init+0x98>)
 80059cc:	4a1e      	ldr	r2, [pc, #120]	; (8005a48 <MX_TIM23_Init+0x9c>)
 80059ce:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80059d0:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <MX_TIM23_Init+0x98>)
 80059d2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80059d6:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059d8:	4b1a      	ldr	r3, [pc, #104]	; (8005a44 <MX_TIM23_Init+0x98>)
 80059da:	2200      	movs	r2, #0
 80059dc:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1000-1;
 80059de:	4b19      	ldr	r3, [pc, #100]	; (8005a44 <MX_TIM23_Init+0x98>)
 80059e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80059e4:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059e6:	4b17      	ldr	r3, [pc, #92]	; (8005a44 <MX_TIM23_Init+0x98>)
 80059e8:	2200      	movs	r2, #0
 80059ea:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059ec:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <MX_TIM23_Init+0x98>)
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80059f2:	4814      	ldr	r0, [pc, #80]	; (8005a44 <MX_TIM23_Init+0x98>)
 80059f4:	f00b fb29 	bl	801104a <HAL_TIM_Base_Init>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 80059fe:	f7ff f873 	bl	8004ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a06:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8005a08:	f107 0310 	add.w	r3, r7, #16
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	480d      	ldr	r0, [pc, #52]	; (8005a44 <MX_TIM23_Init+0x98>)
 8005a10:	f00c f93e 	bl	8011c90 <HAL_TIM_ConfigClockSource>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8005a1a:	f7ff f865 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8005a26:	1d3b      	adds	r3, r7, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4806      	ldr	r0, [pc, #24]	; (8005a44 <MX_TIM23_Init+0x98>)
 8005a2c:	f00c fe86 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8005a36:	f7ff f857 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8005a3a:	bf00      	nop
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	200010bc 	.word	0x200010bc
 8005a48:	4000e000 	.word	0x4000e000

08005a4c <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a52:	f107 0310 	add.w	r3, r7, #16
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	609a      	str	r2, [r3, #8]
 8005a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a60:	1d3b      	adds	r3, r7, #4
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	605a      	str	r2, [r3, #4]
 8005a68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8005a6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ae4 <MX_TIM24_Init+0x98>)
 8005a6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <MX_TIM24_Init+0x9c>)
 8005a6e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8005a70:	4b1c      	ldr	r3, [pc, #112]	; (8005ae4 <MX_TIM24_Init+0x98>)
 8005a72:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005a76:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a78:	4b1a      	ldr	r3, [pc, #104]	; (8005ae4 <MX_TIM24_Init+0x98>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8005a7e:	4b19      	ldr	r3, [pc, #100]	; (8005ae4 <MX_TIM24_Init+0x98>)
 8005a80:	f04f 32ff 	mov.w	r2, #4294967295
 8005a84:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a86:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <MX_TIM24_Init+0x98>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a8c:	4b15      	ldr	r3, [pc, #84]	; (8005ae4 <MX_TIM24_Init+0x98>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8005a92:	4814      	ldr	r0, [pc, #80]	; (8005ae4 <MX_TIM24_Init+0x98>)
 8005a94:	f00b fad9 	bl	801104a <HAL_TIM_Base_Init>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8005a9e:	f7ff f823 	bl	8004ae8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8005aa8:	f107 0310 	add.w	r3, r7, #16
 8005aac:	4619      	mov	r1, r3
 8005aae:	480d      	ldr	r0, [pc, #52]	; (8005ae4 <MX_TIM24_Init+0x98>)
 8005ab0:	f00c f8ee 	bl	8011c90 <HAL_TIM_ConfigClockSource>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8005aba:	f7ff f815 	bl	8004ae8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4806      	ldr	r0, [pc, #24]	; (8005ae4 <MX_TIM24_Init+0x98>)
 8005acc:	f00c fe36 	bl	801273c <HAL_TIMEx_MasterConfigSynchronization>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8005ad6:	f7ff f807 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8005ada:	bf00      	nop
 8005adc:	3720      	adds	r7, #32
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20001108 	.word	0x20001108
 8005ae8:	4000e400 	.word	0x4000e400

08005aec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b08a      	sub	sp, #40	; 0x28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005af4:	f107 0314 	add.w	r3, r7, #20
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
 8005afc:	605a      	str	r2, [r3, #4]
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a3c      	ldr	r2, [pc, #240]	; (8005bfc <HAL_TIM_PWM_MspInit+0x110>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d15e      	bne.n	8005bcc <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b0e:	4b3c      	ldr	r3, [pc, #240]	; (8005c00 <HAL_TIM_PWM_MspInit+0x114>)
 8005b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b14:	4a3a      	ldr	r2, [pc, #232]	; (8005c00 <HAL_TIM_PWM_MspInit+0x114>)
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b1e:	4b38      	ldr	r3, [pc, #224]	; (8005c00 <HAL_TIM_PWM_MspInit+0x114>)
 8005b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	613b      	str	r3, [r7, #16]
 8005b2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b2c:	4b34      	ldr	r3, [pc, #208]	; (8005c00 <HAL_TIM_PWM_MspInit+0x114>)
 8005b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b32:	4a33      	ldr	r2, [pc, #204]	; (8005c00 <HAL_TIM_PWM_MspInit+0x114>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b3c:	4b30      	ldr	r3, [pc, #192]	; (8005c00 <HAL_TIM_PWM_MspInit+0x114>)
 8005b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 8005b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b50:	2302      	movs	r3, #2
 8005b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8005b60:	f107 0314 	add.w	r3, r7, #20
 8005b64:	4619      	mov	r1, r3
 8005b66:	4827      	ldr	r0, [pc, #156]	; (8005c04 <HAL_TIM_PWM_MspInit+0x118>)
 8005b68:	f005 fd14 	bl	800b594 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream2;
 8005b6c:	4b26      	ldr	r3, [pc, #152]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b6e:	4a27      	ldr	r2, [pc, #156]	; (8005c0c <HAL_TIM_PWM_MspInit+0x120>)
 8005b70:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8005b72:	4b25      	ldr	r3, [pc, #148]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b74:	220b      	movs	r2, #11
 8005b76:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b78:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b7a:	2240      	movs	r2, #64	; 0x40
 8005b7c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b7e:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005b84:	4b20      	ldr	r3, [pc, #128]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005b8a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b8c:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b92:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005b94:	4b1c      	ldr	r3, [pc, #112]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b9a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8005b9c:	4b1a      	ldr	r3, [pc, #104]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005ba2:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ba8:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8005bae:	4816      	ldr	r0, [pc, #88]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005bb0:	f003 fabe 	bl	8009130 <HAL_DMA_Init>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 8005bba:	f7fe ff95 	bl	8004ae8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a11      	ldr	r2, [pc, #68]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005bc2:	625a      	str	r2, [r3, #36]	; 0x24
 8005bc4:	4a10      	ldr	r2, [pc, #64]	; (8005c08 <HAL_TIM_PWM_MspInit+0x11c>)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8005bca:	e013      	b.n	8005bf4 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a0f      	ldr	r2, [pc, #60]	; (8005c10 <HAL_TIM_PWM_MspInit+0x124>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d10e      	bne.n	8005bf4 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005bd6:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <HAL_TIM_PWM_MspInit+0x114>)
 8005bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bdc:	4a08      	ldr	r2, [pc, #32]	; (8005c00 <HAL_TIM_PWM_MspInit+0x114>)
 8005bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005be6:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <HAL_TIM_PWM_MspInit+0x114>)
 8005be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
}
 8005bf4:	bf00      	nop
 8005bf6:	3728      	adds	r7, #40	; 0x28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	58024400 	.word	0x58024400
 8005c04:	58020000 	.word	0x58020000
 8005c08:	20001154 	.word	0x20001154
 8005c0c:	40020040 	.word	0x40020040
 8005c10:	40014000 	.word	0x40014000

08005c14 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08e      	sub	sp, #56	; 0x38
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c34:	d14e      	bne.n	8005cd4 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c36:	4b5d      	ldr	r3, [pc, #372]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005c38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c3c:	4a5b      	ldr	r2, [pc, #364]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c46:	4b59      	ldr	r3, [pc, #356]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005c48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	623b      	str	r3, [r7, #32]
 8005c52:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c54:	4b55      	ldr	r3, [pc, #340]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c5a:	4a54      	ldr	r2, [pc, #336]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c64:	4b51      	ldr	r3, [pc, #324]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c72:	4b4e      	ldr	r3, [pc, #312]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c78:	4a4c      	ldr	r2, [pc, #304]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005c7a:	f043 0302 	orr.w	r3, r3, #2
 8005c7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c82:	4b4a      	ldr	r3, [pc, #296]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 8005c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c96:	2302      	movs	r3, #2
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8005ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005caa:	4619      	mov	r1, r3
 8005cac:	4840      	ldr	r0, [pc, #256]	; (8005db0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8005cae:	f005 fc71 	bl	800b594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 8005cb2:	2308      	movs	r3, #8
 8005cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8005cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4839      	ldr	r0, [pc, #228]	; (8005db4 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8005cce:	f005 fc61 	bl	800b594 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8005cd2:	e067      	b.n	8005da4 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM4)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a37      	ldr	r2, [pc, #220]	; (8005db8 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d12f      	bne.n	8005d3e <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005cde:	4b33      	ldr	r3, [pc, #204]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005ce0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ce4:	4a31      	ldr	r2, [pc, #196]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005ce6:	f043 0304 	orr.w	r3, r3, #4
 8005cea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005cee:	4b2f      	ldr	r3, [pc, #188]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005cf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cfc:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d02:	4a2a      	ldr	r2, [pc, #168]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005d04:	f043 0308 	orr.w	r3, r3, #8
 8005d08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d0c:	4b27      	ldr	r3, [pc, #156]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	613b      	str	r3, [r7, #16]
 8005d18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8005d1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d20:	2302      	movs	r3, #2
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d34:	4619      	mov	r1, r3
 8005d36:	4821      	ldr	r0, [pc, #132]	; (8005dbc <HAL_TIM_Encoder_MspInit+0x1a8>)
 8005d38:	f005 fc2c 	bl	800b594 <HAL_GPIO_Init>
}
 8005d3c:	e032      	b.n	8005da4 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM8)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a1f      	ldr	r2, [pc, #124]	; (8005dc0 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d12d      	bne.n	8005da4 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005d48:	4b18      	ldr	r3, [pc, #96]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d4e:	4a17      	ldr	r2, [pc, #92]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005d50:	f043 0302 	orr.w	r3, r3, #2
 8005d54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005d58:	4b14      	ldr	r3, [pc, #80]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	60fb      	str	r3, [r7, #12]
 8005d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d66:	4b11      	ldr	r3, [pc, #68]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d6c:	4a0f      	ldr	r2, [pc, #60]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005d6e:	f043 0304 	orr.w	r3, r3, #4
 8005d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d76:	4b0d      	ldr	r3, [pc, #52]	; (8005dac <HAL_TIM_Encoder_MspInit+0x198>)
 8005d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8005d84:	23c0      	movs	r3, #192	; 0xc0
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d90:	2300      	movs	r3, #0
 8005d92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005d94:	2303      	movs	r3, #3
 8005d96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4809      	ldr	r0, [pc, #36]	; (8005dc4 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8005da0:	f005 fbf8 	bl	800b594 <HAL_GPIO_Init>
}
 8005da4:	bf00      	nop
 8005da6:	3738      	adds	r7, #56	; 0x38
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	58024400 	.word	0x58024400
 8005db0:	58020000 	.word	0x58020000
 8005db4:	58020400 	.word	0x58020400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	58020c00 	.word	0x58020c00
 8005dc0:	40010400 	.word	0x40010400
 8005dc4:	58020800 	.word	0x58020800

08005dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b092      	sub	sp, #72	; 0x48
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a72      	ldr	r2, [pc, #456]	; (8005fb0 <HAL_TIM_Base_MspInit+0x1e8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d12e      	bne.n	8005e48 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005dea:	4b72      	ldr	r3, [pc, #456]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005df0:	4a70      	ldr	r2, [pc, #448]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005df2:	f043 0302 	orr.w	r3, r3, #2
 8005df6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005dfa:	4b6e      	ldr	r3, [pc, #440]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	633b      	str	r3, [r7, #48]	; 0x30
 8005e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e08:	4b6a      	ldr	r3, [pc, #424]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e0e:	4a69      	ldr	r2, [pc, #420]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e18:	4b66      	ldr	r3, [pc, #408]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 8005e26:	2320      	movs	r3, #32
 8005e28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e32:	2300      	movs	r3, #0
 8005e34:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005e36:	2302      	movs	r3, #2
 8005e38:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 8005e3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e3e:	4619      	mov	r1, r3
 8005e40:	485d      	ldr	r0, [pc, #372]	; (8005fb8 <HAL_TIM_Base_MspInit+0x1f0>)
 8005e42:	f005 fba7 	bl	800b594 <HAL_GPIO_Init>
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8005e46:	e0ae      	b.n	8005fa6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM5)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a5b      	ldr	r2, [pc, #364]	; (8005fbc <HAL_TIM_Base_MspInit+0x1f4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d10f      	bne.n	8005e72 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005e52:	4b58      	ldr	r3, [pc, #352]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005e54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e58:	4a56      	ldr	r2, [pc, #344]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005e5a:	f043 0308 	orr.w	r3, r3, #8
 8005e5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e62:	4b54      	ldr	r3, [pc, #336]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005e70:	e099      	b.n	8005fa6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM6)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a52      	ldr	r2, [pc, #328]	; (8005fc0 <HAL_TIM_Base_MspInit+0x1f8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d10f      	bne.n	8005e9c <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005e7c:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005e7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e82:	4a4c      	ldr	r2, [pc, #304]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005e84:	f043 0310 	orr.w	r3, r3, #16
 8005e88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e8c:	4b49      	ldr	r3, [pc, #292]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e92:	f003 0310 	and.w	r3, r3, #16
 8005e96:	627b      	str	r3, [r7, #36]	; 0x24
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e9a:	e084      	b.n	8005fa6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM13)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a48      	ldr	r2, [pc, #288]	; (8005fc4 <HAL_TIM_Base_MspInit+0x1fc>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d10f      	bne.n	8005ec6 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005ea6:	4b43      	ldr	r3, [pc, #268]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005ea8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005eac:	4a41      	ldr	r2, [pc, #260]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
}
 8005ec4:	e06f      	b.n	8005fa6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM14)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a3f      	ldr	r2, [pc, #252]	; (8005fc8 <HAL_TIM_Base_MspInit+0x200>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d10f      	bne.n	8005ef0 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005ed0:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005ed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ed6:	4a37      	ldr	r2, [pc, #220]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005edc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ee0:	4b34      	ldr	r3, [pc, #208]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eea:	61fb      	str	r3, [r7, #28]
 8005eec:	69fb      	ldr	r3, [r7, #28]
}
 8005eee:	e05a      	b.n	8005fa6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM16)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a35      	ldr	r2, [pc, #212]	; (8005fcc <HAL_TIM_Base_MspInit+0x204>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d10f      	bne.n	8005f1a <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005efa:	4b2e      	ldr	r3, [pc, #184]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f00:	4a2c      	ldr	r2, [pc, #176]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f0a:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	69bb      	ldr	r3, [r7, #24]
}
 8005f18:	e045      	b.n	8005fa6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM17)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a2c      	ldr	r2, [pc, #176]	; (8005fd0 <HAL_TIM_Base_MspInit+0x208>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d10f      	bne.n	8005f44 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f2a:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f34:	4b1f      	ldr	r3, [pc, #124]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f3e:	617b      	str	r3, [r7, #20]
 8005f40:	697b      	ldr	r3, [r7, #20]
}
 8005f42:	e030      	b.n	8005fa6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM23)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a22      	ldr	r2, [pc, #136]	; (8005fd4 <HAL_TIM_Base_MspInit+0x20c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d117      	bne.n	8005f7e <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005f4e:	4b19      	ldr	r3, [pc, #100]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f50:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f5a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005f5e:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f60:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2100      	movs	r1, #0
 8005f70:	20a1      	movs	r0, #161	; 0xa1
 8005f72:	f002 feaa 	bl	8008cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8005f76:	20a1      	movs	r0, #161	; 0xa1
 8005f78:	f002 fec1 	bl	8008cfe <HAL_NVIC_EnableIRQ>
}
 8005f7c:	e013      	b.n	8005fa6 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM24)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a15      	ldr	r2, [pc, #84]	; (8005fd8 <HAL_TIM_Base_MspInit+0x210>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d10e      	bne.n	8005fa6 <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f8a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005f8e:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f94:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <HAL_TIM_Base_MspInit+0x1ec>)
 8005f9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
}
 8005fa6:	bf00      	nop
 8005fa8:	3748      	adds	r7, #72	; 0x48
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40000400 	.word	0x40000400
 8005fb4:	58024400 	.word	0x58024400
 8005fb8:	58020400 	.word	0x58020400
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40001000 	.word	0x40001000
 8005fc4:	40001c00 	.word	0x40001c00
 8005fc8:	40002000 	.word	0x40002000
 8005fcc:	40014400 	.word	0x40014400
 8005fd0:	40014800 	.word	0x40014800
 8005fd4:	4000e000 	.word	0x4000e000
 8005fd8:	4000e400 	.word	0x4000e400

08005fdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b090      	sub	sp, #64	; 0x40
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a95      	ldr	r2, [pc, #596]	; (8006250 <HAL_TIM_MspPostInit+0x274>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d120      	bne.n	8006040 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ffe:	4b95      	ldr	r3, [pc, #596]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 8006000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006004:	4a93      	ldr	r2, [pc, #588]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 8006006:	f043 0301 	orr.w	r3, r3, #1
 800600a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800600e:	4b91      	ldr	r3, [pc, #580]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 8006010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	62bb      	str	r3, [r7, #40]	; 0x28
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 800601c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006022:	2302      	movs	r3, #2
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006026:	2300      	movs	r3, #0
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800602a:	2300      	movs	r3, #0
 800602c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800602e:	2301      	movs	r3, #1
 8006030:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8006032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006036:	4619      	mov	r1, r3
 8006038:	4887      	ldr	r0, [pc, #540]	; (8006258 <HAL_TIM_MspPostInit+0x27c>)
 800603a:	f005 faab 	bl	800b594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800603e:	e103      	b.n	8006248 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a85      	ldr	r2, [pc, #532]	; (800625c <HAL_TIM_MspPostInit+0x280>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d11f      	bne.n	800608a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800604a:	4b82      	ldr	r3, [pc, #520]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 800604c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006050:	4a80      	ldr	r2, [pc, #512]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 8006052:	f043 0302 	orr.w	r3, r3, #2
 8006056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800605a:	4b7e      	ldr	r3, [pc, #504]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 800605c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	627b      	str	r3, [r7, #36]	; 0x24
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 8006068:	2310      	movs	r3, #16
 800606a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606c:	2302      	movs	r3, #2
 800606e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006070:	2300      	movs	r3, #0
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006074:	2300      	movs	r3, #0
 8006076:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006078:	2302      	movs	r3, #2
 800607a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 800607c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006080:	4619      	mov	r1, r3
 8006082:	4877      	ldr	r0, [pc, #476]	; (8006260 <HAL_TIM_MspPostInit+0x284>)
 8006084:	f005 fa86 	bl	800b594 <HAL_GPIO_Init>
}
 8006088:	e0de      	b.n	8006248 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a75      	ldr	r2, [pc, #468]	; (8006264 <HAL_TIM_MspPostInit+0x288>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d11f      	bne.n	80060d4 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006094:	4b6f      	ldr	r3, [pc, #444]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 8006096:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800609a:	4a6e      	ldr	r2, [pc, #440]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060a4:	4b6b      	ldr	r3, [pc, #428]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 80060a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	623b      	str	r3, [r7, #32]
 80060b0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80060b2:	2303      	movs	r3, #3
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b6:	2302      	movs	r3, #2
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060be:	2300      	movs	r3, #0
 80060c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80060c2:	2302      	movs	r3, #2
 80060c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060ca:	4619      	mov	r1, r3
 80060cc:	4862      	ldr	r0, [pc, #392]	; (8006258 <HAL_TIM_MspPostInit+0x27c>)
 80060ce:	f005 fa61 	bl	800b594 <HAL_GPIO_Init>
}
 80060d2:	e0b9      	b.n	8006248 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a63      	ldr	r2, [pc, #396]	; (8006268 <HAL_TIM_MspPostInit+0x28c>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d11f      	bne.n	800611e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060de:	4b5d      	ldr	r3, [pc, #372]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 80060e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060e4:	4a5b      	ldr	r2, [pc, #364]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 80060e6:	f043 0301 	orr.w	r3, r3, #1
 80060ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060ee:	4b59      	ldr	r3, [pc, #356]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 80060f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060f4:	f003 0301 	and.w	r3, r3, #1
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 80060fc:	2340      	movs	r3, #64	; 0x40
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006100:	2302      	movs	r3, #2
 8006102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006104:	2300      	movs	r3, #0
 8006106:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006108:	2300      	movs	r3, #0
 800610a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800610c:	2309      	movs	r3, #9
 800610e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8006110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006114:	4619      	mov	r1, r3
 8006116:	4850      	ldr	r0, [pc, #320]	; (8006258 <HAL_TIM_MspPostInit+0x27c>)
 8006118:	f005 fa3c 	bl	800b594 <HAL_GPIO_Init>
}
 800611c:	e094      	b.n	8006248 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a52      	ldr	r2, [pc, #328]	; (800626c <HAL_TIM_MspPostInit+0x290>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d11f      	bne.n	8006168 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006128:	4b4a      	ldr	r3, [pc, #296]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 800612a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800612e:	4a49      	ldr	r2, [pc, #292]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006138:	4b46      	ldr	r3, [pc, #280]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 800613a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8006146:	2380      	movs	r3, #128	; 0x80
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800614a:	2302      	movs	r3, #2
 800614c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614e:	2300      	movs	r3, #0
 8006150:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006152:	2300      	movs	r3, #0
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8006156:	2309      	movs	r3, #9
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 800615a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800615e:	4619      	mov	r1, r3
 8006160:	483d      	ldr	r0, [pc, #244]	; (8006258 <HAL_TIM_MspPostInit+0x27c>)
 8006162:	f005 fa17 	bl	800b594 <HAL_GPIO_Init>
}
 8006166:	e06f      	b.n	8006248 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a40      	ldr	r2, [pc, #256]	; (8006270 <HAL_TIM_MspPostInit+0x294>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d11f      	bne.n	80061b2 <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006172:	4b38      	ldr	r3, [pc, #224]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 8006174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006178:	4a36      	ldr	r2, [pc, #216]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 800617a:	f043 0310 	orr.w	r3, r3, #16
 800617e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006182:	4b34      	ldr	r3, [pc, #208]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 8006184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006190:	2320      	movs	r3, #32
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006194:	2302      	movs	r3, #2
 8006196:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006198:	2300      	movs	r3, #0
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800619c:	2300      	movs	r3, #0
 800619e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80061a0:	2304      	movs	r3, #4
 80061a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80061a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061a8:	4619      	mov	r1, r3
 80061aa:	4832      	ldr	r0, [pc, #200]	; (8006274 <HAL_TIM_MspPostInit+0x298>)
 80061ac:	f005 f9f2 	bl	800b594 <HAL_GPIO_Init>
}
 80061b0:	e04a      	b.n	8006248 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a30      	ldr	r2, [pc, #192]	; (8006278 <HAL_TIM_MspPostInit+0x29c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d120      	bne.n	80061fe <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061bc:	4b25      	ldr	r3, [pc, #148]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 80061be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061c2:	4a24      	ldr	r2, [pc, #144]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 80061c4:	f043 0302 	orr.w	r3, r3, #2
 80061c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061cc:	4b21      	ldr	r3, [pc, #132]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 80061ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 80061da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e0:	2302      	movs	r3, #2
 80061e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e8:	2300      	movs	r3, #0
 80061ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80061ec:	2301      	movs	r3, #1
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80061f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80061f4:	4619      	mov	r1, r3
 80061f6:	481a      	ldr	r0, [pc, #104]	; (8006260 <HAL_TIM_MspPostInit+0x284>)
 80061f8:	f005 f9cc 	bl	800b594 <HAL_GPIO_Init>
}
 80061fc:	e024      	b.n	8006248 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1e      	ldr	r2, [pc, #120]	; (800627c <HAL_TIM_MspPostInit+0x2a0>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d11f      	bne.n	8006248 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006208:	4b12      	ldr	r3, [pc, #72]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 800620a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800620e:	4a11      	ldr	r2, [pc, #68]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 8006210:	f043 0302 	orr.w	r3, r3, #2
 8006214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006218:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <HAL_TIM_MspPostInit+0x278>)
 800621a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8006226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800622c:	2302      	movs	r3, #2
 800622e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006230:	2300      	movs	r3, #0
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006234:	2300      	movs	r3, #0
 8006236:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8006238:	2301      	movs	r3, #1
 800623a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 800623c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006240:	4619      	mov	r1, r3
 8006242:	4807      	ldr	r0, [pc, #28]	; (8006260 <HAL_TIM_MspPostInit+0x284>)
 8006244:	f005 f9a6 	bl	800b594 <HAL_GPIO_Init>
}
 8006248:	bf00      	nop
 800624a:	3740      	adds	r7, #64	; 0x40
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40010000 	.word	0x40010000
 8006254:	58024400 	.word	0x58024400
 8006258:	58020000 	.word	0x58020000
 800625c:	40000400 	.word	0x40000400
 8006260:	58020400 	.word	0x58020400
 8006264:	40000c00 	.word	0x40000c00
 8006268:	40001c00 	.word	0x40001c00
 800626c:	40002000 	.word	0x40002000
 8006270:	40014000 	.word	0x40014000
 8006274:	58021000 	.word	0x58021000
 8006278:	40014400 	.word	0x40014400
 800627c:	40014800 	.word	0x40014800

08006280 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006284:	4b24      	ldr	r3, [pc, #144]	; (8006318 <MX_UART5_Init+0x98>)
 8006286:	4a25      	ldr	r2, [pc, #148]	; (800631c <MX_UART5_Init+0x9c>)
 8006288:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 800628a:	4b23      	ldr	r3, [pc, #140]	; (8006318 <MX_UART5_Init+0x98>)
 800628c:	4a24      	ldr	r2, [pc, #144]	; (8006320 <MX_UART5_Init+0xa0>)
 800628e:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006290:	4b21      	ldr	r3, [pc, #132]	; (8006318 <MX_UART5_Init+0x98>)
 8006292:	2200      	movs	r2, #0
 8006294:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006296:	4b20      	ldr	r3, [pc, #128]	; (8006318 <MX_UART5_Init+0x98>)
 8006298:	2200      	movs	r2, #0
 800629a:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800629c:	4b1e      	ldr	r3, [pc, #120]	; (8006318 <MX_UART5_Init+0x98>)
 800629e:	2200      	movs	r2, #0
 80062a0:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80062a2:	4b1d      	ldr	r3, [pc, #116]	; (8006318 <MX_UART5_Init+0x98>)
 80062a4:	220c      	movs	r2, #12
 80062a6:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <MX_UART5_Init+0x98>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80062ae:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <MX_UART5_Init+0x98>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062b4:	4b18      	ldr	r3, [pc, #96]	; (8006318 <MX_UART5_Init+0x98>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062ba:	4b17      	ldr	r3, [pc, #92]	; (8006318 <MX_UART5_Init+0x98>)
 80062bc:	2200      	movs	r2, #0
 80062be:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 80062c0:	4b15      	ldr	r3, [pc, #84]	; (8006318 <MX_UART5_Init+0x98>)
 80062c2:	2208      	movs	r2, #8
 80062c4:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 80062c6:	4b14      	ldr	r3, [pc, #80]	; (8006318 <MX_UART5_Init+0x98>)
 80062c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80062cc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80062ce:	4812      	ldr	r0, [pc, #72]	; (8006318 <MX_UART5_Init+0x98>)
 80062d0:	f00c fb8e 	bl	80129f0 <HAL_UART_Init>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 80062da:	f7fe fc05 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062de:	2100      	movs	r1, #0
 80062e0:	480d      	ldr	r0, [pc, #52]	; (8006318 <MX_UART5_Init+0x98>)
 80062e2:	f00f f8da 	bl	801549a <HAL_UARTEx_SetTxFifoThreshold>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 80062ec:	f7fe fbfc 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062f0:	2100      	movs	r1, #0
 80062f2:	4809      	ldr	r0, [pc, #36]	; (8006318 <MX_UART5_Init+0x98>)
 80062f4:	f00f f90f 	bl	8015516 <HAL_UARTEx_SetRxFifoThreshold>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <MX_UART5_Init+0x82>
  {
    Error_Handler();
 80062fe:	f7fe fbf3 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8006302:	4805      	ldr	r0, [pc, #20]	; (8006318 <MX_UART5_Init+0x98>)
 8006304:	f00f f890 	bl	8015428 <HAL_UARTEx_DisableFifoMode>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <MX_UART5_Init+0x92>
  {
    Error_Handler();
 800630e:	f7fe fbeb 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006312:	bf00      	nop
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	200011cc 	.word	0x200011cc
 800631c:	40005000 	.word	0x40005000
 8006320:	000f4240 	.word	0x000f4240

08006324 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006328:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 800632a:	4a23      	ldr	r2, [pc, #140]	; (80063b8 <MX_USART1_UART_Init+0x94>)
 800632c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800632e:	4b21      	ldr	r3, [pc, #132]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 8006330:	4a22      	ldr	r2, [pc, #136]	; (80063bc <MX_USART1_UART_Init+0x98>)
 8006332:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006334:	4b1f      	ldr	r3, [pc, #124]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 8006336:	2200      	movs	r2, #0
 8006338:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800633a:	4b1e      	ldr	r3, [pc, #120]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 800633c:	2200      	movs	r2, #0
 800633e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006340:	4b1c      	ldr	r3, [pc, #112]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 8006342:	2200      	movs	r2, #0
 8006344:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006346:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 8006348:	220c      	movs	r2, #12
 800634a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800634c:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 800634e:	2200      	movs	r2, #0
 8006350:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006352:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 8006354:	2200      	movs	r2, #0
 8006356:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 800635a:	2200      	movs	r2, #0
 800635c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800635e:	4b15      	ldr	r3, [pc, #84]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 8006360:	2200      	movs	r2, #0
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006364:	4b13      	ldr	r3, [pc, #76]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 8006366:	2200      	movs	r2, #0
 8006368:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800636a:	4812      	ldr	r0, [pc, #72]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 800636c:	f00c fb40 	bl	80129f0 <HAL_UART_Init>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8006376:	f7fe fbb7 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800637a:	2100      	movs	r1, #0
 800637c:	480d      	ldr	r0, [pc, #52]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 800637e:	f00f f88c 	bl	801549a <HAL_UARTEx_SetTxFifoThreshold>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8006388:	f7fe fbae 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800638c:	2100      	movs	r1, #0
 800638e:	4809      	ldr	r0, [pc, #36]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 8006390:	f00f f8c1 	bl	8015516 <HAL_UARTEx_SetRxFifoThreshold>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800639a:	f7fe fba5 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800639e:	4805      	ldr	r0, [pc, #20]	; (80063b4 <MX_USART1_UART_Init+0x90>)
 80063a0:	f00f f842 	bl	8015428 <HAL_UARTEx_DisableFifoMode>
 80063a4:	4603      	mov	r3, r0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80063aa:	f7fe fb9d 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80063ae:	bf00      	nop
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	2000125c 	.word	0x2000125c
 80063b8:	40011000 	.word	0x40011000
 80063bc:	001e8480 	.word	0x001e8480

080063c0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80063c4:	4b22      	ldr	r3, [pc, #136]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063c6:	4a23      	ldr	r2, [pc, #140]	; (8006454 <MX_USART3_UART_Init+0x94>)
 80063c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80063ca:	4b21      	ldr	r3, [pc, #132]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80063d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80063d2:	4b1f      	ldr	r3, [pc, #124]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063da:	2200      	movs	r2, #0
 80063dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80063de:	4b1c      	ldr	r3, [pc, #112]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80063e4:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063e6:	220c      	movs	r2, #12
 80063e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063ea:	4b19      	ldr	r3, [pc, #100]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80063f0:	4b17      	ldr	r3, [pc, #92]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063f6:	4b16      	ldr	r3, [pc, #88]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80063fc:	4b14      	ldr	r3, [pc, #80]	; (8006450 <MX_USART3_UART_Init+0x90>)
 80063fe:	2200      	movs	r2, #0
 8006400:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006402:	4b13      	ldr	r3, [pc, #76]	; (8006450 <MX_USART3_UART_Init+0x90>)
 8006404:	2200      	movs	r2, #0
 8006406:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006408:	4811      	ldr	r0, [pc, #68]	; (8006450 <MX_USART3_UART_Init+0x90>)
 800640a:	f00c faf1 	bl	80129f0 <HAL_UART_Init>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006414:	f7fe fb68 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006418:	2100      	movs	r1, #0
 800641a:	480d      	ldr	r0, [pc, #52]	; (8006450 <MX_USART3_UART_Init+0x90>)
 800641c:	f00f f83d 	bl	801549a <HAL_UARTEx_SetTxFifoThreshold>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006426:	f7fe fb5f 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800642a:	2100      	movs	r1, #0
 800642c:	4808      	ldr	r0, [pc, #32]	; (8006450 <MX_USART3_UART_Init+0x90>)
 800642e:	f00f f872 	bl	8015516 <HAL_UARTEx_SetRxFifoThreshold>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006438:	f7fe fb56 	bl	8004ae8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800643c:	4804      	ldr	r0, [pc, #16]	; (8006450 <MX_USART3_UART_Init+0x90>)
 800643e:	f00e fff3 	bl	8015428 <HAL_UARTEx_DisableFifoMode>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006448:	f7fe fb4e 	bl	8004ae8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800644c:	bf00      	nop
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200012ec 	.word	0x200012ec
 8006454:	40004800 	.word	0x40004800

08006458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08e      	sub	sp, #56	; 0x38
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	609a      	str	r2, [r3, #8]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a86      	ldr	r2, [pc, #536]	; (8006690 <HAL_UART_MspInit+0x238>)
 8006476:	4293      	cmp	r3, r2
 8006478:	f040 8094 	bne.w	80065a4 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800647c:	4b85      	ldr	r3, [pc, #532]	; (8006694 <HAL_UART_MspInit+0x23c>)
 800647e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006482:	4a84      	ldr	r2, [pc, #528]	; (8006694 <HAL_UART_MspInit+0x23c>)
 8006484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006488:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800648c:	4b81      	ldr	r3, [pc, #516]	; (8006694 <HAL_UART_MspInit+0x23c>)
 800648e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006492:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006496:	623b      	str	r3, [r7, #32]
 8006498:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800649a:	4b7e      	ldr	r3, [pc, #504]	; (8006694 <HAL_UART_MspInit+0x23c>)
 800649c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a0:	4a7c      	ldr	r2, [pc, #496]	; (8006694 <HAL_UART_MspInit+0x23c>)
 80064a2:	f043 0302 	orr.w	r3, r3, #2
 80064a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064aa:	4b7a      	ldr	r3, [pc, #488]	; (8006694 <HAL_UART_MspInit+0x23c>)
 80064ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	61fb      	str	r3, [r7, #28]
 80064b6:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80064b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064be:	2302      	movs	r3, #2
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064c6:	2300      	movs	r3, #0
 80064c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80064ca:	230e      	movs	r3, #14
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064d2:	4619      	mov	r1, r3
 80064d4:	4870      	ldr	r0, [pc, #448]	; (8006698 <HAL_UART_MspInit+0x240>)
 80064d6:	f005 f85d 	bl	800b594 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80064da:	4b70      	ldr	r3, [pc, #448]	; (800669c <HAL_UART_MspInit+0x244>)
 80064dc:	4a70      	ldr	r2, [pc, #448]	; (80066a0 <HAL_UART_MspInit+0x248>)
 80064de:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80064e0:	4b6e      	ldr	r3, [pc, #440]	; (800669c <HAL_UART_MspInit+0x244>)
 80064e2:	2241      	movs	r2, #65	; 0x41
 80064e4:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064e6:	4b6d      	ldr	r3, [pc, #436]	; (800669c <HAL_UART_MspInit+0x244>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064ec:	4b6b      	ldr	r3, [pc, #428]	; (800669c <HAL_UART_MspInit+0x244>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064f2:	4b6a      	ldr	r3, [pc, #424]	; (800669c <HAL_UART_MspInit+0x244>)
 80064f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064f8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064fa:	4b68      	ldr	r3, [pc, #416]	; (800669c <HAL_UART_MspInit+0x244>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006500:	4b66      	ldr	r3, [pc, #408]	; (800669c <HAL_UART_MspInit+0x244>)
 8006502:	2200      	movs	r2, #0
 8006504:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8006506:	4b65      	ldr	r3, [pc, #404]	; (800669c <HAL_UART_MspInit+0x244>)
 8006508:	2200      	movs	r2, #0
 800650a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800650c:	4b63      	ldr	r3, [pc, #396]	; (800669c <HAL_UART_MspInit+0x244>)
 800650e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006512:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006514:	4b61      	ldr	r3, [pc, #388]	; (800669c <HAL_UART_MspInit+0x244>)
 8006516:	2200      	movs	r2, #0
 8006518:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800651a:	4860      	ldr	r0, [pc, #384]	; (800669c <HAL_UART_MspInit+0x244>)
 800651c:	f002 fe08 	bl	8009130 <HAL_DMA_Init>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8006526:	f7fe fadf 	bl	8004ae8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a5b      	ldr	r2, [pc, #364]	; (800669c <HAL_UART_MspInit+0x244>)
 800652e:	67da      	str	r2, [r3, #124]	; 0x7c
 8006530:	4a5a      	ldr	r2, [pc, #360]	; (800669c <HAL_UART_MspInit+0x244>)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8006536:	4b5b      	ldr	r3, [pc, #364]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 8006538:	4a5b      	ldr	r2, [pc, #364]	; (80066a8 <HAL_UART_MspInit+0x250>)
 800653a:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 800653c:	4b59      	ldr	r3, [pc, #356]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 800653e:	2242      	movs	r2, #66	; 0x42
 8006540:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006542:	4b58      	ldr	r3, [pc, #352]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 8006544:	2240      	movs	r2, #64	; 0x40
 8006546:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006548:	4b56      	ldr	r3, [pc, #344]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 800654a:	2200      	movs	r2, #0
 800654c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800654e:	4b55      	ldr	r3, [pc, #340]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 8006550:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006554:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006556:	4b53      	ldr	r3, [pc, #332]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 8006558:	2200      	movs	r2, #0
 800655a:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800655c:	4b51      	ldr	r3, [pc, #324]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 800655e:	2200      	movs	r2, #0
 8006560:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8006562:	4b50      	ldr	r3, [pc, #320]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 8006564:	2200      	movs	r2, #0
 8006566:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006568:	4b4e      	ldr	r3, [pc, #312]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 800656a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800656e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006570:	4b4c      	ldr	r3, [pc, #304]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 8006572:	2200      	movs	r2, #0
 8006574:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8006576:	484b      	ldr	r0, [pc, #300]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 8006578:	f002 fdda 	bl	8009130 <HAL_DMA_Init>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8006582:	f7fe fab1 	bl	8004ae8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a46      	ldr	r2, [pc, #280]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 800658a:	679a      	str	r2, [r3, #120]	; 0x78
 800658c:	4a45      	ldr	r2, [pc, #276]	; (80066a4 <HAL_UART_MspInit+0x24c>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8006592:	2200      	movs	r2, #0
 8006594:	2100      	movs	r1, #0
 8006596:	2035      	movs	r0, #53	; 0x35
 8006598:	f002 fb97 	bl	8008cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800659c:	2035      	movs	r0, #53	; 0x35
 800659e:	f002 fbae 	bl	8008cfe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80065a2:	e070      	b.n	8006686 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a40      	ldr	r2, [pc, #256]	; (80066ac <HAL_UART_MspInit+0x254>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d12f      	bne.n	800660e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80065ae:	4b39      	ldr	r3, [pc, #228]	; (8006694 <HAL_UART_MspInit+0x23c>)
 80065b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065b4:	4a37      	ldr	r2, [pc, #220]	; (8006694 <HAL_UART_MspInit+0x23c>)
 80065b6:	f043 0310 	orr.w	r3, r3, #16
 80065ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80065be:	4b35      	ldr	r3, [pc, #212]	; (8006694 <HAL_UART_MspInit+0x23c>)
 80065c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065c4:	f003 0310 	and.w	r3, r3, #16
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065cc:	4b31      	ldr	r3, [pc, #196]	; (8006694 <HAL_UART_MspInit+0x23c>)
 80065ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065d2:	4a30      	ldr	r2, [pc, #192]	; (8006694 <HAL_UART_MspInit+0x23c>)
 80065d4:	f043 0302 	orr.w	r3, r3, #2
 80065d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065dc:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <HAL_UART_MspInit+0x23c>)
 80065de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80065ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80065ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065f0:	2302      	movs	r3, #2
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065f8:	2300      	movs	r3, #0
 80065fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80065fc:	2304      	movs	r3, #4
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006604:	4619      	mov	r1, r3
 8006606:	4824      	ldr	r0, [pc, #144]	; (8006698 <HAL_UART_MspInit+0x240>)
 8006608:	f004 ffc4 	bl	800b594 <HAL_GPIO_Init>
}
 800660c:	e03b      	b.n	8006686 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a27      	ldr	r2, [pc, #156]	; (80066b0 <HAL_UART_MspInit+0x258>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d136      	bne.n	8006686 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006618:	4b1e      	ldr	r3, [pc, #120]	; (8006694 <HAL_UART_MspInit+0x23c>)
 800661a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800661e:	4a1d      	ldr	r2, [pc, #116]	; (8006694 <HAL_UART_MspInit+0x23c>)
 8006620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006624:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006628:	4b1a      	ldr	r3, [pc, #104]	; (8006694 <HAL_UART_MspInit+0x23c>)
 800662a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800662e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006636:	4b17      	ldr	r3, [pc, #92]	; (8006694 <HAL_UART_MspInit+0x23c>)
 8006638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800663c:	4a15      	ldr	r2, [pc, #84]	; (8006694 <HAL_UART_MspInit+0x23c>)
 800663e:	f043 0308 	orr.w	r3, r3, #8
 8006642:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006646:	4b13      	ldr	r3, [pc, #76]	; (8006694 <HAL_UART_MspInit+0x23c>)
 8006648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006654:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665a:	2302      	movs	r3, #2
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665e:	2300      	movs	r3, #0
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006662:	2300      	movs	r3, #0
 8006664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006666:	2307      	movs	r3, #7
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800666a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800666e:	4619      	mov	r1, r3
 8006670:	4810      	ldr	r0, [pc, #64]	; (80066b4 <HAL_UART_MspInit+0x25c>)
 8006672:	f004 ff8f 	bl	800b594 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006676:	2200      	movs	r2, #0
 8006678:	2100      	movs	r1, #0
 800667a:	2027      	movs	r0, #39	; 0x27
 800667c:	f002 fb25 	bl	8008cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006680:	2027      	movs	r0, #39	; 0x27
 8006682:	f002 fb3c 	bl	8008cfe <HAL_NVIC_EnableIRQ>
}
 8006686:	bf00      	nop
 8006688:	3738      	adds	r7, #56	; 0x38
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40005000 	.word	0x40005000
 8006694:	58024400 	.word	0x58024400
 8006698:	58020400 	.word	0x58020400
 800669c:	2000137c 	.word	0x2000137c
 80066a0:	40020010 	.word	0x40020010
 80066a4:	200013f4 	.word	0x200013f4
 80066a8:	40020028 	.word	0x40020028
 80066ac:	40011000 	.word	0x40011000
 80066b0:	40004800 	.word	0x40004800
 80066b4:	58020c00 	.word	0x58020c00

080066b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80066b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80066bc:	f7fe fc12 	bl	8004ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80066c0:	480c      	ldr	r0, [pc, #48]	; (80066f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80066c2:	490d      	ldr	r1, [pc, #52]	; (80066f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80066c4:	4a0d      	ldr	r2, [pc, #52]	; (80066fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80066c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066c8:	e002      	b.n	80066d0 <LoopCopyDataInit>

080066ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066ce:	3304      	adds	r3, #4

080066d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066d4:	d3f9      	bcc.n	80066ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066d6:	4a0a      	ldr	r2, [pc, #40]	; (8006700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80066d8:	4c0a      	ldr	r4, [pc, #40]	; (8006704 <LoopFillZerobss+0x22>)
  movs r3, #0
 80066da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066dc:	e001      	b.n	80066e2 <LoopFillZerobss>

080066de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066e0:	3204      	adds	r2, #4

080066e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066e4:	d3fb      	bcc.n	80066de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80066e6:	f00e ffa9 	bl	801563c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066ea:	f7fc fa29 	bl	8002b40 <main>
  bx  lr
 80066ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80066f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80066f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80066f8:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80066fc:	080169d0 	.word	0x080169d0
  ldr r2, =_sbss
 8006700:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8006704:	20001470 	.word	0x20001470

08006708 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006708:	e7fe      	b.n	8006708 <ADC_IRQHandler>
	...

0800670c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006712:	2003      	movs	r0, #3
 8006714:	f002 face 	bl	8008cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006718:	f007 fa88 	bl	800dc2c <HAL_RCC_GetSysClockFreq>
 800671c:	4602      	mov	r2, r0
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <HAL_Init+0x68>)
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	f003 030f 	and.w	r3, r3, #15
 8006728:	4913      	ldr	r1, [pc, #76]	; (8006778 <HAL_Init+0x6c>)
 800672a:	5ccb      	ldrb	r3, [r1, r3]
 800672c:	f003 031f 	and.w	r3, r3, #31
 8006730:	fa22 f303 	lsr.w	r3, r2, r3
 8006734:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006736:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <HAL_Init+0x68>)
 8006738:	699b      	ldr	r3, [r3, #24]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	4a0e      	ldr	r2, [pc, #56]	; (8006778 <HAL_Init+0x6c>)
 8006740:	5cd3      	ldrb	r3, [r2, r3]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	fa22 f303 	lsr.w	r3, r2, r3
 800674c:	4a0b      	ldr	r2, [pc, #44]	; (800677c <HAL_Init+0x70>)
 800674e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006750:	4a0b      	ldr	r2, [pc, #44]	; (8006780 <HAL_Init+0x74>)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006756:	2000      	movs	r0, #0
 8006758:	f000 f814 	bl	8006784 <HAL_InitTick>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e002      	b.n	800676c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006766:	f7fe fb29 	bl	8004dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	58024400 	.word	0x58024400
 8006778:	08016738 	.word	0x08016738
 800677c:	20000024 	.word	0x20000024
 8006780:	20000020 	.word	0x20000020

08006784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800678c:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <HAL_InitTick+0x60>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e021      	b.n	80067dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006798:	4b13      	ldr	r3, [pc, #76]	; (80067e8 <HAL_InitTick+0x64>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <HAL_InitTick+0x60>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	4619      	mov	r1, r3
 80067a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80067aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ae:	4618      	mov	r0, r3
 80067b0:	f002 fab3 	bl	8008d1a <HAL_SYSTICK_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e00e      	b.n	80067dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b0f      	cmp	r3, #15
 80067c2:	d80a      	bhi.n	80067da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067c4:	2200      	movs	r2, #0
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295
 80067cc:	f002 fa7d 	bl	8008cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067d0:	4a06      	ldr	r2, [pc, #24]	; (80067ec <HAL_InitTick+0x68>)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e000      	b.n	80067dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	2000002c 	.word	0x2000002c
 80067e8:	20000020 	.word	0x20000020
 80067ec:	20000028 	.word	0x20000028

080067f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80067f4:	4b06      	ldr	r3, [pc, #24]	; (8006810 <HAL_IncTick+0x20>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <HAL_IncTick+0x24>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4413      	add	r3, r2
 8006800:	4a04      	ldr	r2, [pc, #16]	; (8006814 <HAL_IncTick+0x24>)
 8006802:	6013      	str	r3, [r2, #0]
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	2000002c 	.word	0x2000002c
 8006814:	2000146c 	.word	0x2000146c

08006818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  return uwTick;
 800681c:	4b03      	ldr	r3, [pc, #12]	; (800682c <HAL_GetTick+0x14>)
 800681e:	681b      	ldr	r3, [r3, #0]
}
 8006820:	4618      	mov	r0, r3
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr
 800682a:	bf00      	nop
 800682c:	2000146c 	.word	0x2000146c

08006830 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006838:	f7ff ffee 	bl	8006818 <HAL_GetTick>
 800683c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d005      	beq.n	8006856 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800684a:	4b0a      	ldr	r3, [pc, #40]	; (8006874 <HAL_Delay+0x44>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	4413      	add	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006856:	bf00      	nop
 8006858:	f7ff ffde 	bl	8006818 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	429a      	cmp	r2, r3
 8006866:	d8f7      	bhi.n	8006858 <HAL_Delay+0x28>
  {
  }
}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	2000002c 	.word	0x2000002c

08006878 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	609a      	str	r2, [r3, #8]
}
 8006892:	bf00      	nop
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	609a      	str	r2, [r3, #8]
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3360      	adds	r3, #96	; 0x60
 80068f2:	461a      	mov	r2, r3
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a10      	ldr	r2, [pc, #64]	; (8006940 <LL_ADC_SetOffset+0x60>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d10b      	bne.n	800691c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	4313      	orrs	r3, r2
 8006912:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800691a:	e00b      	b.n	8006934 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	430b      	orrs	r3, r1
 800692e:	431a      	orrs	r2, r3
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	601a      	str	r2, [r3, #0]
}
 8006934:	bf00      	nop
 8006936:	371c      	adds	r7, #28
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	58026000 	.word	0x58026000

08006944 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	3360      	adds	r3, #96	; 0x60
 8006952:	461a      	mov	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006970:	b480      	push	{r7}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	fa01 f303 	lsl.w	r3, r1, r3
 8006990:	431a      	orrs	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	611a      	str	r2, [r3, #16]
}
 8006996:	bf00      	nop
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4a0c      	ldr	r2, [pc, #48]	; (80069e4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00e      	beq.n	80069d6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	3360      	adds	r3, #96	; 0x60
 80069bc:	461a      	mov	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	431a      	orrs	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	601a      	str	r2, [r3, #0]
  }
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	58026000 	.word	0x58026000

080069e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a0c      	ldr	r2, [pc, #48]	; (8006a28 <LL_ADC_SetOffsetSaturation+0x40>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d10e      	bne.n	8006a1a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3360      	adds	r3, #96	; 0x60
 8006a00:	461a      	mov	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	4413      	add	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	431a      	orrs	r2, r3
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	371c      	adds	r7, #28
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	58026000 	.word	0x58026000

08006a2c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4a0c      	ldr	r2, [pc, #48]	; (8006a6c <LL_ADC_SetOffsetSign+0x40>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10e      	bne.n	8006a5e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3360      	adds	r3, #96	; 0x60
 8006a44:	461a      	mov	r2, r3
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	58026000 	.word	0x58026000

08006a70 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	3360      	adds	r3, #96	; 0x60
 8006a80:	461a      	mov	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <LL_ADC_SetOffsetState+0x50>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d108      	bne.n	8006aa4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8006aa2:	e007      	b.n	8006ab4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	601a      	str	r2, [r3, #0]
}
 8006ab4:	bf00      	nop
 8006ab6:	371c      	adds	r7, #28
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	58026000 	.word	0x58026000

08006ac4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e000      	b.n	8006ade <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b087      	sub	sp, #28
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	60f8      	str	r0, [r7, #12]
 8006af2:	60b9      	str	r1, [r7, #8]
 8006af4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	3330      	adds	r3, #48	; 0x30
 8006afa:	461a      	mov	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	0a1b      	lsrs	r3, r3, #8
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	f003 030c 	and.w	r3, r3, #12
 8006b06:	4413      	add	r3, r2
 8006b08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	211f      	movs	r1, #31
 8006b16:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	0e9b      	lsrs	r3, r3, #26
 8006b22:	f003 011f 	and.w	r1, r3, #31
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006b30:	431a      	orrs	r2, r3
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006b36:	bf00      	nop
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006b56:	2301      	movs	r3, #1
 8006b58:	e000      	b.n	8006b5c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	3314      	adds	r3, #20
 8006b78:	461a      	mov	r2, r3
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	0e5b      	lsrs	r3, r3, #25
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	4413      	add	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	0d1b      	lsrs	r3, r3, #20
 8006b90:	f003 031f 	and.w	r3, r3, #31
 8006b94:	2107      	movs	r1, #7
 8006b96:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9a:	43db      	mvns	r3, r3
 8006b9c:	401a      	ands	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	0d1b      	lsrs	r3, r3, #20
 8006ba2:	f003 031f 	and.w	r3, r3, #31
 8006ba6:	6879      	ldr	r1, [r7, #4]
 8006ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8006bac:	431a      	orrs	r2, r3
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006bb2:	bf00      	nop
 8006bb4:	371c      	adds	r7, #28
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
	...

08006bc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4a1a      	ldr	r2, [pc, #104]	; (8006c38 <LL_ADC_SetChannelSingleDiff+0x78>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d115      	bne.n	8006c00 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f003 0318 	and.w	r3, r3, #24
 8006bea:	4914      	ldr	r1, [pc, #80]	; (8006c3c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8006bec:	40d9      	lsrs	r1, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	400b      	ands	r3, r1
 8006bf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8006bfe:	e014      	b.n	8006c2a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c0c:	43db      	mvns	r3, r3
 8006c0e:	401a      	ands	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f003 0318 	and.w	r3, r3, #24
 8006c16:	4909      	ldr	r1, [pc, #36]	; (8006c3c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8006c18:	40d9      	lsrs	r1, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	400b      	ands	r3, r1
 8006c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c22:	431a      	orrs	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	58026000 	.word	0x58026000
 8006c3c:	000fffff 	.word	0x000fffff

08006c40 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f003 031f 	and.w	r3, r3, #31
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <LL_ADC_DisableDeepPowerDown+0x20>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6093      	str	r3, [r2, #8]
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	5fffffc0 	.word	0x5fffffc0

08006c9c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cb0:	d101      	bne.n	8006cb6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <LL_ADC_EnableInternalRegulator+0x24>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	6fffffc0 	.word	0x6fffffc0

08006cec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d00:	d101      	bne.n	8006d06 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e000      	b.n	8006d08 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	4b05      	ldr	r3, [pc, #20]	; (8006d38 <LL_ADC_Enable+0x24>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	f043 0201 	orr.w	r2, r3, #1
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	7fffffc0 	.word	0x7fffffc0

08006d3c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <LL_ADC_Disable+0x24>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	f043 0202 	orr.w	r2, r3, #2
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	7fffffc0 	.word	0x7fffffc0

08006d64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 0301 	and.w	r3, r3, #1
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <LL_ADC_IsEnabled+0x18>
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <LL_ADC_IsEnabled+0x1a>
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr

08006d8a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d101      	bne.n	8006da2 <LL_ADC_IsDisableOngoing+0x18>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <LL_ADC_IsDisableOngoing+0x1a>
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689a      	ldr	r2, [r3, #8]
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <LL_ADC_REG_StartConversion+0x24>)
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	f043 0204 	orr.w	r2, r3, #4
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	7fffffc0 	.word	0x7fffffc0

08006dd8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d101      	bne.n	8006df0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b08      	cmp	r3, #8
 8006e10:	d101      	bne.n	8006e16 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006e12:	2301      	movs	r3, #1
 8006e14:	e000      	b.n	8006e18 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006e24:	b590      	push	{r4, r7, lr}
 8006e26:	b089      	sub	sp, #36	; 0x24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e1ee      	b.n	800721c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d109      	bne.n	8006e60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7f9 ff23 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff ff19 	bl	8006c9c <LL_ADC_IsDeepPowerDownEnabled>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff feff 	bl	8006c78 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7ff ff34 	bl	8006cec <LL_ADC_IsInternalRegulatorEnabled>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d114      	bne.n	8006eb4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff ff18 	bl	8006cc4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e94:	4b8e      	ldr	r3, [pc, #568]	; (80070d0 <HAL_ADC_Init+0x2ac>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	099b      	lsrs	r3, r3, #6
 8006e9a:	4a8e      	ldr	r2, [pc, #568]	; (80070d4 <HAL_ADC_Init+0x2b0>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	099b      	lsrs	r3, r3, #6
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ea6:	e002      	b.n	8006eae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1f9      	bne.n	8006ea8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff ff17 	bl	8006cec <LL_ADC_IsInternalRegulatorEnabled>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10d      	bne.n	8006ee0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec8:	f043 0210 	orr.w	r2, r3, #16
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ed4:	f043 0201 	orr.w	r2, r3, #1
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7ff ff77 	bl	8006dd8 <LL_ADC_REG_IsConversionOngoing>
 8006eea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef0:	f003 0310 	and.w	r3, r3, #16
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	f040 8188 	bne.w	800720a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f040 8184 	bne.w	800720a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f06:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006f0a:	f043 0202 	orr.w	r2, r3, #2
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff ff24 	bl	8006d64 <LL_ADC_IsEnabled>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d136      	bne.n	8006f90 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a6c      	ldr	r2, [pc, #432]	; (80070d8 <HAL_ADC_Init+0x2b4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d004      	beq.n	8006f36 <HAL_ADC_Init+0x112>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a6a      	ldr	r2, [pc, #424]	; (80070dc <HAL_ADC_Init+0x2b8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d10e      	bne.n	8006f54 <HAL_ADC_Init+0x130>
 8006f36:	4868      	ldr	r0, [pc, #416]	; (80070d8 <HAL_ADC_Init+0x2b4>)
 8006f38:	f7ff ff14 	bl	8006d64 <LL_ADC_IsEnabled>
 8006f3c:	4604      	mov	r4, r0
 8006f3e:	4867      	ldr	r0, [pc, #412]	; (80070dc <HAL_ADC_Init+0x2b8>)
 8006f40:	f7ff ff10 	bl	8006d64 <LL_ADC_IsEnabled>
 8006f44:	4603      	mov	r3, r0
 8006f46:	4323      	orrs	r3, r4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	e008      	b.n	8006f66 <HAL_ADC_Init+0x142>
 8006f54:	4862      	ldr	r0, [pc, #392]	; (80070e0 <HAL_ADC_Init+0x2bc>)
 8006f56:	f7ff ff05 	bl	8006d64 <LL_ADC_IsEnabled>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	bf0c      	ite	eq
 8006f60:	2301      	moveq	r3, #1
 8006f62:	2300      	movne	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d012      	beq.n	8006f90 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a5a      	ldr	r2, [pc, #360]	; (80070d8 <HAL_ADC_Init+0x2b4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d004      	beq.n	8006f7e <HAL_ADC_Init+0x15a>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a58      	ldr	r2, [pc, #352]	; (80070dc <HAL_ADC_Init+0x2b8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d101      	bne.n	8006f82 <HAL_ADC_Init+0x15e>
 8006f7e:	4a59      	ldr	r2, [pc, #356]	; (80070e4 <HAL_ADC_Init+0x2c0>)
 8006f80:	e000      	b.n	8006f84 <HAL_ADC_Init+0x160>
 8006f82:	4a59      	ldr	r2, [pc, #356]	; (80070e8 <HAL_ADC_Init+0x2c4>)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	f7ff fc74 	bl	8006878 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a52      	ldr	r2, [pc, #328]	; (80070e0 <HAL_ADC_Init+0x2bc>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d129      	bne.n	8006fee <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	7e5b      	ldrb	r3, [r3, #25]
 8006f9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006fa4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8006faa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	2b08      	cmp	r3, #8
 8006fb2:	d013      	beq.n	8006fdc <HAL_ADC_Init+0x1b8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b0c      	cmp	r3, #12
 8006fba:	d00d      	beq.n	8006fd8 <HAL_ADC_Init+0x1b4>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b1c      	cmp	r3, #28
 8006fc2:	d007      	beq.n	8006fd4 <HAL_ADC_Init+0x1b0>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b18      	cmp	r3, #24
 8006fca:	d101      	bne.n	8006fd0 <HAL_ADC_Init+0x1ac>
 8006fcc:	2318      	movs	r3, #24
 8006fce:	e006      	b.n	8006fde <HAL_ADC_Init+0x1ba>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e004      	b.n	8006fde <HAL_ADC_Init+0x1ba>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	e002      	b.n	8006fde <HAL_ADC_Init+0x1ba>
 8006fd8:	2308      	movs	r3, #8
 8006fda:	e000      	b.n	8006fde <HAL_ADC_Init+0x1ba>
 8006fdc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8006fde:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fe6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	61bb      	str	r3, [r7, #24]
 8006fec:	e00e      	b.n	800700c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	7e5b      	ldrb	r3, [r3, #25]
 8006ff2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8006ff8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8006ffe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007006:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007008:	4313      	orrs	r3, r2
 800700a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d106      	bne.n	8007024 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	3b01      	subs	r3, #1
 800701c:	045b      	lsls	r3, r3, #17
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	4313      	orrs	r3, r2
 8007022:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	2b00      	cmp	r3, #0
 800702a:	d009      	beq.n	8007040 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	4313      	orrs	r3, r2
 800703e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a26      	ldr	r2, [pc, #152]	; (80070e0 <HAL_ADC_Init+0x2bc>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d115      	bne.n	8007076 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	4b26      	ldr	r3, [pc, #152]	; (80070ec <HAL_ADC_Init+0x2c8>)
 8007052:	4013      	ands	r3, r2
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	69b9      	ldr	r1, [r7, #24]
 800705a:	430b      	orrs	r3, r1
 800705c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	611a      	str	r2, [r3, #16]
 8007074:	e009      	b.n	800708a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <HAL_ADC_Init+0x2cc>)
 800707e:	4013      	ands	r3, r2
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	69b9      	ldr	r1, [r7, #24]
 8007086:	430b      	orrs	r3, r1
 8007088:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7ff fea2 	bl	8006dd8 <LL_ADC_REG_IsConversionOngoing>
 8007094:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff feaf 	bl	8006dfe <LL_ADC_INJ_IsConversionOngoing>
 80070a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 808e 	bne.w	80071c6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f040 808a 	bne.w	80071c6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <HAL_ADC_Init+0x2bc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d11b      	bne.n	80070f4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	7e1b      	ldrb	r3, [r3, #24]
 80070c0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070c8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80070ca:	4313      	orrs	r3, r2
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	e018      	b.n	8007102 <HAL_ADC_Init+0x2de>
 80070d0:	20000020 	.word	0x20000020
 80070d4:	053e2d63 	.word	0x053e2d63
 80070d8:	40022000 	.word	0x40022000
 80070dc:	40022100 	.word	0x40022100
 80070e0:	58026000 	.word	0x58026000
 80070e4:	40022300 	.word	0x40022300
 80070e8:	58026300 	.word	0x58026300
 80070ec:	fff04007 	.word	0xfff04007
 80070f0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7e1b      	ldrb	r3, [r3, #24]
 80070f8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80070fe:	4313      	orrs	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68da      	ldr	r2, [r3, #12]
 8007108:	4b46      	ldr	r3, [pc, #280]	; (8007224 <HAL_ADC_Init+0x400>)
 800710a:	4013      	ands	r3, r2
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	6812      	ldr	r2, [r2, #0]
 8007110:	69b9      	ldr	r1, [r7, #24]
 8007112:	430b      	orrs	r3, r1
 8007114:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800711c:	2b01      	cmp	r3, #1
 800711e:	d137      	bne.n	8007190 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a3f      	ldr	r2, [pc, #252]	; (8007228 <HAL_ADC_Init+0x404>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d116      	bne.n	800715e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	691a      	ldr	r2, [r3, #16]
 8007136:	4b3d      	ldr	r3, [pc, #244]	; (800722c <HAL_ADC_Init+0x408>)
 8007138:	4013      	ands	r3, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007142:	4311      	orrs	r1, r2
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007148:	4311      	orrs	r1, r2
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800714e:	430a      	orrs	r2, r1
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	611a      	str	r2, [r3, #16]
 800715c:	e020      	b.n	80071a0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	691a      	ldr	r2, [r3, #16]
 8007164:	4b32      	ldr	r3, [pc, #200]	; (8007230 <HAL_ADC_Init+0x40c>)
 8007166:	4013      	ands	r3, r2
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800716c:	3a01      	subs	r2, #1
 800716e:	0411      	lsls	r1, r2, #16
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007174:	4311      	orrs	r1, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800717a:	4311      	orrs	r1, r2
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007180:	430a      	orrs	r2, r1
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0201 	orr.w	r2, r2, #1
 800718c:	611a      	str	r2, [r3, #16]
 800718e:	e007      	b.n	80071a0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	691a      	ldr	r2, [r3, #16]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f022 0201 	bic.w	r2, r2, #1
 800719e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1b      	ldr	r2, [pc, #108]	; (8007228 <HAL_ADC_Init+0x404>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d002      	beq.n	80071c6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f001 f9e9 	bl	8008598 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d10c      	bne.n	80071e8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	f023 010f 	bic.w	r1, r3, #15
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	1e5a      	subs	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30
 80071e6:	e007      	b.n	80071f8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 020f 	bic.w	r2, r2, #15
 80071f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fc:	f023 0303 	bic.w	r3, r3, #3
 8007200:	f043 0201 	orr.w	r2, r3, #1
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	661a      	str	r2, [r3, #96]	; 0x60
 8007208:	e007      	b.n	800721a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720e:	f043 0210 	orr.w	r2, r3, #16
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800721a:	7ffb      	ldrb	r3, [r7, #31]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3724      	adds	r7, #36	; 0x24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd90      	pop	{r4, r7, pc}
 8007224:	ffffbffc 	.word	0xffffbffc
 8007228:	58026000 	.word	0x58026000
 800722c:	fc00f81f 	.word	0xfc00f81f
 8007230:	fc00f81e 	.word	0xfc00f81e

08007234 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a90      	ldr	r2, [pc, #576]	; (8007484 <HAL_ADC_Start_IT+0x250>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d004      	beq.n	8007250 <HAL_ADC_Start_IT+0x1c>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a8f      	ldr	r2, [pc, #572]	; (8007488 <HAL_ADC_Start_IT+0x254>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d101      	bne.n	8007254 <HAL_ADC_Start_IT+0x20>
 8007250:	4b8e      	ldr	r3, [pc, #568]	; (800748c <HAL_ADC_Start_IT+0x258>)
 8007252:	e000      	b.n	8007256 <HAL_ADC_Start_IT+0x22>
 8007254:	4b8e      	ldr	r3, [pc, #568]	; (8007490 <HAL_ADC_Start_IT+0x25c>)
 8007256:	4618      	mov	r0, r3
 8007258:	f7ff fcf2 	bl	8006c40 <LL_ADC_GetMultimode>
 800725c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff fdb8 	bl	8006dd8 <LL_ADC_REG_IsConversionOngoing>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	f040 8119 	bne.w	80074a2 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_ADC_Start_IT+0x4a>
 800727a:	2302      	movs	r3, #2
 800727c:	e116      	b.n	80074ac <HAL_ADC_Start_IT+0x278>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 f89c 	bl	80083c4 <ADC_Enable>
 800728c:	4603      	mov	r3, r0
 800728e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f040 8100 	bne.w	8007498 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800729c:	4b7d      	ldr	r3, [pc, #500]	; (8007494 <HAL_ADC_Start_IT+0x260>)
 800729e:	4013      	ands	r3, r2
 80072a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a76      	ldr	r2, [pc, #472]	; (8007488 <HAL_ADC_Start_IT+0x254>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d002      	beq.n	80072b8 <HAL_ADC_Start_IT+0x84>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	e000      	b.n	80072ba <HAL_ADC_Start_IT+0x86>
 80072b8:	4b72      	ldr	r3, [pc, #456]	; (8007484 <HAL_ADC_Start_IT+0x250>)
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	6812      	ldr	r2, [r2, #0]
 80072be:	4293      	cmp	r3, r2
 80072c0:	d002      	beq.n	80072c8 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d105      	bne.n	80072d4 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072cc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d006      	beq.n	80072ee <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072e4:	f023 0206 	bic.w	r2, r3, #6
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	665a      	str	r2, [r3, #100]	; 0x64
 80072ec:	e002      	b.n	80072f4 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	221c      	movs	r2, #28
 80072fa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 021c 	bic.w	r2, r2, #28
 8007312:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	2b08      	cmp	r3, #8
 800731a:	d108      	bne.n	800732e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0208 	orr.w	r2, r2, #8
 800732a:	605a      	str	r2, [r3, #4]
          break;
 800732c:	e008      	b.n	8007340 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0204 	orr.w	r2, r2, #4
 800733c:	605a      	str	r2, [r3, #4]
          break;
 800733e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d107      	bne.n	8007358 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0210 	orr.w	r2, r2, #16
 8007356:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a4a      	ldr	r2, [pc, #296]	; (8007488 <HAL_ADC_Start_IT+0x254>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d002      	beq.n	8007368 <HAL_ADC_Start_IT+0x134>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	e000      	b.n	800736a <HAL_ADC_Start_IT+0x136>
 8007368:	4b46      	ldr	r3, [pc, #280]	; (8007484 <HAL_ADC_Start_IT+0x250>)
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	4293      	cmp	r3, r2
 8007370:	d008      	beq.n	8007384 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b05      	cmp	r3, #5
 800737c:	d002      	beq.n	8007384 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b09      	cmp	r3, #9
 8007382:	d13b      	bne.n	80073fc <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d02d      	beq.n	80073ee <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007396:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800739a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	2b08      	cmp	r3, #8
 80073a8:	d110      	bne.n	80073cc <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f022 0220 	bic.w	r2, r2, #32
 80073b8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073c8:	605a      	str	r2, [r3, #4]
              break;
 80073ca:	e011      	b.n	80073f0 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073da:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0220 	orr.w	r2, r2, #32
 80073ea:	605a      	str	r2, [r3, #4]
              break;
 80073ec:	e000      	b.n	80073f0 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80073ee:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fcdb 	bl	8006db0 <LL_ADC_REG_StartConversion>
 80073fa:	e056      	b.n	80074aa <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007400:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1e      	ldr	r2, [pc, #120]	; (8007488 <HAL_ADC_Start_IT+0x254>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d002      	beq.n	8007418 <HAL_ADC_Start_IT+0x1e4>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	e000      	b.n	800741a <HAL_ADC_Start_IT+0x1e6>
 8007418:	4b1a      	ldr	r3, [pc, #104]	; (8007484 <HAL_ADC_Start_IT+0x250>)
 800741a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d03f      	beq.n	80074a8 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007430:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	2b08      	cmp	r3, #8
 800743e:	d110      	bne.n	8007462 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0220 	bic.w	r2, r2, #32
 800744e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800745e:	605a      	str	r2, [r3, #4]
              break;
 8007460:	e023      	b.n	80074aa <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007470:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0220 	orr.w	r2, r2, #32
 8007480:	605a      	str	r2, [r3, #4]
              break;
 8007482:	e012      	b.n	80074aa <HAL_ADC_Start_IT+0x276>
 8007484:	40022000 	.word	0x40022000
 8007488:	40022100 	.word	0x40022100
 800748c:	40022300 	.word	0x40022300
 8007490:	58026300 	.word	0x58026300
 8007494:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80074a0:	e003      	b.n	80074aa <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80074a2:	2302      	movs	r3, #2
 80074a4:	75fb      	strb	r3, [r7, #23]
 80074a6:	e000      	b.n	80074aa <HAL_ADC_Start_IT+0x276>
        }
 80074a8:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
	...

080074d0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	; 0x28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80074d8:	2300      	movs	r3, #0
 80074da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a87      	ldr	r2, [pc, #540]	; (8007710 <HAL_ADC_IRQHandler+0x240>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d004      	beq.n	8007500 <HAL_ADC_IRQHandler+0x30>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a86      	ldr	r2, [pc, #536]	; (8007714 <HAL_ADC_IRQHandler+0x244>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d101      	bne.n	8007504 <HAL_ADC_IRQHandler+0x34>
 8007500:	4b85      	ldr	r3, [pc, #532]	; (8007718 <HAL_ADC_IRQHandler+0x248>)
 8007502:	e000      	b.n	8007506 <HAL_ADC_IRQHandler+0x36>
 8007504:	4b85      	ldr	r3, [pc, #532]	; (800771c <HAL_ADC_IRQHandler+0x24c>)
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fb9a 	bl	8006c40 <LL_ADC_GetMultimode>
 800750c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d017      	beq.n	8007548 <HAL_ADC_IRQHandler+0x78>
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b00      	cmp	r3, #0
 8007520:	d012      	beq.n	8007548 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007526:	f003 0310 	and.w	r3, r3, #16
 800752a:	2b00      	cmp	r3, #0
 800752c:	d105      	bne.n	800753a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007532:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 f9fe 	bl	800893c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2202      	movs	r2, #2
 8007546:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <HAL_ADC_IRQHandler+0x8c>
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	f003 0304 	and.w	r3, r3, #4
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 8083 	beq.w	800766e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d07d      	beq.n	800766e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007576:	f003 0310 	and.w	r3, r3, #16
 800757a:	2b00      	cmp	r3, #0
 800757c:	d105      	bne.n	800758a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007582:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f7ff fa98 	bl	8006ac4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d062      	beq.n	8007660 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a5d      	ldr	r2, [pc, #372]	; (8007714 <HAL_ADC_IRQHandler+0x244>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d002      	beq.n	80075aa <HAL_ADC_IRQHandler+0xda>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	e000      	b.n	80075ac <HAL_ADC_IRQHandler+0xdc>
 80075aa:	4b59      	ldr	r3, [pc, #356]	; (8007710 <HAL_ADC_IRQHandler+0x240>)
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	6812      	ldr	r2, [r2, #0]
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d008      	beq.n	80075c6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d005      	beq.n	80075c6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b05      	cmp	r3, #5
 80075be:	d002      	beq.n	80075c6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d104      	bne.n	80075d0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	623b      	str	r3, [r7, #32]
 80075ce:	e00c      	b.n	80075ea <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a4f      	ldr	r2, [pc, #316]	; (8007714 <HAL_ADC_IRQHandler+0x244>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d002      	beq.n	80075e0 <HAL_ADC_IRQHandler+0x110>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	e000      	b.n	80075e2 <HAL_ADC_IRQHandler+0x112>
 80075e0:	4b4b      	ldr	r3, [pc, #300]	; (8007710 <HAL_ADC_IRQHandler+0x240>)
 80075e2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d135      	bne.n	8007660 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d12e      	bne.n	8007660 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f7ff fbe6 	bl	8006dd8 <LL_ADC_REG_IsConversionOngoing>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d11a      	bne.n	8007648 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f022 020c 	bic.w	r2, r2, #12
 8007620:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d112      	bne.n	8007660 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800763e:	f043 0201 	orr.w	r2, r3, #1
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	661a      	str	r2, [r3, #96]	; 0x60
 8007646:	e00b      	b.n	8007660 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800764c:	f043 0210 	orr.w	r2, r3, #16
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007658:	f043 0201 	orr.w	r2, r3, #1
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fb fe9d 	bl	80033a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	220c      	movs	r2, #12
 800766c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	f003 0320 	and.w	r3, r3, #32
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <HAL_ADC_IRQHandler+0x1b2>
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10b      	bne.n	800769a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80a0 	beq.w	80077ce <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 809a 	beq.w	80077ce <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800769e:	f003 0310 	and.w	r3, r3, #16
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d105      	bne.n	80076b2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076aa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff fa43 	bl	8006b42 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80076bc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff f9fe 	bl	8006ac4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80076c8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a11      	ldr	r2, [pc, #68]	; (8007714 <HAL_ADC_IRQHandler+0x244>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d002      	beq.n	80076da <HAL_ADC_IRQHandler+0x20a>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	e000      	b.n	80076dc <HAL_ADC_IRQHandler+0x20c>
 80076da:	4b0d      	ldr	r3, [pc, #52]	; (8007710 <HAL_ADC_IRQHandler+0x240>)
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	6812      	ldr	r2, [r2, #0]
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d008      	beq.n	80076f6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b06      	cmp	r3, #6
 80076ee:	d002      	beq.n	80076f6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	2b07      	cmp	r3, #7
 80076f4:	d104      	bne.n	8007700 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	623b      	str	r3, [r7, #32]
 80076fe:	e014      	b.n	800772a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a03      	ldr	r2, [pc, #12]	; (8007714 <HAL_ADC_IRQHandler+0x244>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00a      	beq.n	8007720 <HAL_ADC_IRQHandler+0x250>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	e008      	b.n	8007722 <HAL_ADC_IRQHandler+0x252>
 8007710:	40022000 	.word	0x40022000
 8007714:	40022100 	.word	0x40022100
 8007718:	40022300 	.word	0x40022300
 800771c:	58026300 	.word	0x58026300
 8007720:	4b84      	ldr	r3, [pc, #528]	; (8007934 <HAL_ADC_IRQHandler+0x464>)
 8007722:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d047      	beq.n	80077c0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d007      	beq.n	800774a <HAL_ADC_IRQHandler+0x27a>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d03f      	beq.n	80077c0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007746:	2b00      	cmp	r3, #0
 8007748:	d13a      	bne.n	80077c0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007754:	2b40      	cmp	r3, #64	; 0x40
 8007756:	d133      	bne.n	80077c0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d12e      	bne.n	80077c0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fb49 	bl	8006dfe <LL_ADC_INJ_IsConversionOngoing>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d11a      	bne.n	80077a8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007780:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007786:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007796:	2b00      	cmp	r3, #0
 8007798:	d112      	bne.n	80077c0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779e:	f043 0201 	orr.w	r2, r3, #1
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	661a      	str	r2, [r3, #96]	; 0x60
 80077a6:	e00b      	b.n	80077c0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ac:	f043 0210 	orr.w	r2, r3, #16
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077b8:	f043 0201 	orr.w	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 f893 	bl	80088ec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2260      	movs	r2, #96	; 0x60
 80077cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d011      	beq.n	80077fc <HAL_ADC_IRQHandler+0x32c>
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00c      	beq.n	80077fc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f8a8 	bl	8007944 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2280      	movs	r2, #128	; 0x80
 80077fa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007802:	2b00      	cmp	r3, #0
 8007804:	d012      	beq.n	800782c <HAL_ADC_IRQHandler+0x35c>
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00d      	beq.n	800782c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007814:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f001 f879 	bl	8008914 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f44f 7280 	mov.w	r2, #256	; 0x100
 800782a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007832:	2b00      	cmp	r3, #0
 8007834:	d012      	beq.n	800785c <HAL_ADC_IRQHandler+0x38c>
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00d      	beq.n	800785c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007844:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f86b 	bl	8008928 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800785a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	f003 0310 	and.w	r3, r3, #16
 8007862:	2b00      	cmp	r3, #0
 8007864:	d043      	beq.n	80078ee <HAL_ADC_IRQHandler+0x41e>
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	f003 0310 	and.w	r3, r3, #16
 800786c:	2b00      	cmp	r3, #0
 800786e:	d03e      	beq.n	80078ee <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d102      	bne.n	800787e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8007878:	2301      	movs	r3, #1
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
 800787c:	e021      	b.n	80078c2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d015      	beq.n	80078b0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a2a      	ldr	r2, [pc, #168]	; (8007934 <HAL_ADC_IRQHandler+0x464>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d004      	beq.n	8007898 <HAL_ADC_IRQHandler+0x3c8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a29      	ldr	r2, [pc, #164]	; (8007938 <HAL_ADC_IRQHandler+0x468>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d101      	bne.n	800789c <HAL_ADC_IRQHandler+0x3cc>
 8007898:	4b28      	ldr	r3, [pc, #160]	; (800793c <HAL_ADC_IRQHandler+0x46c>)
 800789a:	e000      	b.n	800789e <HAL_ADC_IRQHandler+0x3ce>
 800789c:	4b28      	ldr	r3, [pc, #160]	; (8007940 <HAL_ADC_IRQHandler+0x470>)
 800789e:	4618      	mov	r0, r3
 80078a0:	f7ff f9dc 	bl	8006c5c <LL_ADC_GetMultiDMATransfer>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00b      	beq.n	80078c2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80078aa:	2301      	movs	r3, #1
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
 80078ae:	e008      	b.n	80078c2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f003 0303 	and.w	r3, r3, #3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80078be:	2301      	movs	r3, #1
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d10e      	bne.n	80078e6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d8:	f043 0202 	orr.w	r2, r3, #2
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f839 	bl	8007958 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2210      	movs	r2, #16
 80078ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d018      	beq.n	800792a <HAL_ADC_IRQHandler+0x45a>
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d013      	beq.n	800792a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007906:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007912:	f043 0208 	orr.w	r2, r3, #8
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007922:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 ffeb 	bl	8008900 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800792a:	bf00      	nop
 800792c:	3728      	adds	r7, #40	; 0x28
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40022000 	.word	0x40022000
 8007938:	40022100 	.word	0x40022100
 800793c:	40022300 	.word	0x40022300
 8007940:	58026300 	.word	0x58026300

08007944 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b0b9      	sub	sp, #228	; 0xe4
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800797c:	2300      	movs	r3, #0
 800797e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007986:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	4aa9      	ldr	r2, [pc, #676]	; (8007c34 <HAL_ADC_ConfigChannel+0x2c8>)
 800798e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007996:	2b01      	cmp	r3, #1
 8007998:	d102      	bne.n	80079a0 <HAL_ADC_ConfigChannel+0x34>
 800799a:	2302      	movs	r3, #2
 800799c:	f000 bcfa 	b.w	8008394 <HAL_ADC_ConfigChannel+0xa28>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff fa13 	bl	8006dd8 <LL_ADC_REG_IsConversionOngoing>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f040 84de 	bne.w	8008376 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a9e      	ldr	r2, [pc, #632]	; (8007c38 <HAL_ADC_ConfigChannel+0x2cc>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d033      	beq.n	8007a2c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d108      	bne.n	80079e2 <HAL_ADC_ConfigChannel+0x76>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	0e9b      	lsrs	r3, r3, #26
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	2201      	movs	r2, #1
 80079dc:	fa02 f303 	lsl.w	r3, r2, r3
 80079e0:	e01d      	b.n	8007a1e <HAL_ADC_ConfigChannel+0xb2>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80079ee:	fa93 f3a3 	rbit	r3, r3
 80079f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80079f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80079fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80079fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8007a06:	2320      	movs	r3, #32
 8007a08:	e004      	b.n	8007a14 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8007a0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a0e:	fab3 f383 	clz	r3, r3
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	2201      	movs	r2, #1
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	69d1      	ldr	r1, [r2, #28]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6812      	ldr	r2, [r2, #0]
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6818      	ldr	r0, [r3, #0]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	6859      	ldr	r1, [r3, #4]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	f7ff f856 	bl	8006aea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff f9c8 	bl	8006dd8 <LL_ADC_REG_IsConversionOngoing>
 8007a48:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff f9d4 	bl	8006dfe <LL_ADC_INJ_IsConversionOngoing>
 8007a56:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	f040 8270 	bne.w	8007f44 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 826b 	bne.w	8007f44 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6819      	ldr	r1, [r3, #0]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f7ff f874 	bl	8006b68 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a6c      	ldr	r2, [pc, #432]	; (8007c38 <HAL_ADC_ConfigChannel+0x2cc>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d10d      	bne.n	8007aa6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695a      	ldr	r2, [r3, #20]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	08db      	lsrs	r3, r3, #3
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007aa4:	e032      	b.n	8007b0c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007aa6:	4b65      	ldr	r3, [pc, #404]	; (8007c3c <HAL_ADC_ConfigChannel+0x2d0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ab2:	d10b      	bne.n	8007acc <HAL_ADC_ConfigChannel+0x160>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	695a      	ldr	r2, [r3, #20]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	089b      	lsrs	r3, r3, #2
 8007ac0:	f003 0307 	and.w	r3, r3, #7
 8007ac4:	005b      	lsls	r3, r3, #1
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	e01d      	b.n	8007b08 <HAL_ADC_ConfigChannel+0x19c>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10b      	bne.n	8007af2 <HAL_ADC_ConfigChannel+0x186>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	695a      	ldr	r2, [r3, #20]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	089b      	lsrs	r3, r3, #2
 8007ae6:	f003 0307 	and.w	r3, r3, #7
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	fa02 f303 	lsl.w	r3, r2, r3
 8007af0:	e00a      	b.n	8007b08 <HAL_ADC_ConfigChannel+0x19c>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	695a      	ldr	r2, [r3, #20]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	089b      	lsrs	r3, r3, #2
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	fa02 f303 	lsl.w	r3, r2, r3
 8007b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d048      	beq.n	8007ba6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6818      	ldr	r0, [r3, #0]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	6919      	ldr	r1, [r3, #16]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b24:	f7fe fedc 	bl	80068e0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a42      	ldr	r2, [pc, #264]	; (8007c38 <HAL_ADC_ConfigChannel+0x2cc>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d119      	bne.n	8007b66 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6818      	ldr	r0, [r3, #0]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	6919      	ldr	r1, [r3, #16]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f7fe ff74 	bl	8006a2c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	6919      	ldr	r1, [r3, #16]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d102      	bne.n	8007b5c <HAL_ADC_ConfigChannel+0x1f0>
 8007b56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007b5a:	e000      	b.n	8007b5e <HAL_ADC_ConfigChannel+0x1f2>
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	461a      	mov	r2, r3
 8007b60:	f7fe ff42 	bl	80069e8 <LL_ADC_SetOffsetSaturation>
 8007b64:	e1ee      	b.n	8007f44 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6818      	ldr	r0, [r3, #0]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	6919      	ldr	r1, [r3, #16]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d102      	bne.n	8007b7e <HAL_ADC_ConfigChannel+0x212>
 8007b78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b7c:	e000      	b.n	8007b80 <HAL_ADC_ConfigChannel+0x214>
 8007b7e:	2300      	movs	r3, #0
 8007b80:	461a      	mov	r2, r3
 8007b82:	f7fe ff0f 	bl	80069a4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	6919      	ldr	r1, [r3, #16]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	7e1b      	ldrb	r3, [r3, #24]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d102      	bne.n	8007b9c <HAL_ADC_ConfigChannel+0x230>
 8007b96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007b9a:	e000      	b.n	8007b9e <HAL_ADC_ConfigChannel+0x232>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	f7fe fee6 	bl	8006970 <LL_ADC_SetDataRightShift>
 8007ba4:	e1ce      	b.n	8007f44 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a23      	ldr	r2, [pc, #140]	; (8007c38 <HAL_ADC_ConfigChannel+0x2cc>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	f040 8181 	bne.w	8007eb4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fe fec3 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10a      	bne.n	8007bde <HAL_ADC_ConfigChannel+0x272>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe feb8 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	0e9b      	lsrs	r3, r3, #26
 8007bd8:	f003 021f 	and.w	r2, r3, #31
 8007bdc:	e01e      	b.n	8007c1c <HAL_ADC_ConfigChannel+0x2b0>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2100      	movs	r1, #0
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7fe fead 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bf0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bf4:	fa93 f3a3 	rbit	r3, r3
 8007bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8007bfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8007c04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	e004      	b.n	8007c1a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8007c10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007c14:	fab3 f383 	clz	r3, r3
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10b      	bne.n	8007c40 <HAL_ADC_ConfigChannel+0x2d4>
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	0e9b      	lsrs	r3, r3, #26
 8007c2e:	f003 031f 	and.w	r3, r3, #31
 8007c32:	e01e      	b.n	8007c72 <HAL_ADC_ConfigChannel+0x306>
 8007c34:	47ff0000 	.word	0x47ff0000
 8007c38:	58026000 	.word	0x58026000
 8007c3c:	5c001000 	.word	0x5c001000
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c4c:	fa93 f3a3 	rbit	r3, r3
 8007c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8007c54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8007c5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d101      	bne.n	8007c68 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8007c64:	2320      	movs	r3, #32
 8007c66:	e004      	b.n	8007c72 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8007c68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c6c:	fab3 f383 	clz	r3, r3
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d106      	bne.n	8007c84 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fef6 	bl	8006a70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2101      	movs	r1, #1
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7fe fe5a 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007c90:	4603      	mov	r3, r0
 8007c92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10a      	bne.n	8007cb0 <HAL_ADC_ConfigChannel+0x344>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fe fe4f 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	0e9b      	lsrs	r3, r3, #26
 8007caa:	f003 021f 	and.w	r2, r3, #31
 8007cae:	e01e      	b.n	8007cee <HAL_ADC_ConfigChannel+0x382>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2101      	movs	r1, #1
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe fe44 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007cc6:	fa93 f3a3 	rbit	r3, r3
 8007cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8007cce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8007cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d101      	bne.n	8007ce2 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8007cde:	2320      	movs	r3, #32
 8007ce0:	e004      	b.n	8007cec <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8007ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ce6:	fab3 f383 	clz	r3, r3
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	461a      	mov	r2, r3
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d105      	bne.n	8007d06 <HAL_ADC_ConfigChannel+0x39a>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	0e9b      	lsrs	r3, r3, #26
 8007d00:	f003 031f 	and.w	r3, r3, #31
 8007d04:	e018      	b.n	8007d38 <HAL_ADC_ConfigChannel+0x3cc>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d12:	fa93 f3a3 	rbit	r3, r3
 8007d16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8007d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007d1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8007d22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8007d2a:	2320      	movs	r3, #32
 8007d2c:	e004      	b.n	8007d38 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8007d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d32:	fab3 f383 	clz	r3, r3
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d106      	bne.n	8007d4a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2200      	movs	r2, #0
 8007d42:	2101      	movs	r1, #1
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fe93 	bl	8006a70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2102      	movs	r1, #2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fdf7 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007d56:	4603      	mov	r3, r0
 8007d58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d10a      	bne.n	8007d76 <HAL_ADC_ConfigChannel+0x40a>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2102      	movs	r1, #2
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fdec 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	0e9b      	lsrs	r3, r3, #26
 8007d70:	f003 021f 	and.w	r2, r3, #31
 8007d74:	e01e      	b.n	8007db4 <HAL_ADC_ConfigChannel+0x448>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2102      	movs	r1, #2
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fde1 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d8c:	fa93 f3a3 	rbit	r3, r3
 8007d90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8007d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8007d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d101      	bne.n	8007da8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8007da4:	2320      	movs	r3, #32
 8007da6:	e004      	b.n	8007db2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8007da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007dac:	fab3 f383 	clz	r3, r3
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	461a      	mov	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d105      	bne.n	8007dcc <HAL_ADC_ConfigChannel+0x460>
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	0e9b      	lsrs	r3, r3, #26
 8007dc6:	f003 031f 	and.w	r3, r3, #31
 8007dca:	e014      	b.n	8007df6 <HAL_ADC_ConfigChannel+0x48a>
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007dd4:	fa93 f3a3 	rbit	r3, r3
 8007dd8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8007dda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8007de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8007de8:	2320      	movs	r3, #32
 8007dea:	e004      	b.n	8007df6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8007dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007df0:	fab3 f383 	clz	r3, r3
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d106      	bne.n	8007e08 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	2102      	movs	r1, #2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fe fe34 	bl	8006a70 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2103      	movs	r1, #3
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fd98 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <HAL_ADC_ConfigChannel+0x4c8>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2103      	movs	r1, #3
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fd8d 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	0e9b      	lsrs	r3, r3, #26
 8007e2e:	f003 021f 	and.w	r2, r3, #31
 8007e32:	e017      	b.n	8007e64 <HAL_ADC_ConfigChannel+0x4f8>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2103      	movs	r1, #3
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fd82 	bl	8006944 <LL_ADC_GetOffsetChannel>
 8007e40:	4603      	mov	r3, r0
 8007e42:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e46:	fa93 f3a3 	rbit	r3, r3
 8007e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8007e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8007e50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8007e56:	2320      	movs	r3, #32
 8007e58:	e003      	b.n	8007e62 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8007e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e5c:	fab3 f383 	clz	r3, r3
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	461a      	mov	r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d105      	bne.n	8007e7c <HAL_ADC_ConfigChannel+0x510>
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	0e9b      	lsrs	r3, r3, #26
 8007e76:	f003 031f 	and.w	r3, r3, #31
 8007e7a:	e011      	b.n	8007ea0 <HAL_ADC_ConfigChannel+0x534>
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e84:	fa93 f3a3 	rbit	r3, r3
 8007e88:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8007e8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e8c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8007e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8007e94:	2320      	movs	r3, #32
 8007e96:	e003      	b.n	8007ea0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8007e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e9a:	fab3 f383 	clz	r3, r3
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d14f      	bne.n	8007f44 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2103      	movs	r1, #3
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe fddf 	bl	8006a70 <LL_ADC_SetOffsetState>
 8007eb2:	e047      	b.n	8007f44 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	069b      	lsls	r3, r3, #26
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d107      	bne.n	8007ed8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007ed6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ede:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	069b      	lsls	r3, r3, #26
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d107      	bne.n	8007efc <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007efa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	069b      	lsls	r3, r3, #26
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d107      	bne.n	8007f20 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007f1e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	069b      	lsls	r3, r3, #26
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d107      	bne.n	8007f44 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007f42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe ff0b 	bl	8006d64 <LL_ADC_IsEnabled>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f040 8219 	bne.w	8008388 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6818      	ldr	r0, [r3, #0]
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	6819      	ldr	r1, [r3, #0]
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	461a      	mov	r2, r3
 8007f64:	f7fe fe2c 	bl	8006bc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	4aa1      	ldr	r2, [pc, #644]	; (80081f4 <HAL_ADC_ConfigChannel+0x888>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	f040 812e 	bne.w	80081d0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10b      	bne.n	8007f9c <HAL_ADC_ConfigChannel+0x630>
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	0e9b      	lsrs	r3, r3, #26
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	2b09      	cmp	r3, #9
 8007f92:	bf94      	ite	ls
 8007f94:	2301      	movls	r3, #1
 8007f96:	2300      	movhi	r3, #0
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	e019      	b.n	8007fd0 <HAL_ADC_ConfigChannel+0x664>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fa4:	fa93 f3a3 	rbit	r3, r3
 8007fa8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8007fb4:	2320      	movs	r3, #32
 8007fb6:	e003      	b.n	8007fc0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8007fb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fba:	fab3 f383 	clz	r3, r3
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	f003 031f 	and.w	r3, r3, #31
 8007fc6:	2b09      	cmp	r3, #9
 8007fc8:	bf94      	ite	ls
 8007fca:	2301      	movls	r3, #1
 8007fcc:	2300      	movhi	r3, #0
 8007fce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d079      	beq.n	80080c8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d107      	bne.n	8007ff0 <HAL_ADC_ConfigChannel+0x684>
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	0e9b      	lsrs	r3, r3, #26
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	069b      	lsls	r3, r3, #26
 8007fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007fee:	e015      	b.n	800801c <HAL_ADC_ConfigChannel+0x6b0>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ff8:	fa93 f3a3 	rbit	r3, r3
 8007ffc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8007ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008000:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8008002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8008008:	2320      	movs	r3, #32
 800800a:	e003      	b.n	8008014 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800800c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800800e:	fab3 f383 	clz	r3, r3
 8008012:	b2db      	uxtb	r3, r3
 8008014:	3301      	adds	r3, #1
 8008016:	069b      	lsls	r3, r3, #26
 8008018:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008024:	2b00      	cmp	r3, #0
 8008026:	d109      	bne.n	800803c <HAL_ADC_ConfigChannel+0x6d0>
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	0e9b      	lsrs	r3, r3, #26
 800802e:	3301      	adds	r3, #1
 8008030:	f003 031f 	and.w	r3, r3, #31
 8008034:	2101      	movs	r1, #1
 8008036:	fa01 f303 	lsl.w	r3, r1, r3
 800803a:	e017      	b.n	800806c <HAL_ADC_ConfigChannel+0x700>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008044:	fa93 f3a3 	rbit	r3, r3
 8008048:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800804a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800804e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8008054:	2320      	movs	r3, #32
 8008056:	e003      	b.n	8008060 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8008058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800805a:	fab3 f383 	clz	r3, r3
 800805e:	b2db      	uxtb	r3, r3
 8008060:	3301      	adds	r3, #1
 8008062:	f003 031f 	and.w	r3, r3, #31
 8008066:	2101      	movs	r1, #1
 8008068:	fa01 f303 	lsl.w	r3, r1, r3
 800806c:	ea42 0103 	orr.w	r1, r2, r3
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008078:	2b00      	cmp	r3, #0
 800807a:	d10a      	bne.n	8008092 <HAL_ADC_ConfigChannel+0x726>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	0e9b      	lsrs	r3, r3, #26
 8008082:	3301      	adds	r3, #1
 8008084:	f003 021f 	and.w	r2, r3, #31
 8008088:	4613      	mov	r3, r2
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	4413      	add	r3, r2
 800808e:	051b      	lsls	r3, r3, #20
 8008090:	e018      	b.n	80080c4 <HAL_ADC_ConfigChannel+0x758>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809a:	fa93 f3a3 	rbit	r3, r3
 800809e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80080a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80080aa:	2320      	movs	r3, #32
 80080ac:	e003      	b.n	80080b6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	fab3 f383 	clz	r3, r3
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	3301      	adds	r3, #1
 80080b8:	f003 021f 	and.w	r2, r3, #31
 80080bc:	4613      	mov	r3, r2
 80080be:	005b      	lsls	r3, r3, #1
 80080c0:	4413      	add	r3, r2
 80080c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080c4:	430b      	orrs	r3, r1
 80080c6:	e07e      	b.n	80081c6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d107      	bne.n	80080e4 <HAL_ADC_ConfigChannel+0x778>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	0e9b      	lsrs	r3, r3, #26
 80080da:	3301      	adds	r3, #1
 80080dc:	069b      	lsls	r3, r3, #26
 80080de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80080e2:	e015      	b.n	8008110 <HAL_ADC_ConfigChannel+0x7a4>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ec:	fa93 f3a3 	rbit	r3, r3
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80080f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80080fc:	2320      	movs	r3, #32
 80080fe:	e003      	b.n	8008108 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8008100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008102:	fab3 f383 	clz	r3, r3
 8008106:	b2db      	uxtb	r3, r3
 8008108:	3301      	adds	r3, #1
 800810a:	069b      	lsls	r3, r3, #26
 800810c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <HAL_ADC_ConfigChannel+0x7c4>
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	0e9b      	lsrs	r3, r3, #26
 8008122:	3301      	adds	r3, #1
 8008124:	f003 031f 	and.w	r3, r3, #31
 8008128:	2101      	movs	r1, #1
 800812a:	fa01 f303 	lsl.w	r3, r1, r3
 800812e:	e017      	b.n	8008160 <HAL_ADC_ConfigChannel+0x7f4>
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	fa93 f3a3 	rbit	r3, r3
 800813c:	61bb      	str	r3, [r7, #24]
  return result;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d101      	bne.n	800814c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8008148:	2320      	movs	r3, #32
 800814a:	e003      	b.n	8008154 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	fab3 f383 	clz	r3, r3
 8008152:	b2db      	uxtb	r3, r3
 8008154:	3301      	adds	r3, #1
 8008156:	f003 031f 	and.w	r3, r3, #31
 800815a:	2101      	movs	r1, #1
 800815c:	fa01 f303 	lsl.w	r3, r1, r3
 8008160:	ea42 0103 	orr.w	r1, r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800816c:	2b00      	cmp	r3, #0
 800816e:	d10d      	bne.n	800818c <HAL_ADC_ConfigChannel+0x820>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	0e9b      	lsrs	r3, r3, #26
 8008176:	3301      	adds	r3, #1
 8008178:	f003 021f 	and.w	r2, r3, #31
 800817c:	4613      	mov	r3, r2
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	4413      	add	r3, r2
 8008182:	3b1e      	subs	r3, #30
 8008184:	051b      	lsls	r3, r3, #20
 8008186:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800818a:	e01b      	b.n	80081c4 <HAL_ADC_ConfigChannel+0x858>
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	fa93 f3a3 	rbit	r3, r3
 8008198:	60fb      	str	r3, [r7, #12]
  return result;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80081a4:	2320      	movs	r3, #32
 80081a6:	e003      	b.n	80081b0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	fab3 f383 	clz	r3, r3
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	3301      	adds	r3, #1
 80081b2:	f003 021f 	and.w	r2, r3, #31
 80081b6:	4613      	mov	r3, r2
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	4413      	add	r3, r2
 80081bc:	3b1e      	subs	r3, #30
 80081be:	051b      	lsls	r3, r3, #20
 80081c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081c4:	430b      	orrs	r3, r1
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	6892      	ldr	r2, [r2, #8]
 80081ca:	4619      	mov	r1, r3
 80081cc:	f7fe fccc 	bl	8006b68 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f280 80d7 	bge.w	8008388 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a06      	ldr	r2, [pc, #24]	; (80081f8 <HAL_ADC_ConfigChannel+0x88c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d004      	beq.n	80081ee <HAL_ADC_ConfigChannel+0x882>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a04      	ldr	r2, [pc, #16]	; (80081fc <HAL_ADC_ConfigChannel+0x890>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d10a      	bne.n	8008204 <HAL_ADC_ConfigChannel+0x898>
 80081ee:	4b04      	ldr	r3, [pc, #16]	; (8008200 <HAL_ADC_ConfigChannel+0x894>)
 80081f0:	e009      	b.n	8008206 <HAL_ADC_ConfigChannel+0x89a>
 80081f2:	bf00      	nop
 80081f4:	47ff0000 	.word	0x47ff0000
 80081f8:	40022000 	.word	0x40022000
 80081fc:	40022100 	.word	0x40022100
 8008200:	40022300 	.word	0x40022300
 8008204:	4b65      	ldr	r3, [pc, #404]	; (800839c <HAL_ADC_ConfigChannel+0xa30>)
 8008206:	4618      	mov	r0, r3
 8008208:	f7fe fb5c 	bl	80068c4 <LL_ADC_GetCommonPathInternalCh>
 800820c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a62      	ldr	r2, [pc, #392]	; (80083a0 <HAL_ADC_ConfigChannel+0xa34>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d004      	beq.n	8008224 <HAL_ADC_ConfigChannel+0x8b8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a61      	ldr	r2, [pc, #388]	; (80083a4 <HAL_ADC_ConfigChannel+0xa38>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d10e      	bne.n	8008242 <HAL_ADC_ConfigChannel+0x8d6>
 8008224:	485e      	ldr	r0, [pc, #376]	; (80083a0 <HAL_ADC_ConfigChannel+0xa34>)
 8008226:	f7fe fd9d 	bl	8006d64 <LL_ADC_IsEnabled>
 800822a:	4604      	mov	r4, r0
 800822c:	485d      	ldr	r0, [pc, #372]	; (80083a4 <HAL_ADC_ConfigChannel+0xa38>)
 800822e:	f7fe fd99 	bl	8006d64 <LL_ADC_IsEnabled>
 8008232:	4603      	mov	r3, r0
 8008234:	4323      	orrs	r3, r4
 8008236:	2b00      	cmp	r3, #0
 8008238:	bf0c      	ite	eq
 800823a:	2301      	moveq	r3, #1
 800823c:	2300      	movne	r3, #0
 800823e:	b2db      	uxtb	r3, r3
 8008240:	e008      	b.n	8008254 <HAL_ADC_ConfigChannel+0x8e8>
 8008242:	4859      	ldr	r0, [pc, #356]	; (80083a8 <HAL_ADC_ConfigChannel+0xa3c>)
 8008244:	f7fe fd8e 	bl	8006d64 <LL_ADC_IsEnabled>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	bf0c      	ite	eq
 800824e:	2301      	moveq	r3, #1
 8008250:	2300      	movne	r3, #0
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 8084 	beq.w	8008362 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a53      	ldr	r2, [pc, #332]	; (80083ac <HAL_ADC_ConfigChannel+0xa40>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d132      	bne.n	80082ca <HAL_ADC_ConfigChannel+0x95e>
 8008264:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d12c      	bne.n	80082ca <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a4c      	ldr	r2, [pc, #304]	; (80083a8 <HAL_ADC_ConfigChannel+0xa3c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	f040 8086 	bne.w	8008388 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a47      	ldr	r2, [pc, #284]	; (80083a0 <HAL_ADC_ConfigChannel+0xa34>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d004      	beq.n	8008290 <HAL_ADC_ConfigChannel+0x924>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a46      	ldr	r2, [pc, #280]	; (80083a4 <HAL_ADC_ConfigChannel+0xa38>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d101      	bne.n	8008294 <HAL_ADC_ConfigChannel+0x928>
 8008290:	4a47      	ldr	r2, [pc, #284]	; (80083b0 <HAL_ADC_ConfigChannel+0xa44>)
 8008292:	e000      	b.n	8008296 <HAL_ADC_ConfigChannel+0x92a>
 8008294:	4a41      	ldr	r2, [pc, #260]	; (800839c <HAL_ADC_ConfigChannel+0xa30>)
 8008296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800829a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f7fe fafc 	bl	800689e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80082a6:	4b43      	ldr	r3, [pc, #268]	; (80083b4 <HAL_ADC_ConfigChannel+0xa48>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	099b      	lsrs	r3, r3, #6
 80082ac:	4a42      	ldr	r2, [pc, #264]	; (80083b8 <HAL_ADC_ConfigChannel+0xa4c>)
 80082ae:	fba2 2303 	umull	r2, r3, r2, r3
 80082b2:	099b      	lsrs	r3, r3, #6
 80082b4:	3301      	adds	r3, #1
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80082ba:	e002      	b.n	80082c2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	3b01      	subs	r3, #1
 80082c0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1f9      	bne.n	80082bc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80082c8:	e05e      	b.n	8008388 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a3b      	ldr	r2, [pc, #236]	; (80083bc <HAL_ADC_ConfigChannel+0xa50>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d120      	bne.n	8008316 <HAL_ADC_ConfigChannel+0x9aa>
 80082d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80082d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d11a      	bne.n	8008316 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a30      	ldr	r2, [pc, #192]	; (80083a8 <HAL_ADC_ConfigChannel+0xa3c>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d14e      	bne.n	8008388 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a2c      	ldr	r2, [pc, #176]	; (80083a0 <HAL_ADC_ConfigChannel+0xa34>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d004      	beq.n	80082fe <HAL_ADC_ConfigChannel+0x992>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a2a      	ldr	r2, [pc, #168]	; (80083a4 <HAL_ADC_ConfigChannel+0xa38>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d101      	bne.n	8008302 <HAL_ADC_ConfigChannel+0x996>
 80082fe:	4a2c      	ldr	r2, [pc, #176]	; (80083b0 <HAL_ADC_ConfigChannel+0xa44>)
 8008300:	e000      	b.n	8008304 <HAL_ADC_ConfigChannel+0x998>
 8008302:	4a26      	ldr	r2, [pc, #152]	; (800839c <HAL_ADC_ConfigChannel+0xa30>)
 8008304:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7fe fac5 	bl	800689e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008314:	e038      	b.n	8008388 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a29      	ldr	r2, [pc, #164]	; (80083c0 <HAL_ADC_ConfigChannel+0xa54>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d133      	bne.n	8008388 <HAL_ADC_ConfigChannel+0xa1c>
 8008320:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d12d      	bne.n	8008388 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a1d      	ldr	r2, [pc, #116]	; (80083a8 <HAL_ADC_ConfigChannel+0xa3c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d128      	bne.n	8008388 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a19      	ldr	r2, [pc, #100]	; (80083a0 <HAL_ADC_ConfigChannel+0xa34>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d004      	beq.n	800834a <HAL_ADC_ConfigChannel+0x9de>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <HAL_ADC_ConfigChannel+0xa38>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d101      	bne.n	800834e <HAL_ADC_ConfigChannel+0x9e2>
 800834a:	4a19      	ldr	r2, [pc, #100]	; (80083b0 <HAL_ADC_ConfigChannel+0xa44>)
 800834c:	e000      	b.n	8008350 <HAL_ADC_ConfigChannel+0x9e4>
 800834e:	4a13      	ldr	r2, [pc, #76]	; (800839c <HAL_ADC_ConfigChannel+0xa30>)
 8008350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008354:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008358:	4619      	mov	r1, r3
 800835a:	4610      	mov	r0, r2
 800835c:	f7fe fa9f 	bl	800689e <LL_ADC_SetCommonPathInternalCh>
 8008360:	e012      	b.n	8008388 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008366:	f043 0220 	orr.w	r2, r3, #32
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8008374:	e008      	b.n	8008388 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837a:	f043 0220 	orr.w	r2, r3, #32
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008390:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8008394:	4618      	mov	r0, r3
 8008396:	37e4      	adds	r7, #228	; 0xe4
 8008398:	46bd      	mov	sp, r7
 800839a:	bd90      	pop	{r4, r7, pc}
 800839c:	58026300 	.word	0x58026300
 80083a0:	40022000 	.word	0x40022000
 80083a4:	40022100 	.word	0x40022100
 80083a8:	58026000 	.word	0x58026000
 80083ac:	c7520000 	.word	0xc7520000
 80083b0:	40022300 	.word	0x40022300
 80083b4:	20000020 	.word	0x20000020
 80083b8:	053e2d63 	.word	0x053e2d63
 80083bc:	c3210000 	.word	0xc3210000
 80083c0:	cb840000 	.word	0xcb840000

080083c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fe fcc7 	bl	8006d64 <LL_ADC_IsEnabled>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d16e      	bne.n	80084ba <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	4b38      	ldr	r3, [pc, #224]	; (80084c4 <ADC_Enable+0x100>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00d      	beq.n	8008406 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ee:	f043 0210 	orr.w	r2, r3, #16
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083fa:	f043 0201 	orr.w	r2, r3, #1
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e05a      	b.n	80084bc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fc82 	bl	8006d14 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008410:	f7fe fa02 	bl	8006818 <HAL_GetTick>
 8008414:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a2b      	ldr	r2, [pc, #172]	; (80084c8 <ADC_Enable+0x104>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d004      	beq.n	800842a <ADC_Enable+0x66>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a29      	ldr	r2, [pc, #164]	; (80084cc <ADC_Enable+0x108>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d101      	bne.n	800842e <ADC_Enable+0x6a>
 800842a:	4b29      	ldr	r3, [pc, #164]	; (80084d0 <ADC_Enable+0x10c>)
 800842c:	e000      	b.n	8008430 <ADC_Enable+0x6c>
 800842e:	4b29      	ldr	r3, [pc, #164]	; (80084d4 <ADC_Enable+0x110>)
 8008430:	4618      	mov	r0, r3
 8008432:	f7fe fc05 	bl	8006c40 <LL_ADC_GetMultimode>
 8008436:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a23      	ldr	r2, [pc, #140]	; (80084cc <ADC_Enable+0x108>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d002      	beq.n	8008448 <ADC_Enable+0x84>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	e000      	b.n	800844a <ADC_Enable+0x86>
 8008448:	4b1f      	ldr	r3, [pc, #124]	; (80084c8 <ADC_Enable+0x104>)
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	4293      	cmp	r3, r2
 8008450:	d02c      	beq.n	80084ac <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d130      	bne.n	80084ba <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008458:	e028      	b.n	80084ac <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe fc80 	bl	8006d64 <LL_ADC_IsEnabled>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d104      	bne.n	8008474 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe fc50 	bl	8006d14 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008474:	f7fe f9d0 	bl	8006818 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b02      	cmp	r3, #2
 8008480:	d914      	bls.n	80084ac <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b01      	cmp	r3, #1
 800848e:	d00d      	beq.n	80084ac <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008494:	f043 0210 	orr.w	r2, r3, #16
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084a0:	f043 0201 	orr.w	r2, r3, #1
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	e007      	b.n	80084bc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d1cf      	bne.n	800845a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	8000003f 	.word	0x8000003f
 80084c8:	40022000 	.word	0x40022000
 80084cc:	40022100 	.word	0x40022100
 80084d0:	40022300 	.word	0x40022300
 80084d4:	58026300 	.word	0x58026300

080084d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fc50 	bl	8006d8a <LL_ADC_IsDisableOngoing>
 80084ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f7fe fc37 	bl	8006d64 <LL_ADC_IsEnabled>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d047      	beq.n	800858c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d144      	bne.n	800858c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 030d 	and.w	r3, r3, #13
 800850c:	2b01      	cmp	r3, #1
 800850e:	d10c      	bne.n	800852a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe fc11 	bl	8006d3c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2203      	movs	r2, #3
 8008520:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8008522:	f7fe f979 	bl	8006818 <HAL_GetTick>
 8008526:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008528:	e029      	b.n	800857e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852e:	f043 0210 	orr.w	r2, r3, #16
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800853a:	f043 0201 	orr.w	r2, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e023      	b.n	800858e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008546:	f7fe f967 	bl	8006818 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	2b02      	cmp	r3, #2
 8008552:	d914      	bls.n	800857e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00d      	beq.n	800857e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008566:	f043 0210 	orr.w	r2, r3, #16
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008572:	f043 0201 	orr.w	r2, r3, #1
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e007      	b.n	800858e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f003 0301 	and.w	r3, r3, #1
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1dc      	bne.n	8008546 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a6b      	ldr	r2, [pc, #428]	; (8008754 <ADC_ConfigureBoostMode+0x1bc>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d004      	beq.n	80085b4 <ADC_ConfigureBoostMode+0x1c>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a6a      	ldr	r2, [pc, #424]	; (8008758 <ADC_ConfigureBoostMode+0x1c0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d109      	bne.n	80085c8 <ADC_ConfigureBoostMode+0x30>
 80085b4:	4b69      	ldr	r3, [pc, #420]	; (800875c <ADC_ConfigureBoostMode+0x1c4>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	bf14      	ite	ne
 80085c0:	2301      	movne	r3, #1
 80085c2:	2300      	moveq	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	e008      	b.n	80085da <ADC_ConfigureBoostMode+0x42>
 80085c8:	4b65      	ldr	r3, [pc, #404]	; (8008760 <ADC_ConfigureBoostMode+0x1c8>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	bf14      	ite	ne
 80085d4:	2301      	movne	r3, #1
 80085d6:	2300      	moveq	r3, #0
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d01c      	beq.n	8008618 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80085de:	f005 fc9f 	bl	800df20 <HAL_RCC_GetHCLKFreq>
 80085e2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085ec:	d010      	beq.n	8008610 <ADC_ConfigureBoostMode+0x78>
 80085ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085f2:	d871      	bhi.n	80086d8 <ADC_ConfigureBoostMode+0x140>
 80085f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085f8:	d002      	beq.n	8008600 <ADC_ConfigureBoostMode+0x68>
 80085fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085fe:	d16b      	bne.n	80086d8 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	0c1b      	lsrs	r3, r3, #16
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	fbb2 f3f3 	udiv	r3, r2, r3
 800860c:	60fb      	str	r3, [r7, #12]
        break;
 800860e:	e066      	b.n	80086de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	089b      	lsrs	r3, r3, #2
 8008614:	60fb      	str	r3, [r7, #12]
        break;
 8008616:	e062      	b.n	80086de <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008618:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800861c:	f006 fbd6 	bl	800edcc <HAL_RCCEx_GetPeriphCLKFreq>
 8008620:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800862a:	d051      	beq.n	80086d0 <ADC_ConfigureBoostMode+0x138>
 800862c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008630:	d854      	bhi.n	80086dc <ADC_ConfigureBoostMode+0x144>
 8008632:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008636:	d047      	beq.n	80086c8 <ADC_ConfigureBoostMode+0x130>
 8008638:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800863c:	d84e      	bhi.n	80086dc <ADC_ConfigureBoostMode+0x144>
 800863e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008642:	d03d      	beq.n	80086c0 <ADC_ConfigureBoostMode+0x128>
 8008644:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008648:	d848      	bhi.n	80086dc <ADC_ConfigureBoostMode+0x144>
 800864a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800864e:	d033      	beq.n	80086b8 <ADC_ConfigureBoostMode+0x120>
 8008650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008654:	d842      	bhi.n	80086dc <ADC_ConfigureBoostMode+0x144>
 8008656:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800865a:	d029      	beq.n	80086b0 <ADC_ConfigureBoostMode+0x118>
 800865c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008660:	d83c      	bhi.n	80086dc <ADC_ConfigureBoostMode+0x144>
 8008662:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008666:	d01a      	beq.n	800869e <ADC_ConfigureBoostMode+0x106>
 8008668:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800866c:	d836      	bhi.n	80086dc <ADC_ConfigureBoostMode+0x144>
 800866e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008672:	d014      	beq.n	800869e <ADC_ConfigureBoostMode+0x106>
 8008674:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008678:	d830      	bhi.n	80086dc <ADC_ConfigureBoostMode+0x144>
 800867a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800867e:	d00e      	beq.n	800869e <ADC_ConfigureBoostMode+0x106>
 8008680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008684:	d82a      	bhi.n	80086dc <ADC_ConfigureBoostMode+0x144>
 8008686:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800868a:	d008      	beq.n	800869e <ADC_ConfigureBoostMode+0x106>
 800868c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008690:	d824      	bhi.n	80086dc <ADC_ConfigureBoostMode+0x144>
 8008692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008696:	d002      	beq.n	800869e <ADC_ConfigureBoostMode+0x106>
 8008698:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800869c:	d11e      	bne.n	80086dc <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	0c9b      	lsrs	r3, r3, #18
 80086a4:	005b      	lsls	r3, r3, #1
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ac:	60fb      	str	r3, [r7, #12]
        break;
 80086ae:	e016      	b.n	80086de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	091b      	lsrs	r3, r3, #4
 80086b4:	60fb      	str	r3, [r7, #12]
        break;
 80086b6:	e012      	b.n	80086de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	095b      	lsrs	r3, r3, #5
 80086bc:	60fb      	str	r3, [r7, #12]
        break;
 80086be:	e00e      	b.n	80086de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	099b      	lsrs	r3, r3, #6
 80086c4:	60fb      	str	r3, [r7, #12]
        break;
 80086c6:	e00a      	b.n	80086de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	09db      	lsrs	r3, r3, #7
 80086cc:	60fb      	str	r3, [r7, #12]
        break;
 80086ce:	e006      	b.n	80086de <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	60fb      	str	r3, [r7, #12]
        break;
 80086d6:	e002      	b.n	80086de <ADC_ConfigureBoostMode+0x146>
        break;
 80086d8:	bf00      	nop
 80086da:	e000      	b.n	80086de <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80086dc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	085b      	lsrs	r3, r3, #1
 80086e2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	4a1f      	ldr	r2, [pc, #124]	; (8008764 <ADC_ConfigureBoostMode+0x1cc>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d808      	bhi.n	80086fe <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80086fa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80086fc:	e025      	b.n	800874a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4a19      	ldr	r2, [pc, #100]	; (8008768 <ADC_ConfigureBoostMode+0x1d0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d80a      	bhi.n	800871c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008718:	609a      	str	r2, [r3, #8]
}
 800871a:	e016      	b.n	800874a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4a13      	ldr	r2, [pc, #76]	; (800876c <ADC_ConfigureBoostMode+0x1d4>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d80a      	bhi.n	800873a <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008736:	609a      	str	r2, [r3, #8]
}
 8008738:	e007      	b.n	800874a <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	689a      	ldr	r2, [r3, #8]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008748:	609a      	str	r2, [r3, #8]
}
 800874a:	bf00      	nop
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	40022000 	.word	0x40022000
 8008758:	40022100 	.word	0x40022100
 800875c:	40022300 	.word	0x40022300
 8008760:	58026300 	.word	0x58026300
 8008764:	005f5e10 	.word	0x005f5e10
 8008768:	00bebc20 	.word	0x00bebc20
 800876c:	017d7840 	.word	0x017d7840

08008770 <LL_ADC_IsEnabled>:
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f003 0301 	and.w	r3, r3, #1
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <LL_ADC_IsEnabled+0x18>
 8008784:	2301      	movs	r3, #1
 8008786:	e000      	b.n	800878a <LL_ADC_IsEnabled+0x1a>
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
	...

08008798 <LL_ADC_StartCalibration>:
{
 8008798:	b480      	push	{r7}
 800879a:	b085      	sub	sp, #20
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	4b09      	ldr	r3, [pc, #36]	; (80087d0 <LL_ADC_StartCalibration+0x38>)
 80087aa:	4013      	ands	r3, r2
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80087b2:	687a      	ldr	r2, [r7, #4]
 80087b4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80087b8:	430a      	orrs	r2, r1
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	609a      	str	r2, [r3, #8]
}
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	3ffeffc0 	.word	0x3ffeffc0

080087d4 <LL_ADC_IsCalibrationOnGoing>:
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087e8:	d101      	bne.n	80087ee <LL_ADC_IsCalibrationOnGoing+0x1a>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <LL_ADC_REG_IsConversionOngoing>:
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b04      	cmp	r3, #4
 800880e:	d101      	bne.n	8008814 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008810:	2301      	movs	r3, #1
 8008812:	e000      	b.n	8008816 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
	...

08008824 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008830:	2300      	movs	r3, #0
 8008832:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <HAL_ADCEx_Calibration_Start+0x1e>
 800883e:	2302      	movs	r3, #2
 8008840:	e04c      	b.n	80088dc <HAL_ADCEx_Calibration_Start+0xb8>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff fe44 	bl	80084d8 <ADC_Disable>
 8008850:	4603      	mov	r3, r0
 8008852:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008854:	7dfb      	ldrb	r3, [r7, #23]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d135      	bne.n	80088c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800885e:	4b21      	ldr	r3, [pc, #132]	; (80088e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008860:	4013      	ands	r3, r2
 8008862:	f043 0202 	orr.w	r2, r3, #2
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	68b9      	ldr	r1, [r7, #8]
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff ff90 	bl	8008798 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008878:	e014      	b.n	80088a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	3301      	adds	r3, #1
 800887e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	4a19      	ldr	r2, [pc, #100]	; (80088e8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d30d      	bcc.n	80088a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800888c:	f023 0312 	bic.w	r3, r3, #18
 8008890:	f043 0210 	orr.w	r2, r3, #16
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e01b      	b.n	80088dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff ff93 	bl	80087d4 <LL_ADC_IsCalibrationOnGoing>
 80088ae:	4603      	mov	r3, r0
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e2      	bne.n	800887a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088b8:	f023 0303 	bic.w	r3, r3, #3
 80088bc:	f043 0201 	orr.w	r2, r3, #1
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	661a      	str	r2, [r3, #96]	; 0x60
 80088c4:	e005      	b.n	80088d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ca:	f043 0210 	orr.w	r2, r3, #16
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80088da:	7dfb      	ldrb	r3, [r7, #23]
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	ffffeefd 	.word	0xffffeefd
 80088e8:	25c3f800 	.word	0x25c3f800

080088ec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008914:	b480      	push	{r7}
 8008916:	b083      	sub	sp, #12
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr

08008928 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800893c:	b480      	push	{r7}
 800893e:	b083      	sub	sp, #12
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008944:	bf00      	nop
 8008946:	370c      	adds	r7, #12
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008950:	b590      	push	{r4, r7, lr}
 8008952:	b0a3      	sub	sp, #140	; 0x8c
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800896a:	2302      	movs	r3, #2
 800896c:	e0c1      	b.n	8008af2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008976:	2300      	movs	r3, #0
 8008978:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800897a:	2300      	movs	r3, #0
 800897c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a5e      	ldr	r2, [pc, #376]	; (8008afc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d102      	bne.n	800898e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008988:	4b5d      	ldr	r3, [pc, #372]	; (8008b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e001      	b.n	8008992 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800898e:	2300      	movs	r3, #0
 8008990:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10b      	bne.n	80089b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800899c:	f043 0220 	orr.w	r2, r3, #32
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e0a0      	b.n	8008af2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff ff22 	bl	80087fc <LL_ADC_REG_IsConversionOngoing>
 80089b8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff ff1b 	bl	80087fc <LL_ADC_REG_IsConversionOngoing>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f040 8081 	bne.w	8008ad0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80089ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d17c      	bne.n	8008ad0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a48      	ldr	r2, [pc, #288]	; (8008afc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d004      	beq.n	80089ea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a46      	ldr	r2, [pc, #280]	; (8008b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d101      	bne.n	80089ee <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80089ea:	4b46      	ldr	r3, [pc, #280]	; (8008b04 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80089ec:	e000      	b.n	80089f0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80089ee:	4b46      	ldr	r3, [pc, #280]	; (8008b08 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80089f0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d039      	beq.n	8008a6e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80089fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	431a      	orrs	r2, r3
 8008a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a3a      	ldr	r2, [pc, #232]	; (8008afc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d004      	beq.n	8008a20 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a39      	ldr	r2, [pc, #228]	; (8008b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d10e      	bne.n	8008a3e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008a20:	4836      	ldr	r0, [pc, #216]	; (8008afc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008a22:	f7ff fea5 	bl	8008770 <LL_ADC_IsEnabled>
 8008a26:	4604      	mov	r4, r0
 8008a28:	4835      	ldr	r0, [pc, #212]	; (8008b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008a2a:	f7ff fea1 	bl	8008770 <LL_ADC_IsEnabled>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	4323      	orrs	r3, r4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bf0c      	ite	eq
 8008a36:	2301      	moveq	r3, #1
 8008a38:	2300      	movne	r3, #0
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	e008      	b.n	8008a50 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008a3e:	4833      	ldr	r0, [pc, #204]	; (8008b0c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008a40:	f7ff fe96 	bl	8008770 <LL_ADC_IsEnabled>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	bf0c      	ite	eq
 8008a4a:	2301      	moveq	r3, #1
 8008a4c:	2300      	movne	r3, #0
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d047      	beq.n	8008ae4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008a54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a56:	689a      	ldr	r2, [r3, #8]
 8008a58:	4b2d      	ldr	r3, [pc, #180]	; (8008b10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	6811      	ldr	r1, [r2, #0]
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	6892      	ldr	r2, [r2, #8]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	431a      	orrs	r2, r3
 8008a68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a6a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008a6c:	e03a      	b.n	8008ae4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008a6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008a78:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a1f      	ldr	r2, [pc, #124]	; (8008afc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d004      	beq.n	8008a8e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a1d      	ldr	r2, [pc, #116]	; (8008b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d10e      	bne.n	8008aac <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8008a8e:	481b      	ldr	r0, [pc, #108]	; (8008afc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008a90:	f7ff fe6e 	bl	8008770 <LL_ADC_IsEnabled>
 8008a94:	4604      	mov	r4, r0
 8008a96:	481a      	ldr	r0, [pc, #104]	; (8008b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008a98:	f7ff fe6a 	bl	8008770 <LL_ADC_IsEnabled>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4323      	orrs	r3, r4
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	bf0c      	ite	eq
 8008aa4:	2301      	moveq	r3, #1
 8008aa6:	2300      	movne	r3, #0
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	e008      	b.n	8008abe <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8008aac:	4817      	ldr	r0, [pc, #92]	; (8008b0c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008aae:	f7ff fe5f 	bl	8008770 <LL_ADC_IsEnabled>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bf0c      	ite	eq
 8008ab8:	2301      	moveq	r3, #1
 8008aba:	2300      	movne	r3, #0
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d010      	beq.n	8008ae4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008ac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ac4:	689a      	ldr	r2, [r3, #8]
 8008ac6:	4b12      	ldr	r3, [pc, #72]	; (8008b10 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008acc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ace:	e009      	b.n	8008ae4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ad4:	f043 0220 	orr.w	r2, r3, #32
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8008ae2:	e000      	b.n	8008ae6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ae4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008aee:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	378c      	adds	r7, #140	; 0x8c
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd90      	pop	{r4, r7, pc}
 8008afa:	bf00      	nop
 8008afc:	40022000 	.word	0x40022000
 8008b00:	40022100 	.word	0x40022100
 8008b04:	40022300 	.word	0x40022300
 8008b08:	58026300 	.word	0x58026300
 8008b0c:	58026000 	.word	0x58026000
 8008b10:	fffff0e0 	.word	0xfffff0e0

08008b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b085      	sub	sp, #20
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f003 0307 	and.w	r3, r3, #7
 8008b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b24:	4b0b      	ldr	r3, [pc, #44]	; (8008b54 <__NVIC_SetPriorityGrouping+0x40>)
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b2a:	68ba      	ldr	r2, [r7, #8]
 8008b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b30:	4013      	ands	r3, r2
 8008b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008b3c:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <__NVIC_SetPriorityGrouping+0x44>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b42:	4a04      	ldr	r2, [pc, #16]	; (8008b54 <__NVIC_SetPriorityGrouping+0x40>)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	60d3      	str	r3, [r2, #12]
}
 8008b48:	bf00      	nop
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	e000ed00 	.word	0xe000ed00
 8008b58:	05fa0000 	.word	0x05fa0000

08008b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b60:	4b04      	ldr	r3, [pc, #16]	; (8008b74 <__NVIC_GetPriorityGrouping+0x18>)
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	0a1b      	lsrs	r3, r3, #8
 8008b66:	f003 0307 	and.w	r3, r3, #7
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	e000ed00 	.word	0xe000ed00

08008b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	4603      	mov	r3, r0
 8008b80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	db0b      	blt.n	8008ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b8a:	88fb      	ldrh	r3, [r7, #6]
 8008b8c:	f003 021f 	and.w	r2, r3, #31
 8008b90:	4907      	ldr	r1, [pc, #28]	; (8008bb0 <__NVIC_EnableIRQ+0x38>)
 8008b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	2001      	movs	r0, #1
 8008b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8008b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008ba2:	bf00      	nop
 8008ba4:	370c      	adds	r7, #12
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	e000e100 	.word	0xe000e100

08008bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6039      	str	r1, [r7, #0]
 8008bbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	db0a      	blt.n	8008bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	490c      	ldr	r1, [pc, #48]	; (8008c00 <__NVIC_SetPriority+0x4c>)
 8008bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bd2:	0112      	lsls	r2, r2, #4
 8008bd4:	b2d2      	uxtb	r2, r2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008bdc:	e00a      	b.n	8008bf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	4908      	ldr	r1, [pc, #32]	; (8008c04 <__NVIC_SetPriority+0x50>)
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	3b04      	subs	r3, #4
 8008bec:	0112      	lsls	r2, r2, #4
 8008bee:	b2d2      	uxtb	r2, r2
 8008bf0:	440b      	add	r3, r1
 8008bf2:	761a      	strb	r2, [r3, #24]
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	e000e100 	.word	0xe000e100
 8008c04:	e000ed00 	.word	0xe000ed00

08008c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b089      	sub	sp, #36	; 0x24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f003 0307 	and.w	r3, r3, #7
 8008c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f1c3 0307 	rsb	r3, r3, #7
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	bf28      	it	cs
 8008c26:	2304      	movcs	r3, #4
 8008c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	2b06      	cmp	r3, #6
 8008c30:	d902      	bls.n	8008c38 <NVIC_EncodePriority+0x30>
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	3b03      	subs	r3, #3
 8008c36:	e000      	b.n	8008c3a <NVIC_EncodePriority+0x32>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	43da      	mvns	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	401a      	ands	r2, r3
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c50:	f04f 31ff 	mov.w	r1, #4294967295
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	fa01 f303 	lsl.w	r3, r1, r3
 8008c5a:	43d9      	mvns	r1, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c60:	4313      	orrs	r3, r2
         );
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3724      	adds	r7, #36	; 0x24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c80:	d301      	bcc.n	8008c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c82:	2301      	movs	r3, #1
 8008c84:	e00f      	b.n	8008ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c86:	4a0a      	ldr	r2, [pc, #40]	; (8008cb0 <SysTick_Config+0x40>)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c8e:	210f      	movs	r1, #15
 8008c90:	f04f 30ff 	mov.w	r0, #4294967295
 8008c94:	f7ff ff8e 	bl	8008bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c98:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <SysTick_Config+0x40>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c9e:	4b04      	ldr	r3, [pc, #16]	; (8008cb0 <SysTick_Config+0x40>)
 8008ca0:	2207      	movs	r2, #7
 8008ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	e000e010 	.word	0xe000e010

08008cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7ff ff29 	bl	8008b14 <__NVIC_SetPriorityGrouping>
}
 8008cc2:	bf00      	nop
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b086      	sub	sp, #24
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	60b9      	str	r1, [r7, #8]
 8008cd4:	607a      	str	r2, [r7, #4]
 8008cd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008cd8:	f7ff ff40 	bl	8008b5c <__NVIC_GetPriorityGrouping>
 8008cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	f7ff ff90 	bl	8008c08 <NVIC_EncodePriority>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff ff5f 	bl	8008bb4 <__NVIC_SetPriority>
}
 8008cf6:	bf00      	nop
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	4603      	mov	r3, r0
 8008d06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff ff33 	bl	8008b78 <__NVIC_EnableIRQ>
}
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff ffa4 	bl	8008c70 <SysTick_Config>
 8008d28:	4603      	mov	r3, r0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
	...

08008d34 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e054      	b.n	8008df0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	7f5b      	ldrb	r3, [r3, #29]
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d105      	bne.n	8008d5c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7f8 fde6 	bl	8001928 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	791b      	ldrb	r3, [r3, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10c      	bne.n	8008d84 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a22      	ldr	r2, [pc, #136]	; (8008df8 <HAL_CRC_Init+0xc4>)
 8008d70:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689a      	ldr	r2, [r3, #8]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f022 0218 	bic.w	r2, r2, #24
 8008d80:	609a      	str	r2, [r3, #8]
 8008d82:	e00c      	b.n	8008d9e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6899      	ldr	r1, [r3, #8]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f948 	bl	8009024 <HAL_CRCEx_Polynomial_Set>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e028      	b.n	8008df0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	795b      	ldrb	r3, [r3, #5]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d105      	bne.n	8008db2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f04f 32ff 	mov.w	r2, #4294967295
 8008dae:	611a      	str	r2, [r3, #16]
 8008db0:	e004      	b.n	8008dbc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	6912      	ldr	r2, [r2, #16]
 8008dba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	695a      	ldr	r2, [r3, #20]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	699a      	ldr	r2, [r3, #24]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	04c11db7 	.word	0x04c11db7

08008dfc <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008e08:	2300      	movs	r3, #0
 8008e0a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2202      	movs	r2, #2
 8008e10:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f042 0201 	orr.w	r2, r2, #1
 8008e20:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6a1b      	ldr	r3, [r3, #32]
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d006      	beq.n	8008e38 <HAL_CRC_Calculate+0x3c>
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d829      	bhi.n	8008e82 <HAL_CRC_Calculate+0x86>
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d019      	beq.n	8008e66 <HAL_CRC_Calculate+0x6a>
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d01e      	beq.n	8008e74 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8008e36:	e024      	b.n	8008e82 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e00a      	b.n	8008e54 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	441a      	add	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6812      	ldr	r2, [r2, #0]
 8008e4c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	3301      	adds	r3, #1
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d3f0      	bcc.n	8008e3e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	613b      	str	r3, [r7, #16]
      break;
 8008e64:	e00e      	b.n	8008e84 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	68b9      	ldr	r1, [r7, #8]
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f000 f812 	bl	8008e94 <CRC_Handle_8>
 8008e70:	6138      	str	r0, [r7, #16]
      break;
 8008e72:	e007      	b.n	8008e84 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	68b9      	ldr	r1, [r7, #8]
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f899 	bl	8008fb0 <CRC_Handle_16>
 8008e7e:	6138      	str	r0, [r7, #16]
      break;
 8008e80:	e000      	b.n	8008e84 <HAL_CRC_Calculate+0x88>
      break;
 8008e82:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2201      	movs	r2, #1
 8008e88:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8008e8a:	693b      	ldr	r3, [r7, #16]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b089      	sub	sp, #36	; 0x24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	61fb      	str	r3, [r7, #28]
 8008ea4:	e023      	b.n	8008eee <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	4413      	add	r3, r2
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	68b9      	ldr	r1, [r7, #8]
 8008eba:	440b      	add	r3, r1
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008ec0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	3302      	adds	r3, #2
 8008ec8:	68b9      	ldr	r1, [r7, #8]
 8008eca:	440b      	add	r3, r1
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8008ed0:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	3303      	adds	r3, #3
 8008ed8:	68b9      	ldr	r1, [r7, #8]
 8008eda:	440b      	add	r3, r1
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8008ee4:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8008ee6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	3301      	adds	r3, #1
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	089b      	lsrs	r3, r3, #2
 8008ef2:	69fa      	ldr	r2, [r7, #28]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d3d6      	bcc.n	8008ea6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f003 0303 	and.w	r3, r3, #3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d04d      	beq.n	8008f9e <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f003 0303 	and.w	r3, r3, #3
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	d107      	bne.n	8008f1c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	68ba      	ldr	r2, [r7, #8]
 8008f12:	4413      	add	r3, r2
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	6812      	ldr	r2, [r2, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d116      	bne.n	8008f54 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	68ba      	ldr	r2, [r7, #8]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	021b      	lsls	r3, r3, #8
 8008f32:	b21a      	sxth	r2, r3
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	3301      	adds	r3, #1
 8008f3a:	68b9      	ldr	r1, [r7, #8]
 8008f3c:	440b      	add	r3, r1
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	b21b      	sxth	r3, r3
 8008f42:	4313      	orrs	r3, r2
 8008f44:	b21b      	sxth	r3, r3
 8008f46:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	8b7a      	ldrh	r2, [r7, #26]
 8008f52:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f003 0303 	and.w	r3, r3, #3
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d11f      	bne.n	8008f9e <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	4413      	add	r3, r2
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	021b      	lsls	r3, r3, #8
 8008f6a:	b21a      	sxth	r2, r3
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	3301      	adds	r3, #1
 8008f72:	68b9      	ldr	r1, [r7, #8]
 8008f74:	440b      	add	r3, r1
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	b21b      	sxth	r3, r3
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	b21b      	sxth	r3, r3
 8008f7e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	8b7a      	ldrh	r2, [r7, #26]
 8008f8a:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	3302      	adds	r3, #2
 8008f92:	68ba      	ldr	r2, [r7, #8]
 8008f94:	4413      	add	r3, r2
 8008f96:	68fa      	ldr	r2, [r7, #12]
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	681b      	ldr	r3, [r3, #0]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3724      	adds	r7, #36	; 0x24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b087      	sub	sp, #28
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	e013      	b.n	8008fea <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	041a      	lsls	r2, r3, #16
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	440b      	add	r3, r1
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	617b      	str	r3, [r7, #20]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	085b      	lsrs	r3, r3, #1
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d3e6      	bcc.n	8008fc2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d009      	beq.n	8009012 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4413      	add	r3, r2
 800900c:	881a      	ldrh	r2, [r3, #0]
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
}
 8009018:	4618      	mov	r0, r3
 800901a:	371c      	adds	r7, #28
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009024:	b480      	push	{r7}
 8009026:	b087      	sub	sp, #28
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009034:	231f      	movs	r3, #31
 8009036:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009038:	bf00      	nop
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1e5a      	subs	r2, r3, #1
 800903e:	613a      	str	r2, [r7, #16]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d009      	beq.n	8009058 <HAL_CRCEx_Polynomial_Set+0x34>
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f003 031f 	and.w	r3, r3, #31
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	fa22 f303 	lsr.w	r3, r2, r3
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d0f0      	beq.n	800903a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2b18      	cmp	r3, #24
 800905c:	d846      	bhi.n	80090ec <HAL_CRCEx_Polynomial_Set+0xc8>
 800905e:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <HAL_CRCEx_Polynomial_Set+0x40>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	080090f3 	.word	0x080090f3
 8009068:	080090ed 	.word	0x080090ed
 800906c:	080090ed 	.word	0x080090ed
 8009070:	080090ed 	.word	0x080090ed
 8009074:	080090ed 	.word	0x080090ed
 8009078:	080090ed 	.word	0x080090ed
 800907c:	080090ed 	.word	0x080090ed
 8009080:	080090ed 	.word	0x080090ed
 8009084:	080090e1 	.word	0x080090e1
 8009088:	080090ed 	.word	0x080090ed
 800908c:	080090ed 	.word	0x080090ed
 8009090:	080090ed 	.word	0x080090ed
 8009094:	080090ed 	.word	0x080090ed
 8009098:	080090ed 	.word	0x080090ed
 800909c:	080090ed 	.word	0x080090ed
 80090a0:	080090ed 	.word	0x080090ed
 80090a4:	080090d5 	.word	0x080090d5
 80090a8:	080090ed 	.word	0x080090ed
 80090ac:	080090ed 	.word	0x080090ed
 80090b0:	080090ed 	.word	0x080090ed
 80090b4:	080090ed 	.word	0x080090ed
 80090b8:	080090ed 	.word	0x080090ed
 80090bc:	080090ed 	.word	0x080090ed
 80090c0:	080090ed 	.word	0x080090ed
 80090c4:	080090c9 	.word	0x080090c9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2b06      	cmp	r3, #6
 80090cc:	d913      	bls.n	80090f6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80090d2:	e010      	b.n	80090f6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	2b07      	cmp	r3, #7
 80090d8:	d90f      	bls.n	80090fa <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80090de:	e00c      	b.n	80090fa <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	2b0f      	cmp	r3, #15
 80090e4:	d90b      	bls.n	80090fe <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80090ea:	e008      	b.n	80090fe <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
      break;
 80090f0:	e006      	b.n	8009100 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80090f2:	bf00      	nop
 80090f4:	e004      	b.n	8009100 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80090f6:	bf00      	nop
 80090f8:	e002      	b.n	8009100 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80090fa:	bf00      	nop
 80090fc:	e000      	b.n	8009100 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80090fe:	bf00      	nop
  }
  if (status == HAL_OK)
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10d      	bne.n	8009122 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	f023 0118 	bic.w	r1, r3, #24
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	430a      	orrs	r2, r1
 8009120:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009122:	7dfb      	ldrb	r3, [r7, #23]
}
 8009124:	4618      	mov	r0, r3
 8009126:	371c      	adds	r7, #28
 8009128:	46bd      	mov	sp, r7
 800912a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912e:	4770      	bx	lr

08009130 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009138:	f7fd fb6e 	bl	8006818 <HAL_GetTick>
 800913c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	e314      	b.n	8009772 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a66      	ldr	r2, [pc, #408]	; (80092e8 <HAL_DMA_Init+0x1b8>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d04a      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a65      	ldr	r2, [pc, #404]	; (80092ec <HAL_DMA_Init+0x1bc>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d045      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a63      	ldr	r2, [pc, #396]	; (80092f0 <HAL_DMA_Init+0x1c0>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d040      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a62      	ldr	r2, [pc, #392]	; (80092f4 <HAL_DMA_Init+0x1c4>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d03b      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a60      	ldr	r2, [pc, #384]	; (80092f8 <HAL_DMA_Init+0x1c8>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d036      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a5f      	ldr	r2, [pc, #380]	; (80092fc <HAL_DMA_Init+0x1cc>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d031      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a5d      	ldr	r2, [pc, #372]	; (8009300 <HAL_DMA_Init+0x1d0>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d02c      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a5c      	ldr	r2, [pc, #368]	; (8009304 <HAL_DMA_Init+0x1d4>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d027      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a5a      	ldr	r2, [pc, #360]	; (8009308 <HAL_DMA_Init+0x1d8>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d022      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a59      	ldr	r2, [pc, #356]	; (800930c <HAL_DMA_Init+0x1dc>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d01d      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a57      	ldr	r2, [pc, #348]	; (8009310 <HAL_DMA_Init+0x1e0>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d018      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a56      	ldr	r2, [pc, #344]	; (8009314 <HAL_DMA_Init+0x1e4>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d013      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a54      	ldr	r2, [pc, #336]	; (8009318 <HAL_DMA_Init+0x1e8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00e      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a53      	ldr	r2, [pc, #332]	; (800931c <HAL_DMA_Init+0x1ec>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d009      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a51      	ldr	r2, [pc, #324]	; (8009320 <HAL_DMA_Init+0x1f0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d004      	beq.n	80091e8 <HAL_DMA_Init+0xb8>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a50      	ldr	r2, [pc, #320]	; (8009324 <HAL_DMA_Init+0x1f4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d101      	bne.n	80091ec <HAL_DMA_Init+0xbc>
 80091e8:	2301      	movs	r3, #1
 80091ea:	e000      	b.n	80091ee <HAL_DMA_Init+0xbe>
 80091ec:	2300      	movs	r3, #0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 813c 	beq.w	800946c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a37      	ldr	r2, [pc, #220]	; (80092e8 <HAL_DMA_Init+0x1b8>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d04a      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a36      	ldr	r2, [pc, #216]	; (80092ec <HAL_DMA_Init+0x1bc>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d045      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a34      	ldr	r2, [pc, #208]	; (80092f0 <HAL_DMA_Init+0x1c0>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d040      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a33      	ldr	r2, [pc, #204]	; (80092f4 <HAL_DMA_Init+0x1c4>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d03b      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a31      	ldr	r2, [pc, #196]	; (80092f8 <HAL_DMA_Init+0x1c8>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d036      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a30      	ldr	r2, [pc, #192]	; (80092fc <HAL_DMA_Init+0x1cc>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d031      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a2e      	ldr	r2, [pc, #184]	; (8009300 <HAL_DMA_Init+0x1d0>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d02c      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a2d      	ldr	r2, [pc, #180]	; (8009304 <HAL_DMA_Init+0x1d4>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d027      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a2b      	ldr	r2, [pc, #172]	; (8009308 <HAL_DMA_Init+0x1d8>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d022      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a2a      	ldr	r2, [pc, #168]	; (800930c <HAL_DMA_Init+0x1dc>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d01d      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a28      	ldr	r2, [pc, #160]	; (8009310 <HAL_DMA_Init+0x1e0>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d018      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a27      	ldr	r2, [pc, #156]	; (8009314 <HAL_DMA_Init+0x1e4>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d013      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a25      	ldr	r2, [pc, #148]	; (8009318 <HAL_DMA_Init+0x1e8>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d00e      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a24      	ldr	r2, [pc, #144]	; (800931c <HAL_DMA_Init+0x1ec>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d009      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a22      	ldr	r2, [pc, #136]	; (8009320 <HAL_DMA_Init+0x1f0>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d004      	beq.n	80092a4 <HAL_DMA_Init+0x174>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a21      	ldr	r2, [pc, #132]	; (8009324 <HAL_DMA_Init+0x1f4>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d108      	bne.n	80092b6 <HAL_DMA_Init+0x186>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f022 0201 	bic.w	r2, r2, #1
 80092b2:	601a      	str	r2, [r3, #0]
 80092b4:	e007      	b.n	80092c6 <HAL_DMA_Init+0x196>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80092c6:	e02f      	b.n	8009328 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80092c8:	f7fd faa6 	bl	8006818 <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	2b05      	cmp	r3, #5
 80092d4:	d928      	bls.n	8009328 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2220      	movs	r2, #32
 80092da:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2203      	movs	r2, #3
 80092e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e244      	b.n	8009772 <HAL_DMA_Init+0x642>
 80092e8:	40020010 	.word	0x40020010
 80092ec:	40020028 	.word	0x40020028
 80092f0:	40020040 	.word	0x40020040
 80092f4:	40020058 	.word	0x40020058
 80092f8:	40020070 	.word	0x40020070
 80092fc:	40020088 	.word	0x40020088
 8009300:	400200a0 	.word	0x400200a0
 8009304:	400200b8 	.word	0x400200b8
 8009308:	40020410 	.word	0x40020410
 800930c:	40020428 	.word	0x40020428
 8009310:	40020440 	.word	0x40020440
 8009314:	40020458 	.word	0x40020458
 8009318:	40020470 	.word	0x40020470
 800931c:	40020488 	.word	0x40020488
 8009320:	400204a0 	.word	0x400204a0
 8009324:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1c8      	bne.n	80092c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	4b84      	ldr	r3, [pc, #528]	; (8009554 <HAL_DMA_Init+0x424>)
 8009342:	4013      	ands	r3, r2
 8009344:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800934e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	691b      	ldr	r3, [r3, #16]
 8009354:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800935a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009366:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	2b04      	cmp	r3, #4
 800937a:	d107      	bne.n	800938c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009384:	4313      	orrs	r3, r2
 8009386:	697a      	ldr	r2, [r7, #20]
 8009388:	4313      	orrs	r3, r2
 800938a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	2b28      	cmp	r3, #40	; 0x28
 8009392:	d903      	bls.n	800939c <HAL_DMA_Init+0x26c>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	2b2e      	cmp	r3, #46	; 0x2e
 800939a:	d91f      	bls.n	80093dc <HAL_DMA_Init+0x2ac>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	2b3e      	cmp	r3, #62	; 0x3e
 80093a2:	d903      	bls.n	80093ac <HAL_DMA_Init+0x27c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	2b42      	cmp	r3, #66	; 0x42
 80093aa:	d917      	bls.n	80093dc <HAL_DMA_Init+0x2ac>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	2b46      	cmp	r3, #70	; 0x46
 80093b2:	d903      	bls.n	80093bc <HAL_DMA_Init+0x28c>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	2b48      	cmp	r3, #72	; 0x48
 80093ba:	d90f      	bls.n	80093dc <HAL_DMA_Init+0x2ac>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	2b4e      	cmp	r3, #78	; 0x4e
 80093c2:	d903      	bls.n	80093cc <HAL_DMA_Init+0x29c>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	2b52      	cmp	r3, #82	; 0x52
 80093ca:	d907      	bls.n	80093dc <HAL_DMA_Init+0x2ac>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	2b73      	cmp	r3, #115	; 0x73
 80093d2:	d905      	bls.n	80093e0 <HAL_DMA_Init+0x2b0>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	2b77      	cmp	r3, #119	; 0x77
 80093da:	d801      	bhi.n	80093e0 <HAL_DMA_Init+0x2b0>
 80093dc:	2301      	movs	r3, #1
 80093de:	e000      	b.n	80093e2 <HAL_DMA_Init+0x2b2>
 80093e0:	2300      	movs	r3, #0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093ec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f023 0307 	bic.w	r3, r3, #7
 8009404:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	4313      	orrs	r3, r2
 800940e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	2b04      	cmp	r3, #4
 8009416:	d117      	bne.n	8009448 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00e      	beq.n	8009448 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f001 ff28 	bl	800b280 <DMA_CheckFifoParam>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d008      	beq.n	8009448 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2240      	movs	r2, #64	; 0x40
 800943a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e194      	b.n	8009772 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	697a      	ldr	r2, [r7, #20]
 800944e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f001 fe63 	bl	800b11c <DMA_CalcBaseAndBitshift>
 8009456:	4603      	mov	r3, r0
 8009458:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800945e:	f003 031f 	and.w	r3, r3, #31
 8009462:	223f      	movs	r2, #63	; 0x3f
 8009464:	409a      	lsls	r2, r3
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	609a      	str	r2, [r3, #8]
 800946a:	e0ca      	b.n	8009602 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a39      	ldr	r2, [pc, #228]	; (8009558 <HAL_DMA_Init+0x428>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d022      	beq.n	80094bc <HAL_DMA_Init+0x38c>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a38      	ldr	r2, [pc, #224]	; (800955c <HAL_DMA_Init+0x42c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d01d      	beq.n	80094bc <HAL_DMA_Init+0x38c>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a36      	ldr	r2, [pc, #216]	; (8009560 <HAL_DMA_Init+0x430>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d018      	beq.n	80094bc <HAL_DMA_Init+0x38c>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a35      	ldr	r2, [pc, #212]	; (8009564 <HAL_DMA_Init+0x434>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d013      	beq.n	80094bc <HAL_DMA_Init+0x38c>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a33      	ldr	r2, [pc, #204]	; (8009568 <HAL_DMA_Init+0x438>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d00e      	beq.n	80094bc <HAL_DMA_Init+0x38c>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a32      	ldr	r2, [pc, #200]	; (800956c <HAL_DMA_Init+0x43c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d009      	beq.n	80094bc <HAL_DMA_Init+0x38c>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a30      	ldr	r2, [pc, #192]	; (8009570 <HAL_DMA_Init+0x440>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d004      	beq.n	80094bc <HAL_DMA_Init+0x38c>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a2f      	ldr	r2, [pc, #188]	; (8009574 <HAL_DMA_Init+0x444>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d101      	bne.n	80094c0 <HAL_DMA_Init+0x390>
 80094bc:	2301      	movs	r3, #1
 80094be:	e000      	b.n	80094c2 <HAL_DMA_Init+0x392>
 80094c0:	2300      	movs	r3, #0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 8094 	beq.w	80095f0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a22      	ldr	r2, [pc, #136]	; (8009558 <HAL_DMA_Init+0x428>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d021      	beq.n	8009516 <HAL_DMA_Init+0x3e6>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a21      	ldr	r2, [pc, #132]	; (800955c <HAL_DMA_Init+0x42c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d01c      	beq.n	8009516 <HAL_DMA_Init+0x3e6>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1f      	ldr	r2, [pc, #124]	; (8009560 <HAL_DMA_Init+0x430>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d017      	beq.n	8009516 <HAL_DMA_Init+0x3e6>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a1e      	ldr	r2, [pc, #120]	; (8009564 <HAL_DMA_Init+0x434>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d012      	beq.n	8009516 <HAL_DMA_Init+0x3e6>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a1c      	ldr	r2, [pc, #112]	; (8009568 <HAL_DMA_Init+0x438>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00d      	beq.n	8009516 <HAL_DMA_Init+0x3e6>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a1b      	ldr	r2, [pc, #108]	; (800956c <HAL_DMA_Init+0x43c>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d008      	beq.n	8009516 <HAL_DMA_Init+0x3e6>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a19      	ldr	r2, [pc, #100]	; (8009570 <HAL_DMA_Init+0x440>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d003      	beq.n	8009516 <HAL_DMA_Init+0x3e6>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a18      	ldr	r2, [pc, #96]	; (8009574 <HAL_DMA_Init+0x444>)
 8009514:	4293      	cmp	r3, r2
 8009516:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2202      	movs	r2, #2
 800951c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	4b11      	ldr	r3, [pc, #68]	; (8009578 <HAL_DMA_Init+0x448>)
 8009534:	4013      	ands	r3, r2
 8009536:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	2b40      	cmp	r3, #64	; 0x40
 800953e:	d01d      	beq.n	800957c <HAL_DMA_Init+0x44c>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	2b80      	cmp	r3, #128	; 0x80
 8009546:	d102      	bne.n	800954e <HAL_DMA_Init+0x41e>
 8009548:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800954c:	e017      	b.n	800957e <HAL_DMA_Init+0x44e>
 800954e:	2300      	movs	r3, #0
 8009550:	e015      	b.n	800957e <HAL_DMA_Init+0x44e>
 8009552:	bf00      	nop
 8009554:	fe10803f 	.word	0xfe10803f
 8009558:	58025408 	.word	0x58025408
 800955c:	5802541c 	.word	0x5802541c
 8009560:	58025430 	.word	0x58025430
 8009564:	58025444 	.word	0x58025444
 8009568:	58025458 	.word	0x58025458
 800956c:	5802546c 	.word	0x5802546c
 8009570:	58025480 	.word	0x58025480
 8009574:	58025494 	.word	0x58025494
 8009578:	fffe000f 	.word	0xfffe000f
 800957c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	68d2      	ldr	r2, [r2, #12]
 8009582:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009584:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800958c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009594:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800959c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	69db      	ldr	r3, [r3, #28]
 80095a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80095a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80095ac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	461a      	mov	r2, r3
 80095c2:	4b6e      	ldr	r3, [pc, #440]	; (800977c <HAL_DMA_Init+0x64c>)
 80095c4:	4413      	add	r3, r2
 80095c6:	4a6e      	ldr	r2, [pc, #440]	; (8009780 <HAL_DMA_Init+0x650>)
 80095c8:	fba2 2303 	umull	r2, r3, r2, r3
 80095cc:	091b      	lsrs	r3, r3, #4
 80095ce:	009a      	lsls	r2, r3, #2
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fda1 	bl	800b11c <DMA_CalcBaseAndBitshift>
 80095da:	4603      	mov	r3, r0
 80095dc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095e2:	f003 031f 	and.w	r3, r3, #31
 80095e6:	2201      	movs	r2, #1
 80095e8:	409a      	lsls	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	605a      	str	r2, [r3, #4]
 80095ee:	e008      	b.n	8009602 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2240      	movs	r2, #64	; 0x40
 80095f4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2203      	movs	r2, #3
 80095fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e0b7      	b.n	8009772 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a5f      	ldr	r2, [pc, #380]	; (8009784 <HAL_DMA_Init+0x654>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d072      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a5d      	ldr	r2, [pc, #372]	; (8009788 <HAL_DMA_Init+0x658>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d06d      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a5c      	ldr	r2, [pc, #368]	; (800978c <HAL_DMA_Init+0x65c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d068      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a5a      	ldr	r2, [pc, #360]	; (8009790 <HAL_DMA_Init+0x660>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d063      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a59      	ldr	r2, [pc, #356]	; (8009794 <HAL_DMA_Init+0x664>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d05e      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a57      	ldr	r2, [pc, #348]	; (8009798 <HAL_DMA_Init+0x668>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d059      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a56      	ldr	r2, [pc, #344]	; (800979c <HAL_DMA_Init+0x66c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d054      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a54      	ldr	r2, [pc, #336]	; (80097a0 <HAL_DMA_Init+0x670>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d04f      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a53      	ldr	r2, [pc, #332]	; (80097a4 <HAL_DMA_Init+0x674>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d04a      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a51      	ldr	r2, [pc, #324]	; (80097a8 <HAL_DMA_Init+0x678>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d045      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a50      	ldr	r2, [pc, #320]	; (80097ac <HAL_DMA_Init+0x67c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d040      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a4e      	ldr	r2, [pc, #312]	; (80097b0 <HAL_DMA_Init+0x680>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d03b      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a4d      	ldr	r2, [pc, #308]	; (80097b4 <HAL_DMA_Init+0x684>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d036      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a4b      	ldr	r2, [pc, #300]	; (80097b8 <HAL_DMA_Init+0x688>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d031      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a4a      	ldr	r2, [pc, #296]	; (80097bc <HAL_DMA_Init+0x68c>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d02c      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a48      	ldr	r2, [pc, #288]	; (80097c0 <HAL_DMA_Init+0x690>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d027      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a47      	ldr	r2, [pc, #284]	; (80097c4 <HAL_DMA_Init+0x694>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d022      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a45      	ldr	r2, [pc, #276]	; (80097c8 <HAL_DMA_Init+0x698>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d01d      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a44      	ldr	r2, [pc, #272]	; (80097cc <HAL_DMA_Init+0x69c>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d018      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a42      	ldr	r2, [pc, #264]	; (80097d0 <HAL_DMA_Init+0x6a0>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d013      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a41      	ldr	r2, [pc, #260]	; (80097d4 <HAL_DMA_Init+0x6a4>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00e      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a3f      	ldr	r2, [pc, #252]	; (80097d8 <HAL_DMA_Init+0x6a8>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d009      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a3e      	ldr	r2, [pc, #248]	; (80097dc <HAL_DMA_Init+0x6ac>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d004      	beq.n	80096f2 <HAL_DMA_Init+0x5c2>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a3c      	ldr	r2, [pc, #240]	; (80097e0 <HAL_DMA_Init+0x6b0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d101      	bne.n	80096f6 <HAL_DMA_Init+0x5c6>
 80096f2:	2301      	movs	r3, #1
 80096f4:	e000      	b.n	80096f8 <HAL_DMA_Init+0x5c8>
 80096f6:	2300      	movs	r3, #0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d032      	beq.n	8009762 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 fe3b 	bl	800b378 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	689b      	ldr	r3, [r3, #8]
 8009706:	2b80      	cmp	r3, #128	; 0x80
 8009708:	d102      	bne.n	8009710 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2200      	movs	r2, #0
 800970e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685a      	ldr	r2, [r3, #4]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009718:	b2d2      	uxtb	r2, r2
 800971a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009724:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d010      	beq.n	8009750 <HAL_DMA_Init+0x620>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	2b08      	cmp	r3, #8
 8009734:	d80c      	bhi.n	8009750 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f001 feb8 	bl	800b4ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800974c:	605a      	str	r2, [r3, #4]
 800974e:	e008      	b.n	8009762 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2200      	movs	r2, #0
 8009760:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	a7fdabf8 	.word	0xa7fdabf8
 8009780:	cccccccd 	.word	0xcccccccd
 8009784:	40020010 	.word	0x40020010
 8009788:	40020028 	.word	0x40020028
 800978c:	40020040 	.word	0x40020040
 8009790:	40020058 	.word	0x40020058
 8009794:	40020070 	.word	0x40020070
 8009798:	40020088 	.word	0x40020088
 800979c:	400200a0 	.word	0x400200a0
 80097a0:	400200b8 	.word	0x400200b8
 80097a4:	40020410 	.word	0x40020410
 80097a8:	40020428 	.word	0x40020428
 80097ac:	40020440 	.word	0x40020440
 80097b0:	40020458 	.word	0x40020458
 80097b4:	40020470 	.word	0x40020470
 80097b8:	40020488 	.word	0x40020488
 80097bc:	400204a0 	.word	0x400204a0
 80097c0:	400204b8 	.word	0x400204b8
 80097c4:	58025408 	.word	0x58025408
 80097c8:	5802541c 	.word	0x5802541c
 80097cc:	58025430 	.word	0x58025430
 80097d0:	58025444 	.word	0x58025444
 80097d4:	58025458 	.word	0x58025458
 80097d8:	5802546c 	.word	0x5802546c
 80097dc:	58025480 	.word	0x58025480
 80097e0:	58025494 	.word	0x58025494

080097e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80097ec:	f7fd f814 	bl	8006818 <HAL_GetTick>
 80097f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e2dc      	b.n	8009db6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b02      	cmp	r3, #2
 8009806:	d008      	beq.n	800981a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2280      	movs	r2, #128	; 0x80
 800980c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e2cd      	b.n	8009db6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a76      	ldr	r2, [pc, #472]	; (80099f8 <HAL_DMA_Abort+0x214>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d04a      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a74      	ldr	r2, [pc, #464]	; (80099fc <HAL_DMA_Abort+0x218>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d045      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a73      	ldr	r2, [pc, #460]	; (8009a00 <HAL_DMA_Abort+0x21c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d040      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a71      	ldr	r2, [pc, #452]	; (8009a04 <HAL_DMA_Abort+0x220>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d03b      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a70      	ldr	r2, [pc, #448]	; (8009a08 <HAL_DMA_Abort+0x224>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d036      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a6e      	ldr	r2, [pc, #440]	; (8009a0c <HAL_DMA_Abort+0x228>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d031      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a6d      	ldr	r2, [pc, #436]	; (8009a10 <HAL_DMA_Abort+0x22c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d02c      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a6b      	ldr	r2, [pc, #428]	; (8009a14 <HAL_DMA_Abort+0x230>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d027      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a6a      	ldr	r2, [pc, #424]	; (8009a18 <HAL_DMA_Abort+0x234>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d022      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a68      	ldr	r2, [pc, #416]	; (8009a1c <HAL_DMA_Abort+0x238>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d01d      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a67      	ldr	r2, [pc, #412]	; (8009a20 <HAL_DMA_Abort+0x23c>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d018      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a65      	ldr	r2, [pc, #404]	; (8009a24 <HAL_DMA_Abort+0x240>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d013      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a64      	ldr	r2, [pc, #400]	; (8009a28 <HAL_DMA_Abort+0x244>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d00e      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a62      	ldr	r2, [pc, #392]	; (8009a2c <HAL_DMA_Abort+0x248>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d009      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a61      	ldr	r2, [pc, #388]	; (8009a30 <HAL_DMA_Abort+0x24c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d004      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a5f      	ldr	r2, [pc, #380]	; (8009a34 <HAL_DMA_Abort+0x250>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d101      	bne.n	80098be <HAL_DMA_Abort+0xda>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e000      	b.n	80098c0 <HAL_DMA_Abort+0xdc>
 80098be:	2300      	movs	r3, #0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d013      	beq.n	80098ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 021e 	bic.w	r2, r2, #30
 80098d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	e00a      	b.n	8009902 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 020e 	bic.w	r2, r2, #14
 80098fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a3c      	ldr	r2, [pc, #240]	; (80099f8 <HAL_DMA_Abort+0x214>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d072      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a3a      	ldr	r2, [pc, #232]	; (80099fc <HAL_DMA_Abort+0x218>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d06d      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a39      	ldr	r2, [pc, #228]	; (8009a00 <HAL_DMA_Abort+0x21c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d068      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a37      	ldr	r2, [pc, #220]	; (8009a04 <HAL_DMA_Abort+0x220>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d063      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a36      	ldr	r2, [pc, #216]	; (8009a08 <HAL_DMA_Abort+0x224>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d05e      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a34      	ldr	r2, [pc, #208]	; (8009a0c <HAL_DMA_Abort+0x228>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d059      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a33      	ldr	r2, [pc, #204]	; (8009a10 <HAL_DMA_Abort+0x22c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d054      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a31      	ldr	r2, [pc, #196]	; (8009a14 <HAL_DMA_Abort+0x230>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d04f      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a30      	ldr	r2, [pc, #192]	; (8009a18 <HAL_DMA_Abort+0x234>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d04a      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a2e      	ldr	r2, [pc, #184]	; (8009a1c <HAL_DMA_Abort+0x238>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d045      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a2d      	ldr	r2, [pc, #180]	; (8009a20 <HAL_DMA_Abort+0x23c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d040      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a2b      	ldr	r2, [pc, #172]	; (8009a24 <HAL_DMA_Abort+0x240>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d03b      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a2a      	ldr	r2, [pc, #168]	; (8009a28 <HAL_DMA_Abort+0x244>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d036      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a28      	ldr	r2, [pc, #160]	; (8009a2c <HAL_DMA_Abort+0x248>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d031      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a27      	ldr	r2, [pc, #156]	; (8009a30 <HAL_DMA_Abort+0x24c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d02c      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a25      	ldr	r2, [pc, #148]	; (8009a34 <HAL_DMA_Abort+0x250>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d027      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a24      	ldr	r2, [pc, #144]	; (8009a38 <HAL_DMA_Abort+0x254>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d022      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a22      	ldr	r2, [pc, #136]	; (8009a3c <HAL_DMA_Abort+0x258>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d01d      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a21      	ldr	r2, [pc, #132]	; (8009a40 <HAL_DMA_Abort+0x25c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d018      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <HAL_DMA_Abort+0x260>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d013      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <HAL_DMA_Abort+0x264>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00e      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a1c      	ldr	r2, [pc, #112]	; (8009a4c <HAL_DMA_Abort+0x268>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d009      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a1b      	ldr	r2, [pc, #108]	; (8009a50 <HAL_DMA_Abort+0x26c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d004      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a19      	ldr	r2, [pc, #100]	; (8009a54 <HAL_DMA_Abort+0x270>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d132      	bne.n	8009a58 <HAL_DMA_Abort+0x274>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e031      	b.n	8009a5a <HAL_DMA_Abort+0x276>
 80099f6:	bf00      	nop
 80099f8:	40020010 	.word	0x40020010
 80099fc:	40020028 	.word	0x40020028
 8009a00:	40020040 	.word	0x40020040
 8009a04:	40020058 	.word	0x40020058
 8009a08:	40020070 	.word	0x40020070
 8009a0c:	40020088 	.word	0x40020088
 8009a10:	400200a0 	.word	0x400200a0
 8009a14:	400200b8 	.word	0x400200b8
 8009a18:	40020410 	.word	0x40020410
 8009a1c:	40020428 	.word	0x40020428
 8009a20:	40020440 	.word	0x40020440
 8009a24:	40020458 	.word	0x40020458
 8009a28:	40020470 	.word	0x40020470
 8009a2c:	40020488 	.word	0x40020488
 8009a30:	400204a0 	.word	0x400204a0
 8009a34:	400204b8 	.word	0x400204b8
 8009a38:	58025408 	.word	0x58025408
 8009a3c:	5802541c 	.word	0x5802541c
 8009a40:	58025430 	.word	0x58025430
 8009a44:	58025444 	.word	0x58025444
 8009a48:	58025458 	.word	0x58025458
 8009a4c:	5802546c 	.word	0x5802546c
 8009a50:	58025480 	.word	0x58025480
 8009a54:	58025494 	.word	0x58025494
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d007      	beq.n	8009a6e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a6d      	ldr	r2, [pc, #436]	; (8009c28 <HAL_DMA_Abort+0x444>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d04a      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a6b      	ldr	r2, [pc, #428]	; (8009c2c <HAL_DMA_Abort+0x448>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d045      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a6a      	ldr	r2, [pc, #424]	; (8009c30 <HAL_DMA_Abort+0x44c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d040      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a68      	ldr	r2, [pc, #416]	; (8009c34 <HAL_DMA_Abort+0x450>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d03b      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a67      	ldr	r2, [pc, #412]	; (8009c38 <HAL_DMA_Abort+0x454>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d036      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a65      	ldr	r2, [pc, #404]	; (8009c3c <HAL_DMA_Abort+0x458>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d031      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a64      	ldr	r2, [pc, #400]	; (8009c40 <HAL_DMA_Abort+0x45c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d02c      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a62      	ldr	r2, [pc, #392]	; (8009c44 <HAL_DMA_Abort+0x460>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d027      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a61      	ldr	r2, [pc, #388]	; (8009c48 <HAL_DMA_Abort+0x464>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d022      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a5f      	ldr	r2, [pc, #380]	; (8009c4c <HAL_DMA_Abort+0x468>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d01d      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a5e      	ldr	r2, [pc, #376]	; (8009c50 <HAL_DMA_Abort+0x46c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d018      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a5c      	ldr	r2, [pc, #368]	; (8009c54 <HAL_DMA_Abort+0x470>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d013      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a5b      	ldr	r2, [pc, #364]	; (8009c58 <HAL_DMA_Abort+0x474>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d00e      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a59      	ldr	r2, [pc, #356]	; (8009c5c <HAL_DMA_Abort+0x478>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d009      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a58      	ldr	r2, [pc, #352]	; (8009c60 <HAL_DMA_Abort+0x47c>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d004      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a56      	ldr	r2, [pc, #344]	; (8009c64 <HAL_DMA_Abort+0x480>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d108      	bne.n	8009b20 <HAL_DMA_Abort+0x33c>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f022 0201 	bic.w	r2, r2, #1
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	e007      	b.n	8009b30 <HAL_DMA_Abort+0x34c>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f022 0201 	bic.w	r2, r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009b30:	e013      	b.n	8009b5a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009b32:	f7fc fe71 	bl	8006818 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b05      	cmp	r3, #5
 8009b3e:	d90c      	bls.n	8009b5a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2220      	movs	r2, #32
 8009b44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2203      	movs	r2, #3
 8009b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e12d      	b.n	8009db6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e5      	bne.n	8009b32 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a2f      	ldr	r2, [pc, #188]	; (8009c28 <HAL_DMA_Abort+0x444>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d04a      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a2d      	ldr	r2, [pc, #180]	; (8009c2c <HAL_DMA_Abort+0x448>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d045      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a2c      	ldr	r2, [pc, #176]	; (8009c30 <HAL_DMA_Abort+0x44c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d040      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a2a      	ldr	r2, [pc, #168]	; (8009c34 <HAL_DMA_Abort+0x450>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d03b      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a29      	ldr	r2, [pc, #164]	; (8009c38 <HAL_DMA_Abort+0x454>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d036      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a27      	ldr	r2, [pc, #156]	; (8009c3c <HAL_DMA_Abort+0x458>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d031      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a26      	ldr	r2, [pc, #152]	; (8009c40 <HAL_DMA_Abort+0x45c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d02c      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a24      	ldr	r2, [pc, #144]	; (8009c44 <HAL_DMA_Abort+0x460>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d027      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a23      	ldr	r2, [pc, #140]	; (8009c48 <HAL_DMA_Abort+0x464>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d022      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a21      	ldr	r2, [pc, #132]	; (8009c4c <HAL_DMA_Abort+0x468>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d01d      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a20      	ldr	r2, [pc, #128]	; (8009c50 <HAL_DMA_Abort+0x46c>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d018      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <HAL_DMA_Abort+0x470>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d013      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a1d      	ldr	r2, [pc, #116]	; (8009c58 <HAL_DMA_Abort+0x474>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00e      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a1b      	ldr	r2, [pc, #108]	; (8009c5c <HAL_DMA_Abort+0x478>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d009      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a1a      	ldr	r2, [pc, #104]	; (8009c60 <HAL_DMA_Abort+0x47c>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d004      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a18      	ldr	r2, [pc, #96]	; (8009c64 <HAL_DMA_Abort+0x480>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d101      	bne.n	8009c0a <HAL_DMA_Abort+0x426>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <HAL_DMA_Abort+0x428>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d02b      	beq.n	8009c68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c1a:	f003 031f 	and.w	r3, r3, #31
 8009c1e:	223f      	movs	r2, #63	; 0x3f
 8009c20:	409a      	lsls	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	609a      	str	r2, [r3, #8]
 8009c26:	e02a      	b.n	8009c7e <HAL_DMA_Abort+0x49a>
 8009c28:	40020010 	.word	0x40020010
 8009c2c:	40020028 	.word	0x40020028
 8009c30:	40020040 	.word	0x40020040
 8009c34:	40020058 	.word	0x40020058
 8009c38:	40020070 	.word	0x40020070
 8009c3c:	40020088 	.word	0x40020088
 8009c40:	400200a0 	.word	0x400200a0
 8009c44:	400200b8 	.word	0x400200b8
 8009c48:	40020410 	.word	0x40020410
 8009c4c:	40020428 	.word	0x40020428
 8009c50:	40020440 	.word	0x40020440
 8009c54:	40020458 	.word	0x40020458
 8009c58:	40020470 	.word	0x40020470
 8009c5c:	40020488 	.word	0x40020488
 8009c60:	400204a0 	.word	0x400204a0
 8009c64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c72:	f003 031f 	and.w	r3, r3, #31
 8009c76:	2201      	movs	r2, #1
 8009c78:	409a      	lsls	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a4f      	ldr	r2, [pc, #316]	; (8009dc0 <HAL_DMA_Abort+0x5dc>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d072      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a4d      	ldr	r2, [pc, #308]	; (8009dc4 <HAL_DMA_Abort+0x5e0>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d06d      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a4c      	ldr	r2, [pc, #304]	; (8009dc8 <HAL_DMA_Abort+0x5e4>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d068      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a4a      	ldr	r2, [pc, #296]	; (8009dcc <HAL_DMA_Abort+0x5e8>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d063      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a49      	ldr	r2, [pc, #292]	; (8009dd0 <HAL_DMA_Abort+0x5ec>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d05e      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a47      	ldr	r2, [pc, #284]	; (8009dd4 <HAL_DMA_Abort+0x5f0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d059      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a46      	ldr	r2, [pc, #280]	; (8009dd8 <HAL_DMA_Abort+0x5f4>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d054      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a44      	ldr	r2, [pc, #272]	; (8009ddc <HAL_DMA_Abort+0x5f8>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d04f      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a43      	ldr	r2, [pc, #268]	; (8009de0 <HAL_DMA_Abort+0x5fc>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d04a      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a41      	ldr	r2, [pc, #260]	; (8009de4 <HAL_DMA_Abort+0x600>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d045      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a40      	ldr	r2, [pc, #256]	; (8009de8 <HAL_DMA_Abort+0x604>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d040      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a3e      	ldr	r2, [pc, #248]	; (8009dec <HAL_DMA_Abort+0x608>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d03b      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a3d      	ldr	r2, [pc, #244]	; (8009df0 <HAL_DMA_Abort+0x60c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d036      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a3b      	ldr	r2, [pc, #236]	; (8009df4 <HAL_DMA_Abort+0x610>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d031      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a3a      	ldr	r2, [pc, #232]	; (8009df8 <HAL_DMA_Abort+0x614>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d02c      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a38      	ldr	r2, [pc, #224]	; (8009dfc <HAL_DMA_Abort+0x618>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d027      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a37      	ldr	r2, [pc, #220]	; (8009e00 <HAL_DMA_Abort+0x61c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d022      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a35      	ldr	r2, [pc, #212]	; (8009e04 <HAL_DMA_Abort+0x620>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d01d      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a34      	ldr	r2, [pc, #208]	; (8009e08 <HAL_DMA_Abort+0x624>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d018      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a32      	ldr	r2, [pc, #200]	; (8009e0c <HAL_DMA_Abort+0x628>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d013      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a31      	ldr	r2, [pc, #196]	; (8009e10 <HAL_DMA_Abort+0x62c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00e      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a2f      	ldr	r2, [pc, #188]	; (8009e14 <HAL_DMA_Abort+0x630>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d009      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a2e      	ldr	r2, [pc, #184]	; (8009e18 <HAL_DMA_Abort+0x634>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d004      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a2c      	ldr	r2, [pc, #176]	; (8009e1c <HAL_DMA_Abort+0x638>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d101      	bne.n	8009d72 <HAL_DMA_Abort+0x58e>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <HAL_DMA_Abort+0x590>
 8009d72:	2300      	movs	r3, #0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d015      	beq.n	8009da4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009d80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00c      	beq.n	8009da4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009da2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	40020010 	.word	0x40020010
 8009dc4:	40020028 	.word	0x40020028
 8009dc8:	40020040 	.word	0x40020040
 8009dcc:	40020058 	.word	0x40020058
 8009dd0:	40020070 	.word	0x40020070
 8009dd4:	40020088 	.word	0x40020088
 8009dd8:	400200a0 	.word	0x400200a0
 8009ddc:	400200b8 	.word	0x400200b8
 8009de0:	40020410 	.word	0x40020410
 8009de4:	40020428 	.word	0x40020428
 8009de8:	40020440 	.word	0x40020440
 8009dec:	40020458 	.word	0x40020458
 8009df0:	40020470 	.word	0x40020470
 8009df4:	40020488 	.word	0x40020488
 8009df8:	400204a0 	.word	0x400204a0
 8009dfc:	400204b8 	.word	0x400204b8
 8009e00:	58025408 	.word	0x58025408
 8009e04:	5802541c 	.word	0x5802541c
 8009e08:	58025430 	.word	0x58025430
 8009e0c:	58025444 	.word	0x58025444
 8009e10:	58025458 	.word	0x58025458
 8009e14:	5802546c 	.word	0x5802546c
 8009e18:	58025480 	.word	0x58025480
 8009e1c:	58025494 	.word	0x58025494

08009e20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e237      	b.n	800a2a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d004      	beq.n	8009e48 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2280      	movs	r2, #128	; 0x80
 8009e42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e22c      	b.n	800a2a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a5c      	ldr	r2, [pc, #368]	; (8009fc0 <HAL_DMA_Abort_IT+0x1a0>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d04a      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a5b      	ldr	r2, [pc, #364]	; (8009fc4 <HAL_DMA_Abort_IT+0x1a4>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d045      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a59      	ldr	r2, [pc, #356]	; (8009fc8 <HAL_DMA_Abort_IT+0x1a8>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d040      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a58      	ldr	r2, [pc, #352]	; (8009fcc <HAL_DMA_Abort_IT+0x1ac>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d03b      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a56      	ldr	r2, [pc, #344]	; (8009fd0 <HAL_DMA_Abort_IT+0x1b0>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d036      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a55      	ldr	r2, [pc, #340]	; (8009fd4 <HAL_DMA_Abort_IT+0x1b4>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d031      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a53      	ldr	r2, [pc, #332]	; (8009fd8 <HAL_DMA_Abort_IT+0x1b8>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d02c      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a52      	ldr	r2, [pc, #328]	; (8009fdc <HAL_DMA_Abort_IT+0x1bc>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d027      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a50      	ldr	r2, [pc, #320]	; (8009fe0 <HAL_DMA_Abort_IT+0x1c0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d022      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a4f      	ldr	r2, [pc, #316]	; (8009fe4 <HAL_DMA_Abort_IT+0x1c4>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d01d      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a4d      	ldr	r2, [pc, #308]	; (8009fe8 <HAL_DMA_Abort_IT+0x1c8>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d018      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a4c      	ldr	r2, [pc, #304]	; (8009fec <HAL_DMA_Abort_IT+0x1cc>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d013      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a4a      	ldr	r2, [pc, #296]	; (8009ff0 <HAL_DMA_Abort_IT+0x1d0>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d00e      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a49      	ldr	r2, [pc, #292]	; (8009ff4 <HAL_DMA_Abort_IT+0x1d4>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d009      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a47      	ldr	r2, [pc, #284]	; (8009ff8 <HAL_DMA_Abort_IT+0x1d8>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d004      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a46      	ldr	r2, [pc, #280]	; (8009ffc <HAL_DMA_Abort_IT+0x1dc>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d101      	bne.n	8009eec <HAL_DMA_Abort_IT+0xcc>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e000      	b.n	8009eee <HAL_DMA_Abort_IT+0xce>
 8009eec:	2300      	movs	r3, #0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 8086 	beq.w	800a000 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2204      	movs	r2, #4
 8009ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a2f      	ldr	r2, [pc, #188]	; (8009fc0 <HAL_DMA_Abort_IT+0x1a0>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d04a      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a2e      	ldr	r2, [pc, #184]	; (8009fc4 <HAL_DMA_Abort_IT+0x1a4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d045      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a2c      	ldr	r2, [pc, #176]	; (8009fc8 <HAL_DMA_Abort_IT+0x1a8>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d040      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a2b      	ldr	r2, [pc, #172]	; (8009fcc <HAL_DMA_Abort_IT+0x1ac>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d03b      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a29      	ldr	r2, [pc, #164]	; (8009fd0 <HAL_DMA_Abort_IT+0x1b0>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d036      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a28      	ldr	r2, [pc, #160]	; (8009fd4 <HAL_DMA_Abort_IT+0x1b4>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d031      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a26      	ldr	r2, [pc, #152]	; (8009fd8 <HAL_DMA_Abort_IT+0x1b8>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d02c      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a25      	ldr	r2, [pc, #148]	; (8009fdc <HAL_DMA_Abort_IT+0x1bc>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d027      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a23      	ldr	r2, [pc, #140]	; (8009fe0 <HAL_DMA_Abort_IT+0x1c0>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d022      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a22      	ldr	r2, [pc, #136]	; (8009fe4 <HAL_DMA_Abort_IT+0x1c4>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d01d      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a20      	ldr	r2, [pc, #128]	; (8009fe8 <HAL_DMA_Abort_IT+0x1c8>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d018      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a1f      	ldr	r2, [pc, #124]	; (8009fec <HAL_DMA_Abort_IT+0x1cc>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d013      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a1d      	ldr	r2, [pc, #116]	; (8009ff0 <HAL_DMA_Abort_IT+0x1d0>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d00e      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a1c      	ldr	r2, [pc, #112]	; (8009ff4 <HAL_DMA_Abort_IT+0x1d4>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d009      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a1a      	ldr	r2, [pc, #104]	; (8009ff8 <HAL_DMA_Abort_IT+0x1d8>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d004      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a19      	ldr	r2, [pc, #100]	; (8009ffc <HAL_DMA_Abort_IT+0x1dc>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d108      	bne.n	8009fae <HAL_DMA_Abort_IT+0x18e>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f022 0201 	bic.w	r2, r2, #1
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	e178      	b.n	800a2a0 <HAL_DMA_Abort_IT+0x480>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0201 	bic.w	r2, r2, #1
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	e16f      	b.n	800a2a0 <HAL_DMA_Abort_IT+0x480>
 8009fc0:	40020010 	.word	0x40020010
 8009fc4:	40020028 	.word	0x40020028
 8009fc8:	40020040 	.word	0x40020040
 8009fcc:	40020058 	.word	0x40020058
 8009fd0:	40020070 	.word	0x40020070
 8009fd4:	40020088 	.word	0x40020088
 8009fd8:	400200a0 	.word	0x400200a0
 8009fdc:	400200b8 	.word	0x400200b8
 8009fe0:	40020410 	.word	0x40020410
 8009fe4:	40020428 	.word	0x40020428
 8009fe8:	40020440 	.word	0x40020440
 8009fec:	40020458 	.word	0x40020458
 8009ff0:	40020470 	.word	0x40020470
 8009ff4:	40020488 	.word	0x40020488
 8009ff8:	400204a0 	.word	0x400204a0
 8009ffc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 020e 	bic.w	r2, r2, #14
 800a00e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a6c      	ldr	r2, [pc, #432]	; (800a1c8 <HAL_DMA_Abort_IT+0x3a8>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d04a      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a6b      	ldr	r2, [pc, #428]	; (800a1cc <HAL_DMA_Abort_IT+0x3ac>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d045      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a69      	ldr	r2, [pc, #420]	; (800a1d0 <HAL_DMA_Abort_IT+0x3b0>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d040      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a68      	ldr	r2, [pc, #416]	; (800a1d4 <HAL_DMA_Abort_IT+0x3b4>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d03b      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a66      	ldr	r2, [pc, #408]	; (800a1d8 <HAL_DMA_Abort_IT+0x3b8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d036      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a65      	ldr	r2, [pc, #404]	; (800a1dc <HAL_DMA_Abort_IT+0x3bc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d031      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a63      	ldr	r2, [pc, #396]	; (800a1e0 <HAL_DMA_Abort_IT+0x3c0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d02c      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a62      	ldr	r2, [pc, #392]	; (800a1e4 <HAL_DMA_Abort_IT+0x3c4>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d027      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a60      	ldr	r2, [pc, #384]	; (800a1e8 <HAL_DMA_Abort_IT+0x3c8>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d022      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a5f      	ldr	r2, [pc, #380]	; (800a1ec <HAL_DMA_Abort_IT+0x3cc>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d01d      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a5d      	ldr	r2, [pc, #372]	; (800a1f0 <HAL_DMA_Abort_IT+0x3d0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d018      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a5c      	ldr	r2, [pc, #368]	; (800a1f4 <HAL_DMA_Abort_IT+0x3d4>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d013      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a5a      	ldr	r2, [pc, #360]	; (800a1f8 <HAL_DMA_Abort_IT+0x3d8>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00e      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a59      	ldr	r2, [pc, #356]	; (800a1fc <HAL_DMA_Abort_IT+0x3dc>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d009      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a57      	ldr	r2, [pc, #348]	; (800a200 <HAL_DMA_Abort_IT+0x3e0>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d004      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a56      	ldr	r2, [pc, #344]	; (800a204 <HAL_DMA_Abort_IT+0x3e4>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d108      	bne.n	800a0c2 <HAL_DMA_Abort_IT+0x2a2>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f022 0201 	bic.w	r2, r2, #1
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	e007      	b.n	800a0d2 <HAL_DMA_Abort_IT+0x2b2>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f022 0201 	bic.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a3c      	ldr	r2, [pc, #240]	; (800a1c8 <HAL_DMA_Abort_IT+0x3a8>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d072      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a3a      	ldr	r2, [pc, #232]	; (800a1cc <HAL_DMA_Abort_IT+0x3ac>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d06d      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a39      	ldr	r2, [pc, #228]	; (800a1d0 <HAL_DMA_Abort_IT+0x3b0>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d068      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a37      	ldr	r2, [pc, #220]	; (800a1d4 <HAL_DMA_Abort_IT+0x3b4>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d063      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a36      	ldr	r2, [pc, #216]	; (800a1d8 <HAL_DMA_Abort_IT+0x3b8>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d05e      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a34      	ldr	r2, [pc, #208]	; (800a1dc <HAL_DMA_Abort_IT+0x3bc>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d059      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a33      	ldr	r2, [pc, #204]	; (800a1e0 <HAL_DMA_Abort_IT+0x3c0>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d054      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a31      	ldr	r2, [pc, #196]	; (800a1e4 <HAL_DMA_Abort_IT+0x3c4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d04f      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a30      	ldr	r2, [pc, #192]	; (800a1e8 <HAL_DMA_Abort_IT+0x3c8>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d04a      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a2e      	ldr	r2, [pc, #184]	; (800a1ec <HAL_DMA_Abort_IT+0x3cc>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d045      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a2d      	ldr	r2, [pc, #180]	; (800a1f0 <HAL_DMA_Abort_IT+0x3d0>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d040      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a2b      	ldr	r2, [pc, #172]	; (800a1f4 <HAL_DMA_Abort_IT+0x3d4>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d03b      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a2a      	ldr	r2, [pc, #168]	; (800a1f8 <HAL_DMA_Abort_IT+0x3d8>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d036      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a28      	ldr	r2, [pc, #160]	; (800a1fc <HAL_DMA_Abort_IT+0x3dc>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d031      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a27      	ldr	r2, [pc, #156]	; (800a200 <HAL_DMA_Abort_IT+0x3e0>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d02c      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a25      	ldr	r2, [pc, #148]	; (800a204 <HAL_DMA_Abort_IT+0x3e4>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d027      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a24      	ldr	r2, [pc, #144]	; (800a208 <HAL_DMA_Abort_IT+0x3e8>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d022      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a22      	ldr	r2, [pc, #136]	; (800a20c <HAL_DMA_Abort_IT+0x3ec>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d01d      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a21      	ldr	r2, [pc, #132]	; (800a210 <HAL_DMA_Abort_IT+0x3f0>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d018      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a1f      	ldr	r2, [pc, #124]	; (800a214 <HAL_DMA_Abort_IT+0x3f4>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d013      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a1e      	ldr	r2, [pc, #120]	; (800a218 <HAL_DMA_Abort_IT+0x3f8>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d00e      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a1c      	ldr	r2, [pc, #112]	; (800a21c <HAL_DMA_Abort_IT+0x3fc>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d009      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a1b      	ldr	r2, [pc, #108]	; (800a220 <HAL_DMA_Abort_IT+0x400>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d004      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a19      	ldr	r2, [pc, #100]	; (800a224 <HAL_DMA_Abort_IT+0x404>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d132      	bne.n	800a228 <HAL_DMA_Abort_IT+0x408>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e031      	b.n	800a22a <HAL_DMA_Abort_IT+0x40a>
 800a1c6:	bf00      	nop
 800a1c8:	40020010 	.word	0x40020010
 800a1cc:	40020028 	.word	0x40020028
 800a1d0:	40020040 	.word	0x40020040
 800a1d4:	40020058 	.word	0x40020058
 800a1d8:	40020070 	.word	0x40020070
 800a1dc:	40020088 	.word	0x40020088
 800a1e0:	400200a0 	.word	0x400200a0
 800a1e4:	400200b8 	.word	0x400200b8
 800a1e8:	40020410 	.word	0x40020410
 800a1ec:	40020428 	.word	0x40020428
 800a1f0:	40020440 	.word	0x40020440
 800a1f4:	40020458 	.word	0x40020458
 800a1f8:	40020470 	.word	0x40020470
 800a1fc:	40020488 	.word	0x40020488
 800a200:	400204a0 	.word	0x400204a0
 800a204:	400204b8 	.word	0x400204b8
 800a208:	58025408 	.word	0x58025408
 800a20c:	5802541c 	.word	0x5802541c
 800a210:	58025430 	.word	0x58025430
 800a214:	58025444 	.word	0x58025444
 800a218:	58025458 	.word	0x58025458
 800a21c:	5802546c 	.word	0x5802546c
 800a220:	58025480 	.word	0x58025480
 800a224:	58025494 	.word	0x58025494
 800a228:	2300      	movs	r3, #0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d028      	beq.n	800a280 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a23c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a242:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a248:	f003 031f 	and.w	r3, r3, #31
 800a24c:	2201      	movs	r2, #1
 800a24e:	409a      	lsls	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a25c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00c      	beq.n	800a280 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a274:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a27e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop

0800a2ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	; 0x28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a2b8:	4b67      	ldr	r3, [pc, #412]	; (800a458 <HAL_DMA_IRQHandler+0x1ac>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a67      	ldr	r2, [pc, #412]	; (800a45c <HAL_DMA_IRQHandler+0x1b0>)
 800a2be:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c2:	0a9b      	lsrs	r3, r3, #10
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a5f      	ldr	r2, [pc, #380]	; (800a460 <HAL_DMA_IRQHandler+0x1b4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d04a      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a5d      	ldr	r2, [pc, #372]	; (800a464 <HAL_DMA_IRQHandler+0x1b8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d045      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a5c      	ldr	r2, [pc, #368]	; (800a468 <HAL_DMA_IRQHandler+0x1bc>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d040      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a5a      	ldr	r2, [pc, #360]	; (800a46c <HAL_DMA_IRQHandler+0x1c0>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d03b      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a59      	ldr	r2, [pc, #356]	; (800a470 <HAL_DMA_IRQHandler+0x1c4>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d036      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a57      	ldr	r2, [pc, #348]	; (800a474 <HAL_DMA_IRQHandler+0x1c8>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d031      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a56      	ldr	r2, [pc, #344]	; (800a478 <HAL_DMA_IRQHandler+0x1cc>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d02c      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a54      	ldr	r2, [pc, #336]	; (800a47c <HAL_DMA_IRQHandler+0x1d0>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d027      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a53      	ldr	r2, [pc, #332]	; (800a480 <HAL_DMA_IRQHandler+0x1d4>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d022      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a51      	ldr	r2, [pc, #324]	; (800a484 <HAL_DMA_IRQHandler+0x1d8>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d01d      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a50      	ldr	r2, [pc, #320]	; (800a488 <HAL_DMA_IRQHandler+0x1dc>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d018      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a4e      	ldr	r2, [pc, #312]	; (800a48c <HAL_DMA_IRQHandler+0x1e0>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d013      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a4d      	ldr	r2, [pc, #308]	; (800a490 <HAL_DMA_IRQHandler+0x1e4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d00e      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a4b      	ldr	r2, [pc, #300]	; (800a494 <HAL_DMA_IRQHandler+0x1e8>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d009      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a4a      	ldr	r2, [pc, #296]	; (800a498 <HAL_DMA_IRQHandler+0x1ec>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d004      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a48      	ldr	r2, [pc, #288]	; (800a49c <HAL_DMA_IRQHandler+0x1f0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d101      	bne.n	800a382 <HAL_DMA_IRQHandler+0xd6>
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <HAL_DMA_IRQHandler+0xd8>
 800a382:	2300      	movs	r3, #0
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 842b 	beq.w	800abe0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a38e:	f003 031f 	and.w	r3, r3, #31
 800a392:	2208      	movs	r2, #8
 800a394:	409a      	lsls	r2, r3
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	4013      	ands	r3, r2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 80a2 	beq.w	800a4e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a2e      	ldr	r2, [pc, #184]	; (800a460 <HAL_DMA_IRQHandler+0x1b4>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d04a      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a2d      	ldr	r2, [pc, #180]	; (800a464 <HAL_DMA_IRQHandler+0x1b8>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d045      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a2b      	ldr	r2, [pc, #172]	; (800a468 <HAL_DMA_IRQHandler+0x1bc>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d040      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a2a      	ldr	r2, [pc, #168]	; (800a46c <HAL_DMA_IRQHandler+0x1c0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d03b      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a28      	ldr	r2, [pc, #160]	; (800a470 <HAL_DMA_IRQHandler+0x1c4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d036      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a27      	ldr	r2, [pc, #156]	; (800a474 <HAL_DMA_IRQHandler+0x1c8>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d031      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a25      	ldr	r2, [pc, #148]	; (800a478 <HAL_DMA_IRQHandler+0x1cc>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d02c      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a24      	ldr	r2, [pc, #144]	; (800a47c <HAL_DMA_IRQHandler+0x1d0>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d027      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a22      	ldr	r2, [pc, #136]	; (800a480 <HAL_DMA_IRQHandler+0x1d4>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d022      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a21      	ldr	r2, [pc, #132]	; (800a484 <HAL_DMA_IRQHandler+0x1d8>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d01d      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a1f      	ldr	r2, [pc, #124]	; (800a488 <HAL_DMA_IRQHandler+0x1dc>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d018      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a1e      	ldr	r2, [pc, #120]	; (800a48c <HAL_DMA_IRQHandler+0x1e0>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d013      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a1c      	ldr	r2, [pc, #112]	; (800a490 <HAL_DMA_IRQHandler+0x1e4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d00e      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a1b      	ldr	r2, [pc, #108]	; (800a494 <HAL_DMA_IRQHandler+0x1e8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d009      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a19      	ldr	r2, [pc, #100]	; (800a498 <HAL_DMA_IRQHandler+0x1ec>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d004      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a18      	ldr	r2, [pc, #96]	; (800a49c <HAL_DMA_IRQHandler+0x1f0>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d12f      	bne.n	800a4a0 <HAL_DMA_IRQHandler+0x1f4>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	bf14      	ite	ne
 800a44e:	2301      	movne	r3, #1
 800a450:	2300      	moveq	r3, #0
 800a452:	b2db      	uxtb	r3, r3
 800a454:	e02e      	b.n	800a4b4 <HAL_DMA_IRQHandler+0x208>
 800a456:	bf00      	nop
 800a458:	20000020 	.word	0x20000020
 800a45c:	1b4e81b5 	.word	0x1b4e81b5
 800a460:	40020010 	.word	0x40020010
 800a464:	40020028 	.word	0x40020028
 800a468:	40020040 	.word	0x40020040
 800a46c:	40020058 	.word	0x40020058
 800a470:	40020070 	.word	0x40020070
 800a474:	40020088 	.word	0x40020088
 800a478:	400200a0 	.word	0x400200a0
 800a47c:	400200b8 	.word	0x400200b8
 800a480:	40020410 	.word	0x40020410
 800a484:	40020428 	.word	0x40020428
 800a488:	40020440 	.word	0x40020440
 800a48c:	40020458 	.word	0x40020458
 800a490:	40020470 	.word	0x40020470
 800a494:	40020488 	.word	0x40020488
 800a498:	400204a0 	.word	0x400204a0
 800a49c:	400204b8 	.word	0x400204b8
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0308 	and.w	r3, r3, #8
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bf14      	ite	ne
 800a4ae:	2301      	movne	r3, #1
 800a4b0:	2300      	moveq	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d015      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0204 	bic.w	r2, r2, #4
 800a4c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4cc:	f003 031f 	and.w	r3, r3, #31
 800a4d0:	2208      	movs	r2, #8
 800a4d2:	409a      	lsls	r2, r3
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4dc:	f043 0201 	orr.w	r2, r3, #1
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4e8:	f003 031f 	and.w	r3, r3, #31
 800a4ec:	69ba      	ldr	r2, [r7, #24]
 800a4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d06e      	beq.n	800a5d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a69      	ldr	r2, [pc, #420]	; (800a6a4 <HAL_DMA_IRQHandler+0x3f8>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d04a      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a67      	ldr	r2, [pc, #412]	; (800a6a8 <HAL_DMA_IRQHandler+0x3fc>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d045      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a66      	ldr	r2, [pc, #408]	; (800a6ac <HAL_DMA_IRQHandler+0x400>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d040      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a64      	ldr	r2, [pc, #400]	; (800a6b0 <HAL_DMA_IRQHandler+0x404>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d03b      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a63      	ldr	r2, [pc, #396]	; (800a6b4 <HAL_DMA_IRQHandler+0x408>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d036      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a61      	ldr	r2, [pc, #388]	; (800a6b8 <HAL_DMA_IRQHandler+0x40c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d031      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a60      	ldr	r2, [pc, #384]	; (800a6bc <HAL_DMA_IRQHandler+0x410>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d02c      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a5e      	ldr	r2, [pc, #376]	; (800a6c0 <HAL_DMA_IRQHandler+0x414>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d027      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a5d      	ldr	r2, [pc, #372]	; (800a6c4 <HAL_DMA_IRQHandler+0x418>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d022      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a5b      	ldr	r2, [pc, #364]	; (800a6c8 <HAL_DMA_IRQHandler+0x41c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d01d      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a5a      	ldr	r2, [pc, #360]	; (800a6cc <HAL_DMA_IRQHandler+0x420>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d018      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a58      	ldr	r2, [pc, #352]	; (800a6d0 <HAL_DMA_IRQHandler+0x424>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d013      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a57      	ldr	r2, [pc, #348]	; (800a6d4 <HAL_DMA_IRQHandler+0x428>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00e      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a55      	ldr	r2, [pc, #340]	; (800a6d8 <HAL_DMA_IRQHandler+0x42c>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d009      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a54      	ldr	r2, [pc, #336]	; (800a6dc <HAL_DMA_IRQHandler+0x430>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d004      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a52      	ldr	r2, [pc, #328]	; (800a6e0 <HAL_DMA_IRQHandler+0x434>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d10a      	bne.n	800a5b0 <HAL_DMA_IRQHandler+0x304>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	695b      	ldr	r3, [r3, #20]
 800a5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	bf14      	ite	ne
 800a5a8:	2301      	movne	r3, #1
 800a5aa:	2300      	moveq	r3, #0
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	e003      	b.n	800a5b8 <HAL_DMA_IRQHandler+0x30c>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00d      	beq.n	800a5d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c0:	f003 031f 	and.w	r3, r3, #31
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	409a      	lsls	r2, r3
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d0:	f043 0202 	orr.w	r2, r3, #2
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5dc:	f003 031f 	and.w	r3, r3, #31
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	409a      	lsls	r2, r3
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 808f 	beq.w	800a70c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a2c      	ldr	r2, [pc, #176]	; (800a6a4 <HAL_DMA_IRQHandler+0x3f8>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d04a      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a2a      	ldr	r2, [pc, #168]	; (800a6a8 <HAL_DMA_IRQHandler+0x3fc>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d045      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a29      	ldr	r2, [pc, #164]	; (800a6ac <HAL_DMA_IRQHandler+0x400>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d040      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a27      	ldr	r2, [pc, #156]	; (800a6b0 <HAL_DMA_IRQHandler+0x404>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d03b      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a26      	ldr	r2, [pc, #152]	; (800a6b4 <HAL_DMA_IRQHandler+0x408>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d036      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a24      	ldr	r2, [pc, #144]	; (800a6b8 <HAL_DMA_IRQHandler+0x40c>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d031      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a23      	ldr	r2, [pc, #140]	; (800a6bc <HAL_DMA_IRQHandler+0x410>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d02c      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a21      	ldr	r2, [pc, #132]	; (800a6c0 <HAL_DMA_IRQHandler+0x414>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d027      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a20      	ldr	r2, [pc, #128]	; (800a6c4 <HAL_DMA_IRQHandler+0x418>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d022      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a1e      	ldr	r2, [pc, #120]	; (800a6c8 <HAL_DMA_IRQHandler+0x41c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d01d      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a1d      	ldr	r2, [pc, #116]	; (800a6cc <HAL_DMA_IRQHandler+0x420>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d018      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a1b      	ldr	r2, [pc, #108]	; (800a6d0 <HAL_DMA_IRQHandler+0x424>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d013      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a1a      	ldr	r2, [pc, #104]	; (800a6d4 <HAL_DMA_IRQHandler+0x428>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00e      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a18      	ldr	r2, [pc, #96]	; (800a6d8 <HAL_DMA_IRQHandler+0x42c>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d009      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a17      	ldr	r2, [pc, #92]	; (800a6dc <HAL_DMA_IRQHandler+0x430>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d004      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a15      	ldr	r2, [pc, #84]	; (800a6e0 <HAL_DMA_IRQHandler+0x434>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d12a      	bne.n	800a6e4 <HAL_DMA_IRQHandler+0x438>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0302 	and.w	r3, r3, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bf14      	ite	ne
 800a69c:	2301      	movne	r3, #1
 800a69e:	2300      	moveq	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	e023      	b.n	800a6ec <HAL_DMA_IRQHandler+0x440>
 800a6a4:	40020010 	.word	0x40020010
 800a6a8:	40020028 	.word	0x40020028
 800a6ac:	40020040 	.word	0x40020040
 800a6b0:	40020058 	.word	0x40020058
 800a6b4:	40020070 	.word	0x40020070
 800a6b8:	40020088 	.word	0x40020088
 800a6bc:	400200a0 	.word	0x400200a0
 800a6c0:	400200b8 	.word	0x400200b8
 800a6c4:	40020410 	.word	0x40020410
 800a6c8:	40020428 	.word	0x40020428
 800a6cc:	40020440 	.word	0x40020440
 800a6d0:	40020458 	.word	0x40020458
 800a6d4:	40020470 	.word	0x40020470
 800a6d8:	40020488 	.word	0x40020488
 800a6dc:	400204a0 	.word	0x400204a0
 800a6e0:	400204b8 	.word	0x400204b8
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00d      	beq.n	800a70c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f4:	f003 031f 	and.w	r3, r3, #31
 800a6f8:	2204      	movs	r2, #4
 800a6fa:	409a      	lsls	r2, r3
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a704:	f043 0204 	orr.w	r2, r3, #4
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a710:	f003 031f 	and.w	r3, r3, #31
 800a714:	2210      	movs	r2, #16
 800a716:	409a      	lsls	r2, r3
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	4013      	ands	r3, r2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 80a6 	beq.w	800a86e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a85      	ldr	r2, [pc, #532]	; (800a93c <HAL_DMA_IRQHandler+0x690>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d04a      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a83      	ldr	r2, [pc, #524]	; (800a940 <HAL_DMA_IRQHandler+0x694>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d045      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a82      	ldr	r2, [pc, #520]	; (800a944 <HAL_DMA_IRQHandler+0x698>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d040      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a80      	ldr	r2, [pc, #512]	; (800a948 <HAL_DMA_IRQHandler+0x69c>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d03b      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a7f      	ldr	r2, [pc, #508]	; (800a94c <HAL_DMA_IRQHandler+0x6a0>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d036      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a7d      	ldr	r2, [pc, #500]	; (800a950 <HAL_DMA_IRQHandler+0x6a4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d031      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a7c      	ldr	r2, [pc, #496]	; (800a954 <HAL_DMA_IRQHandler+0x6a8>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d02c      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a7a      	ldr	r2, [pc, #488]	; (800a958 <HAL_DMA_IRQHandler+0x6ac>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d027      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a79      	ldr	r2, [pc, #484]	; (800a95c <HAL_DMA_IRQHandler+0x6b0>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d022      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a77      	ldr	r2, [pc, #476]	; (800a960 <HAL_DMA_IRQHandler+0x6b4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d01d      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a76      	ldr	r2, [pc, #472]	; (800a964 <HAL_DMA_IRQHandler+0x6b8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d018      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a74      	ldr	r2, [pc, #464]	; (800a968 <HAL_DMA_IRQHandler+0x6bc>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d013      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a73      	ldr	r2, [pc, #460]	; (800a96c <HAL_DMA_IRQHandler+0x6c0>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d00e      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a71      	ldr	r2, [pc, #452]	; (800a970 <HAL_DMA_IRQHandler+0x6c4>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d009      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a70      	ldr	r2, [pc, #448]	; (800a974 <HAL_DMA_IRQHandler+0x6c8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d004      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a6e      	ldr	r2, [pc, #440]	; (800a978 <HAL_DMA_IRQHandler+0x6cc>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d10a      	bne.n	800a7d8 <HAL_DMA_IRQHandler+0x52c>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0308 	and.w	r3, r3, #8
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bf14      	ite	ne
 800a7d0:	2301      	movne	r3, #1
 800a7d2:	2300      	moveq	r3, #0
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	e009      	b.n	800a7ec <HAL_DMA_IRQHandler+0x540>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bf14      	ite	ne
 800a7e6:	2301      	movne	r3, #1
 800a7e8:	2300      	moveq	r3, #0
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d03e      	beq.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f4:	f003 031f 	and.w	r3, r3, #31
 800a7f8:	2210      	movs	r2, #16
 800a7fa:	409a      	lsls	r2, r3
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d018      	beq.n	800a840 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d108      	bne.n	800a82e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a820:	2b00      	cmp	r3, #0
 800a822:	d024      	beq.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	4798      	blx	r3
 800a82c:	e01f      	b.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a832:	2b00      	cmp	r3, #0
 800a834:	d01b      	beq.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
 800a83e:	e016      	b.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d107      	bne.n	800a85e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 0208 	bic.w	r2, r2, #8
 800a85c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a872:	f003 031f 	and.w	r3, r3, #31
 800a876:	2220      	movs	r2, #32
 800a878:	409a      	lsls	r2, r3
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	4013      	ands	r3, r2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 8110 	beq.w	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a2c      	ldr	r2, [pc, #176]	; (800a93c <HAL_DMA_IRQHandler+0x690>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d04a      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a2b      	ldr	r2, [pc, #172]	; (800a940 <HAL_DMA_IRQHandler+0x694>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d045      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a29      	ldr	r2, [pc, #164]	; (800a944 <HAL_DMA_IRQHandler+0x698>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d040      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a28      	ldr	r2, [pc, #160]	; (800a948 <HAL_DMA_IRQHandler+0x69c>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d03b      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a26      	ldr	r2, [pc, #152]	; (800a94c <HAL_DMA_IRQHandler+0x6a0>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d036      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a25      	ldr	r2, [pc, #148]	; (800a950 <HAL_DMA_IRQHandler+0x6a4>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d031      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a23      	ldr	r2, [pc, #140]	; (800a954 <HAL_DMA_IRQHandler+0x6a8>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d02c      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a22      	ldr	r2, [pc, #136]	; (800a958 <HAL_DMA_IRQHandler+0x6ac>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d027      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a20      	ldr	r2, [pc, #128]	; (800a95c <HAL_DMA_IRQHandler+0x6b0>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d022      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a1f      	ldr	r2, [pc, #124]	; (800a960 <HAL_DMA_IRQHandler+0x6b4>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d01d      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a1d      	ldr	r2, [pc, #116]	; (800a964 <HAL_DMA_IRQHandler+0x6b8>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d018      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a1c      	ldr	r2, [pc, #112]	; (800a968 <HAL_DMA_IRQHandler+0x6bc>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d013      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a1a      	ldr	r2, [pc, #104]	; (800a96c <HAL_DMA_IRQHandler+0x6c0>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d00e      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a19      	ldr	r2, [pc, #100]	; (800a970 <HAL_DMA_IRQHandler+0x6c4>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d009      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a17      	ldr	r2, [pc, #92]	; (800a974 <HAL_DMA_IRQHandler+0x6c8>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d004      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a16      	ldr	r2, [pc, #88]	; (800a978 <HAL_DMA_IRQHandler+0x6cc>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d12b      	bne.n	800a97c <HAL_DMA_IRQHandler+0x6d0>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0310 	and.w	r3, r3, #16
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bf14      	ite	ne
 800a932:	2301      	movne	r3, #1
 800a934:	2300      	moveq	r3, #0
 800a936:	b2db      	uxtb	r3, r3
 800a938:	e02a      	b.n	800a990 <HAL_DMA_IRQHandler+0x6e4>
 800a93a:	bf00      	nop
 800a93c:	40020010 	.word	0x40020010
 800a940:	40020028 	.word	0x40020028
 800a944:	40020040 	.word	0x40020040
 800a948:	40020058 	.word	0x40020058
 800a94c:	40020070 	.word	0x40020070
 800a950:	40020088 	.word	0x40020088
 800a954:	400200a0 	.word	0x400200a0
 800a958:	400200b8 	.word	0x400200b8
 800a95c:	40020410 	.word	0x40020410
 800a960:	40020428 	.word	0x40020428
 800a964:	40020440 	.word	0x40020440
 800a968:	40020458 	.word	0x40020458
 800a96c:	40020470 	.word	0x40020470
 800a970:	40020488 	.word	0x40020488
 800a974:	400204a0 	.word	0x400204a0
 800a978:	400204b8 	.word	0x400204b8
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0302 	and.w	r3, r3, #2
 800a986:	2b00      	cmp	r3, #0
 800a988:	bf14      	ite	ne
 800a98a:	2301      	movne	r3, #1
 800a98c:	2300      	moveq	r3, #0
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 8087 	beq.w	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a99a:	f003 031f 	and.w	r3, r3, #31
 800a99e:	2220      	movs	r2, #32
 800a9a0:	409a      	lsls	r2, r3
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	d139      	bne.n	800aa26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0216 	bic.w	r2, r2, #22
 800a9c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	695a      	ldr	r2, [r3, #20]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d103      	bne.n	800a9e2 <HAL_DMA_IRQHandler+0x736>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f022 0208 	bic.w	r2, r2, #8
 800a9f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f6:	f003 031f 	and.w	r3, r3, #31
 800a9fa:	223f      	movs	r2, #63	; 0x3f
 800a9fc:	409a      	lsls	r2, r3
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 834a 	beq.w	800b0b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	4798      	blx	r3
          }
          return;
 800aa24:	e344      	b.n	800b0b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d018      	beq.n	800aa66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d108      	bne.n	800aa54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d02c      	beq.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	4798      	blx	r3
 800aa52:	e027      	b.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d023      	beq.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	4798      	blx	r3
 800aa64:	e01e      	b.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10f      	bne.n	800aa94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0210 	bic.w	r2, r2, #16
 800aa82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 8306 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 8088 	beq.w	800abcc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2204      	movs	r2, #4
 800aac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a7a      	ldr	r2, [pc, #488]	; (800acb4 <HAL_DMA_IRQHandler+0xa08>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d04a      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a79      	ldr	r2, [pc, #484]	; (800acb8 <HAL_DMA_IRQHandler+0xa0c>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d045      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a77      	ldr	r2, [pc, #476]	; (800acbc <HAL_DMA_IRQHandler+0xa10>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d040      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a76      	ldr	r2, [pc, #472]	; (800acc0 <HAL_DMA_IRQHandler+0xa14>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d03b      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a74      	ldr	r2, [pc, #464]	; (800acc4 <HAL_DMA_IRQHandler+0xa18>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d036      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a73      	ldr	r2, [pc, #460]	; (800acc8 <HAL_DMA_IRQHandler+0xa1c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d031      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a71      	ldr	r2, [pc, #452]	; (800accc <HAL_DMA_IRQHandler+0xa20>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d02c      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a70      	ldr	r2, [pc, #448]	; (800acd0 <HAL_DMA_IRQHandler+0xa24>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d027      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a6e      	ldr	r2, [pc, #440]	; (800acd4 <HAL_DMA_IRQHandler+0xa28>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d022      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a6d      	ldr	r2, [pc, #436]	; (800acd8 <HAL_DMA_IRQHandler+0xa2c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d01d      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a6b      	ldr	r2, [pc, #428]	; (800acdc <HAL_DMA_IRQHandler+0xa30>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d018      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a6a      	ldr	r2, [pc, #424]	; (800ace0 <HAL_DMA_IRQHandler+0xa34>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d013      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a68      	ldr	r2, [pc, #416]	; (800ace4 <HAL_DMA_IRQHandler+0xa38>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d00e      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a67      	ldr	r2, [pc, #412]	; (800ace8 <HAL_DMA_IRQHandler+0xa3c>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d009      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a65      	ldr	r2, [pc, #404]	; (800acec <HAL_DMA_IRQHandler+0xa40>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d004      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a64      	ldr	r2, [pc, #400]	; (800acf0 <HAL_DMA_IRQHandler+0xa44>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d108      	bne.n	800ab76 <HAL_DMA_IRQHandler+0x8ca>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0201 	bic.w	r2, r2, #1
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e007      	b.n	800ab86 <HAL_DMA_IRQHandler+0x8da>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f022 0201 	bic.w	r2, r2, #1
 800ab84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d307      	bcc.n	800aba2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1f2      	bne.n	800ab86 <HAL_DMA_IRQHandler+0x8da>
 800aba0:	e000      	b.n	800aba4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800aba2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2203      	movs	r2, #3
 800abb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800abba:	e003      	b.n	800abc4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 8272 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3
 800abde:	e26c      	b.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a43      	ldr	r2, [pc, #268]	; (800acf4 <HAL_DMA_IRQHandler+0xa48>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d022      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a42      	ldr	r2, [pc, #264]	; (800acf8 <HAL_DMA_IRQHandler+0xa4c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d01d      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a40      	ldr	r2, [pc, #256]	; (800acfc <HAL_DMA_IRQHandler+0xa50>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d018      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a3f      	ldr	r2, [pc, #252]	; (800ad00 <HAL_DMA_IRQHandler+0xa54>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d013      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a3d      	ldr	r2, [pc, #244]	; (800ad04 <HAL_DMA_IRQHandler+0xa58>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00e      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a3c      	ldr	r2, [pc, #240]	; (800ad08 <HAL_DMA_IRQHandler+0xa5c>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d009      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a3a      	ldr	r2, [pc, #232]	; (800ad0c <HAL_DMA_IRQHandler+0xa60>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d004      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a39      	ldr	r2, [pc, #228]	; (800ad10 <HAL_DMA_IRQHandler+0xa64>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d101      	bne.n	800ac34 <HAL_DMA_IRQHandler+0x988>
 800ac30:	2301      	movs	r3, #1
 800ac32:	e000      	b.n	800ac36 <HAL_DMA_IRQHandler+0x98a>
 800ac34:	2300      	movs	r3, #0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f000 823f 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac48:	f003 031f 	and.w	r3, r3, #31
 800ac4c:	2204      	movs	r2, #4
 800ac4e:	409a      	lsls	r2, r3
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	4013      	ands	r3, r2
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 80cd 	beq.w	800adf4 <HAL_DMA_IRQHandler+0xb48>
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 80c7 	beq.w	800adf4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac6a:	f003 031f 	and.w	r3, r3, #31
 800ac6e:	2204      	movs	r2, #4
 800ac70:	409a      	lsls	r2, r3
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d049      	beq.n	800ad14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d109      	bne.n	800ac9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 8210 	beq.w	800b0b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ac9c:	e20a      	b.n	800b0b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 8206 	beq.w	800b0b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800acb0:	e200      	b.n	800b0b4 <HAL_DMA_IRQHandler+0xe08>
 800acb2:	bf00      	nop
 800acb4:	40020010 	.word	0x40020010
 800acb8:	40020028 	.word	0x40020028
 800acbc:	40020040 	.word	0x40020040
 800acc0:	40020058 	.word	0x40020058
 800acc4:	40020070 	.word	0x40020070
 800acc8:	40020088 	.word	0x40020088
 800accc:	400200a0 	.word	0x400200a0
 800acd0:	400200b8 	.word	0x400200b8
 800acd4:	40020410 	.word	0x40020410
 800acd8:	40020428 	.word	0x40020428
 800acdc:	40020440 	.word	0x40020440
 800ace0:	40020458 	.word	0x40020458
 800ace4:	40020470 	.word	0x40020470
 800ace8:	40020488 	.word	0x40020488
 800acec:	400204a0 	.word	0x400204a0
 800acf0:	400204b8 	.word	0x400204b8
 800acf4:	58025408 	.word	0x58025408
 800acf8:	5802541c 	.word	0x5802541c
 800acfc:	58025430 	.word	0x58025430
 800ad00:	58025444 	.word	0x58025444
 800ad04:	58025458 	.word	0x58025458
 800ad08:	5802546c 	.word	0x5802546c
 800ad0c:	58025480 	.word	0x58025480
 800ad10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	f003 0320 	and.w	r3, r3, #32
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d160      	bne.n	800ade0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a7f      	ldr	r2, [pc, #508]	; (800af20 <HAL_DMA_IRQHandler+0xc74>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d04a      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a7d      	ldr	r2, [pc, #500]	; (800af24 <HAL_DMA_IRQHandler+0xc78>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d045      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a7c      	ldr	r2, [pc, #496]	; (800af28 <HAL_DMA_IRQHandler+0xc7c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d040      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a7a      	ldr	r2, [pc, #488]	; (800af2c <HAL_DMA_IRQHandler+0xc80>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d03b      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a79      	ldr	r2, [pc, #484]	; (800af30 <HAL_DMA_IRQHandler+0xc84>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d036      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a77      	ldr	r2, [pc, #476]	; (800af34 <HAL_DMA_IRQHandler+0xc88>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d031      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a76      	ldr	r2, [pc, #472]	; (800af38 <HAL_DMA_IRQHandler+0xc8c>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d02c      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a74      	ldr	r2, [pc, #464]	; (800af3c <HAL_DMA_IRQHandler+0xc90>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d027      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a73      	ldr	r2, [pc, #460]	; (800af40 <HAL_DMA_IRQHandler+0xc94>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d022      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a71      	ldr	r2, [pc, #452]	; (800af44 <HAL_DMA_IRQHandler+0xc98>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d01d      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a70      	ldr	r2, [pc, #448]	; (800af48 <HAL_DMA_IRQHandler+0xc9c>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d018      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a6e      	ldr	r2, [pc, #440]	; (800af4c <HAL_DMA_IRQHandler+0xca0>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d013      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a6d      	ldr	r2, [pc, #436]	; (800af50 <HAL_DMA_IRQHandler+0xca4>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d00e      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a6b      	ldr	r2, [pc, #428]	; (800af54 <HAL_DMA_IRQHandler+0xca8>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d009      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a6a      	ldr	r2, [pc, #424]	; (800af58 <HAL_DMA_IRQHandler+0xcac>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d004      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a68      	ldr	r2, [pc, #416]	; (800af5c <HAL_DMA_IRQHandler+0xcb0>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d108      	bne.n	800add0 <HAL_DMA_IRQHandler+0xb24>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 0208 	bic.w	r2, r2, #8
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	e007      	b.n	800ade0 <HAL_DMA_IRQHandler+0xb34>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f022 0204 	bic.w	r2, r2, #4
 800adde:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 8165 	beq.w	800b0b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800adf2:	e15f      	b.n	800b0b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adf8:	f003 031f 	and.w	r3, r3, #31
 800adfc:	2202      	movs	r2, #2
 800adfe:	409a      	lsls	r2, r3
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	4013      	ands	r3, r2
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80c5 	beq.w	800af94 <HAL_DMA_IRQHandler+0xce8>
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 80bf 	beq.w	800af94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae1a:	f003 031f 	and.w	r3, r3, #31
 800ae1e:	2202      	movs	r2, #2
 800ae20:	409a      	lsls	r2, r3
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d018      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 813a 	beq.w	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae4c:	e134      	b.n	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 8130 	beq.w	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae60:	e12a      	b.n	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f003 0320 	and.w	r3, r3, #32
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f040 8089 	bne.w	800af80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a2b      	ldr	r2, [pc, #172]	; (800af20 <HAL_DMA_IRQHandler+0xc74>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d04a      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a29      	ldr	r2, [pc, #164]	; (800af24 <HAL_DMA_IRQHandler+0xc78>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d045      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a28      	ldr	r2, [pc, #160]	; (800af28 <HAL_DMA_IRQHandler+0xc7c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d040      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a26      	ldr	r2, [pc, #152]	; (800af2c <HAL_DMA_IRQHandler+0xc80>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d03b      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a25      	ldr	r2, [pc, #148]	; (800af30 <HAL_DMA_IRQHandler+0xc84>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d036      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a23      	ldr	r2, [pc, #140]	; (800af34 <HAL_DMA_IRQHandler+0xc88>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d031      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a22      	ldr	r2, [pc, #136]	; (800af38 <HAL_DMA_IRQHandler+0xc8c>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d02c      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a20      	ldr	r2, [pc, #128]	; (800af3c <HAL_DMA_IRQHandler+0xc90>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d027      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a1f      	ldr	r2, [pc, #124]	; (800af40 <HAL_DMA_IRQHandler+0xc94>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d022      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a1d      	ldr	r2, [pc, #116]	; (800af44 <HAL_DMA_IRQHandler+0xc98>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d01d      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a1c      	ldr	r2, [pc, #112]	; (800af48 <HAL_DMA_IRQHandler+0xc9c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d018      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a1a      	ldr	r2, [pc, #104]	; (800af4c <HAL_DMA_IRQHandler+0xca0>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d013      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a19      	ldr	r2, [pc, #100]	; (800af50 <HAL_DMA_IRQHandler+0xca4>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d00e      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a17      	ldr	r2, [pc, #92]	; (800af54 <HAL_DMA_IRQHandler+0xca8>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d009      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a16      	ldr	r2, [pc, #88]	; (800af58 <HAL_DMA_IRQHandler+0xcac>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d004      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a14      	ldr	r2, [pc, #80]	; (800af5c <HAL_DMA_IRQHandler+0xcb0>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d128      	bne.n	800af60 <HAL_DMA_IRQHandler+0xcb4>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 0214 	bic.w	r2, r2, #20
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	e027      	b.n	800af70 <HAL_DMA_IRQHandler+0xcc4>
 800af20:	40020010 	.word	0x40020010
 800af24:	40020028 	.word	0x40020028
 800af28:	40020040 	.word	0x40020040
 800af2c:	40020058 	.word	0x40020058
 800af30:	40020070 	.word	0x40020070
 800af34:	40020088 	.word	0x40020088
 800af38:	400200a0 	.word	0x400200a0
 800af3c:	400200b8 	.word	0x400200b8
 800af40:	40020410 	.word	0x40020410
 800af44:	40020428 	.word	0x40020428
 800af48:	40020440 	.word	0x40020440
 800af4c:	40020458 	.word	0x40020458
 800af50:	40020470 	.word	0x40020470
 800af54:	40020488 	.word	0x40020488
 800af58:	400204a0 	.word	0x400204a0
 800af5c:	400204b8 	.word	0x400204b8
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f022 020a 	bic.w	r2, r2, #10
 800af6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 8097 	beq.w	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800af92:	e091      	b.n	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af98:	f003 031f 	and.w	r3, r3, #31
 800af9c:	2208      	movs	r2, #8
 800af9e:	409a      	lsls	r2, r3
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	4013      	ands	r3, r2
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8088 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f003 0308 	and.w	r3, r3, #8
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 8082 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a41      	ldr	r2, [pc, #260]	; (800b0c0 <HAL_DMA_IRQHandler+0xe14>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d04a      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a3f      	ldr	r2, [pc, #252]	; (800b0c4 <HAL_DMA_IRQHandler+0xe18>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d045      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a3e      	ldr	r2, [pc, #248]	; (800b0c8 <HAL_DMA_IRQHandler+0xe1c>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d040      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a3c      	ldr	r2, [pc, #240]	; (800b0cc <HAL_DMA_IRQHandler+0xe20>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d03b      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a3b      	ldr	r2, [pc, #236]	; (800b0d0 <HAL_DMA_IRQHandler+0xe24>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d036      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a39      	ldr	r2, [pc, #228]	; (800b0d4 <HAL_DMA_IRQHandler+0xe28>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d031      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a38      	ldr	r2, [pc, #224]	; (800b0d8 <HAL_DMA_IRQHandler+0xe2c>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d02c      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a36      	ldr	r2, [pc, #216]	; (800b0dc <HAL_DMA_IRQHandler+0xe30>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d027      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a35      	ldr	r2, [pc, #212]	; (800b0e0 <HAL_DMA_IRQHandler+0xe34>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d022      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a33      	ldr	r2, [pc, #204]	; (800b0e4 <HAL_DMA_IRQHandler+0xe38>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d01d      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a32      	ldr	r2, [pc, #200]	; (800b0e8 <HAL_DMA_IRQHandler+0xe3c>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d018      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a30      	ldr	r2, [pc, #192]	; (800b0ec <HAL_DMA_IRQHandler+0xe40>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d013      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a2f      	ldr	r2, [pc, #188]	; (800b0f0 <HAL_DMA_IRQHandler+0xe44>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00e      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a2d      	ldr	r2, [pc, #180]	; (800b0f4 <HAL_DMA_IRQHandler+0xe48>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d009      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a2c      	ldr	r2, [pc, #176]	; (800b0f8 <HAL_DMA_IRQHandler+0xe4c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d004      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a2a      	ldr	r2, [pc, #168]	; (800b0fc <HAL_DMA_IRQHandler+0xe50>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d108      	bne.n	800b068 <HAL_DMA_IRQHandler+0xdbc>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f022 021c 	bic.w	r2, r2, #28
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	e007      	b.n	800b078 <HAL_DMA_IRQHandler+0xdcc>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f022 020e 	bic.w	r2, r2, #14
 800b076:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b07c:	f003 031f 	and.w	r3, r3, #31
 800b080:	2201      	movs	r2, #1
 800b082:	409a      	lsls	r2, r3
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	4798      	blx	r3
 800b0ae:	e004      	b.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b0b0:	bf00      	nop
 800b0b2:	e002      	b.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b0b4:	bf00      	nop
 800b0b6:	e000      	b.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b0b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b0ba:	3728      	adds	r7, #40	; 0x28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	40020010 	.word	0x40020010
 800b0c4:	40020028 	.word	0x40020028
 800b0c8:	40020040 	.word	0x40020040
 800b0cc:	40020058 	.word	0x40020058
 800b0d0:	40020070 	.word	0x40020070
 800b0d4:	40020088 	.word	0x40020088
 800b0d8:	400200a0 	.word	0x400200a0
 800b0dc:	400200b8 	.word	0x400200b8
 800b0e0:	40020410 	.word	0x40020410
 800b0e4:	40020428 	.word	0x40020428
 800b0e8:	40020440 	.word	0x40020440
 800b0ec:	40020458 	.word	0x40020458
 800b0f0:	40020470 	.word	0x40020470
 800b0f4:	40020488 	.word	0x40020488
 800b0f8:	400204a0 	.word	0x400204a0
 800b0fc:	400204b8 	.word	0x400204b8

0800b100 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b10e:	b2db      	uxtb	r3, r3
}
 800b110:	4618      	mov	r0, r3
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a42      	ldr	r2, [pc, #264]	; (800b234 <DMA_CalcBaseAndBitshift+0x118>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d04a      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a41      	ldr	r2, [pc, #260]	; (800b238 <DMA_CalcBaseAndBitshift+0x11c>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d045      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a3f      	ldr	r2, [pc, #252]	; (800b23c <DMA_CalcBaseAndBitshift+0x120>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d040      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a3e      	ldr	r2, [pc, #248]	; (800b240 <DMA_CalcBaseAndBitshift+0x124>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d03b      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a3c      	ldr	r2, [pc, #240]	; (800b244 <DMA_CalcBaseAndBitshift+0x128>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d036      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a3b      	ldr	r2, [pc, #236]	; (800b248 <DMA_CalcBaseAndBitshift+0x12c>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d031      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a39      	ldr	r2, [pc, #228]	; (800b24c <DMA_CalcBaseAndBitshift+0x130>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d02c      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a38      	ldr	r2, [pc, #224]	; (800b250 <DMA_CalcBaseAndBitshift+0x134>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d027      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a36      	ldr	r2, [pc, #216]	; (800b254 <DMA_CalcBaseAndBitshift+0x138>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d022      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a35      	ldr	r2, [pc, #212]	; (800b258 <DMA_CalcBaseAndBitshift+0x13c>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d01d      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a33      	ldr	r2, [pc, #204]	; (800b25c <DMA_CalcBaseAndBitshift+0x140>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d018      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a32      	ldr	r2, [pc, #200]	; (800b260 <DMA_CalcBaseAndBitshift+0x144>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d013      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a30      	ldr	r2, [pc, #192]	; (800b264 <DMA_CalcBaseAndBitshift+0x148>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d00e      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a2f      	ldr	r2, [pc, #188]	; (800b268 <DMA_CalcBaseAndBitshift+0x14c>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d009      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a2d      	ldr	r2, [pc, #180]	; (800b26c <DMA_CalcBaseAndBitshift+0x150>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d004      	beq.n	800b1c4 <DMA_CalcBaseAndBitshift+0xa8>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a2c      	ldr	r2, [pc, #176]	; (800b270 <DMA_CalcBaseAndBitshift+0x154>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d101      	bne.n	800b1c8 <DMA_CalcBaseAndBitshift+0xac>
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e000      	b.n	800b1ca <DMA_CalcBaseAndBitshift+0xae>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d024      	beq.n	800b218 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	3b10      	subs	r3, #16
 800b1d6:	4a27      	ldr	r2, [pc, #156]	; (800b274 <DMA_CalcBaseAndBitshift+0x158>)
 800b1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1dc:	091b      	lsrs	r3, r3, #4
 800b1de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f003 0307 	and.w	r3, r3, #7
 800b1e6:	4a24      	ldr	r2, [pc, #144]	; (800b278 <DMA_CalcBaseAndBitshift+0x15c>)
 800b1e8:	5cd3      	ldrb	r3, [r2, r3]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d908      	bls.n	800b208 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	4b1f      	ldr	r3, [pc, #124]	; (800b27c <DMA_CalcBaseAndBitshift+0x160>)
 800b1fe:	4013      	ands	r3, r2
 800b200:	1d1a      	adds	r2, r3, #4
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	659a      	str	r2, [r3, #88]	; 0x58
 800b206:	e00d      	b.n	800b224 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	461a      	mov	r2, r3
 800b20e:	4b1b      	ldr	r3, [pc, #108]	; (800b27c <DMA_CalcBaseAndBitshift+0x160>)
 800b210:	4013      	ands	r3, r2
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	6593      	str	r3, [r2, #88]	; 0x58
 800b216:	e005      	b.n	800b224 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr
 800b234:	40020010 	.word	0x40020010
 800b238:	40020028 	.word	0x40020028
 800b23c:	40020040 	.word	0x40020040
 800b240:	40020058 	.word	0x40020058
 800b244:	40020070 	.word	0x40020070
 800b248:	40020088 	.word	0x40020088
 800b24c:	400200a0 	.word	0x400200a0
 800b250:	400200b8 	.word	0x400200b8
 800b254:	40020410 	.word	0x40020410
 800b258:	40020428 	.word	0x40020428
 800b25c:	40020440 	.word	0x40020440
 800b260:	40020458 	.word	0x40020458
 800b264:	40020470 	.word	0x40020470
 800b268:	40020488 	.word	0x40020488
 800b26c:	400204a0 	.word	0x400204a0
 800b270:	400204b8 	.word	0x400204b8
 800b274:	aaaaaaab 	.word	0xaaaaaaab
 800b278:	08016748 	.word	0x08016748
 800b27c:	fffffc00 	.word	0xfffffc00

0800b280 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d120      	bne.n	800b2d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d858      	bhi.n	800b34e <DMA_CheckFifoParam+0xce>
 800b29c:	a201      	add	r2, pc, #4	; (adr r2, 800b2a4 <DMA_CheckFifoParam+0x24>)
 800b29e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2a2:	bf00      	nop
 800b2a4:	0800b2b5 	.word	0x0800b2b5
 800b2a8:	0800b2c7 	.word	0x0800b2c7
 800b2ac:	0800b2b5 	.word	0x0800b2b5
 800b2b0:	0800b34f 	.word	0x0800b34f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d048      	beq.n	800b352 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b2c4:	e045      	b.n	800b352 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b2ce:	d142      	bne.n	800b356 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b2d4:	e03f      	b.n	800b356 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b2de:	d123      	bne.n	800b328 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2e4:	2b03      	cmp	r3, #3
 800b2e6:	d838      	bhi.n	800b35a <DMA_CheckFifoParam+0xda>
 800b2e8:	a201      	add	r2, pc, #4	; (adr r2, 800b2f0 <DMA_CheckFifoParam+0x70>)
 800b2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ee:	bf00      	nop
 800b2f0:	0800b301 	.word	0x0800b301
 800b2f4:	0800b307 	.word	0x0800b307
 800b2f8:	0800b301 	.word	0x0800b301
 800b2fc:	0800b319 	.word	0x0800b319
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	73fb      	strb	r3, [r7, #15]
        break;
 800b304:	e030      	b.n	800b368 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d025      	beq.n	800b35e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b316:	e022      	b.n	800b35e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b320:	d11f      	bne.n	800b362 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b326:	e01c      	b.n	800b362 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d902      	bls.n	800b336 <DMA_CheckFifoParam+0xb6>
 800b330:	2b03      	cmp	r3, #3
 800b332:	d003      	beq.n	800b33c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b334:	e018      	b.n	800b368 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	73fb      	strb	r3, [r7, #15]
        break;
 800b33a:	e015      	b.n	800b368 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00e      	beq.n	800b366 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	73fb      	strb	r3, [r7, #15]
    break;
 800b34c:	e00b      	b.n	800b366 <DMA_CheckFifoParam+0xe6>
        break;
 800b34e:	bf00      	nop
 800b350:	e00a      	b.n	800b368 <DMA_CheckFifoParam+0xe8>
        break;
 800b352:	bf00      	nop
 800b354:	e008      	b.n	800b368 <DMA_CheckFifoParam+0xe8>
        break;
 800b356:	bf00      	nop
 800b358:	e006      	b.n	800b368 <DMA_CheckFifoParam+0xe8>
        break;
 800b35a:	bf00      	nop
 800b35c:	e004      	b.n	800b368 <DMA_CheckFifoParam+0xe8>
        break;
 800b35e:	bf00      	nop
 800b360:	e002      	b.n	800b368 <DMA_CheckFifoParam+0xe8>
        break;
 800b362:	bf00      	nop
 800b364:	e000      	b.n	800b368 <DMA_CheckFifoParam+0xe8>
    break;
 800b366:	bf00      	nop
    }
  }

  return status;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop

0800b378 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a38      	ldr	r2, [pc, #224]	; (800b46c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d022      	beq.n	800b3d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a36      	ldr	r2, [pc, #216]	; (800b470 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d01d      	beq.n	800b3d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a35      	ldr	r2, [pc, #212]	; (800b474 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d018      	beq.n	800b3d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a33      	ldr	r2, [pc, #204]	; (800b478 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d013      	beq.n	800b3d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a32      	ldr	r2, [pc, #200]	; (800b47c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d00e      	beq.n	800b3d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a30      	ldr	r2, [pc, #192]	; (800b480 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d009      	beq.n	800b3d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a2f      	ldr	r2, [pc, #188]	; (800b484 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d004      	beq.n	800b3d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a2d      	ldr	r2, [pc, #180]	; (800b488 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d101      	bne.n	800b3da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e000      	b.n	800b3dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01a      	beq.n	800b416 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	3b08      	subs	r3, #8
 800b3e8:	4a28      	ldr	r2, [pc, #160]	; (800b48c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ee:	091b      	lsrs	r3, r3, #4
 800b3f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	4b26      	ldr	r3, [pc, #152]	; (800b490 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b3f6:	4413      	add	r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	461a      	mov	r2, r3
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a24      	ldr	r2, [pc, #144]	; (800b494 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b404:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f003 031f 	and.w	r3, r3, #31
 800b40c:	2201      	movs	r2, #1
 800b40e:	409a      	lsls	r2, r3
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b414:	e024      	b.n	800b460 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	3b10      	subs	r3, #16
 800b41e:	4a1e      	ldr	r2, [pc, #120]	; (800b498 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b420:	fba2 2303 	umull	r2, r3, r2, r3
 800b424:	091b      	lsrs	r3, r3, #4
 800b426:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	4a1c      	ldr	r2, [pc, #112]	; (800b49c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d806      	bhi.n	800b43e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	4a1b      	ldr	r2, [pc, #108]	; (800b4a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d902      	bls.n	800b43e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3308      	adds	r3, #8
 800b43c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	4b18      	ldr	r3, [pc, #96]	; (800b4a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b442:	4413      	add	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	461a      	mov	r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a16      	ldr	r2, [pc, #88]	; (800b4a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b450:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f003 031f 	and.w	r3, r3, #31
 800b458:	2201      	movs	r2, #1
 800b45a:	409a      	lsls	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b460:	bf00      	nop
 800b462:	3714      	adds	r7, #20
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	58025408 	.word	0x58025408
 800b470:	5802541c 	.word	0x5802541c
 800b474:	58025430 	.word	0x58025430
 800b478:	58025444 	.word	0x58025444
 800b47c:	58025458 	.word	0x58025458
 800b480:	5802546c 	.word	0x5802546c
 800b484:	58025480 	.word	0x58025480
 800b488:	58025494 	.word	0x58025494
 800b48c:	cccccccd 	.word	0xcccccccd
 800b490:	16009600 	.word	0x16009600
 800b494:	58025880 	.word	0x58025880
 800b498:	aaaaaaab 	.word	0xaaaaaaab
 800b49c:	400204b8 	.word	0x400204b8
 800b4a0:	4002040f 	.word	0x4002040f
 800b4a4:	10008200 	.word	0x10008200
 800b4a8:	40020880 	.word	0x40020880

0800b4ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d04a      	beq.n	800b558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2b08      	cmp	r3, #8
 800b4c6:	d847      	bhi.n	800b558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a25      	ldr	r2, [pc, #148]	; (800b564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d022      	beq.n	800b518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a24      	ldr	r2, [pc, #144]	; (800b568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d01d      	beq.n	800b518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a22      	ldr	r2, [pc, #136]	; (800b56c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d018      	beq.n	800b518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a21      	ldr	r2, [pc, #132]	; (800b570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d013      	beq.n	800b518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a1f      	ldr	r2, [pc, #124]	; (800b574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d00e      	beq.n	800b518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a1e      	ldr	r2, [pc, #120]	; (800b578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d009      	beq.n	800b518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a1c      	ldr	r2, [pc, #112]	; (800b57c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d004      	beq.n	800b518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a1b      	ldr	r2, [pc, #108]	; (800b580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d101      	bne.n	800b51c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b518:	2301      	movs	r3, #1
 800b51a:	e000      	b.n	800b51e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b51c:	2300      	movs	r3, #0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d00a      	beq.n	800b538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	4b17      	ldr	r3, [pc, #92]	; (800b584 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b526:	4413      	add	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	461a      	mov	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a15      	ldr	r2, [pc, #84]	; (800b588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b534:	671a      	str	r2, [r3, #112]	; 0x70
 800b536:	e009      	b.n	800b54c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b538:	68fa      	ldr	r2, [r7, #12]
 800b53a:	4b14      	ldr	r3, [pc, #80]	; (800b58c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b53c:	4413      	add	r3, r2
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	461a      	mov	r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4a11      	ldr	r2, [pc, #68]	; (800b590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b54a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	3b01      	subs	r3, #1
 800b550:	2201      	movs	r2, #1
 800b552:	409a      	lsls	r2, r3
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b558:	bf00      	nop
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	58025408 	.word	0x58025408
 800b568:	5802541c 	.word	0x5802541c
 800b56c:	58025430 	.word	0x58025430
 800b570:	58025444 	.word	0x58025444
 800b574:	58025458 	.word	0x58025458
 800b578:	5802546c 	.word	0x5802546c
 800b57c:	58025480 	.word	0x58025480
 800b580:	58025494 	.word	0x58025494
 800b584:	1600963f 	.word	0x1600963f
 800b588:	58025940 	.word	0x58025940
 800b58c:	1000823f 	.word	0x1000823f
 800b590:	40020940 	.word	0x40020940

0800b594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b594:	b480      	push	{r7}
 800b596:	b089      	sub	sp, #36	; 0x24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b5a2:	4b86      	ldr	r3, [pc, #536]	; (800b7bc <HAL_GPIO_Init+0x228>)
 800b5a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b5a6:	e18c      	b.n	800b8c2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	2101      	movs	r1, #1
 800b5ae:	69fb      	ldr	r3, [r7, #28]
 800b5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5b4:	4013      	ands	r3, r2
 800b5b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f000 817e 	beq.w	800b8bc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	f003 0303 	and.w	r3, r3, #3
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d005      	beq.n	800b5d8 <HAL_GPIO_Init+0x44>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	f003 0303 	and.w	r3, r3, #3
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d130      	bne.n	800b63a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	2203      	movs	r2, #3
 800b5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e8:	43db      	mvns	r3, r3
 800b5ea:	69ba      	ldr	r2, [r7, #24]
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	68da      	ldr	r2, [r3, #12]
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	005b      	lsls	r3, r3, #1
 800b5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fc:	69ba      	ldr	r2, [r7, #24]
 800b5fe:	4313      	orrs	r3, r2
 800b600:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b60e:	2201      	movs	r2, #1
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	fa02 f303 	lsl.w	r3, r2, r3
 800b616:	43db      	mvns	r3, r3
 800b618:	69ba      	ldr	r2, [r7, #24]
 800b61a:	4013      	ands	r3, r2
 800b61c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	091b      	lsrs	r3, r3, #4
 800b624:	f003 0201 	and.w	r2, r3, #1
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	fa02 f303 	lsl.w	r3, r2, r3
 800b62e:	69ba      	ldr	r2, [r7, #24]
 800b630:	4313      	orrs	r3, r2
 800b632:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	69ba      	ldr	r2, [r7, #24]
 800b638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	f003 0303 	and.w	r3, r3, #3
 800b642:	2b03      	cmp	r3, #3
 800b644:	d017      	beq.n	800b676 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	2203      	movs	r2, #3
 800b652:	fa02 f303 	lsl.w	r3, r2, r3
 800b656:	43db      	mvns	r3, r3
 800b658:	69ba      	ldr	r2, [r7, #24]
 800b65a:	4013      	ands	r3, r2
 800b65c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	689a      	ldr	r2, [r3, #8]
 800b662:	69fb      	ldr	r3, [r7, #28]
 800b664:	005b      	lsls	r3, r3, #1
 800b666:	fa02 f303 	lsl.w	r3, r2, r3
 800b66a:	69ba      	ldr	r2, [r7, #24]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	69ba      	ldr	r2, [r7, #24]
 800b674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f003 0303 	and.w	r3, r3, #3
 800b67e:	2b02      	cmp	r3, #2
 800b680:	d123      	bne.n	800b6ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	08da      	lsrs	r2, r3, #3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3208      	adds	r2, #8
 800b68a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b68e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b690:	69fb      	ldr	r3, [r7, #28]
 800b692:	f003 0307 	and.w	r3, r3, #7
 800b696:	009b      	lsls	r3, r3, #2
 800b698:	220f      	movs	r2, #15
 800b69a:	fa02 f303 	lsl.w	r3, r2, r3
 800b69e:	43db      	mvns	r3, r3
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	4013      	ands	r3, r2
 800b6a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	691a      	ldr	r2, [r3, #16]
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	f003 0307 	and.w	r3, r3, #7
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b6:	69ba      	ldr	r2, [r7, #24]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b6bc:	69fb      	ldr	r3, [r7, #28]
 800b6be:	08da      	lsrs	r2, r3, #3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	3208      	adds	r2, #8
 800b6c4:	69b9      	ldr	r1, [r7, #24]
 800b6c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b6d0:	69fb      	ldr	r3, [r7, #28]
 800b6d2:	005b      	lsls	r3, r3, #1
 800b6d4:	2203      	movs	r2, #3
 800b6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6da:	43db      	mvns	r3, r3
 800b6dc:	69ba      	ldr	r2, [r7, #24]
 800b6de:	4013      	ands	r3, r2
 800b6e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	f003 0203 	and.w	r2, r3, #3
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	005b      	lsls	r3, r3, #1
 800b6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f2:	69ba      	ldr	r2, [r7, #24]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	69ba      	ldr	r2, [r7, #24]
 800b6fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b706:	2b00      	cmp	r3, #0
 800b708:	f000 80d8 	beq.w	800b8bc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b70c:	4b2c      	ldr	r3, [pc, #176]	; (800b7c0 <HAL_GPIO_Init+0x22c>)
 800b70e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b712:	4a2b      	ldr	r2, [pc, #172]	; (800b7c0 <HAL_GPIO_Init+0x22c>)
 800b714:	f043 0302 	orr.w	r3, r3, #2
 800b718:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b71c:	4b28      	ldr	r3, [pc, #160]	; (800b7c0 <HAL_GPIO_Init+0x22c>)
 800b71e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b72a:	4a26      	ldr	r2, [pc, #152]	; (800b7c4 <HAL_GPIO_Init+0x230>)
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	089b      	lsrs	r3, r3, #2
 800b730:	3302      	adds	r3, #2
 800b732:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b736:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	f003 0303 	and.w	r3, r3, #3
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	220f      	movs	r2, #15
 800b742:	fa02 f303 	lsl.w	r3, r2, r3
 800b746:	43db      	mvns	r3, r3
 800b748:	69ba      	ldr	r2, [r7, #24]
 800b74a:	4013      	ands	r3, r2
 800b74c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a1d      	ldr	r2, [pc, #116]	; (800b7c8 <HAL_GPIO_Init+0x234>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d04a      	beq.n	800b7ec <HAL_GPIO_Init+0x258>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	4a1c      	ldr	r2, [pc, #112]	; (800b7cc <HAL_GPIO_Init+0x238>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d02b      	beq.n	800b7b6 <HAL_GPIO_Init+0x222>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	4a1b      	ldr	r2, [pc, #108]	; (800b7d0 <HAL_GPIO_Init+0x23c>)
 800b762:	4293      	cmp	r3, r2
 800b764:	d025      	beq.n	800b7b2 <HAL_GPIO_Init+0x21e>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	4a1a      	ldr	r2, [pc, #104]	; (800b7d4 <HAL_GPIO_Init+0x240>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d01f      	beq.n	800b7ae <HAL_GPIO_Init+0x21a>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	4a19      	ldr	r2, [pc, #100]	; (800b7d8 <HAL_GPIO_Init+0x244>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d019      	beq.n	800b7aa <HAL_GPIO_Init+0x216>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	4a18      	ldr	r2, [pc, #96]	; (800b7dc <HAL_GPIO_Init+0x248>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d013      	beq.n	800b7a6 <HAL_GPIO_Init+0x212>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	4a17      	ldr	r2, [pc, #92]	; (800b7e0 <HAL_GPIO_Init+0x24c>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d00d      	beq.n	800b7a2 <HAL_GPIO_Init+0x20e>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	4a16      	ldr	r2, [pc, #88]	; (800b7e4 <HAL_GPIO_Init+0x250>)
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d007      	beq.n	800b79e <HAL_GPIO_Init+0x20a>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a15      	ldr	r2, [pc, #84]	; (800b7e8 <HAL_GPIO_Init+0x254>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d101      	bne.n	800b79a <HAL_GPIO_Init+0x206>
 800b796:	2309      	movs	r3, #9
 800b798:	e029      	b.n	800b7ee <HAL_GPIO_Init+0x25a>
 800b79a:	230a      	movs	r3, #10
 800b79c:	e027      	b.n	800b7ee <HAL_GPIO_Init+0x25a>
 800b79e:	2307      	movs	r3, #7
 800b7a0:	e025      	b.n	800b7ee <HAL_GPIO_Init+0x25a>
 800b7a2:	2306      	movs	r3, #6
 800b7a4:	e023      	b.n	800b7ee <HAL_GPIO_Init+0x25a>
 800b7a6:	2305      	movs	r3, #5
 800b7a8:	e021      	b.n	800b7ee <HAL_GPIO_Init+0x25a>
 800b7aa:	2304      	movs	r3, #4
 800b7ac:	e01f      	b.n	800b7ee <HAL_GPIO_Init+0x25a>
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	e01d      	b.n	800b7ee <HAL_GPIO_Init+0x25a>
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	e01b      	b.n	800b7ee <HAL_GPIO_Init+0x25a>
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e019      	b.n	800b7ee <HAL_GPIO_Init+0x25a>
 800b7ba:	bf00      	nop
 800b7bc:	58000080 	.word	0x58000080
 800b7c0:	58024400 	.word	0x58024400
 800b7c4:	58000400 	.word	0x58000400
 800b7c8:	58020000 	.word	0x58020000
 800b7cc:	58020400 	.word	0x58020400
 800b7d0:	58020800 	.word	0x58020800
 800b7d4:	58020c00 	.word	0x58020c00
 800b7d8:	58021000 	.word	0x58021000
 800b7dc:	58021400 	.word	0x58021400
 800b7e0:	58021800 	.word	0x58021800
 800b7e4:	58021c00 	.word	0x58021c00
 800b7e8:	58022400 	.word	0x58022400
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	69fa      	ldr	r2, [r7, #28]
 800b7f0:	f002 0203 	and.w	r2, r2, #3
 800b7f4:	0092      	lsls	r2, r2, #2
 800b7f6:	4093      	lsls	r3, r2
 800b7f8:	69ba      	ldr	r2, [r7, #24]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b7fe:	4938      	ldr	r1, [pc, #224]	; (800b8e0 <HAL_GPIO_Init+0x34c>)
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	089b      	lsrs	r3, r3, #2
 800b804:	3302      	adds	r3, #2
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b80c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	43db      	mvns	r3, r3
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	4013      	ands	r3, r2
 800b81c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b82a:	69ba      	ldr	r2, [r7, #24]
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	4313      	orrs	r3, r2
 800b830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b83a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	43db      	mvns	r3, r3
 800b846:	69ba      	ldr	r2, [r7, #24]
 800b848:	4013      	ands	r3, r2
 800b84a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d003      	beq.n	800b860 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	4313      	orrs	r3, r2
 800b85e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	43db      	mvns	r3, r3
 800b872:	69ba      	ldr	r2, [r7, #24]
 800b874:	4013      	ands	r3, r2
 800b876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b880:	2b00      	cmp	r3, #0
 800b882:	d003      	beq.n	800b88c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b884:	69ba      	ldr	r2, [r7, #24]
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	4313      	orrs	r3, r2
 800b88a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	69ba      	ldr	r2, [r7, #24]
 800b890:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	43db      	mvns	r3, r3
 800b89c:	69ba      	ldr	r2, [r7, #24]
 800b89e:	4013      	ands	r3, r2
 800b8a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d003      	beq.n	800b8b6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b8ae:	69ba      	ldr	r2, [r7, #24]
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	69ba      	ldr	r2, [r7, #24]
 800b8ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f47f ae6b 	bne.w	800b5a8 <HAL_GPIO_Init+0x14>
  }
}
 800b8d2:	bf00      	nop
 800b8d4:	bf00      	nop
 800b8d6:	3724      	adds	r7, #36	; 0x24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	58000400 	.word	0x58000400

0800b8e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b083      	sub	sp, #12
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	807b      	strh	r3, [r7, #2]
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b8f4:	787b      	ldrb	r3, [r7, #1]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d003      	beq.n	800b902 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b8fa:	887a      	ldrh	r2, [r7, #2]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b900:	e003      	b.n	800b90a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b902:	887b      	ldrh	r3, [r7, #2]
 800b904:	041a      	lsls	r2, r3, #16
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	619a      	str	r2, [r3, #24]
}
 800b90a:	bf00      	nop
 800b90c:	370c      	adds	r7, #12
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b916:	b480      	push	{r7}
 800b918:	b085      	sub	sp, #20
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
 800b91e:	460b      	mov	r3, r1
 800b920:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	695b      	ldr	r3, [r3, #20]
 800b926:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b928:	887a      	ldrh	r2, [r7, #2]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	4013      	ands	r3, r2
 800b92e:	041a      	lsls	r2, r3, #16
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	43d9      	mvns	r1, r3
 800b934:	887b      	ldrh	r3, [r7, #2]
 800b936:	400b      	ands	r3, r1
 800b938:	431a      	orrs	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	619a      	str	r2, [r3, #24]
}
 800b93e:	bf00      	nop
 800b940:	3714      	adds	r7, #20
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
	...

0800b94c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e07f      	b.n	800ba5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	d106      	bne.n	800b978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7f6 f9a4 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2224      	movs	r2, #36	; 0x24
 800b97c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	f022 0201 	bic.w	r2, r2, #1
 800b98e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b99c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689a      	ldr	r2, [r3, #8]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b9ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d107      	bne.n	800b9c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	689a      	ldr	r2, [r3, #8]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9c2:	609a      	str	r2, [r3, #8]
 800b9c4:	e006      	b.n	800b9d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	689a      	ldr	r2, [r3, #8]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b9d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	68db      	ldr	r3, [r3, #12]
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	d104      	bne.n	800b9e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	6859      	ldr	r1, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	4b1d      	ldr	r3, [pc, #116]	; (800ba68 <HAL_I2C_Init+0x11c>)
 800b9f2:	430b      	orrs	r3, r1
 800b9f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68da      	ldr	r2, [r3, #12]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	691a      	ldr	r2, [r3, #16]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	695b      	ldr	r3, [r3, #20]
 800ba0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	699b      	ldr	r3, [r3, #24]
 800ba16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	430a      	orrs	r2, r1
 800ba1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	69d9      	ldr	r1, [r3, #28]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a1a      	ldr	r2, [r3, #32]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	430a      	orrs	r2, r1
 800ba2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f042 0201 	orr.w	r2, r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2220      	movs	r2, #32
 800ba4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3708      	adds	r7, #8
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	02008000 	.word	0x02008000

0800ba6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af02      	add	r7, sp, #8
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	607a      	str	r2, [r7, #4]
 800ba76:	461a      	mov	r2, r3
 800ba78:	460b      	mov	r3, r1
 800ba7a:	817b      	strh	r3, [r7, #10]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	2b20      	cmp	r3, #32
 800ba8a:	f040 80da 	bne.w	800bc42 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d101      	bne.n	800ba9c <HAL_I2C_Master_Transmit+0x30>
 800ba98:	2302      	movs	r3, #2
 800ba9a:	e0d3      	b.n	800bc44 <HAL_I2C_Master_Transmit+0x1d8>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800baa4:	f7fa feb8 	bl	8006818 <HAL_GetTick>
 800baa8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	2319      	movs	r3, #25
 800bab0:	2201      	movs	r2, #1
 800bab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f000 ffcf 	bl	800ca5a <I2C_WaitOnFlagUntilTimeout>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d001      	beq.n	800bac6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e0be      	b.n	800bc44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2221      	movs	r2, #33	; 0x21
 800baca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	2210      	movs	r2, #16
 800bad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2200      	movs	r2, #0
 800bada:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	893a      	ldrh	r2, [r7, #8]
 800bae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	2bff      	cmp	r3, #255	; 0xff
 800baf6:	d90e      	bls.n	800bb16 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	22ff      	movs	r2, #255	; 0xff
 800bafc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	8979      	ldrh	r1, [r7, #10]
 800bb06:	4b51      	ldr	r3, [pc, #324]	; (800bc4c <HAL_I2C_Master_Transmit+0x1e0>)
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f001 f9c6 	bl	800cea0 <I2C_TransferConfig>
 800bb14:	e06c      	b.n	800bbf0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb1a:	b29a      	uxth	r2, r3
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	8979      	ldrh	r1, [r7, #10]
 800bb28:	4b48      	ldr	r3, [pc, #288]	; (800bc4c <HAL_I2C_Master_Transmit+0x1e0>)
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f001 f9b5 	bl	800cea0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800bb36:	e05b      	b.n	800bbf0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	6a39      	ldr	r1, [r7, #32]
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f000 ffcc 	bl	800cada <I2C_WaitOnTXISFlagUntilTimeout>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e07b      	b.n	800bc44 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb50:	781a      	ldrb	r2, [r3, #0]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5c:	1c5a      	adds	r2, r3, #1
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb74:	3b01      	subs	r3, #1
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d034      	beq.n	800bbf0 <HAL_I2C_Master_Transmit+0x184>
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d130      	bne.n	800bbf0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	6a3b      	ldr	r3, [r7, #32]
 800bb94:	2200      	movs	r2, #0
 800bb96:	2180      	movs	r1, #128	; 0x80
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f000 ff5e 	bl	800ca5a <I2C_WaitOnFlagUntilTimeout>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d001      	beq.n	800bba8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	e04d      	b.n	800bc44 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	2bff      	cmp	r3, #255	; 0xff
 800bbb0:	d90e      	bls.n	800bbd0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	22ff      	movs	r2, #255	; 0xff
 800bbb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	8979      	ldrh	r1, [r7, #10]
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbc8:	68f8      	ldr	r0, [r7, #12]
 800bbca:	f001 f969 	bl	800cea0 <I2C_TransferConfig>
 800bbce:	e00f      	b.n	800bbf0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	8979      	ldrh	r1, [r7, #10]
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	9300      	str	r3, [sp, #0]
 800bbe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bbea:	68f8      	ldr	r0, [r7, #12]
 800bbec:	f001 f958 	bl	800cea0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d19e      	bne.n	800bb38 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbfa:	697a      	ldr	r2, [r7, #20]
 800bbfc:	6a39      	ldr	r1, [r7, #32]
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f000 ffab 	bl	800cb5a <I2C_WaitOnSTOPFlagUntilTimeout>
 800bc04:	4603      	mov	r3, r0
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d001      	beq.n	800bc0e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	e01a      	b.n	800bc44 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2220      	movs	r2, #32
 800bc14:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	6859      	ldr	r1, [r3, #4]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	4b0b      	ldr	r3, [pc, #44]	; (800bc50 <HAL_I2C_Master_Transmit+0x1e4>)
 800bc22:	400b      	ands	r3, r1
 800bc24:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e000      	b.n	800bc44 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800bc42:	2302      	movs	r3, #2
  }
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	80002000 	.word	0x80002000
 800bc50:	fe00e800 	.word	0xfe00e800

0800bc54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af02      	add	r7, sp, #8
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	607a      	str	r2, [r7, #4]
 800bc5e:	461a      	mov	r2, r3
 800bc60:	460b      	mov	r3, r1
 800bc62:	817b      	strh	r3, [r7, #10]
 800bc64:	4613      	mov	r3, r2
 800bc66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	2b20      	cmp	r3, #32
 800bc72:	f040 80db 	bne.w	800be2c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d101      	bne.n	800bc84 <HAL_I2C_Master_Receive+0x30>
 800bc80:	2302      	movs	r3, #2
 800bc82:	e0d4      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bc8c:	f7fa fdc4 	bl	8006818 <HAL_GetTick>
 800bc90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	2319      	movs	r3, #25
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f000 fedb 	bl	800ca5a <I2C_WaitOnFlagUntilTimeout>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e0bf      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2222      	movs	r2, #34	; 0x22
 800bcb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2210      	movs	r2, #16
 800bcba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	893a      	ldrh	r2, [r7, #8]
 800bcce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	2bff      	cmp	r3, #255	; 0xff
 800bcde:	d90e      	bls.n	800bcfe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	22ff      	movs	r2, #255	; 0xff
 800bce4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	8979      	ldrh	r1, [r7, #10]
 800bcee:	4b52      	ldr	r3, [pc, #328]	; (800be38 <HAL_I2C_Master_Receive+0x1e4>)
 800bcf0:	9300      	str	r3, [sp, #0]
 800bcf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f001 f8d2 	bl	800cea0 <I2C_TransferConfig>
 800bcfc:	e06d      	b.n	800bdda <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	8979      	ldrh	r1, [r7, #10]
 800bd10:	4b49      	ldr	r3, [pc, #292]	; (800be38 <HAL_I2C_Master_Receive+0x1e4>)
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f001 f8c1 	bl	800cea0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800bd1e:	e05c      	b.n	800bdda <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd20:	697a      	ldr	r2, [r7, #20]
 800bd22:	6a39      	ldr	r1, [r7, #32]
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	f000 ff55 	bl	800cbd4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d001      	beq.n	800bd34 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e07c      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3e:	b2d2      	uxtb	r2, r2
 800bd40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd46:	1c5a      	adds	r2, r3, #1
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d034      	beq.n	800bdda <HAL_I2C_Master_Receive+0x186>
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d130      	bne.n	800bdda <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	9300      	str	r3, [sp, #0]
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	2180      	movs	r1, #128	; 0x80
 800bd82:	68f8      	ldr	r0, [r7, #12]
 800bd84:	f000 fe69 	bl	800ca5a <I2C_WaitOnFlagUntilTimeout>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d001      	beq.n	800bd92 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e04d      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	2bff      	cmp	r3, #255	; 0xff
 800bd9a:	d90e      	bls.n	800bdba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	22ff      	movs	r2, #255	; 0xff
 800bda0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	8979      	ldrh	r1, [r7, #10]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f001 f874 	bl	800cea0 <I2C_TransferConfig>
 800bdb8:	e00f      	b.n	800bdda <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bdc8:	b2da      	uxtb	r2, r3
 800bdca:	8979      	ldrh	r1, [r7, #10]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bdd4:	68f8      	ldr	r0, [r7, #12]
 800bdd6:	f001 f863 	bl	800cea0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d19d      	bne.n	800bd20 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	6a39      	ldr	r1, [r7, #32]
 800bde8:	68f8      	ldr	r0, [r7, #12]
 800bdea:	f000 feb6 	bl	800cb5a <I2C_WaitOnSTOPFlagUntilTimeout>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	e01a      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6859      	ldr	r1, [r3, #4]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	4b0c      	ldr	r3, [pc, #48]	; (800be3c <HAL_I2C_Master_Receive+0x1e8>)
 800be0c:	400b      	ands	r3, r1
 800be0e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	2220      	movs	r2, #32
 800be14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2200      	movs	r2, #0
 800be1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be28:	2300      	movs	r3, #0
 800be2a:	e000      	b.n	800be2e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800be2c:	2302      	movs	r3, #2
  }
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	80002400 	.word	0x80002400
 800be3c:	fe00e800 	.word	0xfe00e800

0800be40 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	699b      	ldr	r3, [r3, #24]
 800be4e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	0a1b      	lsrs	r3, r3, #8
 800be5c:	f003 0301 	and.w	r3, r3, #1
 800be60:	2b00      	cmp	r3, #0
 800be62:	d010      	beq.n	800be86 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	09db      	lsrs	r3, r3, #7
 800be68:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00a      	beq.n	800be86 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be74:	f043 0201 	orr.w	r2, r3, #1
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be84:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	0a9b      	lsrs	r3, r3, #10
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d010      	beq.n	800beb4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	09db      	lsrs	r3, r3, #7
 800be96:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00a      	beq.n	800beb4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea2:	f043 0208 	orr.w	r2, r3, #8
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800beb2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	0a5b      	lsrs	r3, r3, #9
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d010      	beq.n	800bee2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	09db      	lsrs	r3, r3, #7
 800bec4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d00a      	beq.n	800bee2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed0:	f043 0202 	orr.w	r2, r3, #2
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bee0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f003 030b 	and.w	r3, r3, #11
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d003      	beq.n	800befa <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800bef2:	68f9      	ldr	r1, [r7, #12]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fc77 	bl	800c7e8 <I2C_ITError>
  }
}
 800befa:	bf00      	nop
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800bf0a:	bf00      	nop
 800bf0c:	370c      	adds	r7, #12
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bf16:	b480      	push	{r7}
 800bf18:	b083      	sub	sp, #12
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800bf1e:	bf00      	nop
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr

0800bf2a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b083      	sub	sp, #12
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	460b      	mov	r3, r1
 800bf34:	70fb      	strb	r3, [r7, #3]
 800bf36:	4613      	mov	r3, r2
 800bf38:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800bf3a:	bf00      	nop
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bf46:	b480      	push	{r7}
 800bf48:	b083      	sub	sp, #12
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800bf4e:	bf00      	nop
 800bf50:	370c      	adds	r7, #12
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800bf62:	bf00      	nop
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr

0800bf6e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b083      	sub	sp, #12
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800bf76:	bf00      	nop
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b086      	sub	sp, #24
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	60b9      	str	r1, [r7, #8]
 800bf8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf92:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d101      	bne.n	800bfa6 <I2C_Slave_ISR_IT+0x24>
 800bfa2:	2302      	movs	r3, #2
 800bfa4:	e0ec      	b.n	800c180 <I2C_Slave_ISR_IT+0x1fe>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	095b      	lsrs	r3, r3, #5
 800bfb2:	f003 0301 	and.w	r3, r3, #1
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d009      	beq.n	800bfce <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	095b      	lsrs	r3, r3, #5
 800bfbe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d003      	beq.n	800bfce <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800bfc6:	6939      	ldr	r1, [r7, #16]
 800bfc8:	68f8      	ldr	r0, [r7, #12]
 800bfca:	f000 f9bf 	bl	800c34c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	091b      	lsrs	r3, r3, #4
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d04d      	beq.n	800c076 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	091b      	lsrs	r3, r3, #4
 800bfde:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d047      	beq.n	800c076 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d128      	bne.n	800c042 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	2b28      	cmp	r3, #40	; 0x28
 800bffa:	d108      	bne.n	800c00e <I2C_Slave_ISR_IT+0x8c>
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c002:	d104      	bne.n	800c00e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c004:	6939      	ldr	r1, [r7, #16]
 800c006:	68f8      	ldr	r0, [r7, #12]
 800c008:	f000 fb98 	bl	800c73c <I2C_ITListenCplt>
 800c00c:	e032      	b.n	800c074 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c014:	b2db      	uxtb	r3, r3
 800c016:	2b29      	cmp	r3, #41	; 0x29
 800c018:	d10e      	bne.n	800c038 <I2C_Slave_ISR_IT+0xb6>
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c020:	d00a      	beq.n	800c038 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2210      	movs	r2, #16
 800c028:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f000 fcd3 	bl	800c9d6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f000 f92d 	bl	800c290 <I2C_ITSlaveSeqCplt>
 800c036:	e01d      	b.n	800c074 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2210      	movs	r2, #16
 800c03e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c040:	e096      	b.n	800c170 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2210      	movs	r2, #16
 800c048:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c04e:	f043 0204 	orr.w	r2, r3, #4
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c056:	697b      	ldr	r3, [r7, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d004      	beq.n	800c066 <I2C_Slave_ISR_IT+0xe4>
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c062:	f040 8085 	bne.w	800c170 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c06a:	4619      	mov	r1, r3
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f000 fbbb 	bl	800c7e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c072:	e07d      	b.n	800c170 <I2C_Slave_ISR_IT+0x1ee>
 800c074:	e07c      	b.n	800c170 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	089b      	lsrs	r3, r3, #2
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d030      	beq.n	800c0e4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	089b      	lsrs	r3, r3, #2
 800c086:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d02a      	beq.n	800c0e4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c092:	b29b      	uxth	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d018      	beq.n	800c0ca <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a2:	b2d2      	uxtb	r2, r2
 800c0a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0b4:	3b01      	subs	r3, #1
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d14f      	bne.n	800c174 <I2C_Slave_ISR_IT+0x1f2>
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c0da:	d04b      	beq.n	800c174 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f000 f8d7 	bl	800c290 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c0e2:	e047      	b.n	800c174 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	08db      	lsrs	r3, r3, #3
 800c0e8:	f003 0301 	and.w	r3, r3, #1
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00a      	beq.n	800c106 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	08db      	lsrs	r3, r3, #3
 800c0f4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d004      	beq.n	800c106 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c0fc:	6939      	ldr	r1, [r7, #16]
 800c0fe:	68f8      	ldr	r0, [r7, #12]
 800c100:	f000 f842 	bl	800c188 <I2C_ITAddrCplt>
 800c104:	e037      	b.n	800c176 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	085b      	lsrs	r3, r3, #1
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d031      	beq.n	800c176 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	085b      	lsrs	r3, r3, #1
 800c116:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d02b      	beq.n	800c176 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c122:	b29b      	uxth	r3, r3
 800c124:	2b00      	cmp	r3, #0
 800c126:	d018      	beq.n	800c15a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c12c:	781a      	ldrb	r2, [r3, #0]
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c138:	1c5a      	adds	r2, r3, #1
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c142:	b29b      	uxth	r3, r3
 800c144:	3b01      	subs	r3, #1
 800c146:	b29a      	uxth	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c150:	3b01      	subs	r3, #1
 800c152:	b29a      	uxth	r2, r3
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	851a      	strh	r2, [r3, #40]	; 0x28
 800c158:	e00d      	b.n	800c176 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c160:	d002      	beq.n	800c168 <I2C_Slave_ISR_IT+0x1e6>
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d106      	bne.n	800c176 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c168:	68f8      	ldr	r0, [r7, #12]
 800c16a:	f000 f891 	bl	800c290 <I2C_ITSlaveSeqCplt>
 800c16e:	e002      	b.n	800c176 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800c170:	bf00      	nop
 800c172:	e000      	b.n	800c176 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800c174:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c17e:	2300      	movs	r3, #0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3718      	adds	r7, #24
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c19e:	2b28      	cmp	r3, #40	; 0x28
 800c1a0:	d16a      	bne.n	800c278 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	0c1b      	lsrs	r3, r3, #16
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	f003 0301 	and.w	r3, r3, #1
 800c1b0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	699b      	ldr	r3, [r3, #24]
 800c1b8:	0c1b      	lsrs	r3, r3, #16
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c1c0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1ce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	b29b      	uxth	r3, r3
 800c1d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c1dc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d138      	bne.n	800c258 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c1e6:	897b      	ldrh	r3, [r7, #10]
 800c1e8:	09db      	lsrs	r3, r3, #7
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	89bb      	ldrh	r3, [r7, #12]
 800c1ee:	4053      	eors	r3, r2
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	f003 0306 	and.w	r3, r3, #6
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d11c      	bne.n	800c234 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c1fa:	897b      	ldrh	r3, [r7, #10]
 800c1fc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c202:	1c5a      	adds	r2, r3, #1
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d13b      	bne.n	800c288 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2208      	movs	r2, #8
 800c21c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c226:	89ba      	ldrh	r2, [r7, #12]
 800c228:	7bfb      	ldrb	r3, [r7, #15]
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f7ff fe7c 	bl	800bf2a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c232:	e029      	b.n	800c288 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c234:	893b      	ldrh	r3, [r7, #8]
 800c236:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c238:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fe61 	bl	800cf04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c24a:	89ba      	ldrh	r2, [r7, #12]
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
 800c24e:	4619      	mov	r1, r3
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f7ff fe6a 	bl	800bf2a <HAL_I2C_AddrCallback>
}
 800c256:	e017      	b.n	800c288 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fe51 	bl	800cf04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c26a:	89ba      	ldrh	r2, [r7, #12]
 800c26c:	7bfb      	ldrb	r3, [r7, #15]
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7ff fe5a 	bl	800bf2a <HAL_I2C_AddrCallback>
}
 800c276:	e007      	b.n	800c288 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2208      	movs	r2, #8
 800c27e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c288:	bf00      	nop
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	0b9b      	lsrs	r3, r3, #14
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d008      	beq.n	800c2c6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c2c2:	601a      	str	r2, [r3, #0]
 800c2c4:	e00d      	b.n	800c2e2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	0bdb      	lsrs	r3, r3, #15
 800c2ca:	f003 0301 	and.w	r3, r3, #1
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d007      	beq.n	800c2e2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681a      	ldr	r2, [r3, #0]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c2e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b29      	cmp	r3, #41	; 0x29
 800c2ec:	d112      	bne.n	800c314 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2228      	movs	r2, #40	; 0x28
 800c2f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2221      	movs	r2, #33	; 0x21
 800c2fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c2fc:	2101      	movs	r1, #1
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fe00 	bl	800cf04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f7ff fdf8 	bl	800bf02 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c312:	e017      	b.n	800c344 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b2a      	cmp	r3, #42	; 0x2a
 800c31e:	d111      	bne.n	800c344 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2228      	movs	r2, #40	; 0x28
 800c324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2222      	movs	r2, #34	; 0x22
 800c32c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c32e:	2102      	movs	r1, #2
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fde7 	bl	800cf04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f7ff fde9 	bl	800bf16 <HAL_I2C_SlaveRxCpltCallback>
}
 800c344:	bf00      	nop
 800c346:	3710      	adds	r7, #16
 800c348:	46bd      	mov	sp, r7
 800c34a:	bd80      	pop	{r7, pc}

0800c34c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b086      	sub	sp, #24
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c368:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2220      	movs	r2, #32
 800c370:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c372:	7bfb      	ldrb	r3, [r7, #15]
 800c374:	2b21      	cmp	r3, #33	; 0x21
 800c376:	d002      	beq.n	800c37e <I2C_ITSlaveCplt+0x32>
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	2b29      	cmp	r3, #41	; 0x29
 800c37c:	d108      	bne.n	800c390 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c37e:	f248 0101 	movw	r1, #32769	; 0x8001
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 fdbe 	bl	800cf04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2221      	movs	r2, #33	; 0x21
 800c38c:	631a      	str	r2, [r3, #48]	; 0x30
 800c38e:	e00d      	b.n	800c3ac <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	2b22      	cmp	r3, #34	; 0x22
 800c394:	d002      	beq.n	800c39c <I2C_ITSlaveCplt+0x50>
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	2b2a      	cmp	r3, #42	; 0x2a
 800c39a:	d107      	bne.n	800c3ac <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c39c:	f248 0102 	movw	r1, #32770	; 0x8002
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fdaf 	bl	800cf04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2222      	movs	r2, #34	; 0x22
 800c3aa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c3ba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6859      	ldr	r1, [r3, #4]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681a      	ldr	r2, [r3, #0]
 800c3c6:	4b80      	ldr	r3, [pc, #512]	; (800c5c8 <I2C_ITSlaveCplt+0x27c>)
 800c3c8:	400b      	ands	r3, r1
 800c3ca:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fb02 	bl	800c9d6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	0b9b      	lsrs	r3, r3, #14
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d07a      	beq.n	800c4d4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c3ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	f000 8111 	beq.w	800c61a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a73      	ldr	r2, [pc, #460]	; (800c5cc <I2C_ITSlaveCplt+0x280>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d059      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a71      	ldr	r2, [pc, #452]	; (800c5d0 <I2C_ITSlaveCplt+0x284>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d053      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a6f      	ldr	r2, [pc, #444]	; (800c5d4 <I2C_ITSlaveCplt+0x288>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d04d      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	4a6d      	ldr	r2, [pc, #436]	; (800c5d8 <I2C_ITSlaveCplt+0x28c>)
 800c424:	4293      	cmp	r3, r2
 800c426:	d047      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a6b      	ldr	r2, [pc, #428]	; (800c5dc <I2C_ITSlaveCplt+0x290>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d041      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a69      	ldr	r2, [pc, #420]	; (800c5e0 <I2C_ITSlaveCplt+0x294>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d03b      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a67      	ldr	r2, [pc, #412]	; (800c5e4 <I2C_ITSlaveCplt+0x298>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d035      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a65      	ldr	r2, [pc, #404]	; (800c5e8 <I2C_ITSlaveCplt+0x29c>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d02f      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a63      	ldr	r2, [pc, #396]	; (800c5ec <I2C_ITSlaveCplt+0x2a0>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d029      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a61      	ldr	r2, [pc, #388]	; (800c5f0 <I2C_ITSlaveCplt+0x2a4>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d023      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a5f      	ldr	r2, [pc, #380]	; (800c5f4 <I2C_ITSlaveCplt+0x2a8>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d01d      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a5d      	ldr	r2, [pc, #372]	; (800c5f8 <I2C_ITSlaveCplt+0x2ac>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d017      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a5b      	ldr	r2, [pc, #364]	; (800c5fc <I2C_ITSlaveCplt+0x2b0>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d011      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a59      	ldr	r2, [pc, #356]	; (800c600 <I2C_ITSlaveCplt+0x2b4>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d00b      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a57      	ldr	r2, [pc, #348]	; (800c604 <I2C_ITSlaveCplt+0x2b8>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d005      	beq.n	800c4b8 <I2C_ITSlaveCplt+0x16c>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a55      	ldr	r2, [pc, #340]	; (800c608 <I2C_ITSlaveCplt+0x2bc>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d105      	bne.n	800c4c4 <I2C_ITSlaveCplt+0x178>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	e004      	b.n	800c4ce <I2C_ITSlaveCplt+0x182>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	8553      	strh	r3, [r2, #42]	; 0x2a
 800c4d2:	e0a2      	b.n	800c61a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	0bdb      	lsrs	r3, r3, #15
 800c4d8:	f003 0301 	and.w	r3, r3, #1
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 809c 	beq.w	800c61a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c4f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f000 808f 	beq.w	800c61a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a32      	ldr	r2, [pc, #200]	; (800c5cc <I2C_ITSlaveCplt+0x280>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d059      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a30      	ldr	r2, [pc, #192]	; (800c5d0 <I2C_ITSlaveCplt+0x284>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d053      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a2e      	ldr	r2, [pc, #184]	; (800c5d4 <I2C_ITSlaveCplt+0x288>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d04d      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4a2c      	ldr	r2, [pc, #176]	; (800c5d8 <I2C_ITSlaveCplt+0x28c>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d047      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	4a2a      	ldr	r2, [pc, #168]	; (800c5dc <I2C_ITSlaveCplt+0x290>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d041      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a28      	ldr	r2, [pc, #160]	; (800c5e0 <I2C_ITSlaveCplt+0x294>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d03b      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a26      	ldr	r2, [pc, #152]	; (800c5e4 <I2C_ITSlaveCplt+0x298>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d035      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a24      	ldr	r2, [pc, #144]	; (800c5e8 <I2C_ITSlaveCplt+0x29c>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d02f      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a22      	ldr	r2, [pc, #136]	; (800c5ec <I2C_ITSlaveCplt+0x2a0>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d029      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a20      	ldr	r2, [pc, #128]	; (800c5f0 <I2C_ITSlaveCplt+0x2a4>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d023      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a1e      	ldr	r2, [pc, #120]	; (800c5f4 <I2C_ITSlaveCplt+0x2a8>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d01d      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a1c      	ldr	r2, [pc, #112]	; (800c5f8 <I2C_ITSlaveCplt+0x2ac>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d017      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	4a1a      	ldr	r2, [pc, #104]	; (800c5fc <I2C_ITSlaveCplt+0x2b0>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d011      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a18      	ldr	r2, [pc, #96]	; (800c600 <I2C_ITSlaveCplt+0x2b4>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d00b      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a16      	ldr	r2, [pc, #88]	; (800c604 <I2C_ITSlaveCplt+0x2b8>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d005      	beq.n	800c5bc <I2C_ITSlaveCplt+0x270>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a14      	ldr	r2, [pc, #80]	; (800c608 <I2C_ITSlaveCplt+0x2bc>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d127      	bne.n	800c60c <I2C_ITSlaveCplt+0x2c0>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	e026      	b.n	800c616 <I2C_ITSlaveCplt+0x2ca>
 800c5c8:	fe00e800 	.word	0xfe00e800
 800c5cc:	40020010 	.word	0x40020010
 800c5d0:	40020028 	.word	0x40020028
 800c5d4:	40020040 	.word	0x40020040
 800c5d8:	40020058 	.word	0x40020058
 800c5dc:	40020070 	.word	0x40020070
 800c5e0:	40020088 	.word	0x40020088
 800c5e4:	400200a0 	.word	0x400200a0
 800c5e8:	400200b8 	.word	0x400200b8
 800c5ec:	40020410 	.word	0x40020410
 800c5f0:	40020428 	.word	0x40020428
 800c5f4:	40020440 	.word	0x40020440
 800c5f8:	40020458 	.word	0x40020458
 800c5fc:	40020470 	.word	0x40020470
 800c600:	40020488 	.word	0x40020488
 800c604:	400204a0 	.word	0x400204a0
 800c608:	400204b8 	.word	0x400204b8
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	b29b      	uxth	r3, r3
 800c616:	687a      	ldr	r2, [r7, #4]
 800c618:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	089b      	lsrs	r3, r3, #2
 800c61e:	f003 0301 	and.w	r3, r3, #1
 800c622:	2b00      	cmp	r3, #0
 800c624:	d020      	beq.n	800c668 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f023 0304 	bic.w	r3, r3, #4
 800c62c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c638:	b2d2      	uxtb	r2, r2
 800c63a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00c      	beq.n	800c668 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c652:	3b01      	subs	r3, #1
 800c654:	b29a      	uxth	r2, r3
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c65e:	b29b      	uxth	r3, r3
 800c660:	3b01      	subs	r3, #1
 800c662:	b29a      	uxth	r2, r3
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d005      	beq.n	800c67e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c676:	f043 0204 	orr.w	r2, r3, #4
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c690:	2b00      	cmp	r3, #0
 800c692:	d010      	beq.n	800c6b6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c698:	4619      	mov	r1, r3
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f8a4 	bl	800c7e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	2b28      	cmp	r3, #40	; 0x28
 800c6aa:	d141      	bne.n	800c730 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800c6ac:	6979      	ldr	r1, [r7, #20]
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f844 	bl	800c73c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c6b4:	e03c      	b.n	800c730 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c6be:	d014      	beq.n	800c6ea <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f7ff fde5 	bl	800c290 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a1b      	ldr	r2, [pc, #108]	; (800c738 <I2C_ITSlaveCplt+0x3ec>)
 800c6ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2220      	movs	r2, #32
 800c6d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7ff fc2f 	bl	800bf46 <HAL_I2C_ListenCpltCallback>
}
 800c6e8:	e022      	b.n	800c730 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	2b22      	cmp	r3, #34	; 0x22
 800c6f4:	d10e      	bne.n	800c714 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2220      	movs	r2, #32
 800c6fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2200      	movs	r2, #0
 800c702:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f7ff fc02 	bl	800bf16 <HAL_I2C_SlaveRxCpltCallback>
}
 800c712:	e00d      	b.n	800c730 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2220      	movs	r2, #32
 800c718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	2200      	movs	r2, #0
 800c720:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2200      	movs	r2, #0
 800c726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7ff fbe9 	bl	800bf02 <HAL_I2C_SlaveTxCpltCallback>
}
 800c730:	bf00      	nop
 800c732:	3718      	adds	r7, #24
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	ffff0000 	.word	0xffff0000

0800c73c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	4a26      	ldr	r2, [pc, #152]	; (800c7e4 <I2C_ITListenCplt+0xa8>)
 800c74a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2200      	movs	r2, #0
 800c750:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2220      	movs	r2, #32
 800c756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	089b      	lsrs	r3, r3, #2
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	2b00      	cmp	r3, #0
 800c772:	d022      	beq.n	800c7ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c77e:	b2d2      	uxtb	r2, r2
 800c780:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c790:	2b00      	cmp	r3, #0
 800c792:	d012      	beq.n	800c7ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c798:	3b01      	subs	r3, #1
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7a4:	b29b      	uxth	r3, r3
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	b29a      	uxth	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7b2:	f043 0204 	orr.w	r2, r3, #4
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c7ba:	f248 0103 	movw	r1, #32771	; 0x8003
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fba0 	bl	800cf04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	2210      	movs	r2, #16
 800c7ca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f7ff fbb6 	bl	800bf46 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	ffff0000 	.word	0xffff0000

0800c7e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4a5d      	ldr	r2, [pc, #372]	; (800c97c <I2C_ITError+0x194>)
 800c806:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	431a      	orrs	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	2b28      	cmp	r3, #40	; 0x28
 800c81e:	d005      	beq.n	800c82c <I2C_ITError+0x44>
 800c820:	7bfb      	ldrb	r3, [r7, #15]
 800c822:	2b29      	cmp	r3, #41	; 0x29
 800c824:	d002      	beq.n	800c82c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c826:	7bfb      	ldrb	r3, [r7, #15]
 800c828:	2b2a      	cmp	r3, #42	; 0x2a
 800c82a:	d10b      	bne.n	800c844 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c82c:	2103      	movs	r1, #3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fb68 	bl	800cf04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2228      	movs	r2, #40	; 0x28
 800c838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a50      	ldr	r2, [pc, #320]	; (800c980 <I2C_ITError+0x198>)
 800c840:	635a      	str	r2, [r3, #52]	; 0x34
 800c842:	e011      	b.n	800c868 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c844:	f248 0103 	movw	r1, #32771	; 0x8003
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 fb5b 	bl	800cf04 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c854:	b2db      	uxtb	r3, r3
 800c856:	2b60      	cmp	r3, #96	; 0x60
 800c858:	d003      	beq.n	800c862 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2220      	movs	r2, #32
 800c85e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c872:	2b00      	cmp	r3, #0
 800c874:	d039      	beq.n	800c8ea <I2C_ITError+0x102>
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b11      	cmp	r3, #17
 800c87a:	d002      	beq.n	800c882 <I2C_ITError+0x9a>
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	2b21      	cmp	r3, #33	; 0x21
 800c880:	d133      	bne.n	800c8ea <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c88c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c890:	d107      	bne.n	800c8a2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f7fe fc2a 	bl	800b100 <HAL_DMA_GetState>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d017      	beq.n	800c8e2 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b6:	4a33      	ldr	r2, [pc, #204]	; (800c984 <I2C_ITError+0x19c>)
 800c8b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fd faaa 	bl	8009e20 <HAL_DMA_Abort_IT>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d04d      	beq.n	800c96e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c8dc:	4610      	mov	r0, r2
 800c8de:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c8e0:	e045      	b.n	800c96e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f850 	bl	800c988 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c8e8:	e041      	b.n	800c96e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d039      	beq.n	800c966 <I2C_ITError+0x17e>
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	2b12      	cmp	r3, #18
 800c8f6:	d002      	beq.n	800c8fe <I2C_ITError+0x116>
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	2b22      	cmp	r3, #34	; 0x22
 800c8fc:	d133      	bne.n	800c966 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c90c:	d107      	bne.n	800c91e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c91c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fbec 	bl	800b100 <HAL_DMA_GetState>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d017      	beq.n	800c95e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c932:	4a14      	ldr	r2, [pc, #80]	; (800c984 <I2C_ITError+0x19c>)
 800c934:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c942:	4618      	mov	r0, r3
 800c944:	f7fd fa6c 	bl	8009e20 <HAL_DMA_Abort_IT>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d011      	beq.n	800c972 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c958:	4610      	mov	r0, r2
 800c95a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c95c:	e009      	b.n	800c972 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f812 	bl	800c988 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c964:	e005      	b.n	800c972 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f80e 	bl	800c988 <I2C_TreatErrorCallback>
  }
}
 800c96c:	e002      	b.n	800c974 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c96e:	bf00      	nop
 800c970:	e000      	b.n	800c974 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c972:	bf00      	nop
}
 800c974:	bf00      	nop
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	ffff0000 	.word	0xffff0000
 800c980:	0800bf83 	.word	0x0800bf83
 800c984:	0800ca1f 	.word	0x0800ca1f

0800c988 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b082      	sub	sp, #8
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b60      	cmp	r3, #96	; 0x60
 800c99a:	d10e      	bne.n	800c9ba <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2220      	movs	r2, #32
 800c9a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f7ff fadb 	bl	800bf6e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c9b8:	e009      	b.n	800c9ce <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f7ff fac6 	bl	800bf5a <HAL_I2C_ErrorCallback>
}
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}

0800c9d6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c9d6:	b480      	push	{r7}
 800c9d8:	b083      	sub	sp, #12
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	699b      	ldr	r3, [r3, #24]
 800c9e4:	f003 0302 	and.w	r3, r3, #2
 800c9e8:	2b02      	cmp	r3, #2
 800c9ea:	d103      	bne.n	800c9f4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	f003 0301 	and.w	r3, r3, #1
 800c9fe:	2b01      	cmp	r3, #1
 800ca00:	d007      	beq.n	800ca12 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	699a      	ldr	r2, [r3, #24]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f042 0201 	orr.w	r2, r2, #1
 800ca10:	619a      	str	r2, [r3, #24]
  }
}
 800ca12:	bf00      	nop
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca2a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d003      	beq.n	800ca3c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca38:	2200      	movs	r2, #0
 800ca3a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d003      	beq.n	800ca4c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca48:	2200      	movs	r2, #0
 800ca4a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f7ff ff9b 	bl	800c988 <I2C_TreatErrorCallback>
}
 800ca52:	bf00      	nop
 800ca54:	3710      	adds	r7, #16
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}

0800ca5a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	60f8      	str	r0, [r7, #12]
 800ca62:	60b9      	str	r1, [r7, #8]
 800ca64:	603b      	str	r3, [r7, #0]
 800ca66:	4613      	mov	r3, r2
 800ca68:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ca6a:	e022      	b.n	800cab2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca72:	d01e      	beq.n	800cab2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca74:	f7f9 fed0 	bl	8006818 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d302      	bcc.n	800ca8a <I2C_WaitOnFlagUntilTimeout+0x30>
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d113      	bne.n	800cab2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca8e:	f043 0220 	orr.w	r2, r3, #32
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2220      	movs	r2, #32
 800ca9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	e00f      	b.n	800cad2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	699a      	ldr	r2, [r3, #24]
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	4013      	ands	r3, r2
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	bf0c      	ite	eq
 800cac2:	2301      	moveq	r3, #1
 800cac4:	2300      	movne	r3, #0
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	461a      	mov	r2, r3
 800caca:	79fb      	ldrb	r3, [r7, #7]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d0cd      	beq.n	800ca6c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	60f8      	str	r0, [r7, #12]
 800cae2:	60b9      	str	r1, [r7, #8]
 800cae4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cae6:	e02c      	b.n	800cb42 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	68b9      	ldr	r1, [r7, #8]
 800caec:	68f8      	ldr	r0, [r7, #12]
 800caee:	f000 f8eb 	bl	800ccc8 <I2C_IsErrorOccurred>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	e02a      	b.n	800cb52 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb02:	d01e      	beq.n	800cb42 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb04:	f7f9 fe88 	bl	8006818 <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d302      	bcc.n	800cb1a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d113      	bne.n	800cb42 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb1e:	f043 0220 	orr.w	r2, r3, #32
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2220      	movs	r2, #32
 800cb2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	2200      	movs	r2, #0
 800cb3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e007      	b.n	800cb52 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	699b      	ldr	r3, [r3, #24]
 800cb48:	f003 0302 	and.w	r3, r3, #2
 800cb4c:	2b02      	cmp	r3, #2
 800cb4e:	d1cb      	bne.n	800cae8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cb50:	2300      	movs	r3, #0
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	60f8      	str	r0, [r7, #12]
 800cb62:	60b9      	str	r1, [r7, #8]
 800cb64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cb66:	e028      	b.n	800cbba <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	68b9      	ldr	r1, [r7, #8]
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f000 f8ab 	bl	800ccc8 <I2C_IsErrorOccurred>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e026      	b.n	800cbca <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb7c:	f7f9 fe4c 	bl	8006818 <HAL_GetTick>
 800cb80:	4602      	mov	r2, r0
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	1ad3      	subs	r3, r2, r3
 800cb86:	68ba      	ldr	r2, [r7, #8]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d302      	bcc.n	800cb92 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d113      	bne.n	800cbba <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb96:	f043 0220 	orr.w	r2, r3, #32
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2220      	movs	r2, #32
 800cba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2200      	movs	r2, #0
 800cbaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e007      	b.n	800cbca <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	699b      	ldr	r3, [r3, #24]
 800cbc0:	f003 0320 	and.w	r3, r3, #32
 800cbc4:	2b20      	cmp	r3, #32
 800cbc6:	d1cf      	bne.n	800cb68 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3710      	adds	r7, #16
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
	...

0800cbd4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cbe0:	e064      	b.n	800ccac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	68b9      	ldr	r1, [r7, #8]
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f000 f86e 	bl	800ccc8 <I2C_IsErrorOccurred>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d001      	beq.n	800cbf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	e062      	b.n	800ccbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	699b      	ldr	r3, [r3, #24]
 800cbfc:	f003 0320 	and.w	r3, r3, #32
 800cc00:	2b20      	cmp	r3, #32
 800cc02:	d138      	bne.n	800cc76 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	699b      	ldr	r3, [r3, #24]
 800cc0a:	f003 0304 	and.w	r3, r3, #4
 800cc0e:	2b04      	cmp	r3, #4
 800cc10:	d105      	bne.n	800cc1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d001      	beq.n	800cc1e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	e04e      	b.n	800ccbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	f003 0310 	and.w	r3, r3, #16
 800cc28:	2b10      	cmp	r3, #16
 800cc2a:	d107      	bne.n	800cc3c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2210      	movs	r2, #16
 800cc32:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2204      	movs	r2, #4
 800cc38:	645a      	str	r2, [r3, #68]	; 0x44
 800cc3a:	e002      	b.n	800cc42 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2220      	movs	r2, #32
 800cc48:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6859      	ldr	r1, [r3, #4]
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	4b1b      	ldr	r3, [pc, #108]	; (800ccc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800cc56:	400b      	ands	r3, r1
 800cc58:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2220      	movs	r2, #32
 800cc5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cc72:	2301      	movs	r3, #1
 800cc74:	e022      	b.n	800ccbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc76:	f7f9 fdcf 	bl	8006818 <HAL_GetTick>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	68ba      	ldr	r2, [r7, #8]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d302      	bcc.n	800cc8c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d10f      	bne.n	800ccac <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc90:	f043 0220 	orr.w	r2, r3, #32
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2220      	movs	r2, #32
 800cc9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e007      	b.n	800ccbc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	699b      	ldr	r3, [r3, #24]
 800ccb2:	f003 0304 	and.w	r3, r3, #4
 800ccb6:	2b04      	cmp	r3, #4
 800ccb8:	d193      	bne.n	800cbe2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	fe00e800 	.word	0xfe00e800

0800ccc8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08a      	sub	sp, #40	; 0x28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	699b      	ldr	r3, [r3, #24]
 800cce0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800cce2:	2300      	movs	r3, #0
 800cce4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	f003 0310 	and.w	r3, r3, #16
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d075      	beq.n	800cde0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2210      	movs	r2, #16
 800ccfa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ccfc:	e056      	b.n	800cdac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd04:	d052      	beq.n	800cdac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800cd06:	f7f9 fd87 	bl	8006818 <HAL_GetTick>
 800cd0a:	4602      	mov	r2, r0
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	1ad3      	subs	r3, r2, r3
 800cd10:	68ba      	ldr	r2, [r7, #8]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d302      	bcc.n	800cd1c <I2C_IsErrorOccurred+0x54>
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d147      	bne.n	800cdac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	699b      	ldr	r3, [r3, #24]
 800cd36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd3e:	d12e      	bne.n	800cd9e <I2C_IsErrorOccurred+0xd6>
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd46:	d02a      	beq.n	800cd9e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800cd48:	7cfb      	ldrb	r3, [r7, #19]
 800cd4a:	2b20      	cmp	r3, #32
 800cd4c:	d027      	beq.n	800cd9e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	685a      	ldr	r2, [r3, #4]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cd5c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800cd5e:	f7f9 fd5b 	bl	8006818 <HAL_GetTick>
 800cd62:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd64:	e01b      	b.n	800cd9e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800cd66:	f7f9 fd57 	bl	8006818 <HAL_GetTick>
 800cd6a:	4602      	mov	r2, r0
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	2b19      	cmp	r3, #25
 800cd72:	d914      	bls.n	800cd9e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd78:	f043 0220 	orr.w	r2, r3, #32
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2220      	movs	r2, #32
 800cd84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800cd98:	2301      	movs	r3, #1
 800cd9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	699b      	ldr	r3, [r3, #24]
 800cda4:	f003 0320 	and.w	r3, r3, #32
 800cda8:	2b20      	cmp	r3, #32
 800cdaa:	d1dc      	bne.n	800cd66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	699b      	ldr	r3, [r3, #24]
 800cdb2:	f003 0320 	and.w	r3, r3, #32
 800cdb6:	2b20      	cmp	r3, #32
 800cdb8:	d003      	beq.n	800cdc2 <I2C_IsErrorOccurred+0xfa>
 800cdba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d09d      	beq.n	800ccfe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800cdc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d103      	bne.n	800cdd2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2220      	movs	r2, #32
 800cdd0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800cdd2:	6a3b      	ldr	r3, [r7, #32]
 800cdd4:	f043 0304 	orr.w	r3, r3, #4
 800cdd8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	699b      	ldr	r3, [r3, #24]
 800cde6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00b      	beq.n	800ce0a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800cdf2:	6a3b      	ldr	r3, [r7, #32]
 800cdf4:	f043 0301 	orr.w	r3, r3, #1
 800cdf8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce02:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ce04:	2301      	movs	r3, #1
 800ce06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d00b      	beq.n	800ce2c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	f043 0308 	orr.w	r3, r3, #8
 800ce1a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ce24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ce26:	2301      	movs	r3, #1
 800ce28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00b      	beq.n	800ce4e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ce36:	6a3b      	ldr	r3, [r7, #32]
 800ce38:	f043 0302 	orr.w	r3, r3, #2
 800ce3c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800ce4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d01c      	beq.n	800ce90 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ce56:	68f8      	ldr	r0, [r7, #12]
 800ce58:	f7ff fdbd 	bl	800c9d6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6859      	ldr	r1, [r3, #4]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	4b0d      	ldr	r3, [pc, #52]	; (800ce9c <I2C_IsErrorOccurred+0x1d4>)
 800ce68:	400b      	ands	r3, r1
 800ce6a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce70:	6a3b      	ldr	r3, [r7, #32]
 800ce72:	431a      	orrs	r2, r3
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2220      	movs	r2, #32
 800ce7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800ce90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3728      	adds	r7, #40	; 0x28
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}
 800ce9c:	fe00e800 	.word	0xfe00e800

0800cea0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b087      	sub	sp, #28
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	607b      	str	r3, [r7, #4]
 800ceaa:	460b      	mov	r3, r1
 800ceac:	817b      	strh	r3, [r7, #10]
 800ceae:	4613      	mov	r3, r2
 800ceb0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ceb2:	897b      	ldrh	r3, [r7, #10]
 800ceb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ceb8:	7a7b      	ldrb	r3, [r7, #9]
 800ceba:	041b      	lsls	r3, r3, #16
 800cebc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cec0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800cec6:	6a3b      	ldr	r3, [r7, #32]
 800cec8:	4313      	orrs	r3, r2
 800ceca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cece:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	685a      	ldr	r2, [r3, #4]
 800ced6:	6a3b      	ldr	r3, [r7, #32]
 800ced8:	0d5b      	lsrs	r3, r3, #21
 800ceda:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800cede:	4b08      	ldr	r3, [pc, #32]	; (800cf00 <I2C_TransferConfig+0x60>)
 800cee0:	430b      	orrs	r3, r1
 800cee2:	43db      	mvns	r3, r3
 800cee4:	ea02 0103 	and.w	r1, r2, r3
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	697a      	ldr	r2, [r7, #20]
 800ceee:	430a      	orrs	r2, r1
 800cef0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800cef2:	bf00      	nop
 800cef4:	371c      	adds	r7, #28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefc:	4770      	bx	lr
 800cefe:	bf00      	nop
 800cf00:	03ff63ff 	.word	0x03ff63ff

0800cf04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b085      	sub	sp, #20
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800cf10:	2300      	movs	r3, #0
 800cf12:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800cf14:	887b      	ldrh	r3, [r7, #2]
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d00f      	beq.n	800cf3e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800cf24:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cf32:	2b28      	cmp	r3, #40	; 0x28
 800cf34:	d003      	beq.n	800cf3e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cf3c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800cf3e:	887b      	ldrh	r3, [r7, #2]
 800cf40:	f003 0302 	and.w	r3, r3, #2
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00f      	beq.n	800cf68 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800cf4e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800cf5c:	2b28      	cmp	r3, #40	; 0x28
 800cf5e:	d003      	beq.n	800cf68 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800cf66:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800cf68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	da03      	bge.n	800cf78 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800cf76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800cf78:	887b      	ldrh	r3, [r7, #2]
 800cf7a:	2b10      	cmp	r3, #16
 800cf7c:	d103      	bne.n	800cf86 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800cf84:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800cf86:	887b      	ldrh	r3, [r7, #2]
 800cf88:	2b20      	cmp	r3, #32
 800cf8a:	d103      	bne.n	800cf94 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f043 0320 	orr.w	r3, r3, #32
 800cf92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800cf94:	887b      	ldrh	r3, [r7, #2]
 800cf96:	2b40      	cmp	r3, #64	; 0x40
 800cf98:	d103      	bne.n	800cfa2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfa0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	6819      	ldr	r1, [r3, #0]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	43da      	mvns	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	400a      	ands	r2, r1
 800cfb2:	601a      	str	r2, [r3, #0]
}
 800cfb4:	bf00      	nop
 800cfb6:	3714      	adds	r7, #20
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	2b20      	cmp	r3, #32
 800cfd4:	d138      	bne.n	800d048 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d101      	bne.n	800cfe4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800cfe0:	2302      	movs	r3, #2
 800cfe2:	e032      	b.n	800d04a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2224      	movs	r2, #36	; 0x24
 800cff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f022 0201 	bic.w	r2, r2, #1
 800d002:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d012:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6819      	ldr	r1, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	430a      	orrs	r2, r1
 800d022:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	f042 0201 	orr.w	r2, r2, #1
 800d032:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2220      	movs	r2, #32
 800d038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	e000      	b.n	800d04a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d048:	2302      	movs	r3, #2
  }
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr

0800d056 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d056:	b480      	push	{r7}
 800d058:	b085      	sub	sp, #20
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
 800d05e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d066:	b2db      	uxtb	r3, r3
 800d068:	2b20      	cmp	r3, #32
 800d06a:	d139      	bne.n	800d0e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d072:	2b01      	cmp	r3, #1
 800d074:	d101      	bne.n	800d07a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d076:	2302      	movs	r3, #2
 800d078:	e033      	b.n	800d0e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2224      	movs	r2, #36	; 0x24
 800d086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f022 0201 	bic.w	r2, r2, #1
 800d098:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d0a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	021b      	lsls	r3, r3, #8
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f042 0201 	orr.w	r2, r2, #1
 800d0ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2220      	movs	r2, #32
 800d0d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	e000      	b.n	800d0e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d0e0:	2302      	movs	r3, #2
  }
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3714      	adds	r7, #20
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ec:	4770      	bx	lr
	...

0800d0f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d0f8:	4b19      	ldr	r3, [pc, #100]	; (800d160 <HAL_PWREx_ConfigSupply+0x70>)
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	f003 0304 	and.w	r3, r3, #4
 800d100:	2b04      	cmp	r3, #4
 800d102:	d00a      	beq.n	800d11a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d104:	4b16      	ldr	r3, [pc, #88]	; (800d160 <HAL_PWREx_ConfigSupply+0x70>)
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	f003 0307 	and.w	r3, r3, #7
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	429a      	cmp	r2, r3
 800d110:	d001      	beq.n	800d116 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e01f      	b.n	800d156 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	e01d      	b.n	800d156 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d11a:	4b11      	ldr	r3, [pc, #68]	; (800d160 <HAL_PWREx_ConfigSupply+0x70>)
 800d11c:	68db      	ldr	r3, [r3, #12]
 800d11e:	f023 0207 	bic.w	r2, r3, #7
 800d122:	490f      	ldr	r1, [pc, #60]	; (800d160 <HAL_PWREx_ConfigSupply+0x70>)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	4313      	orrs	r3, r2
 800d128:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d12a:	f7f9 fb75 	bl	8006818 <HAL_GetTick>
 800d12e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d130:	e009      	b.n	800d146 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d132:	f7f9 fb71 	bl	8006818 <HAL_GetTick>
 800d136:	4602      	mov	r2, r0
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	1ad3      	subs	r3, r2, r3
 800d13c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d140:	d901      	bls.n	800d146 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d142:	2301      	movs	r3, #1
 800d144:	e007      	b.n	800d156 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d146:	4b06      	ldr	r3, [pc, #24]	; (800d160 <HAL_PWREx_ConfigSupply+0x70>)
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d14e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d152:	d1ee      	bne.n	800d132 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d154:	2300      	movs	r3, #0
}
 800d156:	4618      	mov	r0, r3
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}
 800d15e:	bf00      	nop
 800d160:	58024800 	.word	0x58024800

0800d164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08c      	sub	sp, #48	; 0x30
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d101      	bne.n	800d176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d172:	2301      	movs	r3, #1
 800d174:	e39d      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f003 0301 	and.w	r3, r3, #1
 800d17e:	2b00      	cmp	r3, #0
 800d180:	f000 8087 	beq.w	800d292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d184:	4b88      	ldr	r3, [pc, #544]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d186:	691b      	ldr	r3, [r3, #16]
 800d188:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d18c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d18e:	4b86      	ldr	r3, [pc, #536]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d192:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d196:	2b10      	cmp	r3, #16
 800d198:	d007      	beq.n	800d1aa <HAL_RCC_OscConfig+0x46>
 800d19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19c:	2b18      	cmp	r3, #24
 800d19e:	d110      	bne.n	800d1c2 <HAL_RCC_OscConfig+0x5e>
 800d1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a2:	f003 0303 	and.w	r3, r3, #3
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	d10b      	bne.n	800d1c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d1aa:	4b7f      	ldr	r3, [pc, #508]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d06c      	beq.n	800d290 <HAL_RCC_OscConfig+0x12c>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d168      	bne.n	800d290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e377      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1ca:	d106      	bne.n	800d1da <HAL_RCC_OscConfig+0x76>
 800d1cc:	4b76      	ldr	r3, [pc, #472]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a75      	ldr	r2, [pc, #468]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d1d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1d6:	6013      	str	r3, [r2, #0]
 800d1d8:	e02e      	b.n	800d238 <HAL_RCC_OscConfig+0xd4>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d10c      	bne.n	800d1fc <HAL_RCC_OscConfig+0x98>
 800d1e2:	4b71      	ldr	r3, [pc, #452]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	4a70      	ldr	r2, [pc, #448]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d1e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	4b6e      	ldr	r3, [pc, #440]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a6d      	ldr	r2, [pc, #436]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d1f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d1f8:	6013      	str	r3, [r2, #0]
 800d1fa:	e01d      	b.n	800d238 <HAL_RCC_OscConfig+0xd4>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	685b      	ldr	r3, [r3, #4]
 800d200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d204:	d10c      	bne.n	800d220 <HAL_RCC_OscConfig+0xbc>
 800d206:	4b68      	ldr	r3, [pc, #416]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	4a67      	ldr	r2, [pc, #412]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d20c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d210:	6013      	str	r3, [r2, #0]
 800d212:	4b65      	ldr	r3, [pc, #404]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a64      	ldr	r2, [pc, #400]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	e00b      	b.n	800d238 <HAL_RCC_OscConfig+0xd4>
 800d220:	4b61      	ldr	r3, [pc, #388]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a60      	ldr	r2, [pc, #384]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	4b5e      	ldr	r3, [pc, #376]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a5d      	ldr	r2, [pc, #372]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	685b      	ldr	r3, [r3, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d013      	beq.n	800d268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d240:	f7f9 faea 	bl	8006818 <HAL_GetTick>
 800d244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d246:	e008      	b.n	800d25a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d248:	f7f9 fae6 	bl	8006818 <HAL_GetTick>
 800d24c:	4602      	mov	r2, r0
 800d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d250:	1ad3      	subs	r3, r2, r3
 800d252:	2b64      	cmp	r3, #100	; 0x64
 800d254:	d901      	bls.n	800d25a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d256:	2303      	movs	r3, #3
 800d258:	e32b      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d25a:	4b53      	ldr	r3, [pc, #332]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d262:	2b00      	cmp	r3, #0
 800d264:	d0f0      	beq.n	800d248 <HAL_RCC_OscConfig+0xe4>
 800d266:	e014      	b.n	800d292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d268:	f7f9 fad6 	bl	8006818 <HAL_GetTick>
 800d26c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d26e:	e008      	b.n	800d282 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d270:	f7f9 fad2 	bl	8006818 <HAL_GetTick>
 800d274:	4602      	mov	r2, r0
 800d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	2b64      	cmp	r3, #100	; 0x64
 800d27c:	d901      	bls.n	800d282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d27e:	2303      	movs	r3, #3
 800d280:	e317      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d282:	4b49      	ldr	r3, [pc, #292]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1f0      	bne.n	800d270 <HAL_RCC_OscConfig+0x10c>
 800d28e:	e000      	b.n	800d292 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f003 0302 	and.w	r3, r3, #2
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f000 808c 	beq.w	800d3b8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d2a0:	4b41      	ldr	r3, [pc, #260]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d2a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d2aa:	4b3f      	ldr	r3, [pc, #252]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d2b0:	6a3b      	ldr	r3, [r7, #32]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d007      	beq.n	800d2c6 <HAL_RCC_OscConfig+0x162>
 800d2b6:	6a3b      	ldr	r3, [r7, #32]
 800d2b8:	2b18      	cmp	r3, #24
 800d2ba:	d137      	bne.n	800d32c <HAL_RCC_OscConfig+0x1c8>
 800d2bc:	69fb      	ldr	r3, [r7, #28]
 800d2be:	f003 0303 	and.w	r3, r3, #3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d132      	bne.n	800d32c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d2c6:	4b38      	ldr	r3, [pc, #224]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	f003 0304 	and.w	r3, r3, #4
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d005      	beq.n	800d2de <HAL_RCC_OscConfig+0x17a>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e2e9      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d2de:	4b32      	ldr	r3, [pc, #200]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f023 0219 	bic.w	r2, r3, #25
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	492f      	ldr	r1, [pc, #188]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d2f0:	f7f9 fa92 	bl	8006818 <HAL_GetTick>
 800d2f4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d2f6:	e008      	b.n	800d30a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d2f8:	f7f9 fa8e 	bl	8006818 <HAL_GetTick>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	2b02      	cmp	r3, #2
 800d304:	d901      	bls.n	800d30a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800d306:	2303      	movs	r3, #3
 800d308:	e2d3      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d30a:	4b27      	ldr	r3, [pc, #156]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f003 0304 	and.w	r3, r3, #4
 800d312:	2b00      	cmp	r3, #0
 800d314:	d0f0      	beq.n	800d2f8 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d316:	4b24      	ldr	r3, [pc, #144]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	691b      	ldr	r3, [r3, #16]
 800d322:	061b      	lsls	r3, r3, #24
 800d324:	4920      	ldr	r1, [pc, #128]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d326:	4313      	orrs	r3, r2
 800d328:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d32a:	e045      	b.n	800d3b8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d026      	beq.n	800d382 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d334:	4b1c      	ldr	r3, [pc, #112]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f023 0219 	bic.w	r2, r3, #25
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	68db      	ldr	r3, [r3, #12]
 800d340:	4919      	ldr	r1, [pc, #100]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d342:	4313      	orrs	r3, r2
 800d344:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d346:	f7f9 fa67 	bl	8006818 <HAL_GetTick>
 800d34a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d34c:	e008      	b.n	800d360 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d34e:	f7f9 fa63 	bl	8006818 <HAL_GetTick>
 800d352:	4602      	mov	r2, r0
 800d354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d356:	1ad3      	subs	r3, r2, r3
 800d358:	2b02      	cmp	r3, #2
 800d35a:	d901      	bls.n	800d360 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d35c:	2303      	movs	r3, #3
 800d35e:	e2a8      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d360:	4b11      	ldr	r3, [pc, #68]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 0304 	and.w	r3, r3, #4
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d0f0      	beq.n	800d34e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d36c:	4b0e      	ldr	r3, [pc, #56]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d36e:	685b      	ldr	r3, [r3, #4]
 800d370:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	061b      	lsls	r3, r3, #24
 800d37a:	490b      	ldr	r1, [pc, #44]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d37c:	4313      	orrs	r3, r2
 800d37e:	604b      	str	r3, [r1, #4]
 800d380:	e01a      	b.n	800d3b8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d382:	4b09      	ldr	r3, [pc, #36]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	4a08      	ldr	r2, [pc, #32]	; (800d3a8 <HAL_RCC_OscConfig+0x244>)
 800d388:	f023 0301 	bic.w	r3, r3, #1
 800d38c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d38e:	f7f9 fa43 	bl	8006818 <HAL_GetTick>
 800d392:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d394:	e00a      	b.n	800d3ac <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d396:	f7f9 fa3f 	bl	8006818 <HAL_GetTick>
 800d39a:	4602      	mov	r2, r0
 800d39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d39e:	1ad3      	subs	r3, r2, r3
 800d3a0:	2b02      	cmp	r3, #2
 800d3a2:	d903      	bls.n	800d3ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d3a4:	2303      	movs	r3, #3
 800d3a6:	e284      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
 800d3a8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d3ac:	4b96      	ldr	r3, [pc, #600]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f003 0304 	and.w	r3, r3, #4
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d1ee      	bne.n	800d396 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f003 0310 	and.w	r3, r3, #16
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d06a      	beq.n	800d49a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d3c4:	4b90      	ldr	r3, [pc, #576]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d3cc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d3ce:	4b8e      	ldr	r3, [pc, #568]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d3d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	2b08      	cmp	r3, #8
 800d3d8:	d007      	beq.n	800d3ea <HAL_RCC_OscConfig+0x286>
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	2b18      	cmp	r3, #24
 800d3de:	d11b      	bne.n	800d418 <HAL_RCC_OscConfig+0x2b4>
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	f003 0303 	and.w	r3, r3, #3
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d116      	bne.n	800d418 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d3ea:	4b87      	ldr	r3, [pc, #540]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d005      	beq.n	800d402 <HAL_RCC_OscConfig+0x29e>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	69db      	ldr	r3, [r3, #28]
 800d3fa:	2b80      	cmp	r3, #128	; 0x80
 800d3fc:	d001      	beq.n	800d402 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800d3fe:	2301      	movs	r3, #1
 800d400:	e257      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d402:	4b81      	ldr	r3, [pc, #516]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6a1b      	ldr	r3, [r3, #32]
 800d40e:	061b      	lsls	r3, r3, #24
 800d410:	497d      	ldr	r1, [pc, #500]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d412:	4313      	orrs	r3, r2
 800d414:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d416:	e040      	b.n	800d49a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	69db      	ldr	r3, [r3, #28]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d023      	beq.n	800d468 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d420:	4b79      	ldr	r3, [pc, #484]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a78      	ldr	r2, [pc, #480]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d42a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d42c:	f7f9 f9f4 	bl	8006818 <HAL_GetTick>
 800d430:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d432:	e008      	b.n	800d446 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d434:	f7f9 f9f0 	bl	8006818 <HAL_GetTick>
 800d438:	4602      	mov	r2, r0
 800d43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	2b02      	cmp	r3, #2
 800d440:	d901      	bls.n	800d446 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d442:	2303      	movs	r3, #3
 800d444:	e235      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d446:	4b70      	ldr	r3, [pc, #448]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d0f0      	beq.n	800d434 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d452:	4b6d      	ldr	r3, [pc, #436]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a1b      	ldr	r3, [r3, #32]
 800d45e:	061b      	lsls	r3, r3, #24
 800d460:	4969      	ldr	r1, [pc, #420]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d462:	4313      	orrs	r3, r2
 800d464:	60cb      	str	r3, [r1, #12]
 800d466:	e018      	b.n	800d49a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d468:	4b67      	ldr	r3, [pc, #412]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a66      	ldr	r2, [pc, #408]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d46e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d474:	f7f9 f9d0 	bl	8006818 <HAL_GetTick>
 800d478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d47a:	e008      	b.n	800d48e <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d47c:	f7f9 f9cc 	bl	8006818 <HAL_GetTick>
 800d480:	4602      	mov	r2, r0
 800d482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d484:	1ad3      	subs	r3, r2, r3
 800d486:	2b02      	cmp	r3, #2
 800d488:	d901      	bls.n	800d48e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800d48a:	2303      	movs	r3, #3
 800d48c:	e211      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d48e:	4b5e      	ldr	r3, [pc, #376]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1f0      	bne.n	800d47c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	f003 0308 	and.w	r3, r3, #8
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d036      	beq.n	800d514 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d019      	beq.n	800d4e2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d4ae:	4b56      	ldr	r3, [pc, #344]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d4b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4b2:	4a55      	ldr	r2, [pc, #340]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d4b4:	f043 0301 	orr.w	r3, r3, #1
 800d4b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4ba:	f7f9 f9ad 	bl	8006818 <HAL_GetTick>
 800d4be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d4c0:	e008      	b.n	800d4d4 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d4c2:	f7f9 f9a9 	bl	8006818 <HAL_GetTick>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	1ad3      	subs	r3, r2, r3
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	d901      	bls.n	800d4d4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d4d0:	2303      	movs	r3, #3
 800d4d2:	e1ee      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d4d4:	4b4c      	ldr	r3, [pc, #304]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d4d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4d8:	f003 0302 	and.w	r3, r3, #2
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d0f0      	beq.n	800d4c2 <HAL_RCC_OscConfig+0x35e>
 800d4e0:	e018      	b.n	800d514 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d4e2:	4b49      	ldr	r3, [pc, #292]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d4e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4e6:	4a48      	ldr	r2, [pc, #288]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d4e8:	f023 0301 	bic.w	r3, r3, #1
 800d4ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4ee:	f7f9 f993 	bl	8006818 <HAL_GetTick>
 800d4f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d4f4:	e008      	b.n	800d508 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d4f6:	f7f9 f98f 	bl	8006818 <HAL_GetTick>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	2b02      	cmp	r3, #2
 800d502:	d901      	bls.n	800d508 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d504:	2303      	movs	r3, #3
 800d506:	e1d4      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d508:	4b3f      	ldr	r3, [pc, #252]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d50a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d50c:	f003 0302 	and.w	r3, r3, #2
 800d510:	2b00      	cmp	r3, #0
 800d512:	d1f0      	bne.n	800d4f6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f003 0320 	and.w	r3, r3, #32
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d036      	beq.n	800d58e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	699b      	ldr	r3, [r3, #24]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d019      	beq.n	800d55c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d528:	4b37      	ldr	r3, [pc, #220]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	4a36      	ldr	r2, [pc, #216]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d52e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d532:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d534:	f7f9 f970 	bl	8006818 <HAL_GetTick>
 800d538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d53a:	e008      	b.n	800d54e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d53c:	f7f9 f96c 	bl	8006818 <HAL_GetTick>
 800d540:	4602      	mov	r2, r0
 800d542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d544:	1ad3      	subs	r3, r2, r3
 800d546:	2b02      	cmp	r3, #2
 800d548:	d901      	bls.n	800d54e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800d54a:	2303      	movs	r3, #3
 800d54c:	e1b1      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d54e:	4b2e      	ldr	r3, [pc, #184]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d556:	2b00      	cmp	r3, #0
 800d558:	d0f0      	beq.n	800d53c <HAL_RCC_OscConfig+0x3d8>
 800d55a:	e018      	b.n	800d58e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d55c:	4b2a      	ldr	r3, [pc, #168]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4a29      	ldr	r2, [pc, #164]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d566:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d568:	f7f9 f956 	bl	8006818 <HAL_GetTick>
 800d56c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d56e:	e008      	b.n	800d582 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d570:	f7f9 f952 	bl	8006818 <HAL_GetTick>
 800d574:	4602      	mov	r2, r0
 800d576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	2b02      	cmp	r3, #2
 800d57c:	d901      	bls.n	800d582 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800d57e:	2303      	movs	r3, #3
 800d580:	e197      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d582:	4b21      	ldr	r3, [pc, #132]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1f0      	bne.n	800d570 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f003 0304 	and.w	r3, r3, #4
 800d596:	2b00      	cmp	r3, #0
 800d598:	f000 8086 	beq.w	800d6a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d59c:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <HAL_RCC_OscConfig+0x4a8>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	4a1a      	ldr	r2, [pc, #104]	; (800d60c <HAL_RCC_OscConfig+0x4a8>)
 800d5a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d5a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d5a8:	f7f9 f936 	bl	8006818 <HAL_GetTick>
 800d5ac:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d5ae:	e008      	b.n	800d5c2 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d5b0:	f7f9 f932 	bl	8006818 <HAL_GetTick>
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	2b64      	cmp	r3, #100	; 0x64
 800d5bc:	d901      	bls.n	800d5c2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800d5be:	2303      	movs	r3, #3
 800d5c0:	e177      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d5c2:	4b12      	ldr	r3, [pc, #72]	; (800d60c <HAL_RCC_OscConfig+0x4a8>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d0f0      	beq.n	800d5b0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	689b      	ldr	r3, [r3, #8]
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d106      	bne.n	800d5e4 <HAL_RCC_OscConfig+0x480>
 800d5d6:	4b0c      	ldr	r3, [pc, #48]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5da:	4a0b      	ldr	r2, [pc, #44]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d5dc:	f043 0301 	orr.w	r3, r3, #1
 800d5e0:	6713      	str	r3, [r2, #112]	; 0x70
 800d5e2:	e032      	b.n	800d64a <HAL_RCC_OscConfig+0x4e6>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	689b      	ldr	r3, [r3, #8]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d111      	bne.n	800d610 <HAL_RCC_OscConfig+0x4ac>
 800d5ec:	4b06      	ldr	r3, [pc, #24]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d5ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5f0:	4a05      	ldr	r2, [pc, #20]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d5f2:	f023 0301 	bic.w	r3, r3, #1
 800d5f6:	6713      	str	r3, [r2, #112]	; 0x70
 800d5f8:	4b03      	ldr	r3, [pc, #12]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d5fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5fc:	4a02      	ldr	r2, [pc, #8]	; (800d608 <HAL_RCC_OscConfig+0x4a4>)
 800d5fe:	f023 0304 	bic.w	r3, r3, #4
 800d602:	6713      	str	r3, [r2, #112]	; 0x70
 800d604:	e021      	b.n	800d64a <HAL_RCC_OscConfig+0x4e6>
 800d606:	bf00      	nop
 800d608:	58024400 	.word	0x58024400
 800d60c:	58024800 	.word	0x58024800
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	2b05      	cmp	r3, #5
 800d616:	d10c      	bne.n	800d632 <HAL_RCC_OscConfig+0x4ce>
 800d618:	4b83      	ldr	r3, [pc, #524]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d61c:	4a82      	ldr	r2, [pc, #520]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d61e:	f043 0304 	orr.w	r3, r3, #4
 800d622:	6713      	str	r3, [r2, #112]	; 0x70
 800d624:	4b80      	ldr	r3, [pc, #512]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d628:	4a7f      	ldr	r2, [pc, #508]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d62a:	f043 0301 	orr.w	r3, r3, #1
 800d62e:	6713      	str	r3, [r2, #112]	; 0x70
 800d630:	e00b      	b.n	800d64a <HAL_RCC_OscConfig+0x4e6>
 800d632:	4b7d      	ldr	r3, [pc, #500]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d636:	4a7c      	ldr	r2, [pc, #496]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d638:	f023 0301 	bic.w	r3, r3, #1
 800d63c:	6713      	str	r3, [r2, #112]	; 0x70
 800d63e:	4b7a      	ldr	r3, [pc, #488]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d642:	4a79      	ldr	r2, [pc, #484]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d644:	f023 0304 	bic.w	r3, r3, #4
 800d648:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d015      	beq.n	800d67e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d652:	f7f9 f8e1 	bl	8006818 <HAL_GetTick>
 800d656:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d658:	e00a      	b.n	800d670 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d65a:	f7f9 f8dd 	bl	8006818 <HAL_GetTick>
 800d65e:	4602      	mov	r2, r0
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	f241 3288 	movw	r2, #5000	; 0x1388
 800d668:	4293      	cmp	r3, r2
 800d66a:	d901      	bls.n	800d670 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800d66c:	2303      	movs	r3, #3
 800d66e:	e120      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d670:	4b6d      	ldr	r3, [pc, #436]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d674:	f003 0302 	and.w	r3, r3, #2
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d0ee      	beq.n	800d65a <HAL_RCC_OscConfig+0x4f6>
 800d67c:	e014      	b.n	800d6a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d67e:	f7f9 f8cb 	bl	8006818 <HAL_GetTick>
 800d682:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d684:	e00a      	b.n	800d69c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d686:	f7f9 f8c7 	bl	8006818 <HAL_GetTick>
 800d68a:	4602      	mov	r2, r0
 800d68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68e:	1ad3      	subs	r3, r2, r3
 800d690:	f241 3288 	movw	r2, #5000	; 0x1388
 800d694:	4293      	cmp	r3, r2
 800d696:	d901      	bls.n	800d69c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d698:	2303      	movs	r3, #3
 800d69a:	e10a      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d69c:	4b62      	ldr	r3, [pc, #392]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6a0:	f003 0302 	and.w	r3, r3, #2
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d1ee      	bne.n	800d686 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f000 80ff 	beq.w	800d8b0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d6b2:	4b5d      	ldr	r3, [pc, #372]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d6b4:	691b      	ldr	r3, [r3, #16]
 800d6b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6ba:	2b18      	cmp	r3, #24
 800d6bc:	f000 80ba 	beq.w	800d834 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	f040 8095 	bne.w	800d7f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d6ca:	4b57      	ldr	r3, [pc, #348]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a56      	ldr	r2, [pc, #344]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d6d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d6d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6d6:	f7f9 f89f 	bl	8006818 <HAL_GetTick>
 800d6da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d6dc:	e008      	b.n	800d6f0 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d6de:	f7f9 f89b 	bl	8006818 <HAL_GetTick>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d901      	bls.n	800d6f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d6ec:	2303      	movs	r3, #3
 800d6ee:	e0e0      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d6f0:	4b4d      	ldr	r3, [pc, #308]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1f0      	bne.n	800d6de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d6fc:	4b4a      	ldr	r3, [pc, #296]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d6fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d700:	4b4a      	ldr	r3, [pc, #296]	; (800d82c <HAL_RCC_OscConfig+0x6c8>)
 800d702:	4013      	ands	r3, r2
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d70c:	0112      	lsls	r2, r2, #4
 800d70e:	430a      	orrs	r2, r1
 800d710:	4945      	ldr	r1, [pc, #276]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d712:	4313      	orrs	r3, r2
 800d714:	628b      	str	r3, [r1, #40]	; 0x28
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d71a:	3b01      	subs	r3, #1
 800d71c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d724:	3b01      	subs	r3, #1
 800d726:	025b      	lsls	r3, r3, #9
 800d728:	b29b      	uxth	r3, r3
 800d72a:	431a      	orrs	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d730:	3b01      	subs	r3, #1
 800d732:	041b      	lsls	r3, r3, #16
 800d734:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d738:	431a      	orrs	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d73e:	3b01      	subs	r3, #1
 800d740:	061b      	lsls	r3, r3, #24
 800d742:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d746:	4938      	ldr	r1, [pc, #224]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d748:	4313      	orrs	r3, r2
 800d74a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800d74c:	4b36      	ldr	r3, [pc, #216]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d750:	4a35      	ldr	r2, [pc, #212]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d752:	f023 0301 	bic.w	r3, r3, #1
 800d756:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d758:	4b33      	ldr	r3, [pc, #204]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d75a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d75c:	4b34      	ldr	r3, [pc, #208]	; (800d830 <HAL_RCC_OscConfig+0x6cc>)
 800d75e:	4013      	ands	r3, r2
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d764:	00d2      	lsls	r2, r2, #3
 800d766:	4930      	ldr	r1, [pc, #192]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d768:	4313      	orrs	r3, r2
 800d76a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d76c:	4b2e      	ldr	r3, [pc, #184]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d770:	f023 020c 	bic.w	r2, r3, #12
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d778:	492b      	ldr	r1, [pc, #172]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d77a:	4313      	orrs	r3, r2
 800d77c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d77e:	4b2a      	ldr	r3, [pc, #168]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d782:	f023 0202 	bic.w	r2, r3, #2
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d78a:	4927      	ldr	r1, [pc, #156]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d78c:	4313      	orrs	r3, r2
 800d78e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d790:	4b25      	ldr	r3, [pc, #148]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d794:	4a24      	ldr	r2, [pc, #144]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d79a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d79c:	4b22      	ldr	r3, [pc, #136]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a0:	4a21      	ldr	r2, [pc, #132]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d7a8:	4b1f      	ldr	r3, [pc, #124]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	4a1e      	ldr	r2, [pc, #120]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d7b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800d7b4:	4b1c      	ldr	r3, [pc, #112]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b8:	4a1b      	ldr	r2, [pc, #108]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7ba:	f043 0301 	orr.w	r3, r3, #1
 800d7be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d7c0:	4b19      	ldr	r3, [pc, #100]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a18      	ldr	r2, [pc, #96]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d7ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7cc:	f7f9 f824 	bl	8006818 <HAL_GetTick>
 800d7d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d7d2:	e008      	b.n	800d7e6 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d7d4:	f7f9 f820 	bl	8006818 <HAL_GetTick>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7dc:	1ad3      	subs	r3, r2, r3
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	d901      	bls.n	800d7e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d7e2:	2303      	movs	r3, #3
 800d7e4:	e065      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d7e6:	4b10      	ldr	r3, [pc, #64]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d0f0      	beq.n	800d7d4 <HAL_RCC_OscConfig+0x670>
 800d7f2:	e05d      	b.n	800d8b0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d7f4:	4b0c      	ldr	r3, [pc, #48]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a0b      	ldr	r2, [pc, #44]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d7fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d7fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d800:	f7f9 f80a 	bl	8006818 <HAL_GetTick>
 800d804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d806:	e008      	b.n	800d81a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d808:	f7f9 f806 	bl	8006818 <HAL_GetTick>
 800d80c:	4602      	mov	r2, r0
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	2b02      	cmp	r3, #2
 800d814:	d901      	bls.n	800d81a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d816:	2303      	movs	r3, #3
 800d818:	e04b      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d81a:	4b03      	ldr	r3, [pc, #12]	; (800d828 <HAL_RCC_OscConfig+0x6c4>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1f0      	bne.n	800d808 <HAL_RCC_OscConfig+0x6a4>
 800d826:	e043      	b.n	800d8b0 <HAL_RCC_OscConfig+0x74c>
 800d828:	58024400 	.word	0x58024400
 800d82c:	fffffc0c 	.word	0xfffffc0c
 800d830:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d834:	4b21      	ldr	r3, [pc, #132]	; (800d8bc <HAL_RCC_OscConfig+0x758>)
 800d836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d838:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d83a:	4b20      	ldr	r3, [pc, #128]	; (800d8bc <HAL_RCC_OscConfig+0x758>)
 800d83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d83e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d844:	2b01      	cmp	r3, #1
 800d846:	d031      	beq.n	800d8ac <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	f003 0203 	and.w	r2, r3, #3
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d852:	429a      	cmp	r2, r3
 800d854:	d12a      	bne.n	800d8ac <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	091b      	lsrs	r3, r3, #4
 800d85a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d862:	429a      	cmp	r2, r3
 800d864:	d122      	bne.n	800d8ac <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d870:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d872:	429a      	cmp	r2, r3
 800d874:	d11a      	bne.n	800d8ac <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	0a5b      	lsrs	r3, r3, #9
 800d87a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d882:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d884:	429a      	cmp	r2, r3
 800d886:	d111      	bne.n	800d8ac <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	0c1b      	lsrs	r3, r3, #16
 800d88c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d894:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d896:	429a      	cmp	r2, r3
 800d898:	d108      	bne.n	800d8ac <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	0e1b      	lsrs	r3, r3, #24
 800d89e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d001      	beq.n	800d8b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e000      	b.n	800d8b2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3730      	adds	r7, #48	; 0x30
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	58024400 	.word	0x58024400

0800d8c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b086      	sub	sp, #24
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d101      	bne.n	800d8d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d8d0:	2301      	movs	r3, #1
 800d8d2:	e19c      	b.n	800dc0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d8d4:	4b8a      	ldr	r3, [pc, #552]	; (800db00 <HAL_RCC_ClockConfig+0x240>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f003 030f 	and.w	r3, r3, #15
 800d8dc:	683a      	ldr	r2, [r7, #0]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d910      	bls.n	800d904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d8e2:	4b87      	ldr	r3, [pc, #540]	; (800db00 <HAL_RCC_ClockConfig+0x240>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f023 020f 	bic.w	r2, r3, #15
 800d8ea:	4985      	ldr	r1, [pc, #532]	; (800db00 <HAL_RCC_ClockConfig+0x240>)
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d8f2:	4b83      	ldr	r3, [pc, #524]	; (800db00 <HAL_RCC_ClockConfig+0x240>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f003 030f 	and.w	r3, r3, #15
 800d8fa:	683a      	ldr	r2, [r7, #0]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d001      	beq.n	800d904 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	e184      	b.n	800dc0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f003 0304 	and.w	r3, r3, #4
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d010      	beq.n	800d932 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	691a      	ldr	r2, [r3, #16]
 800d914:	4b7b      	ldr	r3, [pc, #492]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d908      	bls.n	800d932 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d920:	4b78      	ldr	r3, [pc, #480]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d922:	699b      	ldr	r3, [r3, #24]
 800d924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	691b      	ldr	r3, [r3, #16]
 800d92c:	4975      	ldr	r1, [pc, #468]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d92e:	4313      	orrs	r3, r2
 800d930:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 0308 	and.w	r3, r3, #8
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d010      	beq.n	800d960 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	695a      	ldr	r2, [r3, #20]
 800d942:	4b70      	ldr	r3, [pc, #448]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d944:	69db      	ldr	r3, [r3, #28]
 800d946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d908      	bls.n	800d960 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d94e:	4b6d      	ldr	r3, [pc, #436]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d950:	69db      	ldr	r3, [r3, #28]
 800d952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	695b      	ldr	r3, [r3, #20]
 800d95a:	496a      	ldr	r1, [pc, #424]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d95c:	4313      	orrs	r3, r2
 800d95e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f003 0310 	and.w	r3, r3, #16
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d010      	beq.n	800d98e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	699a      	ldr	r2, [r3, #24]
 800d970:	4b64      	ldr	r3, [pc, #400]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d972:	69db      	ldr	r3, [r3, #28]
 800d974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d978:	429a      	cmp	r2, r3
 800d97a:	d908      	bls.n	800d98e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d97c:	4b61      	ldr	r3, [pc, #388]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d97e:	69db      	ldr	r3, [r3, #28]
 800d980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	495e      	ldr	r1, [pc, #376]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d98a:	4313      	orrs	r3, r2
 800d98c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f003 0320 	and.w	r3, r3, #32
 800d996:	2b00      	cmp	r3, #0
 800d998:	d010      	beq.n	800d9bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	69da      	ldr	r2, [r3, #28]
 800d99e:	4b59      	ldr	r3, [pc, #356]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d908      	bls.n	800d9bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d9aa:	4b56      	ldr	r3, [pc, #344]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	69db      	ldr	r3, [r3, #28]
 800d9b6:	4953      	ldr	r1, [pc, #332]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f003 0302 	and.w	r3, r3, #2
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d010      	beq.n	800d9ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68da      	ldr	r2, [r3, #12]
 800d9cc:	4b4d      	ldr	r3, [pc, #308]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d9ce:	699b      	ldr	r3, [r3, #24]
 800d9d0:	f003 030f 	and.w	r3, r3, #15
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d908      	bls.n	800d9ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9d8:	4b4a      	ldr	r3, [pc, #296]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	f023 020f 	bic.w	r2, r3, #15
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	4947      	ldr	r1, [pc, #284]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f003 0301 	and.w	r3, r3, #1
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d055      	beq.n	800daa2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d9f6:	4b43      	ldr	r3, [pc, #268]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	4940      	ldr	r1, [pc, #256]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800da04:	4313      	orrs	r3, r2
 800da06:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	2b02      	cmp	r3, #2
 800da0e:	d107      	bne.n	800da20 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800da10:	4b3c      	ldr	r3, [pc, #240]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d121      	bne.n	800da60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800da1c:	2301      	movs	r3, #1
 800da1e:	e0f6      	b.n	800dc0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685b      	ldr	r3, [r3, #4]
 800da24:	2b03      	cmp	r3, #3
 800da26:	d107      	bne.n	800da38 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800da28:	4b36      	ldr	r3, [pc, #216]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da30:	2b00      	cmp	r3, #0
 800da32:	d115      	bne.n	800da60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800da34:	2301      	movs	r3, #1
 800da36:	e0ea      	b.n	800dc0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	685b      	ldr	r3, [r3, #4]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d107      	bne.n	800da50 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800da40:	4b30      	ldr	r3, [pc, #192]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d109      	bne.n	800da60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800da4c:	2301      	movs	r3, #1
 800da4e:	e0de      	b.n	800dc0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800da50:	4b2c      	ldr	r3, [pc, #176]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f003 0304 	and.w	r3, r3, #4
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d101      	bne.n	800da60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800da5c:	2301      	movs	r3, #1
 800da5e:	e0d6      	b.n	800dc0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800da60:	4b28      	ldr	r3, [pc, #160]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800da62:	691b      	ldr	r3, [r3, #16]
 800da64:	f023 0207 	bic.w	r2, r3, #7
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	4925      	ldr	r1, [pc, #148]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800da6e:	4313      	orrs	r3, r2
 800da70:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da72:	f7f8 fed1 	bl	8006818 <HAL_GetTick>
 800da76:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da78:	e00a      	b.n	800da90 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da7a:	f7f8 fecd 	bl	8006818 <HAL_GetTick>
 800da7e:	4602      	mov	r2, r0
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	f241 3288 	movw	r2, #5000	; 0x1388
 800da88:	4293      	cmp	r3, r2
 800da8a:	d901      	bls.n	800da90 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800da8c:	2303      	movs	r3, #3
 800da8e:	e0be      	b.n	800dc0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800da90:	4b1c      	ldr	r3, [pc, #112]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800da92:	691b      	ldr	r3, [r3, #16]
 800da94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	00db      	lsls	r3, r3, #3
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d1eb      	bne.n	800da7a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f003 0302 	and.w	r3, r3, #2
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d010      	beq.n	800dad0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	68da      	ldr	r2, [r3, #12]
 800dab2:	4b14      	ldr	r3, [pc, #80]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800dab4:	699b      	ldr	r3, [r3, #24]
 800dab6:	f003 030f 	and.w	r3, r3, #15
 800daba:	429a      	cmp	r2, r3
 800dabc:	d208      	bcs.n	800dad0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dabe:	4b11      	ldr	r3, [pc, #68]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	f023 020f 	bic.w	r2, r3, #15
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	68db      	ldr	r3, [r3, #12]
 800daca:	490e      	ldr	r1, [pc, #56]	; (800db04 <HAL_RCC_ClockConfig+0x244>)
 800dacc:	4313      	orrs	r3, r2
 800dace:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dad0:	4b0b      	ldr	r3, [pc, #44]	; (800db00 <HAL_RCC_ClockConfig+0x240>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f003 030f 	and.w	r3, r3, #15
 800dad8:	683a      	ldr	r2, [r7, #0]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d214      	bcs.n	800db08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dade:	4b08      	ldr	r3, [pc, #32]	; (800db00 <HAL_RCC_ClockConfig+0x240>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f023 020f 	bic.w	r2, r3, #15
 800dae6:	4906      	ldr	r1, [pc, #24]	; (800db00 <HAL_RCC_ClockConfig+0x240>)
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	4313      	orrs	r3, r2
 800daec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800daee:	4b04      	ldr	r3, [pc, #16]	; (800db00 <HAL_RCC_ClockConfig+0x240>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f003 030f 	and.w	r3, r3, #15
 800daf6:	683a      	ldr	r2, [r7, #0]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d005      	beq.n	800db08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	e086      	b.n	800dc0e <HAL_RCC_ClockConfig+0x34e>
 800db00:	52002000 	.word	0x52002000
 800db04:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f003 0304 	and.w	r3, r3, #4
 800db10:	2b00      	cmp	r3, #0
 800db12:	d010      	beq.n	800db36 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	691a      	ldr	r2, [r3, #16]
 800db18:	4b3f      	ldr	r3, [pc, #252]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800db1a:	699b      	ldr	r3, [r3, #24]
 800db1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800db20:	429a      	cmp	r2, r3
 800db22:	d208      	bcs.n	800db36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800db24:	4b3c      	ldr	r3, [pc, #240]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	691b      	ldr	r3, [r3, #16]
 800db30:	4939      	ldr	r1, [pc, #228]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800db32:	4313      	orrs	r3, r2
 800db34:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f003 0308 	and.w	r3, r3, #8
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d010      	beq.n	800db64 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	695a      	ldr	r2, [r3, #20]
 800db46:	4b34      	ldr	r3, [pc, #208]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800db48:	69db      	ldr	r3, [r3, #28]
 800db4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800db4e:	429a      	cmp	r2, r3
 800db50:	d208      	bcs.n	800db64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800db52:	4b31      	ldr	r3, [pc, #196]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800db54:	69db      	ldr	r3, [r3, #28]
 800db56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	695b      	ldr	r3, [r3, #20]
 800db5e:	492e      	ldr	r1, [pc, #184]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800db60:	4313      	orrs	r3, r2
 800db62:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f003 0310 	and.w	r3, r3, #16
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d010      	beq.n	800db92 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	699a      	ldr	r2, [r3, #24]
 800db74:	4b28      	ldr	r3, [pc, #160]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800db76:	69db      	ldr	r3, [r3, #28]
 800db78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d208      	bcs.n	800db92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800db80:	4b25      	ldr	r3, [pc, #148]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800db82:	69db      	ldr	r3, [r3, #28]
 800db84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	699b      	ldr	r3, [r3, #24]
 800db8c:	4922      	ldr	r1, [pc, #136]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800db8e:	4313      	orrs	r3, r2
 800db90:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	f003 0320 	and.w	r3, r3, #32
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d010      	beq.n	800dbc0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	69da      	ldr	r2, [r3, #28]
 800dba2:	4b1d      	ldr	r3, [pc, #116]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800dba4:	6a1b      	ldr	r3, [r3, #32]
 800dba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dbaa:	429a      	cmp	r2, r3
 800dbac:	d208      	bcs.n	800dbc0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800dbae:	4b1a      	ldr	r3, [pc, #104]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800dbb0:	6a1b      	ldr	r3, [r3, #32]
 800dbb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	69db      	ldr	r3, [r3, #28]
 800dbba:	4917      	ldr	r1, [pc, #92]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dbc0:	f000 f834 	bl	800dc2c <HAL_RCC_GetSysClockFreq>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	4b14      	ldr	r3, [pc, #80]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800dbc8:	699b      	ldr	r3, [r3, #24]
 800dbca:	0a1b      	lsrs	r3, r3, #8
 800dbcc:	f003 030f 	and.w	r3, r3, #15
 800dbd0:	4912      	ldr	r1, [pc, #72]	; (800dc1c <HAL_RCC_ClockConfig+0x35c>)
 800dbd2:	5ccb      	ldrb	r3, [r1, r3]
 800dbd4:	f003 031f 	and.w	r3, r3, #31
 800dbd8:	fa22 f303 	lsr.w	r3, r2, r3
 800dbdc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dbde:	4b0e      	ldr	r3, [pc, #56]	; (800dc18 <HAL_RCC_ClockConfig+0x358>)
 800dbe0:	699b      	ldr	r3, [r3, #24]
 800dbe2:	f003 030f 	and.w	r3, r3, #15
 800dbe6:	4a0d      	ldr	r2, [pc, #52]	; (800dc1c <HAL_RCC_ClockConfig+0x35c>)
 800dbe8:	5cd3      	ldrb	r3, [r2, r3]
 800dbea:	f003 031f 	and.w	r3, r3, #31
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	fa22 f303 	lsr.w	r3, r2, r3
 800dbf4:	4a0a      	ldr	r2, [pc, #40]	; (800dc20 <HAL_RCC_ClockConfig+0x360>)
 800dbf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dbf8:	4a0a      	ldr	r2, [pc, #40]	; (800dc24 <HAL_RCC_ClockConfig+0x364>)
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800dbfe:	4b0a      	ldr	r3, [pc, #40]	; (800dc28 <HAL_RCC_ClockConfig+0x368>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7f8 fdbe 	bl	8006784 <HAL_InitTick>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dc0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3718      	adds	r7, #24
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	58024400 	.word	0x58024400
 800dc1c:	08016738 	.word	0x08016738
 800dc20:	20000024 	.word	0x20000024
 800dc24:	20000020 	.word	0x20000020
 800dc28:	20000028 	.word	0x20000028

0800dc2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b089      	sub	sp, #36	; 0x24
 800dc30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dc32:	4bb3      	ldr	r3, [pc, #716]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc3a:	2b18      	cmp	r3, #24
 800dc3c:	f200 8155 	bhi.w	800deea <HAL_RCC_GetSysClockFreq+0x2be>
 800dc40:	a201      	add	r2, pc, #4	; (adr r2, 800dc48 <HAL_RCC_GetSysClockFreq+0x1c>)
 800dc42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc46:	bf00      	nop
 800dc48:	0800dcad 	.word	0x0800dcad
 800dc4c:	0800deeb 	.word	0x0800deeb
 800dc50:	0800deeb 	.word	0x0800deeb
 800dc54:	0800deeb 	.word	0x0800deeb
 800dc58:	0800deeb 	.word	0x0800deeb
 800dc5c:	0800deeb 	.word	0x0800deeb
 800dc60:	0800deeb 	.word	0x0800deeb
 800dc64:	0800deeb 	.word	0x0800deeb
 800dc68:	0800dcd3 	.word	0x0800dcd3
 800dc6c:	0800deeb 	.word	0x0800deeb
 800dc70:	0800deeb 	.word	0x0800deeb
 800dc74:	0800deeb 	.word	0x0800deeb
 800dc78:	0800deeb 	.word	0x0800deeb
 800dc7c:	0800deeb 	.word	0x0800deeb
 800dc80:	0800deeb 	.word	0x0800deeb
 800dc84:	0800deeb 	.word	0x0800deeb
 800dc88:	0800dcd9 	.word	0x0800dcd9
 800dc8c:	0800deeb 	.word	0x0800deeb
 800dc90:	0800deeb 	.word	0x0800deeb
 800dc94:	0800deeb 	.word	0x0800deeb
 800dc98:	0800deeb 	.word	0x0800deeb
 800dc9c:	0800deeb 	.word	0x0800deeb
 800dca0:	0800deeb 	.word	0x0800deeb
 800dca4:	0800deeb 	.word	0x0800deeb
 800dca8:	0800dcdf 	.word	0x0800dcdf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcac:	4b94      	ldr	r3, [pc, #592]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 0320 	and.w	r3, r3, #32
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d009      	beq.n	800dccc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dcb8:	4b91      	ldr	r3, [pc, #580]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	08db      	lsrs	r3, r3, #3
 800dcbe:	f003 0303 	and.w	r3, r3, #3
 800dcc2:	4a90      	ldr	r2, [pc, #576]	; (800df04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dcc4:	fa22 f303 	lsr.w	r3, r2, r3
 800dcc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800dcca:	e111      	b.n	800def0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800dccc:	4b8d      	ldr	r3, [pc, #564]	; (800df04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dcce:	61bb      	str	r3, [r7, #24]
    break;
 800dcd0:	e10e      	b.n	800def0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800dcd2:	4b8d      	ldr	r3, [pc, #564]	; (800df08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dcd4:	61bb      	str	r3, [r7, #24]
    break;
 800dcd6:	e10b      	b.n	800def0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800dcd8:	4b8c      	ldr	r3, [pc, #560]	; (800df0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800dcda:	61bb      	str	r3, [r7, #24]
    break;
 800dcdc:	e108      	b.n	800def0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dcde:	4b88      	ldr	r3, [pc, #544]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dce2:	f003 0303 	and.w	r3, r3, #3
 800dce6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800dce8:	4b85      	ldr	r3, [pc, #532]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcec:	091b      	lsrs	r3, r3, #4
 800dcee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dcf2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800dcf4:	4b82      	ldr	r3, [pc, #520]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800dcfe:	4b80      	ldr	r3, [pc, #512]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd02:	08db      	lsrs	r3, r3, #3
 800dd04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	fb02 f303 	mul.w	r3, r2, r3
 800dd0e:	ee07 3a90 	vmov	s15, r3
 800dd12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd16:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	f000 80e1 	beq.w	800dee4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	2b02      	cmp	r3, #2
 800dd26:	f000 8083 	beq.w	800de30 <HAL_RCC_GetSysClockFreq+0x204>
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	f200 80a1 	bhi.w	800de74 <HAL_RCC_GetSysClockFreq+0x248>
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d003      	beq.n	800dd40 <HAL_RCC_GetSysClockFreq+0x114>
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d056      	beq.n	800ddec <HAL_RCC_GetSysClockFreq+0x1c0>
 800dd3e:	e099      	b.n	800de74 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd40:	4b6f      	ldr	r3, [pc, #444]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f003 0320 	and.w	r3, r3, #32
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d02d      	beq.n	800dda8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dd4c:	4b6c      	ldr	r3, [pc, #432]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	08db      	lsrs	r3, r3, #3
 800dd52:	f003 0303 	and.w	r3, r3, #3
 800dd56:	4a6b      	ldr	r2, [pc, #428]	; (800df04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dd58:	fa22 f303 	lsr.w	r3, r2, r3
 800dd5c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	ee07 3a90 	vmov	s15, r3
 800dd64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	ee07 3a90 	vmov	s15, r3
 800dd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd76:	4b62      	ldr	r3, [pc, #392]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd7e:	ee07 3a90 	vmov	s15, r3
 800dd82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd86:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800df10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dda2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800dda6:	e087      	b.n	800deb8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	ee07 3a90 	vmov	s15, r3
 800ddae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddb2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800df14 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ddb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddba:	4b51      	ldr	r3, [pc, #324]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddc2:	ee07 3a90 	vmov	s15, r3
 800ddc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddca:	ed97 6a02 	vldr	s12, [r7, #8]
 800ddce:	eddf 5a50 	vldr	s11, [pc, #320]	; 800df10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ddd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ddd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ddda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ddde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dde6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ddea:	e065      	b.n	800deb8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ddec:	693b      	ldr	r3, [r7, #16]
 800ddee:	ee07 3a90 	vmov	s15, r3
 800ddf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddf6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800df18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ddfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddfe:	4b40      	ldr	r3, [pc, #256]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de06:	ee07 3a90 	vmov	s15, r3
 800de0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800de12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800df10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800de16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de2e:	e043      	b.n	800deb8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	ee07 3a90 	vmov	s15, r3
 800de36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800df1c <HAL_RCC_GetSysClockFreq+0x2f0>
 800de3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de42:	4b2f      	ldr	r3, [pc, #188]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de4a:	ee07 3a90 	vmov	s15, r3
 800de4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de52:	ed97 6a02 	vldr	s12, [r7, #8]
 800de56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800df10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800de5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de72:	e021      	b.n	800deb8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	ee07 3a90 	vmov	s15, r3
 800de7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800df18 <HAL_RCC_GetSysClockFreq+0x2ec>
 800de82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de86:	4b1e      	ldr	r3, [pc, #120]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de8e:	ee07 3a90 	vmov	s15, r3
 800de92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de96:	ed97 6a02 	vldr	s12, [r7, #8]
 800de9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800df10 <HAL_RCC_GetSysClockFreq+0x2e4>
 800de9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800deaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800deae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800deb6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800deb8:	4b11      	ldr	r3, [pc, #68]	; (800df00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800deba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800debc:	0a5b      	lsrs	r3, r3, #9
 800debe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dec2:	3301      	adds	r3, #1
 800dec4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	ee07 3a90 	vmov	s15, r3
 800decc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ded0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ded4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ded8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dedc:	ee17 3a90 	vmov	r3, s15
 800dee0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800dee2:	e005      	b.n	800def0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800dee4:	2300      	movs	r3, #0
 800dee6:	61bb      	str	r3, [r7, #24]
    break;
 800dee8:	e002      	b.n	800def0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800deea:	4b07      	ldr	r3, [pc, #28]	; (800df08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800deec:	61bb      	str	r3, [r7, #24]
    break;
 800deee:	bf00      	nop
  }

  return sysclockfreq;
 800def0:	69bb      	ldr	r3, [r7, #24]
}
 800def2:	4618      	mov	r0, r3
 800def4:	3724      	adds	r7, #36	; 0x24
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
 800defe:	bf00      	nop
 800df00:	58024400 	.word	0x58024400
 800df04:	03d09000 	.word	0x03d09000
 800df08:	003d0900 	.word	0x003d0900
 800df0c:	017d7840 	.word	0x017d7840
 800df10:	46000000 	.word	0x46000000
 800df14:	4c742400 	.word	0x4c742400
 800df18:	4a742400 	.word	0x4a742400
 800df1c:	4bbebc20 	.word	0x4bbebc20

0800df20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b082      	sub	sp, #8
 800df24:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800df26:	f7ff fe81 	bl	800dc2c <HAL_RCC_GetSysClockFreq>
 800df2a:	4602      	mov	r2, r0
 800df2c:	4b10      	ldr	r3, [pc, #64]	; (800df70 <HAL_RCC_GetHCLKFreq+0x50>)
 800df2e:	699b      	ldr	r3, [r3, #24]
 800df30:	0a1b      	lsrs	r3, r3, #8
 800df32:	f003 030f 	and.w	r3, r3, #15
 800df36:	490f      	ldr	r1, [pc, #60]	; (800df74 <HAL_RCC_GetHCLKFreq+0x54>)
 800df38:	5ccb      	ldrb	r3, [r1, r3]
 800df3a:	f003 031f 	and.w	r3, r3, #31
 800df3e:	fa22 f303 	lsr.w	r3, r2, r3
 800df42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800df44:	4b0a      	ldr	r3, [pc, #40]	; (800df70 <HAL_RCC_GetHCLKFreq+0x50>)
 800df46:	699b      	ldr	r3, [r3, #24]
 800df48:	f003 030f 	and.w	r3, r3, #15
 800df4c:	4a09      	ldr	r2, [pc, #36]	; (800df74 <HAL_RCC_GetHCLKFreq+0x54>)
 800df4e:	5cd3      	ldrb	r3, [r2, r3]
 800df50:	f003 031f 	and.w	r3, r3, #31
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	fa22 f303 	lsr.w	r3, r2, r3
 800df5a:	4a07      	ldr	r2, [pc, #28]	; (800df78 <HAL_RCC_GetHCLKFreq+0x58>)
 800df5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800df5e:	4a07      	ldr	r2, [pc, #28]	; (800df7c <HAL_RCC_GetHCLKFreq+0x5c>)
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800df64:	4b04      	ldr	r3, [pc, #16]	; (800df78 <HAL_RCC_GetHCLKFreq+0x58>)
 800df66:	681b      	ldr	r3, [r3, #0]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	58024400 	.word	0x58024400
 800df74:	08016738 	.word	0x08016738
 800df78:	20000024 	.word	0x20000024
 800df7c:	20000020 	.word	0x20000020

0800df80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800df84:	f7ff ffcc 	bl	800df20 <HAL_RCC_GetHCLKFreq>
 800df88:	4602      	mov	r2, r0
 800df8a:	4b06      	ldr	r3, [pc, #24]	; (800dfa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800df8c:	69db      	ldr	r3, [r3, #28]
 800df8e:	091b      	lsrs	r3, r3, #4
 800df90:	f003 0307 	and.w	r3, r3, #7
 800df94:	4904      	ldr	r1, [pc, #16]	; (800dfa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800df96:	5ccb      	ldrb	r3, [r1, r3]
 800df98:	f003 031f 	and.w	r3, r3, #31
 800df9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	58024400 	.word	0x58024400
 800dfa8:	08016738 	.word	0x08016738

0800dfac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800dfb0:	f7ff ffb6 	bl	800df20 <HAL_RCC_GetHCLKFreq>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	4b06      	ldr	r3, [pc, #24]	; (800dfd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dfb8:	69db      	ldr	r3, [r3, #28]
 800dfba:	0a1b      	lsrs	r3, r3, #8
 800dfbc:	f003 0307 	and.w	r3, r3, #7
 800dfc0:	4904      	ldr	r1, [pc, #16]	; (800dfd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dfc2:	5ccb      	ldrb	r3, [r1, r3]
 800dfc4:	f003 031f 	and.w	r3, r3, #31
 800dfc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	58024400 	.word	0x58024400
 800dfd4:	08016738 	.word	0x08016738

0800dfd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b086      	sub	sp, #24
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d03f      	beq.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dff8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dffc:	d02a      	beq.n	800e054 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800dffe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e002:	d824      	bhi.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e008:	d018      	beq.n	800e03c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e00a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e00e:	d81e      	bhi.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e010:	2b00      	cmp	r3, #0
 800e012:	d003      	beq.n	800e01c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800e014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e018:	d007      	beq.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800e01a:	e018      	b.n	800e04e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e01c:	4ba4      	ldr	r3, [pc, #656]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	4aa3      	ldr	r2, [pc, #652]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e026:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e028:	e015      	b.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	3304      	adds	r3, #4
 800e02e:	2102      	movs	r1, #2
 800e030:	4618      	mov	r0, r3
 800e032:	f001 ff01 	bl	800fe38 <RCCEx_PLL2_Config>
 800e036:	4603      	mov	r3, r0
 800e038:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e03a:	e00c      	b.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	3324      	adds	r3, #36	; 0x24
 800e040:	2102      	movs	r1, #2
 800e042:	4618      	mov	r0, r3
 800e044:	f001 ffaa 	bl	800ff9c <RCCEx_PLL3_Config>
 800e048:	4603      	mov	r3, r0
 800e04a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e04c:	e003      	b.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e04e:	2301      	movs	r3, #1
 800e050:	75fb      	strb	r3, [r7, #23]
      break;
 800e052:	e000      	b.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800e054:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e056:	7dfb      	ldrb	r3, [r7, #23]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d109      	bne.n	800e070 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e05c:	4b94      	ldr	r3, [pc, #592]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e05e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e060:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e068:	4991      	ldr	r1, [pc, #580]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e06a:	4313      	orrs	r3, r2
 800e06c:	650b      	str	r3, [r1, #80]	; 0x50
 800e06e:	e001      	b.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e070:	7dfb      	ldrb	r3, [r7, #23]
 800e072:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d03d      	beq.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e084:	2b04      	cmp	r3, #4
 800e086:	d826      	bhi.n	800e0d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e088:	a201      	add	r2, pc, #4	; (adr r2, 800e090 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800e08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e08e:	bf00      	nop
 800e090:	0800e0a5 	.word	0x0800e0a5
 800e094:	0800e0b3 	.word	0x0800e0b3
 800e098:	0800e0c5 	.word	0x0800e0c5
 800e09c:	0800e0dd 	.word	0x0800e0dd
 800e0a0:	0800e0dd 	.word	0x0800e0dd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0a4:	4b82      	ldr	r3, [pc, #520]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a8:	4a81      	ldr	r2, [pc, #516]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e0aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e0b0:	e015      	b.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f001 febd 	bl	800fe38 <RCCEx_PLL2_Config>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e0c2:	e00c      	b.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	3324      	adds	r3, #36	; 0x24
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f001 ff66 	bl	800ff9c <RCCEx_PLL3_Config>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e0d4:	e003      	b.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e0d6:	2301      	movs	r3, #1
 800e0d8:	75fb      	strb	r3, [r7, #23]
      break;
 800e0da:	e000      	b.n	800e0de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800e0dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e0de:	7dfb      	ldrb	r3, [r7, #23]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d109      	bne.n	800e0f8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e0e4:	4b72      	ldr	r3, [pc, #456]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0e8:	f023 0207 	bic.w	r2, r3, #7
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0f0:	496f      	ldr	r1, [pc, #444]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e0f2:	4313      	orrs	r3, r2
 800e0f4:	650b      	str	r3, [r1, #80]	; 0x50
 800e0f6:	e001      	b.n	800e0fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0f8:	7dfb      	ldrb	r3, [r7, #23]
 800e0fa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e104:	2b00      	cmp	r3, #0
 800e106:	d051      	beq.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e10e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e112:	d036      	beq.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e114:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e118:	d830      	bhi.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e11a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e11e:	d032      	beq.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e120:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e124:	d82a      	bhi.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e126:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e12a:	d02e      	beq.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800e12c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e130:	d824      	bhi.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e136:	d018      	beq.n	800e16a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800e138:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e13c:	d81e      	bhi.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d003      	beq.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x172>
 800e142:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e146:	d007      	beq.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800e148:	e018      	b.n	800e17c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e14a:	4b59      	ldr	r3, [pc, #356]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14e:	4a58      	ldr	r2, [pc, #352]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e154:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e156:	e019      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	3304      	adds	r3, #4
 800e15c:	2100      	movs	r1, #0
 800e15e:	4618      	mov	r0, r3
 800e160:	f001 fe6a 	bl	800fe38 <RCCEx_PLL2_Config>
 800e164:	4603      	mov	r3, r0
 800e166:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e168:	e010      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	3324      	adds	r3, #36	; 0x24
 800e16e:	2100      	movs	r1, #0
 800e170:	4618      	mov	r0, r3
 800e172:	f001 ff13 	bl	800ff9c <RCCEx_PLL3_Config>
 800e176:	4603      	mov	r3, r0
 800e178:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e17a:	e007      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	75fb      	strb	r3, [r7, #23]
      break;
 800e180:	e004      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e182:	bf00      	nop
 800e184:	e002      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e186:	bf00      	nop
 800e188:	e000      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e18a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e18c:	7dfb      	ldrb	r3, [r7, #23]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d10a      	bne.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e192:	4b47      	ldr	r3, [pc, #284]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e196:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e1a0:	4943      	ldr	r1, [pc, #268]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	658b      	str	r3, [r1, #88]	; 0x58
 800e1a6:	e001      	b.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1a8:	7dfb      	ldrb	r3, [r7, #23]
 800e1aa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d051      	beq.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e1be:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e1c2:	d036      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e1c4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e1c8:	d830      	bhi.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e1ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1ce:	d032      	beq.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800e1d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e1d4:	d82a      	bhi.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e1d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e1da:	d02e      	beq.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x262>
 800e1dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e1e0:	d824      	bhi.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e1e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1e6:	d018      	beq.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x242>
 800e1e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1ec:	d81e      	bhi.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <HAL_RCCEx_PeriphCLKConfig+0x222>
 800e1f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e1f6:	d007      	beq.n	800e208 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800e1f8:	e018      	b.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1fa:	4b2d      	ldr	r3, [pc, #180]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1fe:	4a2c      	ldr	r2, [pc, #176]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e204:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e206:	e019      	b.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	3304      	adds	r3, #4
 800e20c:	2100      	movs	r1, #0
 800e20e:	4618      	mov	r0, r3
 800e210:	f001 fe12 	bl	800fe38 <RCCEx_PLL2_Config>
 800e214:	4603      	mov	r3, r0
 800e216:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e218:	e010      	b.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	3324      	adds	r3, #36	; 0x24
 800e21e:	2100      	movs	r1, #0
 800e220:	4618      	mov	r0, r3
 800e222:	f001 febb 	bl	800ff9c <RCCEx_PLL3_Config>
 800e226:	4603      	mov	r3, r0
 800e228:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e22a:	e007      	b.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e22c:	2301      	movs	r3, #1
 800e22e:	75fb      	strb	r3, [r7, #23]
      break;
 800e230:	e004      	b.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e232:	bf00      	nop
 800e234:	e002      	b.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e236:	bf00      	nop
 800e238:	e000      	b.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e23a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d10a      	bne.n	800e258 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e242:	4b1b      	ldr	r3, [pc, #108]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e246:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e250:	4917      	ldr	r1, [pc, #92]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e252:	4313      	orrs	r3, r2
 800e254:	658b      	str	r3, [r1, #88]	; 0x58
 800e256:	e001      	b.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e258:	7dfb      	ldrb	r3, [r7, #23]
 800e25a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e264:	2b00      	cmp	r3, #0
 800e266:	d035      	beq.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e26c:	2b30      	cmp	r3, #48	; 0x30
 800e26e:	d01c      	beq.n	800e2aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e270:	2b30      	cmp	r3, #48	; 0x30
 800e272:	d817      	bhi.n	800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e274:	2b20      	cmp	r3, #32
 800e276:	d00c      	beq.n	800e292 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800e278:	2b20      	cmp	r3, #32
 800e27a:	d813      	bhi.n	800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d019      	beq.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800e280:	2b10      	cmp	r3, #16
 800e282:	d10f      	bne.n	800e2a4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e284:	4b0a      	ldr	r3, [pc, #40]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e288:	4a09      	ldr	r2, [pc, #36]	; (800e2b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e28a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e28e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e290:	e011      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	3304      	adds	r3, #4
 800e296:	2102      	movs	r1, #2
 800e298:	4618      	mov	r0, r3
 800e29a:	f001 fdcd 	bl	800fe38 <RCCEx_PLL2_Config>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e2a2:	e008      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	75fb      	strb	r3, [r7, #23]
      break;
 800e2a8:	e005      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800e2aa:	bf00      	nop
 800e2ac:	e003      	b.n	800e2b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e2ae:	bf00      	nop
 800e2b0:	58024400 	.word	0x58024400
      break;
 800e2b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e2b6:	7dfb      	ldrb	r3, [r7, #23]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d109      	bne.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e2bc:	4ba3      	ldr	r3, [pc, #652]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e2be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2c8:	49a0      	ldr	r1, [pc, #640]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e2ce:	e001      	b.n	800e2d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
 800e2d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d047      	beq.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2e8:	d030      	beq.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x374>
 800e2ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2ee:	d82a      	bhi.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e2f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e2f4:	d02c      	beq.n	800e350 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800e2f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e2fa:	d824      	bhi.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e2fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e300:	d018      	beq.n	800e334 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e306:	d81e      	bhi.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d003      	beq.n	800e314 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e30c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e310:	d007      	beq.n	800e322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e312:	e018      	b.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e314:	4b8d      	ldr	r3, [pc, #564]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e318:	4a8c      	ldr	r2, [pc, #560]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e31a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e31e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e320:	e017      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	3304      	adds	r3, #4
 800e326:	2100      	movs	r1, #0
 800e328:	4618      	mov	r0, r3
 800e32a:	f001 fd85 	bl	800fe38 <RCCEx_PLL2_Config>
 800e32e:	4603      	mov	r3, r0
 800e330:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e332:	e00e      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	3324      	adds	r3, #36	; 0x24
 800e338:	2100      	movs	r1, #0
 800e33a:	4618      	mov	r0, r3
 800e33c:	f001 fe2e 	bl	800ff9c <RCCEx_PLL3_Config>
 800e340:	4603      	mov	r3, r0
 800e342:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e344:	e005      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e346:	2301      	movs	r3, #1
 800e348:	75fb      	strb	r3, [r7, #23]
      break;
 800e34a:	e002      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e34c:	bf00      	nop
 800e34e:	e000      	b.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e350:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e352:	7dfb      	ldrb	r3, [r7, #23]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d109      	bne.n	800e36c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e358:	4b7c      	ldr	r3, [pc, #496]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e35c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e364:	4979      	ldr	r1, [pc, #484]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e366:	4313      	orrs	r3, r2
 800e368:	650b      	str	r3, [r1, #80]	; 0x50
 800e36a:	e001      	b.n	800e370 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e36c:	7dfb      	ldrb	r3, [r7, #23]
 800e36e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d049      	beq.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e384:	d02e      	beq.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800e386:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e38a:	d828      	bhi.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e38c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e390:	d02a      	beq.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800e392:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e396:	d822      	bhi.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e398:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e39c:	d026      	beq.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e39e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e3a2:	d81c      	bhi.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e3a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3a8:	d010      	beq.n	800e3cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800e3aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3ae:	d816      	bhi.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d01d      	beq.n	800e3f0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e3b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3b8:	d111      	bne.n	800e3de <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	3304      	adds	r3, #4
 800e3be:	2101      	movs	r1, #1
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f001 fd39 	bl	800fe38 <RCCEx_PLL2_Config>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e3ca:	e012      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	3324      	adds	r3, #36	; 0x24
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f001 fde2 	bl	800ff9c <RCCEx_PLL3_Config>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e3dc:	e009      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	75fb      	strb	r3, [r7, #23]
      break;
 800e3e2:	e006      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e3e4:	bf00      	nop
 800e3e6:	e004      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e3e8:	bf00      	nop
 800e3ea:	e002      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e3ec:	bf00      	nop
 800e3ee:	e000      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e3f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d109      	bne.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e3f8:	4b54      	ldr	r3, [pc, #336]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3fc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e404:	4951      	ldr	r1, [pc, #324]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e406:	4313      	orrs	r3, r2
 800e408:	650b      	str	r3, [r1, #80]	; 0x50
 800e40a:	e001      	b.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e40c:	7dfb      	ldrb	r3, [r7, #23]
 800e40e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d04b      	beq.n	800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e426:	d02e      	beq.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800e428:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e42c:	d828      	bhi.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e42e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e432:	d02a      	beq.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800e434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e438:	d822      	bhi.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e43a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e43e:	d026      	beq.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800e440:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e444:	d81c      	bhi.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e44a:	d010      	beq.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x496>
 800e44c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e450:	d816      	bhi.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e452:	2b00      	cmp	r3, #0
 800e454:	d01d      	beq.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800e456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e45a:	d111      	bne.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	3304      	adds	r3, #4
 800e460:	2101      	movs	r1, #1
 800e462:	4618      	mov	r0, r3
 800e464:	f001 fce8 	bl	800fe38 <RCCEx_PLL2_Config>
 800e468:	4603      	mov	r3, r0
 800e46a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e46c:	e012      	b.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	3324      	adds	r3, #36	; 0x24
 800e472:	2101      	movs	r1, #1
 800e474:	4618      	mov	r0, r3
 800e476:	f001 fd91 	bl	800ff9c <RCCEx_PLL3_Config>
 800e47a:	4603      	mov	r3, r0
 800e47c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e47e:	e009      	b.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	75fb      	strb	r3, [r7, #23]
      break;
 800e484:	e006      	b.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e486:	bf00      	nop
 800e488:	e004      	b.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e48a:	bf00      	nop
 800e48c:	e002      	b.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e48e:	bf00      	nop
 800e490:	e000      	b.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e492:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e494:	7dfb      	ldrb	r3, [r7, #23]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10a      	bne.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e49a:	4b2c      	ldr	r3, [pc, #176]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e49c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e49e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e4a8:	4928      	ldr	r1, [pc, #160]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e4aa:	4313      	orrs	r3, r2
 800e4ac:	658b      	str	r3, [r1, #88]	; 0x58
 800e4ae:	e001      	b.n	800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4b0:	7dfb      	ldrb	r3, [r7, #23]
 800e4b2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d02f      	beq.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e4c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4c8:	d00e      	beq.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800e4ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e4ce:	d814      	bhi.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x522>
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d015      	beq.n	800e500 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800e4d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e4d8:	d10f      	bne.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4da:	4b1c      	ldr	r3, [pc, #112]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4de:	4a1b      	ldr	r2, [pc, #108]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e4e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e4e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e4e6:	e00c      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	2101      	movs	r1, #1
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f001 fca2 	bl	800fe38 <RCCEx_PLL2_Config>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e4f8:	e003      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	75fb      	strb	r3, [r7, #23]
      break;
 800e4fe:	e000      	b.n	800e502 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800e500:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e502:	7dfb      	ldrb	r3, [r7, #23]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d109      	bne.n	800e51c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e508:	4b10      	ldr	r3, [pc, #64]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e50a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e50c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e514:	490d      	ldr	r1, [pc, #52]	; (800e54c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e516:	4313      	orrs	r3, r2
 800e518:	650b      	str	r3, [r1, #80]	; 0x50
 800e51a:	e001      	b.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e51c:	7dfb      	ldrb	r3, [r7, #23]
 800e51e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d034      	beq.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e530:	2b03      	cmp	r3, #3
 800e532:	d81d      	bhi.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800e534:	a201      	add	r2, pc, #4	; (adr r2, 800e53c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800e536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e53a:	bf00      	nop
 800e53c:	0800e577 	.word	0x0800e577
 800e540:	0800e551 	.word	0x0800e551
 800e544:	0800e55f 	.word	0x0800e55f
 800e548:	0800e577 	.word	0x0800e577
 800e54c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e550:	4bb1      	ldr	r3, [pc, #708]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e554:	4ab0      	ldr	r2, [pc, #704]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e55a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e55c:	e00c      	b.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	3304      	adds	r3, #4
 800e562:	2102      	movs	r1, #2
 800e564:	4618      	mov	r0, r3
 800e566:	f001 fc67 	bl	800fe38 <RCCEx_PLL2_Config>
 800e56a:	4603      	mov	r3, r0
 800e56c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e56e:	e003      	b.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e570:	2301      	movs	r3, #1
 800e572:	75fb      	strb	r3, [r7, #23]
      break;
 800e574:	e000      	b.n	800e578 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800e576:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e578:	7dfb      	ldrb	r3, [r7, #23]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d109      	bne.n	800e592 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e57e:	4ba6      	ldr	r3, [pc, #664]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e582:	f023 0203 	bic.w	r2, r3, #3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e58a:	49a3      	ldr	r1, [pc, #652]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e58c:	4313      	orrs	r3, r2
 800e58e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e590:	e001      	b.n	800e596 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e592:	7dfb      	ldrb	r3, [r7, #23]
 800e594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	f000 8086 	beq.w	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e5a4:	4b9d      	ldr	r3, [pc, #628]	; (800e81c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a9c      	ldr	r2, [pc, #624]	; (800e81c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800e5aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e5b0:	f7f8 f932 	bl	8006818 <HAL_GetTick>
 800e5b4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e5b6:	e009      	b.n	800e5cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e5b8:	f7f8 f92e 	bl	8006818 <HAL_GetTick>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	1ad3      	subs	r3, r2, r3
 800e5c2:	2b64      	cmp	r3, #100	; 0x64
 800e5c4:	d902      	bls.n	800e5cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800e5c6:	2303      	movs	r3, #3
 800e5c8:	75fb      	strb	r3, [r7, #23]
        break;
 800e5ca:	e005      	b.n	800e5d8 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e5cc:	4b93      	ldr	r3, [pc, #588]	; (800e81c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d0ef      	beq.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800e5d8:	7dfb      	ldrb	r3, [r7, #23]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d166      	bne.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e5de:	4b8e      	ldr	r3, [pc, #568]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e5e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e5e8:	4053      	eors	r3, r2
 800e5ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d013      	beq.n	800e61a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e5f2:	4b89      	ldr	r3, [pc, #548]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5fa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e5fc:	4b86      	ldr	r3, [pc, #536]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e5fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e600:	4a85      	ldr	r2, [pc, #532]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e606:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e608:	4b83      	ldr	r3, [pc, #524]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e60c:	4a82      	ldr	r2, [pc, #520]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e60e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e612:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e614:	4a80      	ldr	r2, [pc, #512]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e620:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e624:	d115      	bne.n	800e652 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e626:	f7f8 f8f7 	bl	8006818 <HAL_GetTick>
 800e62a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e62c:	e00b      	b.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e62e:	f7f8 f8f3 	bl	8006818 <HAL_GetTick>
 800e632:	4602      	mov	r2, r0
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	1ad3      	subs	r3, r2, r3
 800e638:	f241 3288 	movw	r2, #5000	; 0x1388
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d902      	bls.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800e640:	2303      	movs	r3, #3
 800e642:	75fb      	strb	r3, [r7, #23]
            break;
 800e644:	e005      	b.n	800e652 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e646:	4b74      	ldr	r3, [pc, #464]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e64a:	f003 0302 	and.w	r3, r3, #2
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d0ed      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800e652:	7dfb      	ldrb	r3, [r7, #23]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d126      	bne.n	800e6a6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e65e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e666:	d10d      	bne.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800e668:	4b6b      	ldr	r3, [pc, #428]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e66a:	691b      	ldr	r3, [r3, #16]
 800e66c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e676:	0919      	lsrs	r1, r3, #4
 800e678:	4b69      	ldr	r3, [pc, #420]	; (800e820 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e67a:	400b      	ands	r3, r1
 800e67c:	4966      	ldr	r1, [pc, #408]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e67e:	4313      	orrs	r3, r2
 800e680:	610b      	str	r3, [r1, #16]
 800e682:	e005      	b.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800e684:	4b64      	ldr	r3, [pc, #400]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	4a63      	ldr	r2, [pc, #396]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e68a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e68e:	6113      	str	r3, [r2, #16]
 800e690:	4b61      	ldr	r3, [pc, #388]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e692:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e69a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e69e:	495e      	ldr	r1, [pc, #376]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	670b      	str	r3, [r1, #112]	; 0x70
 800e6a4:	e004      	b.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e6a6:	7dfb      	ldrb	r3, [r7, #23]
 800e6a8:	75bb      	strb	r3, [r7, #22]
 800e6aa:	e001      	b.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6ac:	7dfb      	ldrb	r3, [r7, #23]
 800e6ae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f003 0301 	and.w	r3, r3, #1
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d07e      	beq.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6c0:	2b28      	cmp	r3, #40	; 0x28
 800e6c2:	d867      	bhi.n	800e794 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800e6c4:	a201      	add	r2, pc, #4	; (adr r2, 800e6cc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800e6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6ca:	bf00      	nop
 800e6cc:	0800e79b 	.word	0x0800e79b
 800e6d0:	0800e795 	.word	0x0800e795
 800e6d4:	0800e795 	.word	0x0800e795
 800e6d8:	0800e795 	.word	0x0800e795
 800e6dc:	0800e795 	.word	0x0800e795
 800e6e0:	0800e795 	.word	0x0800e795
 800e6e4:	0800e795 	.word	0x0800e795
 800e6e8:	0800e795 	.word	0x0800e795
 800e6ec:	0800e771 	.word	0x0800e771
 800e6f0:	0800e795 	.word	0x0800e795
 800e6f4:	0800e795 	.word	0x0800e795
 800e6f8:	0800e795 	.word	0x0800e795
 800e6fc:	0800e795 	.word	0x0800e795
 800e700:	0800e795 	.word	0x0800e795
 800e704:	0800e795 	.word	0x0800e795
 800e708:	0800e795 	.word	0x0800e795
 800e70c:	0800e783 	.word	0x0800e783
 800e710:	0800e795 	.word	0x0800e795
 800e714:	0800e795 	.word	0x0800e795
 800e718:	0800e795 	.word	0x0800e795
 800e71c:	0800e795 	.word	0x0800e795
 800e720:	0800e795 	.word	0x0800e795
 800e724:	0800e795 	.word	0x0800e795
 800e728:	0800e795 	.word	0x0800e795
 800e72c:	0800e79b 	.word	0x0800e79b
 800e730:	0800e795 	.word	0x0800e795
 800e734:	0800e795 	.word	0x0800e795
 800e738:	0800e795 	.word	0x0800e795
 800e73c:	0800e795 	.word	0x0800e795
 800e740:	0800e795 	.word	0x0800e795
 800e744:	0800e795 	.word	0x0800e795
 800e748:	0800e795 	.word	0x0800e795
 800e74c:	0800e79b 	.word	0x0800e79b
 800e750:	0800e795 	.word	0x0800e795
 800e754:	0800e795 	.word	0x0800e795
 800e758:	0800e795 	.word	0x0800e795
 800e75c:	0800e795 	.word	0x0800e795
 800e760:	0800e795 	.word	0x0800e795
 800e764:	0800e795 	.word	0x0800e795
 800e768:	0800e795 	.word	0x0800e795
 800e76c:	0800e79b 	.word	0x0800e79b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	3304      	adds	r3, #4
 800e774:	2101      	movs	r1, #1
 800e776:	4618      	mov	r0, r3
 800e778:	f001 fb5e 	bl	800fe38 <RCCEx_PLL2_Config>
 800e77c:	4603      	mov	r3, r0
 800e77e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e780:	e00c      	b.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	3324      	adds	r3, #36	; 0x24
 800e786:	2101      	movs	r1, #1
 800e788:	4618      	mov	r0, r3
 800e78a:	f001 fc07 	bl	800ff9c <RCCEx_PLL3_Config>
 800e78e:	4603      	mov	r3, r0
 800e790:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e792:	e003      	b.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e794:	2301      	movs	r3, #1
 800e796:	75fb      	strb	r3, [r7, #23]
      break;
 800e798:	e000      	b.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800e79a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e79c:	7dfb      	ldrb	r3, [r7, #23]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d109      	bne.n	800e7b6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e7a2:	4b1d      	ldr	r3, [pc, #116]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7a6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ae:	491a      	ldr	r1, [pc, #104]	; (800e818 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	654b      	str	r3, [r1, #84]	; 0x54
 800e7b4:	e001      	b.n	800e7ba <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7b6:	7dfb      	ldrb	r3, [r7, #23]
 800e7b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f003 0302 	and.w	r3, r3, #2
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d03e      	beq.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7ca:	2b05      	cmp	r3, #5
 800e7cc:	d820      	bhi.n	800e810 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800e7ce:	a201      	add	r2, pc, #4	; (adr r2, 800e7d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800e7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7d4:	0800e825 	.word	0x0800e825
 800e7d8:	0800e7ed 	.word	0x0800e7ed
 800e7dc:	0800e7ff 	.word	0x0800e7ff
 800e7e0:	0800e825 	.word	0x0800e825
 800e7e4:	0800e825 	.word	0x0800e825
 800e7e8:	0800e825 	.word	0x0800e825
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	2101      	movs	r1, #1
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f001 fb20 	bl	800fe38 <RCCEx_PLL2_Config>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e7fc:	e013      	b.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	3324      	adds	r3, #36	; 0x24
 800e802:	2101      	movs	r1, #1
 800e804:	4618      	mov	r0, r3
 800e806:	f001 fbc9 	bl	800ff9c <RCCEx_PLL3_Config>
 800e80a:	4603      	mov	r3, r0
 800e80c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e80e:	e00a      	b.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e810:	2301      	movs	r3, #1
 800e812:	75fb      	strb	r3, [r7, #23]
      break;
 800e814:	e007      	b.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800e816:	bf00      	nop
 800e818:	58024400 	.word	0x58024400
 800e81c:	58024800 	.word	0x58024800
 800e820:	00ffffcf 	.word	0x00ffffcf
      break;
 800e824:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e826:	7dfb      	ldrb	r3, [r7, #23]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d109      	bne.n	800e840 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e82c:	4b9f      	ldr	r3, [pc, #636]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e82e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e830:	f023 0207 	bic.w	r2, r3, #7
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e838:	499c      	ldr	r1, [pc, #624]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e83a:	4313      	orrs	r3, r2
 800e83c:	654b      	str	r3, [r1, #84]	; 0x54
 800e83e:	e001      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e840:	7dfb      	ldrb	r3, [r7, #23]
 800e842:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	f003 0304 	and.w	r3, r3, #4
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d039      	beq.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e856:	2b05      	cmp	r3, #5
 800e858:	d820      	bhi.n	800e89c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800e85a:	a201      	add	r2, pc, #4	; (adr r2, 800e860 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800e85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e860:	0800e8a3 	.word	0x0800e8a3
 800e864:	0800e879 	.word	0x0800e879
 800e868:	0800e88b 	.word	0x0800e88b
 800e86c:	0800e8a3 	.word	0x0800e8a3
 800e870:	0800e8a3 	.word	0x0800e8a3
 800e874:	0800e8a3 	.word	0x0800e8a3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	3304      	adds	r3, #4
 800e87c:	2101      	movs	r1, #1
 800e87e:	4618      	mov	r0, r3
 800e880:	f001 fada 	bl	800fe38 <RCCEx_PLL2_Config>
 800e884:	4603      	mov	r3, r0
 800e886:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e888:	e00c      	b.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	3324      	adds	r3, #36	; 0x24
 800e88e:	2101      	movs	r1, #1
 800e890:	4618      	mov	r0, r3
 800e892:	f001 fb83 	bl	800ff9c <RCCEx_PLL3_Config>
 800e896:	4603      	mov	r3, r0
 800e898:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e89a:	e003      	b.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e89c:	2301      	movs	r3, #1
 800e89e:	75fb      	strb	r3, [r7, #23]
      break;
 800e8a0:	e000      	b.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800e8a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e8a4:	7dfb      	ldrb	r3, [r7, #23]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d10a      	bne.n	800e8c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e8aa:	4b80      	ldr	r3, [pc, #512]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e8ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8ae:	f023 0207 	bic.w	r2, r3, #7
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8b8:	497c      	ldr	r1, [pc, #496]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	658b      	str	r3, [r1, #88]	; 0x58
 800e8be:	e001      	b.n	800e8c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8c0:	7dfb      	ldrb	r3, [r7, #23]
 800e8c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f003 0320 	and.w	r3, r3, #32
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d04b      	beq.n	800e968 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8da:	d02e      	beq.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800e8dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8e0:	d828      	bhi.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8e6:	d02a      	beq.n	800e93e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800e8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8ec:	d822      	bhi.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e8ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e8f2:	d026      	beq.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800e8f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e8f8:	d81c      	bhi.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e8fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8fe:	d010      	beq.n	800e922 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800e900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e904:	d816      	bhi.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e906:	2b00      	cmp	r3, #0
 800e908:	d01d      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800e90a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e90e:	d111      	bne.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	3304      	adds	r3, #4
 800e914:	2100      	movs	r1, #0
 800e916:	4618      	mov	r0, r3
 800e918:	f001 fa8e 	bl	800fe38 <RCCEx_PLL2_Config>
 800e91c:	4603      	mov	r3, r0
 800e91e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e920:	e012      	b.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	3324      	adds	r3, #36	; 0x24
 800e926:	2102      	movs	r1, #2
 800e928:	4618      	mov	r0, r3
 800e92a:	f001 fb37 	bl	800ff9c <RCCEx_PLL3_Config>
 800e92e:	4603      	mov	r3, r0
 800e930:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e932:	e009      	b.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e934:	2301      	movs	r3, #1
 800e936:	75fb      	strb	r3, [r7, #23]
      break;
 800e938:	e006      	b.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e93a:	bf00      	nop
 800e93c:	e004      	b.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e93e:	bf00      	nop
 800e940:	e002      	b.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e942:	bf00      	nop
 800e944:	e000      	b.n	800e948 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e946:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e948:	7dfb      	ldrb	r3, [r7, #23]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d10a      	bne.n	800e964 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e94e:	4b57      	ldr	r3, [pc, #348]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e952:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e95c:	4953      	ldr	r1, [pc, #332]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e95e:	4313      	orrs	r3, r2
 800e960:	654b      	str	r3, [r1, #84]	; 0x54
 800e962:	e001      	b.n	800e968 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e964:	7dfb      	ldrb	r3, [r7, #23]
 800e966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e970:	2b00      	cmp	r3, #0
 800e972:	d04b      	beq.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e97a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e97e:	d02e      	beq.n	800e9de <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800e980:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e984:	d828      	bhi.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e98a:	d02a      	beq.n	800e9e2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800e98c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e990:	d822      	bhi.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e996:	d026      	beq.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800e998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e99c:	d81c      	bhi.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e99e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9a2:	d010      	beq.n	800e9c6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800e9a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e9a8:	d816      	bhi.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d01d      	beq.n	800e9ea <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800e9ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9b2:	d111      	bne.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f001 fa3c 	bl	800fe38 <RCCEx_PLL2_Config>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e9c4:	e012      	b.n	800e9ec <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	3324      	adds	r3, #36	; 0x24
 800e9ca:	2102      	movs	r1, #2
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f001 fae5 	bl	800ff9c <RCCEx_PLL3_Config>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e9d6:	e009      	b.n	800e9ec <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	75fb      	strb	r3, [r7, #23]
      break;
 800e9dc:	e006      	b.n	800e9ec <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e9de:	bf00      	nop
 800e9e0:	e004      	b.n	800e9ec <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e9e2:	bf00      	nop
 800e9e4:	e002      	b.n	800e9ec <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e9e6:	bf00      	nop
 800e9e8:	e000      	b.n	800e9ec <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e9ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e9ec:	7dfb      	ldrb	r3, [r7, #23]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d10a      	bne.n	800ea08 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e9f2:	4b2e      	ldr	r3, [pc, #184]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e9f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ea00:	492a      	ldr	r1, [pc, #168]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ea02:	4313      	orrs	r3, r2
 800ea04:	658b      	str	r3, [r1, #88]	; 0x58
 800ea06:	e001      	b.n	800ea0c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea08:	7dfb      	ldrb	r3, [r7, #23]
 800ea0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d04d      	beq.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ea1e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ea22:	d02e      	beq.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800ea24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ea28:	d828      	bhi.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ea2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea2e:	d02a      	beq.n	800ea86 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800ea30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ea34:	d822      	bhi.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ea36:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ea3a:	d026      	beq.n	800ea8a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800ea3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ea40:	d81c      	bhi.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ea42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea46:	d010      	beq.n	800ea6a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800ea48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea4c:	d816      	bhi.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d01d      	beq.n	800ea8e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800ea52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea56:	d111      	bne.n	800ea7c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	4618      	mov	r0, r3
 800ea60:	f001 f9ea 	bl	800fe38 <RCCEx_PLL2_Config>
 800ea64:	4603      	mov	r3, r0
 800ea66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ea68:	e012      	b.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	3324      	adds	r3, #36	; 0x24
 800ea6e:	2102      	movs	r1, #2
 800ea70:	4618      	mov	r0, r3
 800ea72:	f001 fa93 	bl	800ff9c <RCCEx_PLL3_Config>
 800ea76:	4603      	mov	r3, r0
 800ea78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ea7a:	e009      	b.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	75fb      	strb	r3, [r7, #23]
      break;
 800ea80:	e006      	b.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ea82:	bf00      	nop
 800ea84:	e004      	b.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ea86:	bf00      	nop
 800ea88:	e002      	b.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ea8a:	bf00      	nop
 800ea8c:	e000      	b.n	800ea90 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ea8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ea90:	7dfb      	ldrb	r3, [r7, #23]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d10c      	bne.n	800eab0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ea96:	4b05      	ldr	r3, [pc, #20]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ea98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea9a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eaa4:	4901      	ldr	r1, [pc, #4]	; (800eaac <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	658b      	str	r3, [r1, #88]	; 0x58
 800eaaa:	e003      	b.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800eaac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eab0:	7dfb      	ldrb	r3, [r7, #23]
 800eab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f003 0308 	and.w	r3, r3, #8
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d018      	beq.n	800eaf2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eac8:	d10a      	bne.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	3324      	adds	r3, #36	; 0x24
 800eace:	2102      	movs	r1, #2
 800ead0:	4618      	mov	r0, r3
 800ead2:	f001 fa63 	bl	800ff9c <RCCEx_PLL3_Config>
 800ead6:	4603      	mov	r3, r0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800eadc:	2301      	movs	r3, #1
 800eade:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800eae0:	4b8a      	ldr	r3, [pc, #552]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800eae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eae4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaec:	4987      	ldr	r1, [pc, #540]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f003 0310 	and.w	r3, r3, #16
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d01a      	beq.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb08:	d10a      	bne.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	3324      	adds	r3, #36	; 0x24
 800eb0e:	2102      	movs	r1, #2
 800eb10:	4618      	mov	r0, r3
 800eb12:	f001 fa43 	bl	800ff9c <RCCEx_PLL3_Config>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d001      	beq.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800eb20:	4b7a      	ldr	r3, [pc, #488]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800eb22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb2e:	4977      	ldr	r1, [pc, #476]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800eb30:	4313      	orrs	r3, r2
 800eb32:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d034      	beq.n	800ebaa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800eb46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb4a:	d01d      	beq.n	800eb88 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800eb4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb50:	d817      	bhi.n	800eb82 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d003      	beq.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800eb56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb5a:	d009      	beq.n	800eb70 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800eb5c:	e011      	b.n	800eb82 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3304      	adds	r3, #4
 800eb62:	2100      	movs	r1, #0
 800eb64:	4618      	mov	r0, r3
 800eb66:	f001 f967 	bl	800fe38 <RCCEx_PLL2_Config>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800eb6e:	e00c      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	3324      	adds	r3, #36	; 0x24
 800eb74:	2102      	movs	r1, #2
 800eb76:	4618      	mov	r0, r3
 800eb78:	f001 fa10 	bl	800ff9c <RCCEx_PLL3_Config>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800eb80:	e003      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eb82:	2301      	movs	r3, #1
 800eb84:	75fb      	strb	r3, [r7, #23]
      break;
 800eb86:	e000      	b.n	800eb8a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800eb88:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eb8a:	7dfb      	ldrb	r3, [r7, #23]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d10a      	bne.n	800eba6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eb90:	4b5e      	ldr	r3, [pc, #376]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800eb92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800eb9e:	495b      	ldr	r1, [pc, #364]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800eba0:	4313      	orrs	r3, r2
 800eba2:	658b      	str	r3, [r1, #88]	; 0x58
 800eba4:	e001      	b.n	800ebaa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eba6:	7dfb      	ldrb	r3, [r7, #23]
 800eba8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d033      	beq.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ebc0:	d01c      	beq.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ebc2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ebc6:	d816      	bhi.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ebc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebcc:	d003      	beq.n	800ebd6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ebce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebd2:	d007      	beq.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ebd4:	e00f      	b.n	800ebf6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebd6:	4b4d      	ldr	r3, [pc, #308]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ebd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebda:	4a4c      	ldr	r2, [pc, #304]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ebdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ebe2:	e00c      	b.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	3324      	adds	r3, #36	; 0x24
 800ebe8:	2101      	movs	r1, #1
 800ebea:	4618      	mov	r0, r3
 800ebec:	f001 f9d6 	bl	800ff9c <RCCEx_PLL3_Config>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ebf4:	e003      	b.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	75fb      	strb	r3, [r7, #23]
      break;
 800ebfa:	e000      	b.n	800ebfe <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800ebfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10a      	bne.n	800ec1a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ec04:	4b41      	ldr	r3, [pc, #260]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ec06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec12:	493e      	ldr	r1, [pc, #248]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ec14:	4313      	orrs	r3, r2
 800ec16:	654b      	str	r3, [r1, #84]	; 0x54
 800ec18:	e001      	b.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec1a:	7dfb      	ldrb	r3, [r7, #23]
 800ec1c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d029      	beq.n	800ec7e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d003      	beq.n	800ec3a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800ec32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec36:	d007      	beq.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ec38:	e00f      	b.n	800ec5a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec3a:	4b34      	ldr	r3, [pc, #208]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ec3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3e:	4a33      	ldr	r2, [pc, #204]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ec40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ec46:	e00b      	b.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	3304      	adds	r3, #4
 800ec4c:	2102      	movs	r1, #2
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f001 f8f2 	bl	800fe38 <RCCEx_PLL2_Config>
 800ec54:	4603      	mov	r3, r0
 800ec56:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ec58:	e002      	b.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ec5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d109      	bne.n	800ec7a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ec66:	4b29      	ldr	r3, [pc, #164]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ec68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec72:	4926      	ldr	r1, [pc, #152]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ec74:	4313      	orrs	r3, r2
 800ec76:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ec78:	e001      	b.n	800ec7e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec7a:	7dfb      	ldrb	r3, [r7, #23]
 800ec7c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d00a      	beq.n	800eca0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	3324      	adds	r3, #36	; 0x24
 800ec8e:	2102      	movs	r1, #2
 800ec90:	4618      	mov	r0, r3
 800ec92:	f001 f983 	bl	800ff9c <RCCEx_PLL3_Config>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d001      	beq.n	800eca0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d033      	beq.n	800ed14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecb4:	d017      	beq.n	800ece6 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ecb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ecba:	d811      	bhi.n	800ece0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ecbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecc0:	d013      	beq.n	800ecea <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800ecc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecc6:	d80b      	bhi.n	800ece0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d010      	beq.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800eccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecd0:	d106      	bne.n	800ece0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ecd2:	4b0e      	ldr	r3, [pc, #56]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ecd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd6:	4a0d      	ldr	r2, [pc, #52]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ecd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ecdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ecde:	e007      	b.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	75fb      	strb	r3, [r7, #23]
      break;
 800ece4:	e004      	b.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ece6:	bf00      	nop
 800ece8:	e002      	b.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ecea:	bf00      	nop
 800ecec:	e000      	b.n	800ecf0 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800ecee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ecf0:	7dfb      	ldrb	r3, [r7, #23]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d10c      	bne.n	800ed10 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ecf6:	4b05      	ldr	r3, [pc, #20]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ecf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed02:	4902      	ldr	r1, [pc, #8]	; (800ed0c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ed04:	4313      	orrs	r3, r2
 800ed06:	654b      	str	r3, [r1, #84]	; 0x54
 800ed08:	e004      	b.n	800ed14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800ed0a:	bf00      	nop
 800ed0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed10:	7dfb      	ldrb	r3, [r7, #23]
 800ed12:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d008      	beq.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ed20:	4b29      	ldr	r3, [pc, #164]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed2c:	4926      	ldr	r1, [pc, #152]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d008      	beq.n	800ed50 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ed3e:	4b22      	ldr	r3, [pc, #136]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed4a:	491f      	ldr	r1, [pc, #124]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d00d      	beq.n	800ed78 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ed5c:	4b1a      	ldr	r3, [pc, #104]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed5e:	691b      	ldr	r3, [r3, #16]
 800ed60:	4a19      	ldr	r2, [pc, #100]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ed66:	6113      	str	r3, [r2, #16]
 800ed68:	4b17      	ldr	r3, [pc, #92]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed6a:	691a      	ldr	r2, [r3, #16]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ed72:	4915      	ldr	r1, [pc, #84]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed74:	4313      	orrs	r3, r2
 800ed76:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	da08      	bge.n	800ed92 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ed80:	4b11      	ldr	r3, [pc, #68]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed8c:	490e      	ldr	r1, [pc, #56]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d009      	beq.n	800edb2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ed9e:	4b0a      	ldr	r3, [pc, #40]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edac:	4906      	ldr	r1, [pc, #24]	; (800edc8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800edae:	4313      	orrs	r3, r2
 800edb0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800edb2:	7dbb      	ldrb	r3, [r7, #22]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d101      	bne.n	800edbc <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800edb8:	2300      	movs	r3, #0
 800edba:	e000      	b.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800edbc:	2301      	movs	r3, #1
}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3718      	adds	r7, #24
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	58024400 	.word	0x58024400

0800edcc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b090      	sub	sp, #64	; 0x40
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edda:	f040 8089 	bne.w	800eef0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800edde:	4b95      	ldr	r3, [pc, #596]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ede0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ede2:	f003 0307 	and.w	r3, r3, #7
 800ede6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ede8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edea:	2b04      	cmp	r3, #4
 800edec:	d87d      	bhi.n	800eeea <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800edee:	a201      	add	r2, pc, #4	; (adr r2, 800edf4 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800edf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edf4:	0800ee09 	.word	0x0800ee09
 800edf8:	0800ee2d 	.word	0x0800ee2d
 800edfc:	0800ee51 	.word	0x0800ee51
 800ee00:	0800eee5 	.word	0x0800eee5
 800ee04:	0800ee75 	.word	0x0800ee75
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee08:	4b8a      	ldr	r3, [pc, #552]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee14:	d107      	bne.n	800ee26 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f000 feba 	bl	800fb94 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ee24:	e3ef      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ee26:	2300      	movs	r3, #0
 800ee28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee2a:	e3ec      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee2c:	4b81      	ldr	r3, [pc, #516]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee38:	d107      	bne.n	800ee4a <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee3a:	f107 0318 	add.w	r3, r7, #24
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f000 fc00 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ee44:	69bb      	ldr	r3, [r7, #24]
 800ee46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ee48:	e3dd      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee4e:	e3da      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee50:	4b78      	ldr	r3, [pc, #480]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee5c:	d107      	bne.n	800ee6e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee5e:	f107 030c 	add.w	r3, r7, #12
 800ee62:	4618      	mov	r0, r3
 800ee64:	f000 fd42 	bl	800f8ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ee6c:	e3cb      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee72:	e3c8      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ee74:	4b6f      	ldr	r3, [pc, #444]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ee76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ee7c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ee7e:	4b6d      	ldr	r3, [pc, #436]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f003 0304 	and.w	r3, r3, #4
 800ee86:	2b04      	cmp	r3, #4
 800ee88:	d10c      	bne.n	800eea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800ee8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d109      	bne.n	800eea4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ee90:	4b68      	ldr	r3, [pc, #416]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	08db      	lsrs	r3, r3, #3
 800ee96:	f003 0303 	and.w	r3, r3, #3
 800ee9a:	4a67      	ldr	r2, [pc, #412]	; (800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800ee9c:	fa22 f303 	lsr.w	r3, r2, r3
 800eea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eea2:	e01e      	b.n	800eee2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eea4:	4b63      	ldr	r3, [pc, #396]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eeac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eeb0:	d106      	bne.n	800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800eeb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eeb8:	d102      	bne.n	800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800eeba:	4b60      	ldr	r3, [pc, #384]	; (800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eebe:	e010      	b.n	800eee2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eec0:	4b5c      	ldr	r3, [pc, #368]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eec8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eecc:	d106      	bne.n	800eedc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800eece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eed0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eed4:	d102      	bne.n	800eedc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800eed6:	4b5a      	ldr	r3, [pc, #360]	; (800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800eed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eeda:	e002      	b.n	800eee2 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800eedc:	2300      	movs	r3, #0
 800eede:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800eee0:	e391      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eee2:	e390      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800eee4:	4b57      	ldr	r3, [pc, #348]	; (800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eee6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eee8:	e38d      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eeee:	e38a      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eef6:	f040 80a7 	bne.w	800f048 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800eefa:	4b4e      	ldr	r3, [pc, #312]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eefc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eefe:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ef02:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef0a:	d054      	beq.n	800efb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef12:	f200 808b 	bhi.w	800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ef16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ef1c:	f000 8083 	beq.w	800f026 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ef20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ef26:	f200 8081 	bhi.w	800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ef2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef30:	d02f      	beq.n	800ef92 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800ef32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef38:	d878      	bhi.n	800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d004      	beq.n	800ef4a <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800ef40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef46:	d012      	beq.n	800ef6e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800ef48:	e070      	b.n	800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef4a:	4b3a      	ldr	r3, [pc, #232]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef56:	d107      	bne.n	800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f000 fe19 	bl	800fb94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ef66:	e34e      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ef6c:	e34b      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ef6e:	4b31      	ldr	r3, [pc, #196]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef7a:	d107      	bne.n	800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef7c:	f107 0318 	add.w	r3, r7, #24
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 fb5f 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ef8a:	e33c      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ef90:	e339      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ef92:	4b28      	ldr	r3, [pc, #160]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef9e:	d107      	bne.n	800efb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efa0:	f107 030c 	add.w	r3, r7, #12
 800efa4:	4618      	mov	r0, r3
 800efa6:	f000 fca1 	bl	800f8ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800efae:	e32a      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800efb0:	2300      	movs	r3, #0
 800efb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800efb4:	e327      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800efb6:	4b1f      	ldr	r3, [pc, #124]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800efb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800efbe:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800efc0:	4b1c      	ldr	r3, [pc, #112]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f003 0304 	and.w	r3, r3, #4
 800efc8:	2b04      	cmp	r3, #4
 800efca:	d10c      	bne.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800efcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d109      	bne.n	800efe6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800efd2:	4b18      	ldr	r3, [pc, #96]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	08db      	lsrs	r3, r3, #3
 800efd8:	f003 0303 	and.w	r3, r3, #3
 800efdc:	4a16      	ldr	r2, [pc, #88]	; (800f038 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800efde:	fa22 f303 	lsr.w	r3, r2, r3
 800efe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efe4:	e01e      	b.n	800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800efe6:	4b13      	ldr	r3, [pc, #76]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eff2:	d106      	bne.n	800f002 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800eff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800effa:	d102      	bne.n	800f002 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800effc:	4b0f      	ldr	r3, [pc, #60]	; (800f03c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800effe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f000:	e010      	b.n	800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f002:	4b0c      	ldr	r3, [pc, #48]	; (800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f00a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f00e:	d106      	bne.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800f010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f016:	d102      	bne.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f018:	4b09      	ldr	r3, [pc, #36]	; (800f040 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800f01a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f01c:	e002      	b.n	800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f01e:	2300      	movs	r3, #0
 800f020:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f022:	e2f0      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f024:	e2ef      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f026:	4b07      	ldr	r3, [pc, #28]	; (800f044 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800f028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f02a:	e2ec      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f02c:	2300      	movs	r3, #0
 800f02e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f030:	e2e9      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f032:	bf00      	nop
 800f034:	58024400 	.word	0x58024400
 800f038:	03d09000 	.word	0x03d09000
 800f03c:	003d0900 	.word	0x003d0900
 800f040:	017d7840 	.word	0x017d7840
 800f044:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f04e:	f040 809c 	bne.w	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800f052:	4b9d      	ldr	r3, [pc, #628]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f056:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f05a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f062:	d054      	beq.n	800f10e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f066:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f06a:	f200 808b 	bhi.w	800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f070:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f074:	f000 8083 	beq.w	800f17e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f07e:	f200 8081 	bhi.w	800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f088:	d02f      	beq.n	800f0ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f090:	d878      	bhi.n	800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f094:	2b00      	cmp	r3, #0
 800f096:	d004      	beq.n	800f0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f09e:	d012      	beq.n	800f0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f0a0:	e070      	b.n	800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f0a2:	4b89      	ldr	r3, [pc, #548]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0ae:	d107      	bne.n	800f0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f000 fd6d 	bl	800fb94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f0be:	e2a2      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f0c4:	e29f      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0c6:	4b80      	ldr	r3, [pc, #512]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0d2:	d107      	bne.n	800f0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0d4:	f107 0318 	add.w	r3, r7, #24
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f000 fab3 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800f0e2:	e290      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f0e8:	e28d      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f0ea:	4b77      	ldr	r3, [pc, #476]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f0f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0f6:	d107      	bne.n	800f108 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0f8:	f107 030c 	add.w	r3, r7, #12
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 fbf5 	bl	800f8ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f106:	e27e      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f108:	2300      	movs	r3, #0
 800f10a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f10c:	e27b      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f10e:	4b6e      	ldr	r3, [pc, #440]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f116:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f118:	4b6b      	ldr	r3, [pc, #428]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f003 0304 	and.w	r3, r3, #4
 800f120:	2b04      	cmp	r3, #4
 800f122:	d10c      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f126:	2b00      	cmp	r3, #0
 800f128:	d109      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f12a:	4b67      	ldr	r3, [pc, #412]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	08db      	lsrs	r3, r3, #3
 800f130:	f003 0303 	and.w	r3, r3, #3
 800f134:	4a65      	ldr	r2, [pc, #404]	; (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f136:	fa22 f303 	lsr.w	r3, r2, r3
 800f13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f13c:	e01e      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f13e:	4b62      	ldr	r3, [pc, #392]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f14a:	d106      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800f14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f152:	d102      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f154:	4b5e      	ldr	r3, [pc, #376]	; (800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f156:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f158:	e010      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f15a:	4b5b      	ldr	r3, [pc, #364]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f166:	d106      	bne.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800f168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f16a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f16e:	d102      	bne.n	800f176 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f170:	4b58      	ldr	r3, [pc, #352]	; (800f2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f172:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f174:	e002      	b.n	800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f176:	2300      	movs	r3, #0
 800f178:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f17a:	e244      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f17c:	e243      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f17e:	4b56      	ldr	r3, [pc, #344]	; (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f182:	e240      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f184:	2300      	movs	r3, #0
 800f186:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f188:	e23d      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f190:	f040 80a7 	bne.w	800f2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800f194:	4b4c      	ldr	r3, [pc, #304]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f198:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f19c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1a4:	d055      	beq.n	800f252 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800f1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f1ac:	f200 8096 	bhi.w	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f1b6:	f000 8084 	beq.w	800f2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f1c0:	f200 808c 	bhi.w	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1ca:	d030      	beq.n	800f22e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f1d2:	f200 8083 	bhi.w	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d004      	beq.n	800f1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f1e2:	d012      	beq.n	800f20a <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800f1e4:	e07a      	b.n	800f2dc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f1e6:	4b38      	ldr	r3, [pc, #224]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1f2:	d107      	bne.n	800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f1f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f000 fccb 	bl	800fb94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f200:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f202:	e200      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f204:	2300      	movs	r3, #0
 800f206:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f208:	e1fd      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f20a:	4b2f      	ldr	r3, [pc, #188]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f216:	d107      	bne.n	800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f218:	f107 0318 	add.w	r3, r7, #24
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 fa11 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f226:	e1ee      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f228:	2300      	movs	r3, #0
 800f22a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f22c:	e1eb      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f22e:	4b26      	ldr	r3, [pc, #152]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f23a:	d107      	bne.n	800f24c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f23c:	f107 030c 	add.w	r3, r7, #12
 800f240:	4618      	mov	r0, r3
 800f242:	f000 fb53 	bl	800f8ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f24a:	e1dc      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f250:	e1d9      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f252:	4b1d      	ldr	r3, [pc, #116]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f25a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f25c:	4b1a      	ldr	r3, [pc, #104]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f003 0304 	and.w	r3, r3, #4
 800f264:	2b04      	cmp	r3, #4
 800f266:	d10c      	bne.n	800f282 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800f268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d109      	bne.n	800f282 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f26e:	4b16      	ldr	r3, [pc, #88]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	08db      	lsrs	r3, r3, #3
 800f274:	f003 0303 	and.w	r3, r3, #3
 800f278:	4a14      	ldr	r2, [pc, #80]	; (800f2cc <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f27a:	fa22 f303 	lsr.w	r3, r2, r3
 800f27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f280:	e01e      	b.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f282:	4b11      	ldr	r3, [pc, #68]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f28e:	d106      	bne.n	800f29e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800f290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f296:	d102      	bne.n	800f29e <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f298:	4b0d      	ldr	r3, [pc, #52]	; (800f2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f29a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f29c:	e010      	b.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f29e:	4b0a      	ldr	r3, [pc, #40]	; (800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2aa:	d106      	bne.n	800f2ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800f2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2b2:	d102      	bne.n	800f2ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f2b4:	4b07      	ldr	r3, [pc, #28]	; (800f2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2b8:	e002      	b.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f2be:	e1a2      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f2c0:	e1a1      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f2c2:	4b05      	ldr	r3, [pc, #20]	; (800f2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2c6:	e19e      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f2c8:	58024400 	.word	0x58024400
 800f2cc:	03d09000 	.word	0x03d09000
 800f2d0:	003d0900 	.word	0x003d0900
 800f2d4:	017d7840 	.word	0x017d7840
 800f2d8:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2e0:	e191      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f2e8:	d173      	bne.n	800f3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800f2ea:	4b9b      	ldr	r3, [pc, #620]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f2ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f2f2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2fa:	d02f      	beq.n	800f35c <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800f2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f302:	d863      	bhi.n	800f3cc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800f304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f306:	2b00      	cmp	r3, #0
 800f308:	d004      	beq.n	800f314 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800f30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f310:	d012      	beq.n	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800f312:	e05b      	b.n	800f3cc <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f314:	4b90      	ldr	r3, [pc, #576]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f31c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f320:	d107      	bne.n	800f332 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f322:	f107 0318 	add.w	r3, r7, #24
 800f326:	4618      	mov	r0, r3
 800f328:	f000 f98c 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f330:	e169      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f332:	2300      	movs	r3, #0
 800f334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f336:	e166      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f338:	4b87      	ldr	r3, [pc, #540]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f344:	d107      	bne.n	800f356 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f346:	f107 030c 	add.w	r3, r7, #12
 800f34a:	4618      	mov	r0, r3
 800f34c:	f000 face 	bl	800f8ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f354:	e157      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f356:	2300      	movs	r3, #0
 800f358:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f35a:	e154      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f35c:	4b7e      	ldr	r3, [pc, #504]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f35e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f360:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f364:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f366:	4b7c      	ldr	r3, [pc, #496]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f003 0304 	and.w	r3, r3, #4
 800f36e:	2b04      	cmp	r3, #4
 800f370:	d10c      	bne.n	800f38c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800f372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f374:	2b00      	cmp	r3, #0
 800f376:	d109      	bne.n	800f38c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f378:	4b77      	ldr	r3, [pc, #476]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	08db      	lsrs	r3, r3, #3
 800f37e:	f003 0303 	and.w	r3, r3, #3
 800f382:	4a76      	ldr	r2, [pc, #472]	; (800f55c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f384:	fa22 f303 	lsr.w	r3, r2, r3
 800f388:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f38a:	e01e      	b.n	800f3ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f38c:	4b72      	ldr	r3, [pc, #456]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f398:	d106      	bne.n	800f3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800f39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f39c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3a0:	d102      	bne.n	800f3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f3a2:	4b6f      	ldr	r3, [pc, #444]	; (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3a6:	e010      	b.n	800f3ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f3a8:	4b6b      	ldr	r3, [pc, #428]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f3b4:	d106      	bne.n	800f3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800f3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3bc:	d102      	bne.n	800f3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f3be:	4b69      	ldr	r3, [pc, #420]	; (800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800f3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3c2:	e002      	b.n	800f3ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f3c8:	e11d      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f3ca:	e11c      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f3d0:	e119      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3d8:	d133      	bne.n	800f442 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800f3da:	4b5f      	ldr	r3, [pc, #380]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f3dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d004      	beq.n	800f3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800f3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3f0:	d012      	beq.n	800f418 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f3f2:	e023      	b.n	800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f3f4:	4b58      	ldr	r3, [pc, #352]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f400:	d107      	bne.n	800f412 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f406:	4618      	mov	r0, r3
 800f408:	f000 fbc4 	bl	800fb94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f40e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f410:	e0f9      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f416:	e0f6      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f418:	4b4f      	ldr	r3, [pc, #316]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f424:	d107      	bne.n	800f436 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f426:	f107 0318 	add.w	r3, r7, #24
 800f42a:	4618      	mov	r0, r3
 800f42c:	f000 f90a 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f430:	6a3b      	ldr	r3, [r7, #32]
 800f432:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f434:	e0e7      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f436:	2300      	movs	r3, #0
 800f438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f43a:	e0e4      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f43c:	2300      	movs	r3, #0
 800f43e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f440:	e0e1      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f448:	f040 808e 	bne.w	800f568 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800f44c:	4b42      	ldr	r3, [pc, #264]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f44e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f450:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f454:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f45c:	d06b      	beq.n	800f536 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800f45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f464:	d874      	bhi.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f46c:	d056      	beq.n	800f51c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f474:	d86c      	bhi.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f478:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f47c:	d03b      	beq.n	800f4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800f47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f480:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f484:	d864      	bhi.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f488:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f48c:	d021      	beq.n	800f4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800f48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f494:	d85c      	bhi.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d004      	beq.n	800f4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800f49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4a2:	d004      	beq.n	800f4ae <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800f4a4:	e054      	b.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f4a6:	f000 f8b7 	bl	800f618 <HAL_RCCEx_GetD3PCLK1Freq>
 800f4aa:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800f4ac:	e0ab      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4ae:	4b2a      	ldr	r3, [pc, #168]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f4b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f4ba:	d107      	bne.n	800f4cc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4bc:	f107 0318 	add.w	r3, r7, #24
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f000 f8bf 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f4c6:	69fb      	ldr	r3, [r7, #28]
 800f4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f4ca:	e09c      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4d0:	e099      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4d2:	4b21      	ldr	r3, [pc, #132]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f4da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4de:	d107      	bne.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4e0:	f107 030c 	add.w	r3, r7, #12
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f000 fa01 	bl	800f8ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f4ee:	e08a      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4f4:	e087      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f4f6:	4b18      	ldr	r3, [pc, #96]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f003 0304 	and.w	r3, r3, #4
 800f4fe:	2b04      	cmp	r3, #4
 800f500:	d109      	bne.n	800f516 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f502:	4b15      	ldr	r3, [pc, #84]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	08db      	lsrs	r3, r3, #3
 800f508:	f003 0303 	and.w	r3, r3, #3
 800f50c:	4a13      	ldr	r2, [pc, #76]	; (800f55c <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f50e:	fa22 f303 	lsr.w	r3, r2, r3
 800f512:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f514:	e077      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f516:	2300      	movs	r3, #0
 800f518:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f51a:	e074      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f51c:	4b0e      	ldr	r3, [pc, #56]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f528:	d102      	bne.n	800f530 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800f52a:	4b0d      	ldr	r3, [pc, #52]	; (800f560 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f52c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f52e:	e06a      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f530:	2300      	movs	r3, #0
 800f532:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f534:	e067      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f536:	4b08      	ldr	r3, [pc, #32]	; (800f558 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f53e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f542:	d102      	bne.n	800f54a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800f544:	4b07      	ldr	r3, [pc, #28]	; (800f564 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800f546:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f548:	e05d      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f54a:	2300      	movs	r3, #0
 800f54c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f54e:	e05a      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800f550:	2300      	movs	r3, #0
 800f552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f554:	e057      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f556:	bf00      	nop
 800f558:	58024400 	.word	0x58024400
 800f55c:	03d09000 	.word	0x03d09000
 800f560:	003d0900 	.word	0x003d0900
 800f564:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f56e:	d148      	bne.n	800f602 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800f570:	4b27      	ldr	r3, [pc, #156]	; (800f610 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f574:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f578:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f580:	d02a      	beq.n	800f5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800f582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f588:	d838      	bhi.n	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800f58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d004      	beq.n	800f59a <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800f590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f596:	d00d      	beq.n	800f5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800f598:	e030      	b.n	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f59a:	4b1d      	ldr	r3, [pc, #116]	; (800f610 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5a6:	d102      	bne.n	800f5ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800f5a8:	4b1a      	ldr	r3, [pc, #104]	; (800f614 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800f5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f5ac:	e02b      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f5b2:	e028      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f5b4:	4b16      	ldr	r3, [pc, #88]	; (800f610 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f5bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f5c0:	d107      	bne.n	800f5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f5c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f000 fae4 	bl	800fb94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f5d0:	e019      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f5d6:	e016      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f5d8:	4b0d      	ldr	r3, [pc, #52]	; (800f610 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f5e4:	d107      	bne.n	800f5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5e6:	f107 0318 	add.w	r3, r7, #24
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f000 f82a 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f5f4:	e007      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f5fa:	e004      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f600:	e001      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800f602:	2300      	movs	r3, #0
 800f604:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800f606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f608:	4618      	mov	r0, r3
 800f60a:	3740      	adds	r7, #64	; 0x40
 800f60c:	46bd      	mov	sp, r7
 800f60e:	bd80      	pop	{r7, pc}
 800f610:	58024400 	.word	0x58024400
 800f614:	017d7840 	.word	0x017d7840

0800f618 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f61c:	f7fe fc80 	bl	800df20 <HAL_RCC_GetHCLKFreq>
 800f620:	4602      	mov	r2, r0
 800f622:	4b06      	ldr	r3, [pc, #24]	; (800f63c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f624:	6a1b      	ldr	r3, [r3, #32]
 800f626:	091b      	lsrs	r3, r3, #4
 800f628:	f003 0307 	and.w	r3, r3, #7
 800f62c:	4904      	ldr	r1, [pc, #16]	; (800f640 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f62e:	5ccb      	ldrb	r3, [r1, r3]
 800f630:	f003 031f 	and.w	r3, r3, #31
 800f634:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f638:	4618      	mov	r0, r3
 800f63a:	bd80      	pop	{r7, pc}
 800f63c:	58024400 	.word	0x58024400
 800f640:	08016738 	.word	0x08016738

0800f644 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800f644:	b480      	push	{r7}
 800f646:	b089      	sub	sp, #36	; 0x24
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f64c:	4ba1      	ldr	r3, [pc, #644]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f64e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f650:	f003 0303 	and.w	r3, r3, #3
 800f654:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800f656:	4b9f      	ldr	r3, [pc, #636]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f65a:	0b1b      	lsrs	r3, r3, #12
 800f65c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f660:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f662:	4b9c      	ldr	r3, [pc, #624]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f666:	091b      	lsrs	r3, r3, #4
 800f668:	f003 0301 	and.w	r3, r3, #1
 800f66c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800f66e:	4b99      	ldr	r3, [pc, #612]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f672:	08db      	lsrs	r3, r3, #3
 800f674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f678:	693a      	ldr	r2, [r7, #16]
 800f67a:	fb02 f303 	mul.w	r3, r2, r3
 800f67e:	ee07 3a90 	vmov	s15, r3
 800f682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f686:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f68a:	697b      	ldr	r3, [r7, #20]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	f000 8111 	beq.w	800f8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f692:	69bb      	ldr	r3, [r7, #24]
 800f694:	2b02      	cmp	r3, #2
 800f696:	f000 8083 	beq.w	800f7a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	2b02      	cmp	r3, #2
 800f69e:	f200 80a1 	bhi.w	800f7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f6a2:	69bb      	ldr	r3, [r7, #24]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d003      	beq.n	800f6b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d056      	beq.n	800f75c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f6ae:	e099      	b.n	800f7e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f6b0:	4b88      	ldr	r3, [pc, #544]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f003 0320 	and.w	r3, r3, #32
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d02d      	beq.n	800f718 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f6bc:	4b85      	ldr	r3, [pc, #532]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	08db      	lsrs	r3, r3, #3
 800f6c2:	f003 0303 	and.w	r3, r3, #3
 800f6c6:	4a84      	ldr	r2, [pc, #528]	; (800f8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800f6cc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	ee07 3a90 	vmov	s15, r3
 800f6d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	ee07 3a90 	vmov	s15, r3
 800f6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6e6:	4b7b      	ldr	r3, [pc, #492]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6ee:	ee07 3a90 	vmov	s15, r3
 800f6f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f8dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f70a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f70e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f712:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f716:	e087      	b.n	800f828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	ee07 3a90 	vmov	s15, r3
 800f71e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f722:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f72a:	4b6a      	ldr	r3, [pc, #424]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f72e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f732:	ee07 3a90 	vmov	s15, r3
 800f736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f73a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f73e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f8dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f74a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f74e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f752:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f756:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f75a:	e065      	b.n	800f828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	ee07 3a90 	vmov	s15, r3
 800f762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f766:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f76a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f76e:	4b59      	ldr	r3, [pc, #356]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f776:	ee07 3a90 	vmov	s15, r3
 800f77a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f77e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f782:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f8dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f78a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f78e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f79a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f79e:	e043      	b.n	800f828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	ee07 3a90 	vmov	s15, r3
 800f7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7b2:	4b48      	ldr	r3, [pc, #288]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7ba:	ee07 3a90 	vmov	s15, r3
 800f7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f8dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f7e2:	e021      	b.n	800f828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	ee07 3a90 	vmov	s15, r3
 800f7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7f6:	4b37      	ldr	r3, [pc, #220]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7fe:	ee07 3a90 	vmov	s15, r3
 800f802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f806:	ed97 6a03 	vldr	s12, [r7, #12]
 800f80a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f8dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f826:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800f828:	4b2a      	ldr	r3, [pc, #168]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f82c:	0a5b      	lsrs	r3, r3, #9
 800f82e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f832:	ee07 3a90 	vmov	s15, r3
 800f836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f83a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f83e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f842:	edd7 6a07 	vldr	s13, [r7, #28]
 800f846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f84a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f84e:	ee17 2a90 	vmov	r2, s15
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800f856:	4b1f      	ldr	r3, [pc, #124]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f85a:	0c1b      	lsrs	r3, r3, #16
 800f85c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f860:	ee07 3a90 	vmov	s15, r3
 800f864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f868:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f86c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f870:	edd7 6a07 	vldr	s13, [r7, #28]
 800f874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f87c:	ee17 2a90 	vmov	r2, s15
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800f884:	4b13      	ldr	r3, [pc, #76]	; (800f8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f888:	0e1b      	lsrs	r3, r3, #24
 800f88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f88e:	ee07 3a90 	vmov	s15, r3
 800f892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f89a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f89e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f8a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f8a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f8aa:	ee17 2a90 	vmov	r2, s15
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f8b2:	e008      	b.n	800f8c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2200      	movs	r2, #0
 800f8be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	609a      	str	r2, [r3, #8]
}
 800f8c6:	bf00      	nop
 800f8c8:	3724      	adds	r7, #36	; 0x24
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	58024400 	.word	0x58024400
 800f8d8:	03d09000 	.word	0x03d09000
 800f8dc:	46000000 	.word	0x46000000
 800f8e0:	4c742400 	.word	0x4c742400
 800f8e4:	4a742400 	.word	0x4a742400
 800f8e8:	4bbebc20 	.word	0x4bbebc20

0800f8ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b089      	sub	sp, #36	; 0x24
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f8f4:	4ba1      	ldr	r3, [pc, #644]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8f8:	f003 0303 	and.w	r3, r3, #3
 800f8fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800f8fe:	4b9f      	ldr	r3, [pc, #636]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f902:	0d1b      	lsrs	r3, r3, #20
 800f904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f908:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f90a:	4b9c      	ldr	r3, [pc, #624]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f90e:	0a1b      	lsrs	r3, r3, #8
 800f910:	f003 0301 	and.w	r3, r3, #1
 800f914:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f916:	4b99      	ldr	r3, [pc, #612]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f91a:	08db      	lsrs	r3, r3, #3
 800f91c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f920:	693a      	ldr	r2, [r7, #16]
 800f922:	fb02 f303 	mul.w	r3, r2, r3
 800f926:	ee07 3a90 	vmov	s15, r3
 800f92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f92e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	2b00      	cmp	r3, #0
 800f936:	f000 8111 	beq.w	800fb5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f93a:	69bb      	ldr	r3, [r7, #24]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	f000 8083 	beq.w	800fa48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	2b02      	cmp	r3, #2
 800f946:	f200 80a1 	bhi.w	800fa8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f94a:	69bb      	ldr	r3, [r7, #24]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d003      	beq.n	800f958 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	2b01      	cmp	r3, #1
 800f954:	d056      	beq.n	800fa04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f956:	e099      	b.n	800fa8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f958:	4b88      	ldr	r3, [pc, #544]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f003 0320 	and.w	r3, r3, #32
 800f960:	2b00      	cmp	r3, #0
 800f962:	d02d      	beq.n	800f9c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f964:	4b85      	ldr	r3, [pc, #532]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	08db      	lsrs	r3, r3, #3
 800f96a:	f003 0303 	and.w	r3, r3, #3
 800f96e:	4a84      	ldr	r2, [pc, #528]	; (800fb80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f970:	fa22 f303 	lsr.w	r3, r2, r3
 800f974:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	ee07 3a90 	vmov	s15, r3
 800f97c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	ee07 3a90 	vmov	s15, r3
 800f986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f98a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f98e:	4b7b      	ldr	r3, [pc, #492]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f996:	ee07 3a90 	vmov	s15, r3
 800f99a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f99e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fb84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f9be:	e087      	b.n	800fad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f9c0:	697b      	ldr	r3, [r7, #20]
 800f9c2:	ee07 3a90 	vmov	s15, r3
 800f9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fb88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f9ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9d2:	4b6a      	ldr	r3, [pc, #424]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9da:	ee07 3a90 	vmov	s15, r3
 800f9de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fb84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fa02:	e065      	b.n	800fad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	ee07 3a90 	vmov	s15, r3
 800fa0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fb8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa16:	4b59      	ldr	r3, [pc, #356]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa1e:	ee07 3a90 	vmov	s15, r3
 800fa22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa26:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fb84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fa3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fa46:	e043      	b.n	800fad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	ee07 3a90 	vmov	s15, r3
 800fa4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fb90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fa56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa5a:	4b48      	ldr	r3, [pc, #288]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa62:	ee07 3a90 	vmov	s15, r3
 800fa66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fb84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fa7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fa8a:	e021      	b.n	800fad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fa8c:	697b      	ldr	r3, [r7, #20]
 800fa8e:	ee07 3a90 	vmov	s15, r3
 800fa92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fb8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa9e:	4b37      	ldr	r3, [pc, #220]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faa6:	ee07 3a90 	vmov	s15, r3
 800faaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800faae:	ed97 6a03 	vldr	s12, [r7, #12]
 800fab2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fb84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800faba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fabe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800face:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800fad0:	4b2a      	ldr	r3, [pc, #168]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fad4:	0a5b      	lsrs	r3, r3, #9
 800fad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fada:	ee07 3a90 	vmov	s15, r3
 800fade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800faea:	edd7 6a07 	vldr	s13, [r7, #28]
 800faee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800faf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800faf6:	ee17 2a90 	vmov	r2, s15
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800fafe:	4b1f      	ldr	r3, [pc, #124]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb02:	0c1b      	lsrs	r3, r3, #16
 800fb04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb08:	ee07 3a90 	vmov	s15, r3
 800fb0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fb14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb18:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb24:	ee17 2a90 	vmov	r2, s15
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800fb2c:	4b13      	ldr	r3, [pc, #76]	; (800fb7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb30:	0e1b      	lsrs	r3, r3, #24
 800fb32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb36:	ee07 3a90 	vmov	s15, r3
 800fb3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fb42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb46:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb52:	ee17 2a90 	vmov	r2, s15
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fb5a:	e008      	b.n	800fb6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2200      	movs	r2, #0
 800fb66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	609a      	str	r2, [r3, #8]
}
 800fb6e:	bf00      	nop
 800fb70:	3724      	adds	r7, #36	; 0x24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	58024400 	.word	0x58024400
 800fb80:	03d09000 	.word	0x03d09000
 800fb84:	46000000 	.word	0x46000000
 800fb88:	4c742400 	.word	0x4c742400
 800fb8c:	4a742400 	.word	0x4a742400
 800fb90:	4bbebc20 	.word	0x4bbebc20

0800fb94 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b089      	sub	sp, #36	; 0x24
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fb9c:	4ba0      	ldr	r3, [pc, #640]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fba0:	f003 0303 	and.w	r3, r3, #3
 800fba4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800fba6:	4b9e      	ldr	r3, [pc, #632]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbaa:	091b      	lsrs	r3, r3, #4
 800fbac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbb0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fbb2:	4b9b      	ldr	r3, [pc, #620]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb6:	f003 0301 	and.w	r3, r3, #1
 800fbba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800fbbc:	4b98      	ldr	r3, [pc, #608]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbc0:	08db      	lsrs	r3, r3, #3
 800fbc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fbc6:	693a      	ldr	r2, [r7, #16]
 800fbc8:	fb02 f303 	mul.w	r3, r2, r3
 800fbcc:	ee07 3a90 	vmov	s15, r3
 800fbd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbd4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f000 8111 	beq.w	800fe02 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fbe0:	69bb      	ldr	r3, [r7, #24]
 800fbe2:	2b02      	cmp	r3, #2
 800fbe4:	f000 8083 	beq.w	800fcee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	2b02      	cmp	r3, #2
 800fbec:	f200 80a1 	bhi.w	800fd32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fbf0:	69bb      	ldr	r3, [r7, #24]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d003      	beq.n	800fbfe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fbf6:	69bb      	ldr	r3, [r7, #24]
 800fbf8:	2b01      	cmp	r3, #1
 800fbfa:	d056      	beq.n	800fcaa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fbfc:	e099      	b.n	800fd32 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbfe:	4b88      	ldr	r3, [pc, #544]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	f003 0320 	and.w	r3, r3, #32
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d02d      	beq.n	800fc66 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fc0a:	4b85      	ldr	r3, [pc, #532]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	08db      	lsrs	r3, r3, #3
 800fc10:	f003 0303 	and.w	r3, r3, #3
 800fc14:	4a83      	ldr	r2, [pc, #524]	; (800fe24 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fc16:	fa22 f303 	lsr.w	r3, r2, r3
 800fc1a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	ee07 3a90 	vmov	s15, r3
 800fc22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	ee07 3a90 	vmov	s15, r3
 800fc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc34:	4b7a      	ldr	r3, [pc, #488]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc3c:	ee07 3a90 	vmov	s15, r3
 800fc40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc44:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc48:	eddf 5a77 	vldr	s11, [pc, #476]	; 800fe28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc60:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800fc64:	e087      	b.n	800fd76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	ee07 3a90 	vmov	s15, r3
 800fc6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc70:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800fe2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fc74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc78:	4b69      	ldr	r3, [pc, #420]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc80:	ee07 3a90 	vmov	s15, r3
 800fc84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc88:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc8c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800fe28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fca4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fca8:	e065      	b.n	800fd76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	ee07 3a90 	vmov	s15, r3
 800fcb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcb4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800fe30 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fcb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcbc:	4b58      	ldr	r3, [pc, #352]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fcc4:	ee07 3a90 	vmov	s15, r3
 800fcc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fccc:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcd0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800fe28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fce8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fcec:	e043      	b.n	800fd76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	ee07 3a90 	vmov	s15, r3
 800fcf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcf8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800fe34 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fcfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd00:	4b47      	ldr	r3, [pc, #284]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd08:	ee07 3a90 	vmov	s15, r3
 800fd0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd10:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd14:	eddf 5a44 	vldr	s11, [pc, #272]	; 800fe28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fd30:	e021      	b.n	800fd76 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	ee07 3a90 	vmov	s15, r3
 800fd38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd3c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fe2c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fd40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd44:	4b36      	ldr	r3, [pc, #216]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd4c:	ee07 3a90 	vmov	s15, r3
 800fd50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd54:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd58:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fe28 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fd74:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800fd76:	4b2a      	ldr	r3, [pc, #168]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd7a:	0a5b      	lsrs	r3, r3, #9
 800fd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd80:	ee07 3a90 	vmov	s15, r3
 800fd84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd90:	edd7 6a07 	vldr	s13, [r7, #28]
 800fd94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd9c:	ee17 2a90 	vmov	r2, s15
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800fda4:	4b1e      	ldr	r3, [pc, #120]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fda8:	0c1b      	lsrs	r3, r3, #16
 800fdaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdae:	ee07 3a90 	vmov	s15, r3
 800fdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fdba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fdbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800fdc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdca:	ee17 2a90 	vmov	r2, s15
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800fdd2:	4b13      	ldr	r3, [pc, #76]	; (800fe20 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdd6:	0e1b      	lsrs	r3, r3, #24
 800fdd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fddc:	ee07 3a90 	vmov	s15, r3
 800fde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fde4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fde8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fdec:	edd7 6a07 	vldr	s13, [r7, #28]
 800fdf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdf8:	ee17 2a90 	vmov	r2, s15
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fe00:	e008      	b.n	800fe14 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2200      	movs	r2, #0
 800fe06:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	609a      	str	r2, [r3, #8]
}
 800fe14:	bf00      	nop
 800fe16:	3724      	adds	r7, #36	; 0x24
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	58024400 	.word	0x58024400
 800fe24:	03d09000 	.word	0x03d09000
 800fe28:	46000000 	.word	0x46000000
 800fe2c:	4c742400 	.word	0x4c742400
 800fe30:	4a742400 	.word	0x4a742400
 800fe34:	4bbebc20 	.word	0x4bbebc20

0800fe38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fe42:	2300      	movs	r3, #0
 800fe44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fe46:	4b53      	ldr	r3, [pc, #332]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fe48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe4a:	f003 0303 	and.w	r3, r3, #3
 800fe4e:	2b03      	cmp	r3, #3
 800fe50:	d101      	bne.n	800fe56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fe52:	2301      	movs	r3, #1
 800fe54:	e099      	b.n	800ff8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fe56:	4b4f      	ldr	r3, [pc, #316]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	4a4e      	ldr	r2, [pc, #312]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fe5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe62:	f7f6 fcd9 	bl	8006818 <HAL_GetTick>
 800fe66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe68:	e008      	b.n	800fe7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800fe6a:	f7f6 fcd5 	bl	8006818 <HAL_GetTick>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	2b02      	cmp	r3, #2
 800fe76:	d901      	bls.n	800fe7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fe78:	2303      	movs	r3, #3
 800fe7a:	e086      	b.n	800ff8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe7c:	4b45      	ldr	r3, [pc, #276]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d1f0      	bne.n	800fe6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fe88:	4b42      	ldr	r3, [pc, #264]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fe8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	031b      	lsls	r3, r3, #12
 800fe96:	493f      	ldr	r1, [pc, #252]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	628b      	str	r3, [r1, #40]	; 0x28
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	3b01      	subs	r3, #1
 800fea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	689b      	ldr	r3, [r3, #8]
 800feaa:	3b01      	subs	r3, #1
 800feac:	025b      	lsls	r3, r3, #9
 800feae:	b29b      	uxth	r3, r3
 800feb0:	431a      	orrs	r2, r3
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	68db      	ldr	r3, [r3, #12]
 800feb6:	3b01      	subs	r3, #1
 800feb8:	041b      	lsls	r3, r3, #16
 800feba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800febe:	431a      	orrs	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	691b      	ldr	r3, [r3, #16]
 800fec4:	3b01      	subs	r3, #1
 800fec6:	061b      	lsls	r3, r3, #24
 800fec8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fecc:	4931      	ldr	r1, [pc, #196]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fece:	4313      	orrs	r3, r2
 800fed0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fed2:	4b30      	ldr	r3, [pc, #192]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	695b      	ldr	r3, [r3, #20]
 800fede:	492d      	ldr	r1, [pc, #180]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fee0:	4313      	orrs	r3, r2
 800fee2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fee4:	4b2b      	ldr	r3, [pc, #172]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fee8:	f023 0220 	bic.w	r2, r3, #32
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	699b      	ldr	r3, [r3, #24]
 800fef0:	4928      	ldr	r1, [pc, #160]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fef2:	4313      	orrs	r3, r2
 800fef4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fef6:	4b27      	ldr	r3, [pc, #156]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefa:	4a26      	ldr	r2, [pc, #152]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800fefc:	f023 0310 	bic.w	r3, r3, #16
 800ff00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ff02:	4b24      	ldr	r3, [pc, #144]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff06:	4b24      	ldr	r3, [pc, #144]	; (800ff98 <RCCEx_PLL2_Config+0x160>)
 800ff08:	4013      	ands	r3, r2
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	69d2      	ldr	r2, [r2, #28]
 800ff0e:	00d2      	lsls	r2, r2, #3
 800ff10:	4920      	ldr	r1, [pc, #128]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff12:	4313      	orrs	r3, r2
 800ff14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ff16:	4b1f      	ldr	r3, [pc, #124]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff1a:	4a1e      	ldr	r2, [pc, #120]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff1c:	f043 0310 	orr.w	r3, r3, #16
 800ff20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ff22:	683b      	ldr	r3, [r7, #0]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d106      	bne.n	800ff36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ff28:	4b1a      	ldr	r3, [pc, #104]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2c:	4a19      	ldr	r2, [pc, #100]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ff34:	e00f      	b.n	800ff56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d106      	bne.n	800ff4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ff3c:	4b15      	ldr	r3, [pc, #84]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff40:	4a14      	ldr	r2, [pc, #80]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff46:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ff48:	e005      	b.n	800ff56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ff4a:	4b12      	ldr	r3, [pc, #72]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff4e:	4a11      	ldr	r2, [pc, #68]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ff54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ff56:	4b0f      	ldr	r3, [pc, #60]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	4a0e      	ldr	r2, [pc, #56]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ff60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ff62:	f7f6 fc59 	bl	8006818 <HAL_GetTick>
 800ff66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff68:	e008      	b.n	800ff7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ff6a:	f7f6 fc55 	bl	8006818 <HAL_GetTick>
 800ff6e:	4602      	mov	r2, r0
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	1ad3      	subs	r3, r2, r3
 800ff74:	2b02      	cmp	r3, #2
 800ff76:	d901      	bls.n	800ff7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ff78:	2303      	movs	r3, #3
 800ff7a:	e006      	b.n	800ff8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff7c:	4b05      	ldr	r3, [pc, #20]	; (800ff94 <RCCEx_PLL2_Config+0x15c>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d0f0      	beq.n	800ff6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ff88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3710      	adds	r7, #16
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	58024400 	.word	0x58024400
 800ff98:	ffff0007 	.word	0xffff0007

0800ff9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ffaa:	4b53      	ldr	r3, [pc, #332]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 800ffac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffae:	f003 0303 	and.w	r3, r3, #3
 800ffb2:	2b03      	cmp	r3, #3
 800ffb4:	d101      	bne.n	800ffba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e099      	b.n	80100ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ffba:	4b4f      	ldr	r3, [pc, #316]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	4a4e      	ldr	r2, [pc, #312]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 800ffc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ffc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffc6:	f7f6 fc27 	bl	8006818 <HAL_GetTick>
 800ffca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffcc:	e008      	b.n	800ffe0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ffce:	f7f6 fc23 	bl	8006818 <HAL_GetTick>
 800ffd2:	4602      	mov	r2, r0
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	1ad3      	subs	r3, r2, r3
 800ffd8:	2b02      	cmp	r3, #2
 800ffda:	d901      	bls.n	800ffe0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ffdc:	2303      	movs	r3, #3
 800ffde:	e086      	b.n	80100ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffe0:	4b45      	ldr	r3, [pc, #276]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1f0      	bne.n	800ffce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ffec:	4b42      	ldr	r3, [pc, #264]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 800ffee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fff0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	051b      	lsls	r3, r3, #20
 800fffa:	493f      	ldr	r1, [pc, #252]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 800fffc:	4313      	orrs	r3, r2
 800fffe:	628b      	str	r3, [r1, #40]	; 0x28
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	3b01      	subs	r3, #1
 8010006:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	689b      	ldr	r3, [r3, #8]
 801000e:	3b01      	subs	r3, #1
 8010010:	025b      	lsls	r3, r3, #9
 8010012:	b29b      	uxth	r3, r3
 8010014:	431a      	orrs	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	3b01      	subs	r3, #1
 801001c:	041b      	lsls	r3, r3, #16
 801001e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010022:	431a      	orrs	r2, r3
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	3b01      	subs	r3, #1
 801002a:	061b      	lsls	r3, r3, #24
 801002c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010030:	4931      	ldr	r1, [pc, #196]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 8010032:	4313      	orrs	r3, r2
 8010034:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010036:	4b30      	ldr	r3, [pc, #192]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 8010038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	695b      	ldr	r3, [r3, #20]
 8010042:	492d      	ldr	r1, [pc, #180]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 8010044:	4313      	orrs	r3, r2
 8010046:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010048:	4b2b      	ldr	r3, [pc, #172]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 801004a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801004c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	699b      	ldr	r3, [r3, #24]
 8010054:	4928      	ldr	r1, [pc, #160]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 8010056:	4313      	orrs	r3, r2
 8010058:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801005a:	4b27      	ldr	r3, [pc, #156]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 801005c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801005e:	4a26      	ldr	r2, [pc, #152]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 8010060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010066:	4b24      	ldr	r3, [pc, #144]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 8010068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801006a:	4b24      	ldr	r3, [pc, #144]	; (80100fc <RCCEx_PLL3_Config+0x160>)
 801006c:	4013      	ands	r3, r2
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	69d2      	ldr	r2, [r2, #28]
 8010072:	00d2      	lsls	r2, r2, #3
 8010074:	4920      	ldr	r1, [pc, #128]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 8010076:	4313      	orrs	r3, r2
 8010078:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801007a:	4b1f      	ldr	r3, [pc, #124]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 801007c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007e:	4a1e      	ldr	r2, [pc, #120]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 8010080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010084:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d106      	bne.n	801009a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801008c:	4b1a      	ldr	r3, [pc, #104]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 801008e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010090:	4a19      	ldr	r2, [pc, #100]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 8010092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8010096:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010098:	e00f      	b.n	80100ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	2b01      	cmp	r3, #1
 801009e:	d106      	bne.n	80100ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80100a0:	4b15      	ldr	r3, [pc, #84]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 80100a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a4:	4a14      	ldr	r2, [pc, #80]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 80100a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80100aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80100ac:	e005      	b.n	80100ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80100ae:	4b12      	ldr	r3, [pc, #72]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 80100b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b2:	4a11      	ldr	r2, [pc, #68]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 80100b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80100b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80100ba:	4b0f      	ldr	r3, [pc, #60]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a0e      	ldr	r2, [pc, #56]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 80100c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80100c6:	f7f6 fba7 	bl	8006818 <HAL_GetTick>
 80100ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80100cc:	e008      	b.n	80100e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80100ce:	f7f6 fba3 	bl	8006818 <HAL_GetTick>
 80100d2:	4602      	mov	r2, r0
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	1ad3      	subs	r3, r2, r3
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d901      	bls.n	80100e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80100dc:	2303      	movs	r3, #3
 80100de:	e006      	b.n	80100ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80100e0:	4b05      	ldr	r3, [pc, #20]	; (80100f8 <RCCEx_PLL3_Config+0x15c>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d0f0      	beq.n	80100ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80100ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3710      	adds	r7, #16
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
 80100f6:	bf00      	nop
 80100f8:	58024400 	.word	0x58024400
 80100fc:	ffff0007 	.word	0xffff0007

08010100 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801010e:	2301      	movs	r3, #1
 8010110:	e0f1      	b.n	80102f6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4a78      	ldr	r2, [pc, #480]	; (8010300 <HAL_SPI_Init+0x200>)
 801011e:	4293      	cmp	r3, r2
 8010120:	d00f      	beq.n	8010142 <HAL_SPI_Init+0x42>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a77      	ldr	r2, [pc, #476]	; (8010304 <HAL_SPI_Init+0x204>)
 8010128:	4293      	cmp	r3, r2
 801012a:	d00a      	beq.n	8010142 <HAL_SPI_Init+0x42>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a75      	ldr	r2, [pc, #468]	; (8010308 <HAL_SPI_Init+0x208>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d005      	beq.n	8010142 <HAL_SPI_Init+0x42>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	68db      	ldr	r3, [r3, #12]
 801013a:	2b0f      	cmp	r3, #15
 801013c:	d901      	bls.n	8010142 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801013e:	2301      	movs	r3, #1
 8010140:	e0d9      	b.n	80102f6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010142:	6878      	ldr	r0, [r7, #4]
 8010144:	f000 ff66 	bl	8011014 <SPI_GetPacketSize>
 8010148:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	4a6c      	ldr	r2, [pc, #432]	; (8010300 <HAL_SPI_Init+0x200>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d00c      	beq.n	801016e <HAL_SPI_Init+0x6e>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	4a6a      	ldr	r2, [pc, #424]	; (8010304 <HAL_SPI_Init+0x204>)
 801015a:	4293      	cmp	r3, r2
 801015c:	d007      	beq.n	801016e <HAL_SPI_Init+0x6e>
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	4a69      	ldr	r2, [pc, #420]	; (8010308 <HAL_SPI_Init+0x208>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d002      	beq.n	801016e <HAL_SPI_Init+0x6e>
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2b08      	cmp	r3, #8
 801016c:	d811      	bhi.n	8010192 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010172:	4a63      	ldr	r2, [pc, #396]	; (8010300 <HAL_SPI_Init+0x200>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d009      	beq.n	801018c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a61      	ldr	r2, [pc, #388]	; (8010304 <HAL_SPI_Init+0x204>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d004      	beq.n	801018c <HAL_SPI_Init+0x8c>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4a60      	ldr	r2, [pc, #384]	; (8010308 <HAL_SPI_Init+0x208>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d104      	bne.n	8010196 <HAL_SPI_Init+0x96>
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2b10      	cmp	r3, #16
 8010190:	d901      	bls.n	8010196 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010192:	2301      	movs	r3, #1
 8010194:	e0af      	b.n	80102f6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801019c:	b2db      	uxtb	r3, r3
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d106      	bne.n	80101b0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f7f4 fd50 	bl	8004c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2202      	movs	r2, #2
 80101b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f022 0201 	bic.w	r2, r2, #1
 80101c6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80101d2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	699b      	ldr	r3, [r3, #24]
 80101d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80101dc:	d119      	bne.n	8010212 <HAL_SPI_Init+0x112>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80101e6:	d103      	bne.n	80101f0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d008      	beq.n	8010202 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d10c      	bne.n	8010212 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80101fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010200:	d107      	bne.n	8010212 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010210:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	69da      	ldr	r2, [r3, #28]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801021a:	431a      	orrs	r2, r3
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	431a      	orrs	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010224:	ea42 0103 	orr.w	r1, r2, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	68da      	ldr	r2, [r3, #12]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	430a      	orrs	r2, r1
 8010232:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801023c:	431a      	orrs	r2, r3
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010242:	431a      	orrs	r2, r3
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	699b      	ldr	r3, [r3, #24]
 8010248:	431a      	orrs	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	431a      	orrs	r2, r3
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	695b      	ldr	r3, [r3, #20]
 8010254:	431a      	orrs	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6a1b      	ldr	r3, [r3, #32]
 801025a:	431a      	orrs	r2, r3
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	431a      	orrs	r2, r3
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010266:	431a      	orrs	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	689b      	ldr	r3, [r3, #8]
 801026c:	431a      	orrs	r2, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010272:	ea42 0103 	orr.w	r1, r2, r3
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	430a      	orrs	r2, r1
 8010280:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d113      	bne.n	80102b2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	689b      	ldr	r3, [r3, #8]
 8010290:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801029c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	689b      	ldr	r3, [r3, #8]
 80102a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80102b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f022 0201 	bic.w	r2, r2, #1
 80102c0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d00a      	beq.n	80102e4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	68db      	ldr	r3, [r3, #12]
 80102d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	430a      	orrs	r2, r1
 80102e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2200      	movs	r2, #0
 80102e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2201      	movs	r2, #1
 80102f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3710      	adds	r7, #16
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	40013000 	.word	0x40013000
 8010304:	40003800 	.word	0x40003800
 8010308:	40003c00 	.word	0x40003c00

0801030c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b08a      	sub	sp, #40	; 0x28
 8010310:	af02      	add	r7, sp, #8
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	60b9      	str	r1, [r7, #8]
 8010316:	603b      	str	r3, [r7, #0]
 8010318:	4613      	mov	r3, r2
 801031a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	3320      	adds	r3, #32
 8010322:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010324:	2300      	movs	r3, #0
 8010326:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801032e:	2b01      	cmp	r3, #1
 8010330:	d101      	bne.n	8010336 <HAL_SPI_Transmit+0x2a>
 8010332:	2302      	movs	r3, #2
 8010334:	e1d7      	b.n	80106e6 <HAL_SPI_Transmit+0x3da>
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2201      	movs	r2, #1
 801033a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801033e:	f7f6 fa6b 	bl	8006818 <HAL_GetTick>
 8010342:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801034a:	b2db      	uxtb	r3, r3
 801034c:	2b01      	cmp	r3, #1
 801034e:	d007      	beq.n	8010360 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8010350:	2302      	movs	r3, #2
 8010352:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	2200      	movs	r2, #0
 8010358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801035c:	7efb      	ldrb	r3, [r7, #27]
 801035e:	e1c2      	b.n	80106e6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d002      	beq.n	801036c <HAL_SPI_Transmit+0x60>
 8010366:	88fb      	ldrh	r3, [r7, #6]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d107      	bne.n	801037c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 801036c:	2301      	movs	r3, #1
 801036e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2200      	movs	r2, #0
 8010374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010378:	7efb      	ldrb	r3, [r7, #27]
 801037a:	e1b4      	b.n	80106e6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	2203      	movs	r2, #3
 8010380:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2200      	movs	r2, #0
 8010388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	88fa      	ldrh	r2, [r7, #6]
 8010396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	88fa      	ldrh	r2, [r7, #6]
 801039e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	2200      	movs	r2, #0
 80103a6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	2200      	movs	r2, #0
 80103ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	2200      	movs	r2, #0
 80103b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	2200      	movs	r2, #0
 80103bc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	2200      	movs	r2, #0
 80103c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80103cc:	d107      	bne.n	80103de <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	681a      	ldr	r2, [r3, #0]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80103dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	685a      	ldr	r2, [r3, #4]
 80103e4:	4b96      	ldr	r3, [pc, #600]	; (8010640 <HAL_SPI_Transmit+0x334>)
 80103e6:	4013      	ands	r3, r2
 80103e8:	88f9      	ldrh	r1, [r7, #6]
 80103ea:	68fa      	ldr	r2, [r7, #12]
 80103ec:	6812      	ldr	r2, [r2, #0]
 80103ee:	430b      	orrs	r3, r1
 80103f0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f042 0201 	orr.w	r2, r2, #1
 8010400:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801040a:	d107      	bne.n	801041c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801041a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	2b0f      	cmp	r3, #15
 8010422:	d947      	bls.n	80104b4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010424:	e03f      	b.n	80104a6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	695b      	ldr	r3, [r3, #20]
 801042c:	f003 0302 	and.w	r3, r3, #2
 8010430:	2b02      	cmp	r3, #2
 8010432:	d114      	bne.n	801045e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	6812      	ldr	r2, [r2, #0]
 801043e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010444:	1d1a      	adds	r2, r3, #4
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010450:	b29b      	uxth	r3, r3
 8010452:	3b01      	subs	r3, #1
 8010454:	b29a      	uxth	r2, r3
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801045c:	e023      	b.n	80104a6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801045e:	f7f6 f9db 	bl	8006818 <HAL_GetTick>
 8010462:	4602      	mov	r2, r0
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	1ad3      	subs	r3, r2, r3
 8010468:	683a      	ldr	r2, [r7, #0]
 801046a:	429a      	cmp	r2, r3
 801046c:	d803      	bhi.n	8010476 <HAL_SPI_Transmit+0x16a>
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010474:	d102      	bne.n	801047c <HAL_SPI_Transmit+0x170>
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d114      	bne.n	80104a6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f000 fcfb 	bl	8010e78 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2200      	movs	r2, #0
 8010486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010490:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2201      	movs	r2, #1
 801049e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80104a2:	2303      	movs	r3, #3
 80104a4:	e11f      	b.n	80106e6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d1b9      	bne.n	8010426 <HAL_SPI_Transmit+0x11a>
 80104b2:	e0f2      	b.n	801069a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	68db      	ldr	r3, [r3, #12]
 80104b8:	2b07      	cmp	r3, #7
 80104ba:	f240 80e7 	bls.w	801068c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80104be:	e05d      	b.n	801057c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	695b      	ldr	r3, [r3, #20]
 80104c6:	f003 0302 	and.w	r3, r3, #2
 80104ca:	2b02      	cmp	r3, #2
 80104cc:	d132      	bne.n	8010534 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	2b01      	cmp	r3, #1
 80104d8:	d918      	bls.n	801050c <HAL_SPI_Transmit+0x200>
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d014      	beq.n	801050c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	6812      	ldr	r2, [r2, #0]
 80104ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104f2:	1d1a      	adds	r2, r3, #4
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80104fe:	b29b      	uxth	r3, r3
 8010500:	3b02      	subs	r3, #2
 8010502:	b29a      	uxth	r2, r3
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801050a:	e037      	b.n	801057c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010510:	881a      	ldrh	r2, [r3, #0]
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801051a:	1c9a      	adds	r2, r3, #2
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010526:	b29b      	uxth	r3, r3
 8010528:	3b01      	subs	r3, #1
 801052a:	b29a      	uxth	r2, r3
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010532:	e023      	b.n	801057c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010534:	f7f6 f970 	bl	8006818 <HAL_GetTick>
 8010538:	4602      	mov	r2, r0
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	1ad3      	subs	r3, r2, r3
 801053e:	683a      	ldr	r2, [r7, #0]
 8010540:	429a      	cmp	r2, r3
 8010542:	d803      	bhi.n	801054c <HAL_SPI_Transmit+0x240>
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801054a:	d102      	bne.n	8010552 <HAL_SPI_Transmit+0x246>
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d114      	bne.n	801057c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010552:	68f8      	ldr	r0, [r7, #12]
 8010554:	f000 fc90 	bl	8010e78 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010566:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2201      	movs	r2, #1
 8010574:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010578:	2303      	movs	r3, #3
 801057a:	e0b4      	b.n	80106e6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010582:	b29b      	uxth	r3, r3
 8010584:	2b00      	cmp	r3, #0
 8010586:	d19b      	bne.n	80104c0 <HAL_SPI_Transmit+0x1b4>
 8010588:	e087      	b.n	801069a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	695b      	ldr	r3, [r3, #20]
 8010590:	f003 0302 	and.w	r3, r3, #2
 8010594:	2b02      	cmp	r3, #2
 8010596:	d155      	bne.n	8010644 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801059e:	b29b      	uxth	r3, r3
 80105a0:	2b03      	cmp	r3, #3
 80105a2:	d918      	bls.n	80105d6 <HAL_SPI_Transmit+0x2ca>
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105a8:	2b40      	cmp	r3, #64	; 0x40
 80105aa:	d914      	bls.n	80105d6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	6812      	ldr	r2, [r2, #0]
 80105b6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105bc:	1d1a      	adds	r2, r3, #4
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	3b04      	subs	r3, #4
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80105d4:	e05a      	b.n	801068c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80105dc:	b29b      	uxth	r3, r3
 80105de:	2b01      	cmp	r3, #1
 80105e0:	d917      	bls.n	8010612 <HAL_SPI_Transmit+0x306>
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d013      	beq.n	8010612 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105ee:	881a      	ldrh	r2, [r3, #0]
 80105f0:	69fb      	ldr	r3, [r7, #28]
 80105f2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105f8:	1c9a      	adds	r2, r3, #2
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010604:	b29b      	uxth	r3, r3
 8010606:	3b02      	subs	r3, #2
 8010608:	b29a      	uxth	r2, r3
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010610:	e03c      	b.n	801068c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	3320      	adds	r3, #32
 801061c:	7812      	ldrb	r2, [r2, #0]
 801061e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010624:	1c5a      	adds	r2, r3, #1
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010630:	b29b      	uxth	r3, r3
 8010632:	3b01      	subs	r3, #1
 8010634:	b29a      	uxth	r2, r3
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 801063c:	e026      	b.n	801068c <HAL_SPI_Transmit+0x380>
 801063e:	bf00      	nop
 8010640:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010644:	f7f6 f8e8 	bl	8006818 <HAL_GetTick>
 8010648:	4602      	mov	r2, r0
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	1ad3      	subs	r3, r2, r3
 801064e:	683a      	ldr	r2, [r7, #0]
 8010650:	429a      	cmp	r2, r3
 8010652:	d803      	bhi.n	801065c <HAL_SPI_Transmit+0x350>
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801065a:	d102      	bne.n	8010662 <HAL_SPI_Transmit+0x356>
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d114      	bne.n	801068c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010662:	68f8      	ldr	r0, [r7, #12]
 8010664:	f000 fc08 	bl	8010e78 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2200      	movs	r2, #0
 801066c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010676:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	2201      	movs	r2, #1
 8010684:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010688:	2303      	movs	r3, #3
 801068a:	e02c      	b.n	80106e6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010692:	b29b      	uxth	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	f47f af78 	bne.w	801058a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	2200      	movs	r2, #0
 80106a2:	2108      	movs	r1, #8
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f000 fc87 	bl	8010fb8 <SPI_WaitOnFlagUntilTimeout>
 80106aa:	4603      	mov	r3, r0
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d007      	beq.n	80106c0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106b6:	f043 0220 	orr.w	r2, r3, #32
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80106c0:	68f8      	ldr	r0, [r7, #12]
 80106c2:	f000 fbd9 	bl	8010e78 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2200      	movs	r2, #0
 80106ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2201      	movs	r2, #1
 80106d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d001      	beq.n	80106e4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80106e0:	2301      	movs	r3, #1
 80106e2:	e000      	b.n	80106e6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80106e4:	7efb      	ldrb	r3, [r7, #27]
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	3720      	adds	r7, #32
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
 80106ee:	bf00      	nop

080106f0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b08a      	sub	sp, #40	; 0x28
 80106f4:	af02      	add	r7, sp, #8
 80106f6:	60f8      	str	r0, [r7, #12]
 80106f8:	60b9      	str	r1, [r7, #8]
 80106fa:	603b      	str	r3, [r7, #0]
 80106fc:	4613      	mov	r3, r2
 80106fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010700:	2300      	movs	r3, #0
 8010702:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	3330      	adds	r3, #48	; 0x30
 801070a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010714:	d112      	bne.n	801073c <HAL_SPI_Receive+0x4c>
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	689b      	ldr	r3, [r3, #8]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d10e      	bne.n	801073c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2204      	movs	r2, #4
 8010722:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010726:	88fa      	ldrh	r2, [r7, #6]
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	9300      	str	r3, [sp, #0]
 801072c:	4613      	mov	r3, r2
 801072e:	68ba      	ldr	r2, [r7, #8]
 8010730:	68b9      	ldr	r1, [r7, #8]
 8010732:	68f8      	ldr	r0, [r7, #12]
 8010734:	f000 f978 	bl	8010a28 <HAL_SPI_TransmitReceive>
 8010738:	4603      	mov	r3, r0
 801073a:	e16f      	b.n	8010a1c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010742:	2b01      	cmp	r3, #1
 8010744:	d101      	bne.n	801074a <HAL_SPI_Receive+0x5a>
 8010746:	2302      	movs	r3, #2
 8010748:	e168      	b.n	8010a1c <HAL_SPI_Receive+0x32c>
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2201      	movs	r2, #1
 801074e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010752:	f7f6 f861 	bl	8006818 <HAL_GetTick>
 8010756:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801075e:	b2db      	uxtb	r3, r3
 8010760:	2b01      	cmp	r3, #1
 8010762:	d007      	beq.n	8010774 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8010764:	2302      	movs	r3, #2
 8010766:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2200      	movs	r2, #0
 801076c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010770:	7ffb      	ldrb	r3, [r7, #31]
 8010772:	e153      	b.n	8010a1c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	2b00      	cmp	r3, #0
 8010778:	d002      	beq.n	8010780 <HAL_SPI_Receive+0x90>
 801077a:	88fb      	ldrh	r3, [r7, #6]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d107      	bne.n	8010790 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8010780:	2301      	movs	r3, #1
 8010782:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	2200      	movs	r2, #0
 8010788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801078c:	7ffb      	ldrb	r3, [r7, #31]
 801078e:	e145      	b.n	8010a1c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2204      	movs	r2, #4
 8010794:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2200      	movs	r2, #0
 801079c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	68ba      	ldr	r2, [r7, #8]
 80107a4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	88fa      	ldrh	r2, [r7, #6]
 80107aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	88fa      	ldrh	r2, [r7, #6]
 80107b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2200      	movs	r2, #0
 80107ba:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2200      	movs	r2, #0
 80107c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2200      	movs	r2, #0
 80107c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2200      	movs	r2, #0
 80107d0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2200      	movs	r2, #0
 80107d6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	689b      	ldr	r3, [r3, #8]
 80107dc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80107e0:	d107      	bne.n	80107f2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80107f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	685a      	ldr	r2, [r3, #4]
 80107f8:	4b8a      	ldr	r3, [pc, #552]	; (8010a24 <HAL_SPI_Receive+0x334>)
 80107fa:	4013      	ands	r3, r2
 80107fc:	88f9      	ldrh	r1, [r7, #6]
 80107fe:	68fa      	ldr	r2, [r7, #12]
 8010800:	6812      	ldr	r2, [r2, #0]
 8010802:	430b      	orrs	r3, r1
 8010804:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f042 0201 	orr.w	r2, r2, #1
 8010814:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801081e:	d107      	bne.n	8010830 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	681a      	ldr	r2, [r3, #0]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801082e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	68db      	ldr	r3, [r3, #12]
 8010834:	2b0f      	cmp	r3, #15
 8010836:	d948      	bls.n	80108ca <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010838:	e040      	b.n	80108bc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	695a      	ldr	r2, [r3, #20]
 8010840:	f248 0308 	movw	r3, #32776	; 0x8008
 8010844:	4013      	ands	r3, r2
 8010846:	2b00      	cmp	r3, #0
 8010848:	d014      	beq.n	8010874 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	681a      	ldr	r2, [r3, #0]
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010852:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010854:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801085a:	1d1a      	adds	r2, r3, #4
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010866:	b29b      	uxth	r3, r3
 8010868:	3b01      	subs	r3, #1
 801086a:	b29a      	uxth	r2, r3
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010872:	e023      	b.n	80108bc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010874:	f7f5 ffd0 	bl	8006818 <HAL_GetTick>
 8010878:	4602      	mov	r2, r0
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	1ad3      	subs	r3, r2, r3
 801087e:	683a      	ldr	r2, [r7, #0]
 8010880:	429a      	cmp	r2, r3
 8010882:	d803      	bhi.n	801088c <HAL_SPI_Receive+0x19c>
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	f1b3 3fff 	cmp.w	r3, #4294967295
 801088a:	d102      	bne.n	8010892 <HAL_SPI_Receive+0x1a2>
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d114      	bne.n	80108bc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010892:	68f8      	ldr	r0, [r7, #12]
 8010894:	f000 faf0 	bl	8010e78 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2200      	movs	r2, #0
 801089c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	2201      	movs	r2, #1
 80108b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80108b8:	2303      	movs	r3, #3
 80108ba:	e0af      	b.n	8010a1c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1b8      	bne.n	801083a <HAL_SPI_Receive+0x14a>
 80108c8:	e095      	b.n	80109f6 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	2b07      	cmp	r3, #7
 80108d0:	f240 808b 	bls.w	80109ea <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80108d4:	e03f      	b.n	8010956 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	695b      	ldr	r3, [r3, #20]
 80108dc:	f003 0301 	and.w	r3, r3, #1
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d114      	bne.n	801090e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108e8:	69ba      	ldr	r2, [r7, #24]
 80108ea:	8812      	ldrh	r2, [r2, #0]
 80108ec:	b292      	uxth	r2, r2
 80108ee:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80108f4:	1c9a      	adds	r2, r3, #2
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010900:	b29b      	uxth	r3, r3
 8010902:	3b01      	subs	r3, #1
 8010904:	b29a      	uxth	r2, r3
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801090c:	e023      	b.n	8010956 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801090e:	f7f5 ff83 	bl	8006818 <HAL_GetTick>
 8010912:	4602      	mov	r2, r0
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	1ad3      	subs	r3, r2, r3
 8010918:	683a      	ldr	r2, [r7, #0]
 801091a:	429a      	cmp	r2, r3
 801091c:	d803      	bhi.n	8010926 <HAL_SPI_Receive+0x236>
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010924:	d102      	bne.n	801092c <HAL_SPI_Receive+0x23c>
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d114      	bne.n	8010956 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801092c:	68f8      	ldr	r0, [r7, #12]
 801092e:	f000 faa3 	bl	8010e78 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	2200      	movs	r2, #0
 8010936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010940:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2201      	movs	r2, #1
 801094e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010952:	2303      	movs	r3, #3
 8010954:	e062      	b.n	8010a1c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801095c:	b29b      	uxth	r3, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	d1b9      	bne.n	80108d6 <HAL_SPI_Receive+0x1e6>
 8010962:	e048      	b.n	80109f6 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	695b      	ldr	r3, [r3, #20]
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	2b01      	cmp	r3, #1
 8010970:	d117      	bne.n	80109a2 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801097e:	7812      	ldrb	r2, [r2, #0]
 8010980:	b2d2      	uxtb	r2, r2
 8010982:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010988:	1c5a      	adds	r2, r3, #1
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010994:	b29b      	uxth	r3, r3
 8010996:	3b01      	subs	r3, #1
 8010998:	b29a      	uxth	r2, r3
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80109a0:	e023      	b.n	80109ea <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80109a2:	f7f5 ff39 	bl	8006818 <HAL_GetTick>
 80109a6:	4602      	mov	r2, r0
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	1ad3      	subs	r3, r2, r3
 80109ac:	683a      	ldr	r2, [r7, #0]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d803      	bhi.n	80109ba <HAL_SPI_Receive+0x2ca>
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b8:	d102      	bne.n	80109c0 <HAL_SPI_Receive+0x2d0>
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d114      	bne.n	80109ea <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80109c0:	68f8      	ldr	r0, [r7, #12]
 80109c2:	f000 fa59 	bl	8010e78 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2200      	movs	r2, #0
 80109ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2201      	movs	r2, #1
 80109e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80109e6:	2303      	movs	r3, #3
 80109e8:	e018      	b.n	8010a1c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80109f0:	b29b      	uxth	r3, r3
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d1b6      	bne.n	8010964 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80109f6:	68f8      	ldr	r0, [r7, #12]
 80109f8:	f000 fa3e 	bl	8010e78 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	2200      	movs	r2, #0
 8010a00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2201      	movs	r2, #1
 8010a08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d001      	beq.n	8010a1a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8010a16:	2301      	movs	r3, #1
 8010a18:	e000      	b.n	8010a1c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8010a1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3720      	adds	r7, #32
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	ffff0000 	.word	0xffff0000

08010a28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b08e      	sub	sp, #56	; 0x38
 8010a2c:	af02      	add	r7, sp, #8
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	607a      	str	r2, [r7, #4]
 8010a34:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010a36:	2300      	movs	r3, #0
 8010a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	3320      	adds	r3, #32
 8010a42:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	3330      	adds	r3, #48	; 0x30
 8010a4a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d101      	bne.n	8010a5a <HAL_SPI_TransmitReceive+0x32>
 8010a56:	2302      	movs	r3, #2
 8010a58:	e209      	b.n	8010e6e <HAL_SPI_TransmitReceive+0x446>
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2201      	movs	r2, #1
 8010a5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010a62:	f7f5 fed9 	bl	8006818 <HAL_GetTick>
 8010a66:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8010a68:	887b      	ldrh	r3, [r7, #2]
 8010a6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8010a6c:	887b      	ldrh	r3, [r7, #2]
 8010a6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010a76:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	685b      	ldr	r3, [r3, #4]
 8010a7c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010a7e:	7efb      	ldrb	r3, [r7, #27]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d014      	beq.n	8010aae <HAL_SPI_TransmitReceive+0x86>
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010a8a:	d106      	bne.n	8010a9a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d102      	bne.n	8010a9a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8010a94:	7efb      	ldrb	r3, [r7, #27]
 8010a96:	2b04      	cmp	r3, #4
 8010a98:	d009      	beq.n	8010aae <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010aac:	e1df      	b.n	8010e6e <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d005      	beq.n	8010ac0 <HAL_SPI_TransmitReceive+0x98>
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d002      	beq.n	8010ac0 <HAL_SPI_TransmitReceive+0x98>
 8010aba:	887b      	ldrh	r3, [r7, #2]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d109      	bne.n	8010ad4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010ace:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010ad2:	e1cc      	b.n	8010e6e <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010ada:	b2db      	uxtb	r3, r3
 8010adc:	2b04      	cmp	r3, #4
 8010ade:	d003      	beq.n	8010ae8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2205      	movs	r2, #5
 8010ae4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2200      	movs	r2, #0
 8010aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	887a      	ldrh	r2, [r7, #2]
 8010afa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	887a      	ldrh	r2, [r7, #2]
 8010b02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	68ba      	ldr	r2, [r7, #8]
 8010b0a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	887a      	ldrh	r2, [r7, #2]
 8010b10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	887a      	ldrh	r2, [r7, #2]
 8010b18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	2200      	movs	r2, #0
 8010b26:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	685a      	ldr	r2, [r3, #4]
 8010b2e:	4b82      	ldr	r3, [pc, #520]	; (8010d38 <HAL_SPI_TransmitReceive+0x310>)
 8010b30:	4013      	ands	r3, r2
 8010b32:	8879      	ldrh	r1, [r7, #2]
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	6812      	ldr	r2, [r2, #0]
 8010b38:	430b      	orrs	r3, r1
 8010b3a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	681a      	ldr	r2, [r3, #0]
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	f042 0201 	orr.w	r2, r2, #1
 8010b4a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010b54:	d107      	bne.n	8010b66 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	68db      	ldr	r3, [r3, #12]
 8010b6a:	2b0f      	cmp	r3, #15
 8010b6c:	d970      	bls.n	8010c50 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010b6e:	e068      	b.n	8010c42 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	695b      	ldr	r3, [r3, #20]
 8010b76:	f003 0302 	and.w	r3, r3, #2
 8010b7a:	2b02      	cmp	r3, #2
 8010b7c:	d11a      	bne.n	8010bb4 <HAL_SPI_TransmitReceive+0x18c>
 8010b7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d017      	beq.n	8010bb4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	6812      	ldr	r2, [r2, #0]
 8010b8e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b94:	1d1a      	adds	r2, r3, #4
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	3b01      	subs	r3, #1
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010bb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	695a      	ldr	r2, [r3, #20]
 8010bba:	f248 0308 	movw	r3, #32776	; 0x8008
 8010bbe:	4013      	ands	r3, r2
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d01a      	beq.n	8010bfa <HAL_SPI_TransmitReceive+0x1d2>
 8010bc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d017      	beq.n	8010bfa <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681a      	ldr	r2, [r3, #0]
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010bd2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010bd4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010bda:	1d1a      	adds	r2, r3, #4
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	3b01      	subs	r3, #1
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010bf8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010bfa:	f7f5 fe0d 	bl	8006818 <HAL_GetTick>
 8010bfe:	4602      	mov	r2, r0
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	1ad3      	subs	r3, r2, r3
 8010c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c06:	429a      	cmp	r2, r3
 8010c08:	d803      	bhi.n	8010c12 <HAL_SPI_TransmitReceive+0x1ea>
 8010c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c10:	d102      	bne.n	8010c18 <HAL_SPI_TransmitReceive+0x1f0>
 8010c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d114      	bne.n	8010c42 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010c18:	68f8      	ldr	r0, [r7, #12]
 8010c1a:	f000 f92d 	bl	8010e78 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	2200      	movs	r2, #0
 8010c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010c2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2201      	movs	r2, #1
 8010c3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8010c3e:	2303      	movs	r3, #3
 8010c40:	e115      	b.n	8010e6e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010c42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d193      	bne.n	8010b70 <HAL_SPI_TransmitReceive+0x148>
 8010c48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d190      	bne.n	8010b70 <HAL_SPI_TransmitReceive+0x148>
 8010c4e:	e0e7      	b.n	8010e20 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	68db      	ldr	r3, [r3, #12]
 8010c54:	2b07      	cmp	r3, #7
 8010c56:	f240 80dd 	bls.w	8010e14 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010c5a:	e066      	b.n	8010d2a <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	695b      	ldr	r3, [r3, #20]
 8010c62:	f003 0302 	and.w	r3, r3, #2
 8010c66:	2b02      	cmp	r3, #2
 8010c68:	d119      	bne.n	8010c9e <HAL_SPI_TransmitReceive+0x276>
 8010c6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d016      	beq.n	8010c9e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c74:	881a      	ldrh	r2, [r3, #0]
 8010c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c78:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c7e:	1c9a      	adds	r2, r3, #2
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	3b01      	subs	r3, #1
 8010c8e:	b29a      	uxth	r2, r3
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010c9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	695b      	ldr	r3, [r3, #20]
 8010ca4:	f003 0301 	and.w	r3, r3, #1
 8010ca8:	2b01      	cmp	r3, #1
 8010caa:	d11a      	bne.n	8010ce2 <HAL_SPI_TransmitReceive+0x2ba>
 8010cac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d017      	beq.n	8010ce2 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010cb6:	6a3a      	ldr	r2, [r7, #32]
 8010cb8:	8812      	ldrh	r2, [r2, #0]
 8010cba:	b292      	uxth	r2, r2
 8010cbc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010cc2:	1c9a      	adds	r2, r3, #2
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	3b01      	subs	r3, #1
 8010cd2:	b29a      	uxth	r2, r3
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010ce0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010ce2:	f7f5 fd99 	bl	8006818 <HAL_GetTick>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	69fb      	ldr	r3, [r7, #28]
 8010cea:	1ad3      	subs	r3, r2, r3
 8010cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d803      	bhi.n	8010cfa <HAL_SPI_TransmitReceive+0x2d2>
 8010cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf8:	d102      	bne.n	8010d00 <HAL_SPI_TransmitReceive+0x2d8>
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d114      	bne.n	8010d2a <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f000 f8b9 	bl	8010e78 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	2201      	movs	r2, #1
 8010d22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8010d26:	2303      	movs	r3, #3
 8010d28:	e0a1      	b.n	8010e6e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010d2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d195      	bne.n	8010c5c <HAL_SPI_TransmitReceive+0x234>
 8010d30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d192      	bne.n	8010c5c <HAL_SPI_TransmitReceive+0x234>
 8010d36:	e073      	b.n	8010e20 <HAL_SPI_TransmitReceive+0x3f8>
 8010d38:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	695b      	ldr	r3, [r3, #20]
 8010d42:	f003 0302 	and.w	r3, r3, #2
 8010d46:	2b02      	cmp	r3, #2
 8010d48:	d11b      	bne.n	8010d82 <HAL_SPI_TransmitReceive+0x35a>
 8010d4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d018      	beq.n	8010d82 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	3320      	adds	r3, #32
 8010d5a:	7812      	ldrb	r2, [r2, #0]
 8010d5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d62:	1c5a      	adds	r2, r3, #1
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d6e:	b29b      	uxth	r3, r3
 8010d70:	3b01      	subs	r3, #1
 8010d72:	b29a      	uxth	r2, r3
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010d80:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	695b      	ldr	r3, [r3, #20]
 8010d88:	f003 0301 	and.w	r3, r3, #1
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d11d      	bne.n	8010dcc <HAL_SPI_TransmitReceive+0x3a4>
 8010d90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d01a      	beq.n	8010dcc <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010da2:	7812      	ldrb	r2, [r2, #0]
 8010da4:	b2d2      	uxtb	r2, r2
 8010da6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010dac:	1c5a      	adds	r2, r3, #1
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010db8:	b29b      	uxth	r3, r3
 8010dba:	3b01      	subs	r3, #1
 8010dbc:	b29a      	uxth	r2, r3
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010dca:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010dcc:	f7f5 fd24 	bl	8006818 <HAL_GetTick>
 8010dd0:	4602      	mov	r2, r0
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	1ad3      	subs	r3, r2, r3
 8010dd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d803      	bhi.n	8010de4 <HAL_SPI_TransmitReceive+0x3bc>
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010de2:	d102      	bne.n	8010dea <HAL_SPI_TransmitReceive+0x3c2>
 8010de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d114      	bne.n	8010e14 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	f000 f844 	bl	8010e78 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	2200      	movs	r2, #0
 8010df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010dfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8010e10:	2303      	movs	r3, #3
 8010e12:	e02c      	b.n	8010e6e <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010e14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d190      	bne.n	8010d3c <HAL_SPI_TransmitReceive+0x314>
 8010e1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d18d      	bne.n	8010d3c <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8010e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	2200      	movs	r2, #0
 8010e28:	2108      	movs	r1, #8
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f000 f8c4 	bl	8010fb8 <SPI_WaitOnFlagUntilTimeout>
 8010e30:	4603      	mov	r3, r0
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d007      	beq.n	8010e46 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e3c:	f043 0220 	orr.w	r2, r3, #32
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010e46:	68f8      	ldr	r0, [r7, #12]
 8010e48:	f000 f816 	bl	8010e78 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2201      	movs	r2, #1
 8010e58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d001      	beq.n	8010e6a <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 8010e66:	2301      	movs	r3, #1
 8010e68:	e001      	b.n	8010e6e <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8010e6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8010e6e:	4618      	mov	r0, r3
 8010e70:	3730      	adds	r7, #48	; 0x30
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop

08010e78 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	695b      	ldr	r3, [r3, #20]
 8010e86:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	699a      	ldr	r2, [r3, #24]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	f042 0208 	orr.w	r2, r2, #8
 8010e96:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	699a      	ldr	r2, [r3, #24]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	f042 0210 	orr.w	r2, r2, #16
 8010ea6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	681a      	ldr	r2, [r3, #0]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	f022 0201 	bic.w	r2, r2, #1
 8010eb6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	6919      	ldr	r1, [r3, #16]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	4b3c      	ldr	r3, [pc, #240]	; (8010fb4 <SPI_CloseTransfer+0x13c>)
 8010ec4:	400b      	ands	r3, r1
 8010ec6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	689a      	ldr	r2, [r3, #8]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010ed6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010ede:	b2db      	uxtb	r3, r3
 8010ee0:	2b04      	cmp	r3, #4
 8010ee2:	d014      	beq.n	8010f0e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d00f      	beq.n	8010f0e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010ef4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	699a      	ldr	r2, [r3, #24]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f042 0220 	orr.w	r2, r2, #32
 8010f0c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	2b03      	cmp	r3, #3
 8010f18:	d014      	beq.n	8010f44 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00f      	beq.n	8010f44 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f2a:	f043 0204 	orr.w	r2, r3, #4
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	699a      	ldr	r2, [r3, #24]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010f42:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d00f      	beq.n	8010f6e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f54:	f043 0201 	orr.w	r2, r3, #1
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	699a      	ldr	r2, [r3, #24]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010f6c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d00f      	beq.n	8010f98 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f7e:	f043 0208 	orr.w	r2, r3, #8
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	699a      	ldr	r2, [r3, #24]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010f96:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010fa8:	bf00      	nop
 8010faa:	3714      	adds	r7, #20
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr
 8010fb4:	fffffc90 	.word	0xfffffc90

08010fb8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b084      	sub	sp, #16
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	603b      	str	r3, [r7, #0]
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010fc8:	e010      	b.n	8010fec <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010fca:	f7f5 fc25 	bl	8006818 <HAL_GetTick>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	69ba      	ldr	r2, [r7, #24]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d803      	bhi.n	8010fe2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010fda:	69bb      	ldr	r3, [r7, #24]
 8010fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fe0:	d102      	bne.n	8010fe8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d101      	bne.n	8010fec <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010fe8:	2303      	movs	r3, #3
 8010fea:	e00f      	b.n	801100c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	695a      	ldr	r2, [r3, #20]
 8010ff2:	68bb      	ldr	r3, [r7, #8]
 8010ff4:	4013      	ands	r3, r2
 8010ff6:	68ba      	ldr	r2, [r7, #8]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	bf0c      	ite	eq
 8010ffc:	2301      	moveq	r3, #1
 8010ffe:	2300      	movne	r3, #0
 8011000:	b2db      	uxtb	r3, r3
 8011002:	461a      	mov	r2, r3
 8011004:	79fb      	ldrb	r3, [r7, #7]
 8011006:	429a      	cmp	r2, r3
 8011008:	d0df      	beq.n	8010fca <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801100a:	2300      	movs	r3, #0
}
 801100c:	4618      	mov	r0, r3
 801100e:	3710      	adds	r7, #16
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8011014:	b480      	push	{r7}
 8011016:	b085      	sub	sp, #20
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011020:	095b      	lsrs	r3, r3, #5
 8011022:	3301      	adds	r3, #1
 8011024:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	68db      	ldr	r3, [r3, #12]
 801102a:	3301      	adds	r3, #1
 801102c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	3307      	adds	r3, #7
 8011032:	08db      	lsrs	r3, r3, #3
 8011034:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	68fa      	ldr	r2, [r7, #12]
 801103a:	fb02 f303 	mul.w	r3, r2, r3
}
 801103e:	4618      	mov	r0, r3
 8011040:	3714      	adds	r7, #20
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr

0801104a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801104a:	b580      	push	{r7, lr}
 801104c:	b082      	sub	sp, #8
 801104e:	af00      	add	r7, sp, #0
 8011050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d101      	bne.n	801105c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011058:	2301      	movs	r3, #1
 801105a:	e049      	b.n	80110f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011062:	b2db      	uxtb	r3, r3
 8011064:	2b00      	cmp	r3, #0
 8011066:	d106      	bne.n	8011076 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2200      	movs	r2, #0
 801106c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f7f4 fea9 	bl	8005dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2202      	movs	r2, #2
 801107a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681a      	ldr	r2, [r3, #0]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	3304      	adds	r3, #4
 8011086:	4619      	mov	r1, r3
 8011088:	4610      	mov	r0, r2
 801108a:	f000 ff17 	bl	8011ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2201      	movs	r2, #1
 8011092:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2201      	movs	r2, #1
 801109a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2201      	movs	r2, #1
 80110a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2201      	movs	r2, #1
 80110aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2201      	movs	r2, #1
 80110b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2201      	movs	r2, #1
 80110ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2201      	movs	r2, #1
 80110c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	2201      	movs	r2, #1
 80110ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2201      	movs	r2, #1
 80110d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2201      	movs	r2, #1
 80110da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2201      	movs	r2, #1
 80110e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2201      	movs	r2, #1
 80110ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80110ee:	2300      	movs	r3, #0
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b085      	sub	sp, #20
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011106:	b2db      	uxtb	r3, r3
 8011108:	2b01      	cmp	r3, #1
 801110a:	d001      	beq.n	8011110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801110c:	2301      	movs	r3, #1
 801110e:	e05e      	b.n	80111ce <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2202      	movs	r2, #2
 8011114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	68da      	ldr	r2, [r3, #12]
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f042 0201 	orr.w	r2, r2, #1
 8011126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	4a2b      	ldr	r2, [pc, #172]	; (80111dc <HAL_TIM_Base_Start_IT+0xe4>)
 801112e:	4293      	cmp	r3, r2
 8011130:	d02c      	beq.n	801118c <HAL_TIM_Base_Start_IT+0x94>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801113a:	d027      	beq.n	801118c <HAL_TIM_Base_Start_IT+0x94>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4a27      	ldr	r2, [pc, #156]	; (80111e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8011142:	4293      	cmp	r3, r2
 8011144:	d022      	beq.n	801118c <HAL_TIM_Base_Start_IT+0x94>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4a26      	ldr	r2, [pc, #152]	; (80111e4 <HAL_TIM_Base_Start_IT+0xec>)
 801114c:	4293      	cmp	r3, r2
 801114e:	d01d      	beq.n	801118c <HAL_TIM_Base_Start_IT+0x94>
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	4a24      	ldr	r2, [pc, #144]	; (80111e8 <HAL_TIM_Base_Start_IT+0xf0>)
 8011156:	4293      	cmp	r3, r2
 8011158:	d018      	beq.n	801118c <HAL_TIM_Base_Start_IT+0x94>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	4a23      	ldr	r2, [pc, #140]	; (80111ec <HAL_TIM_Base_Start_IT+0xf4>)
 8011160:	4293      	cmp	r3, r2
 8011162:	d013      	beq.n	801118c <HAL_TIM_Base_Start_IT+0x94>
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	4a21      	ldr	r2, [pc, #132]	; (80111f0 <HAL_TIM_Base_Start_IT+0xf8>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d00e      	beq.n	801118c <HAL_TIM_Base_Start_IT+0x94>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	4a20      	ldr	r2, [pc, #128]	; (80111f4 <HAL_TIM_Base_Start_IT+0xfc>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d009      	beq.n	801118c <HAL_TIM_Base_Start_IT+0x94>
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4a1e      	ldr	r2, [pc, #120]	; (80111f8 <HAL_TIM_Base_Start_IT+0x100>)
 801117e:	4293      	cmp	r3, r2
 8011180:	d004      	beq.n	801118c <HAL_TIM_Base_Start_IT+0x94>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	4a1d      	ldr	r2, [pc, #116]	; (80111fc <HAL_TIM_Base_Start_IT+0x104>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d115      	bne.n	80111b8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	689a      	ldr	r2, [r3, #8]
 8011192:	4b1b      	ldr	r3, [pc, #108]	; (8011200 <HAL_TIM_Base_Start_IT+0x108>)
 8011194:	4013      	ands	r3, r2
 8011196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2b06      	cmp	r3, #6
 801119c:	d015      	beq.n	80111ca <HAL_TIM_Base_Start_IT+0xd2>
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111a4:	d011      	beq.n	80111ca <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	681a      	ldr	r2, [r3, #0]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f042 0201 	orr.w	r2, r2, #1
 80111b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111b6:	e008      	b.n	80111ca <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	681a      	ldr	r2, [r3, #0]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f042 0201 	orr.w	r2, r2, #1
 80111c6:	601a      	str	r2, [r3, #0]
 80111c8:	e000      	b.n	80111cc <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80111ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80111cc:	2300      	movs	r3, #0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3714      	adds	r7, #20
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr
 80111da:	bf00      	nop
 80111dc:	40010000 	.word	0x40010000
 80111e0:	40000400 	.word	0x40000400
 80111e4:	40000800 	.word	0x40000800
 80111e8:	40000c00 	.word	0x40000c00
 80111ec:	40010400 	.word	0x40010400
 80111f0:	40001800 	.word	0x40001800
 80111f4:	40014000 	.word	0x40014000
 80111f8:	4000e000 	.word	0x4000e000
 80111fc:	4000e400 	.word	0x4000e400
 8011200:	00010007 	.word	0x00010007

08011204 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d101      	bne.n	8011216 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e049      	b.n	80112aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801121c:	b2db      	uxtb	r3, r3
 801121e:	2b00      	cmp	r3, #0
 8011220:	d106      	bne.n	8011230 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2200      	movs	r2, #0
 8011226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f7f4 fc5e 	bl	8005aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2202      	movs	r2, #2
 8011234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681a      	ldr	r2, [r3, #0]
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	3304      	adds	r3, #4
 8011240:	4619      	mov	r1, r3
 8011242:	4610      	mov	r0, r2
 8011244:	f000 fe3a 	bl	8011ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	2201      	movs	r2, #1
 801124c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2201      	movs	r2, #1
 8011254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2201      	movs	r2, #1
 801125c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2201      	movs	r2, #1
 8011264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	2201      	movs	r2, #1
 801126c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2201      	movs	r2, #1
 8011274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2201      	movs	r2, #1
 801127c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2201      	movs	r2, #1
 8011284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2201      	movs	r2, #1
 801128c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2201      	movs	r2, #1
 8011294:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2201      	movs	r2, #1
 801129c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2201      	movs	r2, #1
 80112a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80112a8:	2300      	movs	r3, #0
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3708      	adds	r7, #8
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
	...

080112b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d109      	bne.n	80112d8 <HAL_TIM_PWM_Start+0x24>
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	2b01      	cmp	r3, #1
 80112ce:	bf14      	ite	ne
 80112d0:	2301      	movne	r3, #1
 80112d2:	2300      	moveq	r3, #0
 80112d4:	b2db      	uxtb	r3, r3
 80112d6:	e03c      	b.n	8011352 <HAL_TIM_PWM_Start+0x9e>
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	2b04      	cmp	r3, #4
 80112dc:	d109      	bne.n	80112f2 <HAL_TIM_PWM_Start+0x3e>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	bf14      	ite	ne
 80112ea:	2301      	movne	r3, #1
 80112ec:	2300      	moveq	r3, #0
 80112ee:	b2db      	uxtb	r3, r3
 80112f0:	e02f      	b.n	8011352 <HAL_TIM_PWM_Start+0x9e>
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	2b08      	cmp	r3, #8
 80112f6:	d109      	bne.n	801130c <HAL_TIM_PWM_Start+0x58>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80112fe:	b2db      	uxtb	r3, r3
 8011300:	2b01      	cmp	r3, #1
 8011302:	bf14      	ite	ne
 8011304:	2301      	movne	r3, #1
 8011306:	2300      	moveq	r3, #0
 8011308:	b2db      	uxtb	r3, r3
 801130a:	e022      	b.n	8011352 <HAL_TIM_PWM_Start+0x9e>
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	2b0c      	cmp	r3, #12
 8011310:	d109      	bne.n	8011326 <HAL_TIM_PWM_Start+0x72>
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011318:	b2db      	uxtb	r3, r3
 801131a:	2b01      	cmp	r3, #1
 801131c:	bf14      	ite	ne
 801131e:	2301      	movne	r3, #1
 8011320:	2300      	moveq	r3, #0
 8011322:	b2db      	uxtb	r3, r3
 8011324:	e015      	b.n	8011352 <HAL_TIM_PWM_Start+0x9e>
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	2b10      	cmp	r3, #16
 801132a:	d109      	bne.n	8011340 <HAL_TIM_PWM_Start+0x8c>
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011332:	b2db      	uxtb	r3, r3
 8011334:	2b01      	cmp	r3, #1
 8011336:	bf14      	ite	ne
 8011338:	2301      	movne	r3, #1
 801133a:	2300      	moveq	r3, #0
 801133c:	b2db      	uxtb	r3, r3
 801133e:	e008      	b.n	8011352 <HAL_TIM_PWM_Start+0x9e>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011346:	b2db      	uxtb	r3, r3
 8011348:	2b01      	cmp	r3, #1
 801134a:	bf14      	ite	ne
 801134c:	2301      	movne	r3, #1
 801134e:	2300      	moveq	r3, #0
 8011350:	b2db      	uxtb	r3, r3
 8011352:	2b00      	cmp	r3, #0
 8011354:	d001      	beq.n	801135a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8011356:	2301      	movs	r3, #1
 8011358:	e0ab      	b.n	80114b2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d104      	bne.n	801136a <HAL_TIM_PWM_Start+0xb6>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2202      	movs	r2, #2
 8011364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011368:	e023      	b.n	80113b2 <HAL_TIM_PWM_Start+0xfe>
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	2b04      	cmp	r3, #4
 801136e:	d104      	bne.n	801137a <HAL_TIM_PWM_Start+0xc6>
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2202      	movs	r2, #2
 8011374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011378:	e01b      	b.n	80113b2 <HAL_TIM_PWM_Start+0xfe>
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	2b08      	cmp	r3, #8
 801137e:	d104      	bne.n	801138a <HAL_TIM_PWM_Start+0xd6>
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2202      	movs	r2, #2
 8011384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011388:	e013      	b.n	80113b2 <HAL_TIM_PWM_Start+0xfe>
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	2b0c      	cmp	r3, #12
 801138e:	d104      	bne.n	801139a <HAL_TIM_PWM_Start+0xe6>
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2202      	movs	r2, #2
 8011394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011398:	e00b      	b.n	80113b2 <HAL_TIM_PWM_Start+0xfe>
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	2b10      	cmp	r3, #16
 801139e:	d104      	bne.n	80113aa <HAL_TIM_PWM_Start+0xf6>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2202      	movs	r2, #2
 80113a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80113a8:	e003      	b.n	80113b2 <HAL_TIM_PWM_Start+0xfe>
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	2202      	movs	r2, #2
 80113ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	2201      	movs	r2, #1
 80113b8:	6839      	ldr	r1, [r7, #0]
 80113ba:	4618      	mov	r0, r3
 80113bc:	f001 f998 	bl	80126f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4a3d      	ldr	r2, [pc, #244]	; (80114bc <HAL_TIM_PWM_Start+0x208>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d013      	beq.n	80113f2 <HAL_TIM_PWM_Start+0x13e>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	4a3c      	ldr	r2, [pc, #240]	; (80114c0 <HAL_TIM_PWM_Start+0x20c>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d00e      	beq.n	80113f2 <HAL_TIM_PWM_Start+0x13e>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	4a3a      	ldr	r2, [pc, #232]	; (80114c4 <HAL_TIM_PWM_Start+0x210>)
 80113da:	4293      	cmp	r3, r2
 80113dc:	d009      	beq.n	80113f2 <HAL_TIM_PWM_Start+0x13e>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	4a39      	ldr	r2, [pc, #228]	; (80114c8 <HAL_TIM_PWM_Start+0x214>)
 80113e4:	4293      	cmp	r3, r2
 80113e6:	d004      	beq.n	80113f2 <HAL_TIM_PWM_Start+0x13e>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	4a37      	ldr	r2, [pc, #220]	; (80114cc <HAL_TIM_PWM_Start+0x218>)
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d101      	bne.n	80113f6 <HAL_TIM_PWM_Start+0x142>
 80113f2:	2301      	movs	r3, #1
 80113f4:	e000      	b.n	80113f8 <HAL_TIM_PWM_Start+0x144>
 80113f6:	2300      	movs	r3, #0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d007      	beq.n	801140c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801140a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	4a2a      	ldr	r2, [pc, #168]	; (80114bc <HAL_TIM_PWM_Start+0x208>)
 8011412:	4293      	cmp	r3, r2
 8011414:	d02c      	beq.n	8011470 <HAL_TIM_PWM_Start+0x1bc>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801141e:	d027      	beq.n	8011470 <HAL_TIM_PWM_Start+0x1bc>
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	4a2a      	ldr	r2, [pc, #168]	; (80114d0 <HAL_TIM_PWM_Start+0x21c>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d022      	beq.n	8011470 <HAL_TIM_PWM_Start+0x1bc>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	4a29      	ldr	r2, [pc, #164]	; (80114d4 <HAL_TIM_PWM_Start+0x220>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d01d      	beq.n	8011470 <HAL_TIM_PWM_Start+0x1bc>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	4a27      	ldr	r2, [pc, #156]	; (80114d8 <HAL_TIM_PWM_Start+0x224>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d018      	beq.n	8011470 <HAL_TIM_PWM_Start+0x1bc>
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	4a1f      	ldr	r2, [pc, #124]	; (80114c0 <HAL_TIM_PWM_Start+0x20c>)
 8011444:	4293      	cmp	r3, r2
 8011446:	d013      	beq.n	8011470 <HAL_TIM_PWM_Start+0x1bc>
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4a23      	ldr	r2, [pc, #140]	; (80114dc <HAL_TIM_PWM_Start+0x228>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d00e      	beq.n	8011470 <HAL_TIM_PWM_Start+0x1bc>
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	4a1b      	ldr	r2, [pc, #108]	; (80114c4 <HAL_TIM_PWM_Start+0x210>)
 8011458:	4293      	cmp	r3, r2
 801145a:	d009      	beq.n	8011470 <HAL_TIM_PWM_Start+0x1bc>
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	4a1f      	ldr	r2, [pc, #124]	; (80114e0 <HAL_TIM_PWM_Start+0x22c>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d004      	beq.n	8011470 <HAL_TIM_PWM_Start+0x1bc>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4a1e      	ldr	r2, [pc, #120]	; (80114e4 <HAL_TIM_PWM_Start+0x230>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d115      	bne.n	801149c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	689a      	ldr	r2, [r3, #8]
 8011476:	4b1c      	ldr	r3, [pc, #112]	; (80114e8 <HAL_TIM_PWM_Start+0x234>)
 8011478:	4013      	ands	r3, r2
 801147a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	2b06      	cmp	r3, #6
 8011480:	d015      	beq.n	80114ae <HAL_TIM_PWM_Start+0x1fa>
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011488:	d011      	beq.n	80114ae <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	681a      	ldr	r2, [r3, #0]
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	f042 0201 	orr.w	r2, r2, #1
 8011498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801149a:	e008      	b.n	80114ae <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	f042 0201 	orr.w	r2, r2, #1
 80114aa:	601a      	str	r2, [r3, #0]
 80114ac:	e000      	b.n	80114b0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80114ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3710      	adds	r7, #16
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
 80114ba:	bf00      	nop
 80114bc:	40010000 	.word	0x40010000
 80114c0:	40010400 	.word	0x40010400
 80114c4:	40014000 	.word	0x40014000
 80114c8:	40014400 	.word	0x40014400
 80114cc:	40014800 	.word	0x40014800
 80114d0:	40000400 	.word	0x40000400
 80114d4:	40000800 	.word	0x40000800
 80114d8:	40000c00 	.word	0x40000c00
 80114dc:	40001800 	.word	0x40001800
 80114e0:	4000e000 	.word	0x4000e000
 80114e4:	4000e400 	.word	0x4000e400
 80114e8:	00010007 	.word	0x00010007

080114ec <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80114f6:	2300      	movs	r3, #0
 80114f8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	2b0c      	cmp	r3, #12
 80114fe:	d855      	bhi.n	80115ac <HAL_TIM_PWM_Stop_DMA+0xc0>
 8011500:	a201      	add	r2, pc, #4	; (adr r2, 8011508 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8011502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011506:	bf00      	nop
 8011508:	0801153d 	.word	0x0801153d
 801150c:	080115ad 	.word	0x080115ad
 8011510:	080115ad 	.word	0x080115ad
 8011514:	080115ad 	.word	0x080115ad
 8011518:	08011559 	.word	0x08011559
 801151c:	080115ad 	.word	0x080115ad
 8011520:	080115ad 	.word	0x080115ad
 8011524:	080115ad 	.word	0x080115ad
 8011528:	08011575 	.word	0x08011575
 801152c:	080115ad 	.word	0x080115ad
 8011530:	080115ad 	.word	0x080115ad
 8011534:	080115ad 	.word	0x080115ad
 8011538:	08011591 	.word	0x08011591
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	68da      	ldr	r2, [r3, #12]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 801154a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011550:	4618      	mov	r0, r3
 8011552:	f7f8 fc65 	bl	8009e20 <HAL_DMA_Abort_IT>
      break;
 8011556:	e02c      	b.n	80115b2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011566:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801156c:	4618      	mov	r0, r3
 801156e:	f7f8 fc57 	bl	8009e20 <HAL_DMA_Abort_IT>
      break;
 8011572:	e01e      	b.n	80115b2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	68da      	ldr	r2, [r3, #12]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011582:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011588:	4618      	mov	r0, r3
 801158a:	f7f8 fc49 	bl	8009e20 <HAL_DMA_Abort_IT>
      break;
 801158e:	e010      	b.n	80115b2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	68da      	ldr	r2, [r3, #12]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801159e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115a4:	4618      	mov	r0, r3
 80115a6:	f7f8 fc3b 	bl	8009e20 <HAL_DMA_Abort_IT>
      break;
 80115aa:	e002      	b.n	80115b2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80115ac:	2301      	movs	r3, #1
 80115ae:	73fb      	strb	r3, [r7, #15]
      break;
 80115b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80115b2:	7bfb      	ldrb	r3, [r7, #15]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	f040 8081 	bne.w	80116bc <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	2200      	movs	r2, #0
 80115c0:	6839      	ldr	r1, [r7, #0]
 80115c2:	4618      	mov	r0, r3
 80115c4:	f001 f894 	bl	80126f0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4a3e      	ldr	r2, [pc, #248]	; (80116c8 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d013      	beq.n	80115fa <HAL_TIM_PWM_Stop_DMA+0x10e>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4a3d      	ldr	r2, [pc, #244]	; (80116cc <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d00e      	beq.n	80115fa <HAL_TIM_PWM_Stop_DMA+0x10e>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4a3b      	ldr	r2, [pc, #236]	; (80116d0 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d009      	beq.n	80115fa <HAL_TIM_PWM_Stop_DMA+0x10e>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	4a3a      	ldr	r2, [pc, #232]	; (80116d4 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d004      	beq.n	80115fa <HAL_TIM_PWM_Stop_DMA+0x10e>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4a38      	ldr	r2, [pc, #224]	; (80116d8 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d101      	bne.n	80115fe <HAL_TIM_PWM_Stop_DMA+0x112>
 80115fa:	2301      	movs	r3, #1
 80115fc:	e000      	b.n	8011600 <HAL_TIM_PWM_Stop_DMA+0x114>
 80115fe:	2300      	movs	r3, #0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d017      	beq.n	8011634 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	6a1a      	ldr	r2, [r3, #32]
 801160a:	f241 1311 	movw	r3, #4369	; 0x1111
 801160e:	4013      	ands	r3, r2
 8011610:	2b00      	cmp	r3, #0
 8011612:	d10f      	bne.n	8011634 <HAL_TIM_PWM_Stop_DMA+0x148>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	6a1a      	ldr	r2, [r3, #32]
 801161a:	f240 4344 	movw	r3, #1092	; 0x444
 801161e:	4013      	ands	r3, r2
 8011620:	2b00      	cmp	r3, #0
 8011622:	d107      	bne.n	8011634 <HAL_TIM_PWM_Stop_DMA+0x148>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011632:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	6a1a      	ldr	r2, [r3, #32]
 801163a:	f241 1311 	movw	r3, #4369	; 0x1111
 801163e:	4013      	ands	r3, r2
 8011640:	2b00      	cmp	r3, #0
 8011642:	d10f      	bne.n	8011664 <HAL_TIM_PWM_Stop_DMA+0x178>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	6a1a      	ldr	r2, [r3, #32]
 801164a:	f240 4344 	movw	r3, #1092	; 0x444
 801164e:	4013      	ands	r3, r2
 8011650:	2b00      	cmp	r3, #0
 8011652:	d107      	bne.n	8011664 <HAL_TIM_PWM_Stop_DMA+0x178>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	681a      	ldr	r2, [r3, #0]
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f022 0201 	bic.w	r2, r2, #1
 8011662:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d104      	bne.n	8011674 <HAL_TIM_PWM_Stop_DMA+0x188>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2201      	movs	r2, #1
 801166e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011672:	e023      	b.n	80116bc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	2b04      	cmp	r3, #4
 8011678:	d104      	bne.n	8011684 <HAL_TIM_PWM_Stop_DMA+0x198>
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2201      	movs	r2, #1
 801167e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011682:	e01b      	b.n	80116bc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	2b08      	cmp	r3, #8
 8011688:	d104      	bne.n	8011694 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2201      	movs	r2, #1
 801168e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011692:	e013      	b.n	80116bc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	2b0c      	cmp	r3, #12
 8011698:	d104      	bne.n	80116a4 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2201      	movs	r2, #1
 801169e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80116a2:	e00b      	b.n	80116bc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	2b10      	cmp	r3, #16
 80116a8:	d104      	bne.n	80116b4 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	2201      	movs	r2, #1
 80116ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80116b2:	e003      	b.n	80116bc <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2201      	movs	r2, #1
 80116b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80116bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80116be:	4618      	mov	r0, r3
 80116c0:	3710      	adds	r7, #16
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	40010000 	.word	0x40010000
 80116cc:	40010400 	.word	0x40010400
 80116d0:	40014000 	.word	0x40014000
 80116d4:	40014400 	.word	0x40014400
 80116d8:	40014800 	.word	0x40014800

080116dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b086      	sub	sp, #24
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d101      	bne.n	80116f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80116ec:	2301      	movs	r3, #1
 80116ee:	e08f      	b.n	8011810 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d106      	bne.n	801170a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	2200      	movs	r2, #0
 8011700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f7f4 fa85 	bl	8005c14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2202      	movs	r2, #2
 801170e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	6899      	ldr	r1, [r3, #8]
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	4b3e      	ldr	r3, [pc, #248]	; (8011818 <HAL_TIM_Encoder_Init+0x13c>)
 801171e:	400b      	ands	r3, r1
 8011720:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	3304      	adds	r3, #4
 801172a:	4619      	mov	r1, r3
 801172c:	4610      	mov	r0, r2
 801172e:	f000 fbc5 	bl	8011ebc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	699b      	ldr	r3, [r3, #24]
 8011740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	6a1b      	ldr	r3, [r3, #32]
 8011748:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801174a:	683b      	ldr	r3, [r7, #0]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	697a      	ldr	r2, [r7, #20]
 8011750:	4313      	orrs	r3, r2
 8011752:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011754:	693a      	ldr	r2, [r7, #16]
 8011756:	4b31      	ldr	r3, [pc, #196]	; (801181c <HAL_TIM_Encoder_Init+0x140>)
 8011758:	4013      	ands	r3, r2
 801175a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	689a      	ldr	r2, [r3, #8]
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	699b      	ldr	r3, [r3, #24]
 8011764:	021b      	lsls	r3, r3, #8
 8011766:	4313      	orrs	r3, r2
 8011768:	693a      	ldr	r2, [r7, #16]
 801176a:	4313      	orrs	r3, r2
 801176c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801176e:	693a      	ldr	r2, [r7, #16]
 8011770:	4b2b      	ldr	r3, [pc, #172]	; (8011820 <HAL_TIM_Encoder_Init+0x144>)
 8011772:	4013      	ands	r3, r2
 8011774:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011776:	693a      	ldr	r2, [r7, #16]
 8011778:	4b2a      	ldr	r3, [pc, #168]	; (8011824 <HAL_TIM_Encoder_Init+0x148>)
 801177a:	4013      	ands	r3, r2
 801177c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	68da      	ldr	r2, [r3, #12]
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	69db      	ldr	r3, [r3, #28]
 8011786:	021b      	lsls	r3, r3, #8
 8011788:	4313      	orrs	r3, r2
 801178a:	693a      	ldr	r2, [r7, #16]
 801178c:	4313      	orrs	r3, r2
 801178e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	691b      	ldr	r3, [r3, #16]
 8011794:	011a      	lsls	r2, r3, #4
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	6a1b      	ldr	r3, [r3, #32]
 801179a:	031b      	lsls	r3, r3, #12
 801179c:	4313      	orrs	r3, r2
 801179e:	693a      	ldr	r2, [r7, #16]
 80117a0:	4313      	orrs	r3, r2
 80117a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80117aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80117b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	685a      	ldr	r2, [r3, #4]
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	695b      	ldr	r3, [r3, #20]
 80117bc:	011b      	lsls	r3, r3, #4
 80117be:	4313      	orrs	r3, r2
 80117c0:	68fa      	ldr	r2, [r7, #12]
 80117c2:	4313      	orrs	r3, r2
 80117c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	697a      	ldr	r2, [r7, #20]
 80117cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	693a      	ldr	r2, [r7, #16]
 80117d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	68fa      	ldr	r2, [r7, #12]
 80117dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	2201      	movs	r2, #1
 80117e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2201      	movs	r2, #1
 80117ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2201      	movs	r2, #1
 80117f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2201      	movs	r2, #1
 80117fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2201      	movs	r2, #1
 8011802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2201      	movs	r2, #1
 801180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801180e:	2300      	movs	r3, #0
}
 8011810:	4618      	mov	r0, r3
 8011812:	3718      	adds	r7, #24
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	fffebff8 	.word	0xfffebff8
 801181c:	fffffcfc 	.word	0xfffffcfc
 8011820:	fffff3f3 	.word	0xfffff3f3
 8011824:	ffff0f0f 	.word	0xffff0f0f

08011828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	691b      	ldr	r3, [r3, #16]
 8011836:	f003 0302 	and.w	r3, r3, #2
 801183a:	2b02      	cmp	r3, #2
 801183c:	d122      	bne.n	8011884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	68db      	ldr	r3, [r3, #12]
 8011844:	f003 0302 	and.w	r3, r3, #2
 8011848:	2b02      	cmp	r3, #2
 801184a:	d11b      	bne.n	8011884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	f06f 0202 	mvn.w	r2, #2
 8011854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2201      	movs	r2, #1
 801185a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	699b      	ldr	r3, [r3, #24]
 8011862:	f003 0303 	and.w	r3, r3, #3
 8011866:	2b00      	cmp	r3, #0
 8011868:	d003      	beq.n	8011872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f000 fb12 	bl	8011e94 <HAL_TIM_IC_CaptureCallback>
 8011870:	e005      	b.n	801187e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011872:	6878      	ldr	r0, [r7, #4]
 8011874:	f000 fb04 	bl	8011e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f7f1 fd7f 	bl	800337c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	2200      	movs	r2, #0
 8011882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	691b      	ldr	r3, [r3, #16]
 801188a:	f003 0304 	and.w	r3, r3, #4
 801188e:	2b04      	cmp	r3, #4
 8011890:	d122      	bne.n	80118d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	68db      	ldr	r3, [r3, #12]
 8011898:	f003 0304 	and.w	r3, r3, #4
 801189c:	2b04      	cmp	r3, #4
 801189e:	d11b      	bne.n	80118d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f06f 0204 	mvn.w	r2, #4
 80118a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	2202      	movs	r2, #2
 80118ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	699b      	ldr	r3, [r3, #24]
 80118b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d003      	beq.n	80118c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f000 fae8 	bl	8011e94 <HAL_TIM_IC_CaptureCallback>
 80118c4:	e005      	b.n	80118d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80118c6:	6878      	ldr	r0, [r7, #4]
 80118c8:	f000 fada 	bl	8011e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f7f1 fd55 	bl	800337c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2200      	movs	r2, #0
 80118d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	691b      	ldr	r3, [r3, #16]
 80118de:	f003 0308 	and.w	r3, r3, #8
 80118e2:	2b08      	cmp	r3, #8
 80118e4:	d122      	bne.n	801192c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	f003 0308 	and.w	r3, r3, #8
 80118f0:	2b08      	cmp	r3, #8
 80118f2:	d11b      	bne.n	801192c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f06f 0208 	mvn.w	r2, #8
 80118fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2204      	movs	r2, #4
 8011902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	f003 0303 	and.w	r3, r3, #3
 801190e:	2b00      	cmp	r3, #0
 8011910:	d003      	beq.n	801191a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 fabe 	bl	8011e94 <HAL_TIM_IC_CaptureCallback>
 8011918:	e005      	b.n	8011926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f000 fab0 	bl	8011e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7f1 fd2b 	bl	800337c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2200      	movs	r2, #0
 801192a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	691b      	ldr	r3, [r3, #16]
 8011932:	f003 0310 	and.w	r3, r3, #16
 8011936:	2b10      	cmp	r3, #16
 8011938:	d122      	bne.n	8011980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	f003 0310 	and.w	r3, r3, #16
 8011944:	2b10      	cmp	r3, #16
 8011946:	d11b      	bne.n	8011980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	f06f 0210 	mvn.w	r2, #16
 8011950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2208      	movs	r2, #8
 8011956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	69db      	ldr	r3, [r3, #28]
 801195e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011962:	2b00      	cmp	r3, #0
 8011964:	d003      	beq.n	801196e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f000 fa94 	bl	8011e94 <HAL_TIM_IC_CaptureCallback>
 801196c:	e005      	b.n	801197a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f000 fa86 	bl	8011e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7f1 fd01 	bl	800337c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2200      	movs	r2, #0
 801197e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	691b      	ldr	r3, [r3, #16]
 8011986:	f003 0301 	and.w	r3, r3, #1
 801198a:	2b01      	cmp	r3, #1
 801198c:	d10e      	bne.n	80119ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	68db      	ldr	r3, [r3, #12]
 8011994:	f003 0301 	and.w	r3, r3, #1
 8011998:	2b01      	cmp	r3, #1
 801199a:	d107      	bne.n	80119ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	f06f 0201 	mvn.w	r2, #1
 80119a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f7f1 fd38 	bl	800341c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	691b      	ldr	r3, [r3, #16]
 80119b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119b6:	2b80      	cmp	r3, #128	; 0x80
 80119b8:	d10e      	bne.n	80119d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	68db      	ldr	r3, [r3, #12]
 80119c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119c4:	2b80      	cmp	r3, #128	; 0x80
 80119c6:	d107      	bne.n	80119d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80119d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f000 fff8 	bl	80129c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	691b      	ldr	r3, [r3, #16]
 80119de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80119e6:	d10e      	bne.n	8011a06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119f2:	2b80      	cmp	r3, #128	; 0x80
 80119f4:	d107      	bne.n	8011a06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80119fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f000 ffeb 	bl	80129dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	691b      	ldr	r3, [r3, #16]
 8011a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a10:	2b40      	cmp	r3, #64	; 0x40
 8011a12:	d10e      	bne.n	8011a32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	68db      	ldr	r3, [r3, #12]
 8011a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a1e:	2b40      	cmp	r3, #64	; 0x40
 8011a20:	d107      	bne.n	8011a32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 fa3b 	bl	8011ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	691b      	ldr	r3, [r3, #16]
 8011a38:	f003 0320 	and.w	r3, r3, #32
 8011a3c:	2b20      	cmp	r3, #32
 8011a3e:	d10e      	bne.n	8011a5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	68db      	ldr	r3, [r3, #12]
 8011a46:	f003 0320 	and.w	r3, r3, #32
 8011a4a:	2b20      	cmp	r3, #32
 8011a4c:	d107      	bne.n	8011a5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	f06f 0220 	mvn.w	r2, #32
 8011a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 ffab 	bl	80129b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011a5e:	bf00      	nop
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
	...

08011a68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b086      	sub	sp, #24
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	60f8      	str	r0, [r7, #12]
 8011a70:	60b9      	str	r1, [r7, #8]
 8011a72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011a74:	2300      	movs	r3, #0
 8011a76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a7e:	2b01      	cmp	r3, #1
 8011a80:	d101      	bne.n	8011a86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011a82:	2302      	movs	r3, #2
 8011a84:	e0ff      	b.n	8011c86 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2201      	movs	r2, #1
 8011a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2b14      	cmp	r3, #20
 8011a92:	f200 80f0 	bhi.w	8011c76 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011a96:	a201      	add	r2, pc, #4	; (adr r2, 8011a9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a9c:	08011af1 	.word	0x08011af1
 8011aa0:	08011c77 	.word	0x08011c77
 8011aa4:	08011c77 	.word	0x08011c77
 8011aa8:	08011c77 	.word	0x08011c77
 8011aac:	08011b31 	.word	0x08011b31
 8011ab0:	08011c77 	.word	0x08011c77
 8011ab4:	08011c77 	.word	0x08011c77
 8011ab8:	08011c77 	.word	0x08011c77
 8011abc:	08011b73 	.word	0x08011b73
 8011ac0:	08011c77 	.word	0x08011c77
 8011ac4:	08011c77 	.word	0x08011c77
 8011ac8:	08011c77 	.word	0x08011c77
 8011acc:	08011bb3 	.word	0x08011bb3
 8011ad0:	08011c77 	.word	0x08011c77
 8011ad4:	08011c77 	.word	0x08011c77
 8011ad8:	08011c77 	.word	0x08011c77
 8011adc:	08011bf5 	.word	0x08011bf5
 8011ae0:	08011c77 	.word	0x08011c77
 8011ae4:	08011c77 	.word	0x08011c77
 8011ae8:	08011c77 	.word	0x08011c77
 8011aec:	08011c35 	.word	0x08011c35
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	68b9      	ldr	r1, [r7, #8]
 8011af6:	4618      	mov	r0, r3
 8011af8:	f000 fa86 	bl	8012008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	699a      	ldr	r2, [r3, #24]
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	f042 0208 	orr.w	r2, r2, #8
 8011b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	699a      	ldr	r2, [r3, #24]
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	f022 0204 	bic.w	r2, r2, #4
 8011b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	6999      	ldr	r1, [r3, #24]
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	691a      	ldr	r2, [r3, #16]
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	430a      	orrs	r2, r1
 8011b2c:	619a      	str	r2, [r3, #24]
      break;
 8011b2e:	e0a5      	b.n	8011c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	68b9      	ldr	r1, [r7, #8]
 8011b36:	4618      	mov	r0, r3
 8011b38:	f000 faf6 	bl	8012128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	699a      	ldr	r2, [r3, #24]
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011b4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	699a      	ldr	r2, [r3, #24]
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011b5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	6999      	ldr	r1, [r3, #24]
 8011b62:	68bb      	ldr	r3, [r7, #8]
 8011b64:	691b      	ldr	r3, [r3, #16]
 8011b66:	021a      	lsls	r2, r3, #8
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	430a      	orrs	r2, r1
 8011b6e:	619a      	str	r2, [r3, #24]
      break;
 8011b70:	e084      	b.n	8011c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	68b9      	ldr	r1, [r7, #8]
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f000 fb5f 	bl	801223c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	69da      	ldr	r2, [r3, #28]
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	f042 0208 	orr.w	r2, r2, #8
 8011b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	69da      	ldr	r2, [r3, #28]
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	f022 0204 	bic.w	r2, r2, #4
 8011b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	69d9      	ldr	r1, [r3, #28]
 8011ba4:	68bb      	ldr	r3, [r7, #8]
 8011ba6:	691a      	ldr	r2, [r3, #16]
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	430a      	orrs	r2, r1
 8011bae:	61da      	str	r2, [r3, #28]
      break;
 8011bb0:	e064      	b.n	8011c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	68b9      	ldr	r1, [r7, #8]
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f000 fbc7 	bl	801234c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	69da      	ldr	r2, [r3, #28]
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011bcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	69da      	ldr	r2, [r3, #28]
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011bdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	69d9      	ldr	r1, [r3, #28]
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	691b      	ldr	r3, [r3, #16]
 8011be8:	021a      	lsls	r2, r3, #8
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	430a      	orrs	r2, r1
 8011bf0:	61da      	str	r2, [r3, #28]
      break;
 8011bf2:	e043      	b.n	8011c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	68b9      	ldr	r1, [r7, #8]
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f000 fc10 	bl	8012420 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	f042 0208 	orr.w	r2, r2, #8
 8011c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	f022 0204 	bic.w	r2, r2, #4
 8011c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	691a      	ldr	r2, [r3, #16]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	430a      	orrs	r2, r1
 8011c30:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011c32:	e023      	b.n	8011c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	68b9      	ldr	r1, [r7, #8]
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	f000 fc54 	bl	80124e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c4e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011c5e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	691b      	ldr	r3, [r3, #16]
 8011c6a:	021a      	lsls	r2, r3, #8
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	430a      	orrs	r2, r1
 8011c72:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011c74:	e002      	b.n	8011c7c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011c76:	2301      	movs	r3, #1
 8011c78:	75fb      	strb	r3, [r7, #23]
      break;
 8011c7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3718      	adds	r7, #24
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop

08011c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d101      	bne.n	8011cac <HAL_TIM_ConfigClockSource+0x1c>
 8011ca8:	2302      	movs	r3, #2
 8011caa:	e0dc      	b.n	8011e66 <HAL_TIM_ConfigClockSource+0x1d6>
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2201      	movs	r2, #1
 8011cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2202      	movs	r2, #2
 8011cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	689b      	ldr	r3, [r3, #8]
 8011cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011cc4:	68ba      	ldr	r2, [r7, #8]
 8011cc6:	4b6a      	ldr	r3, [pc, #424]	; (8011e70 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011cc8:	4013      	ands	r3, r2
 8011cca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011cd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	68ba      	ldr	r2, [r7, #8]
 8011cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	4a64      	ldr	r2, [pc, #400]	; (8011e74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	f000 80a9 	beq.w	8011e3a <HAL_TIM_ConfigClockSource+0x1aa>
 8011ce8:	4a62      	ldr	r2, [pc, #392]	; (8011e74 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011cea:	4293      	cmp	r3, r2
 8011cec:	f200 80ae 	bhi.w	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011cf0:	4a61      	ldr	r2, [pc, #388]	; (8011e78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011cf2:	4293      	cmp	r3, r2
 8011cf4:	f000 80a1 	beq.w	8011e3a <HAL_TIM_ConfigClockSource+0x1aa>
 8011cf8:	4a5f      	ldr	r2, [pc, #380]	; (8011e78 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	f200 80a6 	bhi.w	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d00:	4a5e      	ldr	r2, [pc, #376]	; (8011e7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8011d02:	4293      	cmp	r3, r2
 8011d04:	f000 8099 	beq.w	8011e3a <HAL_TIM_ConfigClockSource+0x1aa>
 8011d08:	4a5c      	ldr	r2, [pc, #368]	; (8011e7c <HAL_TIM_ConfigClockSource+0x1ec>)
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	f200 809e 	bhi.w	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011d14:	f000 8091 	beq.w	8011e3a <HAL_TIM_ConfigClockSource+0x1aa>
 8011d18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011d1c:	f200 8096 	bhi.w	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d24:	f000 8089 	beq.w	8011e3a <HAL_TIM_ConfigClockSource+0x1aa>
 8011d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011d2c:	f200 808e 	bhi.w	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011d34:	d03e      	beq.n	8011db4 <HAL_TIM_ConfigClockSource+0x124>
 8011d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011d3a:	f200 8087 	bhi.w	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d42:	f000 8086 	beq.w	8011e52 <HAL_TIM_ConfigClockSource+0x1c2>
 8011d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d4a:	d87f      	bhi.n	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d4c:	2b70      	cmp	r3, #112	; 0x70
 8011d4e:	d01a      	beq.n	8011d86 <HAL_TIM_ConfigClockSource+0xf6>
 8011d50:	2b70      	cmp	r3, #112	; 0x70
 8011d52:	d87b      	bhi.n	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d54:	2b60      	cmp	r3, #96	; 0x60
 8011d56:	d050      	beq.n	8011dfa <HAL_TIM_ConfigClockSource+0x16a>
 8011d58:	2b60      	cmp	r3, #96	; 0x60
 8011d5a:	d877      	bhi.n	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d5c:	2b50      	cmp	r3, #80	; 0x50
 8011d5e:	d03c      	beq.n	8011dda <HAL_TIM_ConfigClockSource+0x14a>
 8011d60:	2b50      	cmp	r3, #80	; 0x50
 8011d62:	d873      	bhi.n	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d64:	2b40      	cmp	r3, #64	; 0x40
 8011d66:	d058      	beq.n	8011e1a <HAL_TIM_ConfigClockSource+0x18a>
 8011d68:	2b40      	cmp	r3, #64	; 0x40
 8011d6a:	d86f      	bhi.n	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d6c:	2b30      	cmp	r3, #48	; 0x30
 8011d6e:	d064      	beq.n	8011e3a <HAL_TIM_ConfigClockSource+0x1aa>
 8011d70:	2b30      	cmp	r3, #48	; 0x30
 8011d72:	d86b      	bhi.n	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d74:	2b20      	cmp	r3, #32
 8011d76:	d060      	beq.n	8011e3a <HAL_TIM_ConfigClockSource+0x1aa>
 8011d78:	2b20      	cmp	r3, #32
 8011d7a:	d867      	bhi.n	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d05c      	beq.n	8011e3a <HAL_TIM_ConfigClockSource+0x1aa>
 8011d80:	2b10      	cmp	r3, #16
 8011d82:	d05a      	beq.n	8011e3a <HAL_TIM_ConfigClockSource+0x1aa>
 8011d84:	e062      	b.n	8011e4c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6818      	ldr	r0, [r3, #0]
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	6899      	ldr	r1, [r3, #8]
 8011d8e:	683b      	ldr	r3, [r7, #0]
 8011d90:	685a      	ldr	r2, [r3, #4]
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	f000 fc8b 	bl	80126b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011da8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	609a      	str	r2, [r3, #8]
      break;
 8011db2:	e04f      	b.n	8011e54 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6818      	ldr	r0, [r3, #0]
 8011db8:	683b      	ldr	r3, [r7, #0]
 8011dba:	6899      	ldr	r1, [r3, #8]
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	685a      	ldr	r2, [r3, #4]
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	f000 fc74 	bl	80126b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	689a      	ldr	r2, [r3, #8]
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011dd6:	609a      	str	r2, [r3, #8]
      break;
 8011dd8:	e03c      	b.n	8011e54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	6818      	ldr	r0, [r3, #0]
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	6859      	ldr	r1, [r3, #4]
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	461a      	mov	r2, r3
 8011de8:	f000 fbe4 	bl	80125b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	2150      	movs	r1, #80	; 0x50
 8011df2:	4618      	mov	r0, r3
 8011df4:	f000 fc3e 	bl	8012674 <TIM_ITRx_SetConfig>
      break;
 8011df8:	e02c      	b.n	8011e54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6818      	ldr	r0, [r3, #0]
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	6859      	ldr	r1, [r3, #4]
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	461a      	mov	r2, r3
 8011e08:	f000 fc03 	bl	8012612 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2160      	movs	r1, #96	; 0x60
 8011e12:	4618      	mov	r0, r3
 8011e14:	f000 fc2e 	bl	8012674 <TIM_ITRx_SetConfig>
      break;
 8011e18:	e01c      	b.n	8011e54 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6818      	ldr	r0, [r3, #0]
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	6859      	ldr	r1, [r3, #4]
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	68db      	ldr	r3, [r3, #12]
 8011e26:	461a      	mov	r2, r3
 8011e28:	f000 fbc4 	bl	80125b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	2140      	movs	r1, #64	; 0x40
 8011e32:	4618      	mov	r0, r3
 8011e34:	f000 fc1e 	bl	8012674 <TIM_ITRx_SetConfig>
      break;
 8011e38:	e00c      	b.n	8011e54 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681a      	ldr	r2, [r3, #0]
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	4619      	mov	r1, r3
 8011e44:	4610      	mov	r0, r2
 8011e46:	f000 fc15 	bl	8012674 <TIM_ITRx_SetConfig>
      break;
 8011e4a:	e003      	b.n	8011e54 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8011e50:	e000      	b.n	8011e54 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2201      	movs	r2, #1
 8011e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3710      	adds	r7, #16
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}
 8011e6e:	bf00      	nop
 8011e70:	ffceff88 	.word	0xffceff88
 8011e74:	00100040 	.word	0x00100040
 8011e78:	00100030 	.word	0x00100030
 8011e7c:	00100020 	.word	0x00100020

08011e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011e80:	b480      	push	{r7}
 8011e82:	b083      	sub	sp, #12
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011e88:	bf00      	nop
 8011e8a:	370c      	adds	r7, #12
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e92:	4770      	bx	lr

08011e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b083      	sub	sp, #12
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011e9c:	bf00      	nop
 8011e9e:	370c      	adds	r7, #12
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr

08011ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b083      	sub	sp, #12
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011eb0:	bf00      	nop
 8011eb2:	370c      	adds	r7, #12
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr

08011ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011ebc:	b480      	push	{r7}
 8011ebe:	b085      	sub	sp, #20
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	4a44      	ldr	r2, [pc, #272]	; (8011fe0 <TIM_Base_SetConfig+0x124>)
 8011ed0:	4293      	cmp	r3, r2
 8011ed2:	d013      	beq.n	8011efc <TIM_Base_SetConfig+0x40>
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011eda:	d00f      	beq.n	8011efc <TIM_Base_SetConfig+0x40>
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	4a41      	ldr	r2, [pc, #260]	; (8011fe4 <TIM_Base_SetConfig+0x128>)
 8011ee0:	4293      	cmp	r3, r2
 8011ee2:	d00b      	beq.n	8011efc <TIM_Base_SetConfig+0x40>
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	4a40      	ldr	r2, [pc, #256]	; (8011fe8 <TIM_Base_SetConfig+0x12c>)
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d007      	beq.n	8011efc <TIM_Base_SetConfig+0x40>
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	4a3f      	ldr	r2, [pc, #252]	; (8011fec <TIM_Base_SetConfig+0x130>)
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d003      	beq.n	8011efc <TIM_Base_SetConfig+0x40>
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	4a3e      	ldr	r2, [pc, #248]	; (8011ff0 <TIM_Base_SetConfig+0x134>)
 8011ef8:	4293      	cmp	r3, r2
 8011efa:	d108      	bne.n	8011f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	685b      	ldr	r3, [r3, #4]
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	4313      	orrs	r3, r2
 8011f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	4a33      	ldr	r2, [pc, #204]	; (8011fe0 <TIM_Base_SetConfig+0x124>)
 8011f12:	4293      	cmp	r3, r2
 8011f14:	d027      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011f1c:	d023      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	4a30      	ldr	r2, [pc, #192]	; (8011fe4 <TIM_Base_SetConfig+0x128>)
 8011f22:	4293      	cmp	r3, r2
 8011f24:	d01f      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	4a2f      	ldr	r2, [pc, #188]	; (8011fe8 <TIM_Base_SetConfig+0x12c>)
 8011f2a:	4293      	cmp	r3, r2
 8011f2c:	d01b      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	4a2e      	ldr	r2, [pc, #184]	; (8011fec <TIM_Base_SetConfig+0x130>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d017      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	4a2d      	ldr	r2, [pc, #180]	; (8011ff0 <TIM_Base_SetConfig+0x134>)
 8011f3a:	4293      	cmp	r3, r2
 8011f3c:	d013      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4a2c      	ldr	r2, [pc, #176]	; (8011ff4 <TIM_Base_SetConfig+0x138>)
 8011f42:	4293      	cmp	r3, r2
 8011f44:	d00f      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	4a2b      	ldr	r2, [pc, #172]	; (8011ff8 <TIM_Base_SetConfig+0x13c>)
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	d00b      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4a2a      	ldr	r2, [pc, #168]	; (8011ffc <TIM_Base_SetConfig+0x140>)
 8011f52:	4293      	cmp	r3, r2
 8011f54:	d007      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	4a29      	ldr	r2, [pc, #164]	; (8012000 <TIM_Base_SetConfig+0x144>)
 8011f5a:	4293      	cmp	r3, r2
 8011f5c:	d003      	beq.n	8011f66 <TIM_Base_SetConfig+0xaa>
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	4a28      	ldr	r2, [pc, #160]	; (8012004 <TIM_Base_SetConfig+0x148>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d108      	bne.n	8011f78 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	68db      	ldr	r3, [r3, #12]
 8011f72:	68fa      	ldr	r2, [r7, #12]
 8011f74:	4313      	orrs	r3, r2
 8011f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011f7e:	683b      	ldr	r3, [r7, #0]
 8011f80:	695b      	ldr	r3, [r3, #20]
 8011f82:	4313      	orrs	r3, r2
 8011f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	689a      	ldr	r2, [r3, #8]
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	681a      	ldr	r2, [r3, #0]
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	4a10      	ldr	r2, [pc, #64]	; (8011fe0 <TIM_Base_SetConfig+0x124>)
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	d00f      	beq.n	8011fc4 <TIM_Base_SetConfig+0x108>
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	4a12      	ldr	r2, [pc, #72]	; (8011ff0 <TIM_Base_SetConfig+0x134>)
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	d00b      	beq.n	8011fc4 <TIM_Base_SetConfig+0x108>
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	4a11      	ldr	r2, [pc, #68]	; (8011ff4 <TIM_Base_SetConfig+0x138>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d007      	beq.n	8011fc4 <TIM_Base_SetConfig+0x108>
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	4a10      	ldr	r2, [pc, #64]	; (8011ff8 <TIM_Base_SetConfig+0x13c>)
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d003      	beq.n	8011fc4 <TIM_Base_SetConfig+0x108>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	4a0f      	ldr	r2, [pc, #60]	; (8011ffc <TIM_Base_SetConfig+0x140>)
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	d103      	bne.n	8011fcc <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	691a      	ldr	r2, [r3, #16]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2201      	movs	r2, #1
 8011fd0:	615a      	str	r2, [r3, #20]
}
 8011fd2:	bf00      	nop
 8011fd4:	3714      	adds	r7, #20
 8011fd6:	46bd      	mov	sp, r7
 8011fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fdc:	4770      	bx	lr
 8011fde:	bf00      	nop
 8011fe0:	40010000 	.word	0x40010000
 8011fe4:	40000400 	.word	0x40000400
 8011fe8:	40000800 	.word	0x40000800
 8011fec:	40000c00 	.word	0x40000c00
 8011ff0:	40010400 	.word	0x40010400
 8011ff4:	40014000 	.word	0x40014000
 8011ff8:	40014400 	.word	0x40014400
 8011ffc:	40014800 	.word	0x40014800
 8012000:	4000e000 	.word	0x4000e000
 8012004:	4000e400 	.word	0x4000e400

08012008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012008:	b480      	push	{r7}
 801200a:	b087      	sub	sp, #28
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6a1b      	ldr	r3, [r3, #32]
 8012016:	f023 0201 	bic.w	r2, r3, #1
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6a1b      	ldr	r3, [r3, #32]
 8012022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	699b      	ldr	r3, [r3, #24]
 801202e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8012030:	68fa      	ldr	r2, [r7, #12]
 8012032:	4b37      	ldr	r3, [pc, #220]	; (8012110 <TIM_OC1_SetConfig+0x108>)
 8012034:	4013      	ands	r3, r2
 8012036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	f023 0303 	bic.w	r3, r3, #3
 801203e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	68fa      	ldr	r2, [r7, #12]
 8012046:	4313      	orrs	r3, r2
 8012048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	f023 0302 	bic.w	r3, r3, #2
 8012050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	689b      	ldr	r3, [r3, #8]
 8012056:	697a      	ldr	r2, [r7, #20]
 8012058:	4313      	orrs	r3, r2
 801205a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	4a2d      	ldr	r2, [pc, #180]	; (8012114 <TIM_OC1_SetConfig+0x10c>)
 8012060:	4293      	cmp	r3, r2
 8012062:	d00f      	beq.n	8012084 <TIM_OC1_SetConfig+0x7c>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	4a2c      	ldr	r2, [pc, #176]	; (8012118 <TIM_OC1_SetConfig+0x110>)
 8012068:	4293      	cmp	r3, r2
 801206a:	d00b      	beq.n	8012084 <TIM_OC1_SetConfig+0x7c>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	4a2b      	ldr	r2, [pc, #172]	; (801211c <TIM_OC1_SetConfig+0x114>)
 8012070:	4293      	cmp	r3, r2
 8012072:	d007      	beq.n	8012084 <TIM_OC1_SetConfig+0x7c>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	4a2a      	ldr	r2, [pc, #168]	; (8012120 <TIM_OC1_SetConfig+0x118>)
 8012078:	4293      	cmp	r3, r2
 801207a:	d003      	beq.n	8012084 <TIM_OC1_SetConfig+0x7c>
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	4a29      	ldr	r2, [pc, #164]	; (8012124 <TIM_OC1_SetConfig+0x11c>)
 8012080:	4293      	cmp	r3, r2
 8012082:	d10c      	bne.n	801209e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	f023 0308 	bic.w	r3, r3, #8
 801208a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	697a      	ldr	r2, [r7, #20]
 8012092:	4313      	orrs	r3, r2
 8012094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	f023 0304 	bic.w	r3, r3, #4
 801209c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	4a1c      	ldr	r2, [pc, #112]	; (8012114 <TIM_OC1_SetConfig+0x10c>)
 80120a2:	4293      	cmp	r3, r2
 80120a4:	d00f      	beq.n	80120c6 <TIM_OC1_SetConfig+0xbe>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	4a1b      	ldr	r2, [pc, #108]	; (8012118 <TIM_OC1_SetConfig+0x110>)
 80120aa:	4293      	cmp	r3, r2
 80120ac:	d00b      	beq.n	80120c6 <TIM_OC1_SetConfig+0xbe>
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	4a1a      	ldr	r2, [pc, #104]	; (801211c <TIM_OC1_SetConfig+0x114>)
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d007      	beq.n	80120c6 <TIM_OC1_SetConfig+0xbe>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	4a19      	ldr	r2, [pc, #100]	; (8012120 <TIM_OC1_SetConfig+0x118>)
 80120ba:	4293      	cmp	r3, r2
 80120bc:	d003      	beq.n	80120c6 <TIM_OC1_SetConfig+0xbe>
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4a18      	ldr	r2, [pc, #96]	; (8012124 <TIM_OC1_SetConfig+0x11c>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d111      	bne.n	80120ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80120d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	695b      	ldr	r3, [r3, #20]
 80120da:	693a      	ldr	r2, [r7, #16]
 80120dc:	4313      	orrs	r3, r2
 80120de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	699b      	ldr	r3, [r3, #24]
 80120e4:	693a      	ldr	r2, [r7, #16]
 80120e6:	4313      	orrs	r3, r2
 80120e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	693a      	ldr	r2, [r7, #16]
 80120ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	68fa      	ldr	r2, [r7, #12]
 80120f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	685a      	ldr	r2, [r3, #4]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	697a      	ldr	r2, [r7, #20]
 8012102:	621a      	str	r2, [r3, #32]
}
 8012104:	bf00      	nop
 8012106:	371c      	adds	r7, #28
 8012108:	46bd      	mov	sp, r7
 801210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210e:	4770      	bx	lr
 8012110:	fffeff8f 	.word	0xfffeff8f
 8012114:	40010000 	.word	0x40010000
 8012118:	40010400 	.word	0x40010400
 801211c:	40014000 	.word	0x40014000
 8012120:	40014400 	.word	0x40014400
 8012124:	40014800 	.word	0x40014800

08012128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012128:	b480      	push	{r7}
 801212a:	b087      	sub	sp, #28
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
 8012130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6a1b      	ldr	r3, [r3, #32]
 8012136:	f023 0210 	bic.w	r2, r3, #16
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	6a1b      	ldr	r3, [r3, #32]
 8012142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	699b      	ldr	r3, [r3, #24]
 801214e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8012150:	68fa      	ldr	r2, [r7, #12]
 8012152:	4b34      	ldr	r3, [pc, #208]	; (8012224 <TIM_OC2_SetConfig+0xfc>)
 8012154:	4013      	ands	r3, r2
 8012156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801215e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	021b      	lsls	r3, r3, #8
 8012166:	68fa      	ldr	r2, [r7, #12]
 8012168:	4313      	orrs	r3, r2
 801216a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	f023 0320 	bic.w	r3, r3, #32
 8012172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8012174:	683b      	ldr	r3, [r7, #0]
 8012176:	689b      	ldr	r3, [r3, #8]
 8012178:	011b      	lsls	r3, r3, #4
 801217a:	697a      	ldr	r2, [r7, #20]
 801217c:	4313      	orrs	r3, r2
 801217e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	4a29      	ldr	r2, [pc, #164]	; (8012228 <TIM_OC2_SetConfig+0x100>)
 8012184:	4293      	cmp	r3, r2
 8012186:	d003      	beq.n	8012190 <TIM_OC2_SetConfig+0x68>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4a28      	ldr	r2, [pc, #160]	; (801222c <TIM_OC2_SetConfig+0x104>)
 801218c:	4293      	cmp	r3, r2
 801218e:	d10d      	bne.n	80121ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012190:	697b      	ldr	r3, [r7, #20]
 8012192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012198:	683b      	ldr	r3, [r7, #0]
 801219a:	68db      	ldr	r3, [r3, #12]
 801219c:	011b      	lsls	r3, r3, #4
 801219e:	697a      	ldr	r2, [r7, #20]
 80121a0:	4313      	orrs	r3, r2
 80121a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80121aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	4a1e      	ldr	r2, [pc, #120]	; (8012228 <TIM_OC2_SetConfig+0x100>)
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d00f      	beq.n	80121d4 <TIM_OC2_SetConfig+0xac>
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	4a1d      	ldr	r2, [pc, #116]	; (801222c <TIM_OC2_SetConfig+0x104>)
 80121b8:	4293      	cmp	r3, r2
 80121ba:	d00b      	beq.n	80121d4 <TIM_OC2_SetConfig+0xac>
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	4a1c      	ldr	r2, [pc, #112]	; (8012230 <TIM_OC2_SetConfig+0x108>)
 80121c0:	4293      	cmp	r3, r2
 80121c2:	d007      	beq.n	80121d4 <TIM_OC2_SetConfig+0xac>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	4a1b      	ldr	r2, [pc, #108]	; (8012234 <TIM_OC2_SetConfig+0x10c>)
 80121c8:	4293      	cmp	r3, r2
 80121ca:	d003      	beq.n	80121d4 <TIM_OC2_SetConfig+0xac>
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	4a1a      	ldr	r2, [pc, #104]	; (8012238 <TIM_OC2_SetConfig+0x110>)
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d113      	bne.n	80121fc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80121d4:	693b      	ldr	r3, [r7, #16]
 80121d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80121da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80121e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	695b      	ldr	r3, [r3, #20]
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	693a      	ldr	r2, [r7, #16]
 80121ec:	4313      	orrs	r3, r2
 80121ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	699b      	ldr	r3, [r3, #24]
 80121f4:	009b      	lsls	r3, r3, #2
 80121f6:	693a      	ldr	r2, [r7, #16]
 80121f8:	4313      	orrs	r3, r2
 80121fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	693a      	ldr	r2, [r7, #16]
 8012200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	68fa      	ldr	r2, [r7, #12]
 8012206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	685a      	ldr	r2, [r3, #4]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	697a      	ldr	r2, [r7, #20]
 8012214:	621a      	str	r2, [r3, #32]
}
 8012216:	bf00      	nop
 8012218:	371c      	adds	r7, #28
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr
 8012222:	bf00      	nop
 8012224:	feff8fff 	.word	0xfeff8fff
 8012228:	40010000 	.word	0x40010000
 801222c:	40010400 	.word	0x40010400
 8012230:	40014000 	.word	0x40014000
 8012234:	40014400 	.word	0x40014400
 8012238:	40014800 	.word	0x40014800

0801223c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801223c:	b480      	push	{r7}
 801223e:	b087      	sub	sp, #28
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
 8012244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6a1b      	ldr	r3, [r3, #32]
 801224a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6a1b      	ldr	r3, [r3, #32]
 8012256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	69db      	ldr	r3, [r3, #28]
 8012262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012264:	68fa      	ldr	r2, [r7, #12]
 8012266:	4b33      	ldr	r3, [pc, #204]	; (8012334 <TIM_OC3_SetConfig+0xf8>)
 8012268:	4013      	ands	r3, r2
 801226a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	f023 0303 	bic.w	r3, r3, #3
 8012272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	68fa      	ldr	r2, [r7, #12]
 801227a:	4313      	orrs	r3, r2
 801227c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	689b      	ldr	r3, [r3, #8]
 801228a:	021b      	lsls	r3, r3, #8
 801228c:	697a      	ldr	r2, [r7, #20]
 801228e:	4313      	orrs	r3, r2
 8012290:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	4a28      	ldr	r2, [pc, #160]	; (8012338 <TIM_OC3_SetConfig+0xfc>)
 8012296:	4293      	cmp	r3, r2
 8012298:	d003      	beq.n	80122a2 <TIM_OC3_SetConfig+0x66>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	4a27      	ldr	r2, [pc, #156]	; (801233c <TIM_OC3_SetConfig+0x100>)
 801229e:	4293      	cmp	r3, r2
 80122a0:	d10d      	bne.n	80122be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80122a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	68db      	ldr	r3, [r3, #12]
 80122ae:	021b      	lsls	r3, r3, #8
 80122b0:	697a      	ldr	r2, [r7, #20]
 80122b2:	4313      	orrs	r3, r2
 80122b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80122b6:	697b      	ldr	r3, [r7, #20]
 80122b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80122bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	4a1d      	ldr	r2, [pc, #116]	; (8012338 <TIM_OC3_SetConfig+0xfc>)
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d00f      	beq.n	80122e6 <TIM_OC3_SetConfig+0xaa>
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	4a1c      	ldr	r2, [pc, #112]	; (801233c <TIM_OC3_SetConfig+0x100>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d00b      	beq.n	80122e6 <TIM_OC3_SetConfig+0xaa>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	4a1b      	ldr	r2, [pc, #108]	; (8012340 <TIM_OC3_SetConfig+0x104>)
 80122d2:	4293      	cmp	r3, r2
 80122d4:	d007      	beq.n	80122e6 <TIM_OC3_SetConfig+0xaa>
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	4a1a      	ldr	r2, [pc, #104]	; (8012344 <TIM_OC3_SetConfig+0x108>)
 80122da:	4293      	cmp	r3, r2
 80122dc:	d003      	beq.n	80122e6 <TIM_OC3_SetConfig+0xaa>
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	4a19      	ldr	r2, [pc, #100]	; (8012348 <TIM_OC3_SetConfig+0x10c>)
 80122e2:	4293      	cmp	r3, r2
 80122e4:	d113      	bne.n	801230e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80122ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80122f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	695b      	ldr	r3, [r3, #20]
 80122fa:	011b      	lsls	r3, r3, #4
 80122fc:	693a      	ldr	r2, [r7, #16]
 80122fe:	4313      	orrs	r3, r2
 8012300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	699b      	ldr	r3, [r3, #24]
 8012306:	011b      	lsls	r3, r3, #4
 8012308:	693a      	ldr	r2, [r7, #16]
 801230a:	4313      	orrs	r3, r2
 801230c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	693a      	ldr	r2, [r7, #16]
 8012312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	68fa      	ldr	r2, [r7, #12]
 8012318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	685a      	ldr	r2, [r3, #4]
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	697a      	ldr	r2, [r7, #20]
 8012326:	621a      	str	r2, [r3, #32]
}
 8012328:	bf00      	nop
 801232a:	371c      	adds	r7, #28
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr
 8012334:	fffeff8f 	.word	0xfffeff8f
 8012338:	40010000 	.word	0x40010000
 801233c:	40010400 	.word	0x40010400
 8012340:	40014000 	.word	0x40014000
 8012344:	40014400 	.word	0x40014400
 8012348:	40014800 	.word	0x40014800

0801234c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801234c:	b480      	push	{r7}
 801234e:	b087      	sub	sp, #28
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	6a1b      	ldr	r3, [r3, #32]
 801235a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	6a1b      	ldr	r3, [r3, #32]
 8012366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	69db      	ldr	r3, [r3, #28]
 8012372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012374:	68fa      	ldr	r2, [r7, #12]
 8012376:	4b24      	ldr	r3, [pc, #144]	; (8012408 <TIM_OC4_SetConfig+0xbc>)
 8012378:	4013      	ands	r3, r2
 801237a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	021b      	lsls	r3, r3, #8
 801238a:	68fa      	ldr	r2, [r7, #12]
 801238c:	4313      	orrs	r3, r2
 801238e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	689b      	ldr	r3, [r3, #8]
 801239c:	031b      	lsls	r3, r3, #12
 801239e:	693a      	ldr	r2, [r7, #16]
 80123a0:	4313      	orrs	r3, r2
 80123a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	4a19      	ldr	r2, [pc, #100]	; (801240c <TIM_OC4_SetConfig+0xc0>)
 80123a8:	4293      	cmp	r3, r2
 80123aa:	d00f      	beq.n	80123cc <TIM_OC4_SetConfig+0x80>
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	4a18      	ldr	r2, [pc, #96]	; (8012410 <TIM_OC4_SetConfig+0xc4>)
 80123b0:	4293      	cmp	r3, r2
 80123b2:	d00b      	beq.n	80123cc <TIM_OC4_SetConfig+0x80>
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	4a17      	ldr	r2, [pc, #92]	; (8012414 <TIM_OC4_SetConfig+0xc8>)
 80123b8:	4293      	cmp	r3, r2
 80123ba:	d007      	beq.n	80123cc <TIM_OC4_SetConfig+0x80>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	4a16      	ldr	r2, [pc, #88]	; (8012418 <TIM_OC4_SetConfig+0xcc>)
 80123c0:	4293      	cmp	r3, r2
 80123c2:	d003      	beq.n	80123cc <TIM_OC4_SetConfig+0x80>
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	4a15      	ldr	r2, [pc, #84]	; (801241c <TIM_OC4_SetConfig+0xd0>)
 80123c8:	4293      	cmp	r3, r2
 80123ca:	d109      	bne.n	80123e0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80123d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	695b      	ldr	r3, [r3, #20]
 80123d8:	019b      	lsls	r3, r3, #6
 80123da:	697a      	ldr	r2, [r7, #20]
 80123dc:	4313      	orrs	r3, r2
 80123de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	697a      	ldr	r2, [r7, #20]
 80123e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	68fa      	ldr	r2, [r7, #12]
 80123ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	685a      	ldr	r2, [r3, #4]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	693a      	ldr	r2, [r7, #16]
 80123f8:	621a      	str	r2, [r3, #32]
}
 80123fa:	bf00      	nop
 80123fc:	371c      	adds	r7, #28
 80123fe:	46bd      	mov	sp, r7
 8012400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012404:	4770      	bx	lr
 8012406:	bf00      	nop
 8012408:	feff8fff 	.word	0xfeff8fff
 801240c:	40010000 	.word	0x40010000
 8012410:	40010400 	.word	0x40010400
 8012414:	40014000 	.word	0x40014000
 8012418:	40014400 	.word	0x40014400
 801241c:	40014800 	.word	0x40014800

08012420 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8012420:	b480      	push	{r7}
 8012422:	b087      	sub	sp, #28
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	6a1b      	ldr	r3, [r3, #32]
 801242e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	6a1b      	ldr	r3, [r3, #32]
 801243a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	685b      	ldr	r3, [r3, #4]
 8012440:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	4b21      	ldr	r3, [pc, #132]	; (80124d0 <TIM_OC5_SetConfig+0xb0>)
 801244c:	4013      	ands	r3, r2
 801244e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	68fa      	ldr	r2, [r7, #12]
 8012456:	4313      	orrs	r3, r2
 8012458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8012460:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	689b      	ldr	r3, [r3, #8]
 8012466:	041b      	lsls	r3, r3, #16
 8012468:	693a      	ldr	r2, [r7, #16]
 801246a:	4313      	orrs	r3, r2
 801246c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	4a18      	ldr	r2, [pc, #96]	; (80124d4 <TIM_OC5_SetConfig+0xb4>)
 8012472:	4293      	cmp	r3, r2
 8012474:	d00f      	beq.n	8012496 <TIM_OC5_SetConfig+0x76>
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	4a17      	ldr	r2, [pc, #92]	; (80124d8 <TIM_OC5_SetConfig+0xb8>)
 801247a:	4293      	cmp	r3, r2
 801247c:	d00b      	beq.n	8012496 <TIM_OC5_SetConfig+0x76>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	4a16      	ldr	r2, [pc, #88]	; (80124dc <TIM_OC5_SetConfig+0xbc>)
 8012482:	4293      	cmp	r3, r2
 8012484:	d007      	beq.n	8012496 <TIM_OC5_SetConfig+0x76>
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	4a15      	ldr	r2, [pc, #84]	; (80124e0 <TIM_OC5_SetConfig+0xc0>)
 801248a:	4293      	cmp	r3, r2
 801248c:	d003      	beq.n	8012496 <TIM_OC5_SetConfig+0x76>
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	4a14      	ldr	r2, [pc, #80]	; (80124e4 <TIM_OC5_SetConfig+0xc4>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d109      	bne.n	80124aa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801249c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	695b      	ldr	r3, [r3, #20]
 80124a2:	021b      	lsls	r3, r3, #8
 80124a4:	697a      	ldr	r2, [r7, #20]
 80124a6:	4313      	orrs	r3, r2
 80124a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	697a      	ldr	r2, [r7, #20]
 80124ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	68fa      	ldr	r2, [r7, #12]
 80124b4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	685a      	ldr	r2, [r3, #4]
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	693a      	ldr	r2, [r7, #16]
 80124c2:	621a      	str	r2, [r3, #32]
}
 80124c4:	bf00      	nop
 80124c6:	371c      	adds	r7, #28
 80124c8:	46bd      	mov	sp, r7
 80124ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ce:	4770      	bx	lr
 80124d0:	fffeff8f 	.word	0xfffeff8f
 80124d4:	40010000 	.word	0x40010000
 80124d8:	40010400 	.word	0x40010400
 80124dc:	40014000 	.word	0x40014000
 80124e0:	40014400 	.word	0x40014400
 80124e4:	40014800 	.word	0x40014800

080124e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80124e8:	b480      	push	{r7}
 80124ea:	b087      	sub	sp, #28
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	6a1b      	ldr	r3, [r3, #32]
 80124f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6a1b      	ldr	r3, [r3, #32]
 8012502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	685b      	ldr	r3, [r3, #4]
 8012508:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801250e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	4b22      	ldr	r3, [pc, #136]	; (801259c <TIM_OC6_SetConfig+0xb4>)
 8012514:	4013      	ands	r3, r2
 8012516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	021b      	lsls	r3, r3, #8
 801251e:	68fa      	ldr	r2, [r7, #12]
 8012520:	4313      	orrs	r3, r2
 8012522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801252a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	689b      	ldr	r3, [r3, #8]
 8012530:	051b      	lsls	r3, r3, #20
 8012532:	693a      	ldr	r2, [r7, #16]
 8012534:	4313      	orrs	r3, r2
 8012536:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	4a19      	ldr	r2, [pc, #100]	; (80125a0 <TIM_OC6_SetConfig+0xb8>)
 801253c:	4293      	cmp	r3, r2
 801253e:	d00f      	beq.n	8012560 <TIM_OC6_SetConfig+0x78>
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	4a18      	ldr	r2, [pc, #96]	; (80125a4 <TIM_OC6_SetConfig+0xbc>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d00b      	beq.n	8012560 <TIM_OC6_SetConfig+0x78>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	4a17      	ldr	r2, [pc, #92]	; (80125a8 <TIM_OC6_SetConfig+0xc0>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d007      	beq.n	8012560 <TIM_OC6_SetConfig+0x78>
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	4a16      	ldr	r2, [pc, #88]	; (80125ac <TIM_OC6_SetConfig+0xc4>)
 8012554:	4293      	cmp	r3, r2
 8012556:	d003      	beq.n	8012560 <TIM_OC6_SetConfig+0x78>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	4a15      	ldr	r2, [pc, #84]	; (80125b0 <TIM_OC6_SetConfig+0xc8>)
 801255c:	4293      	cmp	r3, r2
 801255e:	d109      	bne.n	8012574 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8012560:	697b      	ldr	r3, [r7, #20]
 8012562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	695b      	ldr	r3, [r3, #20]
 801256c:	029b      	lsls	r3, r3, #10
 801256e:	697a      	ldr	r2, [r7, #20]
 8012570:	4313      	orrs	r3, r2
 8012572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	697a      	ldr	r2, [r7, #20]
 8012578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	68fa      	ldr	r2, [r7, #12]
 801257e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	685a      	ldr	r2, [r3, #4]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	693a      	ldr	r2, [r7, #16]
 801258c:	621a      	str	r2, [r3, #32]
}
 801258e:	bf00      	nop
 8012590:	371c      	adds	r7, #28
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr
 801259a:	bf00      	nop
 801259c:	feff8fff 	.word	0xfeff8fff
 80125a0:	40010000 	.word	0x40010000
 80125a4:	40010400 	.word	0x40010400
 80125a8:	40014000 	.word	0x40014000
 80125ac:	40014400 	.word	0x40014400
 80125b0:	40014800 	.word	0x40014800

080125b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80125b4:	b480      	push	{r7}
 80125b6:	b087      	sub	sp, #28
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	6a1b      	ldr	r3, [r3, #32]
 80125c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	6a1b      	ldr	r3, [r3, #32]
 80125ca:	f023 0201 	bic.w	r2, r3, #1
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	699b      	ldr	r3, [r3, #24]
 80125d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80125de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	011b      	lsls	r3, r3, #4
 80125e4:	693a      	ldr	r2, [r7, #16]
 80125e6:	4313      	orrs	r3, r2
 80125e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	f023 030a 	bic.w	r3, r3, #10
 80125f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80125f2:	697a      	ldr	r2, [r7, #20]
 80125f4:	68bb      	ldr	r3, [r7, #8]
 80125f6:	4313      	orrs	r3, r2
 80125f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	693a      	ldr	r2, [r7, #16]
 80125fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	697a      	ldr	r2, [r7, #20]
 8012604:	621a      	str	r2, [r3, #32]
}
 8012606:	bf00      	nop
 8012608:	371c      	adds	r7, #28
 801260a:	46bd      	mov	sp, r7
 801260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012610:	4770      	bx	lr

08012612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012612:	b480      	push	{r7}
 8012614:	b087      	sub	sp, #28
 8012616:	af00      	add	r7, sp, #0
 8012618:	60f8      	str	r0, [r7, #12]
 801261a:	60b9      	str	r1, [r7, #8]
 801261c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	6a1b      	ldr	r3, [r3, #32]
 8012622:	f023 0210 	bic.w	r2, r3, #16
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	699b      	ldr	r3, [r3, #24]
 801262e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	6a1b      	ldr	r3, [r3, #32]
 8012634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801263c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	031b      	lsls	r3, r3, #12
 8012642:	697a      	ldr	r2, [r7, #20]
 8012644:	4313      	orrs	r3, r2
 8012646:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801264e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012650:	68bb      	ldr	r3, [r7, #8]
 8012652:	011b      	lsls	r3, r3, #4
 8012654:	693a      	ldr	r2, [r7, #16]
 8012656:	4313      	orrs	r3, r2
 8012658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	697a      	ldr	r2, [r7, #20]
 801265e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	693a      	ldr	r2, [r7, #16]
 8012664:	621a      	str	r2, [r3, #32]
}
 8012666:	bf00      	nop
 8012668:	371c      	adds	r7, #28
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr
	...

08012674 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012674:	b480      	push	{r7}
 8012676:	b085      	sub	sp, #20
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	689b      	ldr	r3, [r3, #8]
 8012682:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012684:	68fa      	ldr	r2, [r7, #12]
 8012686:	4b09      	ldr	r3, [pc, #36]	; (80126ac <TIM_ITRx_SetConfig+0x38>)
 8012688:	4013      	ands	r3, r2
 801268a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801268c:	683a      	ldr	r2, [r7, #0]
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	4313      	orrs	r3, r2
 8012692:	f043 0307 	orr.w	r3, r3, #7
 8012696:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	68fa      	ldr	r2, [r7, #12]
 801269c:	609a      	str	r2, [r3, #8]
}
 801269e:	bf00      	nop
 80126a0:	3714      	adds	r7, #20
 80126a2:	46bd      	mov	sp, r7
 80126a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a8:	4770      	bx	lr
 80126aa:	bf00      	nop
 80126ac:	ffcfff8f 	.word	0xffcfff8f

080126b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80126b0:	b480      	push	{r7}
 80126b2:	b087      	sub	sp, #28
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	607a      	str	r2, [r7, #4]
 80126bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	689b      	ldr	r3, [r3, #8]
 80126c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80126ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80126cc:	683b      	ldr	r3, [r7, #0]
 80126ce:	021a      	lsls	r2, r3, #8
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	431a      	orrs	r2, r3
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	4313      	orrs	r3, r2
 80126d8:	697a      	ldr	r2, [r7, #20]
 80126da:	4313      	orrs	r3, r2
 80126dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	697a      	ldr	r2, [r7, #20]
 80126e2:	609a      	str	r2, [r3, #8]
}
 80126e4:	bf00      	nop
 80126e6:	371c      	adds	r7, #28
 80126e8:	46bd      	mov	sp, r7
 80126ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ee:	4770      	bx	lr

080126f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80126f0:	b480      	push	{r7}
 80126f2:	b087      	sub	sp, #28
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	f003 031f 	and.w	r3, r3, #31
 8012702:	2201      	movs	r2, #1
 8012704:	fa02 f303 	lsl.w	r3, r2, r3
 8012708:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	6a1a      	ldr	r2, [r3, #32]
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	43db      	mvns	r3, r3
 8012712:	401a      	ands	r2, r3
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6a1a      	ldr	r2, [r3, #32]
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	f003 031f 	and.w	r3, r3, #31
 8012722:	6879      	ldr	r1, [r7, #4]
 8012724:	fa01 f303 	lsl.w	r3, r1, r3
 8012728:	431a      	orrs	r2, r3
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	621a      	str	r2, [r3, #32]
}
 801272e:	bf00      	nop
 8012730:	371c      	adds	r7, #28
 8012732:	46bd      	mov	sp, r7
 8012734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012738:	4770      	bx	lr
	...

0801273c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801273c:	b480      	push	{r7}
 801273e:	b085      	sub	sp, #20
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801274c:	2b01      	cmp	r3, #1
 801274e:	d101      	bne.n	8012754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012750:	2302      	movs	r3, #2
 8012752:	e077      	b.n	8012844 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2201      	movs	r2, #1
 8012758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	2202      	movs	r2, #2
 8012760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	689b      	ldr	r3, [r3, #8]
 8012772:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	4a35      	ldr	r2, [pc, #212]	; (8012850 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801277a:	4293      	cmp	r3, r2
 801277c:	d004      	beq.n	8012788 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	4a34      	ldr	r2, [pc, #208]	; (8012854 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012784:	4293      	cmp	r3, r2
 8012786:	d108      	bne.n	801279a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801278e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	68fa      	ldr	r2, [r7, #12]
 8012796:	4313      	orrs	r3, r2
 8012798:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80127a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	68fa      	ldr	r2, [r7, #12]
 80127a8:	4313      	orrs	r3, r2
 80127aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	68fa      	ldr	r2, [r7, #12]
 80127b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	4a25      	ldr	r2, [pc, #148]	; (8012850 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80127ba:	4293      	cmp	r3, r2
 80127bc:	d02c      	beq.n	8012818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80127c6:	d027      	beq.n	8012818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	4a22      	ldr	r2, [pc, #136]	; (8012858 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d022      	beq.n	8012818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	4a21      	ldr	r2, [pc, #132]	; (801285c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80127d8:	4293      	cmp	r3, r2
 80127da:	d01d      	beq.n	8012818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	4a1f      	ldr	r2, [pc, #124]	; (8012860 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d018      	beq.n	8012818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	4a1a      	ldr	r2, [pc, #104]	; (8012854 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80127ec:	4293      	cmp	r3, r2
 80127ee:	d013      	beq.n	8012818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4a1b      	ldr	r2, [pc, #108]	; (8012864 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80127f6:	4293      	cmp	r3, r2
 80127f8:	d00e      	beq.n	8012818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	4a1a      	ldr	r2, [pc, #104]	; (8012868 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8012800:	4293      	cmp	r3, r2
 8012802:	d009      	beq.n	8012818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	4a18      	ldr	r2, [pc, #96]	; (801286c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801280a:	4293      	cmp	r3, r2
 801280c:	d004      	beq.n	8012818 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	4a17      	ldr	r2, [pc, #92]	; (8012870 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8012814:	4293      	cmp	r3, r2
 8012816:	d10c      	bne.n	8012832 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801281e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	689b      	ldr	r3, [r3, #8]
 8012824:	68ba      	ldr	r2, [r7, #8]
 8012826:	4313      	orrs	r3, r2
 8012828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	68ba      	ldr	r2, [r7, #8]
 8012830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2201      	movs	r2, #1
 8012836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2200      	movs	r2, #0
 801283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012842:	2300      	movs	r3, #0
}
 8012844:	4618      	mov	r0, r3
 8012846:	3714      	adds	r7, #20
 8012848:	46bd      	mov	sp, r7
 801284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284e:	4770      	bx	lr
 8012850:	40010000 	.word	0x40010000
 8012854:	40010400 	.word	0x40010400
 8012858:	40000400 	.word	0x40000400
 801285c:	40000800 	.word	0x40000800
 8012860:	40000c00 	.word	0x40000c00
 8012864:	40001800 	.word	0x40001800
 8012868:	40014000 	.word	0x40014000
 801286c:	4000e000 	.word	0x4000e000
 8012870:	4000e400 	.word	0x4000e400

08012874 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012874:	b480      	push	{r7}
 8012876:	b085      	sub	sp, #20
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
 801287c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801287e:	2300      	movs	r3, #0
 8012880:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012888:	2b01      	cmp	r3, #1
 801288a:	d101      	bne.n	8012890 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801288c:	2302      	movs	r3, #2
 801288e:	e087      	b.n	80129a0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2201      	movs	r2, #1
 8012894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	4313      	orrs	r3, r2
 80128a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	689b      	ldr	r3, [r3, #8]
 80128b0:	4313      	orrs	r3, r2
 80128b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	4313      	orrs	r3, r2
 80128c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	4313      	orrs	r3, r2
 80128ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	691b      	ldr	r3, [r3, #16]
 80128da:	4313      	orrs	r3, r2
 80128dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	695b      	ldr	r3, [r3, #20]
 80128e8:	4313      	orrs	r3, r2
 80128ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128f6:	4313      	orrs	r3, r2
 80128f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	699b      	ldr	r3, [r3, #24]
 8012904:	041b      	lsls	r3, r3, #16
 8012906:	4313      	orrs	r3, r2
 8012908:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	4a27      	ldr	r2, [pc, #156]	; (80129ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012910:	4293      	cmp	r3, r2
 8012912:	d004      	beq.n	801291e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	4a25      	ldr	r2, [pc, #148]	; (80129b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801291a:	4293      	cmp	r3, r2
 801291c:	d106      	bne.n	801292c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	69db      	ldr	r3, [r3, #28]
 8012928:	4313      	orrs	r3, r2
 801292a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	4a1e      	ldr	r2, [pc, #120]	; (80129ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012932:	4293      	cmp	r3, r2
 8012934:	d004      	beq.n	8012940 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	4a1d      	ldr	r2, [pc, #116]	; (80129b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801293c:	4293      	cmp	r3, r2
 801293e:	d126      	bne.n	801298e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801294a:	051b      	lsls	r3, r3, #20
 801294c:	4313      	orrs	r3, r2
 801294e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	6a1b      	ldr	r3, [r3, #32]
 801295a:	4313      	orrs	r3, r2
 801295c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012964:	683b      	ldr	r3, [r7, #0]
 8012966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012968:	4313      	orrs	r3, r2
 801296a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a0e      	ldr	r2, [pc, #56]	; (80129ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d004      	beq.n	8012980 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4a0d      	ldr	r2, [pc, #52]	; (80129b0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801297c:	4293      	cmp	r3, r2
 801297e:	d106      	bne.n	801298e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801298a:	4313      	orrs	r3, r2
 801298c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	68fa      	ldr	r2, [r7, #12]
 8012994:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2200      	movs	r2, #0
 801299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801299e:	2300      	movs	r3, #0
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3714      	adds	r7, #20
 80129a4:	46bd      	mov	sp, r7
 80129a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129aa:	4770      	bx	lr
 80129ac:	40010000 	.word	0x40010000
 80129b0:	40010400 	.word	0x40010400

080129b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80129bc:	bf00      	nop
 80129be:	370c      	adds	r7, #12
 80129c0:	46bd      	mov	sp, r7
 80129c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c6:	4770      	bx	lr

080129c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80129c8:	b480      	push	{r7}
 80129ca:	b083      	sub	sp, #12
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80129d0:	bf00      	nop
 80129d2:	370c      	adds	r7, #12
 80129d4:	46bd      	mov	sp, r7
 80129d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129da:	4770      	bx	lr

080129dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80129dc:	b480      	push	{r7}
 80129de:	b083      	sub	sp, #12
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80129e4:	bf00      	nop
 80129e6:	370c      	adds	r7, #12
 80129e8:	46bd      	mov	sp, r7
 80129ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ee:	4770      	bx	lr

080129f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d101      	bne.n	8012a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80129fe:	2301      	movs	r3, #1
 8012a00:	e042      	b.n	8012a88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d106      	bne.n	8012a1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7f3 fd1f 	bl	8006458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2224      	movs	r2, #36	; 0x24
 8012a1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f022 0201 	bic.w	r2, r2, #1
 8012a30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f000 fce8 	bl	8013408 <UART_SetConfig>
 8012a38:	4603      	mov	r3, r0
 8012a3a:	2b01      	cmp	r3, #1
 8012a3c:	d101      	bne.n	8012a42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012a3e:	2301      	movs	r3, #1
 8012a40:	e022      	b.n	8012a88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d002      	beq.n	8012a50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f001 fb48 	bl	80140e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	685a      	ldr	r2, [r3, #4]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012a5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	689a      	ldr	r2, [r3, #8]
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012a6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	f042 0201 	orr.w	r2, r2, #1
 8012a7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f001 fbcf 	bl	8014224 <UART_CheckIdleState>
 8012a86:	4603      	mov	r3, r0
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3708      	adds	r7, #8
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012a90:	b480      	push	{r7}
 8012a92:	b091      	sub	sp, #68	; 0x44
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	4613      	mov	r3, r2
 8012a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012aa4:	2b20      	cmp	r3, #32
 8012aa6:	f040 808c 	bne.w	8012bc2 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d002      	beq.n	8012ab6 <HAL_UART_Transmit_IT+0x26>
 8012ab0:	88fb      	ldrh	r3, [r7, #6]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d101      	bne.n	8012aba <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	e084      	b.n	8012bc4 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012ac0:	2b01      	cmp	r3, #1
 8012ac2:	d101      	bne.n	8012ac8 <HAL_UART_Transmit_IT+0x38>
 8012ac4:	2302      	movs	r3, #2
 8012ac6:	e07d      	b.n	8012bc4 <HAL_UART_Transmit_IT+0x134>
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	2201      	movs	r2, #1
 8012acc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	68ba      	ldr	r2, [r7, #8]
 8012ad4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	88fa      	ldrh	r2, [r7, #6]
 8012ada:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	88fa      	ldrh	r2, [r7, #6]
 8012ae2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	2200      	movs	r2, #0
 8012af0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	2221      	movs	r2, #33	; 0x21
 8012af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012b00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012b04:	d12e      	bne.n	8012b64 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	689b      	ldr	r3, [r3, #8]
 8012b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b0e:	d107      	bne.n	8012b20 <HAL_UART_Transmit_IT+0x90>
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	691b      	ldr	r3, [r3, #16]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d103      	bne.n	8012b20 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	4a2d      	ldr	r2, [pc, #180]	; (8012bd0 <HAL_UART_Transmit_IT+0x140>)
 8012b1c:	675a      	str	r2, [r3, #116]	; 0x74
 8012b1e:	e002      	b.n	8012b26 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	4a2c      	ldr	r2, [pc, #176]	; (8012bd4 <HAL_UART_Transmit_IT+0x144>)
 8012b24:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2200      	movs	r2, #0
 8012b2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	3308      	adds	r3, #8
 8012b34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b38:	e853 3f00 	ldrex	r3, [r3]
 8012b3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012b44:	63bb      	str	r3, [r7, #56]	; 0x38
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	3308      	adds	r3, #8
 8012b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012b4e:	637a      	str	r2, [r7, #52]	; 0x34
 8012b50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b56:	e841 2300 	strex	r3, r2, [r1]
 8012b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d1e5      	bne.n	8012b2e <HAL_UART_Transmit_IT+0x9e>
 8012b62:	e02c      	b.n	8012bbe <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b6c:	d107      	bne.n	8012b7e <HAL_UART_Transmit_IT+0xee>
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	691b      	ldr	r3, [r3, #16]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d103      	bne.n	8012b7e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	4a17      	ldr	r2, [pc, #92]	; (8012bd8 <HAL_UART_Transmit_IT+0x148>)
 8012b7a:	675a      	str	r2, [r3, #116]	; 0x74
 8012b7c:	e002      	b.n	8012b84 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	4a16      	ldr	r2, [pc, #88]	; (8012bdc <HAL_UART_Transmit_IT+0x14c>)
 8012b82:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2200      	movs	r2, #0
 8012b88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	e853 3f00 	ldrex	r3, [r3]
 8012b98:	613b      	str	r3, [r7, #16]
   return(result);
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	461a      	mov	r2, r3
 8012ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012baa:	623b      	str	r3, [r7, #32]
 8012bac:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bae:	69f9      	ldr	r1, [r7, #28]
 8012bb0:	6a3a      	ldr	r2, [r7, #32]
 8012bb2:	e841 2300 	strex	r3, r2, [r1]
 8012bb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d1e6      	bne.n	8012b8c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	e000      	b.n	8012bc4 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8012bc2:	2302      	movs	r3, #2
  }
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3744      	adds	r7, #68	; 0x44
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bce:	4770      	bx	lr
 8012bd0:	080149f3 	.word	0x080149f3
 8012bd4:	08014913 	.word	0x08014913
 8012bd8:	08014851 	.word	0x08014851
 8012bdc:	08014799 	.word	0x08014799

08012be0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b08a      	sub	sp, #40	; 0x28
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	60f8      	str	r0, [r7, #12]
 8012be8:	60b9      	str	r1, [r7, #8]
 8012bea:	4613      	mov	r3, r2
 8012bec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012bf4:	2b20      	cmp	r3, #32
 8012bf6:	d142      	bne.n	8012c7e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d002      	beq.n	8012c04 <HAL_UART_Receive_IT+0x24>
 8012bfe:	88fb      	ldrh	r3, [r7, #6]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d101      	bne.n	8012c08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8012c04:	2301      	movs	r3, #1
 8012c06:	e03b      	b.n	8012c80 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012c0e:	2b01      	cmp	r3, #1
 8012c10:	d101      	bne.n	8012c16 <HAL_UART_Receive_IT+0x36>
 8012c12:	2302      	movs	r3, #2
 8012c14:	e034      	b.n	8012c80 <HAL_UART_Receive_IT+0xa0>
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2201      	movs	r2, #1
 8012c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	2200      	movs	r2, #0
 8012c22:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	4a17      	ldr	r2, [pc, #92]	; (8012c88 <HAL_UART_Receive_IT+0xa8>)
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	d01f      	beq.n	8012c6e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d018      	beq.n	8012c6e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c42:	697b      	ldr	r3, [r7, #20]
 8012c44:	e853 3f00 	ldrex	r3, [r3]
 8012c48:	613b      	str	r3, [r7, #16]
   return(result);
 8012c4a:	693b      	ldr	r3, [r7, #16]
 8012c4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012c50:	627b      	str	r3, [r7, #36]	; 0x24
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	461a      	mov	r2, r3
 8012c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5a:	623b      	str	r3, [r7, #32]
 8012c5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c5e:	69f9      	ldr	r1, [r7, #28]
 8012c60:	6a3a      	ldr	r2, [r7, #32]
 8012c62:	e841 2300 	strex	r3, r2, [r1]
 8012c66:	61bb      	str	r3, [r7, #24]
   return(result);
 8012c68:	69bb      	ldr	r3, [r7, #24]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d1e6      	bne.n	8012c3c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8012c6e:	88fb      	ldrh	r3, [r7, #6]
 8012c70:	461a      	mov	r2, r3
 8012c72:	68b9      	ldr	r1, [r7, #8]
 8012c74:	68f8      	ldr	r0, [r7, #12]
 8012c76:	f001 fbe9 	bl	801444c <UART_Start_Receive_IT>
 8012c7a:	4603      	mov	r3, r0
 8012c7c:	e000      	b.n	8012c80 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8012c7e:	2302      	movs	r3, #2
  }
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3728      	adds	r7, #40	; 0x28
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}
 8012c88:	58000c00 	.word	0x58000c00

08012c8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b0ba      	sub	sp, #232	; 0xe8
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	69db      	ldr	r3, [r3, #28]
 8012c9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	689b      	ldr	r3, [r3, #8]
 8012cae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012cb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012cb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8012cba:	4013      	ands	r3, r2
 8012cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d11b      	bne.n	8012d00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ccc:	f003 0320 	and.w	r3, r3, #32
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d015      	beq.n	8012d00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012cd8:	f003 0320 	and.w	r3, r3, #32
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d105      	bne.n	8012cec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d009      	beq.n	8012d00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	f000 835a 	beq.w	80133aa <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	4798      	blx	r3
      }
      return;
 8012cfe:	e354      	b.n	80133aa <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	f000 811f 	beq.w	8012f48 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012d0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012d0e:	4b8b      	ldr	r3, [pc, #556]	; (8012f3c <HAL_UART_IRQHandler+0x2b0>)
 8012d10:	4013      	ands	r3, r2
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d106      	bne.n	8012d24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012d16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012d1a:	4b89      	ldr	r3, [pc, #548]	; (8012f40 <HAL_UART_IRQHandler+0x2b4>)
 8012d1c:	4013      	ands	r3, r2
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	f000 8112 	beq.w	8012f48 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012d28:	f003 0301 	and.w	r3, r3, #1
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d011      	beq.n	8012d54 <HAL_UART_IRQHandler+0xc8>
 8012d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d00b      	beq.n	8012d54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2201      	movs	r2, #1
 8012d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012d4a:	f043 0201 	orr.w	r2, r3, #1
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012d58:	f003 0302 	and.w	r3, r3, #2
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d011      	beq.n	8012d84 <HAL_UART_IRQHandler+0xf8>
 8012d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012d64:	f003 0301 	and.w	r3, r3, #1
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d00b      	beq.n	8012d84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	2202      	movs	r2, #2
 8012d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012d7a:	f043 0204 	orr.w	r2, r3, #4
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012d88:	f003 0304 	and.w	r3, r3, #4
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d011      	beq.n	8012db4 <HAL_UART_IRQHandler+0x128>
 8012d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012d94:	f003 0301 	and.w	r3, r3, #1
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d00b      	beq.n	8012db4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	2204      	movs	r2, #4
 8012da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012daa:	f043 0202 	orr.w	r2, r3, #2
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012db8:	f003 0308 	and.w	r3, r3, #8
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d017      	beq.n	8012df0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012dc4:	f003 0320 	and.w	r3, r3, #32
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d105      	bne.n	8012dd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012dcc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012dd0:	4b5a      	ldr	r3, [pc, #360]	; (8012f3c <HAL_UART_IRQHandler+0x2b0>)
 8012dd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d00b      	beq.n	8012df0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2208      	movs	r2, #8
 8012dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012de6:	f043 0208 	orr.w	r2, r3, #8
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d012      	beq.n	8012e22 <HAL_UART_IRQHandler+0x196>
 8012dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d00c      	beq.n	8012e22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012e18:	f043 0220 	orr.w	r2, r3, #32
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	f000 82c0 	beq.w	80133ae <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012e32:	f003 0320 	and.w	r3, r3, #32
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d013      	beq.n	8012e62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012e3e:	f003 0320 	and.w	r3, r3, #32
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d105      	bne.n	8012e52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d007      	beq.n	8012e62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d003      	beq.n	8012e62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012e68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	689b      	ldr	r3, [r3, #8]
 8012e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e76:	2b40      	cmp	r3, #64	; 0x40
 8012e78:	d005      	beq.n	8012e86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012e7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012e7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d04f      	beq.n	8012f26 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f001 fc0a 	bl	80146a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	689b      	ldr	r3, [r3, #8]
 8012e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e96:	2b40      	cmp	r3, #64	; 0x40
 8012e98:	d141      	bne.n	8012f1e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	3308      	adds	r3, #8
 8012ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ea4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012ea8:	e853 3f00 	ldrex	r3, [r3]
 8012eac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012eb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	3308      	adds	r3, #8
 8012ec2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012ec6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ece:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012ed2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012ed6:	e841 2300 	strex	r3, r2, [r1]
 8012eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d1d9      	bne.n	8012e9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d013      	beq.n	8012f16 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ef2:	4a14      	ldr	r2, [pc, #80]	; (8012f44 <HAL_UART_IRQHandler+0x2b8>)
 8012ef4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7f6 ff90 	bl	8009e20 <HAL_DMA_Abort_IT>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d017      	beq.n	8012f36 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8012f10:	4610      	mov	r0, r2
 8012f12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f14:	e00f      	b.n	8012f36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f000 fa60 	bl	80133dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f1c:	e00b      	b.n	8012f36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 fa5c 	bl	80133dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f24:	e007      	b.n	8012f36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f000 fa58 	bl	80133dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8012f34:	e23b      	b.n	80133ae <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f36:	bf00      	nop
    return;
 8012f38:	e239      	b.n	80133ae <HAL_UART_IRQHandler+0x722>
 8012f3a:	bf00      	nop
 8012f3c:	10000001 	.word	0x10000001
 8012f40:	04000120 	.word	0x04000120
 8012f44:	0801476d 	.word	0x0801476d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f4c:	2b01      	cmp	r3, #1
 8012f4e:	f040 81ce 	bne.w	80132ee <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012f56:	f003 0310 	and.w	r3, r3, #16
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	f000 81c7 	beq.w	80132ee <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012f64:	f003 0310 	and.w	r3, r3, #16
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	f000 81c0 	beq.w	80132ee <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	2210      	movs	r2, #16
 8012f74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	689b      	ldr	r3, [r3, #8]
 8012f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f80:	2b40      	cmp	r3, #64	; 0x40
 8012f82:	f040 813b 	bne.w	80131fc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	4a8b      	ldr	r2, [pc, #556]	; (80131bc <HAL_UART_IRQHandler+0x530>)
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d059      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4a89      	ldr	r2, [pc, #548]	; (80131c0 <HAL_UART_IRQHandler+0x534>)
 8012f9a:	4293      	cmp	r3, r2
 8012f9c:	d053      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	4a87      	ldr	r2, [pc, #540]	; (80131c4 <HAL_UART_IRQHandler+0x538>)
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	d04d      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	4a85      	ldr	r2, [pc, #532]	; (80131c8 <HAL_UART_IRQHandler+0x53c>)
 8012fb2:	4293      	cmp	r3, r2
 8012fb4:	d047      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	4a83      	ldr	r2, [pc, #524]	; (80131cc <HAL_UART_IRQHandler+0x540>)
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d041      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	4a81      	ldr	r2, [pc, #516]	; (80131d0 <HAL_UART_IRQHandler+0x544>)
 8012fca:	4293      	cmp	r3, r2
 8012fcc:	d03b      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	4a7f      	ldr	r2, [pc, #508]	; (80131d4 <HAL_UART_IRQHandler+0x548>)
 8012fd6:	4293      	cmp	r3, r2
 8012fd8:	d035      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	4a7d      	ldr	r2, [pc, #500]	; (80131d8 <HAL_UART_IRQHandler+0x54c>)
 8012fe2:	4293      	cmp	r3, r2
 8012fe4:	d02f      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	4a7b      	ldr	r2, [pc, #492]	; (80131dc <HAL_UART_IRQHandler+0x550>)
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d029      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ff6:	681b      	ldr	r3, [r3, #0]
 8012ff8:	4a79      	ldr	r2, [pc, #484]	; (80131e0 <HAL_UART_IRQHandler+0x554>)
 8012ffa:	4293      	cmp	r3, r2
 8012ffc:	d023      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	4a77      	ldr	r2, [pc, #476]	; (80131e4 <HAL_UART_IRQHandler+0x558>)
 8013006:	4293      	cmp	r3, r2
 8013008:	d01d      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	4a75      	ldr	r2, [pc, #468]	; (80131e8 <HAL_UART_IRQHandler+0x55c>)
 8013012:	4293      	cmp	r3, r2
 8013014:	d017      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	4a73      	ldr	r2, [pc, #460]	; (80131ec <HAL_UART_IRQHandler+0x560>)
 801301e:	4293      	cmp	r3, r2
 8013020:	d011      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	4a71      	ldr	r2, [pc, #452]	; (80131f0 <HAL_UART_IRQHandler+0x564>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d00b      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	4a6f      	ldr	r2, [pc, #444]	; (80131f4 <HAL_UART_IRQHandler+0x568>)
 8013036:	4293      	cmp	r3, r2
 8013038:	d005      	beq.n	8013046 <HAL_UART_IRQHandler+0x3ba>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	4a6d      	ldr	r2, [pc, #436]	; (80131f8 <HAL_UART_IRQHandler+0x56c>)
 8013042:	4293      	cmp	r3, r2
 8013044:	d105      	bne.n	8013052 <HAL_UART_IRQHandler+0x3c6>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	b29b      	uxth	r3, r3
 8013050:	e004      	b.n	801305c <HAL_UART_IRQHandler+0x3d0>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	b29b      	uxth	r3, r3
 801305c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8013060:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8013064:	2b00      	cmp	r3, #0
 8013066:	f000 81a4 	beq.w	80133b2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013070:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013074:	429a      	cmp	r2, r3
 8013076:	f080 819c 	bcs.w	80133b2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8013080:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013088:	69db      	ldr	r3, [r3, #28]
 801308a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801308e:	f000 8086 	beq.w	801319e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801309a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801309e:	e853 3f00 	ldrex	r3, [r3]
 80130a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80130a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80130aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80130ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	461a      	mov	r2, r3
 80130b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80130bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80130c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80130c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80130cc:	e841 2300 	strex	r3, r2, [r1]
 80130d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80130d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d1da      	bne.n	8013092 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	3308      	adds	r3, #8
 80130e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80130e6:	e853 3f00 	ldrex	r3, [r3]
 80130ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80130ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80130ee:	f023 0301 	bic.w	r3, r3, #1
 80130f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	3308      	adds	r3, #8
 80130fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013100:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8013104:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013106:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013108:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801310c:	e841 2300 	strex	r3, r2, [r1]
 8013110:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8013112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013114:	2b00      	cmp	r3, #0
 8013116:	d1e1      	bne.n	80130dc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	3308      	adds	r3, #8
 801311e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013122:	e853 3f00 	ldrex	r3, [r3]
 8013126:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013128:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801312a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801312e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	3308      	adds	r3, #8
 8013138:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801313c:	66fa      	str	r2, [r7, #108]	; 0x6c
 801313e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013140:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013142:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013144:	e841 2300 	strex	r3, r2, [r1]
 8013148:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801314a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801314c:	2b00      	cmp	r3, #0
 801314e:	d1e3      	bne.n	8013118 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	2220      	movs	r2, #32
 8013154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	2200      	movs	r2, #0
 801315c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013166:	e853 3f00 	ldrex	r3, [r3]
 801316a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801316c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801316e:	f023 0310 	bic.w	r3, r3, #16
 8013172:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	461a      	mov	r2, r3
 801317c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013180:	65bb      	str	r3, [r7, #88]	; 0x58
 8013182:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013184:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013186:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013188:	e841 2300 	strex	r3, r2, [r1]
 801318c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801318e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013190:	2b00      	cmp	r3, #0
 8013192:	d1e4      	bne.n	801315e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013198:	4618      	mov	r0, r3
 801319a:	f7f6 fb23 	bl	80097e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80131aa:	b29b      	uxth	r3, r3
 80131ac:	1ad3      	subs	r3, r2, r3
 80131ae:	b29b      	uxth	r3, r3
 80131b0:	4619      	mov	r1, r3
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f000 f91c 	bl	80133f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80131b8:	e0fb      	b.n	80133b2 <HAL_UART_IRQHandler+0x726>
 80131ba:	bf00      	nop
 80131bc:	40020010 	.word	0x40020010
 80131c0:	40020028 	.word	0x40020028
 80131c4:	40020040 	.word	0x40020040
 80131c8:	40020058 	.word	0x40020058
 80131cc:	40020070 	.word	0x40020070
 80131d0:	40020088 	.word	0x40020088
 80131d4:	400200a0 	.word	0x400200a0
 80131d8:	400200b8 	.word	0x400200b8
 80131dc:	40020410 	.word	0x40020410
 80131e0:	40020428 	.word	0x40020428
 80131e4:	40020440 	.word	0x40020440
 80131e8:	40020458 	.word	0x40020458
 80131ec:	40020470 	.word	0x40020470
 80131f0:	40020488 	.word	0x40020488
 80131f4:	400204a0 	.word	0x400204a0
 80131f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013208:	b29b      	uxth	r3, r3
 801320a:	1ad3      	subs	r3, r2, r3
 801320c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013216:	b29b      	uxth	r3, r3
 8013218:	2b00      	cmp	r3, #0
 801321a:	f000 80cc 	beq.w	80133b6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 801321e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8013222:	2b00      	cmp	r3, #0
 8013224:	f000 80c7 	beq.w	80133b6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013230:	e853 3f00 	ldrex	r3, [r3]
 8013234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801323c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	461a      	mov	r2, r3
 8013246:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801324a:	647b      	str	r3, [r7, #68]	; 0x44
 801324c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801324e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013252:	e841 2300 	strex	r3, r2, [r1]
 8013256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801325a:	2b00      	cmp	r3, #0
 801325c:	d1e4      	bne.n	8013228 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	3308      	adds	r3, #8
 8013264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013268:	e853 3f00 	ldrex	r3, [r3]
 801326c:	623b      	str	r3, [r7, #32]
   return(result);
 801326e:	6a3a      	ldr	r2, [r7, #32]
 8013270:	4b54      	ldr	r3, [pc, #336]	; (80133c4 <HAL_UART_IRQHandler+0x738>)
 8013272:	4013      	ands	r3, r2
 8013274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	3308      	adds	r3, #8
 801327e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8013282:	633a      	str	r2, [r7, #48]	; 0x30
 8013284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801328a:	e841 2300 	strex	r3, r2, [r1]
 801328e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013292:	2b00      	cmp	r3, #0
 8013294:	d1e3      	bne.n	801325e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	2220      	movs	r2, #32
 801329a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2200      	movs	r2, #0
 80132a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132b0:	693b      	ldr	r3, [r7, #16]
 80132b2:	e853 3f00 	ldrex	r3, [r3]
 80132b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	f023 0310 	bic.w	r3, r3, #16
 80132be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	461a      	mov	r2, r3
 80132c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80132cc:	61fb      	str	r3, [r7, #28]
 80132ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132d0:	69b9      	ldr	r1, [r7, #24]
 80132d2:	69fa      	ldr	r2, [r7, #28]
 80132d4:	e841 2300 	strex	r3, r2, [r1]
 80132d8:	617b      	str	r3, [r7, #20]
   return(result);
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d1e4      	bne.n	80132aa <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80132e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80132e4:	4619      	mov	r1, r3
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f000 f882 	bl	80133f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80132ec:	e063      	b.n	80133b6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80132ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80132f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d00e      	beq.n	8013318 <HAL_UART_IRQHandler+0x68c>
 80132fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80132fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013302:	2b00      	cmp	r3, #0
 8013304:	d008      	beq.n	8013318 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801330e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f002 f86b 	bl	80153ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013316:	e051      	b.n	80133bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013320:	2b00      	cmp	r3, #0
 8013322:	d014      	beq.n	801334e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801332c:	2b00      	cmp	r3, #0
 801332e:	d105      	bne.n	801333c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013338:	2b00      	cmp	r3, #0
 801333a:	d008      	beq.n	801334e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013340:	2b00      	cmp	r3, #0
 8013342:	d03a      	beq.n	80133ba <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	4798      	blx	r3
    }
    return;
 801334c:	e035      	b.n	80133ba <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801334e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013356:	2b00      	cmp	r3, #0
 8013358:	d009      	beq.n	801336e <HAL_UART_IRQHandler+0x6e2>
 801335a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013362:	2b00      	cmp	r3, #0
 8013364:	d003      	beq.n	801336e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f001 fbb8 	bl	8014adc <UART_EndTransmit_IT>
    return;
 801336c:	e026      	b.n	80133bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013372:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013376:	2b00      	cmp	r3, #0
 8013378:	d009      	beq.n	801338e <HAL_UART_IRQHandler+0x702>
 801337a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801337e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013382:	2b00      	cmp	r3, #0
 8013384:	d003      	beq.n	801338e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f002 f844 	bl	8015414 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801338c:	e016      	b.n	80133bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801338e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013396:	2b00      	cmp	r3, #0
 8013398:	d010      	beq.n	80133bc <HAL_UART_IRQHandler+0x730>
 801339a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801339e:	2b00      	cmp	r3, #0
 80133a0:	da0c      	bge.n	80133bc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f002 f82c 	bl	8015400 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80133a8:	e008      	b.n	80133bc <HAL_UART_IRQHandler+0x730>
      return;
 80133aa:	bf00      	nop
 80133ac:	e006      	b.n	80133bc <HAL_UART_IRQHandler+0x730>
    return;
 80133ae:	bf00      	nop
 80133b0:	e004      	b.n	80133bc <HAL_UART_IRQHandler+0x730>
      return;
 80133b2:	bf00      	nop
 80133b4:	e002      	b.n	80133bc <HAL_UART_IRQHandler+0x730>
      return;
 80133b6:	bf00      	nop
 80133b8:	e000      	b.n	80133bc <HAL_UART_IRQHandler+0x730>
    return;
 80133ba:	bf00      	nop
  }
}
 80133bc:	37e8      	adds	r7, #232	; 0xe8
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}
 80133c2:	bf00      	nop
 80133c4:	effffffe 	.word	0xeffffffe

080133c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b083      	sub	sp, #12
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80133d0:	bf00      	nop
 80133d2:	370c      	adds	r7, #12
 80133d4:	46bd      	mov	sp, r7
 80133d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133da:	4770      	bx	lr

080133dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80133e4:	bf00      	nop
 80133e6:	370c      	adds	r7, #12
 80133e8:	46bd      	mov	sp, r7
 80133ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ee:	4770      	bx	lr

080133f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	460b      	mov	r3, r1
 80133fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80133fc:	bf00      	nop
 80133fe:	370c      	adds	r7, #12
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr

08013408 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801340c:	b092      	sub	sp, #72	; 0x48
 801340e:	af00      	add	r7, sp, #0
 8013410:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013412:	2300      	movs	r3, #0
 8013414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	689a      	ldr	r2, [r3, #8]
 801341c:	697b      	ldr	r3, [r7, #20]
 801341e:	691b      	ldr	r3, [r3, #16]
 8013420:	431a      	orrs	r2, r3
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	695b      	ldr	r3, [r3, #20]
 8013426:	431a      	orrs	r2, r3
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	69db      	ldr	r3, [r3, #28]
 801342c:	4313      	orrs	r3, r2
 801342e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013430:	697b      	ldr	r3, [r7, #20]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	4bbe      	ldr	r3, [pc, #760]	; (8013730 <UART_SetConfig+0x328>)
 8013438:	4013      	ands	r3, r2
 801343a:	697a      	ldr	r2, [r7, #20]
 801343c:	6812      	ldr	r2, [r2, #0]
 801343e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013440:	430b      	orrs	r3, r1
 8013442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	685b      	ldr	r3, [r3, #4]
 801344a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801344e:	697b      	ldr	r3, [r7, #20]
 8013450:	68da      	ldr	r2, [r3, #12]
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	430a      	orrs	r2, r1
 8013458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	699b      	ldr	r3, [r3, #24]
 801345e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	4ab3      	ldr	r2, [pc, #716]	; (8013734 <UART_SetConfig+0x32c>)
 8013466:	4293      	cmp	r3, r2
 8013468:	d004      	beq.n	8013474 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801346a:	697b      	ldr	r3, [r7, #20]
 801346c:	6a1b      	ldr	r3, [r3, #32]
 801346e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013470:	4313      	orrs	r3, r2
 8013472:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013474:	697b      	ldr	r3, [r7, #20]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	689a      	ldr	r2, [r3, #8]
 801347a:	4baf      	ldr	r3, [pc, #700]	; (8013738 <UART_SetConfig+0x330>)
 801347c:	4013      	ands	r3, r2
 801347e:	697a      	ldr	r2, [r7, #20]
 8013480:	6812      	ldr	r2, [r2, #0]
 8013482:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013484:	430b      	orrs	r3, r1
 8013486:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801348e:	f023 010f 	bic.w	r1, r3, #15
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	430a      	orrs	r2, r1
 801349c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801349e:	697b      	ldr	r3, [r7, #20]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	4aa6      	ldr	r2, [pc, #664]	; (801373c <UART_SetConfig+0x334>)
 80134a4:	4293      	cmp	r3, r2
 80134a6:	d177      	bne.n	8013598 <UART_SetConfig+0x190>
 80134a8:	4ba5      	ldr	r3, [pc, #660]	; (8013740 <UART_SetConfig+0x338>)
 80134aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80134ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80134b0:	2b28      	cmp	r3, #40	; 0x28
 80134b2:	d86d      	bhi.n	8013590 <UART_SetConfig+0x188>
 80134b4:	a201      	add	r2, pc, #4	; (adr r2, 80134bc <UART_SetConfig+0xb4>)
 80134b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134ba:	bf00      	nop
 80134bc:	08013561 	.word	0x08013561
 80134c0:	08013591 	.word	0x08013591
 80134c4:	08013591 	.word	0x08013591
 80134c8:	08013591 	.word	0x08013591
 80134cc:	08013591 	.word	0x08013591
 80134d0:	08013591 	.word	0x08013591
 80134d4:	08013591 	.word	0x08013591
 80134d8:	08013591 	.word	0x08013591
 80134dc:	08013569 	.word	0x08013569
 80134e0:	08013591 	.word	0x08013591
 80134e4:	08013591 	.word	0x08013591
 80134e8:	08013591 	.word	0x08013591
 80134ec:	08013591 	.word	0x08013591
 80134f0:	08013591 	.word	0x08013591
 80134f4:	08013591 	.word	0x08013591
 80134f8:	08013591 	.word	0x08013591
 80134fc:	08013571 	.word	0x08013571
 8013500:	08013591 	.word	0x08013591
 8013504:	08013591 	.word	0x08013591
 8013508:	08013591 	.word	0x08013591
 801350c:	08013591 	.word	0x08013591
 8013510:	08013591 	.word	0x08013591
 8013514:	08013591 	.word	0x08013591
 8013518:	08013591 	.word	0x08013591
 801351c:	08013579 	.word	0x08013579
 8013520:	08013591 	.word	0x08013591
 8013524:	08013591 	.word	0x08013591
 8013528:	08013591 	.word	0x08013591
 801352c:	08013591 	.word	0x08013591
 8013530:	08013591 	.word	0x08013591
 8013534:	08013591 	.word	0x08013591
 8013538:	08013591 	.word	0x08013591
 801353c:	08013581 	.word	0x08013581
 8013540:	08013591 	.word	0x08013591
 8013544:	08013591 	.word	0x08013591
 8013548:	08013591 	.word	0x08013591
 801354c:	08013591 	.word	0x08013591
 8013550:	08013591 	.word	0x08013591
 8013554:	08013591 	.word	0x08013591
 8013558:	08013591 	.word	0x08013591
 801355c:	08013589 	.word	0x08013589
 8013560:	2301      	movs	r3, #1
 8013562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013566:	e326      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013568:	2304      	movs	r3, #4
 801356a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801356e:	e322      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013570:	2308      	movs	r3, #8
 8013572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013576:	e31e      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013578:	2310      	movs	r3, #16
 801357a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801357e:	e31a      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013580:	2320      	movs	r3, #32
 8013582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013586:	e316      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013588:	2340      	movs	r3, #64	; 0x40
 801358a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801358e:	e312      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013590:	2380      	movs	r3, #128	; 0x80
 8013592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013596:	e30e      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013598:	697b      	ldr	r3, [r7, #20]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	4a69      	ldr	r2, [pc, #420]	; (8013744 <UART_SetConfig+0x33c>)
 801359e:	4293      	cmp	r3, r2
 80135a0:	d130      	bne.n	8013604 <UART_SetConfig+0x1fc>
 80135a2:	4b67      	ldr	r3, [pc, #412]	; (8013740 <UART_SetConfig+0x338>)
 80135a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135a6:	f003 0307 	and.w	r3, r3, #7
 80135aa:	2b05      	cmp	r3, #5
 80135ac:	d826      	bhi.n	80135fc <UART_SetConfig+0x1f4>
 80135ae:	a201      	add	r2, pc, #4	; (adr r2, 80135b4 <UART_SetConfig+0x1ac>)
 80135b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135b4:	080135cd 	.word	0x080135cd
 80135b8:	080135d5 	.word	0x080135d5
 80135bc:	080135dd 	.word	0x080135dd
 80135c0:	080135e5 	.word	0x080135e5
 80135c4:	080135ed 	.word	0x080135ed
 80135c8:	080135f5 	.word	0x080135f5
 80135cc:	2300      	movs	r3, #0
 80135ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135d2:	e2f0      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80135d4:	2304      	movs	r3, #4
 80135d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135da:	e2ec      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80135dc:	2308      	movs	r3, #8
 80135de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135e2:	e2e8      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80135e4:	2310      	movs	r3, #16
 80135e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135ea:	e2e4      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80135ec:	2320      	movs	r3, #32
 80135ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135f2:	e2e0      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80135f4:	2340      	movs	r3, #64	; 0x40
 80135f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135fa:	e2dc      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80135fc:	2380      	movs	r3, #128	; 0x80
 80135fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013602:	e2d8      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013604:	697b      	ldr	r3, [r7, #20]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	4a4f      	ldr	r2, [pc, #316]	; (8013748 <UART_SetConfig+0x340>)
 801360a:	4293      	cmp	r3, r2
 801360c:	d130      	bne.n	8013670 <UART_SetConfig+0x268>
 801360e:	4b4c      	ldr	r3, [pc, #304]	; (8013740 <UART_SetConfig+0x338>)
 8013610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013612:	f003 0307 	and.w	r3, r3, #7
 8013616:	2b05      	cmp	r3, #5
 8013618:	d826      	bhi.n	8013668 <UART_SetConfig+0x260>
 801361a:	a201      	add	r2, pc, #4	; (adr r2, 8013620 <UART_SetConfig+0x218>)
 801361c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013620:	08013639 	.word	0x08013639
 8013624:	08013641 	.word	0x08013641
 8013628:	08013649 	.word	0x08013649
 801362c:	08013651 	.word	0x08013651
 8013630:	08013659 	.word	0x08013659
 8013634:	08013661 	.word	0x08013661
 8013638:	2300      	movs	r3, #0
 801363a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801363e:	e2ba      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013640:	2304      	movs	r3, #4
 8013642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013646:	e2b6      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013648:	2308      	movs	r3, #8
 801364a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801364e:	e2b2      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013650:	2310      	movs	r3, #16
 8013652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013656:	e2ae      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013658:	2320      	movs	r3, #32
 801365a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801365e:	e2aa      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013660:	2340      	movs	r3, #64	; 0x40
 8013662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013666:	e2a6      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013668:	2380      	movs	r3, #128	; 0x80
 801366a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801366e:	e2a2      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	4a35      	ldr	r2, [pc, #212]	; (801374c <UART_SetConfig+0x344>)
 8013676:	4293      	cmp	r3, r2
 8013678:	d130      	bne.n	80136dc <UART_SetConfig+0x2d4>
 801367a:	4b31      	ldr	r3, [pc, #196]	; (8013740 <UART_SetConfig+0x338>)
 801367c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801367e:	f003 0307 	and.w	r3, r3, #7
 8013682:	2b05      	cmp	r3, #5
 8013684:	d826      	bhi.n	80136d4 <UART_SetConfig+0x2cc>
 8013686:	a201      	add	r2, pc, #4	; (adr r2, 801368c <UART_SetConfig+0x284>)
 8013688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801368c:	080136a5 	.word	0x080136a5
 8013690:	080136ad 	.word	0x080136ad
 8013694:	080136b5 	.word	0x080136b5
 8013698:	080136bd 	.word	0x080136bd
 801369c:	080136c5 	.word	0x080136c5
 80136a0:	080136cd 	.word	0x080136cd
 80136a4:	2300      	movs	r3, #0
 80136a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80136aa:	e284      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80136ac:	2304      	movs	r3, #4
 80136ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80136b2:	e280      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80136b4:	2308      	movs	r3, #8
 80136b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80136ba:	e27c      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80136bc:	2310      	movs	r3, #16
 80136be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80136c2:	e278      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80136c4:	2320      	movs	r3, #32
 80136c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80136ca:	e274      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80136cc:	2340      	movs	r3, #64	; 0x40
 80136ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80136d2:	e270      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80136d4:	2380      	movs	r3, #128	; 0x80
 80136d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80136da:	e26c      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	4a1b      	ldr	r2, [pc, #108]	; (8013750 <UART_SetConfig+0x348>)
 80136e2:	4293      	cmp	r3, r2
 80136e4:	d142      	bne.n	801376c <UART_SetConfig+0x364>
 80136e6:	4b16      	ldr	r3, [pc, #88]	; (8013740 <UART_SetConfig+0x338>)
 80136e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136ea:	f003 0307 	and.w	r3, r3, #7
 80136ee:	2b05      	cmp	r3, #5
 80136f0:	d838      	bhi.n	8013764 <UART_SetConfig+0x35c>
 80136f2:	a201      	add	r2, pc, #4	; (adr r2, 80136f8 <UART_SetConfig+0x2f0>)
 80136f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136f8:	08013711 	.word	0x08013711
 80136fc:	08013719 	.word	0x08013719
 8013700:	08013721 	.word	0x08013721
 8013704:	08013729 	.word	0x08013729
 8013708:	08013755 	.word	0x08013755
 801370c:	0801375d 	.word	0x0801375d
 8013710:	2300      	movs	r3, #0
 8013712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013716:	e24e      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013718:	2304      	movs	r3, #4
 801371a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801371e:	e24a      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013720:	2308      	movs	r3, #8
 8013722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013726:	e246      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013728:	2310      	movs	r3, #16
 801372a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801372e:	e242      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013730:	cfff69f3 	.word	0xcfff69f3
 8013734:	58000c00 	.word	0x58000c00
 8013738:	11fff4ff 	.word	0x11fff4ff
 801373c:	40011000 	.word	0x40011000
 8013740:	58024400 	.word	0x58024400
 8013744:	40004400 	.word	0x40004400
 8013748:	40004800 	.word	0x40004800
 801374c:	40004c00 	.word	0x40004c00
 8013750:	40005000 	.word	0x40005000
 8013754:	2320      	movs	r3, #32
 8013756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801375a:	e22c      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 801375c:	2340      	movs	r3, #64	; 0x40
 801375e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013762:	e228      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013764:	2380      	movs	r3, #128	; 0x80
 8013766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801376a:	e224      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 801376c:	697b      	ldr	r3, [r7, #20]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	4ab1      	ldr	r2, [pc, #708]	; (8013a38 <UART_SetConfig+0x630>)
 8013772:	4293      	cmp	r3, r2
 8013774:	d176      	bne.n	8013864 <UART_SetConfig+0x45c>
 8013776:	4bb1      	ldr	r3, [pc, #708]	; (8013a3c <UART_SetConfig+0x634>)
 8013778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801377a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801377e:	2b28      	cmp	r3, #40	; 0x28
 8013780:	d86c      	bhi.n	801385c <UART_SetConfig+0x454>
 8013782:	a201      	add	r2, pc, #4	; (adr r2, 8013788 <UART_SetConfig+0x380>)
 8013784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013788:	0801382d 	.word	0x0801382d
 801378c:	0801385d 	.word	0x0801385d
 8013790:	0801385d 	.word	0x0801385d
 8013794:	0801385d 	.word	0x0801385d
 8013798:	0801385d 	.word	0x0801385d
 801379c:	0801385d 	.word	0x0801385d
 80137a0:	0801385d 	.word	0x0801385d
 80137a4:	0801385d 	.word	0x0801385d
 80137a8:	08013835 	.word	0x08013835
 80137ac:	0801385d 	.word	0x0801385d
 80137b0:	0801385d 	.word	0x0801385d
 80137b4:	0801385d 	.word	0x0801385d
 80137b8:	0801385d 	.word	0x0801385d
 80137bc:	0801385d 	.word	0x0801385d
 80137c0:	0801385d 	.word	0x0801385d
 80137c4:	0801385d 	.word	0x0801385d
 80137c8:	0801383d 	.word	0x0801383d
 80137cc:	0801385d 	.word	0x0801385d
 80137d0:	0801385d 	.word	0x0801385d
 80137d4:	0801385d 	.word	0x0801385d
 80137d8:	0801385d 	.word	0x0801385d
 80137dc:	0801385d 	.word	0x0801385d
 80137e0:	0801385d 	.word	0x0801385d
 80137e4:	0801385d 	.word	0x0801385d
 80137e8:	08013845 	.word	0x08013845
 80137ec:	0801385d 	.word	0x0801385d
 80137f0:	0801385d 	.word	0x0801385d
 80137f4:	0801385d 	.word	0x0801385d
 80137f8:	0801385d 	.word	0x0801385d
 80137fc:	0801385d 	.word	0x0801385d
 8013800:	0801385d 	.word	0x0801385d
 8013804:	0801385d 	.word	0x0801385d
 8013808:	0801384d 	.word	0x0801384d
 801380c:	0801385d 	.word	0x0801385d
 8013810:	0801385d 	.word	0x0801385d
 8013814:	0801385d 	.word	0x0801385d
 8013818:	0801385d 	.word	0x0801385d
 801381c:	0801385d 	.word	0x0801385d
 8013820:	0801385d 	.word	0x0801385d
 8013824:	0801385d 	.word	0x0801385d
 8013828:	08013855 	.word	0x08013855
 801382c:	2301      	movs	r3, #1
 801382e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013832:	e1c0      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013834:	2304      	movs	r3, #4
 8013836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801383a:	e1bc      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 801383c:	2308      	movs	r3, #8
 801383e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013842:	e1b8      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013844:	2310      	movs	r3, #16
 8013846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801384a:	e1b4      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 801384c:	2320      	movs	r3, #32
 801384e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013852:	e1b0      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013854:	2340      	movs	r3, #64	; 0x40
 8013856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801385a:	e1ac      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 801385c:	2380      	movs	r3, #128	; 0x80
 801385e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013862:	e1a8      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	4a75      	ldr	r2, [pc, #468]	; (8013a40 <UART_SetConfig+0x638>)
 801386a:	4293      	cmp	r3, r2
 801386c:	d130      	bne.n	80138d0 <UART_SetConfig+0x4c8>
 801386e:	4b73      	ldr	r3, [pc, #460]	; (8013a3c <UART_SetConfig+0x634>)
 8013870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013872:	f003 0307 	and.w	r3, r3, #7
 8013876:	2b05      	cmp	r3, #5
 8013878:	d826      	bhi.n	80138c8 <UART_SetConfig+0x4c0>
 801387a:	a201      	add	r2, pc, #4	; (adr r2, 8013880 <UART_SetConfig+0x478>)
 801387c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013880:	08013899 	.word	0x08013899
 8013884:	080138a1 	.word	0x080138a1
 8013888:	080138a9 	.word	0x080138a9
 801388c:	080138b1 	.word	0x080138b1
 8013890:	080138b9 	.word	0x080138b9
 8013894:	080138c1 	.word	0x080138c1
 8013898:	2300      	movs	r3, #0
 801389a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801389e:	e18a      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80138a0:	2304      	movs	r3, #4
 80138a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80138a6:	e186      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80138a8:	2308      	movs	r3, #8
 80138aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80138ae:	e182      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80138b0:	2310      	movs	r3, #16
 80138b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80138b6:	e17e      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80138b8:	2320      	movs	r3, #32
 80138ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80138be:	e17a      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80138c0:	2340      	movs	r3, #64	; 0x40
 80138c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80138c6:	e176      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80138c8:	2380      	movs	r3, #128	; 0x80
 80138ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80138ce:	e172      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	4a5b      	ldr	r2, [pc, #364]	; (8013a44 <UART_SetConfig+0x63c>)
 80138d6:	4293      	cmp	r3, r2
 80138d8:	d130      	bne.n	801393c <UART_SetConfig+0x534>
 80138da:	4b58      	ldr	r3, [pc, #352]	; (8013a3c <UART_SetConfig+0x634>)
 80138dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138de:	f003 0307 	and.w	r3, r3, #7
 80138e2:	2b05      	cmp	r3, #5
 80138e4:	d826      	bhi.n	8013934 <UART_SetConfig+0x52c>
 80138e6:	a201      	add	r2, pc, #4	; (adr r2, 80138ec <UART_SetConfig+0x4e4>)
 80138e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138ec:	08013905 	.word	0x08013905
 80138f0:	0801390d 	.word	0x0801390d
 80138f4:	08013915 	.word	0x08013915
 80138f8:	0801391d 	.word	0x0801391d
 80138fc:	08013925 	.word	0x08013925
 8013900:	0801392d 	.word	0x0801392d
 8013904:	2300      	movs	r3, #0
 8013906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801390a:	e154      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 801390c:	2304      	movs	r3, #4
 801390e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013912:	e150      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013914:	2308      	movs	r3, #8
 8013916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801391a:	e14c      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 801391c:	2310      	movs	r3, #16
 801391e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013922:	e148      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013924:	2320      	movs	r3, #32
 8013926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801392a:	e144      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 801392c:	2340      	movs	r3, #64	; 0x40
 801392e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013932:	e140      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013934:	2380      	movs	r3, #128	; 0x80
 8013936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801393a:	e13c      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	4a41      	ldr	r2, [pc, #260]	; (8013a48 <UART_SetConfig+0x640>)
 8013942:	4293      	cmp	r3, r2
 8013944:	f040 8082 	bne.w	8013a4c <UART_SetConfig+0x644>
 8013948:	4b3c      	ldr	r3, [pc, #240]	; (8013a3c <UART_SetConfig+0x634>)
 801394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801394c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013950:	2b28      	cmp	r3, #40	; 0x28
 8013952:	d86d      	bhi.n	8013a30 <UART_SetConfig+0x628>
 8013954:	a201      	add	r2, pc, #4	; (adr r2, 801395c <UART_SetConfig+0x554>)
 8013956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801395a:	bf00      	nop
 801395c:	08013a01 	.word	0x08013a01
 8013960:	08013a31 	.word	0x08013a31
 8013964:	08013a31 	.word	0x08013a31
 8013968:	08013a31 	.word	0x08013a31
 801396c:	08013a31 	.word	0x08013a31
 8013970:	08013a31 	.word	0x08013a31
 8013974:	08013a31 	.word	0x08013a31
 8013978:	08013a31 	.word	0x08013a31
 801397c:	08013a09 	.word	0x08013a09
 8013980:	08013a31 	.word	0x08013a31
 8013984:	08013a31 	.word	0x08013a31
 8013988:	08013a31 	.word	0x08013a31
 801398c:	08013a31 	.word	0x08013a31
 8013990:	08013a31 	.word	0x08013a31
 8013994:	08013a31 	.word	0x08013a31
 8013998:	08013a31 	.word	0x08013a31
 801399c:	08013a11 	.word	0x08013a11
 80139a0:	08013a31 	.word	0x08013a31
 80139a4:	08013a31 	.word	0x08013a31
 80139a8:	08013a31 	.word	0x08013a31
 80139ac:	08013a31 	.word	0x08013a31
 80139b0:	08013a31 	.word	0x08013a31
 80139b4:	08013a31 	.word	0x08013a31
 80139b8:	08013a31 	.word	0x08013a31
 80139bc:	08013a19 	.word	0x08013a19
 80139c0:	08013a31 	.word	0x08013a31
 80139c4:	08013a31 	.word	0x08013a31
 80139c8:	08013a31 	.word	0x08013a31
 80139cc:	08013a31 	.word	0x08013a31
 80139d0:	08013a31 	.word	0x08013a31
 80139d4:	08013a31 	.word	0x08013a31
 80139d8:	08013a31 	.word	0x08013a31
 80139dc:	08013a21 	.word	0x08013a21
 80139e0:	08013a31 	.word	0x08013a31
 80139e4:	08013a31 	.word	0x08013a31
 80139e8:	08013a31 	.word	0x08013a31
 80139ec:	08013a31 	.word	0x08013a31
 80139f0:	08013a31 	.word	0x08013a31
 80139f4:	08013a31 	.word	0x08013a31
 80139f8:	08013a31 	.word	0x08013a31
 80139fc:	08013a29 	.word	0x08013a29
 8013a00:	2301      	movs	r3, #1
 8013a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a06:	e0d6      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013a08:	2304      	movs	r3, #4
 8013a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a0e:	e0d2      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013a10:	2308      	movs	r3, #8
 8013a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a16:	e0ce      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013a18:	2310      	movs	r3, #16
 8013a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a1e:	e0ca      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013a20:	2320      	movs	r3, #32
 8013a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a26:	e0c6      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013a28:	2340      	movs	r3, #64	; 0x40
 8013a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a2e:	e0c2      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013a30:	2380      	movs	r3, #128	; 0x80
 8013a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a36:	e0be      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013a38:	40011400 	.word	0x40011400
 8013a3c:	58024400 	.word	0x58024400
 8013a40:	40007800 	.word	0x40007800
 8013a44:	40007c00 	.word	0x40007c00
 8013a48:	40011800 	.word	0x40011800
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	4aad      	ldr	r2, [pc, #692]	; (8013d08 <UART_SetConfig+0x900>)
 8013a52:	4293      	cmp	r3, r2
 8013a54:	d176      	bne.n	8013b44 <UART_SetConfig+0x73c>
 8013a56:	4bad      	ldr	r3, [pc, #692]	; (8013d0c <UART_SetConfig+0x904>)
 8013a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013a5e:	2b28      	cmp	r3, #40	; 0x28
 8013a60:	d86c      	bhi.n	8013b3c <UART_SetConfig+0x734>
 8013a62:	a201      	add	r2, pc, #4	; (adr r2, 8013a68 <UART_SetConfig+0x660>)
 8013a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a68:	08013b0d 	.word	0x08013b0d
 8013a6c:	08013b3d 	.word	0x08013b3d
 8013a70:	08013b3d 	.word	0x08013b3d
 8013a74:	08013b3d 	.word	0x08013b3d
 8013a78:	08013b3d 	.word	0x08013b3d
 8013a7c:	08013b3d 	.word	0x08013b3d
 8013a80:	08013b3d 	.word	0x08013b3d
 8013a84:	08013b3d 	.word	0x08013b3d
 8013a88:	08013b15 	.word	0x08013b15
 8013a8c:	08013b3d 	.word	0x08013b3d
 8013a90:	08013b3d 	.word	0x08013b3d
 8013a94:	08013b3d 	.word	0x08013b3d
 8013a98:	08013b3d 	.word	0x08013b3d
 8013a9c:	08013b3d 	.word	0x08013b3d
 8013aa0:	08013b3d 	.word	0x08013b3d
 8013aa4:	08013b3d 	.word	0x08013b3d
 8013aa8:	08013b1d 	.word	0x08013b1d
 8013aac:	08013b3d 	.word	0x08013b3d
 8013ab0:	08013b3d 	.word	0x08013b3d
 8013ab4:	08013b3d 	.word	0x08013b3d
 8013ab8:	08013b3d 	.word	0x08013b3d
 8013abc:	08013b3d 	.word	0x08013b3d
 8013ac0:	08013b3d 	.word	0x08013b3d
 8013ac4:	08013b3d 	.word	0x08013b3d
 8013ac8:	08013b25 	.word	0x08013b25
 8013acc:	08013b3d 	.word	0x08013b3d
 8013ad0:	08013b3d 	.word	0x08013b3d
 8013ad4:	08013b3d 	.word	0x08013b3d
 8013ad8:	08013b3d 	.word	0x08013b3d
 8013adc:	08013b3d 	.word	0x08013b3d
 8013ae0:	08013b3d 	.word	0x08013b3d
 8013ae4:	08013b3d 	.word	0x08013b3d
 8013ae8:	08013b2d 	.word	0x08013b2d
 8013aec:	08013b3d 	.word	0x08013b3d
 8013af0:	08013b3d 	.word	0x08013b3d
 8013af4:	08013b3d 	.word	0x08013b3d
 8013af8:	08013b3d 	.word	0x08013b3d
 8013afc:	08013b3d 	.word	0x08013b3d
 8013b00:	08013b3d 	.word	0x08013b3d
 8013b04:	08013b3d 	.word	0x08013b3d
 8013b08:	08013b35 	.word	0x08013b35
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b12:	e050      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b14:	2304      	movs	r3, #4
 8013b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b1a:	e04c      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b1c:	2308      	movs	r3, #8
 8013b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b22:	e048      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b24:	2310      	movs	r3, #16
 8013b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b2a:	e044      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b2c:	2320      	movs	r3, #32
 8013b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b32:	e040      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b34:	2340      	movs	r3, #64	; 0x40
 8013b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b3a:	e03c      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b3c:	2380      	movs	r3, #128	; 0x80
 8013b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b42:	e038      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	4a71      	ldr	r2, [pc, #452]	; (8013d10 <UART_SetConfig+0x908>)
 8013b4a:	4293      	cmp	r3, r2
 8013b4c:	d130      	bne.n	8013bb0 <UART_SetConfig+0x7a8>
 8013b4e:	4b6f      	ldr	r3, [pc, #444]	; (8013d0c <UART_SetConfig+0x904>)
 8013b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b52:	f003 0307 	and.w	r3, r3, #7
 8013b56:	2b05      	cmp	r3, #5
 8013b58:	d826      	bhi.n	8013ba8 <UART_SetConfig+0x7a0>
 8013b5a:	a201      	add	r2, pc, #4	; (adr r2, 8013b60 <UART_SetConfig+0x758>)
 8013b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b60:	08013b79 	.word	0x08013b79
 8013b64:	08013b81 	.word	0x08013b81
 8013b68:	08013b89 	.word	0x08013b89
 8013b6c:	08013b91 	.word	0x08013b91
 8013b70:	08013b99 	.word	0x08013b99
 8013b74:	08013ba1 	.word	0x08013ba1
 8013b78:	2302      	movs	r3, #2
 8013b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b7e:	e01a      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b80:	2304      	movs	r3, #4
 8013b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b86:	e016      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b88:	2308      	movs	r3, #8
 8013b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b8e:	e012      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b90:	2310      	movs	r3, #16
 8013b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b96:	e00e      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013b98:	2320      	movs	r3, #32
 8013b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b9e:	e00a      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013ba0:	2340      	movs	r3, #64	; 0x40
 8013ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ba6:	e006      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013ba8:	2380      	movs	r3, #128	; 0x80
 8013baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013bae:	e002      	b.n	8013bb6 <UART_SetConfig+0x7ae>
 8013bb0:	2380      	movs	r3, #128	; 0x80
 8013bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013bb6:	697b      	ldr	r3, [r7, #20]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	4a55      	ldr	r2, [pc, #340]	; (8013d10 <UART_SetConfig+0x908>)
 8013bbc:	4293      	cmp	r3, r2
 8013bbe:	f040 80f8 	bne.w	8013db2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013bc2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013bc6:	2b20      	cmp	r3, #32
 8013bc8:	dc46      	bgt.n	8013c58 <UART_SetConfig+0x850>
 8013bca:	2b02      	cmp	r3, #2
 8013bcc:	db75      	blt.n	8013cba <UART_SetConfig+0x8b2>
 8013bce:	3b02      	subs	r3, #2
 8013bd0:	2b1e      	cmp	r3, #30
 8013bd2:	d872      	bhi.n	8013cba <UART_SetConfig+0x8b2>
 8013bd4:	a201      	add	r2, pc, #4	; (adr r2, 8013bdc <UART_SetConfig+0x7d4>)
 8013bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bda:	bf00      	nop
 8013bdc:	08013c5f 	.word	0x08013c5f
 8013be0:	08013cbb 	.word	0x08013cbb
 8013be4:	08013c67 	.word	0x08013c67
 8013be8:	08013cbb 	.word	0x08013cbb
 8013bec:	08013cbb 	.word	0x08013cbb
 8013bf0:	08013cbb 	.word	0x08013cbb
 8013bf4:	08013c77 	.word	0x08013c77
 8013bf8:	08013cbb 	.word	0x08013cbb
 8013bfc:	08013cbb 	.word	0x08013cbb
 8013c00:	08013cbb 	.word	0x08013cbb
 8013c04:	08013cbb 	.word	0x08013cbb
 8013c08:	08013cbb 	.word	0x08013cbb
 8013c0c:	08013cbb 	.word	0x08013cbb
 8013c10:	08013cbb 	.word	0x08013cbb
 8013c14:	08013c87 	.word	0x08013c87
 8013c18:	08013cbb 	.word	0x08013cbb
 8013c1c:	08013cbb 	.word	0x08013cbb
 8013c20:	08013cbb 	.word	0x08013cbb
 8013c24:	08013cbb 	.word	0x08013cbb
 8013c28:	08013cbb 	.word	0x08013cbb
 8013c2c:	08013cbb 	.word	0x08013cbb
 8013c30:	08013cbb 	.word	0x08013cbb
 8013c34:	08013cbb 	.word	0x08013cbb
 8013c38:	08013cbb 	.word	0x08013cbb
 8013c3c:	08013cbb 	.word	0x08013cbb
 8013c40:	08013cbb 	.word	0x08013cbb
 8013c44:	08013cbb 	.word	0x08013cbb
 8013c48:	08013cbb 	.word	0x08013cbb
 8013c4c:	08013cbb 	.word	0x08013cbb
 8013c50:	08013cbb 	.word	0x08013cbb
 8013c54:	08013cad 	.word	0x08013cad
 8013c58:	2b40      	cmp	r3, #64	; 0x40
 8013c5a:	d02a      	beq.n	8013cb2 <UART_SetConfig+0x8aa>
 8013c5c:	e02d      	b.n	8013cba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013c5e:	f7fb fcdb 	bl	800f618 <HAL_RCCEx_GetD3PCLK1Freq>
 8013c62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013c64:	e02f      	b.n	8013cc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fb fcea 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013c74:	e027      	b.n	8013cc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013c76:	f107 0318 	add.w	r3, r7, #24
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f7fb fe36 	bl	800f8ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013c84:	e01f      	b.n	8013cc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013c86:	4b21      	ldr	r3, [pc, #132]	; (8013d0c <UART_SetConfig+0x904>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	f003 0320 	and.w	r3, r3, #32
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d009      	beq.n	8013ca6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013c92:	4b1e      	ldr	r3, [pc, #120]	; (8013d0c <UART_SetConfig+0x904>)
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	08db      	lsrs	r3, r3, #3
 8013c98:	f003 0303 	and.w	r3, r3, #3
 8013c9c:	4a1d      	ldr	r2, [pc, #116]	; (8013d14 <UART_SetConfig+0x90c>)
 8013c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8013ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013ca4:	e00f      	b.n	8013cc6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013ca6:	4b1b      	ldr	r3, [pc, #108]	; (8013d14 <UART_SetConfig+0x90c>)
 8013ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013caa:	e00c      	b.n	8013cc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013cac:	4b1a      	ldr	r3, [pc, #104]	; (8013d18 <UART_SetConfig+0x910>)
 8013cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013cb0:	e009      	b.n	8013cc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013cb8:	e005      	b.n	8013cc6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f000 81ee 	beq.w	80140aa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013cce:	697b      	ldr	r3, [r7, #20]
 8013cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd2:	4a12      	ldr	r2, [pc, #72]	; (8013d1c <UART_SetConfig+0x914>)
 8013cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013cd8:	461a      	mov	r2, r3
 8013cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ce0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013ce2:	697b      	ldr	r3, [r7, #20]
 8013ce4:	685a      	ldr	r2, [r3, #4]
 8013ce6:	4613      	mov	r3, r2
 8013ce8:	005b      	lsls	r3, r3, #1
 8013cea:	4413      	add	r3, r2
 8013cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cee:	429a      	cmp	r2, r3
 8013cf0:	d305      	bcc.n	8013cfe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cfa:	429a      	cmp	r2, r3
 8013cfc:	d910      	bls.n	8013d20 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8013cfe:	2301      	movs	r3, #1
 8013d00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013d04:	e1d1      	b.n	80140aa <UART_SetConfig+0xca2>
 8013d06:	bf00      	nop
 8013d08:	40011c00 	.word	0x40011c00
 8013d0c:	58024400 	.word	0x58024400
 8013d10:	58000c00 	.word	0x58000c00
 8013d14:	03d09000 	.word	0x03d09000
 8013d18:	003d0900 	.word	0x003d0900
 8013d1c:	08016750 	.word	0x08016750
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d22:	2200      	movs	r2, #0
 8013d24:	60bb      	str	r3, [r7, #8]
 8013d26:	60fa      	str	r2, [r7, #12]
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d2c:	4ac0      	ldr	r2, [pc, #768]	; (8014030 <UART_SetConfig+0xc28>)
 8013d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d32:	b29b      	uxth	r3, r3
 8013d34:	2200      	movs	r2, #0
 8013d36:	603b      	str	r3, [r7, #0]
 8013d38:	607a      	str	r2, [r7, #4]
 8013d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013d42:	f7ec fae5 	bl	8000310 <__aeabi_uldivmod>
 8013d46:	4602      	mov	r2, r0
 8013d48:	460b      	mov	r3, r1
 8013d4a:	4610      	mov	r0, r2
 8013d4c:	4619      	mov	r1, r3
 8013d4e:	f04f 0200 	mov.w	r2, #0
 8013d52:	f04f 0300 	mov.w	r3, #0
 8013d56:	020b      	lsls	r3, r1, #8
 8013d58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013d5c:	0202      	lsls	r2, r0, #8
 8013d5e:	6979      	ldr	r1, [r7, #20]
 8013d60:	6849      	ldr	r1, [r1, #4]
 8013d62:	0849      	lsrs	r1, r1, #1
 8013d64:	2000      	movs	r0, #0
 8013d66:	460c      	mov	r4, r1
 8013d68:	4605      	mov	r5, r0
 8013d6a:	eb12 0804 	adds.w	r8, r2, r4
 8013d6e:	eb43 0905 	adc.w	r9, r3, r5
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	2200      	movs	r2, #0
 8013d78:	469a      	mov	sl, r3
 8013d7a:	4693      	mov	fp, r2
 8013d7c:	4652      	mov	r2, sl
 8013d7e:	465b      	mov	r3, fp
 8013d80:	4640      	mov	r0, r8
 8013d82:	4649      	mov	r1, r9
 8013d84:	f7ec fac4 	bl	8000310 <__aeabi_uldivmod>
 8013d88:	4602      	mov	r2, r0
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013d96:	d308      	bcc.n	8013daa <UART_SetConfig+0x9a2>
 8013d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013d9e:	d204      	bcs.n	8013daa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013da0:	697b      	ldr	r3, [r7, #20]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013da6:	60da      	str	r2, [r3, #12]
 8013da8:	e17f      	b.n	80140aa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8013daa:	2301      	movs	r3, #1
 8013dac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013db0:	e17b      	b.n	80140aa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	69db      	ldr	r3, [r3, #28]
 8013db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013dba:	f040 80bd 	bne.w	8013f38 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8013dbe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013dc2:	2b20      	cmp	r3, #32
 8013dc4:	dc48      	bgt.n	8013e58 <UART_SetConfig+0xa50>
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	db7b      	blt.n	8013ec2 <UART_SetConfig+0xaba>
 8013dca:	2b20      	cmp	r3, #32
 8013dcc:	d879      	bhi.n	8013ec2 <UART_SetConfig+0xaba>
 8013dce:	a201      	add	r2, pc, #4	; (adr r2, 8013dd4 <UART_SetConfig+0x9cc>)
 8013dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dd4:	08013e5f 	.word	0x08013e5f
 8013dd8:	08013e67 	.word	0x08013e67
 8013ddc:	08013ec3 	.word	0x08013ec3
 8013de0:	08013ec3 	.word	0x08013ec3
 8013de4:	08013e6f 	.word	0x08013e6f
 8013de8:	08013ec3 	.word	0x08013ec3
 8013dec:	08013ec3 	.word	0x08013ec3
 8013df0:	08013ec3 	.word	0x08013ec3
 8013df4:	08013e7f 	.word	0x08013e7f
 8013df8:	08013ec3 	.word	0x08013ec3
 8013dfc:	08013ec3 	.word	0x08013ec3
 8013e00:	08013ec3 	.word	0x08013ec3
 8013e04:	08013ec3 	.word	0x08013ec3
 8013e08:	08013ec3 	.word	0x08013ec3
 8013e0c:	08013ec3 	.word	0x08013ec3
 8013e10:	08013ec3 	.word	0x08013ec3
 8013e14:	08013e8f 	.word	0x08013e8f
 8013e18:	08013ec3 	.word	0x08013ec3
 8013e1c:	08013ec3 	.word	0x08013ec3
 8013e20:	08013ec3 	.word	0x08013ec3
 8013e24:	08013ec3 	.word	0x08013ec3
 8013e28:	08013ec3 	.word	0x08013ec3
 8013e2c:	08013ec3 	.word	0x08013ec3
 8013e30:	08013ec3 	.word	0x08013ec3
 8013e34:	08013ec3 	.word	0x08013ec3
 8013e38:	08013ec3 	.word	0x08013ec3
 8013e3c:	08013ec3 	.word	0x08013ec3
 8013e40:	08013ec3 	.word	0x08013ec3
 8013e44:	08013ec3 	.word	0x08013ec3
 8013e48:	08013ec3 	.word	0x08013ec3
 8013e4c:	08013ec3 	.word	0x08013ec3
 8013e50:	08013ec3 	.word	0x08013ec3
 8013e54:	08013eb5 	.word	0x08013eb5
 8013e58:	2b40      	cmp	r3, #64	; 0x40
 8013e5a:	d02e      	beq.n	8013eba <UART_SetConfig+0xab2>
 8013e5c:	e031      	b.n	8013ec2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013e5e:	f7fa f88f 	bl	800df80 <HAL_RCC_GetPCLK1Freq>
 8013e62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013e64:	e033      	b.n	8013ece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013e66:	f7fa f8a1 	bl	800dfac <HAL_RCC_GetPCLK2Freq>
 8013e6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013e6c:	e02f      	b.n	8013ece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7fb fbe6 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013e7c:	e027      	b.n	8013ece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013e7e:	f107 0318 	add.w	r3, r7, #24
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7fb fd32 	bl	800f8ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013e88:	69fb      	ldr	r3, [r7, #28]
 8013e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013e8c:	e01f      	b.n	8013ece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013e8e:	4b69      	ldr	r3, [pc, #420]	; (8014034 <UART_SetConfig+0xc2c>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	f003 0320 	and.w	r3, r3, #32
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d009      	beq.n	8013eae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013e9a:	4b66      	ldr	r3, [pc, #408]	; (8014034 <UART_SetConfig+0xc2c>)
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	08db      	lsrs	r3, r3, #3
 8013ea0:	f003 0303 	and.w	r3, r3, #3
 8013ea4:	4a64      	ldr	r2, [pc, #400]	; (8014038 <UART_SetConfig+0xc30>)
 8013ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8013eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013eac:	e00f      	b.n	8013ece <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8013eae:	4b62      	ldr	r3, [pc, #392]	; (8014038 <UART_SetConfig+0xc30>)
 8013eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013eb2:	e00c      	b.n	8013ece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013eb4:	4b61      	ldr	r3, [pc, #388]	; (801403c <UART_SetConfig+0xc34>)
 8013eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013eb8:	e009      	b.n	8013ece <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013ec0:	e005      	b.n	8013ece <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013ec6:	2301      	movs	r3, #1
 8013ec8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013ecc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	f000 80ea 	beq.w	80140aa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eda:	4a55      	ldr	r2, [pc, #340]	; (8014030 <UART_SetConfig+0xc28>)
 8013edc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ee0:	461a      	mov	r2, r3
 8013ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ee4:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ee8:	005a      	lsls	r2, r3, #1
 8013eea:	697b      	ldr	r3, [r7, #20]
 8013eec:	685b      	ldr	r3, [r3, #4]
 8013eee:	085b      	lsrs	r3, r3, #1
 8013ef0:	441a      	add	r2, r3
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	685b      	ldr	r3, [r3, #4]
 8013ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8013efa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013efe:	2b0f      	cmp	r3, #15
 8013f00:	d916      	bls.n	8013f30 <UART_SetConfig+0xb28>
 8013f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f08:	d212      	bcs.n	8013f30 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	f023 030f 	bic.w	r3, r3, #15
 8013f12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f16:	085b      	lsrs	r3, r3, #1
 8013f18:	b29b      	uxth	r3, r3
 8013f1a:	f003 0307 	and.w	r3, r3, #7
 8013f1e:	b29a      	uxth	r2, r3
 8013f20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013f22:	4313      	orrs	r3, r2
 8013f24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013f2c:	60da      	str	r2, [r3, #12]
 8013f2e:	e0bc      	b.n	80140aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013f30:	2301      	movs	r3, #1
 8013f32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013f36:	e0b8      	b.n	80140aa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013f38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013f3c:	2b20      	cmp	r3, #32
 8013f3e:	dc4b      	bgt.n	8013fd8 <UART_SetConfig+0xbd0>
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	f2c0 8087 	blt.w	8014054 <UART_SetConfig+0xc4c>
 8013f46:	2b20      	cmp	r3, #32
 8013f48:	f200 8084 	bhi.w	8014054 <UART_SetConfig+0xc4c>
 8013f4c:	a201      	add	r2, pc, #4	; (adr r2, 8013f54 <UART_SetConfig+0xb4c>)
 8013f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f52:	bf00      	nop
 8013f54:	08013fdf 	.word	0x08013fdf
 8013f58:	08013fe7 	.word	0x08013fe7
 8013f5c:	08014055 	.word	0x08014055
 8013f60:	08014055 	.word	0x08014055
 8013f64:	08013fef 	.word	0x08013fef
 8013f68:	08014055 	.word	0x08014055
 8013f6c:	08014055 	.word	0x08014055
 8013f70:	08014055 	.word	0x08014055
 8013f74:	08013fff 	.word	0x08013fff
 8013f78:	08014055 	.word	0x08014055
 8013f7c:	08014055 	.word	0x08014055
 8013f80:	08014055 	.word	0x08014055
 8013f84:	08014055 	.word	0x08014055
 8013f88:	08014055 	.word	0x08014055
 8013f8c:	08014055 	.word	0x08014055
 8013f90:	08014055 	.word	0x08014055
 8013f94:	0801400f 	.word	0x0801400f
 8013f98:	08014055 	.word	0x08014055
 8013f9c:	08014055 	.word	0x08014055
 8013fa0:	08014055 	.word	0x08014055
 8013fa4:	08014055 	.word	0x08014055
 8013fa8:	08014055 	.word	0x08014055
 8013fac:	08014055 	.word	0x08014055
 8013fb0:	08014055 	.word	0x08014055
 8013fb4:	08014055 	.word	0x08014055
 8013fb8:	08014055 	.word	0x08014055
 8013fbc:	08014055 	.word	0x08014055
 8013fc0:	08014055 	.word	0x08014055
 8013fc4:	08014055 	.word	0x08014055
 8013fc8:	08014055 	.word	0x08014055
 8013fcc:	08014055 	.word	0x08014055
 8013fd0:	08014055 	.word	0x08014055
 8013fd4:	08014047 	.word	0x08014047
 8013fd8:	2b40      	cmp	r3, #64	; 0x40
 8013fda:	d037      	beq.n	801404c <UART_SetConfig+0xc44>
 8013fdc:	e03a      	b.n	8014054 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013fde:	f7f9 ffcf 	bl	800df80 <HAL_RCC_GetPCLK1Freq>
 8013fe2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013fe4:	e03c      	b.n	8014060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013fe6:	f7f9 ffe1 	bl	800dfac <HAL_RCC_GetPCLK2Freq>
 8013fea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013fec:	e038      	b.n	8014060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fb fb26 	bl	800f644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013ffc:	e030      	b.n	8014060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013ffe:	f107 0318 	add.w	r3, r7, #24
 8014002:	4618      	mov	r0, r3
 8014004:	f7fb fc72 	bl	800f8ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014008:	69fb      	ldr	r3, [r7, #28]
 801400a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801400c:	e028      	b.n	8014060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801400e:	4b09      	ldr	r3, [pc, #36]	; (8014034 <UART_SetConfig+0xc2c>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	f003 0320 	and.w	r3, r3, #32
 8014016:	2b00      	cmp	r3, #0
 8014018:	d012      	beq.n	8014040 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801401a:	4b06      	ldr	r3, [pc, #24]	; (8014034 <UART_SetConfig+0xc2c>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	08db      	lsrs	r3, r3, #3
 8014020:	f003 0303 	and.w	r3, r3, #3
 8014024:	4a04      	ldr	r2, [pc, #16]	; (8014038 <UART_SetConfig+0xc30>)
 8014026:	fa22 f303 	lsr.w	r3, r2, r3
 801402a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801402c:	e018      	b.n	8014060 <UART_SetConfig+0xc58>
 801402e:	bf00      	nop
 8014030:	08016750 	.word	0x08016750
 8014034:	58024400 	.word	0x58024400
 8014038:	03d09000 	.word	0x03d09000
 801403c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8014040:	4b24      	ldr	r3, [pc, #144]	; (80140d4 <UART_SetConfig+0xccc>)
 8014042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014044:	e00c      	b.n	8014060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014046:	4b24      	ldr	r3, [pc, #144]	; (80140d8 <UART_SetConfig+0xcd0>)
 8014048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801404a:	e009      	b.n	8014060 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801404c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014050:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014052:	e005      	b.n	8014060 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8014054:	2300      	movs	r3, #0
 8014056:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014058:	2301      	movs	r3, #1
 801405a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801405e:	bf00      	nop
    }

    if (pclk != 0U)
 8014060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014062:	2b00      	cmp	r3, #0
 8014064:	d021      	beq.n	80140aa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801406a:	4a1c      	ldr	r2, [pc, #112]	; (80140dc <UART_SetConfig+0xcd4>)
 801406c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014070:	461a      	mov	r2, r3
 8014072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014074:	fbb3 f2f2 	udiv	r2, r3, r2
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	685b      	ldr	r3, [r3, #4]
 801407c:	085b      	lsrs	r3, r3, #1
 801407e:	441a      	add	r2, r3
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	685b      	ldr	r3, [r3, #4]
 8014084:	fbb2 f3f3 	udiv	r3, r2, r3
 8014088:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408c:	2b0f      	cmp	r3, #15
 801408e:	d909      	bls.n	80140a4 <UART_SetConfig+0xc9c>
 8014090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014096:	d205      	bcs.n	80140a4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409a:	b29a      	uxth	r2, r3
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	60da      	str	r2, [r3, #12]
 80140a2:	e002      	b.n	80140aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80140a4:	2301      	movs	r3, #1
 80140a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	2201      	movs	r2, #1
 80140ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	2201      	movs	r2, #1
 80140b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	2200      	movs	r2, #0
 80140be:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	2200      	movs	r2, #0
 80140c4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80140c6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80140ca:	4618      	mov	r0, r3
 80140cc:	3748      	adds	r7, #72	; 0x48
 80140ce:	46bd      	mov	sp, r7
 80140d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80140d4:	03d09000 	.word	0x03d09000
 80140d8:	003d0900 	.word	0x003d0900
 80140dc:	08016750 	.word	0x08016750

080140e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80140e0:	b480      	push	{r7}
 80140e2:	b083      	sub	sp, #12
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140ec:	f003 0301 	and.w	r3, r3, #1
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d00a      	beq.n	801410a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	685b      	ldr	r3, [r3, #4]
 80140fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	430a      	orrs	r2, r1
 8014108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801410e:	f003 0302 	and.w	r3, r3, #2
 8014112:	2b00      	cmp	r3, #0
 8014114:	d00a      	beq.n	801412c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	685b      	ldr	r3, [r3, #4]
 801411c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	430a      	orrs	r2, r1
 801412a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014130:	f003 0304 	and.w	r3, r3, #4
 8014134:	2b00      	cmp	r3, #0
 8014136:	d00a      	beq.n	801414e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	685b      	ldr	r3, [r3, #4]
 801413e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	430a      	orrs	r2, r1
 801414c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014152:	f003 0308 	and.w	r3, r3, #8
 8014156:	2b00      	cmp	r3, #0
 8014158:	d00a      	beq.n	8014170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	685b      	ldr	r3, [r3, #4]
 8014160:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	430a      	orrs	r2, r1
 801416e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014174:	f003 0310 	and.w	r3, r3, #16
 8014178:	2b00      	cmp	r3, #0
 801417a:	d00a      	beq.n	8014192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	689b      	ldr	r3, [r3, #8]
 8014182:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	430a      	orrs	r2, r1
 8014190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014196:	f003 0320 	and.w	r3, r3, #32
 801419a:	2b00      	cmp	r3, #0
 801419c:	d00a      	beq.n	80141b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	689b      	ldr	r3, [r3, #8]
 80141a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	430a      	orrs	r2, r1
 80141b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d01a      	beq.n	80141f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	685b      	ldr	r3, [r3, #4]
 80141c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	430a      	orrs	r2, r1
 80141d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80141de:	d10a      	bne.n	80141f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	685b      	ldr	r3, [r3, #4]
 80141e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	430a      	orrs	r2, r1
 80141f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d00a      	beq.n	8014218 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	685b      	ldr	r3, [r3, #4]
 8014208:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	430a      	orrs	r2, r1
 8014216:	605a      	str	r2, [r3, #4]
  }
}
 8014218:	bf00      	nop
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b086      	sub	sp, #24
 8014228:	af02      	add	r7, sp, #8
 801422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	2200      	movs	r2, #0
 8014230:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014234:	f7f2 faf0 	bl	8006818 <HAL_GetTick>
 8014238:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	f003 0308 	and.w	r3, r3, #8
 8014244:	2b08      	cmp	r3, #8
 8014246:	d10e      	bne.n	8014266 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014248:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801424c:	9300      	str	r3, [sp, #0]
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	2200      	movs	r2, #0
 8014252:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f000 f82f 	bl	80142ba <UART_WaitOnFlagUntilTimeout>
 801425c:	4603      	mov	r3, r0
 801425e:	2b00      	cmp	r3, #0
 8014260:	d001      	beq.n	8014266 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014262:	2303      	movs	r3, #3
 8014264:	e025      	b.n	80142b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f003 0304 	and.w	r3, r3, #4
 8014270:	2b04      	cmp	r3, #4
 8014272:	d10e      	bne.n	8014292 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014274:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014278:	9300      	str	r3, [sp, #0]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	2200      	movs	r2, #0
 801427e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 f819 	bl	80142ba <UART_WaitOnFlagUntilTimeout>
 8014288:	4603      	mov	r3, r0
 801428a:	2b00      	cmp	r3, #0
 801428c:	d001      	beq.n	8014292 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801428e:	2303      	movs	r3, #3
 8014290:	e00f      	b.n	80142b2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	2220      	movs	r2, #32
 8014296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2220      	movs	r2, #32
 801429e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2200      	movs	r2, #0
 80142a6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2200      	movs	r2, #0
 80142ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80142b0:	2300      	movs	r3, #0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3710      	adds	r7, #16
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}

080142ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80142ba:	b580      	push	{r7, lr}
 80142bc:	b09c      	sub	sp, #112	; 0x70
 80142be:	af00      	add	r7, sp, #0
 80142c0:	60f8      	str	r0, [r7, #12]
 80142c2:	60b9      	str	r1, [r7, #8]
 80142c4:	603b      	str	r3, [r7, #0]
 80142c6:	4613      	mov	r3, r2
 80142c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80142ca:	e0a9      	b.n	8014420 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80142cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142d2:	f000 80a5 	beq.w	8014420 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80142d6:	f7f2 fa9f 	bl	8006818 <HAL_GetTick>
 80142da:	4602      	mov	r2, r0
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	1ad3      	subs	r3, r2, r3
 80142e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80142e2:	429a      	cmp	r2, r3
 80142e4:	d302      	bcc.n	80142ec <UART_WaitOnFlagUntilTimeout+0x32>
 80142e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d140      	bne.n	801436e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142f4:	e853 3f00 	ldrex	r3, [r3]
 80142f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80142fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014300:	667b      	str	r3, [r7, #100]	; 0x64
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	461a      	mov	r2, r3
 8014308:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801430a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801430c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801430e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014310:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014312:	e841 2300 	strex	r3, r2, [r1]
 8014316:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801431a:	2b00      	cmp	r3, #0
 801431c:	d1e6      	bne.n	80142ec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	3308      	adds	r3, #8
 8014324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014328:	e853 3f00 	ldrex	r3, [r3]
 801432c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014330:	f023 0301 	bic.w	r3, r3, #1
 8014334:	663b      	str	r3, [r7, #96]	; 0x60
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	3308      	adds	r3, #8
 801433c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801433e:	64ba      	str	r2, [r7, #72]	; 0x48
 8014340:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014342:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014346:	e841 2300 	strex	r3, r2, [r1]
 801434a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801434c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801434e:	2b00      	cmp	r3, #0
 8014350:	d1e5      	bne.n	801431e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	2220      	movs	r2, #32
 8014356:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	2220      	movs	r2, #32
 801435e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	2200      	movs	r2, #0
 8014366:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801436a:	2303      	movs	r3, #3
 801436c:	e069      	b.n	8014442 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	f003 0304 	and.w	r3, r3, #4
 8014378:	2b00      	cmp	r3, #0
 801437a:	d051      	beq.n	8014420 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	69db      	ldr	r3, [r3, #28]
 8014382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801438a:	d149      	bne.n	8014420 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014394:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801439e:	e853 3f00 	ldrex	r3, [r3]
 80143a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80143a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80143aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	461a      	mov	r2, r3
 80143b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80143b4:	637b      	str	r3, [r7, #52]	; 0x34
 80143b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80143ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143bc:	e841 2300 	strex	r3, r2, [r1]
 80143c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80143c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d1e6      	bne.n	8014396 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	3308      	adds	r3, #8
 80143ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80143d0:	697b      	ldr	r3, [r7, #20]
 80143d2:	e853 3f00 	ldrex	r3, [r3]
 80143d6:	613b      	str	r3, [r7, #16]
   return(result);
 80143d8:	693b      	ldr	r3, [r7, #16]
 80143da:	f023 0301 	bic.w	r3, r3, #1
 80143de:	66bb      	str	r3, [r7, #104]	; 0x68
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	3308      	adds	r3, #8
 80143e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80143e8:	623a      	str	r2, [r7, #32]
 80143ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143ec:	69f9      	ldr	r1, [r7, #28]
 80143ee:	6a3a      	ldr	r2, [r7, #32]
 80143f0:	e841 2300 	strex	r3, r2, [r1]
 80143f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d1e5      	bne.n	80143c8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	2220      	movs	r2, #32
 8014400:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2220      	movs	r2, #32
 8014408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	2220      	movs	r2, #32
 8014410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	2200      	movs	r2, #0
 8014418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801441c:	2303      	movs	r3, #3
 801441e:	e010      	b.n	8014442 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	69da      	ldr	r2, [r3, #28]
 8014426:	68bb      	ldr	r3, [r7, #8]
 8014428:	4013      	ands	r3, r2
 801442a:	68ba      	ldr	r2, [r7, #8]
 801442c:	429a      	cmp	r2, r3
 801442e:	bf0c      	ite	eq
 8014430:	2301      	moveq	r3, #1
 8014432:	2300      	movne	r3, #0
 8014434:	b2db      	uxtb	r3, r3
 8014436:	461a      	mov	r2, r3
 8014438:	79fb      	ldrb	r3, [r7, #7]
 801443a:	429a      	cmp	r2, r3
 801443c:	f43f af46 	beq.w	80142cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014440:	2300      	movs	r3, #0
}
 8014442:	4618      	mov	r0, r3
 8014444:	3770      	adds	r7, #112	; 0x70
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}
	...

0801444c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801444c:	b480      	push	{r7}
 801444e:	b0a3      	sub	sp, #140	; 0x8c
 8014450:	af00      	add	r7, sp, #0
 8014452:	60f8      	str	r0, [r7, #12]
 8014454:	60b9      	str	r1, [r7, #8]
 8014456:	4613      	mov	r3, r2
 8014458:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	68ba      	ldr	r2, [r7, #8]
 801445e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	88fa      	ldrh	r2, [r7, #6]
 8014464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	88fa      	ldrh	r2, [r7, #6]
 801446c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	2200      	movs	r2, #0
 8014474:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	689b      	ldr	r3, [r3, #8]
 801447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801447e:	d10e      	bne.n	801449e <UART_Start_Receive_IT+0x52>
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	691b      	ldr	r3, [r3, #16]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d105      	bne.n	8014494 <UART_Start_Receive_IT+0x48>
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801448e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014492:	e02d      	b.n	80144f0 <UART_Start_Receive_IT+0xa4>
 8014494:	68fb      	ldr	r3, [r7, #12]
 8014496:	22ff      	movs	r2, #255	; 0xff
 8014498:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801449c:	e028      	b.n	80144f0 <UART_Start_Receive_IT+0xa4>
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	689b      	ldr	r3, [r3, #8]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d10d      	bne.n	80144c2 <UART_Start_Receive_IT+0x76>
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	691b      	ldr	r3, [r3, #16]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d104      	bne.n	80144b8 <UART_Start_Receive_IT+0x6c>
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	22ff      	movs	r2, #255	; 0xff
 80144b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144b6:	e01b      	b.n	80144f0 <UART_Start_Receive_IT+0xa4>
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	227f      	movs	r2, #127	; 0x7f
 80144bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144c0:	e016      	b.n	80144f0 <UART_Start_Receive_IT+0xa4>
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	689b      	ldr	r3, [r3, #8]
 80144c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80144ca:	d10d      	bne.n	80144e8 <UART_Start_Receive_IT+0x9c>
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	691b      	ldr	r3, [r3, #16]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d104      	bne.n	80144de <UART_Start_Receive_IT+0x92>
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	227f      	movs	r2, #127	; 0x7f
 80144d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144dc:	e008      	b.n	80144f0 <UART_Start_Receive_IT+0xa4>
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	223f      	movs	r2, #63	; 0x3f
 80144e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80144e6:	e003      	b.n	80144f0 <UART_Start_Receive_IT+0xa4>
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	2200      	movs	r2, #0
 80144ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2200      	movs	r2, #0
 80144f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	2222      	movs	r2, #34	; 0x22
 80144fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	3308      	adds	r3, #8
 8014506:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801450a:	e853 3f00 	ldrex	r3, [r3]
 801450e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8014510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014512:	f043 0301 	orr.w	r3, r3, #1
 8014516:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	3308      	adds	r3, #8
 8014520:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014524:	673a      	str	r2, [r7, #112]	; 0x70
 8014526:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014528:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801452a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801452c:	e841 2300 	strex	r3, r2, [r1]
 8014530:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8014532:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014534:	2b00      	cmp	r3, #0
 8014536:	d1e3      	bne.n	8014500 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801453c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014540:	d153      	bne.n	80145ea <UART_Start_Receive_IT+0x19e>
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014548:	88fa      	ldrh	r2, [r7, #6]
 801454a:	429a      	cmp	r2, r3
 801454c:	d34d      	bcc.n	80145ea <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	689b      	ldr	r3, [r3, #8]
 8014552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014556:	d107      	bne.n	8014568 <UART_Start_Receive_IT+0x11c>
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	691b      	ldr	r3, [r3, #16]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d103      	bne.n	8014568 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	4a4b      	ldr	r2, [pc, #300]	; (8014690 <UART_Start_Receive_IT+0x244>)
 8014564:	671a      	str	r2, [r3, #112]	; 0x70
 8014566:	e002      	b.n	801456e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	4a4a      	ldr	r2, [pc, #296]	; (8014694 <UART_Start_Receive_IT+0x248>)
 801456c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2200      	movs	r2, #0
 8014572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	691b      	ldr	r3, [r3, #16]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d01a      	beq.n	80145b4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014586:	e853 3f00 	ldrex	r3, [r3]
 801458a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801458c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801458e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	461a      	mov	r2, r3
 801459c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80145a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80145a2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80145a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80145a8:	e841 2300 	strex	r3, r2, [r1]
 80145ac:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80145ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d1e4      	bne.n	801457e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	3308      	adds	r3, #8
 80145ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145be:	e853 3f00 	ldrex	r3, [r3]
 80145c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80145c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	3308      	adds	r3, #8
 80145d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80145d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80145d6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80145da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145dc:	e841 2300 	strex	r3, r2, [r1]
 80145e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80145e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d1e5      	bne.n	80145b4 <UART_Start_Receive_IT+0x168>
 80145e8:	e04a      	b.n	8014680 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80145ea:	68fb      	ldr	r3, [r7, #12]
 80145ec:	689b      	ldr	r3, [r3, #8]
 80145ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80145f2:	d107      	bne.n	8014604 <UART_Start_Receive_IT+0x1b8>
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	691b      	ldr	r3, [r3, #16]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d103      	bne.n	8014604 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	4a26      	ldr	r2, [pc, #152]	; (8014698 <UART_Start_Receive_IT+0x24c>)
 8014600:	671a      	str	r2, [r3, #112]	; 0x70
 8014602:	e002      	b.n	801460a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	4a25      	ldr	r2, [pc, #148]	; (801469c <UART_Start_Receive_IT+0x250>)
 8014608:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	2200      	movs	r2, #0
 801460e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	691b      	ldr	r3, [r3, #16]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d019      	beq.n	801464e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014622:	e853 3f00 	ldrex	r3, [r3]
 8014626:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801462a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801462e:	677b      	str	r3, [r7, #116]	; 0x74
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	461a      	mov	r2, r3
 8014636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014638:	637b      	str	r3, [r7, #52]	; 0x34
 801463a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801463c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801463e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014640:	e841 2300 	strex	r3, r2, [r1]
 8014644:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014648:	2b00      	cmp	r3, #0
 801464a:	d1e6      	bne.n	801461a <UART_Start_Receive_IT+0x1ce>
 801464c:	e018      	b.n	8014680 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	e853 3f00 	ldrex	r3, [r3]
 801465a:	613b      	str	r3, [r7, #16]
   return(result);
 801465c:	693b      	ldr	r3, [r7, #16]
 801465e:	f043 0320 	orr.w	r3, r3, #32
 8014662:	67bb      	str	r3, [r7, #120]	; 0x78
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	461a      	mov	r2, r3
 801466a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801466c:	623b      	str	r3, [r7, #32]
 801466e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014670:	69f9      	ldr	r1, [r7, #28]
 8014672:	6a3a      	ldr	r2, [r7, #32]
 8014674:	e841 2300 	strex	r3, r2, [r1]
 8014678:	61bb      	str	r3, [r7, #24]
   return(result);
 801467a:	69bb      	ldr	r3, [r7, #24]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d1e6      	bne.n	801464e <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8014680:	2300      	movs	r3, #0
}
 8014682:	4618      	mov	r0, r3
 8014684:	378c      	adds	r7, #140	; 0x8c
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr
 801468e:	bf00      	nop
 8014690:	080150ed 	.word	0x080150ed
 8014694:	08014df5 	.word	0x08014df5
 8014698:	08014c93 	.word	0x08014c93
 801469c:	08014b33 	.word	0x08014b33

080146a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80146a0:	b480      	push	{r7}
 80146a2:	b095      	sub	sp, #84	; 0x54
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146b0:	e853 3f00 	ldrex	r3, [r3]
 80146b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80146b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80146bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	461a      	mov	r2, r3
 80146c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146c6:	643b      	str	r3, [r7, #64]	; 0x40
 80146c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80146ce:	e841 2300 	strex	r3, r2, [r1]
 80146d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80146d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d1e6      	bne.n	80146a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	3308      	adds	r3, #8
 80146e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146e2:	6a3b      	ldr	r3, [r7, #32]
 80146e4:	e853 3f00 	ldrex	r3, [r3]
 80146e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80146ea:	69fa      	ldr	r2, [r7, #28]
 80146ec:	4b1e      	ldr	r3, [pc, #120]	; (8014768 <UART_EndRxTransfer+0xc8>)
 80146ee:	4013      	ands	r3, r2
 80146f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	3308      	adds	r3, #8
 80146f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80146fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014702:	e841 2300 	strex	r3, r2, [r1]
 8014706:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801470a:	2b00      	cmp	r3, #0
 801470c:	d1e5      	bne.n	80146da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014712:	2b01      	cmp	r3, #1
 8014714:	d118      	bne.n	8014748 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	e853 3f00 	ldrex	r3, [r3]
 8014722:	60bb      	str	r3, [r7, #8]
   return(result);
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	f023 0310 	bic.w	r3, r3, #16
 801472a:	647b      	str	r3, [r7, #68]	; 0x44
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	461a      	mov	r2, r3
 8014732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014734:	61bb      	str	r3, [r7, #24]
 8014736:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014738:	6979      	ldr	r1, [r7, #20]
 801473a:	69ba      	ldr	r2, [r7, #24]
 801473c:	e841 2300 	strex	r3, r2, [r1]
 8014740:	613b      	str	r3, [r7, #16]
   return(result);
 8014742:	693b      	ldr	r3, [r7, #16]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d1e6      	bne.n	8014716 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2220      	movs	r2, #32
 801474c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	2200      	movs	r2, #0
 8014754:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2200      	movs	r2, #0
 801475a:	671a      	str	r2, [r3, #112]	; 0x70
}
 801475c:	bf00      	nop
 801475e:	3754      	adds	r7, #84	; 0x54
 8014760:	46bd      	mov	sp, r7
 8014762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014766:	4770      	bx	lr
 8014768:	effffffe 	.word	0xeffffffe

0801476c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b084      	sub	sp, #16
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	2200      	movs	r2, #0
 801477e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	2200      	movs	r2, #0
 8014786:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801478a:	68f8      	ldr	r0, [r7, #12]
 801478c:	f7fe fe26 	bl	80133dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014790:	bf00      	nop
 8014792:	3710      	adds	r7, #16
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}

08014798 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014798:	b480      	push	{r7}
 801479a:	b08f      	sub	sp, #60	; 0x3c
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80147a6:	2b21      	cmp	r3, #33	; 0x21
 80147a8:	d14c      	bne.n	8014844 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d132      	bne.n	801481c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	681b      	ldr	r3, [r3, #0]
 80147ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147bc:	6a3b      	ldr	r3, [r7, #32]
 80147be:	e853 3f00 	ldrex	r3, [r3]
 80147c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80147c4:	69fb      	ldr	r3, [r7, #28]
 80147c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80147ca:	637b      	str	r3, [r7, #52]	; 0x34
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	461a      	mov	r2, r3
 80147d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80147d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80147d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80147da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147dc:	e841 2300 	strex	r3, r2, [r1]
 80147e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80147e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d1e6      	bne.n	80147b6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	e853 3f00 	ldrex	r3, [r3]
 80147f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80147f6:	68bb      	ldr	r3, [r7, #8]
 80147f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80147fc:	633b      	str	r3, [r7, #48]	; 0x30
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	461a      	mov	r2, r3
 8014804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014806:	61bb      	str	r3, [r7, #24]
 8014808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801480a:	6979      	ldr	r1, [r7, #20]
 801480c:	69ba      	ldr	r2, [r7, #24]
 801480e:	e841 2300 	strex	r3, r2, [r1]
 8014812:	613b      	str	r3, [r7, #16]
   return(result);
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d1e6      	bne.n	80147e8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801481a:	e013      	b.n	8014844 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014820:	781a      	ldrb	r2, [r3, #0]
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801482c:	1c5a      	adds	r2, r3, #1
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014838:	b29b      	uxth	r3, r3
 801483a:	3b01      	subs	r3, #1
 801483c:	b29a      	uxth	r2, r3
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8014844:	bf00      	nop
 8014846:	373c      	adds	r7, #60	; 0x3c
 8014848:	46bd      	mov	sp, r7
 801484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484e:	4770      	bx	lr

08014850 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8014850:	b480      	push	{r7}
 8014852:	b091      	sub	sp, #68	; 0x44
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801485e:	2b21      	cmp	r3, #33	; 0x21
 8014860:	d151      	bne.n	8014906 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014868:	b29b      	uxth	r3, r3
 801486a:	2b00      	cmp	r3, #0
 801486c:	d132      	bne.n	80148d4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014876:	e853 3f00 	ldrex	r3, [r3]
 801487a:	623b      	str	r3, [r7, #32]
   return(result);
 801487c:	6a3b      	ldr	r3, [r7, #32]
 801487e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014882:	63bb      	str	r3, [r7, #56]	; 0x38
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	461a      	mov	r2, r3
 801488a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801488c:	633b      	str	r3, [r7, #48]	; 0x30
 801488e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014890:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014892:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014894:	e841 2300 	strex	r3, r2, [r1]
 8014898:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801489c:	2b00      	cmp	r3, #0
 801489e:	d1e6      	bne.n	801486e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148a6:	693b      	ldr	r3, [r7, #16]
 80148a8:	e853 3f00 	ldrex	r3, [r3]
 80148ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80148b4:	637b      	str	r3, [r7, #52]	; 0x34
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	461a      	mov	r2, r3
 80148bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148be:	61fb      	str	r3, [r7, #28]
 80148c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148c2:	69b9      	ldr	r1, [r7, #24]
 80148c4:	69fa      	ldr	r2, [r7, #28]
 80148c6:	e841 2300 	strex	r3, r2, [r1]
 80148ca:	617b      	str	r3, [r7, #20]
   return(result);
 80148cc:	697b      	ldr	r3, [r7, #20]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d1e6      	bne.n	80148a0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80148d2:	e018      	b.n	8014906 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148d8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80148da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80148dc:	881b      	ldrh	r3, [r3, #0]
 80148de:	461a      	mov	r2, r3
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80148e8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148ee:	1c9a      	adds	r2, r3, #2
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80148fa:	b29b      	uxth	r3, r3
 80148fc:	3b01      	subs	r3, #1
 80148fe:	b29a      	uxth	r2, r3
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8014906:	bf00      	nop
 8014908:	3744      	adds	r7, #68	; 0x44
 801490a:	46bd      	mov	sp, r7
 801490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014910:	4770      	bx	lr

08014912 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014912:	b480      	push	{r7}
 8014914:	b091      	sub	sp, #68	; 0x44
 8014916:	af00      	add	r7, sp, #0
 8014918:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014920:	2b21      	cmp	r3, #33	; 0x21
 8014922:	d160      	bne.n	80149e6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801492a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801492c:	e057      	b.n	80149de <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014934:	b29b      	uxth	r3, r3
 8014936:	2b00      	cmp	r3, #0
 8014938:	d133      	bne.n	80149a2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	3308      	adds	r3, #8
 8014940:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014944:	e853 3f00 	ldrex	r3, [r3]
 8014948:	623b      	str	r3, [r7, #32]
   return(result);
 801494a:	6a3b      	ldr	r3, [r7, #32]
 801494c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014950:	63bb      	str	r3, [r7, #56]	; 0x38
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	3308      	adds	r3, #8
 8014958:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801495a:	633a      	str	r2, [r7, #48]	; 0x30
 801495c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801495e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014962:	e841 2300 	strex	r3, r2, [r1]
 8014966:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801496a:	2b00      	cmp	r3, #0
 801496c:	d1e5      	bne.n	801493a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	e853 3f00 	ldrex	r3, [r3]
 801497a:	60fb      	str	r3, [r7, #12]
   return(result);
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014982:	637b      	str	r3, [r7, #52]	; 0x34
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	461a      	mov	r2, r3
 801498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801498c:	61fb      	str	r3, [r7, #28]
 801498e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014990:	69b9      	ldr	r1, [r7, #24]
 8014992:	69fa      	ldr	r2, [r7, #28]
 8014994:	e841 2300 	strex	r3, r2, [r1]
 8014998:	617b      	str	r3, [r7, #20]
   return(result);
 801499a:	697b      	ldr	r3, [r7, #20]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d1e6      	bne.n	801496e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80149a0:	e021      	b.n	80149e6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	69db      	ldr	r3, [r3, #28]
 80149a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d013      	beq.n	80149d8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149b4:	781a      	ldrb	r2, [r3, #0]
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80149c0:	1c5a      	adds	r2, r3, #1
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	3b01      	subs	r3, #1
 80149d0:	b29a      	uxth	r2, r3
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80149d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149da:	3b01      	subs	r3, #1
 80149dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80149de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d1a4      	bne.n	801492e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80149e4:	e7ff      	b.n	80149e6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80149e6:	bf00      	nop
 80149e8:	3744      	adds	r7, #68	; 0x44
 80149ea:	46bd      	mov	sp, r7
 80149ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f0:	4770      	bx	lr

080149f2 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80149f2:	b480      	push	{r7}
 80149f4:	b091      	sub	sp, #68	; 0x44
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014a00:	2b21      	cmp	r3, #33	; 0x21
 8014a02:	d165      	bne.n	8014ad0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014a0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014a0c:	e05c      	b.n	8014ac8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d133      	bne.n	8014a82 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	3308      	adds	r3, #8
 8014a20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a22:	6a3b      	ldr	r3, [r7, #32]
 8014a24:	e853 3f00 	ldrex	r3, [r3]
 8014a28:	61fb      	str	r3, [r7, #28]
   return(result);
 8014a2a:	69fb      	ldr	r3, [r7, #28]
 8014a2c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014a30:	637b      	str	r3, [r7, #52]	; 0x34
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	3308      	adds	r3, #8
 8014a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014a42:	e841 2300 	strex	r3, r2, [r1]
 8014a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d1e5      	bne.n	8014a1a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	e853 3f00 	ldrex	r3, [r3]
 8014a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8014a5c:	68bb      	ldr	r3, [r7, #8]
 8014a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a62:	633b      	str	r3, [r7, #48]	; 0x30
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	461a      	mov	r2, r3
 8014a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a6c:	61bb      	str	r3, [r7, #24]
 8014a6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a70:	6979      	ldr	r1, [r7, #20]
 8014a72:	69ba      	ldr	r2, [r7, #24]
 8014a74:	e841 2300 	strex	r3, r2, [r1]
 8014a78:	613b      	str	r3, [r7, #16]
   return(result);
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d1e6      	bne.n	8014a4e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8014a80:	e026      	b.n	8014ad0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	69db      	ldr	r3, [r3, #28]
 8014a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d018      	beq.n	8014ac2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a94:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8014a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a98:	881b      	ldrh	r3, [r3, #0]
 8014a9a:	461a      	mov	r2, r3
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014aa4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014aaa:	1c9a      	adds	r2, r3, #2
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	3b01      	subs	r3, #1
 8014aba:	b29a      	uxth	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014ac2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014ac4:	3b01      	subs	r3, #1
 8014ac6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d19f      	bne.n	8014a0e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8014ace:	e7ff      	b.n	8014ad0 <UART_TxISR_16BIT_FIFOEN+0xde>
 8014ad0:	bf00      	nop
 8014ad2:	3744      	adds	r7, #68	; 0x44
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ada:	4770      	bx	lr

08014adc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b088      	sub	sp, #32
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	e853 3f00 	ldrex	r3, [r3]
 8014af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014af8:	61fb      	str	r3, [r7, #28]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	461a      	mov	r2, r3
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	61bb      	str	r3, [r7, #24]
 8014b04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b06:	6979      	ldr	r1, [r7, #20]
 8014b08:	69ba      	ldr	r2, [r7, #24]
 8014b0a:	e841 2300 	strex	r3, r2, [r1]
 8014b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8014b10:	693b      	ldr	r3, [r7, #16]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	d1e6      	bne.n	8014ae4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2220      	movs	r2, #32
 8014b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	2200      	movs	r2, #0
 8014b22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f7fe fc4f 	bl	80133c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014b2a:	bf00      	nop
 8014b2c:	3720      	adds	r7, #32
 8014b2e:	46bd      	mov	sp, r7
 8014b30:	bd80      	pop	{r7, pc}

08014b32 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014b32:	b580      	push	{r7, lr}
 8014b34:	b096      	sub	sp, #88	; 0x58
 8014b36:	af00      	add	r7, sp, #0
 8014b38:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014b40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b4a:	2b22      	cmp	r3, #34	; 0x22
 8014b4c:	f040 8095 	bne.w	8014c7a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014b5a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8014b5e:	b2d9      	uxtb	r1, r3
 8014b60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014b64:	b2da      	uxtb	r2, r3
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b6a:	400a      	ands	r2, r1
 8014b6c:	b2d2      	uxtb	r2, r2
 8014b6e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014b74:	1c5a      	adds	r2, r3, #1
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	3b01      	subs	r3, #1
 8014b84:	b29a      	uxth	r2, r3
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014b92:	b29b      	uxth	r3, r3
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d178      	bne.n	8014c8a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ba0:	e853 3f00 	ldrex	r3, [r3]
 8014ba4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014bac:	653b      	str	r3, [r7, #80]	; 0x50
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	461a      	mov	r2, r3
 8014bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8014bb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014bbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014bbe:	e841 2300 	strex	r3, r2, [r1]
 8014bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d1e6      	bne.n	8014b98 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	3308      	adds	r3, #8
 8014bd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd4:	e853 3f00 	ldrex	r3, [r3]
 8014bd8:	623b      	str	r3, [r7, #32]
   return(result);
 8014bda:	6a3b      	ldr	r3, [r7, #32]
 8014bdc:	f023 0301 	bic.w	r3, r3, #1
 8014be0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	3308      	adds	r3, #8
 8014be8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014bea:	633a      	str	r2, [r7, #48]	; 0x30
 8014bec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bf2:	e841 2300 	strex	r3, r2, [r1]
 8014bf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d1e5      	bne.n	8014bca <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	2220      	movs	r2, #32
 8014c02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	2200      	movs	r2, #0
 8014c0a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c10:	2b01      	cmp	r3, #1
 8014c12:	d12e      	bne.n	8014c72 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2200      	movs	r2, #0
 8014c18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c20:	693b      	ldr	r3, [r7, #16]
 8014c22:	e853 3f00 	ldrex	r3, [r3]
 8014c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	f023 0310 	bic.w	r3, r3, #16
 8014c2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	461a      	mov	r2, r3
 8014c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014c38:	61fb      	str	r3, [r7, #28]
 8014c3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c3c:	69b9      	ldr	r1, [r7, #24]
 8014c3e:	69fa      	ldr	r2, [r7, #28]
 8014c40:	e841 2300 	strex	r3, r2, [r1]
 8014c44:	617b      	str	r3, [r7, #20]
   return(result);
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d1e6      	bne.n	8014c1a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	69db      	ldr	r3, [r3, #28]
 8014c52:	f003 0310 	and.w	r3, r3, #16
 8014c56:	2b10      	cmp	r3, #16
 8014c58:	d103      	bne.n	8014c62 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	2210      	movs	r2, #16
 8014c60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014c68:	4619      	mov	r1, r3
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f7fe fbc0 	bl	80133f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014c70:	e00b      	b.n	8014c8a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8014c72:	6878      	ldr	r0, [r7, #4]
 8014c74:	f7ee fb6c 	bl	8003350 <HAL_UART_RxCpltCallback>
}
 8014c78:	e007      	b.n	8014c8a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	699a      	ldr	r2, [r3, #24]
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	f042 0208 	orr.w	r2, r2, #8
 8014c88:	619a      	str	r2, [r3, #24]
}
 8014c8a:	bf00      	nop
 8014c8c:	3758      	adds	r7, #88	; 0x58
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}

08014c92 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8014c92:	b580      	push	{r7, lr}
 8014c94:	b096      	sub	sp, #88	; 0x58
 8014c96:	af00      	add	r7, sp, #0
 8014c98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014ca0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014caa:	2b22      	cmp	r3, #34	; 0x22
 8014cac:	f040 8095 	bne.w	8014dda <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	681b      	ldr	r3, [r3, #0]
 8014cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cb6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cbe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8014cc0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8014cc4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014cc8:	4013      	ands	r3, r2
 8014cca:	b29a      	uxth	r2, r3
 8014ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cce:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014cd4:	1c9a      	adds	r2, r3, #2
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	3b01      	subs	r3, #1
 8014ce4:	b29a      	uxth	r2, r3
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d178      	bne.n	8014dea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d00:	e853 3f00 	ldrex	r3, [r3]
 8014d04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	461a      	mov	r2, r3
 8014d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d16:	643b      	str	r3, [r7, #64]	; 0x40
 8014d18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014d1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014d1e:	e841 2300 	strex	r3, r2, [r1]
 8014d22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d1e6      	bne.n	8014cf8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	3308      	adds	r3, #8
 8014d30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d32:	6a3b      	ldr	r3, [r7, #32]
 8014d34:	e853 3f00 	ldrex	r3, [r3]
 8014d38:	61fb      	str	r3, [r7, #28]
   return(result);
 8014d3a:	69fb      	ldr	r3, [r7, #28]
 8014d3c:	f023 0301 	bic.w	r3, r3, #1
 8014d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	3308      	adds	r3, #8
 8014d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d52:	e841 2300 	strex	r3, r2, [r1]
 8014d56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	d1e5      	bne.n	8014d2a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2220      	movs	r2, #32
 8014d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d70:	2b01      	cmp	r3, #1
 8014d72:	d12e      	bne.n	8014dd2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2200      	movs	r2, #0
 8014d78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	e853 3f00 	ldrex	r3, [r3]
 8014d86:	60bb      	str	r3, [r7, #8]
   return(result);
 8014d88:	68bb      	ldr	r3, [r7, #8]
 8014d8a:	f023 0310 	bic.w	r3, r3, #16
 8014d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	681b      	ldr	r3, [r3, #0]
 8014d94:	461a      	mov	r2, r3
 8014d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d98:	61bb      	str	r3, [r7, #24]
 8014d9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d9c:	6979      	ldr	r1, [r7, #20]
 8014d9e:	69ba      	ldr	r2, [r7, #24]
 8014da0:	e841 2300 	strex	r3, r2, [r1]
 8014da4:	613b      	str	r3, [r7, #16]
   return(result);
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d1e6      	bne.n	8014d7a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	69db      	ldr	r3, [r3, #28]
 8014db2:	f003 0310 	and.w	r3, r3, #16
 8014db6:	2b10      	cmp	r3, #16
 8014db8:	d103      	bne.n	8014dc2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	2210      	movs	r2, #16
 8014dc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014dc8:	4619      	mov	r1, r3
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f7fe fb10 	bl	80133f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014dd0:	e00b      	b.n	8014dea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8014dd2:	6878      	ldr	r0, [r7, #4]
 8014dd4:	f7ee fabc 	bl	8003350 <HAL_UART_RxCpltCallback>
}
 8014dd8:	e007      	b.n	8014dea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	699a      	ldr	r2, [r3, #24]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	f042 0208 	orr.w	r2, r2, #8
 8014de8:	619a      	str	r2, [r3, #24]
}
 8014dea:	bf00      	nop
 8014dec:	3758      	adds	r7, #88	; 0x58
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}
	...

08014df4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b0a6      	sub	sp, #152	; 0x98
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014e02:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	69db      	ldr	r3, [r3, #28]
 8014e0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	681b      	ldr	r3, [r3, #0]
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	689b      	ldr	r3, [r3, #8]
 8014e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014e2a:	2b22      	cmp	r3, #34	; 0x22
 8014e2c:	f040 814d 	bne.w	80150ca <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014e36:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014e3a:	e0f4      	b.n	8015026 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e42:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014e46:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8014e4a:	b2d9      	uxtb	r1, r3
 8014e4c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8014e50:	b2da      	uxtb	r2, r3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e56:	400a      	ands	r2, r1
 8014e58:	b2d2      	uxtb	r2, r2
 8014e5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014e60:	1c5a      	adds	r2, r3, #1
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014e6c:	b29b      	uxth	r3, r3
 8014e6e:	3b01      	subs	r3, #1
 8014e70:	b29a      	uxth	r2, r3
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	69db      	ldr	r3, [r3, #28]
 8014e7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014e82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014e86:	f003 0307 	and.w	r3, r3, #7
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d053      	beq.n	8014f36 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014e8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014e92:	f003 0301 	and.w	r3, r3, #1
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d011      	beq.n	8014ebe <UART_RxISR_8BIT_FIFOEN+0xca>
 8014e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d00b      	beq.n	8014ebe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014eb4:	f043 0201 	orr.w	r2, r3, #1
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014ebe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014ec2:	f003 0302 	and.w	r3, r3, #2
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d011      	beq.n	8014eee <UART_RxISR_8BIT_FIFOEN+0xfa>
 8014eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014ece:	f003 0301 	and.w	r3, r3, #1
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d00b      	beq.n	8014eee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	2202      	movs	r2, #2
 8014edc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014ee4:	f043 0204 	orr.w	r2, r3, #4
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014eee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014ef2:	f003 0304 	and.w	r3, r3, #4
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d011      	beq.n	8014f1e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8014efa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014efe:	f003 0301 	and.w	r3, r3, #1
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d00b      	beq.n	8014f1e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	2204      	movs	r2, #4
 8014f0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014f14:	f043 0202 	orr.w	r2, r3, #2
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d006      	beq.n	8014f36 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f7fe fa57 	bl	80133dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	2200      	movs	r2, #0
 8014f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014f3c:	b29b      	uxth	r3, r3
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d171      	bne.n	8015026 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014f4a:	e853 3f00 	ldrex	r3, [r3]
 8014f4e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8014f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014f56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	461a      	mov	r2, r3
 8014f60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014f64:	66bb      	str	r3, [r7, #104]	; 0x68
 8014f66:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f68:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8014f6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014f6c:	e841 2300 	strex	r3, r2, [r1]
 8014f70:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8014f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d1e4      	bne.n	8014f42 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	3308      	adds	r3, #8
 8014f7e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f82:	e853 3f00 	ldrex	r3, [r3]
 8014f86:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014f88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f8a:	4b56      	ldr	r3, [pc, #344]	; (80150e4 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8014f8c:	4013      	ands	r3, r2
 8014f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	3308      	adds	r3, #8
 8014f96:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014f98:	657a      	str	r2, [r7, #84]	; 0x54
 8014f9a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014f9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014fa0:	e841 2300 	strex	r3, r2, [r1]
 8014fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d1e5      	bne.n	8014f78 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	2220      	movs	r2, #32
 8014fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	2200      	movs	r2, #0
 8014fb8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fbe:	2b01      	cmp	r3, #1
 8014fc0:	d12e      	bne.n	8015020 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fd0:	e853 3f00 	ldrex	r3, [r3]
 8014fd4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fd8:	f023 0310 	bic.w	r3, r3, #16
 8014fdc:	67bb      	str	r3, [r7, #120]	; 0x78
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014fe6:	643b      	str	r3, [r7, #64]	; 0x40
 8014fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014fea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014fec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014fee:	e841 2300 	strex	r3, r2, [r1]
 8014ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d1e6      	bne.n	8014fc8 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	69db      	ldr	r3, [r3, #28]
 8015000:	f003 0310 	and.w	r3, r3, #16
 8015004:	2b10      	cmp	r3, #16
 8015006:	d103      	bne.n	8015010 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	2210      	movs	r2, #16
 801500e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015016:	4619      	mov	r1, r3
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f7fe f9e9 	bl	80133f0 <HAL_UARTEx_RxEventCallback>
 801501e:	e002      	b.n	8015026 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f7ee f995 	bl	8003350 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015026:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 801502a:	2b00      	cmp	r3, #0
 801502c:	d006      	beq.n	801503c <UART_RxISR_8BIT_FIFOEN+0x248>
 801502e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015032:	f003 0320 	and.w	r3, r3, #32
 8015036:	2b00      	cmp	r3, #0
 8015038:	f47f af00 	bne.w	8014e3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015042:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015046:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 801504a:	2b00      	cmp	r3, #0
 801504c:	d045      	beq.n	80150da <UART_RxISR_8BIT_FIFOEN+0x2e6>
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015054:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8015058:	429a      	cmp	r2, r3
 801505a:	d23e      	bcs.n	80150da <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	3308      	adds	r3, #8
 8015062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	e853 3f00 	ldrex	r3, [r3]
 801506a:	61fb      	str	r3, [r7, #28]
   return(result);
 801506c:	69fb      	ldr	r3, [r7, #28]
 801506e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015072:	673b      	str	r3, [r7, #112]	; 0x70
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	3308      	adds	r3, #8
 801507a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801507c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801507e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015084:	e841 2300 	strex	r3, r2, [r1]
 8015088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508c:	2b00      	cmp	r3, #0
 801508e:	d1e5      	bne.n	801505c <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	4a15      	ldr	r2, [pc, #84]	; (80150e8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8015094:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	e853 3f00 	ldrex	r3, [r3]
 80150a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	f043 0320 	orr.w	r3, r3, #32
 80150aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	461a      	mov	r2, r3
 80150b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80150b4:	61bb      	str	r3, [r7, #24]
 80150b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150b8:	6979      	ldr	r1, [r7, #20]
 80150ba:	69ba      	ldr	r2, [r7, #24]
 80150bc:	e841 2300 	strex	r3, r2, [r1]
 80150c0:	613b      	str	r3, [r7, #16]
   return(result);
 80150c2:	693b      	ldr	r3, [r7, #16]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1e6      	bne.n	8015096 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80150c8:	e007      	b.n	80150da <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	699a      	ldr	r2, [r3, #24]
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	f042 0208 	orr.w	r2, r2, #8
 80150d8:	619a      	str	r2, [r3, #24]
}
 80150da:	bf00      	nop
 80150dc:	3798      	adds	r7, #152	; 0x98
 80150de:	46bd      	mov	sp, r7
 80150e0:	bd80      	pop	{r7, pc}
 80150e2:	bf00      	nop
 80150e4:	effffffe 	.word	0xeffffffe
 80150e8:	08014b33 	.word	0x08014b33

080150ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b0a8      	sub	sp, #160	; 0xa0
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80150fa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	69db      	ldr	r3, [r3, #28]
 8015104:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	689b      	ldr	r3, [r3, #8]
 8015118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015122:	2b22      	cmp	r3, #34	; 0x22
 8015124:	f040 8151 	bne.w	80153ca <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801512e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015132:	e0f8      	b.n	8015326 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801513a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015142:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8015146:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 801514a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 801514e:	4013      	ands	r3, r2
 8015150:	b29a      	uxth	r2, r3
 8015152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801515c:	1c9a      	adds	r2, r3, #2
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015168:	b29b      	uxth	r3, r3
 801516a:	3b01      	subs	r3, #1
 801516c:	b29a      	uxth	r2, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	69db      	ldr	r3, [r3, #28]
 801517a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801517e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015182:	f003 0307 	and.w	r3, r3, #7
 8015186:	2b00      	cmp	r3, #0
 8015188:	d053      	beq.n	8015232 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801518a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801518e:	f003 0301 	and.w	r3, r3, #1
 8015192:	2b00      	cmp	r3, #0
 8015194:	d011      	beq.n	80151ba <UART_RxISR_16BIT_FIFOEN+0xce>
 8015196:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801519a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d00b      	beq.n	80151ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	2201      	movs	r2, #1
 80151a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80151b0:	f043 0201 	orr.w	r2, r3, #1
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80151ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80151be:	f003 0302 	and.w	r3, r3, #2
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d011      	beq.n	80151ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 80151c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80151ca:	f003 0301 	and.w	r3, r3, #1
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d00b      	beq.n	80151ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	2202      	movs	r2, #2
 80151d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80151e0:	f043 0204 	orr.w	r2, r3, #4
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80151ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80151ee:	f003 0304 	and.w	r3, r3, #4
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d011      	beq.n	801521a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80151f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80151fa:	f003 0301 	and.w	r3, r3, #1
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d00b      	beq.n	801521a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	2204      	movs	r2, #4
 8015208:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015210:	f043 0202 	orr.w	r2, r3, #2
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015220:	2b00      	cmp	r3, #0
 8015222:	d006      	beq.n	8015232 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f7fe f8d9 	bl	80133dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2200      	movs	r2, #0
 801522e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015238:	b29b      	uxth	r3, r3
 801523a:	2b00      	cmp	r3, #0
 801523c:	d173      	bne.n	8015326 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015244:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015246:	e853 3f00 	ldrex	r3, [r3]
 801524a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801524c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801524e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	461a      	mov	r2, r3
 801525c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015260:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015262:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015264:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015266:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015268:	e841 2300 	strex	r3, r2, [r1]
 801526c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801526e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015270:	2b00      	cmp	r3, #0
 8015272:	d1e4      	bne.n	801523e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	3308      	adds	r3, #8
 801527a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801527c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801527e:	e853 3f00 	ldrex	r3, [r3]
 8015282:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015286:	4b57      	ldr	r3, [pc, #348]	; (80153e4 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8015288:	4013      	ands	r3, r2
 801528a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	3308      	adds	r3, #8
 8015294:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015298:	65ba      	str	r2, [r7, #88]	; 0x58
 801529a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801529c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801529e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80152a0:	e841 2300 	strex	r3, r2, [r1]
 80152a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80152a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d1e3      	bne.n	8015274 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	2220      	movs	r2, #32
 80152b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	2200      	movs	r2, #0
 80152b8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152be:	2b01      	cmp	r3, #1
 80152c0:	d12e      	bne.n	8015320 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	2200      	movs	r2, #0
 80152c6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80152ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152d0:	e853 3f00 	ldrex	r3, [r3]
 80152d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80152d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152d8:	f023 0310 	bic.w	r3, r3, #16
 80152dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	461a      	mov	r2, r3
 80152e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80152e6:	647b      	str	r3, [r7, #68]	; 0x44
 80152e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80152ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80152ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80152ee:	e841 2300 	strex	r3, r2, [r1]
 80152f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80152f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d1e6      	bne.n	80152c8 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	69db      	ldr	r3, [r3, #28]
 8015300:	f003 0310 	and.w	r3, r3, #16
 8015304:	2b10      	cmp	r3, #16
 8015306:	d103      	bne.n	8015310 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	2210      	movs	r2, #16
 801530e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015316:	4619      	mov	r1, r3
 8015318:	6878      	ldr	r0, [r7, #4]
 801531a:	f7fe f869 	bl	80133f0 <HAL_UARTEx_RxEventCallback>
 801531e:	e002      	b.n	8015326 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015320:	6878      	ldr	r0, [r7, #4]
 8015322:	f7ee f815 	bl	8003350 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8015326:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801532a:	2b00      	cmp	r3, #0
 801532c:	d006      	beq.n	801533c <UART_RxISR_16BIT_FIFOEN+0x250>
 801532e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015332:	f003 0320 	and.w	r3, r3, #32
 8015336:	2b00      	cmp	r3, #0
 8015338:	f47f aefc 	bne.w	8015134 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015342:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8015346:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 801534a:	2b00      	cmp	r3, #0
 801534c:	d045      	beq.n	80153da <UART_RxISR_16BIT_FIFOEN+0x2ee>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015354:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8015358:	429a      	cmp	r2, r3
 801535a:	d23e      	bcs.n	80153da <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	3308      	adds	r3, #8
 8015362:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015366:	e853 3f00 	ldrex	r3, [r3]
 801536a:	623b      	str	r3, [r7, #32]
   return(result);
 801536c:	6a3b      	ldr	r3, [r7, #32]
 801536e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015372:	677b      	str	r3, [r7, #116]	; 0x74
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	3308      	adds	r3, #8
 801537a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801537c:	633a      	str	r2, [r7, #48]	; 0x30
 801537e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015380:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015384:	e841 2300 	strex	r3, r2, [r1]
 8015388:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801538c:	2b00      	cmp	r3, #0
 801538e:	d1e5      	bne.n	801535c <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	4a15      	ldr	r2, [pc, #84]	; (80153e8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8015394:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	e853 3f00 	ldrex	r3, [r3]
 80153a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	f043 0320 	orr.w	r3, r3, #32
 80153aa:	673b      	str	r3, [r7, #112]	; 0x70
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	461a      	mov	r2, r3
 80153b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80153b4:	61fb      	str	r3, [r7, #28]
 80153b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153b8:	69b9      	ldr	r1, [r7, #24]
 80153ba:	69fa      	ldr	r2, [r7, #28]
 80153bc:	e841 2300 	strex	r3, r2, [r1]
 80153c0:	617b      	str	r3, [r7, #20]
   return(result);
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d1e6      	bne.n	8015396 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80153c8:	e007      	b.n	80153da <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	699a      	ldr	r2, [r3, #24]
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f042 0208 	orr.w	r2, r2, #8
 80153d8:	619a      	str	r2, [r3, #24]
}
 80153da:	bf00      	nop
 80153dc:	37a0      	adds	r7, #160	; 0xa0
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
 80153e2:	bf00      	nop
 80153e4:	effffffe 	.word	0xeffffffe
 80153e8:	08014c93 	.word	0x08014c93

080153ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80153ec:	b480      	push	{r7}
 80153ee:	b083      	sub	sp, #12
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80153f4:	bf00      	nop
 80153f6:	370c      	adds	r7, #12
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr

08015400 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015400:	b480      	push	{r7}
 8015402:	b083      	sub	sp, #12
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015408:	bf00      	nop
 801540a:	370c      	adds	r7, #12
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr

08015414 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8015414:	b480      	push	{r7}
 8015416:	b083      	sub	sp, #12
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801541c:	bf00      	nop
 801541e:	370c      	adds	r7, #12
 8015420:	46bd      	mov	sp, r7
 8015422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015426:	4770      	bx	lr

08015428 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015428:	b480      	push	{r7}
 801542a:	b085      	sub	sp, #20
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015436:	2b01      	cmp	r3, #1
 8015438:	d101      	bne.n	801543e <HAL_UARTEx_DisableFifoMode+0x16>
 801543a:	2302      	movs	r3, #2
 801543c:	e027      	b.n	801548e <HAL_UARTEx_DisableFifoMode+0x66>
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2201      	movs	r2, #1
 8015442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	2224      	movs	r2, #36	; 0x24
 801544a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	681a      	ldr	r2, [r3, #0]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	f022 0201 	bic.w	r2, r2, #1
 8015464:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015466:	68fb      	ldr	r3, [r7, #12]
 8015468:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801546c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	2200      	movs	r2, #0
 8015472:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	68fa      	ldr	r2, [r7, #12]
 801547a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2220      	movs	r2, #32
 8015480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2200      	movs	r2, #0
 8015488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801548c:	2300      	movs	r3, #0
}
 801548e:	4618      	mov	r0, r3
 8015490:	3714      	adds	r7, #20
 8015492:	46bd      	mov	sp, r7
 8015494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015498:	4770      	bx	lr

0801549a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801549a:	b580      	push	{r7, lr}
 801549c:	b084      	sub	sp, #16
 801549e:	af00      	add	r7, sp, #0
 80154a0:	6078      	str	r0, [r7, #4]
 80154a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80154aa:	2b01      	cmp	r3, #1
 80154ac:	d101      	bne.n	80154b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80154ae:	2302      	movs	r3, #2
 80154b0:	e02d      	b.n	801550e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	2201      	movs	r2, #1
 80154b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2224      	movs	r2, #36	; 0x24
 80154be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	681a      	ldr	r2, [r3, #0]
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	f022 0201 	bic.w	r2, r2, #1
 80154d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	689b      	ldr	r3, [r3, #8]
 80154e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	683a      	ldr	r2, [r7, #0]
 80154ea:	430a      	orrs	r2, r1
 80154ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80154ee:	6878      	ldr	r0, [r7, #4]
 80154f0:	f000 f850 	bl	8015594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	68fa      	ldr	r2, [r7, #12]
 80154fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2220      	movs	r2, #32
 8015500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2200      	movs	r2, #0
 8015508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801550c:	2300      	movs	r3, #0
}
 801550e:	4618      	mov	r0, r3
 8015510:	3710      	adds	r7, #16
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}

08015516 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015516:	b580      	push	{r7, lr}
 8015518:	b084      	sub	sp, #16
 801551a:	af00      	add	r7, sp, #0
 801551c:	6078      	str	r0, [r7, #4]
 801551e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015526:	2b01      	cmp	r3, #1
 8015528:	d101      	bne.n	801552e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801552a:	2302      	movs	r3, #2
 801552c:	e02d      	b.n	801558a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	2201      	movs	r2, #1
 8015532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2224      	movs	r2, #36	; 0x24
 801553a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	681a      	ldr	r2, [r3, #0]
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	f022 0201 	bic.w	r2, r2, #1
 8015554:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	689b      	ldr	r3, [r3, #8]
 801555c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	683a      	ldr	r2, [r7, #0]
 8015566:	430a      	orrs	r2, r1
 8015568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f000 f812 	bl	8015594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	68fa      	ldr	r2, [r7, #12]
 8015576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	2220      	movs	r2, #32
 801557c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	2200      	movs	r2, #0
 8015584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015588:	2300      	movs	r3, #0
}
 801558a:	4618      	mov	r0, r3
 801558c:	3710      	adds	r7, #16
 801558e:	46bd      	mov	sp, r7
 8015590:	bd80      	pop	{r7, pc}
	...

08015594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015594:	b480      	push	{r7}
 8015596:	b085      	sub	sp, #20
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d108      	bne.n	80155b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80155a4:	687b      	ldr	r3, [r7, #4]
 80155a6:	2201      	movs	r2, #1
 80155a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2201      	movs	r2, #1
 80155b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80155b4:	e031      	b.n	801561a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80155b6:	2310      	movs	r3, #16
 80155b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80155ba:	2310      	movs	r3, #16
 80155bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	689b      	ldr	r3, [r3, #8]
 80155c4:	0e5b      	lsrs	r3, r3, #25
 80155c6:	b2db      	uxtb	r3, r3
 80155c8:	f003 0307 	and.w	r3, r3, #7
 80155cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	689b      	ldr	r3, [r3, #8]
 80155d4:	0f5b      	lsrs	r3, r3, #29
 80155d6:	b2db      	uxtb	r3, r3
 80155d8:	f003 0307 	and.w	r3, r3, #7
 80155dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80155de:	7bbb      	ldrb	r3, [r7, #14]
 80155e0:	7b3a      	ldrb	r2, [r7, #12]
 80155e2:	4911      	ldr	r1, [pc, #68]	; (8015628 <UARTEx_SetNbDataToProcess+0x94>)
 80155e4:	5c8a      	ldrb	r2, [r1, r2]
 80155e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80155ea:	7b3a      	ldrb	r2, [r7, #12]
 80155ec:	490f      	ldr	r1, [pc, #60]	; (801562c <UARTEx_SetNbDataToProcess+0x98>)
 80155ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80155f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80155f4:	b29a      	uxth	r2, r3
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80155fc:	7bfb      	ldrb	r3, [r7, #15]
 80155fe:	7b7a      	ldrb	r2, [r7, #13]
 8015600:	4909      	ldr	r1, [pc, #36]	; (8015628 <UARTEx_SetNbDataToProcess+0x94>)
 8015602:	5c8a      	ldrb	r2, [r1, r2]
 8015604:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015608:	7b7a      	ldrb	r2, [r7, #13]
 801560a:	4908      	ldr	r1, [pc, #32]	; (801562c <UARTEx_SetNbDataToProcess+0x98>)
 801560c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801560e:	fb93 f3f2 	sdiv	r3, r3, r2
 8015612:	b29a      	uxth	r2, r3
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801561a:	bf00      	nop
 801561c:	3714      	adds	r7, #20
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr
 8015626:	bf00      	nop
 8015628:	08016768 	.word	0x08016768
 801562c:	08016770 	.word	0x08016770

08015630 <__errno>:
 8015630:	4b01      	ldr	r3, [pc, #4]	; (8015638 <__errno+0x8>)
 8015632:	6818      	ldr	r0, [r3, #0]
 8015634:	4770      	bx	lr
 8015636:	bf00      	nop
 8015638:	20000030 	.word	0x20000030

0801563c <__libc_init_array>:
 801563c:	b570      	push	{r4, r5, r6, lr}
 801563e:	4d0d      	ldr	r5, [pc, #52]	; (8015674 <__libc_init_array+0x38>)
 8015640:	4c0d      	ldr	r4, [pc, #52]	; (8015678 <__libc_init_array+0x3c>)
 8015642:	1b64      	subs	r4, r4, r5
 8015644:	10a4      	asrs	r4, r4, #2
 8015646:	2600      	movs	r6, #0
 8015648:	42a6      	cmp	r6, r4
 801564a:	d109      	bne.n	8015660 <__libc_init_array+0x24>
 801564c:	4d0b      	ldr	r5, [pc, #44]	; (801567c <__libc_init_array+0x40>)
 801564e:	4c0c      	ldr	r4, [pc, #48]	; (8015680 <__libc_init_array+0x44>)
 8015650:	f001 f848 	bl	80166e4 <_init>
 8015654:	1b64      	subs	r4, r4, r5
 8015656:	10a4      	asrs	r4, r4, #2
 8015658:	2600      	movs	r6, #0
 801565a:	42a6      	cmp	r6, r4
 801565c:	d105      	bne.n	801566a <__libc_init_array+0x2e>
 801565e:	bd70      	pop	{r4, r5, r6, pc}
 8015660:	f855 3b04 	ldr.w	r3, [r5], #4
 8015664:	4798      	blx	r3
 8015666:	3601      	adds	r6, #1
 8015668:	e7ee      	b.n	8015648 <__libc_init_array+0xc>
 801566a:	f855 3b04 	ldr.w	r3, [r5], #4
 801566e:	4798      	blx	r3
 8015670:	3601      	adds	r6, #1
 8015672:	e7f2      	b.n	801565a <__libc_init_array+0x1e>
 8015674:	080169c8 	.word	0x080169c8
 8015678:	080169c8 	.word	0x080169c8
 801567c:	080169c8 	.word	0x080169c8
 8015680:	080169cc 	.word	0x080169cc

08015684 <memset>:
 8015684:	4402      	add	r2, r0
 8015686:	4603      	mov	r3, r0
 8015688:	4293      	cmp	r3, r2
 801568a:	d100      	bne.n	801568e <memset+0xa>
 801568c:	4770      	bx	lr
 801568e:	f803 1b01 	strb.w	r1, [r3], #1
 8015692:	e7f9      	b.n	8015688 <memset+0x4>
 8015694:	0000      	movs	r0, r0
	...

08015698 <cos>:
 8015698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801569a:	eeb0 7b40 	vmov.f64	d7, d0
 801569e:	ee17 3a90 	vmov	r3, s15
 80156a2:	4a21      	ldr	r2, [pc, #132]	; (8015728 <cos+0x90>)
 80156a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80156a8:	4293      	cmp	r3, r2
 80156aa:	dc06      	bgt.n	80156ba <cos+0x22>
 80156ac:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8015720 <cos+0x88>
 80156b0:	b005      	add	sp, #20
 80156b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80156b6:	f000 bab7 	b.w	8015c28 <__kernel_cos>
 80156ba:	4a1c      	ldr	r2, [pc, #112]	; (801572c <cos+0x94>)
 80156bc:	4293      	cmp	r3, r2
 80156be:	dd04      	ble.n	80156ca <cos+0x32>
 80156c0:	ee30 0b40 	vsub.f64	d0, d0, d0
 80156c4:	b005      	add	sp, #20
 80156c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80156ca:	4668      	mov	r0, sp
 80156cc:	f000 f964 	bl	8015998 <__ieee754_rem_pio2>
 80156d0:	f000 0003 	and.w	r0, r0, #3
 80156d4:	2801      	cmp	r0, #1
 80156d6:	d009      	beq.n	80156ec <cos+0x54>
 80156d8:	2802      	cmp	r0, #2
 80156da:	d010      	beq.n	80156fe <cos+0x66>
 80156dc:	b9b0      	cbnz	r0, 801570c <cos+0x74>
 80156de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80156e2:	ed9d 0b00 	vldr	d0, [sp]
 80156e6:	f000 fa9f 	bl	8015c28 <__kernel_cos>
 80156ea:	e7eb      	b.n	80156c4 <cos+0x2c>
 80156ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80156f0:	ed9d 0b00 	vldr	d0, [sp]
 80156f4:	f000 fd9c 	bl	8016230 <__kernel_sin>
 80156f8:	eeb1 0b40 	vneg.f64	d0, d0
 80156fc:	e7e2      	b.n	80156c4 <cos+0x2c>
 80156fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015702:	ed9d 0b00 	vldr	d0, [sp]
 8015706:	f000 fa8f 	bl	8015c28 <__kernel_cos>
 801570a:	e7f5      	b.n	80156f8 <cos+0x60>
 801570c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015710:	ed9d 0b00 	vldr	d0, [sp]
 8015714:	2001      	movs	r0, #1
 8015716:	f000 fd8b 	bl	8016230 <__kernel_sin>
 801571a:	e7d3      	b.n	80156c4 <cos+0x2c>
 801571c:	f3af 8000 	nop.w
	...
 8015728:	3fe921fb 	.word	0x3fe921fb
 801572c:	7fefffff 	.word	0x7fefffff

08015730 <sin>:
 8015730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015732:	eeb0 7b40 	vmov.f64	d7, d0
 8015736:	ee17 3a90 	vmov	r3, s15
 801573a:	4a21      	ldr	r2, [pc, #132]	; (80157c0 <sin+0x90>)
 801573c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015740:	4293      	cmp	r3, r2
 8015742:	dc07      	bgt.n	8015754 <sin+0x24>
 8015744:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80157b8 <sin+0x88>
 8015748:	2000      	movs	r0, #0
 801574a:	b005      	add	sp, #20
 801574c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015750:	f000 bd6e 	b.w	8016230 <__kernel_sin>
 8015754:	4a1b      	ldr	r2, [pc, #108]	; (80157c4 <sin+0x94>)
 8015756:	4293      	cmp	r3, r2
 8015758:	dd04      	ble.n	8015764 <sin+0x34>
 801575a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801575e:	b005      	add	sp, #20
 8015760:	f85d fb04 	ldr.w	pc, [sp], #4
 8015764:	4668      	mov	r0, sp
 8015766:	f000 f917 	bl	8015998 <__ieee754_rem_pio2>
 801576a:	f000 0003 	and.w	r0, r0, #3
 801576e:	2801      	cmp	r0, #1
 8015770:	d00a      	beq.n	8015788 <sin+0x58>
 8015772:	2802      	cmp	r0, #2
 8015774:	d00f      	beq.n	8015796 <sin+0x66>
 8015776:	b9c0      	cbnz	r0, 80157aa <sin+0x7a>
 8015778:	ed9d 1b02 	vldr	d1, [sp, #8]
 801577c:	ed9d 0b00 	vldr	d0, [sp]
 8015780:	2001      	movs	r0, #1
 8015782:	f000 fd55 	bl	8016230 <__kernel_sin>
 8015786:	e7ea      	b.n	801575e <sin+0x2e>
 8015788:	ed9d 1b02 	vldr	d1, [sp, #8]
 801578c:	ed9d 0b00 	vldr	d0, [sp]
 8015790:	f000 fa4a 	bl	8015c28 <__kernel_cos>
 8015794:	e7e3      	b.n	801575e <sin+0x2e>
 8015796:	ed9d 1b02 	vldr	d1, [sp, #8]
 801579a:	ed9d 0b00 	vldr	d0, [sp]
 801579e:	2001      	movs	r0, #1
 80157a0:	f000 fd46 	bl	8016230 <__kernel_sin>
 80157a4:	eeb1 0b40 	vneg.f64	d0, d0
 80157a8:	e7d9      	b.n	801575e <sin+0x2e>
 80157aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80157ae:	ed9d 0b00 	vldr	d0, [sp]
 80157b2:	f000 fa39 	bl	8015c28 <__kernel_cos>
 80157b6:	e7f5      	b.n	80157a4 <sin+0x74>
	...
 80157c0:	3fe921fb 	.word	0x3fe921fb
 80157c4:	7fefffff 	.word	0x7fefffff

080157c8 <atan2>:
 80157c8:	f000 b822 	b.w	8015810 <__ieee754_atan2>
 80157cc:	0000      	movs	r0, r0
	...

080157d0 <sqrt>:
 80157d0:	b508      	push	{r3, lr}
 80157d2:	ed2d 8b04 	vpush	{d8-d9}
 80157d6:	eeb0 8b40 	vmov.f64	d8, d0
 80157da:	f000 fa21 	bl	8015c20 <__ieee754_sqrt>
 80157de:	eeb4 8b48 	vcmp.f64	d8, d8
 80157e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157e6:	d60c      	bvs.n	8015802 <sqrt+0x32>
 80157e8:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8015808 <sqrt+0x38>
 80157ec:	eeb4 8bc9 	vcmpe.f64	d8, d9
 80157f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157f4:	d505      	bpl.n	8015802 <sqrt+0x32>
 80157f6:	f7ff ff1b 	bl	8015630 <__errno>
 80157fa:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80157fe:	2321      	movs	r3, #33	; 0x21
 8015800:	6003      	str	r3, [r0, #0]
 8015802:	ecbd 8b04 	vpop	{d8-d9}
 8015806:	bd08      	pop	{r3, pc}
	...

08015810 <__ieee754_atan2>:
 8015810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015812:	eeb0 7b40 	vmov.f64	d7, d0
 8015816:	ee11 6a10 	vmov	r6, s2
 801581a:	ee11 0a90 	vmov	r0, s3
 801581e:	4273      	negs	r3, r6
 8015820:	4f59      	ldr	r7, [pc, #356]	; (8015988 <__ieee754_atan2+0x178>)
 8015822:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8015826:	4333      	orrs	r3, r6
 8015828:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801582c:	42bb      	cmp	r3, r7
 801582e:	d80d      	bhi.n	801584c <__ieee754_atan2+0x3c>
 8015830:	ee10 ca10 	vmov	ip, s0
 8015834:	ee17 5a90 	vmov	r5, s15
 8015838:	f1cc 0100 	rsb	r1, ip, #0
 801583c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015840:	ea41 010c 	orr.w	r1, r1, ip
 8015844:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8015848:	42b9      	cmp	r1, r7
 801584a:	d904      	bls.n	8015856 <__ieee754_atan2+0x46>
 801584c:	ee37 7b01 	vadd.f64	d7, d7, d1
 8015850:	eeb0 0b47 	vmov.f64	d0, d7
 8015854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015856:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 801585a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 801585e:	4331      	orrs	r1, r6
 8015860:	d103      	bne.n	801586a <__ieee754_atan2+0x5a>
 8015862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015866:	f000 bd3b 	b.w	80162e0 <atan>
 801586a:	1784      	asrs	r4, r0, #30
 801586c:	f004 0402 	and.w	r4, r4, #2
 8015870:	ea53 010c 	orrs.w	r1, r3, ip
 8015874:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8015878:	d107      	bne.n	801588a <__ieee754_atan2+0x7a>
 801587a:	2c02      	cmp	r4, #2
 801587c:	d05d      	beq.n	801593a <__ieee754_atan2+0x12a>
 801587e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8015950 <__ieee754_atan2+0x140>
 8015882:	2c03      	cmp	r4, #3
 8015884:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8015888:	e7e2      	b.n	8015850 <__ieee754_atan2+0x40>
 801588a:	ea52 0106 	orrs.w	r1, r2, r6
 801588e:	d107      	bne.n	80158a0 <__ieee754_atan2+0x90>
 8015890:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8015958 <__ieee754_atan2+0x148>
 8015894:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8015960 <__ieee754_atan2+0x150>
 8015898:	2d00      	cmp	r5, #0
 801589a:	fe27 7b00 	vselge.f64	d7, d7, d0
 801589e:	e7d7      	b.n	8015850 <__ieee754_atan2+0x40>
 80158a0:	42ba      	cmp	r2, r7
 80158a2:	d10f      	bne.n	80158c4 <__ieee754_atan2+0xb4>
 80158a4:	4293      	cmp	r3, r2
 80158a6:	f104 34ff 	add.w	r4, r4, #4294967295
 80158aa:	d107      	bne.n	80158bc <__ieee754_atan2+0xac>
 80158ac:	2c02      	cmp	r4, #2
 80158ae:	d847      	bhi.n	8015940 <__ieee754_atan2+0x130>
 80158b0:	4b36      	ldr	r3, [pc, #216]	; (801598c <__ieee754_atan2+0x17c>)
 80158b2:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80158b6:	ed94 7b00 	vldr	d7, [r4]
 80158ba:	e7c9      	b.n	8015850 <__ieee754_atan2+0x40>
 80158bc:	2c02      	cmp	r4, #2
 80158be:	d842      	bhi.n	8015946 <__ieee754_atan2+0x136>
 80158c0:	4b33      	ldr	r3, [pc, #204]	; (8015990 <__ieee754_atan2+0x180>)
 80158c2:	e7f6      	b.n	80158b2 <__ieee754_atan2+0xa2>
 80158c4:	42bb      	cmp	r3, r7
 80158c6:	d0e3      	beq.n	8015890 <__ieee754_atan2+0x80>
 80158c8:	1a9b      	subs	r3, r3, r2
 80158ca:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80158ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80158d2:	da1a      	bge.n	801590a <__ieee754_atan2+0xfa>
 80158d4:	2800      	cmp	r0, #0
 80158d6:	da01      	bge.n	80158dc <__ieee754_atan2+0xcc>
 80158d8:	323c      	adds	r2, #60	; 0x3c
 80158da:	db19      	blt.n	8015910 <__ieee754_atan2+0x100>
 80158dc:	ee87 0b01 	vdiv.f64	d0, d7, d1
 80158e0:	f000 fdf8 	bl	80164d4 <fabs>
 80158e4:	f000 fcfc 	bl	80162e0 <atan>
 80158e8:	eeb0 7b40 	vmov.f64	d7, d0
 80158ec:	2c01      	cmp	r4, #1
 80158ee:	d012      	beq.n	8015916 <__ieee754_atan2+0x106>
 80158f0:	2c02      	cmp	r4, #2
 80158f2:	d019      	beq.n	8015928 <__ieee754_atan2+0x118>
 80158f4:	2c00      	cmp	r4, #0
 80158f6:	d0ab      	beq.n	8015850 <__ieee754_atan2+0x40>
 80158f8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8015968 <__ieee754_atan2+0x158>
 80158fc:	ee37 7b40 	vsub.f64	d7, d7, d0
 8015900:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8015970 <__ieee754_atan2+0x160>
 8015904:	ee37 7b40 	vsub.f64	d7, d7, d0
 8015908:	e7a2      	b.n	8015850 <__ieee754_atan2+0x40>
 801590a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8015958 <__ieee754_atan2+0x148>
 801590e:	e7ed      	b.n	80158ec <__ieee754_atan2+0xdc>
 8015910:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8015978 <__ieee754_atan2+0x168>
 8015914:	e7ea      	b.n	80158ec <__ieee754_atan2+0xdc>
 8015916:	ee17 1a90 	vmov	r1, s15
 801591a:	ec53 2b17 	vmov	r2, r3, d7
 801591e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015922:	ec43 2b17 	vmov	d7, r2, r3
 8015926:	e793      	b.n	8015850 <__ieee754_atan2+0x40>
 8015928:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8015968 <__ieee754_atan2+0x158>
 801592c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8015930:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8015970 <__ieee754_atan2+0x160>
 8015934:	ee30 7b47 	vsub.f64	d7, d0, d7
 8015938:	e78a      	b.n	8015850 <__ieee754_atan2+0x40>
 801593a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8015970 <__ieee754_atan2+0x160>
 801593e:	e787      	b.n	8015850 <__ieee754_atan2+0x40>
 8015940:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8015980 <__ieee754_atan2+0x170>
 8015944:	e784      	b.n	8015850 <__ieee754_atan2+0x40>
 8015946:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8015978 <__ieee754_atan2+0x168>
 801594a:	e781      	b.n	8015850 <__ieee754_atan2+0x40>
 801594c:	f3af 8000 	nop.w
 8015950:	54442d18 	.word	0x54442d18
 8015954:	c00921fb 	.word	0xc00921fb
 8015958:	54442d18 	.word	0x54442d18
 801595c:	3ff921fb 	.word	0x3ff921fb
 8015960:	54442d18 	.word	0x54442d18
 8015964:	bff921fb 	.word	0xbff921fb
 8015968:	33145c07 	.word	0x33145c07
 801596c:	3ca1a626 	.word	0x3ca1a626
 8015970:	54442d18 	.word	0x54442d18
 8015974:	400921fb 	.word	0x400921fb
	...
 8015980:	54442d18 	.word	0x54442d18
 8015984:	3fe921fb 	.word	0x3fe921fb
 8015988:	7ff00000 	.word	0x7ff00000
 801598c:	08016778 	.word	0x08016778
 8015990:	08016790 	.word	0x08016790
 8015994:	00000000 	.word	0x00000000

08015998 <__ieee754_rem_pio2>:
 8015998:	b570      	push	{r4, r5, r6, lr}
 801599a:	eeb0 7b40 	vmov.f64	d7, d0
 801599e:	ee17 5a90 	vmov	r5, s15
 80159a2:	4b99      	ldr	r3, [pc, #612]	; (8015c08 <__ieee754_rem_pio2+0x270>)
 80159a4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80159a8:	429e      	cmp	r6, r3
 80159aa:	b088      	sub	sp, #32
 80159ac:	4604      	mov	r4, r0
 80159ae:	dc07      	bgt.n	80159c0 <__ieee754_rem_pio2+0x28>
 80159b0:	2200      	movs	r2, #0
 80159b2:	2300      	movs	r3, #0
 80159b4:	ed84 0b00 	vstr	d0, [r4]
 80159b8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80159bc:	2000      	movs	r0, #0
 80159be:	e01b      	b.n	80159f8 <__ieee754_rem_pio2+0x60>
 80159c0:	4b92      	ldr	r3, [pc, #584]	; (8015c0c <__ieee754_rem_pio2+0x274>)
 80159c2:	429e      	cmp	r6, r3
 80159c4:	dc3b      	bgt.n	8015a3e <__ieee754_rem_pio2+0xa6>
 80159c6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80159ca:	2d00      	cmp	r5, #0
 80159cc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8015bc8 <__ieee754_rem_pio2+0x230>
 80159d0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80159d4:	dd19      	ble.n	8015a0a <__ieee754_rem_pio2+0x72>
 80159d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80159da:	429e      	cmp	r6, r3
 80159dc:	d00e      	beq.n	80159fc <__ieee754_rem_pio2+0x64>
 80159de:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8015bd0 <__ieee754_rem_pio2+0x238>
 80159e2:	ee37 5b46 	vsub.f64	d5, d7, d6
 80159e6:	ee37 7b45 	vsub.f64	d7, d7, d5
 80159ea:	ed84 5b00 	vstr	d5, [r4]
 80159ee:	ee37 7b46 	vsub.f64	d7, d7, d6
 80159f2:	ed84 7b02 	vstr	d7, [r4, #8]
 80159f6:	2001      	movs	r0, #1
 80159f8:	b008      	add	sp, #32
 80159fa:	bd70      	pop	{r4, r5, r6, pc}
 80159fc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015bd8 <__ieee754_rem_pio2+0x240>
 8015a00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015a04:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015be0 <__ieee754_rem_pio2+0x248>
 8015a08:	e7eb      	b.n	80159e2 <__ieee754_rem_pio2+0x4a>
 8015a0a:	429e      	cmp	r6, r3
 8015a0c:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015a10:	d00e      	beq.n	8015a30 <__ieee754_rem_pio2+0x98>
 8015a12:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8015bd0 <__ieee754_rem_pio2+0x238>
 8015a16:	ee37 5b06 	vadd.f64	d5, d7, d6
 8015a1a:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015a1e:	ed84 5b00 	vstr	d5, [r4]
 8015a22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015a26:	f04f 30ff 	mov.w	r0, #4294967295
 8015a2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8015a2e:	e7e3      	b.n	80159f8 <__ieee754_rem_pio2+0x60>
 8015a30:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015bd8 <__ieee754_rem_pio2+0x240>
 8015a34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015a38:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015be0 <__ieee754_rem_pio2+0x248>
 8015a3c:	e7eb      	b.n	8015a16 <__ieee754_rem_pio2+0x7e>
 8015a3e:	4b74      	ldr	r3, [pc, #464]	; (8015c10 <__ieee754_rem_pio2+0x278>)
 8015a40:	429e      	cmp	r6, r3
 8015a42:	dc70      	bgt.n	8015b26 <__ieee754_rem_pio2+0x18e>
 8015a44:	f000 fd46 	bl	80164d4 <fabs>
 8015a48:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8015a4c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015be8 <__ieee754_rem_pio2+0x250>
 8015a50:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015a54:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015a58:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8015a5c:	ee17 0a90 	vmov	r0, s15
 8015a60:	eeb1 4b45 	vneg.f64	d4, d5
 8015a64:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015bc8 <__ieee754_rem_pio2+0x230>
 8015a68:	eea5 0b47 	vfms.f64	d0, d5, d7
 8015a6c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015bd0 <__ieee754_rem_pio2+0x238>
 8015a70:	281f      	cmp	r0, #31
 8015a72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015a76:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015a7a:	dc08      	bgt.n	8015a8e <__ieee754_rem_pio2+0xf6>
 8015a7c:	4b65      	ldr	r3, [pc, #404]	; (8015c14 <__ieee754_rem_pio2+0x27c>)
 8015a7e:	1e42      	subs	r2, r0, #1
 8015a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a84:	42b3      	cmp	r3, r6
 8015a86:	d002      	beq.n	8015a8e <__ieee754_rem_pio2+0xf6>
 8015a88:	ed84 6b00 	vstr	d6, [r4]
 8015a8c:	e026      	b.n	8015adc <__ieee754_rem_pio2+0x144>
 8015a8e:	ee16 3a90 	vmov	r3, s13
 8015a92:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015a96:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015a9a:	2b10      	cmp	r3, #16
 8015a9c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015aa0:	ddf2      	ble.n	8015a88 <__ieee754_rem_pio2+0xf0>
 8015aa2:	eeb0 6b40 	vmov.f64	d6, d0
 8015aa6:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8015bd8 <__ieee754_rem_pio2+0x240>
 8015aaa:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8015be0 <__ieee754_rem_pio2+0x248>
 8015aae:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015ab2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015ab6:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015aba:	eeb0 7b40 	vmov.f64	d7, d0
 8015abe:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8015ac2:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015ac6:	ee13 3a90 	vmov	r3, s7
 8015aca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015ace:	1ad3      	subs	r3, r2, r3
 8015ad0:	2b31      	cmp	r3, #49	; 0x31
 8015ad2:	dc17      	bgt.n	8015b04 <__ieee754_rem_pio2+0x16c>
 8015ad4:	eeb0 0b46 	vmov.f64	d0, d6
 8015ad8:	ed84 3b00 	vstr	d3, [r4]
 8015adc:	ed94 6b00 	vldr	d6, [r4]
 8015ae0:	2d00      	cmp	r5, #0
 8015ae2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015ae6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015aea:	ed84 0b02 	vstr	d0, [r4, #8]
 8015aee:	da83      	bge.n	80159f8 <__ieee754_rem_pio2+0x60>
 8015af0:	eeb1 6b46 	vneg.f64	d6, d6
 8015af4:	eeb1 0b40 	vneg.f64	d0, d0
 8015af8:	ed84 6b00 	vstr	d6, [r4]
 8015afc:	ed84 0b02 	vstr	d0, [r4, #8]
 8015b00:	4240      	negs	r0, r0
 8015b02:	e779      	b.n	80159f8 <__ieee754_rem_pio2+0x60>
 8015b04:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8015bf0 <__ieee754_rem_pio2+0x258>
 8015b08:	eeb0 0b46 	vmov.f64	d0, d6
 8015b0c:	eea4 0b03 	vfma.f64	d0, d4, d3
 8015b10:	ee36 7b40 	vsub.f64	d7, d6, d0
 8015b14:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8015bf8 <__ieee754_rem_pio2+0x260>
 8015b18:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015b1c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8015b20:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015b24:	e7b0      	b.n	8015a88 <__ieee754_rem_pio2+0xf0>
 8015b26:	4b3c      	ldr	r3, [pc, #240]	; (8015c18 <__ieee754_rem_pio2+0x280>)
 8015b28:	429e      	cmp	r6, r3
 8015b2a:	dd06      	ble.n	8015b3a <__ieee754_rem_pio2+0x1a2>
 8015b2c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8015b30:	ed80 7b02 	vstr	d7, [r0, #8]
 8015b34:	ed80 7b00 	vstr	d7, [r0]
 8015b38:	e740      	b.n	80159bc <__ieee754_rem_pio2+0x24>
 8015b3a:	1532      	asrs	r2, r6, #20
 8015b3c:	ee10 0a10 	vmov	r0, s0
 8015b40:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8015b44:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8015b48:	ec41 0b17 	vmov	d7, r0, r1
 8015b4c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015b50:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8015c00 <__ieee754_rem_pio2+0x268>
 8015b54:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015b58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015b5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015b60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015b64:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015b68:	a902      	add	r1, sp, #8
 8015b6a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015b6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015b72:	ed8d 6b04 	vstr	d6, [sp, #16]
 8015b76:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015b7a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015b7e:	2603      	movs	r6, #3
 8015b80:	4608      	mov	r0, r1
 8015b82:	ed91 7b04 	vldr	d7, [r1, #16]
 8015b86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b8e:	4633      	mov	r3, r6
 8015b90:	f1a1 0108 	sub.w	r1, r1, #8
 8015b94:	f106 36ff 	add.w	r6, r6, #4294967295
 8015b98:	d0f3      	beq.n	8015b82 <__ieee754_rem_pio2+0x1ea>
 8015b9a:	4920      	ldr	r1, [pc, #128]	; (8015c1c <__ieee754_rem_pio2+0x284>)
 8015b9c:	9101      	str	r1, [sp, #4]
 8015b9e:	2102      	movs	r1, #2
 8015ba0:	9100      	str	r1, [sp, #0]
 8015ba2:	4621      	mov	r1, r4
 8015ba4:	f000 f8ac 	bl	8015d00 <__kernel_rem_pio2>
 8015ba8:	2d00      	cmp	r5, #0
 8015baa:	f6bf af25 	bge.w	80159f8 <__ieee754_rem_pio2+0x60>
 8015bae:	ed94 7b00 	vldr	d7, [r4]
 8015bb2:	eeb1 7b47 	vneg.f64	d7, d7
 8015bb6:	ed84 7b00 	vstr	d7, [r4]
 8015bba:	ed94 7b02 	vldr	d7, [r4, #8]
 8015bbe:	eeb1 7b47 	vneg.f64	d7, d7
 8015bc2:	ed84 7b02 	vstr	d7, [r4, #8]
 8015bc6:	e79b      	b.n	8015b00 <__ieee754_rem_pio2+0x168>
 8015bc8:	54400000 	.word	0x54400000
 8015bcc:	3ff921fb 	.word	0x3ff921fb
 8015bd0:	1a626331 	.word	0x1a626331
 8015bd4:	3dd0b461 	.word	0x3dd0b461
 8015bd8:	1a600000 	.word	0x1a600000
 8015bdc:	3dd0b461 	.word	0x3dd0b461
 8015be0:	2e037073 	.word	0x2e037073
 8015be4:	3ba3198a 	.word	0x3ba3198a
 8015be8:	6dc9c883 	.word	0x6dc9c883
 8015bec:	3fe45f30 	.word	0x3fe45f30
 8015bf0:	2e000000 	.word	0x2e000000
 8015bf4:	3ba3198a 	.word	0x3ba3198a
 8015bf8:	252049c1 	.word	0x252049c1
 8015bfc:	397b839a 	.word	0x397b839a
 8015c00:	00000000 	.word	0x00000000
 8015c04:	41700000 	.word	0x41700000
 8015c08:	3fe921fb 	.word	0x3fe921fb
 8015c0c:	4002d97b 	.word	0x4002d97b
 8015c10:	413921fb 	.word	0x413921fb
 8015c14:	080167a8 	.word	0x080167a8
 8015c18:	7fefffff 	.word	0x7fefffff
 8015c1c:	08016828 	.word	0x08016828

08015c20 <__ieee754_sqrt>:
 8015c20:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8015c24:	4770      	bx	lr
	...

08015c28 <__kernel_cos>:
 8015c28:	ee10 1a90 	vmov	r1, s1
 8015c2c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8015c30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015c34:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8015c38:	da05      	bge.n	8015c46 <__kernel_cos+0x1e>
 8015c3a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8015c3e:	ee17 3a90 	vmov	r3, s15
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d03d      	beq.n	8015cc2 <__kernel_cos+0x9a>
 8015c46:	ee20 3b00 	vmul.f64	d3, d0, d0
 8015c4a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8015cc8 <__kernel_cos+0xa0>
 8015c4e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8015cd0 <__kernel_cos+0xa8>
 8015c52:	eea3 6b07 	vfma.f64	d6, d3, d7
 8015c56:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015cd8 <__kernel_cos+0xb0>
 8015c5a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8015c5e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8015ce0 <__kernel_cos+0xb8>
 8015c62:	eea7 6b03 	vfma.f64	d6, d7, d3
 8015c66:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015ce8 <__kernel_cos+0xc0>
 8015c6a:	4b23      	ldr	r3, [pc, #140]	; (8015cf8 <__kernel_cos+0xd0>)
 8015c6c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8015c70:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8015cf0 <__kernel_cos+0xc8>
 8015c74:	4299      	cmp	r1, r3
 8015c76:	eea7 6b03 	vfma.f64	d6, d7, d3
 8015c7a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8015c7e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8015c82:	ee23 7b07 	vmul.f64	d7, d3, d7
 8015c86:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8015c8a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8015c8e:	dc04      	bgt.n	8015c9a <__kernel_cos+0x72>
 8015c90:	ee37 6b46 	vsub.f64	d6, d7, d6
 8015c94:	ee34 0b46 	vsub.f64	d0, d4, d6
 8015c98:	4770      	bx	lr
 8015c9a:	4b18      	ldr	r3, [pc, #96]	; (8015cfc <__kernel_cos+0xd4>)
 8015c9c:	4299      	cmp	r1, r3
 8015c9e:	dc0d      	bgt.n	8015cbc <__kernel_cos+0x94>
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8015ca6:	ec43 2b15 	vmov	d5, r2, r3
 8015caa:	ee34 0b45 	vsub.f64	d0, d4, d5
 8015cae:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015cb2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015cb6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015cba:	4770      	bx	lr
 8015cbc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8015cc0:	e7f3      	b.n	8015caa <__kernel_cos+0x82>
 8015cc2:	eeb0 0b44 	vmov.f64	d0, d4
 8015cc6:	4770      	bx	lr
 8015cc8:	be8838d4 	.word	0xbe8838d4
 8015ccc:	bda8fae9 	.word	0xbda8fae9
 8015cd0:	bdb4b1c4 	.word	0xbdb4b1c4
 8015cd4:	3e21ee9e 	.word	0x3e21ee9e
 8015cd8:	809c52ad 	.word	0x809c52ad
 8015cdc:	be927e4f 	.word	0xbe927e4f
 8015ce0:	19cb1590 	.word	0x19cb1590
 8015ce4:	3efa01a0 	.word	0x3efa01a0
 8015ce8:	16c15177 	.word	0x16c15177
 8015cec:	bf56c16c 	.word	0xbf56c16c
 8015cf0:	5555554c 	.word	0x5555554c
 8015cf4:	3fa55555 	.word	0x3fa55555
 8015cf8:	3fd33332 	.word	0x3fd33332
 8015cfc:	3fe90000 	.word	0x3fe90000

08015d00 <__kernel_rem_pio2>:
 8015d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d04:	ed2d 8b06 	vpush	{d8-d10}
 8015d08:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8015d0c:	460f      	mov	r7, r1
 8015d0e:	9002      	str	r0, [sp, #8]
 8015d10:	49c5      	ldr	r1, [pc, #788]	; (8016028 <__kernel_rem_pio2+0x328>)
 8015d12:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8015d14:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8015d18:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8015d1c:	9301      	str	r3, [sp, #4]
 8015d1e:	f112 0f14 	cmn.w	r2, #20
 8015d22:	bfa8      	it	ge
 8015d24:	2018      	movge	r0, #24
 8015d26:	f103 31ff 	add.w	r1, r3, #4294967295
 8015d2a:	bfb8      	it	lt
 8015d2c:	2000      	movlt	r0, #0
 8015d2e:	f06f 0417 	mvn.w	r4, #23
 8015d32:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8016010 <__kernel_rem_pio2+0x310>
 8015d36:	bfa4      	itt	ge
 8015d38:	f1a2 0a03 	subge.w	sl, r2, #3
 8015d3c:	fb9a f0f0 	sdivge	r0, sl, r0
 8015d40:	fb00 4404 	mla	r4, r0, r4, r4
 8015d44:	1a46      	subs	r6, r0, r1
 8015d46:	4414      	add	r4, r2
 8015d48:	eb09 0c01 	add.w	ip, r9, r1
 8015d4c:	ad1a      	add	r5, sp, #104	; 0x68
 8015d4e:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8015d52:	2200      	movs	r2, #0
 8015d54:	4562      	cmp	r2, ip
 8015d56:	dd10      	ble.n	8015d7a <__kernel_rem_pio2+0x7a>
 8015d58:	9a01      	ldr	r2, [sp, #4]
 8015d5a:	ab1a      	add	r3, sp, #104	; 0x68
 8015d5c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8015d60:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8015d64:	f04f 0c00 	mov.w	ip, #0
 8015d68:	45cc      	cmp	ip, r9
 8015d6a:	dc26      	bgt.n	8015dba <__kernel_rem_pio2+0xba>
 8015d6c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8016010 <__kernel_rem_pio2+0x310>
 8015d70:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015d74:	4616      	mov	r6, r2
 8015d76:	2500      	movs	r5, #0
 8015d78:	e015      	b.n	8015da6 <__kernel_rem_pio2+0xa6>
 8015d7a:	42d6      	cmn	r6, r2
 8015d7c:	d409      	bmi.n	8015d92 <__kernel_rem_pio2+0x92>
 8015d7e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8015d82:	ee07 3a90 	vmov	s15, r3
 8015d86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015d8a:	eca5 7b02 	vstmia	r5!, {d7}
 8015d8e:	3201      	adds	r2, #1
 8015d90:	e7e0      	b.n	8015d54 <__kernel_rem_pio2+0x54>
 8015d92:	eeb0 7b46 	vmov.f64	d7, d6
 8015d96:	e7f8      	b.n	8015d8a <__kernel_rem_pio2+0x8a>
 8015d98:	ecb8 5b02 	vldmia	r8!, {d5}
 8015d9c:	ed96 6b00 	vldr	d6, [r6]
 8015da0:	3501      	adds	r5, #1
 8015da2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015da6:	428d      	cmp	r5, r1
 8015da8:	f1a6 0608 	sub.w	r6, r6, #8
 8015dac:	ddf4      	ble.n	8015d98 <__kernel_rem_pio2+0x98>
 8015dae:	ecaa 7b02 	vstmia	sl!, {d7}
 8015db2:	f10c 0c01 	add.w	ip, ip, #1
 8015db6:	3208      	adds	r2, #8
 8015db8:	e7d6      	b.n	8015d68 <__kernel_rem_pio2+0x68>
 8015dba:	ab06      	add	r3, sp, #24
 8015dbc:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8016018 <__kernel_rem_pio2+0x318>
 8015dc0:	ed9f ab97 	vldr	d10, [pc, #604]	; 8016020 <__kernel_rem_pio2+0x320>
 8015dc4:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8015dc8:	9303      	str	r3, [sp, #12]
 8015dca:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8015dce:	464d      	mov	r5, r9
 8015dd0:	00eb      	lsls	r3, r5, #3
 8015dd2:	9304      	str	r3, [sp, #16]
 8015dd4:	ab92      	add	r3, sp, #584	; 0x248
 8015dd6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8015dda:	f10d 0b18 	add.w	fp, sp, #24
 8015dde:	ab6a      	add	r3, sp, #424	; 0x1a8
 8015de0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8015de4:	465e      	mov	r6, fp
 8015de6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8015dea:	4628      	mov	r0, r5
 8015dec:	2800      	cmp	r0, #0
 8015dee:	f1a2 0208 	sub.w	r2, r2, #8
 8015df2:	dc4c      	bgt.n	8015e8e <__kernel_rem_pio2+0x18e>
 8015df4:	4620      	mov	r0, r4
 8015df6:	9105      	str	r1, [sp, #20]
 8015df8:	f000 fbea 	bl	80165d0 <scalbn>
 8015dfc:	eeb0 8b40 	vmov.f64	d8, d0
 8015e00:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8015e04:	ee28 0b00 	vmul.f64	d0, d8, d0
 8015e08:	f000 fb6e 	bl	80164e8 <floor>
 8015e0c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8015e10:	eea0 8b47 	vfms.f64	d8, d0, d7
 8015e14:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8015e18:	2c00      	cmp	r4, #0
 8015e1a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8015e1e:	ee17 8a90 	vmov	r8, s15
 8015e22:	ee38 8b40 	vsub.f64	d8, d8, d0
 8015e26:	9905      	ldr	r1, [sp, #20]
 8015e28:	dd43      	ble.n	8015eb2 <__kernel_rem_pio2+0x1b2>
 8015e2a:	1e68      	subs	r0, r5, #1
 8015e2c:	ab06      	add	r3, sp, #24
 8015e2e:	f1c4 0c18 	rsb	ip, r4, #24
 8015e32:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8015e36:	fa46 f20c 	asr.w	r2, r6, ip
 8015e3a:	4490      	add	r8, r2
 8015e3c:	fa02 f20c 	lsl.w	r2, r2, ip
 8015e40:	1ab6      	subs	r6, r6, r2
 8015e42:	f1c4 0217 	rsb	r2, r4, #23
 8015e46:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8015e4a:	4116      	asrs	r6, r2
 8015e4c:	2e00      	cmp	r6, #0
 8015e4e:	dd3f      	ble.n	8015ed0 <__kernel_rem_pio2+0x1d0>
 8015e50:	f04f 0c00 	mov.w	ip, #0
 8015e54:	f108 0801 	add.w	r8, r8, #1
 8015e58:	4660      	mov	r0, ip
 8015e5a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8015e5e:	4565      	cmp	r5, ip
 8015e60:	dc6e      	bgt.n	8015f40 <__kernel_rem_pio2+0x240>
 8015e62:	2c00      	cmp	r4, #0
 8015e64:	dd04      	ble.n	8015e70 <__kernel_rem_pio2+0x170>
 8015e66:	2c01      	cmp	r4, #1
 8015e68:	d07f      	beq.n	8015f6a <__kernel_rem_pio2+0x26a>
 8015e6a:	2c02      	cmp	r4, #2
 8015e6c:	f000 8087 	beq.w	8015f7e <__kernel_rem_pio2+0x27e>
 8015e70:	2e02      	cmp	r6, #2
 8015e72:	d12d      	bne.n	8015ed0 <__kernel_rem_pio2+0x1d0>
 8015e74:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015e78:	ee30 8b48 	vsub.f64	d8, d0, d8
 8015e7c:	b340      	cbz	r0, 8015ed0 <__kernel_rem_pio2+0x1d0>
 8015e7e:	4620      	mov	r0, r4
 8015e80:	9105      	str	r1, [sp, #20]
 8015e82:	f000 fba5 	bl	80165d0 <scalbn>
 8015e86:	9905      	ldr	r1, [sp, #20]
 8015e88:	ee38 8b40 	vsub.f64	d8, d8, d0
 8015e8c:	e020      	b.n	8015ed0 <__kernel_rem_pio2+0x1d0>
 8015e8e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8015e92:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8015e96:	3801      	subs	r0, #1
 8015e98:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8015e9c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8015ea0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015ea4:	eca6 0a01 	vstmia	r6!, {s0}
 8015ea8:	ed92 0b00 	vldr	d0, [r2]
 8015eac:	ee37 0b00 	vadd.f64	d0, d7, d0
 8015eb0:	e79c      	b.n	8015dec <__kernel_rem_pio2+0xec>
 8015eb2:	d105      	bne.n	8015ec0 <__kernel_rem_pio2+0x1c0>
 8015eb4:	1e6a      	subs	r2, r5, #1
 8015eb6:	ab06      	add	r3, sp, #24
 8015eb8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8015ebc:	15f6      	asrs	r6, r6, #23
 8015ebe:	e7c5      	b.n	8015e4c <__kernel_rem_pio2+0x14c>
 8015ec0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8015ec4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ecc:	da36      	bge.n	8015f3c <__kernel_rem_pio2+0x23c>
 8015ece:	2600      	movs	r6, #0
 8015ed0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ed8:	f040 80aa 	bne.w	8016030 <__kernel_rem_pio2+0x330>
 8015edc:	f105 3bff 	add.w	fp, r5, #4294967295
 8015ee0:	4658      	mov	r0, fp
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	4548      	cmp	r0, r9
 8015ee6:	da52      	bge.n	8015f8e <__kernel_rem_pio2+0x28e>
 8015ee8:	2a00      	cmp	r2, #0
 8015eea:	f000 8081 	beq.w	8015ff0 <__kernel_rem_pio2+0x2f0>
 8015eee:	ab06      	add	r3, sp, #24
 8015ef0:	3c18      	subs	r4, #24
 8015ef2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	f000 8087 	beq.w	801600a <__kernel_rem_pio2+0x30a>
 8015efc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015f00:	4620      	mov	r0, r4
 8015f02:	f000 fb65 	bl	80165d0 <scalbn>
 8015f06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8015f0a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8016018 <__kernel_rem_pio2+0x318>
 8015f0e:	a96a      	add	r1, sp, #424	; 0x1a8
 8015f10:	f103 0208 	add.w	r2, r3, #8
 8015f14:	1888      	adds	r0, r1, r2
 8015f16:	4659      	mov	r1, fp
 8015f18:	2900      	cmp	r1, #0
 8015f1a:	f280 80b7 	bge.w	801608c <__kernel_rem_pio2+0x38c>
 8015f1e:	4659      	mov	r1, fp
 8015f20:	2900      	cmp	r1, #0
 8015f22:	f2c0 80d5 	blt.w	80160d0 <__kernel_rem_pio2+0x3d0>
 8015f26:	a86a      	add	r0, sp, #424	; 0x1a8
 8015f28:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8015f2c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8016010 <__kernel_rem_pio2+0x310>
 8015f30:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801602c <__kernel_rem_pio2+0x32c>
 8015f34:	2400      	movs	r4, #0
 8015f36:	ebab 0001 	sub.w	r0, fp, r1
 8015f3a:	e0be      	b.n	80160ba <__kernel_rem_pio2+0x3ba>
 8015f3c:	2602      	movs	r6, #2
 8015f3e:	e787      	b.n	8015e50 <__kernel_rem_pio2+0x150>
 8015f40:	f8db 2000 	ldr.w	r2, [fp]
 8015f44:	b958      	cbnz	r0, 8015f5e <__kernel_rem_pio2+0x25e>
 8015f46:	b122      	cbz	r2, 8015f52 <__kernel_rem_pio2+0x252>
 8015f48:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8015f4c:	f8cb 2000 	str.w	r2, [fp]
 8015f50:	2201      	movs	r2, #1
 8015f52:	f10c 0c01 	add.w	ip, ip, #1
 8015f56:	f10b 0b04 	add.w	fp, fp, #4
 8015f5a:	4610      	mov	r0, r2
 8015f5c:	e77f      	b.n	8015e5e <__kernel_rem_pio2+0x15e>
 8015f5e:	ebae 0202 	sub.w	r2, lr, r2
 8015f62:	f8cb 2000 	str.w	r2, [fp]
 8015f66:	4602      	mov	r2, r0
 8015f68:	e7f3      	b.n	8015f52 <__kernel_rem_pio2+0x252>
 8015f6a:	f105 3cff 	add.w	ip, r5, #4294967295
 8015f6e:	ab06      	add	r3, sp, #24
 8015f70:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8015f74:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015f78:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8015f7c:	e778      	b.n	8015e70 <__kernel_rem_pio2+0x170>
 8015f7e:	f105 3cff 	add.w	ip, r5, #4294967295
 8015f82:	ab06      	add	r3, sp, #24
 8015f84:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8015f88:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8015f8c:	e7f4      	b.n	8015f78 <__kernel_rem_pio2+0x278>
 8015f8e:	ab06      	add	r3, sp, #24
 8015f90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8015f94:	3801      	subs	r0, #1
 8015f96:	431a      	orrs	r2, r3
 8015f98:	e7a4      	b.n	8015ee4 <__kernel_rem_pio2+0x1e4>
 8015f9a:	f10c 0c01 	add.w	ip, ip, #1
 8015f9e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8015fa2:	2800      	cmp	r0, #0
 8015fa4:	d0f9      	beq.n	8015f9a <__kernel_rem_pio2+0x29a>
 8015fa6:	9b04      	ldr	r3, [sp, #16]
 8015fa8:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8015fac:	eb0d 0203 	add.w	r2, sp, r3
 8015fb0:	9b01      	ldr	r3, [sp, #4]
 8015fb2:	18e8      	adds	r0, r5, r3
 8015fb4:	ab1a      	add	r3, sp, #104	; 0x68
 8015fb6:	1c6e      	adds	r6, r5, #1
 8015fb8:	3a98      	subs	r2, #152	; 0x98
 8015fba:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8015fbe:	4465      	add	r5, ip
 8015fc0:	42b5      	cmp	r5, r6
 8015fc2:	f6ff af05 	blt.w	8015dd0 <__kernel_rem_pio2+0xd0>
 8015fc6:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8015fca:	f8dd e008 	ldr.w	lr, [sp, #8]
 8015fce:	ee07 3a90 	vmov	s15, r3
 8015fd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015fd6:	f04f 0c00 	mov.w	ip, #0
 8015fda:	eca0 7b02 	vstmia	r0!, {d7}
 8015fde:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8016010 <__kernel_rem_pio2+0x310>
 8015fe2:	4680      	mov	r8, r0
 8015fe4:	458c      	cmp	ip, r1
 8015fe6:	dd07      	ble.n	8015ff8 <__kernel_rem_pio2+0x2f8>
 8015fe8:	eca2 7b02 	vstmia	r2!, {d7}
 8015fec:	3601      	adds	r6, #1
 8015fee:	e7e7      	b.n	8015fc0 <__kernel_rem_pio2+0x2c0>
 8015ff0:	9a03      	ldr	r2, [sp, #12]
 8015ff2:	f04f 0c01 	mov.w	ip, #1
 8015ff6:	e7d2      	b.n	8015f9e <__kernel_rem_pio2+0x29e>
 8015ff8:	ecbe 5b02 	vldmia	lr!, {d5}
 8015ffc:	ed38 6b02 	vldmdb	r8!, {d6}
 8016000:	f10c 0c01 	add.w	ip, ip, #1
 8016004:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016008:	e7ec      	b.n	8015fe4 <__kernel_rem_pio2+0x2e4>
 801600a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801600e:	e76e      	b.n	8015eee <__kernel_rem_pio2+0x1ee>
	...
 801601c:	3e700000 	.word	0x3e700000
 8016020:	00000000 	.word	0x00000000
 8016024:	41700000 	.word	0x41700000
 8016028:	08016970 	.word	0x08016970
 801602c:	08016930 	.word	0x08016930
 8016030:	4260      	negs	r0, r4
 8016032:	eeb0 0b48 	vmov.f64	d0, d8
 8016036:	f000 facb 	bl	80165d0 <scalbn>
 801603a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8016218 <__kernel_rem_pio2+0x518>
 801603e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8016042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016046:	db18      	blt.n	801607a <__kernel_rem_pio2+0x37a>
 8016048:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8016220 <__kernel_rem_pio2+0x520>
 801604c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8016050:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8016054:	aa06      	add	r2, sp, #24
 8016056:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801605a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801605e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8016062:	f105 0b01 	add.w	fp, r5, #1
 8016066:	ee10 3a10 	vmov	r3, s0
 801606a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801606e:	ee17 3a10 	vmov	r3, s14
 8016072:	3418      	adds	r4, #24
 8016074:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8016078:	e740      	b.n	8015efc <__kernel_rem_pio2+0x1fc>
 801607a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801607e:	aa06      	add	r2, sp, #24
 8016080:	ee10 3a10 	vmov	r3, s0
 8016084:	46ab      	mov	fp, r5
 8016086:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801608a:	e737      	b.n	8015efc <__kernel_rem_pio2+0x1fc>
 801608c:	ac06      	add	r4, sp, #24
 801608e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8016092:	9401      	str	r4, [sp, #4]
 8016094:	ee07 4a90 	vmov	s15, r4
 8016098:	3901      	subs	r1, #1
 801609a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801609e:	ee27 7b00 	vmul.f64	d7, d7, d0
 80160a2:	ee20 0b06 	vmul.f64	d0, d0, d6
 80160a6:	ed20 7b02 	vstmdb	r0!, {d7}
 80160aa:	e735      	b.n	8015f18 <__kernel_rem_pio2+0x218>
 80160ac:	ecbc 5b02 	vldmia	ip!, {d5}
 80160b0:	ecb5 6b02 	vldmia	r5!, {d6}
 80160b4:	3401      	adds	r4, #1
 80160b6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80160ba:	454c      	cmp	r4, r9
 80160bc:	dc01      	bgt.n	80160c2 <__kernel_rem_pio2+0x3c2>
 80160be:	4284      	cmp	r4, r0
 80160c0:	ddf4      	ble.n	80160ac <__kernel_rem_pio2+0x3ac>
 80160c2:	ac42      	add	r4, sp, #264	; 0x108
 80160c4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80160c8:	ed80 7b00 	vstr	d7, [r0]
 80160cc:	3901      	subs	r1, #1
 80160ce:	e727      	b.n	8015f20 <__kernel_rem_pio2+0x220>
 80160d0:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80160d2:	2902      	cmp	r1, #2
 80160d4:	dc0a      	bgt.n	80160ec <__kernel_rem_pio2+0x3ec>
 80160d6:	2900      	cmp	r1, #0
 80160d8:	dc2c      	bgt.n	8016134 <__kernel_rem_pio2+0x434>
 80160da:	d045      	beq.n	8016168 <__kernel_rem_pio2+0x468>
 80160dc:	f008 0007 	and.w	r0, r8, #7
 80160e0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80160e4:	ecbd 8b06 	vpop	{d8-d10}
 80160e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160ec:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80160ee:	2a03      	cmp	r2, #3
 80160f0:	d1f4      	bne.n	80160dc <__kernel_rem_pio2+0x3dc>
 80160f2:	aa42      	add	r2, sp, #264	; 0x108
 80160f4:	4413      	add	r3, r2
 80160f6:	461a      	mov	r2, r3
 80160f8:	4619      	mov	r1, r3
 80160fa:	4658      	mov	r0, fp
 80160fc:	2800      	cmp	r0, #0
 80160fe:	f1a1 0108 	sub.w	r1, r1, #8
 8016102:	dc54      	bgt.n	80161ae <__kernel_rem_pio2+0x4ae>
 8016104:	4659      	mov	r1, fp
 8016106:	2901      	cmp	r1, #1
 8016108:	f1a2 0208 	sub.w	r2, r2, #8
 801610c:	dc5f      	bgt.n	80161ce <__kernel_rem_pio2+0x4ce>
 801610e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8016228 <__kernel_rem_pio2+0x528>
 8016112:	3308      	adds	r3, #8
 8016114:	f1bb 0f01 	cmp.w	fp, #1
 8016118:	dc69      	bgt.n	80161ee <__kernel_rem_pio2+0x4ee>
 801611a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801611e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8016122:	2e00      	cmp	r6, #0
 8016124:	d16a      	bne.n	80161fc <__kernel_rem_pio2+0x4fc>
 8016126:	ed87 5b00 	vstr	d5, [r7]
 801612a:	ed87 6b02 	vstr	d6, [r7, #8]
 801612e:	ed87 7b04 	vstr	d7, [r7, #16]
 8016132:	e7d3      	b.n	80160dc <__kernel_rem_pio2+0x3dc>
 8016134:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016228 <__kernel_rem_pio2+0x528>
 8016138:	ab42      	add	r3, sp, #264	; 0x108
 801613a:	441a      	add	r2, r3
 801613c:	465b      	mov	r3, fp
 801613e:	2b00      	cmp	r3, #0
 8016140:	da26      	bge.n	8016190 <__kernel_rem_pio2+0x490>
 8016142:	b35e      	cbz	r6, 801619c <__kernel_rem_pio2+0x49c>
 8016144:	eeb1 7b46 	vneg.f64	d7, d6
 8016148:	ed87 7b00 	vstr	d7, [r7]
 801614c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8016150:	aa44      	add	r2, sp, #272	; 0x110
 8016152:	2301      	movs	r3, #1
 8016154:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016158:	459b      	cmp	fp, r3
 801615a:	da22      	bge.n	80161a2 <__kernel_rem_pio2+0x4a2>
 801615c:	b10e      	cbz	r6, 8016162 <__kernel_rem_pio2+0x462>
 801615e:	eeb1 7b47 	vneg.f64	d7, d7
 8016162:	ed87 7b02 	vstr	d7, [r7, #8]
 8016166:	e7b9      	b.n	80160dc <__kernel_rem_pio2+0x3dc>
 8016168:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8016228 <__kernel_rem_pio2+0x528>
 801616c:	ab42      	add	r3, sp, #264	; 0x108
 801616e:	441a      	add	r2, r3
 8016170:	f1bb 0f00 	cmp.w	fp, #0
 8016174:	da05      	bge.n	8016182 <__kernel_rem_pio2+0x482>
 8016176:	b10e      	cbz	r6, 801617c <__kernel_rem_pio2+0x47c>
 8016178:	eeb1 7b47 	vneg.f64	d7, d7
 801617c:	ed87 7b00 	vstr	d7, [r7]
 8016180:	e7ac      	b.n	80160dc <__kernel_rem_pio2+0x3dc>
 8016182:	ed32 6b02 	vldmdb	r2!, {d6}
 8016186:	f10b 3bff 	add.w	fp, fp, #4294967295
 801618a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801618e:	e7ef      	b.n	8016170 <__kernel_rem_pio2+0x470>
 8016190:	ed32 7b02 	vldmdb	r2!, {d7}
 8016194:	3b01      	subs	r3, #1
 8016196:	ee36 6b07 	vadd.f64	d6, d6, d7
 801619a:	e7d0      	b.n	801613e <__kernel_rem_pio2+0x43e>
 801619c:	eeb0 7b46 	vmov.f64	d7, d6
 80161a0:	e7d2      	b.n	8016148 <__kernel_rem_pio2+0x448>
 80161a2:	ecb2 6b02 	vldmia	r2!, {d6}
 80161a6:	3301      	adds	r3, #1
 80161a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80161ac:	e7d4      	b.n	8016158 <__kernel_rem_pio2+0x458>
 80161ae:	ed91 7b00 	vldr	d7, [r1]
 80161b2:	ed91 5b02 	vldr	d5, [r1, #8]
 80161b6:	3801      	subs	r0, #1
 80161b8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80161bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80161c0:	ed81 6b00 	vstr	d6, [r1]
 80161c4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80161c8:	ed81 7b02 	vstr	d7, [r1, #8]
 80161cc:	e796      	b.n	80160fc <__kernel_rem_pio2+0x3fc>
 80161ce:	ed92 7b00 	vldr	d7, [r2]
 80161d2:	ed92 5b02 	vldr	d5, [r2, #8]
 80161d6:	3901      	subs	r1, #1
 80161d8:	ee37 6b05 	vadd.f64	d6, d7, d5
 80161dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80161e0:	ed82 6b00 	vstr	d6, [r2]
 80161e4:	ee37 7b05 	vadd.f64	d7, d7, d5
 80161e8:	ed82 7b02 	vstr	d7, [r2, #8]
 80161ec:	e78b      	b.n	8016106 <__kernel_rem_pio2+0x406>
 80161ee:	ed33 6b02 	vldmdb	r3!, {d6}
 80161f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80161f6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80161fa:	e78b      	b.n	8016114 <__kernel_rem_pio2+0x414>
 80161fc:	eeb1 5b45 	vneg.f64	d5, d5
 8016200:	eeb1 6b46 	vneg.f64	d6, d6
 8016204:	ed87 5b00 	vstr	d5, [r7]
 8016208:	eeb1 7b47 	vneg.f64	d7, d7
 801620c:	ed87 6b02 	vstr	d6, [r7, #8]
 8016210:	e78d      	b.n	801612e <__kernel_rem_pio2+0x42e>
 8016212:	bf00      	nop
 8016214:	f3af 8000 	nop.w
 8016218:	00000000 	.word	0x00000000
 801621c:	41700000 	.word	0x41700000
 8016220:	00000000 	.word	0x00000000
 8016224:	3e700000 	.word	0x3e700000
	...

08016230 <__kernel_sin>:
 8016230:	ee10 3a90 	vmov	r3, s1
 8016234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016238:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801623c:	da04      	bge.n	8016248 <__kernel_sin+0x18>
 801623e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8016242:	ee17 3a90 	vmov	r3, s15
 8016246:	b35b      	cbz	r3, 80162a0 <__kernel_sin+0x70>
 8016248:	ee20 6b00 	vmul.f64	d6, d0, d0
 801624c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8016250:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80162a8 <__kernel_sin+0x78>
 8016254:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80162b0 <__kernel_sin+0x80>
 8016258:	eea6 4b07 	vfma.f64	d4, d6, d7
 801625c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80162b8 <__kernel_sin+0x88>
 8016260:	eea4 7b06 	vfma.f64	d7, d4, d6
 8016264:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80162c0 <__kernel_sin+0x90>
 8016268:	eea7 4b06 	vfma.f64	d4, d7, d6
 801626c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80162c8 <__kernel_sin+0x98>
 8016270:	eea4 7b06 	vfma.f64	d7, d4, d6
 8016274:	b930      	cbnz	r0, 8016284 <__kernel_sin+0x54>
 8016276:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80162d0 <__kernel_sin+0xa0>
 801627a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801627e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8016282:	4770      	bx	lr
 8016284:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8016288:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801628c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8016290:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8016294:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80162d8 <__kernel_sin+0xa8>
 8016298:	eea5 1b07 	vfma.f64	d1, d5, d7
 801629c:	ee30 0b41 	vsub.f64	d0, d0, d1
 80162a0:	4770      	bx	lr
 80162a2:	bf00      	nop
 80162a4:	f3af 8000 	nop.w
 80162a8:	5acfd57c 	.word	0x5acfd57c
 80162ac:	3de5d93a 	.word	0x3de5d93a
 80162b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80162b4:	be5ae5e6 	.word	0xbe5ae5e6
 80162b8:	57b1fe7d 	.word	0x57b1fe7d
 80162bc:	3ec71de3 	.word	0x3ec71de3
 80162c0:	19c161d5 	.word	0x19c161d5
 80162c4:	bf2a01a0 	.word	0xbf2a01a0
 80162c8:	1110f8a6 	.word	0x1110f8a6
 80162cc:	3f811111 	.word	0x3f811111
 80162d0:	55555549 	.word	0x55555549
 80162d4:	bfc55555 	.word	0xbfc55555
 80162d8:	55555549 	.word	0x55555549
 80162dc:	3fc55555 	.word	0x3fc55555

080162e0 <atan>:
 80162e0:	b538      	push	{r3, r4, r5, lr}
 80162e2:	eeb0 7b40 	vmov.f64	d7, d0
 80162e6:	ee17 5a90 	vmov	r5, s15
 80162ea:	4b73      	ldr	r3, [pc, #460]	; (80164b8 <atan+0x1d8>)
 80162ec:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80162f0:	429c      	cmp	r4, r3
 80162f2:	dd13      	ble.n	801631c <atan+0x3c>
 80162f4:	4b71      	ldr	r3, [pc, #452]	; (80164bc <atan+0x1dc>)
 80162f6:	429c      	cmp	r4, r3
 80162f8:	dc03      	bgt.n	8016302 <atan+0x22>
 80162fa:	d107      	bne.n	801630c <atan+0x2c>
 80162fc:	ee10 3a10 	vmov	r3, s0
 8016300:	b123      	cbz	r3, 801630c <atan+0x2c>
 8016302:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016306:	eeb0 0b47 	vmov.f64	d0, d7
 801630a:	bd38      	pop	{r3, r4, r5, pc}
 801630c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8016448 <atan+0x168>
 8016310:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 8016450 <atan+0x170>
 8016314:	2d00      	cmp	r5, #0
 8016316:	fe36 7b07 	vselgt.f64	d7, d6, d7
 801631a:	e7f4      	b.n	8016306 <atan+0x26>
 801631c:	4b68      	ldr	r3, [pc, #416]	; (80164c0 <atan+0x1e0>)
 801631e:	429c      	cmp	r4, r3
 8016320:	dc11      	bgt.n	8016346 <atan+0x66>
 8016322:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016326:	429c      	cmp	r4, r3
 8016328:	dc0a      	bgt.n	8016340 <atan+0x60>
 801632a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 801632e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8016458 <atan+0x178>
 8016332:	ee30 6b06 	vadd.f64	d6, d0, d6
 8016336:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801633a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801633e:	dce2      	bgt.n	8016306 <atan+0x26>
 8016340:	f04f 33ff 	mov.w	r3, #4294967295
 8016344:	e013      	b.n	801636e <atan+0x8e>
 8016346:	f000 f8c5 	bl	80164d4 <fabs>
 801634a:	4b5e      	ldr	r3, [pc, #376]	; (80164c4 <atan+0x1e4>)
 801634c:	429c      	cmp	r4, r3
 801634e:	dc4f      	bgt.n	80163f0 <atan+0x110>
 8016350:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016354:	429c      	cmp	r4, r3
 8016356:	dc41      	bgt.n	80163dc <atan+0xfc>
 8016358:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801635c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016360:	2300      	movs	r3, #0
 8016362:	eea0 6b07 	vfma.f64	d6, d0, d7
 8016366:	ee30 0b07 	vadd.f64	d0, d0, d7
 801636a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801636e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016460 <atan+0x180>
 8016372:	ee27 4b07 	vmul.f64	d4, d7, d7
 8016376:	ee24 5b04 	vmul.f64	d5, d4, d4
 801637a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016468 <atan+0x188>
 801637e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8016382:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8016470 <atan+0x190>
 8016386:	eea3 6b05 	vfma.f64	d6, d3, d5
 801638a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016478 <atan+0x198>
 801638e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8016392:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8016480 <atan+0x1a0>
 8016396:	eea3 6b05 	vfma.f64	d6, d3, d5
 801639a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016488 <atan+0x1a8>
 801639e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8016490 <atan+0x1b0>
 80163a2:	eea6 3b05 	vfma.f64	d3, d6, d5
 80163a6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016498 <atan+0x1b8>
 80163aa:	eea5 2b06 	vfma.f64	d2, d5, d6
 80163ae:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80164a0 <atan+0x1c0>
 80163b2:	eea2 6b05 	vfma.f64	d6, d2, d5
 80163b6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80164a8 <atan+0x1c8>
 80163ba:	eea6 2b05 	vfma.f64	d2, d6, d5
 80163be:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80164b0 <atan+0x1d0>
 80163c2:	1c5a      	adds	r2, r3, #1
 80163c4:	eea2 6b05 	vfma.f64	d6, d2, d5
 80163c8:	ee26 6b05 	vmul.f64	d6, d6, d5
 80163cc:	eea3 6b04 	vfma.f64	d6, d3, d4
 80163d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80163d4:	d121      	bne.n	801641a <atan+0x13a>
 80163d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80163da:	e794      	b.n	8016306 <atan+0x26>
 80163dc:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80163e0:	2301      	movs	r3, #1
 80163e2:	ee30 6b47 	vsub.f64	d6, d0, d7
 80163e6:	ee30 0b07 	vadd.f64	d0, d0, d7
 80163ea:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80163ee:	e7be      	b.n	801636e <atan+0x8e>
 80163f0:	4b35      	ldr	r3, [pc, #212]	; (80164c8 <atan+0x1e8>)
 80163f2:	429c      	cmp	r4, r3
 80163f4:	da0b      	bge.n	801640e <atan+0x12e>
 80163f6:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80163fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80163fe:	ee30 5b47 	vsub.f64	d5, d0, d7
 8016402:	eea0 6b07 	vfma.f64	d6, d0, d7
 8016406:	2302      	movs	r3, #2
 8016408:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801640c:	e7af      	b.n	801636e <atan+0x8e>
 801640e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016412:	2303      	movs	r3, #3
 8016414:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016418:	e7a9      	b.n	801636e <atan+0x8e>
 801641a:	4a2c      	ldr	r2, [pc, #176]	; (80164cc <atan+0x1ec>)
 801641c:	492c      	ldr	r1, [pc, #176]	; (80164d0 <atan+0x1f0>)
 801641e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016422:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8016426:	ed93 5b00 	vldr	d5, [r3]
 801642a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801642e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8016432:	ed92 6b00 	vldr	d6, [r2]
 8016436:	2d00      	cmp	r5, #0
 8016438:	ee36 7b47 	vsub.f64	d7, d6, d7
 801643c:	bfb8      	it	lt
 801643e:	eeb1 7b47 	vneglt.f64	d7, d7
 8016442:	e760      	b.n	8016306 <atan+0x26>
 8016444:	f3af 8000 	nop.w
 8016448:	54442d18 	.word	0x54442d18
 801644c:	3ff921fb 	.word	0x3ff921fb
 8016450:	54442d18 	.word	0x54442d18
 8016454:	bff921fb 	.word	0xbff921fb
 8016458:	8800759c 	.word	0x8800759c
 801645c:	7e37e43c 	.word	0x7e37e43c
 8016460:	e322da11 	.word	0xe322da11
 8016464:	3f90ad3a 	.word	0x3f90ad3a
 8016468:	24760deb 	.word	0x24760deb
 801646c:	3fa97b4b 	.word	0x3fa97b4b
 8016470:	a0d03d51 	.word	0xa0d03d51
 8016474:	3fb10d66 	.word	0x3fb10d66
 8016478:	c54c206e 	.word	0xc54c206e
 801647c:	3fb745cd 	.word	0x3fb745cd
 8016480:	920083ff 	.word	0x920083ff
 8016484:	3fc24924 	.word	0x3fc24924
 8016488:	5555550d 	.word	0x5555550d
 801648c:	3fd55555 	.word	0x3fd55555
 8016490:	52defd9a 	.word	0x52defd9a
 8016494:	bfadde2d 	.word	0xbfadde2d
 8016498:	2c6a6c2f 	.word	0x2c6a6c2f
 801649c:	bfa2b444 	.word	0xbfa2b444
 80164a0:	af749a6d 	.word	0xaf749a6d
 80164a4:	bfb3b0f2 	.word	0xbfb3b0f2
 80164a8:	fe231671 	.word	0xfe231671
 80164ac:	bfbc71c6 	.word	0xbfbc71c6
 80164b0:	9998ebc4 	.word	0x9998ebc4
 80164b4:	bfc99999 	.word	0xbfc99999
 80164b8:	440fffff 	.word	0x440fffff
 80164bc:	7ff00000 	.word	0x7ff00000
 80164c0:	3fdbffff 	.word	0x3fdbffff
 80164c4:	3ff2ffff 	.word	0x3ff2ffff
 80164c8:	40038000 	.word	0x40038000
 80164cc:	08016980 	.word	0x08016980
 80164d0:	080169a0 	.word	0x080169a0

080164d4 <fabs>:
 80164d4:	ec51 0b10 	vmov	r0, r1, d0
 80164d8:	ee10 2a10 	vmov	r2, s0
 80164dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80164e0:	ec43 2b10 	vmov	d0, r2, r3
 80164e4:	4770      	bx	lr
	...

080164e8 <floor>:
 80164e8:	ee10 1a90 	vmov	r1, s1
 80164ec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80164f0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80164f4:	2b13      	cmp	r3, #19
 80164f6:	b530      	push	{r4, r5, lr}
 80164f8:	ee10 0a10 	vmov	r0, s0
 80164fc:	ee10 5a10 	vmov	r5, s0
 8016500:	dc31      	bgt.n	8016566 <floor+0x7e>
 8016502:	2b00      	cmp	r3, #0
 8016504:	da15      	bge.n	8016532 <floor+0x4a>
 8016506:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80165c0 <floor+0xd8>
 801650a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801650e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016516:	dd07      	ble.n	8016528 <floor+0x40>
 8016518:	2900      	cmp	r1, #0
 801651a:	da4e      	bge.n	80165ba <floor+0xd2>
 801651c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016520:	4318      	orrs	r0, r3
 8016522:	d001      	beq.n	8016528 <floor+0x40>
 8016524:	4928      	ldr	r1, [pc, #160]	; (80165c8 <floor+0xe0>)
 8016526:	2000      	movs	r0, #0
 8016528:	460b      	mov	r3, r1
 801652a:	4602      	mov	r2, r0
 801652c:	ec43 2b10 	vmov	d0, r2, r3
 8016530:	e020      	b.n	8016574 <floor+0x8c>
 8016532:	4a26      	ldr	r2, [pc, #152]	; (80165cc <floor+0xe4>)
 8016534:	411a      	asrs	r2, r3
 8016536:	ea01 0402 	and.w	r4, r1, r2
 801653a:	4304      	orrs	r4, r0
 801653c:	d01a      	beq.n	8016574 <floor+0x8c>
 801653e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80165c0 <floor+0xd8>
 8016542:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016546:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801654a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801654e:	ddeb      	ble.n	8016528 <floor+0x40>
 8016550:	2900      	cmp	r1, #0
 8016552:	bfbe      	ittt	lt
 8016554:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8016558:	fa40 f303 	asrlt.w	r3, r0, r3
 801655c:	18c9      	addlt	r1, r1, r3
 801655e:	ea21 0102 	bic.w	r1, r1, r2
 8016562:	2000      	movs	r0, #0
 8016564:	e7e0      	b.n	8016528 <floor+0x40>
 8016566:	2b33      	cmp	r3, #51	; 0x33
 8016568:	dd05      	ble.n	8016576 <floor+0x8e>
 801656a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801656e:	d101      	bne.n	8016574 <floor+0x8c>
 8016570:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016574:	bd30      	pop	{r4, r5, pc}
 8016576:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801657a:	f04f 32ff 	mov.w	r2, #4294967295
 801657e:	40e2      	lsrs	r2, r4
 8016580:	4202      	tst	r2, r0
 8016582:	d0f7      	beq.n	8016574 <floor+0x8c>
 8016584:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80165c0 <floor+0xd8>
 8016588:	ee30 0b07 	vadd.f64	d0, d0, d7
 801658c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016594:	ddc8      	ble.n	8016528 <floor+0x40>
 8016596:	2900      	cmp	r1, #0
 8016598:	da02      	bge.n	80165a0 <floor+0xb8>
 801659a:	2b14      	cmp	r3, #20
 801659c:	d103      	bne.n	80165a6 <floor+0xbe>
 801659e:	3101      	adds	r1, #1
 80165a0:	ea20 0002 	bic.w	r0, r0, r2
 80165a4:	e7c0      	b.n	8016528 <floor+0x40>
 80165a6:	2401      	movs	r4, #1
 80165a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80165ac:	fa04 f303 	lsl.w	r3, r4, r3
 80165b0:	4418      	add	r0, r3
 80165b2:	42a8      	cmp	r0, r5
 80165b4:	bf38      	it	cc
 80165b6:	1909      	addcc	r1, r1, r4
 80165b8:	e7f2      	b.n	80165a0 <floor+0xb8>
 80165ba:	2000      	movs	r0, #0
 80165bc:	4601      	mov	r1, r0
 80165be:	e7b3      	b.n	8016528 <floor+0x40>
 80165c0:	8800759c 	.word	0x8800759c
 80165c4:	7e37e43c 	.word	0x7e37e43c
 80165c8:	bff00000 	.word	0xbff00000
 80165cc:	000fffff 	.word	0x000fffff

080165d0 <scalbn>:
 80165d0:	ee10 1a90 	vmov	r1, s1
 80165d4:	b510      	push	{r4, lr}
 80165d6:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80165da:	b98c      	cbnz	r4, 8016600 <scalbn+0x30>
 80165dc:	ee10 3a10 	vmov	r3, s0
 80165e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80165e4:	430b      	orrs	r3, r1
 80165e6:	d011      	beq.n	801660c <scalbn+0x3c>
 80165e8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80166b0 <scalbn+0xe0>
 80165ec:	4b3c      	ldr	r3, [pc, #240]	; (80166e0 <scalbn+0x110>)
 80165ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 80165f2:	4298      	cmp	r0, r3
 80165f4:	da0b      	bge.n	801660e <scalbn+0x3e>
 80165f6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80166b8 <scalbn+0xe8>
 80165fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80165fe:	e005      	b.n	801660c <scalbn+0x3c>
 8016600:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8016604:	429c      	cmp	r4, r3
 8016606:	d107      	bne.n	8016618 <scalbn+0x48>
 8016608:	ee30 0b00 	vadd.f64	d0, d0, d0
 801660c:	bd10      	pop	{r4, pc}
 801660e:	ee10 1a90 	vmov	r1, s1
 8016612:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8016616:	3c36      	subs	r4, #54	; 0x36
 8016618:	4404      	add	r4, r0
 801661a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801661e:	429c      	cmp	r4, r3
 8016620:	dd0d      	ble.n	801663e <scalbn+0x6e>
 8016622:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80166c0 <scalbn+0xf0>
 8016626:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80166c8 <scalbn+0xf8>
 801662a:	eeb0 6b47 	vmov.f64	d6, d7
 801662e:	ee10 3a90 	vmov	r3, s1
 8016632:	2b00      	cmp	r3, #0
 8016634:	fe27 7b05 	vselge.f64	d7, d7, d5
 8016638:	ee27 0b06 	vmul.f64	d0, d7, d6
 801663c:	e7e6      	b.n	801660c <scalbn+0x3c>
 801663e:	2c00      	cmp	r4, #0
 8016640:	dd0a      	ble.n	8016658 <scalbn+0x88>
 8016642:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016646:	ec53 2b10 	vmov	r2, r3, d0
 801664a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801664e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016652:	ec43 2b10 	vmov	d0, r2, r3
 8016656:	e7d9      	b.n	801660c <scalbn+0x3c>
 8016658:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801665c:	da19      	bge.n	8016692 <scalbn+0xc2>
 801665e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016662:	4298      	cmp	r0, r3
 8016664:	ee10 3a90 	vmov	r3, s1
 8016668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801666c:	dd09      	ble.n	8016682 <scalbn+0xb2>
 801666e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80166c0 <scalbn+0xf0>
 8016672:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80166c8 <scalbn+0xf8>
 8016676:	eeb0 7b40 	vmov.f64	d7, d0
 801667a:	2b00      	cmp	r3, #0
 801667c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8016680:	e7bb      	b.n	80165fa <scalbn+0x2a>
 8016682:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80166b8 <scalbn+0xe8>
 8016686:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80166d0 <scalbn+0x100>
 801668a:	eeb0 7b40 	vmov.f64	d7, d0
 801668e:	2b00      	cmp	r3, #0
 8016690:	e7f4      	b.n	801667c <scalbn+0xac>
 8016692:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016696:	ec53 2b10 	vmov	r2, r3, d0
 801669a:	3436      	adds	r4, #54	; 0x36
 801669c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80166a0:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80166a4:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80166d8 <scalbn+0x108>
 80166a8:	ec43 2b10 	vmov	d0, r2, r3
 80166ac:	e7a5      	b.n	80165fa <scalbn+0x2a>
 80166ae:	bf00      	nop
 80166b0:	00000000 	.word	0x00000000
 80166b4:	43500000 	.word	0x43500000
 80166b8:	c2f8f359 	.word	0xc2f8f359
 80166bc:	01a56e1f 	.word	0x01a56e1f
 80166c0:	8800759c 	.word	0x8800759c
 80166c4:	7e37e43c 	.word	0x7e37e43c
 80166c8:	8800759c 	.word	0x8800759c
 80166cc:	fe37e43c 	.word	0xfe37e43c
 80166d0:	c2f8f359 	.word	0xc2f8f359
 80166d4:	81a56e1f 	.word	0x81a56e1f
 80166d8:	00000000 	.word	0x00000000
 80166dc:	3c900000 	.word	0x3c900000
 80166e0:	ffff3cb0 	.word	0xffff3cb0

080166e4 <_init>:
 80166e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166e6:	bf00      	nop
 80166e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166ea:	bc08      	pop	{r3}
 80166ec:	469e      	mov	lr, r3
 80166ee:	4770      	bx	lr

080166f0 <_fini>:
 80166f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166f2:	bf00      	nop
 80166f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166f6:	bc08      	pop	{r3}
 80166f8:	469e      	mov	lr, r3
 80166fa:	4770      	bx	lr
