
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000158d4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08015ba8  08015ba8  00025ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015dd0  08015dd0  00025dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015dd8  08015dd8  00025dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015ddc  08015ddc  00025ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08015de0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        00000034  20000010  08015df0  00030010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000f2c  20000044  08015e24  00030044  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000f70  08015e24  00030f70  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002b989  00000000  00000000  00030072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a04  00000000  00000000  0005b9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d60  00000000  00000000  00060400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001b68  00000000  00000000  00062160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039747  00000000  00000000  00063cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002bd52  00000000  00000000  0009d40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cb4e  00000000  00000000  000c9161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00235caf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007ecc  00000000  00000000  00235d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000044 	.word	0x20000044
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015b8c 	.word	0x08015b8c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000048 	.word	0x20000048
 800030c:	08015b8c 	.word	0x08015b8c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

float EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8e7 	bl	80007f8 <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	89db      	ldrh	r3, [r3, #14]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000654 <EncPulse2Rad_Read+0x40>
 800063a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	edd3 7a07 	vldr	s15, [r3, #28]
 8000644:	ee77 7a67 	vsub.f32	s15, s14, s15
//	return (Enc->Position * 0.000383495f);
}
 8000648:	eeb0 0a67 	vmov.f32	s0, s15
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	39c90fd4 	.word	0x39c90fd4

08000658 <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,float offset) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6178      	str	r0, [r7, #20]
 8000660:	6139      	str	r1, [r7, #16]
 8000662:	60fa      	str	r2, [r7, #12]
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	ed87 0a01 	vstr	s0, [r7, #4]
	dev->hspiHandle = hspiHandle;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	693a      	ldr	r2, [r7, #16]
 800066e:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	68ba      	ldr	r2, [r7, #8]
 8000674:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	8c3a      	ldrh	r2, [r7, #32]
 8000680:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 8000682:	8c3b      	ldrh	r3, [r7, #32]
 8000684:	2201      	movs	r2, #1
 8000686:	4619      	mov	r1, r3
 8000688:	68f8      	ldr	r0, [r7, #12]
 800068a:	f00a f98d 	bl	800a9a8 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2200      	movs	r2, #0
 8000692:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2200      	movs	r2, #0
 8000698:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2200      	movs	r2, #0
 800069e:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2200      	movs	r2, #0
 80006a4:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2200      	movs	r2, #0
 80006aa:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2200      	movs	r2, #0
 80006b0:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2200      	movs	r2, #0
 80006b6:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2200      	movs	r2, #0
 80006bc:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	2200      	movs	r2, #0
 80006c2:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2200      	movs	r2, #0
 80006c8:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80006ce:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80006e4 <AS5047U_init+0x8c>
 80006d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	39c90fd4 	.word	0x39c90fd4

080006e8 <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	460b      	mov	r3, r1
 80006f2:	807b      	strh	r3, [r7, #2]
 80006f4:	4613      	mov	r3, r2
 80006f6:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 80006f8:	4b3e      	ldr	r3, [pc, #248]	; (80007f4 <AS5047U_Write+0x10c>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	723b      	strb	r3, [r7, #8]
 80006fe:	f107 0309 	add.w	r3, r7, #9
 8000702:	2200      	movs	r2, #0
 8000704:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	b29b      	uxth	r3, r3
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000712:	b2db      	uxtb	r3, r3
 8000714:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	f107 0108 	add.w	r1, r7, #8
 8000724:	2202      	movs	r2, #2
 8000726:	4618      	mov	r0, r3
 8000728:	f007 fbca 	bl	8007ec0 <HAL_CRC_Calculate>
 800072c:	4603      	mov	r3, r0
 800072e:	b2db      	uxtb	r3, r3
 8000730:	43db      	mvns	r3, r3
 8000732:	b2db      	uxtb	r3, r3
 8000734:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	6898      	ldr	r0, [r3, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	899b      	ldrh	r3, [r3, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	f00a f931 	bl	800a9a8 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 8000746:	2300      	movs	r3, #0
 8000748:	81fb      	strh	r3, [r7, #14]
 800074a:	e002      	b.n	8000752 <AS5047U_Write+0x6a>
 800074c:	89fb      	ldrh	r3, [r7, #14]
 800074e:	3301      	adds	r3, #1
 8000750:	81fb      	strh	r3, [r7, #14]
 8000752:	89fb      	ldrh	r3, [r7, #14]
 8000754:	f240 2226 	movw	r2, #550	; 0x226
 8000758:	4293      	cmp	r3, r2
 800075a:	d9f7      	bls.n	800074c <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6818      	ldr	r0, [r3, #0]
 8000760:	f107 0108 	add.w	r1, r7, #8
 8000764:	2301      	movs	r3, #1
 8000766:	2203      	movs	r2, #3
 8000768:	f00f fa0e 	bl	800fb88 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6898      	ldr	r0, [r3, #8]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	899b      	ldrh	r3, [r3, #12]
 8000774:	2201      	movs	r2, #1
 8000776:	4619      	mov	r1, r3
 8000778:	f00a f916 	bl	800a9a8 <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 800077c:	883b      	ldrh	r3, [r7, #0]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2db      	uxtb	r3, r3
 8000784:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 8000786:	883b      	ldrh	r3, [r7, #0]
 8000788:	b2db      	uxtb	r3, r3
 800078a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f107 0108 	add.w	r1, r7, #8
 8000794:	2202      	movs	r2, #2
 8000796:	4618      	mov	r0, r3
 8000798:	f007 fb92 	bl	8007ec0 <HAL_CRC_Calculate>
 800079c:	4603      	mov	r3, r0
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	43db      	mvns	r3, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6898      	ldr	r0, [r3, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	899b      	ldrh	r3, [r3, #12]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	f00a f8f9 	bl	800a9a8 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007b6:	2300      	movs	r3, #0
 80007b8:	81bb      	strh	r3, [r7, #12]
 80007ba:	e002      	b.n	80007c2 <AS5047U_Write+0xda>
 80007bc:	89bb      	ldrh	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	81bb      	strh	r3, [r7, #12]
 80007c2:	89bb      	ldrh	r3, [r7, #12]
 80007c4:	f240 2226 	movw	r2, #550	; 0x226
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d9f7      	bls.n	80007bc <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	f107 0108 	add.w	r1, r7, #8
 80007d4:	2301      	movs	r3, #1
 80007d6:	2203      	movs	r2, #3
 80007d8:	f00f f9d6 	bl	800fb88 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6898      	ldr	r0, [r3, #8]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	899b      	ldrh	r3, [r3, #12]
 80007e4:	2201      	movs	r2, #1
 80007e6:	4619      	mov	r1, r3
 80007e8:	f00a f8de 	bl	800a9a8 <HAL_GPIO_WritePin>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08015ba8 	.word	0x08015ba8

080007f8 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 8000804:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000808:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 800080a:	2300      	movs	r3, #0
 800080c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 800080e:	2300      	movs	r3, #0
 8000810:	82fb      	strh	r3, [r7, #22]
 8000812:	e002      	b.n	800081a <AS5047U_Position_Highspeed_Read+0x22>
 8000814:	8afb      	ldrh	r3, [r7, #22]
 8000816:	3301      	adds	r3, #1
 8000818:	82fb      	strh	r3, [r7, #22]
 800081a:	8afb      	ldrh	r3, [r7, #22]
 800081c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000820:	d9f8      	bls.n	8000814 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6898      	ldr	r0, [r3, #8]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	899b      	ldrh	r3, [r3, #12]
 800082a:	2200      	movs	r2, #0
 800082c:	4619      	mov	r1, r3
 800082e:	f00a f8bb 	bl	800a9a8 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	f107 0110 	add.w	r1, r7, #16
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2202      	movs	r2, #2
 800083e:	f00f f9a3 	bl	800fb88 <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6898      	ldr	r0, [r3, #8]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	899b      	ldrh	r3, [r3, #12]
 800084a:	2201      	movs	r2, #1
 800084c:	4619      	mov	r1, r3
 800084e:	f00a f8ab 	bl	800a9a8 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000852:	2300      	movs	r3, #0
 8000854:	82bb      	strh	r3, [r7, #20]
 8000856:	e002      	b.n	800085e <AS5047U_Position_Highspeed_Read+0x66>
 8000858:	8abb      	ldrh	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	82bb      	strh	r3, [r7, #20]
 800085e:	8abb      	ldrh	r3, [r7, #20]
 8000860:	f240 2226 	movw	r2, #550	; 0x226
 8000864:	4293      	cmp	r3, r2
 8000866:	d9f7      	bls.n	8000858 <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6898      	ldr	r0, [r3, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	899b      	ldrh	r3, [r3, #12]
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	f00a f898 	bl	800a9a8 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	f107 010c 	add.w	r1, r7, #12
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	2202      	movs	r2, #2
 8000884:	f00f fb72 	bl	800ff6c <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6898      	ldr	r0, [r3, #8]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	899b      	ldrh	r3, [r3, #12]
 8000890:	2201      	movs	r2, #1
 8000892:	4619      	mov	r1, r3
 8000894:	f00a f888 	bl	800a9a8 <HAL_GPIO_WritePin>
	if (dir == 1){
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d111      	bne.n	80008c2 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 800089e:	7b3b      	ldrb	r3, [r7, #12]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21b      	sxth	r3, r3
 80008a4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	7b7b      	ldrb	r3, [r7, #13]
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b21b      	sxth	r3, r3
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008b8:	4053      	eors	r3, r2
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	81da      	strh	r2, [r3, #14]
 80008c0:	e00c      	b.n	80008dc <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008c2:	7b3b      	ldrb	r3, [r7, #12]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	7b7b      	ldrb	r3, [r7, #13]
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	89db      	ldrh	r3, [r3, #14]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <TPM75_init>:
 *      Author: thansak Pongpraket
 */

#include <TPM75.h>

void TPM75_init(TPM75 *dev, I2C_HandleTypeDef *i2cHandle, uint8_t A2, uint8_t A1, uint8_t A0) {
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	460b      	mov	r3, r1
 80008f8:	71fb      	strb	r3, [r7, #7]
 80008fa:	4613      	mov	r3, r2
 80008fc:	71bb      	strb	r3, [r7, #6]
	dev->address = 0x92;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	2292      	movs	r2, #146	; 0x92
 8000902:	711a      	strb	r2, [r3, #4]
//	dev->address = 0x92;
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2224      	movs	r2, #36	; 0x24
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f014 fae3 	bl	8014ef4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800092e:	4b33      	ldr	r3, [pc, #204]	; (80009fc <MX_ADC1_Init+0xec>)
 8000930:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <MX_ADC1_Init+0xf0>)
 8000932:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000934:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_ADC1_Init+0xec>)
 8000936:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800093a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800093c:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <MX_ADC1_Init+0xec>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_ADC1_Init+0xec>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <MX_ADC1_Init+0xec>)
 800094a:	2204      	movs	r2, #4
 800094c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_ADC1_Init+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000954:	4b29      	ldr	r3, [pc, #164]	; (80009fc <MX_ADC1_Init+0xec>)
 8000956:	2200      	movs	r2, #0
 8000958:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_ADC1_Init+0xec>)
 800095c:	2201      	movs	r2, #1
 800095e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000960:	4b26      	ldr	r3, [pc, #152]	; (80009fc <MX_ADC1_Init+0xec>)
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_ADC1_Init+0xec>)
 800096a:	2200      	movs	r2, #0
 800096c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800096e:	4b23      	ldr	r3, [pc, #140]	; (80009fc <MX_ADC1_Init+0xec>)
 8000970:	2200      	movs	r2, #0
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_ADC1_Init+0xec>)
 8000976:	2200      	movs	r2, #0
 8000978:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800097a:	4b20      	ldr	r3, [pc, #128]	; (80009fc <MX_ADC1_Init+0xec>)
 800097c:	2200      	movs	r2, #0
 800097e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000980:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_ADC1_Init+0xec>)
 8000982:	2200      	movs	r2, #0
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000986:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <MX_ADC1_Init+0xec>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098e:	481b      	ldr	r0, [pc, #108]	; (80009fc <MX_ADC1_Init+0xec>)
 8000990:	f005 faaa 	bl	8005ee8 <HAL_ADC_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800099a:	f003 f9b3 	bl	8003d04 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 800099e:	2305      	movs	r3, #5
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4619      	mov	r1, r3
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <MX_ADC1_Init+0xec>)
 80009b2:	f007 f82f 	bl	8007a14 <HAL_ADCEx_MultiModeConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80009bc:	f003 f9a2 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_ADC1_Init+0xf4>)
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c4:	2306      	movs	r3, #6
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d2:	2304      	movs	r3, #4
 80009d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e0:	463b      	mov	r3, r7
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_ADC1_Init+0xec>)
 80009e6:	f006 f823 	bl	8006a30 <HAL_ADC_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009f0:	f003 f988 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000060 	.word	0x20000060
 8000a00:	40022000 	.word	0x40022000
 8000a04:	21800100 	.word	0x21800100

08000a08 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2224      	movs	r2, #36	; 0x24
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f014 fa6d 	bl	8014ef4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a1a:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a1c:	4a28      	ldr	r2, [pc, #160]	; (8000ac0 <MX_ADC2_Init+0xb8>)
 8000a1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a22:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a34:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a3a:	4b20      	ldr	r3, [pc, #128]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a40:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a6e:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000a70:	f005 fa3a 	bl	8005ee8 <HAL_ADC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000a7a:	f003 f943 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_ADC2_Init+0xbc>)
 8000a80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a82:	2306      	movs	r3, #6
 8000a84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a8a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a8e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a90:	2304      	movs	r3, #4
 8000a92:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_ADC2_Init+0xb4>)
 8000aa4:	f005 ffc4 	bl	8006a30 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000aae:	f003 f929 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200000d0 	.word	0x200000d0
 8000ac0:	40022100 	.word	0x40022100
 8000ac4:	21800100 	.word	0x21800100

08000ac8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2224      	movs	r2, #36	; 0x24
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f014 fa0d 	bl	8014ef4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000adc:	4a32      	ldr	r2, [pc, #200]	; (8000ba8 <MX_ADC3_Init+0xe0>)
 8000ade:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000ae8:	2208      	movs	r2, #8
 8000aea:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b32:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b3e:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000b44:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b4c:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b4e:	f005 f9cb 	bl	8005ee8 <HAL_ADC_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000b58:	f003 f8d4 	bl	8003d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_ADC3_Init+0xe4>)
 8000b5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b60:	2306      	movs	r3, #6
 8000b62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000b64:	2306      	movs	r3, #6
 8000b66:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b68:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_ADC3_Init+0xdc>)
 8000b8c:	f005 ff50 	bl	8006a30 <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000b96:	f003 f8b5 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000140 	.word	0x20000140
 8000ba8:	58026000 	.word	0x58026000
 8000bac:	c7520000 	.word	0xc7520000

08000bb0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a47      	ldr	r2, [pc, #284]	; (8000cec <HAL_ADC_MspInit+0x13c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d133      	bne.n	8000c3a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	4a45      	ldr	r2, [pc, #276]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000bda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000bdc:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d10e      	bne.n	8000c02 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000be4:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bea:	4a42      	ldr	r2, [pc, #264]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000bec:	f043 0320 	orr.w	r3, r3, #32
 8000bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bf4:	4b3f      	ldr	r3, [pc, #252]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bfa:	f003 0320 	and.w	r3, r3, #32
 8000bfe:	61bb      	str	r3, [r7, #24]
 8000c00:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a3a      	ldr	r2, [pc, #232]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b38      	ldr	r3, [pc, #224]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c20:	2320      	movs	r3, #32
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c24:	2303      	movs	r3, #3
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4831      	ldr	r0, [pc, #196]	; (8000cf8 <HAL_ADC_MspInit+0x148>)
 8000c34:	f009 fd10 	bl	800a658 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000c38:	e054      	b.n	8000ce4 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a2f      	ldr	r2, [pc, #188]	; (8000cfc <HAL_ADC_MspInit+0x14c>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d133      	bne.n	8000cac <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c44:	4b2a      	ldr	r3, [pc, #168]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000c4c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c4e:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <HAL_ADC_MspInit+0x140>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d10e      	bne.n	8000c74 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5c:	4a25      	ldr	r2, [pc, #148]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c66:	4b23      	ldr	r3, [pc, #140]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c92:	2320      	movs	r3, #32
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <HAL_ADC_MspInit+0x148>)
 8000ca6:	f009 fcd7 	bl	800a658 <HAL_GPIO_Init>
}
 8000caa:	e01b      	b.n	8000ce4 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC3)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <HAL_ADC_MspInit+0x150>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d116      	bne.n	8000ce4 <HAL_ADC_MspInit+0x134>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_ADC_MspInit+0x144>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	207f      	movs	r0, #127	; 0x7f
 8000cda:	f007 f858 	bl	8007d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000cde:	207f      	movs	r0, #127	; 0x7f
 8000ce0:	f007 f86f 	bl	8007dc2 <HAL_NVIC_EnableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40022000 	.word	0x40022000
 8000cf0:	200001b0 	.word	0x200001b0
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58020800 	.word	0x58020800
 8000cfc:	40022100 	.word	0x40022100
 8000d00:	58026000 	.word	0x58026000

08000d04 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	68ba      	ldr	r2, [r7, #8]
 8000d16:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	8b3a      	ldrh	r2, [r7, #24]
 8000d28:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	b29a      	uxth	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d38:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	4619      	mov	r1, r3
 8000d44:	4610      	mov	r0, r2
 8000d46:	f00f fef3 	bl	8010b30 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d54:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d60:	bf00      	nop
 8000d62:	3710      	adds	r7, #16
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <Step_Driver>:


void Step_Driver(SteperParameter *step, float f_driver) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	ed87 0a00 	vstr	s0, [r7]
	float abs_f_driver = fabs(f_driver);
 8000d74:	edd7 7a00 	vldr	s15, [r7]
 8000d78:	eef0 7ae7 	vabs.f32	s15, s15
 8000d7c:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t reg_out;
	if (abs_f_driver <= 5) {
 8000d80:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d84:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000d88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d90:	d80e      	bhi.n	8000db0 <Step_Driver+0x48>
		reg_out = 20000;
 8000d92:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000d96:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = 20000;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2200      	movs	r2, #0
 8000dac:	635a      	str	r2, [r3, #52]	; 0x34
 8000dae:	e033      	b.n	8000e18 <Step_Driver+0xb0>
	} else if (abs_f_driver < 25) {
 8000db0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc0:	d50f      	bpl.n	8000de2 <Step_Driver+0x7a>
		reg_out = 20000;
 8000dc2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000dc6:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	897a      	ldrh	r2, [r7, #10]
 8000dd0:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000dd2:	897b      	ldrh	r3, [r7, #10]
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
 8000de0:	e01a      	b.n	8000e18 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	89db      	ldrh	r3, [r3, #14]
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000dee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dfa:	ee17 3a90 	vmov	r3, s15
 8000dfe:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	897a      	ldrh	r2, [r7, #10]
 8000e08:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000e0a:	897b      	ldrh	r3, [r7, #10]
 8000e0c:	085b      	lsrs	r3, r3, #1
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000e18:	edd7 7a00 	vldr	s15, [r7]
 8000e1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e24:	db09      	blt.n	8000e3a <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6898      	ldr	r0, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	8999      	ldrh	r1, [r3, #12]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	7c1b      	ldrb	r3, [r3, #16]
 8000e32:	461a      	mov	r2, r3
 8000e34:	f009 fdb8 	bl	800a9a8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000e38:	e00b      	b.n	8000e52 <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6898      	ldr	r0, [r3, #8]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	8999      	ldrh	r1, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7c1b      	ldrb	r3, [r3, #16]
 8000e46:	f083 0301 	eor.w	r3, r3, #1
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	f009 fdab 	bl	800a9a8 <HAL_GPIO_WritePin>
}
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <Traj_Coeff_Cal>:
	uint16_t Pulse_in  =  (uint16_t)(((((int16_t)Deg)+90)*5.55555f) + 999);
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Deg);
}

void Traj_Coeff_Cal(TrajParameter *Traj, float T, float Pos_Final,
		float Pos_Now, float Vel_Now) {
 8000e5a:	b480      	push	{r7}
 8000e5c:	b08d      	sub	sp, #52	; 0x34
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6178      	str	r0, [r7, #20]
 8000e62:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e66:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e6a:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e6e:	edc7 1a01 	vstr	s3, [r7, #4]
	Traj->T = T;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	619a      	str	r2, [r3, #24]
	float T_P2 = T * T;
 8000e78:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000e80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float T_P3 = T_P2 * T;
 8000e84:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e90:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float T_P4 = T_P3 * T;
 8000e94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000e98:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ea0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float T_P5 = T_P4 * T;
 8000ea4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000ea8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb0:	edc7 7a08 	vstr	s15, [r7, #32]
	float ds = Pos_Now - Pos_Final;
 8000eb4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000eb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ec0:	edc7 7a07 	vstr	s15, [r7, #28]
	float tfv0 = T * Vel_Now;
 8000ec4:	ed97 7a04 	vldr	s14, [r7, #16]
 8000ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed0:	edc7 7a06 	vstr	s15, [r7, #24]
	Traj->TrajCoef[0] = Pos_Now;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	601a      	str	r2, [r3, #0]
	Traj->TrajCoef[1] = Vel_Now;
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	605a      	str	r2, [r3, #4]
	Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0)) / T_P3;
 8000ee0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ee4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000ee8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000eec:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ef0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000ef4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f00:	eef1 6a67 	vneg.f32	s13, s15
 8000f04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	edc3 7a03 	vstr	s15, [r3, #12]
	Traj->TrajCoef[4] = (15 * ds + 8 * tfv0) / T_P4;
 8000f12:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f16:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000f1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f22:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000f26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f2a:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000f2e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000f32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	edc3 7a04 	vstr	s15, [r3, #16]
	Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0)) / T_P5;
 8000f3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f40:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f44:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f4c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000f50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f54:	eef1 6a67 	vneg.f32	s13, s15
 8000f58:	ed97 7a08 	vldr	s14, [r7, #32]
 8000f5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000f66:	bf00      	nop
 8000f68:	3734      	adds	r7, #52	; 0x34
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <TrajFollow>:
	Traj->TrajCoef[4] = ((15 * ds) + (8 * tfv0)) / T_P4;
	Traj->TrajCoef[5] = -(3 * ((2 * ds) + tfv0)) / T_P5;
}

void TrajFollow(TrajParameter *Traj, float traj_t[5], float *Position,
		float *Velocity) {
 8000f72:	b480      	push	{r7}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	edd3 7a00 	vldr	s15, [r3]
 8000f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f96:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	edd3 6a03 	vldr	s13, [r3, #12]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3308      	adds	r3, #8
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	edd3 6a04 	vldr	s13, [r3, #16]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	330c      	adds	r3, #12
 8000fba:	edd3 7a00 	vldr	s15, [r3]
 8000fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fc2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	edd3 6a05 	vldr	s13, [r3, #20]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	3310      	adds	r3, #16
 8000fd0:	edd3 7a00 	vldr	s15, [r3]
 8000fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	edc3 7a00 	vstr	s15, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fe8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ff2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff6:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000ffa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	3304      	adds	r3, #4
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800100a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800100e:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a04 	vldr	s15, [r3, #16]
 8001018:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800101c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001020:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	3308      	adds	r3, #8
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001030:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001034:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	edd3 7a05 	vldr	s15, [r3, #20]
 800103e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001042:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8001046:	ee27 5b05 	vmul.f64	d5, d7, d5
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	330c      	adds	r3, #12
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001056:	ee25 7b07 	vmul.f64	d7, d5, d7
 800105a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800105e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	edc3 7a00 	vstr	s15, [r3]
}
 8001068:	bf00      	nop
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6178      	str	r0, [r7, #20]
 800107c:	ed87 0b02 	vstr	d0, [r7, #8]
 8001080:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 8001084:	ed97 7b02 	vldr	d7, [r7, #8]
 8001088:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	edc3 7a00 	vstr	s15, [r3]
	kalman->R = R; 			// Adjustable
 8001092:	ed97 7b00 	vldr	d7, [r7]
 8001096:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman->x1 = 0.0;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
	kalman->x2 = 0.0;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
	kalman->p11 = 0.05;
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <Kalman_init+0x60>)
 80010b4:	611a      	str	r2, [r3, #16]
	kalman->p12 = 0.05;
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <Kalman_init+0x60>)
 80010ba:	615a      	str	r2, [r3, #20]
	kalman->p21 = 0.05;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <Kalman_init+0x60>)
 80010c0:	619a      	str	r2, [r3, #24]
	kalman->p22 = 0.05;
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <Kalman_init+0x60>)
 80010c6:	61da      	str	r2, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	3d4ccccd 	.word	0x3d4ccccd

080010d8 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 80010d8:	b480      	push	{r7}
 80010da:	b0a5      	sub	sp, #148	; 0x94
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80010ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ee:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80014a0 <KalmanFilter+0x3c8>
 80010f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010f6:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001104:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80014a0 <KalmanFilter+0x3c8>
 8001108:	ee27 7b06 	vmul.f64	d7, d7, d6
 800110c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	edd3 7a00 	vldr	s15, [r3]
 8001116:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800111a:	ed9f 6be3 	vldr	d6, [pc, #908]	; 80014a8 <KalmanFilter+0x3d0>
 800111e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001122:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8001126:	a3e6      	add	r3, pc, #920	; (adr r3, 80014c0 <KalmanFilter+0x3e8>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 8001130:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001134:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001138:	ee27 6b06 	vmul.f64	d6, d7, d6
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001142:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001146:	ee26 7b07 	vmul.f64	d7, d6, d7
 800114a:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	edd3 7a01 	vldr	s15, [r3, #4]
 8001154:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001158:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800115c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	edd3 7a04 	vldr	s15, [r3, #16]
 8001166:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800116e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001172:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001176:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800117a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800117e:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001182:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001186:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800118a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800118e:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8001192:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001196:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	edd3 7a01 	vldr	s15, [r3, #4]
 80011a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011a4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80011a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	edd3 7a02 	vldr	s15, [r3, #8]
 80011b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80011c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011c4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011c8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80011cc:	ed97 7b00 	vldr	d7, [r7]
 80011d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011d8:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 80011dc:	ed97 7b00 	vldr	d7, [r7]
 80011e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011e4:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011f2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011fa:	ed9f 5bad 	vldr	d5, [pc, #692]	; 80014b0 <KalmanFilter+0x3d8>
 80011fe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	edd3 7a03 	vldr	s15, [r3, #12]
 8001208:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800120c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001210:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001214:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8001218:	ed97 7b00 	vldr	d7, [r7]
 800121c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001220:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001224:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8001228:	ed97 7b00 	vldr	d7, [r7]
 800122c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001230:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8001234:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001238:	ed97 7b00 	vldr	d7, [r7]
 800123c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001240:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8001244:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001248:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800124c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	edd3 7a07 	vldr	s15, [r3, #28]
 8001256:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800125a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80014b0 <KalmanFilter+0x3d8>
 800125e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001262:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	edd3 7a00 	vldr	s15, [r3]
 800126c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001270:	ed9f 6b91 	vldr	d6, [pc, #580]	; 80014b8 <KalmanFilter+0x3e0>
 8001274:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001278:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 800127c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8001280:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001284:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001288:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800128c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001290:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	edd3 7a06 	vldr	s15, [r3, #24]
 800129a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800129e:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80012a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012a6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80012b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	edd3 7a06 	vldr	s15, [r3, #24]
 80012c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012c8:	ed9f 5b79 	vldr	d5, [pc, #484]	; 80014b0 <KalmanFilter+0x3d8>
 80012cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80012d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012d4:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 80012d8:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 80012dc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80012e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80012ea:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80012ee:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80012f2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80012f6:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 80014b0 <KalmanFilter+0x3d8>
 80012fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80012fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001302:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	edd3 7a03 	vldr	s15, [r3, #12]
 800130c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	edd3 7a02 	vldr	s15, [r3, #8]
 8001316:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800131a:	ed97 7b00 	vldr	d7, [r7]
 800131e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	edd3 7a03 	vldr	s15, [r3, #12]
 8001328:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800132c:	ed9f 4b60 	vldr	d4, [pc, #384]	; 80014b0 <KalmanFilter+0x3d8>
 8001330:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001334:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001338:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800133c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001340:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001344:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001348:	ee36 7b47 	vsub.f64	d7, d6, d7
 800134c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	edd3 7a01 	vldr	s15, [r3, #4]
 8001356:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001360:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001364:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001368:	ee27 5b05 	vmul.f64	d5, d7, d5
 800136c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001370:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001374:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001378:	ee35 5b07 	vadd.f64	d5, d5, d7
 800137c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001380:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001384:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001388:	ee35 7b07 	vadd.f64	d7, d5, d7
 800138c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001390:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001394:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001398:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	edd3 7a07 	vldr	s15, [r3, #28]
 80013a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013a6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80013aa:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80014b0 <KalmanFilter+0x3d8>
 80013ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013b2:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80013b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013ba:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80013c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	edd3 7a05 	vldr	s15, [r3, #20]
 80013d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d6:	ee37 5b07 	vadd.f64	d5, d7, d7
 80013da:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80013de:	ee35 7b07 	vadd.f64	d7, d5, d7
 80013e2:	ee26 5b07 	vmul.f64	d5, d6, d7
 80013e6:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80013ea:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013ee:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80013f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013fc:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	edd3 7a06 	vldr	s15, [r3, #24]
 8001406:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800140a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800140e:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001412:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001416:	ee26 5b07 	vmul.f64	d5, d6, d7
 800141a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800141e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001422:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	edd3 7a07 	vldr	s15, [r3, #28]
 800142c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800143a:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800143e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001442:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	edd3 7a05 	vldr	s15, [r3, #20]
 800144c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001450:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001454:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001458:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800145c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001460:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001464:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001468:	ee36 7b47 	vsub.f64	d7, d6, d7
 800146c:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8001470:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001474:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	edc3 7a02 	vstr	s15, [r3, #8]
	kalman->x2 = xx2;
 800147e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001482:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->p11 = pp11;
 800148c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001490:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	edc3 7a04 	vstr	s15, [r3, #16]
 800149a:	e015      	b.n	80014c8 <KalmanFilter+0x3f0>
 800149c:	f3af 8000 	nop.w
 80014a0:	47ae147b 	.word	0x47ae147b
 80014a4:	3f947ae1 	.word	0x3f947ae1
 80014a8:	e2308c3b 	.word	0xe2308c3b
 80014ac:	3e05798e 	.word	0x3e05798e
 80014b0:	47ae147b 	.word	0x47ae147b
 80014b4:	3f747ae1 	.word	0x3f747ae1
 80014b8:	a0b5ed8e 	.word	0xa0b5ed8e
 80014bc:	3e80c6f7 	.word	0x3e80c6f7
 80014c0:	eb1c432d 	.word	0xeb1c432d
 80014c4:	3efa36e2 	.word	0x3efa36e2
	kalman->p12 = pp12;
 80014c8:	ed97 7b08 	vldr	d7, [r7, #32]
 80014cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->p21 = pp21;
 80014d6:	ed97 7b06 	vldr	d7, [r7, #24]
 80014da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman->p22 = pp22;
 80014e4:	ed97 7b04 	vldr	d7, [r7, #16]
 80014e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80014f2:	bf00      	nop
 80014f4:	3794      	adds	r7, #148	; 0x94
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop

08001500 <PID_init>:

void PID_init(PIDParameter *PID, float Kp, float Ki, float Kd) {
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	ed87 0a02 	vstr	s0, [r7, #8]
 800150c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001510:	ed87 1a00 	vstr	s2, [r7]
	PID->Kp = Kp;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	601a      	str	r2, [r3, #0]
	PID->Ki = Ki;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	605a      	str	r2, [r3, #4]
	PID->Kd = Kd;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	609a      	str	r2, [r3, #8]
	PID->ITerm = 0;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
	PID->Setpoint = 0;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
	PID->Feedback = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
	PID->Error[0] = 0;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
	PID->Output = 0;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	621a      	str	r2, [r3, #32]
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <PID_Control>:

float PID_Control(PIDParameter *PID,float Setpoint,float Feedback){
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	ed87 0a02 	vstr	s0, [r7, #8]
 800156e:	edc7 0a01 	vstr	s1, [r7, #4]
	PID->Feedback = Feedback; 	// Feedback Input
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	615a      	str	r2, [r3, #20]
	PID->Setpoint = Setpoint;	// Setpoint Input
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	611a      	str	r2, [r3, #16]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	ed93 7a04 	vldr	s14, [r3, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	edd3 7a05 	vldr	s15, [r3, #20]
 800158a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	edc3 7a06 	vstr	s15, [r3, #24]
	PID->ITerm += PID->Error[0];
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	ed93 7a03 	vldr	s14, [r3, #12]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	edd3 7a06 	vldr	s15, [r3, #24]
 80015a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	ed93 7a00 	vldr	s14, [r3]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80015b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80015c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ca:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	ed93 6a06 	vldr	s12, [r3, #24]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80015e0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80015e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	edc3 7a08 	vstr	s15, [r3, #32]
	PID->Error[1] = PID->Error[0]; // Update Error
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	699a      	ldr	r2, [r3, #24]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	61da      	str	r2, [r3, #28]
	return PID->Output;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	ee07 3a90 	vmov	s15, r3
}
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,float PosP,float PosI,float PosD,float VelP,float VelI,float VelD, float GFeed){
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	61f8      	str	r0, [r7, #28]
 8001618:	ed87 0a06 	vstr	s0, [r7, #24]
 800161c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001620:	ed87 1a04 	vstr	s2, [r7, #16]
 8001624:	edc7 1a03 	vstr	s3, [r7, #12]
 8001628:	ed87 2a02 	vstr	s4, [r7, #8]
 800162c:	edc7 2a01 	vstr	s5, [r7, #4]
 8001630:	ed87 3a00 	vstr	s6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	ed97 1a04 	vldr	s2, [r7, #16]
 800163a:	edd7 0a05 	vldr	s1, [r7, #20]
 800163e:	ed97 0a06 	vldr	s0, [r7, #24]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff5c 	bl	8001500 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	3330      	adds	r3, #48	; 0x30
 800164c:	ed97 1a01 	vldr	s2, [r7, #4]
 8001650:	edd7 0a02 	vldr	s1, [r7, #8]
 8001654:	ed97 0a03 	vldr	s0, [r7, #12]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff51 	bl	8001500 <PID_init>
	Control->Vel_Gfeed = GFeed;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	665a      	str	r2, [r3, #100]	; 0x64
}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		float Pos_Feed, float pos_set, float vel_set) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6178      	str	r0, [r7, #20]
 8001674:	6139      	str	r1, [r7, #16]
 8001676:	ed87 0a03 	vstr	s0, [r7, #12]
 800167a:	edc7 0a02 	vstr	s1, [r7, #8]
 800167e:	ed87 1a01 	vstr	s2, [r7, #4]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
	Control->VelocitySetpoint = vel_set;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	655a      	str	r2, [r3, #84]	; 0x54

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 800168e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001692:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001696:	eeb0 0b47 	vmov.f64	d0, d7
 800169a:	6938      	ldr	r0, [r7, #16]
 800169c:	f7ff fd1c 	bl	80010d8 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	65da      	str	r2, [r3, #92]	; 0x5c
	Control->PositionFeedback = kalman->x1;
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80016be:	eef0 0a47 	vmov.f32	s1, s14
 80016c2:	eeb0 0a67 	vmov.f32	s0, s15
 80016c6:	4610      	mov	r0, r2
 80016c8:	f7ff ff4b 	bl	8001562 <PID_Control>
 80016cc:	eef0 7a40 	vmov.f32	s15, s0
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80016fe:	eef0 0a47 	vmov.f32	s1, s14
 8001702:	eeb0 0a67 	vmov.f32	s0, s15
 8001706:	4610      	mov	r0, r2
 8001708:	f7ff ff2b 	bl	8001562 <PID_Control>
 800170c:	eef0 7a40 	vmov.f32	s15, s0
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001722:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Control->VelocityPIDOutput;
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800172c:	ee77 7a27 	vadd.f32	s15, s14, s15
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
//	Control->Output = Control->VelocityPIDOutput;
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001744:	4b12      	ldr	r3, [pc, #72]	; (8001790 <MX_CRC_Init+0x50>)
 8001746:	4a13      	ldr	r2, [pc, #76]	; (8001794 <MX_CRC_Init+0x54>)
 8001748:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_CRC_Init+0x50>)
 800174c:	2201      	movs	r2, #1
 800174e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_CRC_Init+0x50>)
 8001752:	2201      	movs	r2, #1
 8001754:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_CRC_Init+0x50>)
 8001758:	221d      	movs	r2, #29
 800175a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_CRC_Init+0x50>)
 800175e:	2210      	movs	r2, #16
 8001760:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_CRC_Init+0x50>)
 8001764:	22c4      	movs	r2, #196	; 0xc4
 8001766:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_CRC_Init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_CRC_Init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_CRC_Init+0x50>)
 8001776:	2201      	movs	r2, #1
 8001778:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800177a:	4805      	ldr	r0, [pc, #20]	; (8001790 <MX_CRC_Init+0x50>)
 800177c:	f006 fb3c 	bl	8007df8 <HAL_CRC_Init>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8001786:	f002 fabd 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	200001b4 	.word	0x200001b4
 8001794:	58024c00 	.word	0x58024c00

08001798 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <HAL_CRC_MspInit+0x3c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10e      	bne.n	80017c8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80017aa:	4b0b      	ldr	r3, [pc, #44]	; (80017d8 <HAL_CRC_MspInit+0x40>)
 80017ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b0:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_CRC_MspInit+0x40>)
 80017b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_CRC_MspInit+0x40>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	58024c00 	.word	0x58024c00
 80017d8:	58024400 	.word	0x58024400

080017dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <MX_DMA_Init+0x5c>)
 80017e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017e8:	4a13      	ldr	r2, [pc, #76]	; (8001838 <MX_DMA_Init+0x5c>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_DMA_Init+0x5c>)
 80017f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2100      	movs	r1, #0
 8001804:	200b      	movs	r0, #11
 8001806:	f006 fac2 	bl	8007d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800180a:	200b      	movs	r0, #11
 800180c:	f006 fad9 	bl	8007dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	200c      	movs	r0, #12
 8001816:	f006 faba 	bl	8007d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800181a:	200c      	movs	r0, #12
 800181c:	f006 fad1 	bl	8007dc2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
 8001822:	2100      	movs	r1, #0
 8001824:	200d      	movs	r0, #13
 8001826:	f006 fab2 	bl	8007d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800182a:	200d      	movs	r0, #13
 800182c:	f006 fac9 	bl	8007dc2 <HAL_NVIC_EnableIRQ>

}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	58024400 	.word	0x58024400

0800183c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_HS_DP
     PA15(JTDI)   ------> S_TIM2_CH1_ETR
     PB3(JTDO/TRACESWO)   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
 8001850:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001852:	4ba2      	ldr	r3, [pc, #648]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001858:	4aa0      	ldr	r2, [pc, #640]	; (8001adc <MX_GPIO_Init+0x2a0>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001862:	4b9e      	ldr	r3, [pc, #632]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	61bb      	str	r3, [r7, #24]
 800186e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001870:	4b9a      	ldr	r3, [pc, #616]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001876:	4a99      	ldr	r2, [pc, #612]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001880:	4b96      	ldr	r3, [pc, #600]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	4b93      	ldr	r3, [pc, #588]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001894:	4a91      	ldr	r2, [pc, #580]	; (8001adc <MX_GPIO_Init+0x2a0>)
 8001896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189e:	4b8f      	ldr	r3, [pc, #572]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a8:	613b      	str	r3, [r7, #16]
 80018aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ac:	4b8b      	ldr	r3, [pc, #556]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b2:	4a8a      	ldr	r2, [pc, #552]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018bc:	4b87      	ldr	r3, [pc, #540]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	4b84      	ldr	r3, [pc, #528]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d0:	4a82      	ldr	r2, [pc, #520]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018da:	4b80      	ldr	r3, [pc, #512]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e8:	4b7c      	ldr	r3, [pc, #496]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ee:	4a7b      	ldr	r2, [pc, #492]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f8:	4b78      	ldr	r3, [pc, #480]	; (8001adc <MX_GPIO_Init+0x2a0>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001906:	2200      	movs	r2, #0
 8001908:	f648 31df 	movw	r1, #35807	; 0x8bdf
 800190c:	4874      	ldr	r0, [pc, #464]	; (8001ae0 <MX_GPIO_Init+0x2a4>)
 800190e:	f009 f84b 	bl	800a9a8 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001918:	4872      	ldr	r0, [pc, #456]	; (8001ae4 <MX_GPIO_Init+0x2a8>)
 800191a:	f009 f845 	bl	800a9a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	21c4      	movs	r1, #196	; 0xc4
 8001922:	4871      	ldr	r0, [pc, #452]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 8001924:	f009 f840 	bl	800a9a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f24c 0140 	movw	r1, #49216	; 0xc040
 800192e:	486f      	ldr	r0, [pc, #444]	; (8001aec <MX_GPIO_Init+0x2b0>)
 8001930:	f009 f83a 	bl	800a9a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 7100 	mov.w	r1, #512	; 0x200
 800193a:	486a      	ldr	r0, [pc, #424]	; (8001ae4 <MX_GPIO_Init+0x2a8>)
 800193c:	f009 f834 	bl	800a9a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001940:	2201      	movs	r2, #1
 8001942:	213f      	movs	r1, #63	; 0x3f
 8001944:	4869      	ldr	r0, [pc, #420]	; (8001aec <MX_GPIO_Init+0x2b0>)
 8001946:	f009 f82f 	bl	800a9a8 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 800194a:	f648 33df 	movw	r3, #35807	; 0x8bdf
 800194e:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001958:	2300      	movs	r3, #0
 800195a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	485f      	ldr	r0, [pc, #380]	; (8001ae0 <MX_GPIO_Init+0x2a4>)
 8001964:	f008 fe78 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001968:	f24e 030f 	movw	r3, #57359	; 0xe00f
 800196c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196e:	2303      	movs	r3, #3
 8001970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4859      	ldr	r0, [pc, #356]	; (8001ae4 <MX_GPIO_Init+0x2a8>)
 800197e:	f008 fe6b 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001982:	233c      	movs	r3, #60	; 0x3c
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001986:	2303      	movs	r3, #3
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	4856      	ldr	r0, [pc, #344]	; (8001af0 <MX_GPIO_Init+0x2b4>)
 8001996:	f008 fe5f 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 800199a:	f44f 7344 	mov.w	r3, #784	; 0x310
 800199e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	484c      	ldr	r0, [pc, #304]	; (8001ae4 <MX_GPIO_Init+0x2a8>)
 80019b4:	f008 fe50 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019b8:	2301      	movs	r3, #1
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4847      	ldr	r0, [pc, #284]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 80019cc:	f008 fe44 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4840      	ldr	r0, [pc, #256]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 80019e6:	f008 fe37 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 80019ea:	23c4      	movs	r3, #196	; 0xc4
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4839      	ldr	r0, [pc, #228]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 8001a02:	f008 fe29 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4831      	ldr	r0, [pc, #196]	; (8001ae0 <MX_GPIO_Init+0x2a4>)
 8001a1c:	f008 fe1c 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001a20:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a26:	2303      	movs	r3, #3
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	482d      	ldr	r0, [pc, #180]	; (8001aec <MX_GPIO_Init+0x2b0>)
 8001a36:	f008 fe0f 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001a3a:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001a3e:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	4826      	ldr	r0, [pc, #152]	; (8001aec <MX_GPIO_Init+0x2b0>)
 8001a54:	f008 fe00 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4820      	ldr	r0, [pc, #128]	; (8001af0 <MX_GPIO_Init+0x2b4>)
 8001a6e:	f008 fdf3 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4819      	ldr	r0, [pc, #100]	; (8001af0 <MX_GPIO_Init+0x2b4>)
 8001a8c:	f008 fde4 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6A_Pin;
 8001a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a96:	2302      	movs	r3, #2
 8001a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4810      	ldr	r0, [pc, #64]	; (8001af0 <MX_GPIO_Init+0x2b4>)
 8001aae:	f008 fdd3 	bl	800a658 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6B_Pin;
 8001ab2:	2308      	movs	r3, #8
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 031c 	add.w	r3, r7, #28
 8001aca:	4619      	mov	r1, r3
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_GPIO_Init+0x2ac>)
 8001ace:	f008 fdc3 	bl	800a658 <HAL_GPIO_Init>

}
 8001ad2:	bf00      	nop
 8001ad4:	3730      	adds	r7, #48	; 0x30
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	58021000 	.word	0x58021000
 8001ae4:	58020800 	.word	0x58020800
 8001ae8:	58020400 	.word	0x58020400
 8001aec:	58020c00 	.word	0x58020c00
 8001af0:	58020000 	.word	0x58020000

08001af4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001af8:	4b1b      	ldr	r3, [pc, #108]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <MX_I2C2_Init+0x78>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001afe:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b00:	4a1b      	ldr	r2, [pc, #108]	; (8001b70 <MX_I2C2_Init+0x7c>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b2e:	480e      	ldr	r0, [pc, #56]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b30:	f008 ff6e 	bl	800aa10 <HAL_I2C_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b3a:	f002 f8e3 	bl	8003d04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b42:	f00a fe7b 	bl	800c83c <HAL_I2CEx_ConfigAnalogFilter>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b4c:	f002 f8da 	bl	8003d04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b50:	2100      	movs	r1, #0
 8001b52:	4805      	ldr	r0, [pc, #20]	; (8001b68 <MX_I2C2_Init+0x74>)
 8001b54:	f00a febd 	bl	800c8d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b5e:	f002 f8d1 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200001d8 	.word	0x200001d8
 8001b6c:	40005800 	.word	0x40005800
 8001b70:	60404e72 	.word	0x60404e72

08001b74 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0b6      	sub	sp, #216	; 0xd8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	22b4      	movs	r2, #180	; 0xb4
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f013 f9ad 	bl	8014ef4 <memset>
  if(i2cHandle->Instance==I2C2)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a29      	ldr	r2, [pc, #164]	; (8001c44 <HAL_I2C_MspInit+0xd0>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d14a      	bne.n	8001c3a <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ba4:	2308      	movs	r3, #8
 8001ba6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f00b fe4e 	bl	800d854 <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001bbe:	f002 f8a1 	bl	8003d04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc8:	4a1f      	ldr	r2, [pc, #124]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001bca:	f043 0302 	orr.w	r3, r3, #2
 8001bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001be0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001be4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be8:	2312      	movs	r3, #18
 8001bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c00:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c04:	4619      	mov	r1, r3
 8001c06:	4811      	ldr	r0, [pc, #68]	; (8001c4c <HAL_I2C_MspInit+0xd8>)
 8001c08:	f008 fd26 	bl	800a658 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001c14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c18:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c1c:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_I2C_MspInit+0xd4>)
 8001c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2022      	movs	r0, #34	; 0x22
 8001c30:	f006 f8ad 	bl	8007d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001c34:	2022      	movs	r0, #34	; 0x22
 8001c36:	f006 f8c4 	bl	8007dc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	37d8      	adds	r7, #216	; 0xd8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40005800 	.word	0x40005800
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	58020400 	.word	0x58020400

08001c50 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(float q[3], float chi_dot[3], float qv[4])

Kinematics_StatusTypeDef IVK(float q[4], float chi_dot[3], float qv[4])
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	ed2d 8b04 	vpush	{d8-d9}
 8001c56:	b096      	sub	sp, #88	; 0x58
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  float qvbar_idx_1;
  float qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3304      	adds	r3, #4
 8001c64:	ed93 7a00 	vldr	s14, [r3]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_2 = sin(qvbar_idx_1);
 8001c78:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c80:	eeb0 0b47 	vmov.f64	d0, d7
 8001c84:	f013 f98c 	bl	8014fa0 <sin>
 8001c88:	eeb0 7b40 	vmov.f64	d7, d0
 8001c8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c90:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  Jv4_tmp = cos(q[0]);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	edd3 7a00 	vldr	s15, [r3]
 8001c9a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c9e:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca2:	f013 f931 	bl	8014f08 <cos>
 8001ca6:	eeb0 7b40 	vmov.f64	d7, d0
 8001caa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cae:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  b_Jv4_tmp = sin(q[0]);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cbc:	eeb0 0b47 	vmov.f64	d0, d7
 8001cc0:	f013 f96e 	bl	8014fa0 <sin>
 8001cc4:	eeb0 7b40 	vmov.f64	d7, d0
 8001cc8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ccc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 8001cd0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001cd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8001cdc:	f013 f914 	bl	8014f08 <cos>
 8001ce0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ce4:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8002020 <IVK+0x3d0>
 8001ce8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001cf0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d00:	eeb0 0b47 	vmov.f64	d0, d7
 8001d04:	f013 f94c 	bl	8014fa0 <sin>
 8001d08:	eeb0 7b40 	vmov.f64	d7, d0
 8001d0c:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8002020 <IVK+0x3d0>
 8001d10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d18:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 8001d1c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d24:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001d28:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001d2c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001d30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d34:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001d38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d3c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 8001d40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001d44:	eeb1 7a67 	vneg.f32	s14, s15
 8001d48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d50:	edc7 7a04 	vstr	s15, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 8001d54:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001d58:	eef1 7a67 	vneg.f32	s15, s15
 8001d5c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001d60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001d64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d68:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8002020 <IVK+0x3d0>
 8001d6c:	ee27 9b06 	vmul.f64	d9, d7, d6
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3304      	adds	r3, #4
 8001d74:	edd3 7a00 	vldr	s15, [r3]
 8001d78:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d7c:	eeb0 0b47 	vmov.f64	d0, d7
 8001d80:	f013 f8c2 	bl	8014f08 <cos>
 8001d84:	eeb0 7b40 	vmov.f64	d7, d0
 8001d88:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002020 <IVK+0x3d0>
 8001d8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d90:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001d94:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001d98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d9c:	edc7 7a07 	vstr	s15, [r7, #28]
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 8001da0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001da4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001da8:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8002028 <IVK+0x3d8>
 8001dac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001db0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001db4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001db8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001dbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dc0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 8001dc4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001dc8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd0:	edc7 7a05 	vstr	s15, [r7, #20]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dde:	eeb0 0b47 	vmov.f64	d0, d7
 8001de2:	f013 f8dd 	bl	8014fa0 <sin>
 8001de6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dea:	eeb1 8b47 	vneg.f64	d8, d7
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3304      	adds	r3, #4
 8001df2:	ed93 7a00 	vldr	s14, [r3]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3308      	adds	r3, #8
 8001dfa:	edd3 7a00 	vldr	s15, [r3]
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e06:	eeb0 0b47 	vmov.f64	d0, d7
 8001e0a:	f013 f8c9 	bl	8014fa0 <sin>
 8001e0e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e12:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8002020 <IVK+0x3d0>
 8001e16:	ee27 9b06 	vmul.f64	d9, d7, d6
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	edd3 7a00 	vldr	s15, [r3]
 8001e22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e26:	eeb0 0b47 	vmov.f64	d0, d7
 8001e2a:	f013 f86d 	bl	8014f08 <cos>
 8001e2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e32:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8002020 <IVK+0x3d0>
 8001e36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e3a:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001e3e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001e42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e46:	edc7 7a08 	vstr	s15, [r7, #32]
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	ed93 7a00 	vldr	s14, [r3]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3308      	adds	r3, #8
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e62:	eeb0 0b47 	vmov.f64	d0, d7
 8001e66:	f013 f89b 	bl	8014fa0 <sin>
 8001e6a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e6e:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8002028 <IVK+0x3d8>
 8001e72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e76:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001e82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e86:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  Jv4[2] = 0.0;
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 8001e90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001e94:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Jv4[8] = qvbar_idx_1;
 8001ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
  r1 = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	657b      	str	r3, [r7, #84]	; 0x54
  r2 = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	653b      	str	r3, [r7, #80]	; 0x50
  rtemp = 2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 8001eb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eb4:	eeb0 7ae7 	vabs.f32	s14, s15
 8001eb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ebc:	eef0 7ae7 	vabs.f32	s15, s15
 8001ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec8:	dd03      	ble.n	8001ed2 <IVK+0x282>
    r1 = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	657b      	str	r3, [r7, #84]	; 0x54
    r2 = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	653b      	str	r3, [r7, #80]	; 0x50
  }
  Jv4[r2] /= Jv4[r1];
 8001ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	3358      	adds	r3, #88	; 0x58
 8001ed8:	443b      	add	r3, r7
 8001eda:	3b48      	subs	r3, #72	; 0x48
 8001edc:	edd3 6a00 	vldr	s13, [r3]
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	3358      	adds	r3, #88	; 0x58
 8001ee6:	443b      	add	r3, r7
 8001ee8:	3b48      	subs	r3, #72	; 0x48
 8001eea:	ed93 7a00 	vldr	s14, [r3]
 8001eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	3358      	adds	r3, #88	; 0x58
 8001ef8:	443b      	add	r3, r7
 8001efa:	3b48      	subs	r3, #72	; 0x48
 8001efc:	edc3 7a00 	vstr	s15, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 8001f00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	3358      	adds	r3, #88	; 0x58
 8001f06:	443b      	add	r3, r7
 8001f08:	3b48      	subs	r3, #72	; 0x48
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002030 <IVK+0x3e0>
 8001f12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f16:	edc7 7a06 	vstr	s15, [r7, #24]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 8001f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f1c:	3303      	adds	r3, #3
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	3358      	adds	r3, #88	; 0x58
 8001f22:	443b      	add	r3, r7
 8001f24:	3b48      	subs	r3, #72	; 0x48
 8001f26:	ed93 7a00 	vldr	s14, [r3]
 8001f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	3358      	adds	r3, #88	; 0x58
 8001f30:	443b      	add	r3, r7
 8001f32:	3b48      	subs	r3, #72	; 0x48
 8001f34:	edd3 6a00 	vldr	s13, [r3]
 8001f38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f3a:	3303      	adds	r3, #3
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	3358      	adds	r3, #88	; 0x58
 8001f40:	443b      	add	r3, r7
 8001f42:	3b48      	subs	r3, #72	; 0x48
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4e:	3303      	adds	r3, #3
 8001f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	3358      	adds	r3, #88	; 0x58
 8001f58:	443b      	add	r3, r7
 8001f5a:	3b48      	subs	r3, #72	; 0x48
 8001f5c:	edc3 7a00 	vstr	s15, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 8001f60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f64:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6a:	3303      	adds	r3, #3
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	3358      	adds	r3, #88	; 0x58
 8001f70:	443b      	add	r3, r7
 8001f72:	3b48      	subs	r3, #72	; 0x48
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f80:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 8001f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f86:	3306      	adds	r3, #6
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	3358      	adds	r3, #88	; 0x58
 8001f8c:	443b      	add	r3, r7
 8001f8e:	3b48      	subs	r3, #72	; 0x48
 8001f90:	ed93 7a00 	vldr	s14, [r3]
 8001f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	3358      	adds	r3, #88	; 0x58
 8001f9a:	443b      	add	r3, r7
 8001f9c:	3b48      	subs	r3, #72	; 0x48
 8001f9e:	edd3 6a00 	vldr	s13, [r3]
 8001fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fa4:	3306      	adds	r3, #6
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	3358      	adds	r3, #88	; 0x58
 8001faa:	443b      	add	r3, r7
 8001fac:	3b48      	subs	r3, #72	; 0x48
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb8:	3306      	adds	r3, #6
 8001fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3358      	adds	r3, #88	; 0x58
 8001fc2:	443b      	add	r3, r7
 8001fc4:	3b48      	subs	r3, #72	; 0x48
 8001fc6:	edc3 7a00 	vstr	s15, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 8001fca:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001fce:	edd7 6a06 	vldr	s13, [r7, #24]
 8001fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fd4:	3306      	adds	r3, #6
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3358      	adds	r3, #88	; 0x58
 8001fda:	443b      	add	r3, r7
 8001fdc:	3b48      	subs	r3, #72	; 0x48
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fea:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 8001fee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ff2:	eeb0 7ae7 	vabs.f32	s14, s15
 8001ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ff8:	3303      	adds	r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	3358      	adds	r3, #88	; 0x58
 8001ffe:	443b      	add	r3, r7
 8002000:	3b48      	subs	r3, #72	; 0x48
 8002002:	edd3 7a00 	vldr	s15, [r3]
 8002006:	eef0 7ae7 	vabs.f32	s15, s15
 800200a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800200e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002012:	dd0f      	ble.n	8002034 <IVK+0x3e4>
    rtemp = r2;
 8002014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002016:	64fb      	str	r3, [r7, #76]	; 0x4c
    r2 = 2;
 8002018:	2302      	movs	r3, #2
 800201a:	653b      	str	r3, [r7, #80]	; 0x50
 800201c:	e00a      	b.n	8002034 <IVK+0x3e4>
 800201e:	bf00      	nop
 8002020:	00000000 	.word	0x00000000
 8002024:	4077c000 	.word	0x4077c000
 8002028:	00000000 	.word	0x00000000
 800202c:	c077c000 	.word	0xc077c000
 8002030:	00000000 	.word	0x00000000
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 8002034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002036:	3303      	adds	r3, #3
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3358      	adds	r3, #88	; 0x58
 800203c:	443b      	add	r3, r7
 800203e:	3b48      	subs	r3, #72	; 0x48
 8002040:	edd3 6a00 	vldr	s13, [r3]
 8002044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002046:	3303      	adds	r3, #3
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	3358      	adds	r3, #88	; 0x58
 800204c:	443b      	add	r3, r7
 800204e:	3b48      	subs	r3, #72	; 0x48
 8002050:	ed93 7a00 	vldr	s14, [r3]
 8002054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002056:	3303      	adds	r3, #3
 8002058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	3358      	adds	r3, #88	; 0x58
 8002060:	443b      	add	r3, r7
 8002062:	3b48      	subs	r3, #72	; 0x48
 8002064:	edc3 7a00 	vstr	s15, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 8002068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206a:	3306      	adds	r3, #6
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3358      	adds	r3, #88	; 0x58
 8002070:	443b      	add	r3, r7
 8002072:	3b48      	subs	r3, #72	; 0x48
 8002074:	ed93 7a00 	vldr	s14, [r3]
 8002078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800207a:	3303      	adds	r3, #3
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3358      	adds	r3, #88	; 0x58
 8002080:	443b      	add	r3, r7
 8002082:	3b48      	subs	r3, #72	; 0x48
 8002084:	edd3 6a00 	vldr	s13, [r3]
 8002088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800208a:	3306      	adds	r3, #6
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	3358      	adds	r3, #88	; 0x58
 8002090:	443b      	add	r3, r7
 8002092:	3b48      	subs	r3, #72	; 0x48
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800209e:	3306      	adds	r3, #6
 80020a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	3358      	adds	r3, #88	; 0x58
 80020a8:	443b      	add	r3, r7
 80020aa:	3b48      	subs	r3, #72	; 0x48
 80020ac:	edc3 7a00 	vstr	s15, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 80020b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4413      	add	r3, r2
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	4413      	add	r3, r2
 80020c4:	edd3 6a00 	vldr	s13, [r3]
 80020c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	3358      	adds	r3, #88	; 0x58
 80020ce:	443b      	add	r3, r7
 80020d0:	3b48      	subs	r3, #72	; 0x48
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020de:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80020e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	4413      	add	r3, r2
 80020ea:	ed93 7a00 	vldr	s14, [r3]
 80020ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	4413      	add	r3, r2
 80020f6:	edd3 6a00 	vldr	s13, [r3]
 80020fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3358      	adds	r3, #88	; 0x58
 8002100:	443b      	add	r3, r7
 8002102:	3b48      	subs	r3, #72	; 0x48
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210c:	ee37 7a67 	vsub.f32	s14, s14, s15
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 8002110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002112:	3303      	adds	r3, #3
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	3358      	adds	r3, #88	; 0x58
 8002118:	443b      	add	r3, r7
 800211a:	3b48      	subs	r3, #72	; 0x48
 800211c:	edd3 6a00 	vldr	s13, [r3]
 8002120:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002124:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002128:	ee77 6a67 	vsub.f32	s13, s14, s15
                Jv4[rtemp + 6];
 800212c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800212e:	3306      	adds	r3, #6
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	3358      	adds	r3, #88	; 0x58
 8002134:	443b      	add	r3, r7
 8002136:	3b48      	subs	r3, #72	; 0x48
 8002138:	ed93 7a00 	vldr	s14, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 800213c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002140:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 8002144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002146:	3306      	adds	r3, #6
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	3358      	adds	r3, #88	; 0x58
 800214c:	443b      	add	r3, r7
 800214e:	3b48      	subs	r3, #72	; 0x48
 8002150:	ed93 7a00 	vldr	s14, [r3]
 8002154:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002164:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_1 /= Jv4[r2 + 3];
 8002168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800216a:	3303      	adds	r3, #3
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	3358      	adds	r3, #88	; 0x58
 8002170:	443b      	add	r3, r7
 8002172:	3b48      	subs	r3, #72	; 0x48
 8002174:	ed93 7a00 	vldr	s14, [r3]
 8002178:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800217c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002180:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	68ba      	ldr	r2, [r7, #8]
 800218a:	4413      	add	r3, r2
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002192:	3306      	adds	r3, #6
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	3358      	adds	r3, #88	; 0x58
 8002198:	443b      	add	r3, r7
 800219a:	3b48      	subs	r3, #72	; 0x48
 800219c:	edd3 6a00 	vldr	s13, [r3]
 80021a0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	3303      	adds	r3, #3
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	3358      	adds	r3, #88	; 0x58
 80021b4:	443b      	add	r3, r7
 80021b6:	3b48      	subs	r3, #72	; 0x48
 80021b8:	edd3 6a00 	vldr	s13, [r3]
 80021bc:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021c4:	ee77 6a67 	vsub.f32	s13, s14, s15
      Jv4[r1];
 80021c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	3358      	adds	r3, #88	; 0x58
 80021ce:	443b      	add	r3, r7
 80021d0:	3b48      	subs	r3, #72	; 0x48
 80021d2:	ed93 7a00 	vldr	s14, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 80021d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
  qv[0] =
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	edc3 7a00 	vstr	s15, [r3]
  qv[1] = qvbar_idx_1;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3304      	adds	r3, #4
 80021e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021e6:	601a      	str	r2, [r3, #0]
  qv[2] = qvbar_idx_2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3308      	adds	r3, #8
 80021ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021ee:	601a      	str	r2, [r3, #0]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 80021f0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80021f4:	eeb1 7a67 	vneg.f32	s14, s15
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	330c      	adds	r3, #12
 80021fc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002204:	edc3 7a00 	vstr	s15, [r3]
  return Kinematics_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3758      	adds	r7, #88	; 0x58
 800220e:	46bd      	mov	sp, r7
 8002210:	ecbd 8b04 	vpop	{d8-d9}
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop

08002218 <FPK>:
 * Arguments    : const double q[5]
 *                double l3
 *                double Pne[3]
 * Return Type  : void
 */
void FPK(float q[5], float l3, float Pne[3]) {
 8002218:	b580      	push	{r7, lr}
 800221a:	ed2d 8b0c 	vpush	{d8-d13}
 800221e:	b08c      	sub	sp, #48	; 0x30
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	ed87 0a02 	vstr	s0, [r7, #8]
 8002228:	6079      	str	r1, [r7, #4]
	float e_Pne_tmp;
	float f_Pne_tmp;
	float g_Pne_tmp;
	float h_Pne_tmp;
	/* offset */
	Pne_tmp = cos(q[0]);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002234:	eeb0 0b47 	vmov.f64	d0, d7
 8002238:	f012 fe66 	bl	8014f08 <cos>
 800223c:	eeb0 7b40 	vmov.f64	d7, d0
 8002240:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002244:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	b_Pne_tmp = sin(q[2]);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3308      	adds	r3, #8
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002254:	eeb0 0b47 	vmov.f64	d0, d7
 8002258:	f012 fea2 	bl	8014fa0 <sin>
 800225c:	eeb0 7b40 	vmov.f64	d7, d0
 8002260:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002264:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	c_Pne_tmp = cos(q[2]);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3308      	adds	r3, #8
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002274:	eeb0 0b47 	vmov.f64	d0, d7
 8002278:	f012 fe46 	bl	8014f08 <cos>
 800227c:	eeb0 7b40 	vmov.f64	d7, d0
 8002280:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002284:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	d_Pne_tmp = sin(q[1]);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3304      	adds	r3, #4
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002294:	eeb0 0b47 	vmov.f64	d0, d7
 8002298:	f012 fe82 	bl	8014fa0 <sin>
 800229c:	eeb0 7b40 	vmov.f64	d7, d0
 80022a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022a4:	edc7 7a08 	vstr	s15, [r7, #32]
	e_Pne_tmp = cos(q[1]);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3304      	adds	r3, #4
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022b4:	eeb0 0b47 	vmov.f64	d0, d7
 80022b8:	f012 fe26 	bl	8014f08 <cos>
 80022bc:	eeb0 7b40 	vmov.f64	d7, d0
 80022c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022c4:	edc7 7a07 	vstr	s15, [r7, #28]
	f_Pne_tmp = sin(q[0]);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	edd3 7a00 	vldr	s15, [r3]
 80022ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022d2:	eeb0 0b47 	vmov.f64	d0, d7
 80022d6:	f012 fe63 	bl	8014fa0 <sin>
 80022da:	eeb0 7b40 	vmov.f64	d7, d0
 80022de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022e2:	edc7 7a06 	vstr	s15, [r7, #24]
	g_Pne_tmp = cos(q[3]);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	330c      	adds	r3, #12
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022f2:	eeb0 0b47 	vmov.f64	d0, d7
 80022f6:	f012 fe07 	bl	8014f08 <cos>
 80022fa:	eeb0 7b40 	vmov.f64	d7, d0
 80022fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002302:	edc7 7a05 	vstr	s15, [r7, #20]
	h_Pne_tmp = sin(q[3]);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	330c      	adds	r3, #12
 800230a:	edd3 7a00 	vldr	s15, [r3]
 800230e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002312:	eeb0 0b47 	vmov.f64	d0, d7
 8002316:	f012 fe43 	bl	8014fa0 <sin>
 800231a:	eeb0 7b40 	vmov.f64	d7, d0
 800231e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002322:	edc7 7a04 	vstr	s15, [r7, #16]
	Pne[0] =
			((380.0
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 8002326:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800232a:	edd7 7a07 	vldr	s15, [r7, #28]
 800232e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002332:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002336:	ee27 7a27 	vmul.f32	s14, s14, s15
							- Pne_tmp * d_Pne_tmp * b_Pne_tmp)
 800233a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800233e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002342:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002346:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800234a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800234e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002352:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 8002356:	ed9f 6bf2 	vldr	d6, [pc, #968]	; 8002720 <FPK+0x508>
 800235a:	ee27 8b06 	vmul.f64	d8, d7, d6
					+ l3
							* (g_Pne_tmp
 800235e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002362:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 8002366:	edd7 7a05 	vldr	s15, [r7, #20]
 800236a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002378:	eeb0 0b47 	vmov.f64	d0, d7
 800237c:	f012 fdc4 	bl	8014f08 <cos>
 8002380:	eeb0 bb40 	vmov.f64	d11, d0
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3304      	adds	r3, #4
 8002388:	edd3 7a00 	vldr	s15, [r3]
 800238c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002390:	eeb0 0b47 	vmov.f64	d0, d7
 8002394:	f012 fdb8 	bl	8014f08 <cos>
 8002398:	eeb0 7b40 	vmov.f64	d7, d0
 800239c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80023a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023a8:	ee26 6b07 	vmul.f64	d6, d6, d7
											+ Pne_tmp * c_Pne_tmp * d_Pne_tmp)
 80023ac:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80023b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80023bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023c4:	ee36 7b07 	vadd.f64	d7, d6, d7
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 80023c8:	ee2a ab07 	vmul.f64	d10, d10, d7
									+ h_Pne_tmp
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 80023cc:	edd7 7a04 	vldr	s15, [r7, #16]
 80023d0:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023de:	eeb0 0b47 	vmov.f64	d0, d7
 80023e2:	f012 fd91 	bl	8014f08 <cos>
 80023e6:	eeb0 cb40 	vmov.f64	d12, d0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3304      	adds	r3, #4
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023f6:	eeb0 0b47 	vmov.f64	d0, d7
 80023fa:	f012 fd85 	bl	8014f08 <cos>
 80023fe:	eeb0 7b40 	vmov.f64	d7, d0
 8002402:	ee2c cb07 	vmul.f64	d12, d12, d7
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	3308      	adds	r3, #8
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002412:	eeb0 0b47 	vmov.f64	d0, d7
 8002416:	f012 fd77 	bl	8014f08 <cos>
 800241a:	eeb0 7b40 	vmov.f64	d7, d0
 800241e:	ee2c cb07 	vmul.f64	d12, d12, d7
													- cos(q[0]) * sin(q[1])
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800242c:	eeb0 0b47 	vmov.f64	d0, d7
 8002430:	f012 fd6a 	bl	8014f08 <cos>
 8002434:	eeb0 db40 	vmov.f64	d13, d0
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	3304      	adds	r3, #4
 800243c:	edd3 7a00 	vldr	s15, [r3]
 8002440:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002444:	eeb0 0b47 	vmov.f64	d0, d7
 8002448:	f012 fdaa 	bl	8014fa0 <sin>
 800244c:	eeb0 7b40 	vmov.f64	d7, d0
 8002450:	ee2d db07 	vmul.f64	d13, d13, d7
															* sin(q[2]))))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3308      	adds	r3, #8
 8002458:	edd3 7a00 	vldr	s15, [r3]
 800245c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002460:	eeb0 0b47 	vmov.f64	d0, d7
 8002464:	f012 fd9c 	bl	8014fa0 <sin>
 8002468:	eeb0 7b40 	vmov.f64	d7, d0
 800246c:	ee2d 7b07 	vmul.f64	d7, d13, d7
													- cos(q[0]) * sin(q[1])
 8002470:	ee3c 7b47 	vsub.f64	d7, d12, d7
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 8002474:	ee2b 7b07 	vmul.f64	d7, d11, d7
									+ h_Pne_tmp
 8002478:	ee3a 7b07 	vadd.f64	d7, d10, d7
							* (g_Pne_tmp
 800247c:	ee29 7b07 	vmul.f64	d7, d9, d7
					+ l3
 8002480:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ 20.0 * Pne_tmp) - 380.0 * Pne_tmp * d_Pne_tmp;
 8002484:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002488:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800248c:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002490:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002494:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002498:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800249c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024a0:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8002720 <FPK+0x508>
 80024a4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80024a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024b0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	Pne[0] =
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	edc3 7a00 	vstr	s15, [r3]
	Pne[1] = ((l3
			* (g_Pne_tmp
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 80024c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80024c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80024ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80024d2:	ee27 7a27 	vmul.f32	s14, s14, s15
							+ c_Pne_tmp * f_Pne_tmp * d_Pne_tmp)
 80024d6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80024da:	edd7 7a06 	vldr	s15, [r7, #24]
 80024de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80024e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ea:	ee37 7a27 	vadd.f32	s14, s14, s15
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 80024ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80024f2:	ee27 7a27 	vmul.f32	s14, s14, s15
					- h_Pne_tmp
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 80024f6:	edd7 6a06 	vldr	s13, [r7, #24]
 80024fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80024fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002502:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002506:	ee66 6aa7 	vmul.f32	s13, s13, s15
									- e_Pne_tmp * c_Pne_tmp * f_Pne_tmp))
 800250a:	ed97 6a07 	vldr	s12, [r7, #28]
 800250e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002512:	ee26 6a27 	vmul.f32	s12, s12, s15
 8002516:	edd7 7a06 	vldr	s15, [r7, #24]
 800251a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800251e:	ee76 6ae7 	vsub.f32	s13, s13, s15
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002522:	edd7 7a04 	vldr	s15, [r7, #16]
 8002526:	ee66 7aa7 	vmul.f32	s15, s13, s15
					- h_Pne_tmp
 800252a:	ee37 7a67 	vsub.f32	s14, s14, s15
			* (g_Pne_tmp
 800252e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002536:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
			- 380.0
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002544:	eeb0 0b47 	vmov.f64	d0, d7
 8002548:	f012 fd2a 	bl	8014fa0 <sin>
 800254c:	eeb0 9b40 	vmov.f64	d9, d0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3304      	adds	r3, #4
 8002554:	edd3 7a00 	vldr	s15, [r3]
 8002558:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800255c:	eeb0 0b47 	vmov.f64	d0, d7
 8002560:	f012 fd1e 	bl	8014fa0 <sin>
 8002564:	eeb0 7b40 	vmov.f64	d7, d0
 8002568:	ee29 9b07 	vmul.f64	d9, d9, d7
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	3308      	adds	r3, #8
 8002570:	edd3 7a00 	vldr	s15, [r3]
 8002574:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002578:	eeb0 0b47 	vmov.f64	d0, d7
 800257c:	f012 fd10 	bl	8014fa0 <sin>
 8002580:	eeb0 7b40 	vmov.f64	d7, d0
 8002584:	ee29 9b07 	vmul.f64	d9, d9, d7
							- cos(q[1]) * cos(q[2]) * sin(q[0])))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3304      	adds	r3, #4
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002594:	eeb0 0b47 	vmov.f64	d0, d7
 8002598:	f012 fcb6 	bl	8014f08 <cos>
 800259c:	eeb0 ab40 	vmov.f64	d10, d0
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	3308      	adds	r3, #8
 80025a4:	edd3 7a00 	vldr	s15, [r3]
 80025a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ac:	eeb0 0b47 	vmov.f64	d0, d7
 80025b0:	f012 fcaa 	bl	8014f08 <cos>
 80025b4:	eeb0 7b40 	vmov.f64	d7, d0
 80025b8:	ee2a ab07 	vmul.f64	d10, d10, d7
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	edd3 7a00 	vldr	s15, [r3]
 80025c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025c6:	eeb0 0b47 	vmov.f64	d0, d7
 80025ca:	f012 fce9 	bl	8014fa0 <sin>
 80025ce:	eeb0 7b40 	vmov.f64	d7, d0
 80025d2:	ee2a 7b07 	vmul.f64	d7, d10, d7
 80025d6:	ee39 7b47 	vsub.f64	d7, d9, d7
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 80025da:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002720 <FPK+0x508>
 80025de:	ee27 7b06 	vmul.f64	d7, d7, d6
			- 380.0
 80025e2:	ee38 6b47 	vsub.f64	d6, d8, d7
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 80025e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ee:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80025f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80025f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80025fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80025fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002602:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8002720 <FPK+0x508>
 8002606:	ee27 5b05 	vmul.f64	d5, d7, d5
 800260a:	edd7 7a08 	vldr	s15, [r7, #32]
 800260e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002612:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002616:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[1] = ((l3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3304      	adds	r3, #4
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 800261e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	Pne[1] = ((l3
 8002622:	edc3 7a00 	vstr	s15, [r3]
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002626:	ed97 7a07 	vldr	s14, [r7, #28]
 800262a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800262e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002632:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002636:	edd7 7a08 	vldr	s15, [r7, #32]
 800263a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002646:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002720 <FPK+0x508>
 800264a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800264e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002728 <FPK+0x510>
 8002652:	ee37 6b06 	vadd.f64	d6, d7, d6
			+ 380.0 * e_Pne_tmp)
 8002656:	edd7 7a07 	vldr	s15, [r7, #28]
 800265a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800265e:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8002720 <FPK+0x508>
 8002662:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002666:	ee36 8b07 	vadd.f64	d8, d6, d7
			- l3
					* (g_Pne_tmp
 800266a:	edd7 7a02 	vldr	s15, [r7, #8]
 800266e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
							* (cos(q[1]) * cos(q[2]) - d_Pne_tmp * b_Pne_tmp)
 8002672:	edd7 7a05 	vldr	s15, [r7, #20]
 8002676:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3304      	adds	r3, #4
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002686:	eeb0 0b47 	vmov.f64	d0, d7
 800268a:	f012 fc3d 	bl	8014f08 <cos>
 800268e:	eeb0 bb40 	vmov.f64	d11, d0
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3308      	adds	r3, #8
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800269e:	eeb0 0b47 	vmov.f64	d0, d7
 80026a2:	f012 fc31 	bl	8014f08 <cos>
 80026a6:	eeb0 7b40 	vmov.f64	d7, d0
 80026aa:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80026ae:	ed97 7a08 	vldr	s14, [r7, #32]
 80026b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80026b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80026c2:	ee2a ab07 	vmul.f64	d10, d10, d7
							- h_Pne_tmp
									* (cos(q[1]) * sin(q[2])
 80026c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ca:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3304      	adds	r3, #4
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026da:	eeb0 0b47 	vmov.f64	d0, d7
 80026de:	f012 fc13 	bl	8014f08 <cos>
 80026e2:	eeb0 cb40 	vmov.f64	d12, d0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3308      	adds	r3, #8
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026f2:	eeb0 0b47 	vmov.f64	d0, d7
 80026f6:	f012 fc53 	bl	8014fa0 <sin>
 80026fa:	eeb0 7b40 	vmov.f64	d7, d0
 80026fe:	ee2c cb07 	vmul.f64	d12, d12, d7
											+ cos(q[2]) * sin(q[1])));
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	3308      	adds	r3, #8
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800270e:	eeb0 0b47 	vmov.f64	d0, d7
 8002712:	f012 fbf9 	bl	8014f08 <cos>
 8002716:	eeb0 db40 	vmov.f64	d13, d0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3304      	adds	r3, #4
 800271e:	e007      	b.n	8002730 <FPK+0x518>
 8002720:	00000000 	.word	0x00000000
 8002724:	4077c000 	.word	0x4077c000
 8002728:	70a3d70a 	.word	0x70a3d70a
 800272c:	40727e3d 	.word	0x40727e3d
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002738:	eeb0 0b47 	vmov.f64	d0, d7
 800273c:	f012 fc30 	bl	8014fa0 <sin>
 8002740:	eeb0 7b40 	vmov.f64	d7, d0
 8002744:	ee2d 7b07 	vmul.f64	d7, d13, d7
 8002748:	ee3c 7b07 	vadd.f64	d7, d12, d7
									* (cos(q[1]) * sin(q[2])
 800274c:	ee2b 7b07 	vmul.f64	d7, d11, d7
							- h_Pne_tmp
 8002750:	ee3a 7b47 	vsub.f64	d7, d10, d7
					* (g_Pne_tmp
 8002754:	ee29 7b07 	vmul.f64	d7, d9, d7
			- l3
 8002758:	ee38 7b47 	vsub.f64	d7, d8, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3308      	adds	r3, #8
			- l3
 8002760:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002764:	edc3 7a00 	vstr	s15, [r3]
}
 8002768:	bf00      	nop
 800276a:	3730      	adds	r7, #48	; 0x30
 800276c:	46bd      	mov	sp, r7
 800276e:	ecbd 8b0c 	vpop	{d8-d13}
 8002772:	bd80      	pop	{r7, pc}
 8002774:	0000      	movs	r0, r0
	...

08002778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800277e:	f003 f827 	bl	80057d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002782:	f000 fa51 	bl	8002c28 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002786:	f000 fac7 	bl	8002d18 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800278a:	f7ff f857 	bl	800183c <MX_GPIO_Init>
  MX_DMA_Init();
 800278e:	f7ff f825 	bl	80017dc <MX_DMA_Init>
  MX_ADC3_Init();
 8002792:	f7fe f999 	bl	8000ac8 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002796:	f001 fd2f 	bl	80041f8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800279a:	f001 fdbd 	bl	8004318 <MX_TIM3_Init>
  MX_TIM4_Init();
 800279e:	f001 fe33 	bl	8004408 <MX_TIM4_Init>
  MX_TIM5_Init();
 80027a2:	f001 fe87 	bl	80044b4 <MX_TIM5_Init>
  MX_TIM8_Init();
 80027a6:	f001 ff41 	bl	800462c <MX_TIM8_Init>
  MX_TIM13_Init();
 80027aa:	f001 ff99 	bl	80046e0 <MX_TIM13_Init>
  MX_TIM14_Init();
 80027ae:	f001 ffe7 	bl	8004780 <MX_TIM14_Init>
  MX_TIM15_Init();
 80027b2:	f002 f835 	bl	8004820 <MX_TIM15_Init>
  MX_TIM16_Init();
 80027b6:	f002 f8bb 	bl	8004930 <MX_TIM16_Init>
  MX_TIM17_Init();
 80027ba:	f002 f935 	bl	8004a28 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80027be:	f002 fe13 	bl	80053e8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80027c2:	f002 fe5f 	bl	8005484 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 80027c6:	f001 faa3 	bl	8003d10 <MX_SPI3_Init>
  MX_SPI4_Init();
 80027ca:	f001 faf9 	bl	8003dc0 <MX_SPI4_Init>
  MX_I2C2_Init();
 80027ce:	f7ff f991 	bl	8001af4 <MX_I2C2_Init>
  MX_CRC_Init();
 80027d2:	f7fe ffb5 	bl	8001740 <MX_CRC_Init>
  MX_TIM24_Init();
 80027d6:	f002 f9f3 	bl	8004bc0 <MX_TIM24_Init>
  MX_TIM23_Init();
 80027da:	f002 f9a1 	bl	8004b20 <MX_TIM23_Init>
  MX_TIM6_Init();
 80027de:	f001 feed 	bl	80045bc <MX_TIM6_Init>
  MX_UART5_Init();
 80027e2:	f002 fdaf 	bl	8005344 <MX_UART5_Init>
  MX_ADC1_Init();
 80027e6:	f7fe f893 	bl	8000910 <MX_ADC1_Init>
  MX_ADC2_Init();
 80027ea:	f7fe f90d 	bl	8000a08 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  	MX_DMA_Init();
 80027ee:	f7fe fff5 	bl	80017dc <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 80027f2:	2201      	movs	r2, #1
 80027f4:	2140      	movs	r1, #64	; 0x40
 80027f6:	48c2      	ldr	r0, [pc, #776]	; (8002b00 <main+0x388>)
 80027f8:	f008 f8d6 	bl	800a9a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 80027fc:	2201      	movs	r2, #1
 80027fe:	2140      	movs	r1, #64	; 0x40
 8002800:	48c0      	ldr	r0, [pc, #768]	; (8002b04 <main+0x38c>)
 8002802:	f008 f8d1 	bl	800a9a8 <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 8002806:	4bc0      	ldr	r3, [pc, #768]	; (8002b08 <main+0x390>)
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	4bbf      	ldr	r3, [pc, #764]	; (8002b0c <main+0x394>)
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800281a:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8002ae8 <main+0x370>
 800281e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002822:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002826:	4bba      	ldr	r3, [pc, #744]	; (8002b10 <main+0x398>)
 8002828:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800282c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002830:	2100      	movs	r1, #0
 8002832:	48b8      	ldr	r0, [pc, #736]	; (8002b14 <main+0x39c>)
 8002834:	f005 f858 	bl	80078e8 <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0,6500);
 8002838:	2301      	movs	r3, #1
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8002b18 <main+0x3a0>
 8002840:	4bb6      	ldr	r3, [pc, #728]	; (8002b1c <main+0x3a4>)
 8002842:	4aaf      	ldr	r2, [pc, #700]	; (8002b00 <main+0x388>)
 8002844:	49b6      	ldr	r1, [pc, #728]	; (8002b20 <main+0x3a8>)
 8002846:	48b7      	ldr	r0, [pc, #732]	; (8002b24 <main+0x3ac>)
 8002848:	f7fd ff06 	bl	8000658 <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1,10100);
 800284c:	2302      	movs	r3, #2
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8002b28 <main+0x3b0>
 8002854:	4bb1      	ldr	r3, [pc, #708]	; (8002b1c <main+0x3a4>)
 8002856:	4aaa      	ldr	r2, [pc, #680]	; (8002b00 <main+0x388>)
 8002858:	49b1      	ldr	r1, [pc, #708]	; (8002b20 <main+0x3a8>)
 800285a:	48b4      	ldr	r0, [pc, #720]	; (8002b2c <main+0x3b4>)
 800285c:	f7fd fefc 	bl	8000658 <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2,3165);
 8002860:	2304      	movs	r3, #4
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8002b30 <main+0x3b8>
 8002868:	4bac      	ldr	r3, [pc, #688]	; (8002b1c <main+0x3a4>)
 800286a:	4aa5      	ldr	r2, [pc, #660]	; (8002b00 <main+0x388>)
 800286c:	49ac      	ldr	r1, [pc, #688]	; (8002b20 <main+0x3a8>)
 800286e:	48b1      	ldr	r0, [pc, #708]	; (8002b34 <main+0x3bc>)
 8002870:	f7fd fef2 	bl	8000658 <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3,6970);
 8002874:	2308      	movs	r3, #8
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8002b38 <main+0x3c0>
 800287c:	4ba7      	ldr	r3, [pc, #668]	; (8002b1c <main+0x3a4>)
 800287e:	4aa0      	ldr	r2, [pc, #640]	; (8002b00 <main+0x388>)
 8002880:	49a7      	ldr	r1, [pc, #668]	; (8002b20 <main+0x3a8>)
 8002882:	48ae      	ldr	r0, [pc, #696]	; (8002b3c <main+0x3c4>)
 8002884:	f7fd fee8 	bl	8000658 <AS5047U_init>

	HAL_Delay(50);
 8002888:	2032      	movs	r0, #50	; 0x32
 800288a:	f003 f833 	bl	80058f4 <HAL_Delay>
//	AS5047U_Write(&Encoder[0], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[1], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[2], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[3], 0x0019, 0b00100000);

	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 800288e:	2240      	movs	r2, #64	; 0x40
 8002890:	211a      	movs	r1, #26
 8002892:	48a4      	ldr	r0, [pc, #656]	; (8002b24 <main+0x3ac>)
 8002894:	f7fd ff28 	bl	80006e8 <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 8002898:	2240      	movs	r2, #64	; 0x40
 800289a:	211a      	movs	r1, #26
 800289c:	48a3      	ldr	r0, [pc, #652]	; (8002b2c <main+0x3b4>)
 800289e:	f7fd ff23 	bl	80006e8 <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	211a      	movs	r1, #26
 80028a6:	48a3      	ldr	r0, [pc, #652]	; (8002b34 <main+0x3bc>)
 80028a8:	f7fd ff1e 	bl	80006e8 <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 80028ac:	2240      	movs	r2, #64	; 0x40
 80028ae:	211a      	movs	r1, #26
 80028b0:	48a2      	ldr	r0, [pc, #648]	; (8002b3c <main+0x3c4>)
 80028b2:	f7fd ff19 	bl	80006e8 <AS5047U_Write>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 2000, 0.003);
 80028b6:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 8002af0 <main+0x378>
 80028ba:	ed9f 0b8f 	vldr	d0, [pc, #572]	; 8002af8 <main+0x380>
 80028be:	48a0      	ldr	r0, [pc, #640]	; (8002b40 <main+0x3c8>)
 80028c0:	f7fe fbd8 	bl	8001074 <Kalman_init>
	Kalman_init(&Kalman[1], 2000, 0.003);
 80028c4:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8002af0 <main+0x378>
 80028c8:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8002af8 <main+0x380>
 80028cc:	489d      	ldr	r0, [pc, #628]	; (8002b44 <main+0x3cc>)
 80028ce:	f7fe fbd1 	bl	8001074 <Kalman_init>
	Kalman_init(&Kalman[2], 2000, 0.003);
 80028d2:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8002af0 <main+0x378>
 80028d6:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8002af8 <main+0x380>
 80028da:	489b      	ldr	r0, [pc, #620]	; (8002b48 <main+0x3d0>)
 80028dc:	f7fe fbca 	bl	8001074 <Kalman_init>
	Kalman_init(&Kalman[3], 2000, 0.003);
 80028e0:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8002af0 <main+0x378>
 80028e4:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8002af8 <main+0x380>
 80028e8:	4898      	ldr	r0, [pc, #608]	; (8002b4c <main+0x3d4>)
 80028ea:	f7fe fbc3 	bl	8001074 <Kalman_init>

	/*			CascadeControl			*/
	CascadeControl_init(&Control[0], 0.6, 0, 0, 15, 0.5, 10, 400);
 80028ee:	ed9f 3a98 	vldr	s6, [pc, #608]	; 8002b50 <main+0x3d8>
 80028f2:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 80028f6:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 80028fa:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 80028fe:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8002b54 <main+0x3dc>
 8002902:	eddf 0a94 	vldr	s1, [pc, #592]	; 8002b54 <main+0x3dc>
 8002906:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002b58 <main+0x3e0>
 800290a:	4894      	ldr	r0, [pc, #592]	; (8002b5c <main+0x3e4>)
 800290c:	f7fe fe80 	bl	8001610 <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.7, 0, 0.3, 10, 0.1, 5, 430);
 8002910:	ed9f 3a93 	vldr	s6, [pc, #588]	; 8002b60 <main+0x3e8>
 8002914:	eef1 2a04 	vmov.f32	s5, #20	; 0x40a00000  5.0
 8002918:	ed9f 2a92 	vldr	s4, [pc, #584]	; 8002b64 <main+0x3ec>
 800291c:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002920:	ed9f 1a91 	vldr	s2, [pc, #580]	; 8002b68 <main+0x3f0>
 8002924:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8002b54 <main+0x3dc>
 8002928:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8002b6c <main+0x3f4>
 800292c:	4890      	ldr	r0, [pc, #576]	; (8002b70 <main+0x3f8>)
 800292e:	f7fe fe6f 	bl	8001610 <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.7, 0, 0, 10, 0.2, 0, 450);
 8002932:	ed9f 3a90 	vldr	s6, [pc, #576]	; 8002b74 <main+0x3fc>
 8002936:	eddf 2a87 	vldr	s5, [pc, #540]	; 8002b54 <main+0x3dc>
 800293a:	ed9f 2a8f 	vldr	s4, [pc, #572]	; 8002b78 <main+0x400>
 800293e:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002942:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8002b54 <main+0x3dc>
 8002946:	eddf 0a83 	vldr	s1, [pc, #524]	; 8002b54 <main+0x3dc>
 800294a:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8002b6c <main+0x3f4>
 800294e:	488b      	ldr	r0, [pc, #556]	; (8002b7c <main+0x404>)
 8002950:	f7fe fe5e 	bl	8001610 <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.8, 0.005, 0, 10, 0.1, 3, 470);
 8002954:	ed9f 3a8a 	vldr	s6, [pc, #552]	; 8002b80 <main+0x408>
 8002958:	eef0 2a08 	vmov.f32	s5, #8	; 0x40400000  3.0
 800295c:	ed9f 2a81 	vldr	s4, [pc, #516]	; 8002b64 <main+0x3ec>
 8002960:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8002964:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8002b54 <main+0x3dc>
 8002968:	eddf 0a86 	vldr	s1, [pc, #536]	; 8002b84 <main+0x40c>
 800296c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8002b88 <main+0x410>
 8002970:	4886      	ldr	r0, [pc, #536]	; (8002b8c <main+0x414>)
 8002972:	f7fe fe4d 	bl	8001610 <CascadeControl_init>
//	CascadeControl_init(&Control[1], 0.7, 0, 0, 6, 0.2, 8, 190);
//	CascadeControl_init(&Control[2], 0.7, 0, 0, 6, 0.20, 8, 190);
//	CascadeControl_init(&Control[3], 0.7, 0, 0, 6, 0.20, 8, 150);

	/*  Power Supply Temperature Sensor */
	TPM75_init(&TempSensor, &hi2c2, 0, 0, 1);
 8002976:	2301      	movs	r3, #1
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	2200      	movs	r2, #0
 800297e:	4984      	ldr	r1, [pc, #528]	; (8002b90 <main+0x418>)
 8002980:	4884      	ldr	r0, [pc, #528]	; (8002b94 <main+0x41c>)
 8002982:	f7fd ffb1 	bl	80008e8 <TPM75_init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8002986:	2101      	movs	r1, #1
 8002988:	4866      	ldr	r0, [pc, #408]	; (8002b24 <main+0x3ac>)
 800298a:	f7fd fe43 	bl	8000614 <EncPulse2Rad_Read>
 800298e:	eef0 7a40 	vmov.f32	s15, s0
 8002992:	4b81      	ldr	r3, [pc, #516]	; (8002b98 <main+0x420>)
 8002994:	edc3 7a00 	vstr	s15, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8002998:	2100      	movs	r1, #0
 800299a:	4864      	ldr	r0, [pc, #400]	; (8002b2c <main+0x3b4>)
 800299c:	f7fd fe3a 	bl	8000614 <EncPulse2Rad_Read>
 80029a0:	eef0 7a40 	vmov.f32	s15, s0
 80029a4:	4b7c      	ldr	r3, [pc, #496]	; (8002b98 <main+0x420>)
 80029a6:	edc3 7a01 	vstr	s15, [r3, #4]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 80029aa:	2100      	movs	r1, #0
 80029ac:	4861      	ldr	r0, [pc, #388]	; (8002b34 <main+0x3bc>)
 80029ae:	f7fd fe31 	bl	8000614 <EncPulse2Rad_Read>
 80029b2:	eef0 7a40 	vmov.f32	s15, s0
 80029b6:	4b78      	ldr	r3, [pc, #480]	; (8002b98 <main+0x420>)
 80029b8:	edc3 7a02 	vstr	s15, [r3, #8]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 80029bc:	2100      	movs	r1, #0
 80029be:	485f      	ldr	r0, [pc, #380]	; (8002b3c <main+0x3c4>)
 80029c0:	f7fd fe28 	bl	8000614 <EncPulse2Rad_Read>
 80029c4:	eef0 7a40 	vmov.f32	s15, s0
 80029c8:	4b73      	ldr	r3, [pc, #460]	; (8002b98 <main+0x420>)
 80029ca:	edc3 7a03 	vstr	s15, [r3, #12]
	SetPoint_Velocity[0] = 0;
 80029ce:	4b73      	ldr	r3, [pc, #460]	; (8002b9c <main+0x424>)
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]
	SetPoint_Velocity[1] = 0;
 80029d6:	4b71      	ldr	r3, [pc, #452]	; (8002b9c <main+0x424>)
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	605a      	str	r2, [r3, #4]
	SetPoint_Velocity[2] = 0;
 80029de:	4b6f      	ldr	r3, [pc, #444]	; (8002b9c <main+0x424>)
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
	SetPoint_Velocity[3] = 0;
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <main+0x424>)
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	60da      	str	r2, [r3, #12]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 80029ee:	2301      	movs	r3, #1
 80029f0:	9302      	str	r3, [sp, #8]
 80029f2:	4b6b      	ldr	r3, [pc, #428]	; (8002ba0 <main+0x428>)
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2301      	movs	r3, #1
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <main+0x38c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	4969      	ldr	r1, [pc, #420]	; (8002ba4 <main+0x42c>)
 8002a00:	4869      	ldr	r0, [pc, #420]	; (8002ba8 <main+0x430>)
 8002a02:	f7fe f97f 	bl	8000d04 <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 8002a06:	2300      	movs	r3, #0
 8002a08:	9302      	str	r3, [sp, #8]
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <main+0x428>)
 8002a0c:	9301      	str	r3, [sp, #4]
 8002a0e:	2302      	movs	r3, #2
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	4b3c      	ldr	r3, [pc, #240]	; (8002b04 <main+0x38c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	4965      	ldr	r1, [pc, #404]	; (8002bac <main+0x434>)
 8002a18:	4865      	ldr	r0, [pc, #404]	; (8002bb0 <main+0x438>)
 8002a1a:	f7fe f973 	bl	8000d04 <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 0);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9302      	str	r3, [sp, #8]
 8002a22:	4b5f      	ldr	r3, [pc, #380]	; (8002ba0 <main+0x428>)
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	2304      	movs	r3, #4
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <main+0x38c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	4961      	ldr	r1, [pc, #388]	; (8002bb4 <main+0x43c>)
 8002a30:	4861      	ldr	r0, [pc, #388]	; (8002bb8 <main+0x440>)
 8002a32:	f7fe f967 	bl	8000d04 <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 0);
 8002a36:	2300      	movs	r3, #0
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	4b59      	ldr	r3, [pc, #356]	; (8002ba0 <main+0x428>)
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	2308      	movs	r3, #8
 8002a40:	9300      	str	r3, [sp, #0]
 8002a42:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <main+0x38c>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	495d      	ldr	r1, [pc, #372]	; (8002bbc <main+0x444>)
 8002a48:	485d      	ldr	r0, [pc, #372]	; (8002bc0 <main+0x448>)
 8002a4a:	f7fe f95b 	bl	8000d04 <Step_Driver_init>

	/*			Trajectory			*/

	Test_traj_Val[0] = 0;
 8002a4e:	4b5d      	ldr	r3, [pc, #372]	; (8002bc4 <main+0x44c>)
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
	Test_traj_Val[1] = 0;
 8002a56:	4b5b      	ldr	r3, [pc, #364]	; (8002bc4 <main+0x44c>)
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	605a      	str	r2, [r3, #4]
	Test_traj_Val[2] = 0;
 8002a5e:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <main+0x44c>)
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
	Test_traj_Val[3] = 0;
 8002a66:	4b57      	ldr	r3, [pc, #348]	; (8002bc4 <main+0x44c>)
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
	Traj_Flag = 0;
 8002a6e:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <main+0x450>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
	t = 0;
 8002a74:	4b55      	ldr	r3, [pc, #340]	; (8002bcc <main+0x454>)
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 8002a7c:	4854      	ldr	r0, [pc, #336]	; (8002bd0 <main+0x458>)
 8002a7e:	f00d ff79 	bl	8010974 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8002a82:	220e      	movs	r2, #14
 8002a84:	4953      	ldr	r1, [pc, #332]	; (8002bd4 <main+0x45c>)
 8002a86:	4854      	ldr	r0, [pc, #336]	; (8002bd8 <main+0x460>)
 8002a88:	f00f fce8 	bl	801245c <HAL_UART_Receive_IT>
//				Traj_Coeff_Cal(&Traj[i], T_tune_PID, Joint[i], Control[i].PositionFeedback, Control[i].VelocityFeedback);
//			}
//			Traj_Flag = 0x0F;
//	   }

		if (Contorl_Flag) {
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <main+0x464>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d004      	beq.n	8002a9e <main+0x326>
			Control_Function();
 8002a94:	f001 f804 	bl	8003aa0 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <main+0x464>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 8002a9e:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <main+0x468>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d004      	beq.n	8002ab0 <main+0x338>
			Narwhal_Protocol();
 8002aa6:	f000 fa1f 	bl	8002ee8 <Narwhal_Protocol>
			Protocol_Flag = 0;
 8002aaa:	4b4d      	ldr	r3, [pc, #308]	; (8002be0 <main+0x468>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10){
 8002ab0:	f002 ff14 	bl	80058dc <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <main+0x46c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b09      	cmp	r3, #9
 8002abe:	f240 8098 	bls.w	8002bf2 <main+0x47a>
			Software_Timer_100ms = HAL_GetTick();
 8002ac2:	f002 ff0b 	bl	80058dc <HAL_GetTick>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4a46      	ldr	r2, [pc, #280]	; (8002be4 <main+0x46c>)
 8002aca:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 							//	read temperature sensor
 8002acc:	4811      	ldr	r0, [pc, #68]	; (8002b14 <main+0x39c>)
 8002ace:	f003 fc13 	bl	80062f8 <HAL_ADC_Start_IT>
//			TPM75_TempRead(&TempSensor);
			HAL_I2C_Mem_Read_IT(&hi2c2, 0x92, 0x00,
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	4b44      	ldr	r3, [pc, #272]	; (8002be8 <main+0x470>)
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2301      	movs	r3, #1
 8002adc:	2200      	movs	r2, #0
 8002ade:	2192      	movs	r1, #146	; 0x92
 8002ae0:	e084      	b.n	8002bec <main+0x474>
 8002ae2:	bf00      	nop
 8002ae4:	f3af 8000 	nop.w
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	40540000 	.word	0x40540000
 8002af0:	bc6a7efa 	.word	0xbc6a7efa
 8002af4:	3f689374 	.word	0x3f689374
 8002af8:	00000000 	.word	0x00000000
 8002afc:	409f4000 	.word	0x409f4000
 8002b00:	58020c00 	.word	0x58020c00
 8002b04:	58021000 	.word	0x58021000
 8002b08:	1ff1e840 	.word	0x1ff1e840
 8002b0c:	1ff1e820 	.word	0x1ff1e820
 8002b10:	20000228 	.word	0x20000228
 8002b14:	20000140 	.word	0x20000140
 8002b18:	45cb2000 	.word	0x45cb2000
 8002b1c:	200001b4 	.word	0x200001b4
 8002b20:	20000768 	.word	0x20000768
 8002b24:	2000022c 	.word	0x2000022c
 8002b28:	461dd000 	.word	0x461dd000
 8002b2c:	2000024c 	.word	0x2000024c
 8002b30:	4545d000 	.word	0x4545d000
 8002b34:	2000026c 	.word	0x2000026c
 8002b38:	45d9d000 	.word	0x45d9d000
 8002b3c:	2000028c 	.word	0x2000028c
 8002b40:	200002ac 	.word	0x200002ac
 8002b44:	200002cc 	.word	0x200002cc
 8002b48:	200002ec 	.word	0x200002ec
 8002b4c:	2000030c 	.word	0x2000030c
 8002b50:	43c80000 	.word	0x43c80000
 8002b54:	00000000 	.word	0x00000000
 8002b58:	3f19999a 	.word	0x3f19999a
 8002b5c:	2000032c 	.word	0x2000032c
 8002b60:	43d70000 	.word	0x43d70000
 8002b64:	3dcccccd 	.word	0x3dcccccd
 8002b68:	3e99999a 	.word	0x3e99999a
 8002b6c:	3f333333 	.word	0x3f333333
 8002b70:	20000398 	.word	0x20000398
 8002b74:	43e10000 	.word	0x43e10000
 8002b78:	3e4ccccd 	.word	0x3e4ccccd
 8002b7c:	20000404 	.word	0x20000404
 8002b80:	43eb0000 	.word	0x43eb0000
 8002b84:	3ba3d70a 	.word	0x3ba3d70a
 8002b88:	3f4ccccd 	.word	0x3f4ccccd
 8002b8c:	20000470 	.word	0x20000470
 8002b90:	200001d8 	.word	0x200001d8
 8002b94:	200006a4 	.word	0x200006a4
 8002b98:	20000720 	.word	0x20000720
 8002b9c:	20000730 	.word	0x20000730
 8002ba0:	0007a120 	.word	0x0007a120
 8002ba4:	20000a40 	.word	0x20000a40
 8002ba8:	200004dc 	.word	0x200004dc
 8002bac:	20000a8c 	.word	0x20000a8c
 8002bb0:	200004f0 	.word	0x200004f0
 8002bb4:	20000ad8 	.word	0x20000ad8
 8002bb8:	20000504 	.word	0x20000504
 8002bbc:	20000b24 	.word	0x20000b24
 8002bc0:	20000518 	.word	0x20000518
 8002bc4:	20000744 	.word	0x20000744
 8002bc8:	20000755 	.word	0x20000755
 8002bcc:	20000740 	.word	0x20000740
 8002bd0:	20000bbc 	.word	0x20000bbc
 8002bd4:	20000010 	.word	0x20000010
 8002bd8:	20000ccc 	.word	0x20000ccc
 8002bdc:	20000754 	.word	0x20000754
 8002be0:	20000756 	.word	0x20000756
 8002be4:	2000075c 	.word	0x2000075c
 8002be8:	20000760 	.word	0x20000760
 8002bec:	480b      	ldr	r0, [pc, #44]	; (8002c1c <main+0x4a4>)
 8002bee:	f007 ff9f 	bl	800ab30 <HAL_I2C_Mem_Read_IT>
				I2C_MEMADD_SIZE_8BIT, Buffer_TPM75, 2);
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 8002bf2:	f002 fe73 	bl	80058dc <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <main+0x4a8>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c02:	f4ff af43 	bcc.w	8002a8c <main+0x314>
			Software_Timer_1s = HAL_GetTick();
 8002c06:	f002 fe69 	bl	80058dc <HAL_GetTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <main+0x4a8>)
 8002c0e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8002c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c14:	4803      	ldr	r0, [pc, #12]	; (8002c24 <main+0x4ac>)
 8002c16:	f007 fee0 	bl	800a9da <HAL_GPIO_TogglePin>
		if (Contorl_Flag) {
 8002c1a:	e737      	b.n	8002a8c <main+0x314>
 8002c1c:	200001d8 	.word	0x200001d8
 8002c20:	20000758 	.word	0x20000758
 8002c24:	58020800 	.word	0x58020800

08002c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b09c      	sub	sp, #112	; 0x70
 8002c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c32:	224c      	movs	r2, #76	; 0x4c
 8002c34:	2100      	movs	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f012 f95c 	bl	8014ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	2220      	movs	r2, #32
 8002c40:	2100      	movs	r1, #0
 8002c42:	4618      	mov	r0, r3
 8002c44:	f012 f956 	bl	8014ef4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f009 fe8f 	bl	800c96c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <SystemClock_Config+0xe8>)
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	4a2e      	ldr	r2, [pc, #184]	; (8002d10 <SystemClock_Config+0xe8>)
 8002c58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002c5c:	6193      	str	r3, [r2, #24]
 8002c5e:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <SystemClock_Config+0xe8>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002c6a:	bf00      	nop
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <SystemClock_Config+0xe8>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c78:	d1f8      	bne.n	8002c6c <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8002c7a:	4b26      	ldr	r3, [pc, #152]	; (8002d14 <SystemClock_Config+0xec>)
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f023 0303 	bic.w	r3, r3, #3
 8002c82:	4a24      	ldr	r2, [pc, #144]	; (8002d14 <SystemClock_Config+0xec>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c94:	2302      	movs	r3, #2
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8002ca0:	232c      	movs	r3, #44	; 0x2c
 8002ca2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002cac:	2302      	movs	r3, #2
 8002cae:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002cb0:	230c      	movs	r3, #12
 8002cb2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f009 fe8d 	bl	800c9e0 <HAL_RCC_OscConfig>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002ccc:	f001 f81a 	bl	8003d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cd0:	233f      	movs	r3, #63	; 0x3f
 8002cd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002cdc:	2308      	movs	r3, #8
 8002cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002ce0:	2340      	movs	r3, #64	; 0x40
 8002ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002ce4:	2340      	movs	r3, #64	; 0x40
 8002ce6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002cee:	2340      	movs	r3, #64	; 0x40
 8002cf0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2103      	movs	r1, #3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f00a fa20 	bl	800d13c <HAL_RCC_ClockConfig>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8002d02:	f000 ffff 	bl	8003d04 <Error_Handler>
  }
}
 8002d06:	bf00      	nop
 8002d08:	3770      	adds	r7, #112	; 0x70
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	58024800 	.word	0x58024800
 8002d14:	58024400 	.word	0x58024400

08002d18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0ae      	sub	sp, #184	; 0xb8
 8002d1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	22b4      	movs	r2, #180	; 0xb4
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f012 f8e5 	bl	8014ef4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <PeriphCommonClock_Config+0x64>)
 8002d2c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8002d32:	2310      	movs	r3, #16
 8002d34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002d36:	2302      	movs	r3, #2
 8002d38:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002d42:	23c0      	movs	r3, #192	; 0xc0
 8002d44:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8002d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d52:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8002d54:	2301      	movs	r3, #1
 8002d56:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8002d58:	2308      	movs	r3, #8
 8002d5a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d62:	1d3b      	adds	r3, r7, #4
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00a fd75 	bl	800d854 <HAL_RCCEx_PeriphCLKConfig>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002d70:	f000 ffc8 	bl	8003d04 <Error_Handler>
  }
}
 8002d74:	bf00      	nop
 8002d76:	37b8      	adds	r7, #184	; 0xb8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	00082003 	.word	0x00082003

08002d80 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a06      	ldr	r2, [pc, #24]	; (8002da4 <HAL_UART_RxCpltCallback+0x24>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d102      	bne.n	8002d96 <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_UART_RxCpltCallback+0x28>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
	}
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	20000ccc 	.word	0x20000ccc
 8002da8:	20000756 	.word	0x20000756

08002dac <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(Neopixel.htim, TIM_CHANNEL_1);
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002db6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f00d ffd3 	bl	8010d68 <HAL_TIM_PWM_Stop_DMA>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	2000052c 	.word	0x2000052c

08002dd0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_ADC_ConvCpltCallback+0x6c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d129      	bne.n	8002e34 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 8002de0:	4816      	ldr	r0, [pc, #88]	; (8002e3c <HAL_ADC_ConvCpltCallback+0x6c>)
 8002de2:	f003 fbc9 	bl	8006578 <HAL_ADC_GetValue>
 8002de6:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 9)
 8002de8:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_ADC_ConvCpltCallback+0x70>)
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8002df2:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (Temp_Calibration
						* (float) ((float) ADC_Output
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <HAL_ADC_ConvCpltCallback+0x74>)
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	ee07 3a90 	vmov	s15, r3
						* (float) ((float) ADC_Output
 8002e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e0c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_ADC_ConvCpltCallback+0x78>)
 8002e12:	edd3 7a00 	vldr	s15, [r3]
 8002e16:	ee66 7aa7 	vmul.f32	s15, s13, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 8002e1a:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
				+ (Temp_Calibration
 8002e22:	ee37 7a27 	vadd.f32	s14, s14, s15
				/ 10;
 8002e26:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002e2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		Temperature = ((Temperature * 9)
 8002e2e:	4b04      	ldr	r3, [pc, #16]	; (8002e40 <HAL_ADC_ConvCpltCallback+0x70>)
 8002e30:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002e34:	bf00      	nop
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000140 	.word	0x20000140
 8002e40:	20000224 	.word	0x20000224
 8002e44:	1ff1e820 	.word	0x1ff1e820
 8002e48:	20000228 	.word	0x20000228

08002e4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d102      	bne.n	8002e62 <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
	}
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	20000bbc 	.word	0x20000bbc
 8002e74:	20000754 	.word	0x20000754

08002e78 <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	461a      	mov	r2, r3
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4805      	ldr	r0, [pc, #20]	; (8002ea0 <CRC8+0x28>)
 8002e8c:	f005 f818 	bl	8007ec0 <HAL_CRC_Calculate>
 8002e90:	4603      	mov	r3, r0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200001b4 	.word	0x200001b4

08002ea4 <SentData>:
inline void SentData(uint8_t range){
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 8002eae:	79fc      	ldrb	r4, [r7, #7]
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4809      	ldr	r0, [pc, #36]	; (8002edc <SentData+0x38>)
 8002eb6:	f7ff ffdf 	bl	8002e78 <CRC8>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <SentData+0x38>)
 8002ec0:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4903      	ldr	r1, [pc, #12]	; (8002edc <SentData+0x38>)
 8002ece:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <SentData+0x3c>)
 8002ed0:	f00f fa1c 	bl	801230c <HAL_UART_Transmit_IT>
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd90      	pop	{r4, r7, pc}
 8002edc:	20000020 	.word	0x20000020
 8002ee0:	20000ccc 	.word	0x20000ccc
 8002ee4:	00000000 	.word	0x00000000

08002ee8 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b0ae      	sub	sp, #184	; 0xb8
 8002eec:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 8002eee:	4bbd      	ldr	r3, [pc, #756]	; (80031e4 <Narwhal_Protocol+0x2fc>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2bff      	cmp	r3, #255	; 0xff
 8002ef4:	f040 85b4 	bne.w	8003a60 <Narwhal_Protocol+0xb78>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 8002ef8:	210d      	movs	r1, #13
 8002efa:	48ba      	ldr	r0, [pc, #744]	; (80031e4 <Narwhal_Protocol+0x2fc>)
 8002efc:	f7ff ffbc 	bl	8002e78 <CRC8>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		if (CRC_Cal == UART5_rxBuffer[13]) {
 8002f06:	4bb7      	ldr	r3, [pc, #732]	; (80031e4 <Narwhal_Protocol+0x2fc>)
 8002f08:	7b5b      	ldrb	r3, [r3, #13]
 8002f0a:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	f040 859f 	bne.w	8003a52 <Narwhal_Protocol+0xb6a>
			UART5_txBuffer[0] = 0xFF;
 8002f14:	4bb4      	ldr	r3, [pc, #720]	; (80031e8 <Narwhal_Protocol+0x300>)
 8002f16:	22ff      	movs	r2, #255	; 0xff
 8002f18:	701a      	strb	r2, [r3, #0]

			float q_Feed[4];
			float dq[4];
			float d_Task[3];
			float q_in[5] = {0,0,0,0,0};
 8002f1a:	f107 031c 	add.w	r3, r7, #28
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	609a      	str	r2, [r3, #8]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	611a      	str	r2, [r3, #16]
			float task[3] = { -500, 300, 50 };
 8002f2a:	4ab0      	ldr	r2, [pc, #704]	; (80031ec <Narwhal_Protocol+0x304>)
 8002f2c:	f107 0310 	add.w	r3, r7, #16
 8002f30:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			uint16_t Temperature_Protocol = Temperature * 1000;
 8002f36:	4bae      	ldr	r3, [pc, #696]	; (80031f0 <Narwhal_Protocol+0x308>)
 8002f38:	edd3 7a00 	vldr	s15, [r3]
 8002f3c:	ed9f 7aad 	vldr	s14, [pc, #692]	; 80031f4 <Narwhal_Protocol+0x30c>
 8002f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f48:	ee17 3a90 	vmov	r3, s15
 8002f4c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 8002f50:	4ba4      	ldr	r3, [pc, #656]	; (80031e4 <Narwhal_Protocol+0x2fc>)
 8002f52:	785b      	ldrb	r3, [r3, #1]
 8002f54:	3ba0      	subs	r3, #160	; 0xa0
 8002f56:	2b5f      	cmp	r3, #95	; 0x5f
 8002f58:	f200 8574 	bhi.w	8003a44 <Narwhal_Protocol+0xb5c>
 8002f5c:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <Narwhal_Protocol+0x7c>)
 8002f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f62:	bf00      	nop
 8002f64:	08003645 	.word	0x08003645
 8002f68:	0800366b 	.word	0x0800366b
 8002f6c:	08003691 	.word	0x08003691
 8002f70:	08003a45 	.word	0x08003a45
 8002f74:	08003a45 	.word	0x08003a45
 8002f78:	08003a45 	.word	0x08003a45
 8002f7c:	08003a45 	.word	0x08003a45
 8002f80:	08003a45 	.word	0x08003a45
 8002f84:	08003a45 	.word	0x08003a45
 8002f88:	08003a45 	.word	0x08003a45
 8002f8c:	080036f5 	.word	0x080036f5
 8002f90:	08003779 	.word	0x08003779
 8002f94:	08003a45 	.word	0x08003a45
 8002f98:	08003a45 	.word	0x08003a45
 8002f9c:	08003a45 	.word	0x08003a45
 8002fa0:	0800383b 	.word	0x0800383b
 8002fa4:	08003a45 	.word	0x08003a45
 8002fa8:	08003a45 	.word	0x08003a45
 8002fac:	08003a45 	.word	0x08003a45
 8002fb0:	08003a45 	.word	0x08003a45
 8002fb4:	08003a45 	.word	0x08003a45
 8002fb8:	08003a45 	.word	0x08003a45
 8002fbc:	08003a45 	.word	0x08003a45
 8002fc0:	08003a45 	.word	0x08003a45
 8002fc4:	08003a45 	.word	0x08003a45
 8002fc8:	08003a45 	.word	0x08003a45
 8002fcc:	08003a45 	.word	0x08003a45
 8002fd0:	08003a45 	.word	0x08003a45
 8002fd4:	08003a45 	.word	0x08003a45
 8002fd8:	08003a45 	.word	0x08003a45
 8002fdc:	08003a45 	.word	0x08003a45
 8002fe0:	08003a45 	.word	0x08003a45
 8002fe4:	08003a45 	.word	0x08003a45
 8002fe8:	08003a45 	.word	0x08003a45
 8002fec:	08003a45 	.word	0x08003a45
 8002ff0:	08003a45 	.word	0x08003a45
 8002ff4:	08003a45 	.word	0x08003a45
 8002ff8:	08003a45 	.word	0x08003a45
 8002ffc:	08003a45 	.word	0x08003a45
 8003000:	08003a45 	.word	0x08003a45
 8003004:	08003a45 	.word	0x08003a45
 8003008:	08003a45 	.word	0x08003a45
 800300c:	08003a45 	.word	0x08003a45
 8003010:	08003a45 	.word	0x08003a45
 8003014:	08003a45 	.word	0x08003a45
 8003018:	08003a45 	.word	0x08003a45
 800301c:	08003a45 	.word	0x08003a45
 8003020:	08003a45 	.word	0x08003a45
 8003024:	08003a45 	.word	0x08003a45
 8003028:	08003a45 	.word	0x08003a45
 800302c:	08003a45 	.word	0x08003a45
 8003030:	08003a45 	.word	0x08003a45
 8003034:	08003a45 	.word	0x08003a45
 8003038:	08003a45 	.word	0x08003a45
 800303c:	08003a45 	.word	0x08003a45
 8003040:	08003a45 	.word	0x08003a45
 8003044:	08003a45 	.word	0x08003a45
 8003048:	08003a45 	.word	0x08003a45
 800304c:	08003a45 	.word	0x08003a45
 8003050:	08003a45 	.word	0x08003a45
 8003054:	08003a45 	.word	0x08003a45
 8003058:	08003a45 	.word	0x08003a45
 800305c:	08003a45 	.word	0x08003a45
 8003060:	08003a45 	.word	0x08003a45
 8003064:	08003a45 	.word	0x08003a45
 8003068:	08003a45 	.word	0x08003a45
 800306c:	08003a45 	.word	0x08003a45
 8003070:	08003a45 	.word	0x08003a45
 8003074:	08003a45 	.word	0x08003a45
 8003078:	08003a45 	.word	0x08003a45
 800307c:	08003a45 	.word	0x08003a45
 8003080:	08003a45 	.word	0x08003a45
 8003084:	08003a45 	.word	0x08003a45
 8003088:	08003a45 	.word	0x08003a45
 800308c:	08003a45 	.word	0x08003a45
 8003090:	08003a45 	.word	0x08003a45
 8003094:	08003a45 	.word	0x08003a45
 8003098:	08003a45 	.word	0x08003a45
 800309c:	08003a45 	.word	0x08003a45
 80030a0:	08003a45 	.word	0x08003a45
 80030a4:	080030e5 	.word	0x080030e5
 80030a8:	080030fb 	.word	0x080030fb
 80030ac:	08003a45 	.word	0x08003a45
 80030b0:	08003a45 	.word	0x08003a45
 80030b4:	08003a45 	.word	0x08003a45
 80030b8:	08003111 	.word	0x08003111
 80030bc:	08003a45 	.word	0x08003a45
 80030c0:	08003a45 	.word	0x08003a45
 80030c4:	08003a45 	.word	0x08003a45
 80030c8:	08003a45 	.word	0x08003a45
 80030cc:	080031d5 	.word	0x080031d5
 80030d0:	080032e1 	.word	0x080032e1
 80030d4:	08003a45 	.word	0x08003a45
 80030d8:	08003427 	.word	0x08003427
 80030dc:	08003527 	.word	0x08003527
 80030e0:	08003631 	.word	0x08003631
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 80030e4:	4b40      	ldr	r3, [pc, #256]	; (80031e8 <Narwhal_Protocol+0x300>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80030ea:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <Narwhal_Protocol+0x300>)
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80030f0:	2003      	movs	r0, #3
 80030f2:	f7ff fed7 	bl	8002ea4 <SentData>
				break;
 80030f6:	f000 bcb9 	b.w	8003a6c <Narwhal_Protocol+0xb84>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 80030fa:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <Narwhal_Protocol+0x300>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003100:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <Narwhal_Protocol+0x300>)
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003106:	2003      	movs	r0, #3
 8003108:	f7ff fecc 	bl	8002ea4 <SentData>
				break;
 800310c:	f000 bcae 	b.w	8003a6c <Narwhal_Protocol+0xb84>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <Narwhal_Protocol+0x310>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d152      	bne.n	80031be <Narwhal_Protocol+0x2d6>
					test_count += 1;
 8003118:	4b38      	ldr	r3, [pc, #224]	; (80031fc <Narwhal_Protocol+0x314>)
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003122:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003126:	4b35      	ldr	r3, [pc, #212]	; (80031fc <Narwhal_Protocol+0x314>)
 8003128:	edc3 7a00 	vstr	s15, [r3]
					t = 0;
 800312c:	4b34      	ldr	r3, [pc, #208]	; (8003200 <Narwhal_Protocol+0x318>)
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 4; i++) {
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800313a:	e035      	b.n	80031a8 <Narwhal_Protocol+0x2c0>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 800313c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4a2e      	ldr	r2, [pc, #184]	; (8003204 <Narwhal_Protocol+0x31c>)
 800314a:	441a      	add	r2, r3
 800314c:	492e      	ldr	r1, [pc, #184]	; (8003208 <Narwhal_Protocol+0x320>)
 800314e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003152:	206c      	movs	r0, #108	; 0x6c
 8003154:	fb00 f303 	mul.w	r3, r0, r3
 8003158:	440b      	add	r3, r1
 800315a:	3328      	adds	r3, #40	; 0x28
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	4929      	ldr	r1, [pc, #164]	; (8003208 <Narwhal_Protocol+0x320>)
 8003162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003166:	206c      	movs	r0, #108	; 0x6c
 8003168:	fb00 f303 	mul.w	r3, r0, r3
 800316c:	440b      	add	r3, r1
 800316e:	335c      	adds	r3, #92	; 0x5c
 8003170:	ed93 7a00 	vldr	s14, [r3]
 8003174:	eef0 1a47 	vmov.f32	s3, s14
 8003178:	eeb0 1a67 	vmov.f32	s2, s15
 800317c:	eddf 0a23 	vldr	s1, [pc, #140]	; 800320c <Narwhal_Protocol+0x324>
 8003180:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003184:	4610      	mov	r0, r2
 8003186:	f7fd fe68 	bl	8000e5a <Traj_Coeff_Cal>
								Control[i].PositionFeedback,
								Control[i].VelocityFeedback);
						test_count += 5;
 800318a:	4b1c      	ldr	r3, [pc, #112]	; (80031fc <Narwhal_Protocol+0x314>)
 800318c:	edd3 7a00 	vldr	s15, [r3]
 8003190:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003198:	4b18      	ldr	r3, [pc, #96]	; (80031fc <Narwhal_Protocol+0x314>)
 800319a:	edc3 7a00 	vstr	s15, [r3]
					for (int i = 0; i < 4; i++) {
 800319e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031a2:	3301      	adds	r3, #1
 80031a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	ddc5      	ble.n	800313c <Narwhal_Protocol+0x254>
					}
					Traj_Flag = 0x0F;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <Narwhal_Protocol+0x310>)
 80031b2:	220f      	movs	r2, #15
 80031b4:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <Narwhal_Protocol+0x300>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	709a      	strb	r2, [r3, #2]
 80031bc:	e002      	b.n	80031c4 <Narwhal_Protocol+0x2dc>
				} else {
					UART5_txBuffer[2] = 0x01;
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <Narwhal_Protocol+0x300>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <Narwhal_Protocol+0x300>)
 80031c6:	22ff      	movs	r2, #255	; 0xff
 80031c8:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80031ca:	2003      	movs	r0, #3
 80031cc:	f7ff fe6a 	bl	8002ea4 <SentData>
				break;
 80031d0:	f000 bc4c 	b.w	8003a6c <Narwhal_Protocol+0xb84>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 80031d4:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <Narwhal_Protocol+0x318>)
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 80031dc:	2300      	movs	r3, #0
 80031de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031e2:	e06c      	b.n	80032be <Narwhal_Protocol+0x3d6>
 80031e4:	20000010 	.word	0x20000010
 80031e8:	20000020 	.word	0x20000020
 80031ec:	08015bac 	.word	0x08015bac
 80031f0:	20000224 	.word	0x20000224
 80031f4:	447a0000 	.word	0x447a0000
 80031f8:	20000755 	.word	0x20000755
 80031fc:	20000764 	.word	0x20000764
 8003200:	20000740 	.word	0x20000740
 8003204:	200006b0 	.word	0x200006b0
 8003208:	2000032c 	.word	0x2000032c
 800320c:	00000000 	.word	0x00000000
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003210:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003214:	3301      	adds	r3, #1
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4acb      	ldr	r2, [pc, #812]	; (8003548 <Narwhal_Protocol+0x660>)
 800321a:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 800321c:	021b      	lsls	r3, r3, #8
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 800321e:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003220:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	3303      	adds	r3, #3
 8003228:	49c7      	ldr	r1, [pc, #796]	; (8003548 <Narwhal_Protocol+0x660>)
 800322a:	5ccb      	ldrb	r3, [r1, r3]
 800322c:	b21b      	sxth	r3, r3
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 800322e:	4313      	orrs	r3, r2
 8003230:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800323a:	ed9f 5bbf 	vldr	d5, [pc, #764]	; 8003538 <Narwhal_Protocol+0x650>
 800323e:	ee86 7b05 	vdiv.f64	d7, d6, d5
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003242:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003246:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
					Traj_Coeff_Cal(&Traj[i], 0.5,
 800324a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800324e:	4613      	mov	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4abd      	ldr	r2, [pc, #756]	; (800354c <Narwhal_Protocol+0x664>)
 8003258:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 800325a:	49bd      	ldr	r1, [pc, #756]	; (8003550 <Narwhal_Protocol+0x668>)
 800325c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003260:	206c      	movs	r0, #108	; 0x6c
 8003262:	fb00 f303 	mul.w	r3, r0, r3
 8003266:	440b      	add	r3, r1
 8003268:	3328      	adds	r3, #40	; 0x28
 800326a:	ed93 7a00 	vldr	s14, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 800326e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003276:	49b6      	ldr	r1, [pc, #728]	; (8003550 <Narwhal_Protocol+0x668>)
 8003278:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800327c:	206c      	movs	r0, #108	; 0x6c
 800327e:	fb00 f303 	mul.w	r3, r0, r3
 8003282:	440b      	add	r3, r1
 8003284:	3328      	adds	r3, #40	; 0x28
 8003286:	ed93 7a00 	vldr	s14, [r3]
 800328a:	49b1      	ldr	r1, [pc, #708]	; (8003550 <Narwhal_Protocol+0x668>)
 800328c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003290:	206c      	movs	r0, #108	; 0x6c
 8003292:	fb00 f303 	mul.w	r3, r0, r3
 8003296:	440b      	add	r3, r1
 8003298:	335c      	adds	r3, #92	; 0x5c
 800329a:	edd3 6a00 	vldr	s13, [r3]
 800329e:	eef0 1a66 	vmov.f32	s3, s13
 80032a2:	eeb0 1a47 	vmov.f32	s2, s14
 80032a6:	eef0 0a67 	vmov.f32	s1, s15
 80032aa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80032ae:	4610      	mov	r0, r2
 80032b0:	f7fd fdd3 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 80032b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032b8:	3301      	adds	r3, #1
 80032ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	dda4      	ble.n	8003210 <Narwhal_Protocol+0x328>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 80032c6:	4ba3      	ldr	r3, [pc, #652]	; (8003554 <Narwhal_Protocol+0x66c>)
 80032c8:	220f      	movs	r2, #15
 80032ca:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 80032cc:	4ba2      	ldr	r3, [pc, #648]	; (8003558 <Narwhal_Protocol+0x670>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80032d2:	4ba1      	ldr	r3, [pc, #644]	; (8003558 <Narwhal_Protocol+0x670>)
 80032d4:	22ff      	movs	r2, #255	; 0xff
 80032d6:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80032d8:	2003      	movs	r0, #3
 80032da:	f7ff fde3 	bl	8002ea4 <SentData>
				break;
 80032de:	e3c5      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 80032e0:	4b9b      	ldr	r3, [pc, #620]	; (8003550 <Narwhal_Protocol+0x668>)
 80032e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e4:	64fb      	str	r3, [r7, #76]	; 0x4c
				q_Feed[1] = Control[1].PositionFeedback;
 80032e6:	4b9a      	ldr	r3, [pc, #616]	; (8003550 <Narwhal_Protocol+0x668>)
 80032e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ec:	653b      	str	r3, [r7, #80]	; 0x50
				q_Feed[2] = Control[2].PositionFeedback;
 80032ee:	4b98      	ldr	r3, [pc, #608]	; (8003550 <Narwhal_Protocol+0x668>)
 80032f0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80032f4:	657b      	str	r3, [r7, #84]	; 0x54
				q_Feed[3] = Control[3].PositionFeedback;
 80032f6:	4b96      	ldr	r3, [pc, #600]	; (8003550 <Narwhal_Protocol+0x668>)
 80032f8:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80032fc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (int i = 0; i < 3; i++) {
 80032fe:	2300      	movs	r3, #0
 8003300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003304:	e027      	b.n	8003356 <Narwhal_Protocol+0x46e>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800330a:	3301      	adds	r3, #1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4a8e      	ldr	r2, [pc, #568]	; (8003548 <Narwhal_Protocol+0x660>)
 8003310:	5cd3      	ldrb	r3, [r2, r3]
 8003312:	021b      	lsls	r3, r3, #8
 8003314:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	3303      	adds	r3, #3
 800331e:	498a      	ldr	r1, [pc, #552]	; (8003548 <Narwhal_Protocol+0x660>)
 8003320:	5ccb      	ldrb	r3, [r1, r3]
 8003322:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003324:	4313      	orrs	r3, r2
 8003326:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003330:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8003540 <Narwhal_Protocol+0x658>
 8003334:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003338:	eef7 7bc7 	vcvt.f32.f64	s15, d7
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 800333c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	33b8      	adds	r3, #184	; 0xb8
 8003344:	443b      	add	r3, r7
 8003346:	3b88      	subs	r3, #136	; 0x88
 8003348:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 3; i++) {
 800334c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003350:	3301      	adds	r3, #1
 8003352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800335a:	2b02      	cmp	r3, #2
 800335c:	ddd3      	ble.n	8003306 <Narwhal_Protocol+0x41e>
				}
				IVK(q_Feed, d_Task, dq);
 800335e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003362:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003366:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe fc70 	bl	8001c50 <IVK>
				t = 0;
 8003370:	4b7a      	ldr	r3, [pc, #488]	; (800355c <Narwhal_Protocol+0x674>)
 8003372:	f04f 0200 	mov.w	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 3; i++) {
 8003378:	2300      	movs	r3, #0
 800337a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800337e:	e041      	b.n	8003404 <Narwhal_Protocol+0x51c>
					float Setpoint = Control[i].PositionFeedback + dq[i];
 8003380:	4a73      	ldr	r2, [pc, #460]	; (8003550 <Narwhal_Protocol+0x668>)
 8003382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003386:	216c      	movs	r1, #108	; 0x6c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	3328      	adds	r3, #40	; 0x28
 8003390:	ed93 7a00 	vldr	s14, [r3]
 8003394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	33b8      	adds	r3, #184	; 0xb8
 800339c:	443b      	add	r3, r7
 800339e:	3b7c      	subs	r3, #124	; 0x7c
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 80033ac:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4a64      	ldr	r2, [pc, #400]	; (800354c <Narwhal_Protocol+0x664>)
 80033ba:	441a      	add	r2, r3
 80033bc:	4964      	ldr	r1, [pc, #400]	; (8003550 <Narwhal_Protocol+0x668>)
 80033be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033c2:	206c      	movs	r0, #108	; 0x6c
 80033c4:	fb00 f303 	mul.w	r3, r0, r3
 80033c8:	440b      	add	r3, r1
 80033ca:	3328      	adds	r3, #40	; 0x28
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	495f      	ldr	r1, [pc, #380]	; (8003550 <Narwhal_Protocol+0x668>)
 80033d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033d6:	206c      	movs	r0, #108	; 0x6c
 80033d8:	fb00 f303 	mul.w	r3, r0, r3
 80033dc:	440b      	add	r3, r1
 80033de:	335c      	adds	r3, #92	; 0x5c
 80033e0:	ed93 7a00 	vldr	s14, [r3]
 80033e4:	eef0 1a47 	vmov.f32	s3, s14
 80033e8:	eeb0 1a67 	vmov.f32	s2, s15
 80033ec:	edd7 0a1b 	vldr	s1, [r7, #108]	; 0x6c
 80033f0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80033f4:	4610      	mov	r0, r2
 80033f6:	f7fd fd30 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 3; i++) {
 80033fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033fe:	3301      	adds	r3, #1
 8003400:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003404:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003408:	2b02      	cmp	r3, #2
 800340a:	ddb9      	ble.n	8003380 <Narwhal_Protocol+0x498>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 800340c:	4b51      	ldr	r3, [pc, #324]	; (8003554 <Narwhal_Protocol+0x66c>)
 800340e:	220f      	movs	r2, #15
 8003410:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <Narwhal_Protocol+0x670>)
 8003414:	2200      	movs	r2, #0
 8003416:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003418:	4b4f      	ldr	r3, [pc, #316]	; (8003558 <Narwhal_Protocol+0x670>)
 800341a:	22ff      	movs	r2, #255	; 0xff
 800341c:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800341e:	2003      	movs	r0, #3
 8003420:	f7ff fd40 	bl	8002ea4 <SentData>
				break;
 8003424:	e322      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			case 0xFD:
				/* Joint Set */
				t = 0;
 8003426:	4b4d      	ldr	r3, [pc, #308]	; (800355c <Narwhal_Protocol+0x674>)
 8003428:	f04f 0200 	mov.w	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
				float Joint[4];
				float T;
				for (int i = 0; i < 4; i++) {
 800342e:	2300      	movs	r3, #0
 8003430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003434:	e027      	b.n	8003486 <Narwhal_Protocol+0x59e>
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800343a:	3301      	adds	r3, #1
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4a42      	ldr	r2, [pc, #264]	; (8003548 <Narwhal_Protocol+0x660>)
 8003440:	5cd3      	ldrb	r3, [r2, r3]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	3303      	adds	r3, #3
 800344e:	493e      	ldr	r1, [pc, #248]	; (8003548 <Narwhal_Protocol+0x660>)
 8003450:	5ccb      	ldrb	r3, [r1, r3]
 8003452:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003454:	4313      	orrs	r3, r2
 8003456:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003458:	ee07 3a90 	vmov	s15, r3
 800345c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003460:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8003538 <Narwhal_Protocol+0x650>
 8003464:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003468:	eef7 7bc7 	vcvt.f32.f64	s15, d7
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 800346c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	33b8      	adds	r3, #184	; 0xb8
 8003474:	443b      	add	r3, r7
 8003476:	3bb8      	subs	r3, #184	; 0xb8
 8003478:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 4; i++) {
 800347c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003480:	3301      	adds	r3, #1
 8003482:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003486:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800348a:	2b03      	cmp	r3, #3
 800348c:	ddd3      	ble.n	8003436 <Narwhal_Protocol+0x54e>
				}
				T = 0.5;
 800348e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003492:	673b      	str	r3, [r7, #112]	; 0x70
				for (int i = 0; i < 4; i++) {
 8003494:	2300      	movs	r3, #0
 8003496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800349a:	e033      	b.n	8003504 <Narwhal_Protocol+0x61c>
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 800349c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4a28      	ldr	r2, [pc, #160]	; (800354c <Narwhal_Protocol+0x664>)
 80034aa:	441a      	add	r2, r3
 80034ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	33b8      	adds	r3, #184	; 0xb8
 80034b4:	443b      	add	r3, r7
 80034b6:	3bb8      	subs	r3, #184	; 0xb8
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	4924      	ldr	r1, [pc, #144]	; (8003550 <Narwhal_Protocol+0x668>)
 80034be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034c2:	206c      	movs	r0, #108	; 0x6c
 80034c4:	fb00 f303 	mul.w	r3, r0, r3
 80034c8:	440b      	add	r3, r1
 80034ca:	3328      	adds	r3, #40	; 0x28
 80034cc:	ed93 7a00 	vldr	s14, [r3]
 80034d0:	491f      	ldr	r1, [pc, #124]	; (8003550 <Narwhal_Protocol+0x668>)
 80034d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034d6:	206c      	movs	r0, #108	; 0x6c
 80034d8:	fb00 f303 	mul.w	r3, r0, r3
 80034dc:	440b      	add	r3, r1
 80034de:	335c      	adds	r3, #92	; 0x5c
 80034e0:	edd3 6a00 	vldr	s13, [r3]
 80034e4:	eef0 1a66 	vmov.f32	s3, s13
 80034e8:	eeb0 1a47 	vmov.f32	s2, s14
 80034ec:	eef0 0a67 	vmov.f32	s1, s15
 80034f0:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 80034f4:	4610      	mov	r0, r2
 80034f6:	f7fd fcb0 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 80034fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034fe:	3301      	adds	r3, #1
 8003500:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003504:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003508:	2b03      	cmp	r3, #3
 800350a:	ddc7      	ble.n	800349c <Narwhal_Protocol+0x5b4>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <Narwhal_Protocol+0x66c>)
 800350e:	220f      	movs	r2, #15
 8003510:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8003512:	4b11      	ldr	r3, [pc, #68]	; (8003558 <Narwhal_Protocol+0x670>)
 8003514:	2203      	movs	r2, #3
 8003516:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003518:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <Narwhal_Protocol+0x670>)
 800351a:	22ff      	movs	r2, #255	; 0xff
 800351c:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800351e:	2003      	movs	r0, #3
 8003520:	f7ff fcc0 	bl	8002ea4 <SentData>
				break;
 8003524:	e2a2      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <Narwhal_Protocol+0x674>)
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 800352e:	2300      	movs	r3, #0
 8003530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003534:	e06b      	b.n	800360e <Narwhal_Protocol+0x726>
 8003536:	bf00      	nop
 8003538:	00000000 	.word	0x00000000
 800353c:	408f4000 	.word	0x408f4000
 8003540:	00000000 	.word	0x00000000
 8003544:	40490000 	.word	0x40490000
 8003548:	20000010 	.word	0x20000010
 800354c:	200006b0 	.word	0x200006b0
 8003550:	2000032c 	.word	0x2000032c
 8003554:	20000755 	.word	0x20000755
 8003558:	20000020 	.word	0x20000020
 800355c:	20000740 	.word	0x20000740
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003564:	3301      	adds	r3, #1
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4ab9      	ldr	r2, [pc, #740]	; (8003850 <Narwhal_Protocol+0x968>)
 800356a:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 800356c:	021b      	lsls	r3, r3, #8
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 800356e:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	3303      	adds	r3, #3
 8003578:	49b5      	ldr	r1, [pc, #724]	; (8003850 <Narwhal_Protocol+0x968>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	b21b      	sxth	r3, r3
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 800357e:	4313      	orrs	r3, r2
 8003580:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800358a:	ed9f 5baf 	vldr	d5, [pc, #700]	; 8003848 <Narwhal_Protocol+0x960>
 800358e:	ee86 7b05 	vdiv.f64	d7, d6, d5
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003592:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003596:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
					Traj_Coeff_Cal(&Traj[i], 0.5,
 800359a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	1a9b      	subs	r3, r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4aab      	ldr	r2, [pc, #684]	; (8003854 <Narwhal_Protocol+0x96c>)
 80035a8:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 80035aa:	49ab      	ldr	r1, [pc, #684]	; (8003858 <Narwhal_Protocol+0x970>)
 80035ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035b0:	206c      	movs	r0, #108	; 0x6c
 80035b2:	fb00 f303 	mul.w	r3, r0, r3
 80035b6:	440b      	add	r3, r1
 80035b8:	3328      	adds	r3, #40	; 0x28
 80035ba:	ed93 7a00 	vldr	s14, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 80035be:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80035c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c6:	49a4      	ldr	r1, [pc, #656]	; (8003858 <Narwhal_Protocol+0x970>)
 80035c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035cc:	206c      	movs	r0, #108	; 0x6c
 80035ce:	fb00 f303 	mul.w	r3, r0, r3
 80035d2:	440b      	add	r3, r1
 80035d4:	3328      	adds	r3, #40	; 0x28
 80035d6:	ed93 7a00 	vldr	s14, [r3]
 80035da:	499f      	ldr	r1, [pc, #636]	; (8003858 <Narwhal_Protocol+0x970>)
 80035dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035e0:	206c      	movs	r0, #108	; 0x6c
 80035e2:	fb00 f303 	mul.w	r3, r0, r3
 80035e6:	440b      	add	r3, r1
 80035e8:	335c      	adds	r3, #92	; 0x5c
 80035ea:	edd3 6a00 	vldr	s13, [r3]
 80035ee:	eef0 1a66 	vmov.f32	s3, s13
 80035f2:	eeb0 1a47 	vmov.f32	s2, s14
 80035f6:	eef0 0a67 	vmov.f32	s1, s15
 80035fa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80035fe:	4610      	mov	r0, r2
 8003600:	f7fd fc2b 	bl	8000e5a <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003608:	3301      	adds	r3, #1
 800360a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800360e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003612:	2b03      	cmp	r3, #3
 8003614:	dda4      	ble.n	8003560 <Narwhal_Protocol+0x678>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003616:	4b91      	ldr	r3, [pc, #580]	; (800385c <Narwhal_Protocol+0x974>)
 8003618:	220f      	movs	r2, #15
 800361a:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 800361c:	4b90      	ldr	r3, [pc, #576]	; (8003860 <Narwhal_Protocol+0x978>)
 800361e:	2200      	movs	r2, #0
 8003620:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003622:	4b8f      	ldr	r3, [pc, #572]	; (8003860 <Narwhal_Protocol+0x978>)
 8003624:	22ff      	movs	r2, #255	; 0xff
 8003626:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003628:	2003      	movs	r0, #3
 800362a:	f7ff fc3b 	bl	8002ea4 <SentData>
				break;
 800362e:	e21d      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			case 0xFF:
				/* Chess Move */
				UART5_txBuffer[2] = 0x05;
 8003630:	4b8b      	ldr	r3, [pc, #556]	; (8003860 <Narwhal_Protocol+0x978>)
 8003632:	2205      	movs	r2, #5
 8003634:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003636:	4b8a      	ldr	r3, [pc, #552]	; (8003860 <Narwhal_Protocol+0x978>)
 8003638:	22ff      	movs	r2, #255	; 0xff
 800363a:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800363c:	2003      	movs	r0, #3
 800363e:	f7ff fc31 	bl	8002ea4 <SentData>
				break;
 8003642:	e213      	b.n	8003a6c <Narwhal_Protocol+0xb84>


				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 8003644:	4b86      	ldr	r3, [pc, #536]	; (8003860 <Narwhal_Protocol+0x978>)
 8003646:	22ee      	movs	r2, #238	; 0xee
 8003648:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 800364a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	b29b      	uxth	r3, r3
 8003652:	b2da      	uxtb	r2, r3
 8003654:	4b82      	ldr	r3, [pc, #520]	; (8003860 <Narwhal_Protocol+0x978>)
 8003656:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 8003658:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b80      	ldr	r3, [pc, #512]	; (8003860 <Narwhal_Protocol+0x978>)
 8003660:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8003662:	2004      	movs	r0, #4
 8003664:	f7ff fc1e 	bl	8002ea4 <SentData>
				break;
 8003668:	e200      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 800366a:	4b7d      	ldr	r3, [pc, #500]	; (8003860 <Narwhal_Protocol+0x978>)
 800366c:	22ee      	movs	r2, #238	; 0xee
 800366e:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 8003670:	4b7c      	ldr	r3, [pc, #496]	; (8003864 <Narwhal_Protocol+0x97c>)
 8003672:	89db      	ldrh	r3, [r3, #14]
 8003674:	0a1b      	lsrs	r3, r3, #8
 8003676:	b29b      	uxth	r3, r3
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4b79      	ldr	r3, [pc, #484]	; (8003860 <Narwhal_Protocol+0x978>)
 800367c:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 800367e:	4b79      	ldr	r3, [pc, #484]	; (8003864 <Narwhal_Protocol+0x97c>)
 8003680:	89db      	ldrh	r3, [r3, #14]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	4b76      	ldr	r3, [pc, #472]	; (8003860 <Narwhal_Protocol+0x978>)
 8003686:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8003688:	2004      	movs	r0, #4
 800368a:	f7ff fc0b 	bl	8002ea4 <SentData>
				break;
 800368e:	e1ed      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8003690:	4b73      	ldr	r3, [pc, #460]	; (8003860 <Narwhal_Protocol+0x978>)
 8003692:	22ee      	movs	r2, #238	; 0xee
 8003694:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800369c:	e022      	b.n	80036e4 <Narwhal_Protocol+0x7fc>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 800369e:	4a71      	ldr	r2, [pc, #452]	; (8003864 <Narwhal_Protocol+0x97c>)
 80036a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036a4:	015b      	lsls	r3, r3, #5
 80036a6:	4413      	add	r3, r2
 80036a8:	330e      	adds	r3, #14
 80036aa:	881b      	ldrh	r3, [r3, #0]
 80036ac:	0a1b      	lsrs	r3, r3, #8
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036b4:	3301      	adds	r3, #1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	b2d1      	uxtb	r1, r2
 80036ba:	4a69      	ldr	r2, [pc, #420]	; (8003860 <Narwhal_Protocol+0x978>)
 80036bc:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 80036be:	4a69      	ldr	r2, [pc, #420]	; (8003864 <Narwhal_Protocol+0x97c>)
 80036c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036c4:	015b      	lsls	r3, r3, #5
 80036c6:	4413      	add	r3, r2
 80036c8:	330e      	adds	r3, #14
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	3303      	adds	r3, #3
 80036d4:	b2d1      	uxtb	r1, r2
 80036d6:	4a62      	ldr	r2, [pc, #392]	; (8003860 <Narwhal_Protocol+0x978>)
 80036d8:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80036da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036de:	3301      	adds	r3, #1
 80036e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80036e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	ddd8      	ble.n	800369e <Narwhal_Protocol+0x7b6>
				}
				SentData(12);
 80036ec:	200c      	movs	r0, #12
 80036ee:	f7ff fbd9 	bl	8002ea4 <SentData>
				break;
 80036f2:	e1bb      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 80036f4:	4b5a      	ldr	r3, [pc, #360]	; (8003860 <Narwhal_Protocol+0x978>)
 80036f6:	22ee      	movs	r2, #238	; 0xee
 80036f8:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 80036fa:	2300      	movs	r3, #0
 80036fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003700:	e02c      	b.n	800375c <Narwhal_Protocol+0x874>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003702:	4a55      	ldr	r2, [pc, #340]	; (8003858 <Narwhal_Protocol+0x970>)
 8003704:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003708:	216c      	movs	r1, #108	; 0x6c
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	4413      	add	r3, r2
 8003710:	3328      	adds	r3, #40	; 0x28
 8003712:	edd3 7a00 	vldr	s15, [r3]
							* 1000.0f);
 8003716:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003868 <Narwhal_Protocol+0x980>
 800371a:	ee67 7a87 	vmul.f32	s15, s15, s14
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 800371e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003722:	ee17 3a90 	vmov	r3, s15
 8003726:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800372a:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 800372e:	121b      	asrs	r3, r3, #8
 8003730:	b21a      	sxth	r2, r3
 8003732:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003736:	3301      	adds	r3, #1
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	b2d1      	uxtb	r1, r2
 800373c:	4a48      	ldr	r2, [pc, #288]	; (8003860 <Narwhal_Protocol+0x978>)
 800373e:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003740:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	3303      	adds	r3, #3
 8003748:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800374c:	b2d1      	uxtb	r1, r2
 800374e:	4a44      	ldr	r2, [pc, #272]	; (8003860 <Narwhal_Protocol+0x978>)
 8003750:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003752:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003756:	3301      	adds	r3, #1
 8003758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800375c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003760:	2b03      	cmp	r3, #3
 8003762:	ddce      	ble.n	8003702 <Narwhal_Protocol+0x81a>
				}
				UART5_txBuffer[10] = 0;
 8003764:	4b3e      	ldr	r3, [pc, #248]	; (8003860 <Narwhal_Protocol+0x978>)
 8003766:	2200      	movs	r2, #0
 8003768:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <Narwhal_Protocol+0x978>)
 800376c:	2200      	movs	r2, #0
 800376e:	72da      	strb	r2, [r3, #11]
				SentData(12);
 8003770:	200c      	movs	r0, #12
 8003772:	f7ff fb97 	bl	8002ea4 <SentData>
				break;
 8003776:	e179      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 8003778:	4b39      	ldr	r3, [pc, #228]	; (8003860 <Narwhal_Protocol+0x978>)
 800377a:	22ee      	movs	r2, #238	; 0xee
 800377c:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */

				for (int i = 0; i < 4; i++) {
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003784:	e014      	b.n	80037b0 <Narwhal_Protocol+0x8c8>
					q_in[i] = Control[i].PositionFeedback;
 8003786:	4a34      	ldr	r2, [pc, #208]	; (8003858 <Narwhal_Protocol+0x970>)
 8003788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800378c:	216c      	movs	r1, #108	; 0x6c
 800378e:	fb01 f303 	mul.w	r3, r1, r3
 8003792:	4413      	add	r3, r2
 8003794:	3328      	adds	r3, #40	; 0x28
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	33b8      	adds	r3, #184	; 0xb8
 80037a0:	443b      	add	r3, r7
 80037a2:	3b9c      	subs	r3, #156	; 0x9c
 80037a4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 80037a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037aa:	3301      	adds	r3, #1
 80037ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80037b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	dde6      	ble.n	8003786 <Narwhal_Protocol+0x89e>
				}
				FPK(q_in, 269.0f, task);
 80037b8:	f107 0210 	add.w	r2, r7, #16
 80037bc:	f107 031c 	add.w	r3, r7, #28
 80037c0:	4611      	mov	r1, r2
 80037c2:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800386c <Narwhal_Protocol+0x984>
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fd26 	bl	8002218 <FPK>

				for (int i = 0; i < 3; i++) {
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80037d2:	e02a      	b.n	800382a <Narwhal_Protocol+0x942>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 80037d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	33b8      	adds	r3, #184	; 0xb8
 80037dc:	443b      	add	r3, r7
 80037de:	3ba8      	subs	r3, #168	; 0xa8
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80037e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037f0:	ee17 3a90 	vmov	r3, s15
 80037f4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80037f8:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 80037fc:	121b      	asrs	r3, r3, #8
 80037fe:	b21a      	sxth	r2, r3
 8003800:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003804:	3301      	adds	r3, #1
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	b2d1      	uxtb	r1, r2
 800380a:	4a15      	ldr	r2, [pc, #84]	; (8003860 <Narwhal_Protocol+0x978>)
 800380c:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 800380e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	3303      	adds	r3, #3
 8003816:	f8b7 2060 	ldrh.w	r2, [r7, #96]	; 0x60
 800381a:	b2d1      	uxtb	r1, r2
 800381c:	4a10      	ldr	r2, [pc, #64]	; (8003860 <Narwhal_Protocol+0x978>)
 800381e:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8003820:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003824:	3301      	adds	r3, #1
 8003826:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800382a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800382e:	2b02      	cmp	r3, #2
 8003830:	ddd0      	ble.n	80037d4 <Narwhal_Protocol+0x8ec>
				}
				SentData(8);
 8003832:	2008      	movs	r0, #8
 8003834:	f7ff fb36 	bl	8002ea4 <SentData>
				break;
 8003838:	e118      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <Narwhal_Protocol+0x978>)
 800383c:	22ee      	movs	r2, #238	; 0xee
 800383e:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
				for (int i = 0; i < 4; i++) {
 8003840:	2300      	movs	r3, #0
 8003842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003846:	e028      	b.n	800389a <Narwhal_Protocol+0x9b2>
 8003848:	00000000 	.word	0x00000000
 800384c:	408f4000 	.word	0x408f4000
 8003850:	20000010 	.word	0x20000010
 8003854:	200006b0 	.word	0x200006b0
 8003858:	2000032c 	.word	0x2000032c
 800385c:	20000755 	.word	0x20000755
 8003860:	20000020 	.word	0x20000020
 8003864:	2000022c 	.word	0x2000022c
 8003868:	447a0000 	.word	0x447a0000
 800386c:	43868000 	.word	0x43868000
					q_in[i] = Control[i].PositionFeedback;
 8003870:	4a83      	ldr	r2, [pc, #524]	; (8003a80 <Narwhal_Protocol+0xb98>)
 8003872:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003876:	216c      	movs	r1, #108	; 0x6c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	3328      	adds	r3, #40	; 0x28
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	33b8      	adds	r3, #184	; 0xb8
 800388a:	443b      	add	r3, r7
 800388c:	3b9c      	subs	r3, #156	; 0x9c
 800388e:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8003890:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003894:	3301      	adds	r3, #1
 8003896:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800389a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800389e:	2b03      	cmp	r3, #3
 80038a0:	dde6      	ble.n	8003870 <Narwhal_Protocol+0x988>
				}
				FPK(q_in, 269.0f, task);
 80038a2:	f107 0210 	add.w	r2, r7, #16
 80038a6:	f107 031c 	add.w	r3, r7, #28
 80038aa:	4611      	mov	r1, r2
 80038ac:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003a84 <Narwhal_Protocol+0xb9c>
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7fe fcb1 	bl	8002218 <FPK>

				/* Station Encoder */
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 80038b6:	4b74      	ldr	r3, [pc, #464]	; (8003a88 <Narwhal_Protocol+0xba0>)
 80038b8:	89db      	ldrh	r3, [r3, #14]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	4b72      	ldr	r3, [pc, #456]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80038c2:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 80038c4:	4b70      	ldr	r3, [pc, #448]	; (8003a88 <Narwhal_Protocol+0xba0>)
 80038c6:	89db      	ldrh	r3, [r3, #14]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	4b70      	ldr	r3, [pc, #448]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80038cc:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 80038ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80038d2:	0a1b      	lsrs	r3, r3, #8
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	4b6c      	ldr	r3, [pc, #432]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80038da:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 80038dc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4b6a      	ldr	r3, [pc, #424]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80038e4:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 80038e6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80038ea:	0a1b      	lsrs	r3, r3, #8
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	4b66      	ldr	r3, [pc, #408]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80038f2:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol & 0xFF);
 80038f4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b64      	ldr	r3, [pc, #400]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80038fc:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 80038fe:	2300      	movs	r3, #0
 8003900:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003904:	e02c      	b.n	8003960 <Narwhal_Protocol+0xa78>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003906:	4a5e      	ldr	r2, [pc, #376]	; (8003a80 <Narwhal_Protocol+0xb98>)
 8003908:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800390c:	216c      	movs	r1, #108	; 0x6c
 800390e:	fb01 f303 	mul.w	r3, r1, r3
 8003912:	4413      	add	r3, r2
 8003914:	3328      	adds	r3, #40	; 0x28
 8003916:	edd3 7a00 	vldr	s15, [r3]
							* 1000.0f);
 800391a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003a90 <Narwhal_Protocol+0xba8>
 800391e:	ee67 7a87 	vmul.f32	s15, s15, s14
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003926:	ee17 3a90 	vmov	r3, s15
 800392a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800392e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8003932:	121b      	asrs	r3, r3, #8
 8003934:	b21a      	sxth	r2, r3
 8003936:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800393a:	3304      	adds	r3, #4
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	b2d1      	uxtb	r1, r2
 8003940:	4a52      	ldr	r2, [pc, #328]	; (8003a8c <Narwhal_Protocol+0xba4>)
 8003942:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003944:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	3309      	adds	r3, #9
 800394c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003950:	b2d1      	uxtb	r1, r2
 8003952:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <Narwhal_Protocol+0xba4>)
 8003954:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003956:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800395a:	3301      	adds	r3, #1
 800395c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003964:	2b03      	cmp	r3, #3
 8003966:	ddce      	ble.n	8003906 <Narwhal_Protocol+0xa1e>
				}
				UART5_txBuffer[16] = 0;
 8003968:	4b48      	ldr	r3, [pc, #288]	; (8003a8c <Narwhal_Protocol+0xba4>)
 800396a:	2200      	movs	r2, #0
 800396c:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <Narwhal_Protocol+0xba4>)
 8003970:	2200      	movs	r2, #0
 8003972:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800397a:	e029      	b.n	80039d0 <Narwhal_Protocol+0xae8>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 800397c:	4a45      	ldr	r2, [pc, #276]	; (8003a94 <Narwhal_Protocol+0xbac>)
 800397e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003a90 <Narwhal_Protocol+0xba8>
 800398e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003992:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003996:	ee17 3a90 	vmov	r3, s15
 800399a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800399e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 80039a2:	121b      	asrs	r3, r3, #8
 80039a4:	b21a      	sxth	r2, r3
 80039a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039aa:	3309      	adds	r3, #9
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	b2d1      	uxtb	r1, r2
 80039b0:	4a36      	ldr	r2, [pc, #216]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80039b2:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80039b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039b8:	005b      	lsls	r3, r3, #1
 80039ba:	3313      	adds	r3, #19
 80039bc:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80039c0:	b2d1      	uxtb	r1, r2
 80039c2:	4a32      	ldr	r2, [pc, #200]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80039c4:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80039c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039ca:	3301      	adds	r3, #1
 80039cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039d4:	2b03      	cmp	r3, #3
 80039d6:	ddd1      	ble.n	800397c <Narwhal_Protocol+0xa94>
				}
				UART5_txBuffer[26] = 0;
 80039d8:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80039da:	2200      	movs	r2, #0
 80039dc:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 80039de:	4b2b      	ldr	r3, [pc, #172]	; (8003a8c <Narwhal_Protocol+0xba4>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 80039e4:	2300      	movs	r3, #0
 80039e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039e8:	e025      	b.n	8003a36 <Narwhal_Protocol+0xb4e>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 80039ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	33b8      	adds	r3, #184	; 0xb8
 80039f0:	443b      	add	r3, r7
 80039f2:	3ba8      	subs	r3, #168	; 0xa8
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a04:	ee17 3a90 	vmov	r3, s15
 8003a08:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003a0c:	f9b7 3066 	ldrsh.w	r3, [r7, #102]	; 0x66
 8003a10:	121b      	asrs	r3, r3, #8
 8003a12:	b21a      	sxth	r2, r3
 8003a14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a16:	330e      	adds	r3, #14
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	b2d1      	uxtb	r1, r2
 8003a1c:	4a1b      	ldr	r2, [pc, #108]	; (8003a8c <Narwhal_Protocol+0xba4>)
 8003a1e:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	331d      	adds	r3, #29
 8003a26:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8003a2a:	b2d1      	uxtb	r1, r2
 8003a2c:	4a17      	ldr	r2, [pc, #92]	; (8003a8c <Narwhal_Protocol+0xba4>)
 8003a2e:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8003a30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a32:	3301      	adds	r3, #1
 8003a34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	ddd6      	ble.n	80039ea <Narwhal_Protocol+0xb02>
				}
				SentData(34);
 8003a3c:	2022      	movs	r0, #34	; 0x22
 8003a3e:	f7ff fa31 	bl	8002ea4 <SentData>
				break;
 8003a42:	e013      	b.n	8003a6c <Narwhal_Protocol+0xb84>
			default:
				UART5_txBuffer[2] = 0xFF;
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <Narwhal_Protocol+0xba4>)
 8003a46:	22ff      	movs	r2, #255	; 0xff
 8003a48:	709a      	strb	r2, [r3, #2]
				SentData(3);
 8003a4a:	2003      	movs	r0, #3
 8003a4c:	f7ff fa2a 	bl	8002ea4 <SentData>
 8003a50:	e00c      	b.n	8003a6c <Narwhal_Protocol+0xb84>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 8003a52:	4b0e      	ldr	r3, [pc, #56]	; (8003a8c <Narwhal_Protocol+0xba4>)
 8003a54:	22cc      	movs	r2, #204	; 0xcc
 8003a56:	705a      	strb	r2, [r3, #1]
			SentData(3);
 8003a58:	2003      	movs	r0, #3
 8003a5a:	f7ff fa23 	bl	8002ea4 <SentData>
 8003a5e:	e005      	b.n	8003a6c <Narwhal_Protocol+0xb84>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <Narwhal_Protocol+0xba4>)
 8003a62:	22aa      	movs	r2, #170	; 0xaa
 8003a64:	705a      	strb	r2, [r3, #1]
		SentData(3);
 8003a66:	2003      	movs	r0, #3
 8003a68:	f7ff fa1c 	bl	8002ea4 <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8003a6c:	220e      	movs	r2, #14
 8003a6e:	490a      	ldr	r1, [pc, #40]	; (8003a98 <Narwhal_Protocol+0xbb0>)
 8003a70:	480a      	ldr	r0, [pc, #40]	; (8003a9c <Narwhal_Protocol+0xbb4>)
 8003a72:	f00e fcf3 	bl	801245c <HAL_UART_Receive_IT>
}
 8003a76:	bf00      	nop
 8003a78:	37b8      	adds	r7, #184	; 0xb8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	2000032c 	.word	0x2000032c
 8003a84:	43868000 	.word	0x43868000
 8003a88:	2000022c 	.word	0x2000022c
 8003a8c:	20000020 	.word	0x20000020
 8003a90:	447a0000 	.word	0x447a0000
 8003a94:	20000720 	.word	0x20000720
 8003a98:	20000010 	.word	0x20000010
 8003a9c:	20000ccc 	.word	0x20000ccc

08003aa0 <Control_Function>:

inline void Control_Function(){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08a      	sub	sp, #40	; 0x28
 8003aa4:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	float J1,J2,J3,J4;
	J1 = EncPulse2Rad_Read(&Encoder[0],1);
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4881      	ldr	r0, [pc, #516]	; (8003cb0 <Control_Function+0x210>)
 8003aaa:	f7fc fdb3 	bl	8000614 <EncPulse2Rad_Read>
 8003aae:	ed87 0a08 	vstr	s0, [r7, #32]
	J2 = EncPulse2Rad_Read(&Encoder[1],0);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	487f      	ldr	r0, [pc, #508]	; (8003cb4 <Control_Function+0x214>)
 8003ab6:	f7fc fdad 	bl	8000614 <EncPulse2Rad_Read>
 8003aba:	ed87 0a07 	vstr	s0, [r7, #28]
	J3 = EncPulse2Rad_Read(&Encoder[2],0);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	487d      	ldr	r0, [pc, #500]	; (8003cb8 <Control_Function+0x218>)
 8003ac2:	f7fc fda7 	bl	8000614 <EncPulse2Rad_Read>
 8003ac6:	ed87 0a06 	vstr	s0, [r7, #24]
	J4 = EncPulse2Rad_Read(&Encoder[3],0);
 8003aca:	2100      	movs	r1, #0
 8003acc:	487b      	ldr	r0, [pc, #492]	; (8003cbc <Control_Function+0x21c>)
 8003ace:	f7fc fda1 	bl	8000614 <EncPulse2Rad_Read>
 8003ad2:	ed87 0a05 	vstr	s0, [r7, #20]

	if(Traj_Flag & 0x0F){
 8003ad6:	4b7a      	ldr	r3, [pc, #488]	; (8003cc0 <Control_Function+0x220>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d07b      	beq.n	8003bda <Control_Function+0x13a>
		float traj_t_set[5];
		traj_t_set[0] = t;
 8003ae2:	4b78      	ldr	r3, [pc, #480]	; (8003cc4 <Control_Function+0x224>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	603b      	str	r3, [r7, #0]
		traj_t_set[1] = t * t;
 8003ae8:	4b76      	ldr	r3, [pc, #472]	; (8003cc4 <Control_Function+0x224>)
 8003aea:	ed93 7a00 	vldr	s14, [r3]
 8003aee:	4b75      	ldr	r3, [pc, #468]	; (8003cc4 <Control_Function+0x224>)
 8003af0:	edd3 7a00 	vldr	s15, [r3]
 8003af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af8:	edc7 7a01 	vstr	s15, [r7, #4]
		traj_t_set[2] = traj_t_set[1] * t;
 8003afc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003b00:	4b70      	ldr	r3, [pc, #448]	; (8003cc4 <Control_Function+0x224>)
 8003b02:	edd3 7a00 	vldr	s15, [r3]
 8003b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b0a:	edc7 7a02 	vstr	s15, [r7, #8]
		traj_t_set[3] = traj_t_set[2] * t;
 8003b0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b12:	4b6c      	ldr	r3, [pc, #432]	; (8003cc4 <Control_Function+0x224>)
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b1c:	edc7 7a03 	vstr	s15, [r7, #12]
		traj_t_set[4] = traj_t_set[3] * t;
 8003b20:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b24:	4b67      	ldr	r3, [pc, #412]	; (8003cc4 <Control_Function+0x224>)
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2e:	edc7 7a04 	vstr	s15, [r7, #16]
		for (int i = 0; i < 4; i++) {
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e03f      	b.n	8003bb8 <Control_Function+0x118>
			if (Traj_Flag & (0x01 << i)) {
 8003b38:	4b61      	ldr	r3, [pc, #388]	; (8003cc0 <Control_Function+0x220>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	fa42 f303 	asr.w	r3, r2, r3
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d032      	beq.n	8003bb2 <Control_Function+0x112>
				TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 8003b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4a5c      	ldr	r2, [pc, #368]	; (8003cc8 <Control_Function+0x228>)
 8003b58:	1898      	adds	r0, r3, r2
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4a5b      	ldr	r2, [pc, #364]	; (8003ccc <Control_Function+0x22c>)
 8003b60:	441a      	add	r2, r3
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	495a      	ldr	r1, [pc, #360]	; (8003cd0 <Control_Function+0x230>)
 8003b68:	440b      	add	r3, r1
 8003b6a:	4639      	mov	r1, r7
 8003b6c:	f7fd fa01 	bl	8000f72 <TrajFollow>
						&SetPoint_Velocity[i]);
				if (t >= Traj[i].T) {
 8003b70:	4955      	ldr	r1, [pc, #340]	; (8003cc8 <Control_Function+0x228>)
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	1a9b      	subs	r3, r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3318      	adds	r3, #24
 8003b80:	ed93 7a00 	vldr	s14, [r3]
 8003b84:	4b4f      	ldr	r3, [pc, #316]	; (8003cc4 <Control_Function+0x224>)
 8003b86:	edd3 7a00 	vldr	s15, [r3]
 8003b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	d80e      	bhi.n	8003bb2 <Control_Function+0x112>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 8003b94:	2201      	movs	r2, #1
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	b25b      	sxtb	r3, r3
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	b25a      	sxtb	r2, r3
 8003ba2:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <Control_Function+0x220>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b25b      	sxtb	r3, r3
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	b2da      	uxtb	r2, r3
 8003bae:	4b44      	ldr	r3, [pc, #272]	; (8003cc0 <Control_Function+0x220>)
 8003bb0:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	ddbc      	ble.n	8003b38 <Control_Function+0x98>
				}
			}
		}
		t += 0.005;
 8003bbe:	4b41      	ldr	r3, [pc, #260]	; (8003cc4 <Control_Function+0x224>)
 8003bc0:	edd3 7a00 	vldr	s15, [r3]
 8003bc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003bc8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003ca8 <Control_Function+0x208>
 8003bcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003bd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bd4:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <Control_Function+0x224>)
 8003bd6:	edc3 7a00 	vstr	s15, [r3]
	}

	CascadeControl(&Control[0], &Kalman[0], J1,SetPoint_Position[0],SetPoint_Velocity[0]);
 8003bda:	4b3c      	ldr	r3, [pc, #240]	; (8003ccc <Control_Function+0x22c>)
 8003bdc:	edd3 7a00 	vldr	s15, [r3]
 8003be0:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <Control_Function+0x230>)
 8003be2:	ed93 7a00 	vldr	s14, [r3]
 8003be6:	eeb0 1a47 	vmov.f32	s2, s14
 8003bea:	eef0 0a67 	vmov.f32	s1, s15
 8003bee:	ed97 0a08 	vldr	s0, [r7, #32]
 8003bf2:	4938      	ldr	r1, [pc, #224]	; (8003cd4 <Control_Function+0x234>)
 8003bf4:	4838      	ldr	r0, [pc, #224]	; (8003cd8 <Control_Function+0x238>)
 8003bf6:	f7fd fd39 	bl	800166c <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2,SetPoint_Position[1],SetPoint_Velocity[1]);
 8003bfa:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <Control_Function+0x22c>)
 8003bfc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c00:	4b33      	ldr	r3, [pc, #204]	; (8003cd0 <Control_Function+0x230>)
 8003c02:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c06:	eeb0 1a47 	vmov.f32	s2, s14
 8003c0a:	eef0 0a67 	vmov.f32	s1, s15
 8003c0e:	ed97 0a07 	vldr	s0, [r7, #28]
 8003c12:	4932      	ldr	r1, [pc, #200]	; (8003cdc <Control_Function+0x23c>)
 8003c14:	4832      	ldr	r0, [pc, #200]	; (8003ce0 <Control_Function+0x240>)
 8003c16:	f7fd fd29 	bl	800166c <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3,SetPoint_Position[2],SetPoint_Velocity[2]);
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <Control_Function+0x22c>)
 8003c1c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <Control_Function+0x230>)
 8003c22:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c26:	eeb0 1a47 	vmov.f32	s2, s14
 8003c2a:	eef0 0a67 	vmov.f32	s1, s15
 8003c2e:	ed97 0a06 	vldr	s0, [r7, #24]
 8003c32:	492c      	ldr	r1, [pc, #176]	; (8003ce4 <Control_Function+0x244>)
 8003c34:	482c      	ldr	r0, [pc, #176]	; (8003ce8 <Control_Function+0x248>)
 8003c36:	f7fd fd19 	bl	800166c <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4,SetPoint_Position[3],SetPoint_Velocity[3]);
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <Control_Function+0x22c>)
 8003c3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c40:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <Control_Function+0x230>)
 8003c42:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c46:	eeb0 1a47 	vmov.f32	s2, s14
 8003c4a:	eef0 0a67 	vmov.f32	s1, s15
 8003c4e:	ed97 0a05 	vldr	s0, [r7, #20]
 8003c52:	4926      	ldr	r1, [pc, #152]	; (8003cec <Control_Function+0x24c>)
 8003c54:	4826      	ldr	r0, [pc, #152]	; (8003cf0 <Control_Function+0x250>)
 8003c56:	f7fd fd09 	bl	800166c <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 8003c5a:	4b1f      	ldr	r3, [pc, #124]	; (8003cd8 <Control_Function+0x238>)
 8003c5c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003c60:	eeb0 0a67 	vmov.f32	s0, s15
 8003c64:	4823      	ldr	r0, [pc, #140]	; (8003cf4 <Control_Function+0x254>)
 8003c66:	f7fd f87f 	bl	8000d68 <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	; (8003cd8 <Control_Function+0x238>)
 8003c6c:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003c70:	eeb0 0a67 	vmov.f32	s0, s15
 8003c74:	4820      	ldr	r0, [pc, #128]	; (8003cf8 <Control_Function+0x258>)
 8003c76:	f7fd f877 	bl	8000d68 <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <Control_Function+0x238>)
 8003c7c:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8003c80:	eeb0 0a67 	vmov.f32	s0, s15
 8003c84:	481d      	ldr	r0, [pc, #116]	; (8003cfc <Control_Function+0x25c>)
 8003c86:	f7fd f86f 	bl	8000d68 <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 8003c8a:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <Control_Function+0x238>)
 8003c8c:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8003c90:	eeb0 0a67 	vmov.f32	s0, s15
 8003c94:	481a      	ldr	r0, [pc, #104]	; (8003d00 <Control_Function+0x260>)
 8003c96:	f7fd f867 	bl	8000d68 <Step_Driver>
}
 8003c9a:	bf00      	nop
 8003c9c:	3728      	adds	r7, #40	; 0x28
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	f3af 8000 	nop.w
 8003ca8:	47ae147b 	.word	0x47ae147b
 8003cac:	3f747ae1 	.word	0x3f747ae1
 8003cb0:	2000022c 	.word	0x2000022c
 8003cb4:	2000024c 	.word	0x2000024c
 8003cb8:	2000026c 	.word	0x2000026c
 8003cbc:	2000028c 	.word	0x2000028c
 8003cc0:	20000755 	.word	0x20000755
 8003cc4:	20000740 	.word	0x20000740
 8003cc8:	200006b0 	.word	0x200006b0
 8003ccc:	20000720 	.word	0x20000720
 8003cd0:	20000730 	.word	0x20000730
 8003cd4:	200002ac 	.word	0x200002ac
 8003cd8:	2000032c 	.word	0x2000032c
 8003cdc:	200002cc 	.word	0x200002cc
 8003ce0:	20000398 	.word	0x20000398
 8003ce4:	200002ec 	.word	0x200002ec
 8003ce8:	20000404 	.word	0x20000404
 8003cec:	2000030c 	.word	0x2000030c
 8003cf0:	20000470 	.word	0x20000470
 8003cf4:	200004dc 	.word	0x200004dc
 8003cf8:	200004f0 	.word	0x200004f0
 8003cfc:	20000504 	.word	0x20000504
 8003d00:	20000518 	.word	0x20000518

08003d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d08:	b672      	cpsid	i
}
 8003d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d0c:	e7fe      	b.n	8003d0c <Error_Handler+0x8>
	...

08003d10 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003d14:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d16:	4a29      	ldr	r2, [pc, #164]	; (8003dbc <MX_SPI3_Init+0xac>)
 8003d18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003d1a:	4b27      	ldr	r3, [pc, #156]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003d20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003d22:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d28:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d2a:	2207      	movs	r2, #7
 8003d2c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003d34:	4b20      	ldr	r3, [pc, #128]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d3a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d42:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003d44:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d46:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003d4a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d52:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d58:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d60:	221d      	movs	r2, #29
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d64:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d6a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003da2:	4805      	ldr	r0, [pc, #20]	; (8003db8 <MX_SPI3_Init+0xa8>)
 8003da4:	f00b fdea 	bl	800f97c <HAL_SPI_Init>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8003dae:	f7ff ffa9 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000768 	.word	0x20000768
 8003dbc:	40003c00 	.word	0x40003c00

08003dc0 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003dc4:	4b27      	ldr	r3, [pc, #156]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003dc6:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <MX_SPI4_Init+0xa8>)
 8003dc8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003dca:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003dcc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003dd0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003dd2:	4b24      	ldr	r3, [pc, #144]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8003dd8:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003dda:	220f      	movs	r2, #15
 8003ddc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dde:	4b21      	ldr	r3, [pc, #132]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003de4:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8003dea:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003dec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003df0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003df2:	4b1c      	ldr	r3, [pc, #112]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003df4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003df8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003dfa:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e00:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8003e0c:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003e18:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003e1a:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003e26:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003e2c:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003e44:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003e50:	4804      	ldr	r0, [pc, #16]	; (8003e64 <MX_SPI4_Init+0xa4>)
 8003e52:	f00b fd93 	bl	800f97c <HAL_SPI_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8003e5c:	f7ff ff52 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	200007f0 	.word	0x200007f0
 8003e68:	40013400 	.word	0x40013400

08003e6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b0b8      	sub	sp, #224	; 0xe0
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	605a      	str	r2, [r3, #4]
 8003e7e:	609a      	str	r2, [r3, #8]
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e84:	f107 0318 	add.w	r3, r7, #24
 8003e88:	22b4      	movs	r2, #180	; 0xb4
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f011 f831 	bl	8014ef4 <memset>
  if(spiHandle->Instance==SPI3)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a4b      	ldr	r2, [pc, #300]	; (8003fc4 <HAL_SPI_MspInit+0x158>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d156      	bne.n	8003f4a <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8003ea2:	2319      	movs	r3, #25
 8003ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 8003ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eaa:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003eac:	2302      	movs	r3, #2
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8003ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ec0:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8003ec6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003eca:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ecc:	f107 0318 	add.w	r3, r7, #24
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f009 fcbf 	bl	800d854 <HAL_RCCEx_PeriphCLKConfig>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8003edc:	f7ff ff12 	bl	8003d04 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ee0:	4b39      	ldr	r3, [pc, #228]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ee6:	4a38      	ldr	r2, [pc, #224]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ef0:	4b35      	ldr	r3, [pc, #212]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003ef2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003efe:	4b32      	ldr	r3, [pc, #200]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f04:	4a30      	ldr	r2, [pc, #192]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003f06:	f043 0304 	orr.w	r3, r3, #4
 8003f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f0e:	4b2e      	ldr	r3, [pc, #184]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003f1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003f20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f24:	2302      	movs	r3, #2
 8003f26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003f36:	2306      	movs	r3, #6
 8003f38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003f40:	4619      	mov	r1, r3
 8003f42:	4822      	ldr	r0, [pc, #136]	; (8003fcc <HAL_SPI_MspInit+0x160>)
 8003f44:	f006 fb88 	bl	800a658 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003f48:	e038      	b.n	8003fbc <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a20      	ldr	r2, [pc, #128]	; (8003fd0 <HAL_SPI_MspInit+0x164>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d133      	bne.n	8003fbc <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003f54:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f5a:	4a1b      	ldr	r2, [pc, #108]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003f5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f64:	4b18      	ldr	r3, [pc, #96]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f6e:	60fb      	str	r3, [r7, #12]
 8003f70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f78:	4a13      	ldr	r2, [pc, #76]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003f7a:	f043 0310 	orr.w	r3, r3, #16
 8003f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_SPI_MspInit+0x15c>)
 8003f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8003f90:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003f94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003faa:	2305      	movs	r3, #5
 8003fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fb0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4807      	ldr	r0, [pc, #28]	; (8003fd4 <HAL_SPI_MspInit+0x168>)
 8003fb8:	f006 fb4e 	bl	800a658 <HAL_GPIO_Init>
}
 8003fbc:	bf00      	nop
 8003fbe:	37e0      	adds	r7, #224	; 0xe0
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	40003c00 	.word	0x40003c00
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	58020800 	.word	0x58020800
 8003fd0:	40013400 	.word	0x40013400
 8003fd4:	58021000 	.word	0x58021000

08003fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fde:	4b0a      	ldr	r3, [pc, #40]	; (8004008 <HAL_MspInit+0x30>)
 8003fe0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fe4:	4a08      	ldr	r2, [pc, #32]	; (8004008 <HAL_MspInit+0x30>)
 8003fe6:	f043 0302 	orr.w	r3, r3, #2
 8003fea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_MspInit+0x30>)
 8003ff0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	58024400 	.word	0x58024400

0800400c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004010:	e7fe      	b.n	8004010 <NMI_Handler+0x4>

08004012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004016:	e7fe      	b.n	8004016 <HardFault_Handler+0x4>

08004018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800401c:	e7fe      	b.n	800401c <MemManage_Handler+0x4>

0800401e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004022:	e7fe      	b.n	8004022 <BusFault_Handler+0x4>

08004024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004028:	e7fe      	b.n	8004028 <UsageFault_Handler+0x4>

0800402a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004058:	f001 fc2c 	bl	80058b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	bd80      	pop	{r7, pc}

08004060 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8004064:	4802      	ldr	r0, [pc, #8]	; (8004070 <DMA1_Stream0_IRQHandler+0x10>)
 8004066:	f005 f983 	bl	8009370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000e7c 	.word	0x20000e7c

08004074 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8004078:	4802      	ldr	r0, [pc, #8]	; (8004084 <DMA1_Stream1_IRQHandler+0x10>)
 800407a:	f005 f979 	bl	8009370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	20000ef4 	.word	0x20000ef4

08004088 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800408c:	4802      	ldr	r0, [pc, #8]	; (8004098 <DMA1_Stream2_IRQHandler+0x10>)
 800408e:	f005 f96f 	bl	8009370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000c54 	.word	0x20000c54

0800409c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80040a0:	4802      	ldr	r0, [pc, #8]	; (80040ac <I2C2_ER_IRQHandler+0x10>)
 80040a2:	f006 fddb 	bl	800ac5c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200001d8 	.word	0x200001d8

080040b0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80040b4:	4802      	ldr	r0, [pc, #8]	; (80040c0 <USART3_IRQHandler+0x10>)
 80040b6:	f00e fa27 	bl	8012508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000dec 	.word	0x20000dec

080040c4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80040c8:	4802      	ldr	r0, [pc, #8]	; (80040d4 <UART5_IRQHandler+0x10>)
 80040ca:	f00e fa1d 	bl	8012508 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000ccc 	.word	0x20000ccc

080040d8 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80040dc:	4802      	ldr	r0, [pc, #8]	; (80040e8 <ADC3_IRQHandler+0x10>)
 80040de:	f002 fa59 	bl	8006594 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000140 	.word	0x20000140

080040ec <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <TIM23_IRQHandler+0x10>)
 80040f2:	f00c ffd7 	bl	80110a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000bbc 	.word	0x20000bbc

08004100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004104:	4b34      	ldr	r3, [pc, #208]	; (80041d8 <SystemInit+0xd8>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	4a33      	ldr	r2, [pc, #204]	; (80041d8 <SystemInit+0xd8>)
 800410c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004114:	4b31      	ldr	r3, [pc, #196]	; (80041dc <SystemInit+0xdc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	2b06      	cmp	r3, #6
 800411e:	d807      	bhi.n	8004130 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004120:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <SystemInit+0xdc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 030f 	bic.w	r3, r3, #15
 8004128:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <SystemInit+0xdc>)
 800412a:	f043 0307 	orr.w	r3, r3, #7
 800412e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004130:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <SystemInit+0xe0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a2a      	ldr	r2, [pc, #168]	; (80041e0 <SystemInit+0xe0>)
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800413c:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <SystemInit+0xe0>)
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004142:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <SystemInit+0xe0>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4926      	ldr	r1, [pc, #152]	; (80041e0 <SystemInit+0xe0>)
 8004148:	4b26      	ldr	r3, [pc, #152]	; (80041e4 <SystemInit+0xe4>)
 800414a:	4013      	ands	r3, r2
 800414c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800414e:	4b23      	ldr	r3, [pc, #140]	; (80041dc <SystemInit+0xdc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800415a:	4b20      	ldr	r3, [pc, #128]	; (80041dc <SystemInit+0xdc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 030f 	bic.w	r3, r3, #15
 8004162:	4a1e      	ldr	r2, [pc, #120]	; (80041dc <SystemInit+0xdc>)
 8004164:	f043 0307 	orr.w	r3, r3, #7
 8004168:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800416a:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <SystemInit+0xe0>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <SystemInit+0xe0>)
 8004172:	2200      	movs	r2, #0
 8004174:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004176:	4b1a      	ldr	r3, [pc, #104]	; (80041e0 <SystemInit+0xe0>)
 8004178:	2200      	movs	r2, #0
 800417a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800417c:	4b18      	ldr	r3, [pc, #96]	; (80041e0 <SystemInit+0xe0>)
 800417e:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <SystemInit+0xe8>)
 8004180:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <SystemInit+0xe0>)
 8004184:	4a19      	ldr	r2, [pc, #100]	; (80041ec <SystemInit+0xec>)
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004188:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <SystemInit+0xe0>)
 800418a:	4a19      	ldr	r2, [pc, #100]	; (80041f0 <SystemInit+0xf0>)
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800418e:	4b14      	ldr	r3, [pc, #80]	; (80041e0 <SystemInit+0xe0>)
 8004190:	2200      	movs	r2, #0
 8004192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004194:	4b12      	ldr	r3, [pc, #72]	; (80041e0 <SystemInit+0xe0>)
 8004196:	4a16      	ldr	r2, [pc, #88]	; (80041f0 <SystemInit+0xf0>)
 8004198:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800419a:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <SystemInit+0xe0>)
 800419c:	2200      	movs	r2, #0
 800419e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80041a0:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <SystemInit+0xe0>)
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <SystemInit+0xf0>)
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80041a6:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <SystemInit+0xe0>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <SystemInit+0xe0>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <SystemInit+0xe0>)
 80041b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <SystemInit+0xe0>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80041be:	4b0d      	ldr	r3, [pc, #52]	; (80041f4 <SystemInit+0xf4>)
 80041c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80041c4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041c6:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <SystemInit+0xd8>)
 80041c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80041ce:	bf00      	nop
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	e000ed00 	.word	0xe000ed00
 80041dc:	52002000 	.word	0x52002000
 80041e0:	58024400 	.word	0x58024400
 80041e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80041e8:	02020200 	.word	0x02020200
 80041ec:	01ff0000 	.word	0x01ff0000
 80041f0:	01010280 	.word	0x01010280
 80041f4:	52004000 	.word	0x52004000

080041f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b098      	sub	sp, #96	; 0x60
 80041fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800420a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	60da      	str	r2, [r3, #12]
 8004218:	611a      	str	r2, [r3, #16]
 800421a:	615a      	str	r2, [r3, #20]
 800421c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	2234      	movs	r2, #52	; 0x34
 8004222:	2100      	movs	r1, #0
 8004224:	4618      	mov	r0, r3
 8004226:	f010 fe65 	bl	8014ef4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800422a:	4b39      	ldr	r3, [pc, #228]	; (8004310 <MX_TIM1_Init+0x118>)
 800422c:	4a39      	ldr	r2, [pc, #228]	; (8004314 <MX_TIM1_Init+0x11c>)
 800422e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004230:	4b37      	ldr	r3, [pc, #220]	; (8004310 <MX_TIM1_Init+0x118>)
 8004232:	2200      	movs	r2, #0
 8004234:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004236:	4b36      	ldr	r3, [pc, #216]	; (8004310 <MX_TIM1_Init+0x118>)
 8004238:	2200      	movs	r2, #0
 800423a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 800423c:	4b34      	ldr	r3, [pc, #208]	; (8004310 <MX_TIM1_Init+0x118>)
 800423e:	f240 1257 	movw	r2, #343	; 0x157
 8004242:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004244:	4b32      	ldr	r3, [pc, #200]	; (8004310 <MX_TIM1_Init+0x118>)
 8004246:	2200      	movs	r2, #0
 8004248:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800424a:	4b31      	ldr	r3, [pc, #196]	; (8004310 <MX_TIM1_Init+0x118>)
 800424c:	2200      	movs	r2, #0
 800424e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004250:	4b2f      	ldr	r3, [pc, #188]	; (8004310 <MX_TIM1_Init+0x118>)
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004256:	482e      	ldr	r0, [pc, #184]	; (8004310 <MX_TIM1_Init+0x118>)
 8004258:	f00c fc12 	bl	8010a80 <HAL_TIM_PWM_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8004262:	f7ff fd4f 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426e:	2300      	movs	r3, #0
 8004270:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004272:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004276:	4619      	mov	r1, r3
 8004278:	4825      	ldr	r0, [pc, #148]	; (8004310 <MX_TIM1_Init+0x118>)
 800427a:	f00d fe9d 	bl	8011fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004284:	f7ff fd3e 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004288:	2360      	movs	r3, #96	; 0x60
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004290:	2300      	movs	r3, #0
 8004292:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004294:	2300      	movs	r3, #0
 8004296:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004298:	2304      	movs	r3, #4
 800429a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800429c:	2300      	movs	r3, #0
 800429e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042a0:	2300      	movs	r3, #0
 80042a2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042a8:	2200      	movs	r2, #0
 80042aa:	4619      	mov	r1, r3
 80042ac:	4818      	ldr	r0, [pc, #96]	; (8004310 <MX_TIM1_Init+0x118>)
 80042ae:	f00d f819 	bl	80112e4 <HAL_TIM_PWM_ConfigChannel>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80042b8:	f7ff fd24 	bl	8003d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042cc:	2300      	movs	r3, #0
 80042ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80042d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80042de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	4619      	mov	r1, r3
 80042f0:	4807      	ldr	r0, [pc, #28]	; (8004310 <MX_TIM1_Init+0x118>)
 80042f2:	f00d fefd 	bl	80120f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80042fc:	f7ff fd02 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004300:	4803      	ldr	r0, [pc, #12]	; (8004310 <MX_TIM1_Init+0x118>)
 8004302:	f000 fecd 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 8004306:	bf00      	nop
 8004308:	3760      	adds	r7, #96	; 0x60
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20000878 	.word	0x20000878
 8004314:	40010000 	.word	0x40010000

08004318 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08e      	sub	sp, #56	; 0x38
 800431c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800431e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	609a      	str	r2, [r3, #8]
 800432a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800432c:	f107 031c 	add.w	r3, r7, #28
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004338:	463b      	mov	r3, r7
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	605a      	str	r2, [r3, #4]
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	60da      	str	r2, [r3, #12]
 8004344:	611a      	str	r2, [r3, #16]
 8004346:	615a      	str	r2, [r3, #20]
 8004348:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800434a:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <MX_TIM3_Init+0xe8>)
 800434c:	4a2d      	ldr	r2, [pc, #180]	; (8004404 <MX_TIM3_Init+0xec>)
 800434e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <MX_TIM3_Init+0xe8>)
 8004352:	2200      	movs	r2, #0
 8004354:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004356:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <MX_TIM3_Init+0xe8>)
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800435c:	4b28      	ldr	r3, [pc, #160]	; (8004400 <MX_TIM3_Init+0xe8>)
 800435e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004362:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <MX_TIM3_Init+0xe8>)
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800436a:	4b25      	ldr	r3, [pc, #148]	; (8004400 <MX_TIM3_Init+0xe8>)
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004370:	4823      	ldr	r0, [pc, #140]	; (8004400 <MX_TIM3_Init+0xe8>)
 8004372:	f00c faa8 	bl	80108c6 <HAL_TIM_Base_Init>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800437c:	f7ff fcc2 	bl	8003d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004386:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800438a:	4619      	mov	r1, r3
 800438c:	481c      	ldr	r0, [pc, #112]	; (8004400 <MX_TIM3_Init+0xe8>)
 800438e:	f00d f8bd 	bl	801150c <HAL_TIM_ConfigClockSource>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8004398:	f7ff fcb4 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800439c:	4818      	ldr	r0, [pc, #96]	; (8004400 <MX_TIM3_Init+0xe8>)
 800439e:	f00c fb6f 	bl	8010a80 <HAL_TIM_PWM_Init>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80043a8:	f7ff fcac 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043b4:	f107 031c 	add.w	r3, r7, #28
 80043b8:	4619      	mov	r1, r3
 80043ba:	4811      	ldr	r0, [pc, #68]	; (8004400 <MX_TIM3_Init+0xe8>)
 80043bc:	f00d fdfc 	bl	8011fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80043c6:	f7ff fc9d 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043ca:	2360      	movs	r3, #96	; 0x60
 80043cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80043ce:	2300      	movs	r3, #0
 80043d0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80043da:	463b      	mov	r3, r7
 80043dc:	2200      	movs	r2, #0
 80043de:	4619      	mov	r1, r3
 80043e0:	4807      	ldr	r0, [pc, #28]	; (8004400 <MX_TIM3_Init+0xe8>)
 80043e2:	f00c ff7f 	bl	80112e4 <HAL_TIM_PWM_ConfigChannel>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80043ec:	f7ff fc8a 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80043f0:	4803      	ldr	r0, [pc, #12]	; (8004400 <MX_TIM3_Init+0xe8>)
 80043f2:	f000 fe55 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 80043f6:	bf00      	nop
 80043f8:	3738      	adds	r7, #56	; 0x38
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	200008c4 	.word	0x200008c4
 8004404:	40000400 	.word	0x40000400

08004408 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08c      	sub	sp, #48	; 0x30
 800440c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800440e:	f107 030c 	add.w	r3, r7, #12
 8004412:	2224      	movs	r2, #36	; 0x24
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f010 fd6c 	bl	8014ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800441c:	463b      	mov	r3, r7
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	605a      	str	r2, [r3, #4]
 8004424:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004426:	4b21      	ldr	r3, [pc, #132]	; (80044ac <MX_TIM4_Init+0xa4>)
 8004428:	4a21      	ldr	r2, [pc, #132]	; (80044b0 <MX_TIM4_Init+0xa8>)
 800442a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800442c:	4b1f      	ldr	r3, [pc, #124]	; (80044ac <MX_TIM4_Init+0xa4>)
 800442e:	2200      	movs	r2, #0
 8004430:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004432:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <MX_TIM4_Init+0xa4>)
 8004434:	2200      	movs	r2, #0
 8004436:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8004438:	4b1c      	ldr	r3, [pc, #112]	; (80044ac <MX_TIM4_Init+0xa4>)
 800443a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800443e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004440:	4b1a      	ldr	r3, [pc, #104]	; (80044ac <MX_TIM4_Init+0xa4>)
 8004442:	2200      	movs	r2, #0
 8004444:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004446:	4b19      	ldr	r3, [pc, #100]	; (80044ac <MX_TIM4_Init+0xa4>)
 8004448:	2280      	movs	r2, #128	; 0x80
 800444a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800444c:	2303      	movs	r3, #3
 800444e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004454:	2301      	movs	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004458:	2300      	movs	r3, #0
 800445a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004460:	2300      	movs	r3, #0
 8004462:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004464:	2301      	movs	r3, #1
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004468:	2300      	movs	r3, #0
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004470:	f107 030c 	add.w	r3, r7, #12
 8004474:	4619      	mov	r1, r3
 8004476:	480d      	ldr	r0, [pc, #52]	; (80044ac <MX_TIM4_Init+0xa4>)
 8004478:	f00c fd6e 	bl	8010f58 <HAL_TIM_Encoder_Init>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004482:	f7ff fc3f 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800448e:	463b      	mov	r3, r7
 8004490:	4619      	mov	r1, r3
 8004492:	4806      	ldr	r0, [pc, #24]	; (80044ac <MX_TIM4_Init+0xa4>)
 8004494:	f00d fd90 	bl	8011fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800449e:	f7ff fc31 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80044a2:	bf00      	nop
 80044a4:	3730      	adds	r7, #48	; 0x30
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000910 	.word	0x20000910
 80044b0:	40000800 	.word	0x40000800

080044b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08e      	sub	sp, #56	; 0x38
 80044b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	609a      	str	r2, [r3, #8]
 80044c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044c8:	f107 031c 	add.w	r3, r7, #28
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044d4:	463b      	mov	r3, r7
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	605a      	str	r2, [r3, #4]
 80044dc:	609a      	str	r2, [r3, #8]
 80044de:	60da      	str	r2, [r3, #12]
 80044e0:	611a      	str	r2, [r3, #16]
 80044e2:	615a      	str	r2, [r3, #20]
 80044e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80044e6:	4b33      	ldr	r3, [pc, #204]	; (80045b4 <MX_TIM5_Init+0x100>)
 80044e8:	4a33      	ldr	r2, [pc, #204]	; (80045b8 <MX_TIM5_Init+0x104>)
 80044ea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 80044ec:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <MX_TIM5_Init+0x100>)
 80044ee:	f44f 7289 	mov.w	r2, #274	; 0x112
 80044f2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f4:	4b2f      	ldr	r3, [pc, #188]	; (80045b4 <MX_TIM5_Init+0x100>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 80044fa:	4b2e      	ldr	r3, [pc, #184]	; (80045b4 <MX_TIM5_Init+0x100>)
 80044fc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004500:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004502:	4b2c      	ldr	r3, [pc, #176]	; (80045b4 <MX_TIM5_Init+0x100>)
 8004504:	2200      	movs	r2, #0
 8004506:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004508:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <MX_TIM5_Init+0x100>)
 800450a:	2200      	movs	r2, #0
 800450c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800450e:	4829      	ldr	r0, [pc, #164]	; (80045b4 <MX_TIM5_Init+0x100>)
 8004510:	f00c f9d9 	bl	80108c6 <HAL_TIM_Base_Init>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 800451a:	f7ff fbf3 	bl	8003d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800451e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004528:	4619      	mov	r1, r3
 800452a:	4822      	ldr	r0, [pc, #136]	; (80045b4 <MX_TIM5_Init+0x100>)
 800452c:	f00c ffee 	bl	801150c <HAL_TIM_ConfigClockSource>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8004536:	f7ff fbe5 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800453a:	481e      	ldr	r0, [pc, #120]	; (80045b4 <MX_TIM5_Init+0x100>)
 800453c:	f00c faa0 	bl	8010a80 <HAL_TIM_PWM_Init>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8004546:	f7ff fbdd 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800454e:	2300      	movs	r3, #0
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004552:	f107 031c 	add.w	r3, r7, #28
 8004556:	4619      	mov	r1, r3
 8004558:	4816      	ldr	r0, [pc, #88]	; (80045b4 <MX_TIM5_Init+0x100>)
 800455a:	f00d fd2d 	bl	8011fb8 <HAL_TIMEx_MasterConfigSynchronization>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8004564:	f7ff fbce 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004568:	2360      	movs	r3, #96	; 0x60
 800456a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 800456c:	f240 53db 	movw	r3, #1499	; 0x5db
 8004570:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004572:	2300      	movs	r3, #0
 8004574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800457a:	463b      	mov	r3, r7
 800457c:	2200      	movs	r2, #0
 800457e:	4619      	mov	r1, r3
 8004580:	480c      	ldr	r0, [pc, #48]	; (80045b4 <MX_TIM5_Init+0x100>)
 8004582:	f00c feaf 	bl	80112e4 <HAL_TIM_PWM_ConfigChannel>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 800458c:	f7ff fbba 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004590:	463b      	mov	r3, r7
 8004592:	2204      	movs	r2, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4807      	ldr	r0, [pc, #28]	; (80045b4 <MX_TIM5_Init+0x100>)
 8004598:	f00c fea4 	bl	80112e4 <HAL_TIM_PWM_ConfigChannel>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 80045a2:	f7ff fbaf 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80045a6:	4803      	ldr	r0, [pc, #12]	; (80045b4 <MX_TIM5_Init+0x100>)
 80045a8:	f000 fd7a 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 80045ac:	bf00      	nop
 80045ae:	3738      	adds	r7, #56	; 0x38
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	2000095c 	.word	0x2000095c
 80045b8:	40000c00 	.word	0x40000c00

080045bc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045c2:	1d3b      	adds	r3, r7, #4
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	605a      	str	r2, [r3, #4]
 80045ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80045cc:	4b15      	ldr	r3, [pc, #84]	; (8004624 <MX_TIM6_Init+0x68>)
 80045ce:	4a16      	ldr	r2, [pc, #88]	; (8004628 <MX_TIM6_Init+0x6c>)
 80045d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <MX_TIM6_Init+0x68>)
 80045d4:	f44f 7289 	mov.w	r2, #274	; 0x112
 80045d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <MX_TIM6_Init+0x68>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80045e0:	4b10      	ldr	r3, [pc, #64]	; (8004624 <MX_TIM6_Init+0x68>)
 80045e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045e6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045e8:	4b0e      	ldr	r3, [pc, #56]	; (8004624 <MX_TIM6_Init+0x68>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80045ee:	480d      	ldr	r0, [pc, #52]	; (8004624 <MX_TIM6_Init+0x68>)
 80045f0:	f00c f969 	bl	80108c6 <HAL_TIM_Base_Init>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80045fa:	f7ff fb83 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045fe:	2300      	movs	r3, #0
 8004600:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004606:	1d3b      	adds	r3, r7, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4806      	ldr	r0, [pc, #24]	; (8004624 <MX_TIM6_Init+0x68>)
 800460c:	f00d fcd4 	bl	8011fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004616:	f7ff fb75 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800461a:	bf00      	nop
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	200009a8 	.word	0x200009a8
 8004628:	40001000 	.word	0x40001000

0800462c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08c      	sub	sp, #48	; 0x30
 8004630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004632:	f107 030c 	add.w	r3, r7, #12
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f010 fc5a 	bl	8014ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004640:	463b      	mov	r3, r7
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800464a:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <MX_TIM8_Init+0xac>)
 800464c:	4a23      	ldr	r2, [pc, #140]	; (80046dc <MX_TIM8_Init+0xb0>)
 800464e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <MX_TIM8_Init+0xac>)
 8004652:	2200      	movs	r2, #0
 8004654:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004656:	4b20      	ldr	r3, [pc, #128]	; (80046d8 <MX_TIM8_Init+0xac>)
 8004658:	2200      	movs	r2, #0
 800465a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 800465c:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <MX_TIM8_Init+0xac>)
 800465e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8004662:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004664:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <MX_TIM8_Init+0xac>)
 8004666:	2200      	movs	r2, #0
 8004668:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800466a:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <MX_TIM8_Init+0xac>)
 800466c:	2200      	movs	r2, #0
 800466e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <MX_TIM8_Init+0xac>)
 8004672:	2280      	movs	r2, #128	; 0x80
 8004674:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004676:	2303      	movs	r3, #3
 8004678:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800467a:	2300      	movs	r3, #0
 800467c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800467e:	2301      	movs	r3, #1
 8004680:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004682:	2300      	movs	r3, #0
 8004684:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800468a:	2300      	movs	r3, #0
 800468c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800468e:	2301      	movs	r3, #1
 8004690:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004692:	2300      	movs	r3, #0
 8004694:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800469a:	f107 030c 	add.w	r3, r7, #12
 800469e:	4619      	mov	r1, r3
 80046a0:	480d      	ldr	r0, [pc, #52]	; (80046d8 <MX_TIM8_Init+0xac>)
 80046a2:	f00c fc59 	bl	8010f58 <HAL_TIM_Encoder_Init>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80046ac:	f7ff fb2a 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046b0:	2300      	movs	r3, #0
 80046b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80046b4:	2300      	movs	r3, #0
 80046b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80046bc:	463b      	mov	r3, r7
 80046be:	4619      	mov	r1, r3
 80046c0:	4805      	ldr	r0, [pc, #20]	; (80046d8 <MX_TIM8_Init+0xac>)
 80046c2:	f00d fc79 	bl	8011fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80046cc:	f7ff fb1a 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80046d0:	bf00      	nop
 80046d2:	3730      	adds	r7, #48	; 0x30
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	200009f4 	.word	0x200009f4
 80046dc:	40010400 	.word	0x40010400

080046e0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	611a      	str	r2, [r3, #16]
 80046f4:	615a      	str	r2, [r3, #20]
 80046f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80046f8:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <MX_TIM13_Init+0x98>)
 80046fa:	4a20      	ldr	r2, [pc, #128]	; (800477c <MX_TIM13_Init+0x9c>)
 80046fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 80046fe:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <MX_TIM13_Init+0x98>)
 8004700:	f240 2225 	movw	r2, #549	; 0x225
 8004704:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004706:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <MX_TIM13_Init+0x98>)
 8004708:	2200      	movs	r2, #0
 800470a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 800470c:	4b1a      	ldr	r3, [pc, #104]	; (8004778 <MX_TIM13_Init+0x98>)
 800470e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004712:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004714:	4b18      	ldr	r3, [pc, #96]	; (8004778 <MX_TIM13_Init+0x98>)
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <MX_TIM13_Init+0x98>)
 800471c:	2280      	movs	r2, #128	; 0x80
 800471e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004720:	4815      	ldr	r0, [pc, #84]	; (8004778 <MX_TIM13_Init+0x98>)
 8004722:	f00c f8d0 	bl	80108c6 <HAL_TIM_Base_Init>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 800472c:	f7ff faea 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8004730:	4811      	ldr	r0, [pc, #68]	; (8004778 <MX_TIM13_Init+0x98>)
 8004732:	f00c f9a5 	bl	8010a80 <HAL_TIM_PWM_Init>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800473c:	f7ff fae2 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004740:	2360      	movs	r3, #96	; 0x60
 8004742:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8004744:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004748:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004752:	1d3b      	adds	r3, r7, #4
 8004754:	2200      	movs	r2, #0
 8004756:	4619      	mov	r1, r3
 8004758:	4807      	ldr	r0, [pc, #28]	; (8004778 <MX_TIM13_Init+0x98>)
 800475a:	f00c fdc3 	bl	80112e4 <HAL_TIM_PWM_ConfigChannel>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8004764:	f7ff face 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8004768:	4803      	ldr	r0, [pc, #12]	; (8004778 <MX_TIM13_Init+0x98>)
 800476a:	f000 fc99 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 800476e:	bf00      	nop
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000a40 	.word	0x20000a40
 800477c:	40001c00 	.word	0x40001c00

08004780 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b088      	sub	sp, #32
 8004784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004786:	1d3b      	adds	r3, r7, #4
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	611a      	str	r2, [r3, #16]
 8004794:	615a      	str	r2, [r3, #20]
 8004796:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004798:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <MX_TIM14_Init+0x98>)
 800479a:	4a20      	ldr	r2, [pc, #128]	; (800481c <MX_TIM14_Init+0x9c>)
 800479c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <MX_TIM14_Init+0x98>)
 80047a0:	f240 2225 	movw	r2, #549	; 0x225
 80047a4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047a6:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <MX_TIM14_Init+0x98>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80047ac:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <MX_TIM14_Init+0x98>)
 80047ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047b2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047b4:	4b18      	ldr	r3, [pc, #96]	; (8004818 <MX_TIM14_Init+0x98>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047ba:	4b17      	ldr	r3, [pc, #92]	; (8004818 <MX_TIM14_Init+0x98>)
 80047bc:	2280      	movs	r2, #128	; 0x80
 80047be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80047c0:	4815      	ldr	r0, [pc, #84]	; (8004818 <MX_TIM14_Init+0x98>)
 80047c2:	f00c f880 	bl	80108c6 <HAL_TIM_Base_Init>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80047cc:	f7ff fa9a 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80047d0:	4811      	ldr	r0, [pc, #68]	; (8004818 <MX_TIM14_Init+0x98>)
 80047d2:	f00c f955 	bl	8010a80 <HAL_TIM_PWM_Init>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80047dc:	f7ff fa92 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047e0:	2360      	movs	r3, #96	; 0x60
 80047e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80047e4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80047e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047f2:	1d3b      	adds	r3, r7, #4
 80047f4:	2200      	movs	r2, #0
 80047f6:	4619      	mov	r1, r3
 80047f8:	4807      	ldr	r0, [pc, #28]	; (8004818 <MX_TIM14_Init+0x98>)
 80047fa:	f00c fd73 	bl	80112e4 <HAL_TIM_PWM_ConfigChannel>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8004804:	f7ff fa7e 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004808:	4803      	ldr	r0, [pc, #12]	; (8004818 <MX_TIM14_Init+0x98>)
 800480a:	f000 fc49 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 800480e:	bf00      	nop
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000a8c 	.word	0x20000a8c
 800481c:	40002000 	.word	0x40002000

08004820 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b098      	sub	sp, #96	; 0x60
 8004824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004826:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	605a      	str	r2, [r3, #4]
 8004830:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004832:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	605a      	str	r2, [r3, #4]
 800483c:	609a      	str	r2, [r3, #8]
 800483e:	60da      	str	r2, [r3, #12]
 8004840:	611a      	str	r2, [r3, #16]
 8004842:	615a      	str	r2, [r3, #20]
 8004844:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	2234      	movs	r2, #52	; 0x34
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f010 fb51 	bl	8014ef4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004852:	4b35      	ldr	r3, [pc, #212]	; (8004928 <MX_TIM15_Init+0x108>)
 8004854:	4a35      	ldr	r2, [pc, #212]	; (800492c <MX_TIM15_Init+0x10c>)
 8004856:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8004858:	4b33      	ldr	r3, [pc, #204]	; (8004928 <MX_TIM15_Init+0x108>)
 800485a:	f240 2225 	movw	r2, #549	; 0x225
 800485e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004860:	4b31      	ldr	r3, [pc, #196]	; (8004928 <MX_TIM15_Init+0x108>)
 8004862:	2200      	movs	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8004866:	4b30      	ldr	r3, [pc, #192]	; (8004928 <MX_TIM15_Init+0x108>)
 8004868:	f240 32e7 	movw	r2, #999	; 0x3e7
 800486c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800486e:	4b2e      	ldr	r3, [pc, #184]	; (8004928 <MX_TIM15_Init+0x108>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004874:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <MX_TIM15_Init+0x108>)
 8004876:	2200      	movs	r2, #0
 8004878:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800487a:	4b2b      	ldr	r3, [pc, #172]	; (8004928 <MX_TIM15_Init+0x108>)
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004880:	4829      	ldr	r0, [pc, #164]	; (8004928 <MX_TIM15_Init+0x108>)
 8004882:	f00c f8fd 	bl	8010a80 <HAL_TIM_PWM_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 800488c:	f7ff fa3a 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004890:	2300      	movs	r3, #0
 8004892:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004894:	2300      	movs	r3, #0
 8004896:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004898:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800489c:	4619      	mov	r1, r3
 800489e:	4822      	ldr	r0, [pc, #136]	; (8004928 <MX_TIM15_Init+0x108>)
 80048a0:	f00d fb8a 	bl	8011fb8 <HAL_TIMEx_MasterConfigSynchronization>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80048aa:	f7ff fa2b 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048ae:	2360      	movs	r3, #96	; 0x60
 80048b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 80048b2:	f240 13f3 	movw	r3, #499	; 0x1f3
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048b8:	2300      	movs	r3, #0
 80048ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048bc:	2300      	movs	r3, #0
 80048be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048c4:	2300      	movs	r3, #0
 80048c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048c8:	2300      	movs	r3, #0
 80048ca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80048cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048d0:	2200      	movs	r2, #0
 80048d2:	4619      	mov	r1, r3
 80048d4:	4814      	ldr	r0, [pc, #80]	; (8004928 <MX_TIM15_Init+0x108>)
 80048d6:	f00c fd05 	bl	80112e4 <HAL_TIM_PWM_ConfigChannel>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 80048e0:	f7ff fa10 	bl	8003d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048e4:	2300      	movs	r3, #0
 80048e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80048f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004902:	2300      	movs	r3, #0
 8004904:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004906:	1d3b      	adds	r3, r7, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4807      	ldr	r0, [pc, #28]	; (8004928 <MX_TIM15_Init+0x108>)
 800490c:	f00d fbf0 	bl	80120f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8004916:	f7ff f9f5 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800491a:	4803      	ldr	r0, [pc, #12]	; (8004928 <MX_TIM15_Init+0x108>)
 800491c:	f000 fbc0 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 8004920:	bf00      	nop
 8004922:	3760      	adds	r7, #96	; 0x60
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000ad8 	.word	0x20000ad8
 800492c:	40014000 	.word	0x40014000

08004930 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b094      	sub	sp, #80	; 0x50
 8004934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]
 8004940:	609a      	str	r2, [r3, #8]
 8004942:	60da      	str	r2, [r3, #12]
 8004944:	611a      	str	r2, [r3, #16]
 8004946:	615a      	str	r2, [r3, #20]
 8004948:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800494a:	463b      	mov	r3, r7
 800494c:	2234      	movs	r2, #52	; 0x34
 800494e:	2100      	movs	r1, #0
 8004950:	4618      	mov	r0, r3
 8004952:	f010 facf 	bl	8014ef4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004956:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <MX_TIM16_Init+0xf0>)
 8004958:	4a32      	ldr	r2, [pc, #200]	; (8004a24 <MX_TIM16_Init+0xf4>)
 800495a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 800495c:	4b30      	ldr	r3, [pc, #192]	; (8004a20 <MX_TIM16_Init+0xf0>)
 800495e:	f240 2225 	movw	r2, #549	; 0x225
 8004962:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004964:	4b2e      	ldr	r3, [pc, #184]	; (8004a20 <MX_TIM16_Init+0xf0>)
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800496a:	4b2d      	ldr	r3, [pc, #180]	; (8004a20 <MX_TIM16_Init+0xf0>)
 800496c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004970:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004972:	4b2b      	ldr	r3, [pc, #172]	; (8004a20 <MX_TIM16_Init+0xf0>)
 8004974:	2200      	movs	r2, #0
 8004976:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004978:	4b29      	ldr	r3, [pc, #164]	; (8004a20 <MX_TIM16_Init+0xf0>)
 800497a:	2200      	movs	r2, #0
 800497c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800497e:	4b28      	ldr	r3, [pc, #160]	; (8004a20 <MX_TIM16_Init+0xf0>)
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004984:	4826      	ldr	r0, [pc, #152]	; (8004a20 <MX_TIM16_Init+0xf0>)
 8004986:	f00b ff9e 	bl	80108c6 <HAL_TIM_Base_Init>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8004990:	f7ff f9b8 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8004994:	4822      	ldr	r0, [pc, #136]	; (8004a20 <MX_TIM16_Init+0xf0>)
 8004996:	f00c f873 	bl	8010a80 <HAL_TIM_PWM_Init>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80049a0:	f7ff f9b0 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049a4:	2360      	movs	r3, #96	; 0x60
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80049a8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80049ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049ae:	2300      	movs	r3, #0
 80049b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80049b2:	2300      	movs	r3, #0
 80049b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80049be:	2300      	movs	r3, #0
 80049c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80049c6:	2200      	movs	r2, #0
 80049c8:	4619      	mov	r1, r3
 80049ca:	4815      	ldr	r0, [pc, #84]	; (8004a20 <MX_TIM16_Init+0xf0>)
 80049cc:	f00c fc8a 	bl	80112e4 <HAL_TIM_PWM_ConfigChannel>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 80049d6:	f7ff f995 	bl	8003d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80049da:	2300      	movs	r3, #0
 80049dc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80049de:	2300      	movs	r3, #0
 80049e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80049ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80049fc:	463b      	mov	r3, r7
 80049fe:	4619      	mov	r1, r3
 8004a00:	4807      	ldr	r0, [pc, #28]	; (8004a20 <MX_TIM16_Init+0xf0>)
 8004a02:	f00d fb75 	bl	80120f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8004a0c:	f7ff f97a 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8004a10:	4803      	ldr	r0, [pc, #12]	; (8004a20 <MX_TIM16_Init+0xf0>)
 8004a12:	f000 fb45 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 8004a16:	bf00      	nop
 8004a18:	3750      	adds	r7, #80	; 0x50
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000b24 	.word	0x20000b24
 8004a24:	40014400 	.word	0x40014400

08004a28 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b094      	sub	sp, #80	; 0x50
 8004a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	609a      	str	r2, [r3, #8]
 8004a3a:	60da      	str	r2, [r3, #12]
 8004a3c:	611a      	str	r2, [r3, #16]
 8004a3e:	615a      	str	r2, [r3, #20]
 8004a40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004a42:	463b      	mov	r3, r7
 8004a44:	2234      	movs	r2, #52	; 0x34
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f010 fa53 	bl	8014ef4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004a4e:	4b32      	ldr	r3, [pc, #200]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004a50:	4a32      	ldr	r2, [pc, #200]	; (8004b1c <MX_TIM17_Init+0xf4>)
 8004a52:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8004a54:	4b30      	ldr	r3, [pc, #192]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004a56:	f240 2225 	movw	r2, #549	; 0x225
 8004a5a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a5c:	4b2e      	ldr	r3, [pc, #184]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8004a62:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a68:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a6a:	4b2b      	ldr	r3, [pc, #172]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004a70:	4b29      	ldr	r3, [pc, #164]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a76:	4b28      	ldr	r3, [pc, #160]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004a78:	2280      	movs	r2, #128	; 0x80
 8004a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004a7c:	4826      	ldr	r0, [pc, #152]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004a7e:	f00b ff22 	bl	80108c6 <HAL_TIM_Base_Init>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8004a88:	f7ff f93c 	bl	8003d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8004a8c:	4822      	ldr	r0, [pc, #136]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004a8e:	f00b fff7 	bl	8010a80 <HAL_TIM_PWM_Init>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8004a98:	f7ff f934 	bl	8003d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a9c:	2360      	movs	r3, #96	; 0x60
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8004aa0:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004aba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004abe:	2200      	movs	r2, #0
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4815      	ldr	r0, [pc, #84]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004ac4:	f00c fc0e 	bl	80112e4 <HAL_TIM_PWM_ConfigChannel>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8004ace:	f7ff f919 	bl	8003d04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004aea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8004af4:	463b      	mov	r3, r7
 8004af6:	4619      	mov	r1, r3
 8004af8:	4807      	ldr	r0, [pc, #28]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004afa:	f00d faf9 	bl	80120f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8004b04:	f7ff f8fe 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8004b08:	4803      	ldr	r0, [pc, #12]	; (8004b18 <MX_TIM17_Init+0xf0>)
 8004b0a:	f000 fac9 	bl	80050a0 <HAL_TIM_MspPostInit>

}
 8004b0e:	bf00      	nop
 8004b10:	3750      	adds	r7, #80	; 0x50
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000b70 	.word	0x20000b70
 8004b1c:	40014800 	.word	0x40014800

08004b20 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b26:	f107 0310 	add.w	r3, r7, #16
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	609a      	str	r2, [r3, #8]
 8004b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b34:	1d3b      	adds	r3, r7, #4
 8004b36:	2200      	movs	r2, #0
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	605a      	str	r2, [r3, #4]
 8004b3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8004b3e:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <MX_TIM23_Init+0x98>)
 8004b40:	4a1e      	ldr	r2, [pc, #120]	; (8004bbc <MX_TIM23_Init+0x9c>)
 8004b42:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8004b44:	4b1c      	ldr	r3, [pc, #112]	; (8004bb8 <MX_TIM23_Init+0x98>)
 8004b46:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004b4a:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b4c:	4b1a      	ldr	r3, [pc, #104]	; (8004bb8 <MX_TIM23_Init+0x98>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 5000-1;
 8004b52:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <MX_TIM23_Init+0x98>)
 8004b54:	f241 3287 	movw	r2, #4999	; 0x1387
 8004b58:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b5a:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <MX_TIM23_Init+0x98>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b60:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <MX_TIM23_Init+0x98>)
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8004b66:	4814      	ldr	r0, [pc, #80]	; (8004bb8 <MX_TIM23_Init+0x98>)
 8004b68:	f00b fead 	bl	80108c6 <HAL_TIM_Base_Init>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8004b72:	f7ff f8c7 	bl	8003d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8004b7c:	f107 0310 	add.w	r3, r7, #16
 8004b80:	4619      	mov	r1, r3
 8004b82:	480d      	ldr	r0, [pc, #52]	; (8004bb8 <MX_TIM23_Init+0x98>)
 8004b84:	f00c fcc2 	bl	801150c <HAL_TIM_ConfigClockSource>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8004b8e:	f7ff f8b9 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8004b9a:	1d3b      	adds	r3, r7, #4
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4806      	ldr	r0, [pc, #24]	; (8004bb8 <MX_TIM23_Init+0x98>)
 8004ba0:	f00d fa0a 	bl	8011fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8004baa:	f7ff f8ab 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8004bae:	bf00      	nop
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000bbc 	.word	0x20000bbc
 8004bbc:	4000e000 	.word	0x4000e000

08004bc0 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b088      	sub	sp, #32
 8004bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bc6:	f107 0310 	add.w	r3, r7, #16
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	605a      	str	r2, [r3, #4]
 8004bd0:	609a      	str	r2, [r3, #8]
 8004bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bd4:	1d3b      	adds	r3, r7, #4
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	605a      	str	r2, [r3, #4]
 8004bdc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8004bde:	4b1e      	ldr	r3, [pc, #120]	; (8004c58 <MX_TIM24_Init+0x98>)
 8004be0:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <MX_TIM24_Init+0x9c>)
 8004be2:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8004be4:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <MX_TIM24_Init+0x98>)
 8004be6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004bea:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bec:	4b1a      	ldr	r3, [pc, #104]	; (8004c58 <MX_TIM24_Init+0x98>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8004bf2:	4b19      	ldr	r3, [pc, #100]	; (8004c58 <MX_TIM24_Init+0x98>)
 8004bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf8:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bfa:	4b17      	ldr	r3, [pc, #92]	; (8004c58 <MX_TIM24_Init+0x98>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c00:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <MX_TIM24_Init+0x98>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8004c06:	4814      	ldr	r0, [pc, #80]	; (8004c58 <MX_TIM24_Init+0x98>)
 8004c08:	f00b fe5d 	bl	80108c6 <HAL_TIM_Base_Init>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8004c12:	f7ff f877 	bl	8003d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8004c1c:	f107 0310 	add.w	r3, r7, #16
 8004c20:	4619      	mov	r1, r3
 8004c22:	480d      	ldr	r0, [pc, #52]	; (8004c58 <MX_TIM24_Init+0x98>)
 8004c24:	f00c fc72 	bl	801150c <HAL_TIM_ConfigClockSource>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8004c2e:	f7ff f869 	bl	8003d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c32:	2300      	movs	r3, #0
 8004c34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8004c3a:	1d3b      	adds	r3, r7, #4
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4806      	ldr	r0, [pc, #24]	; (8004c58 <MX_TIM24_Init+0x98>)
 8004c40:	f00d f9ba 	bl	8011fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d001      	beq.n	8004c4e <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8004c4a:	f7ff f85b 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8004c4e:	bf00      	nop
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000c08 	.word	0x20000c08
 8004c5c:	4000e400 	.word	0x4000e400

08004c60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c68:	f107 0314 	add.w	r3, r7, #20
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3c      	ldr	r2, [pc, #240]	; (8004d70 <HAL_TIM_PWM_MspInit+0x110>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d15e      	bne.n	8004d40 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c82:	4b3c      	ldr	r3, [pc, #240]	; (8004d74 <HAL_TIM_PWM_MspInit+0x114>)
 8004c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c88:	4a3a      	ldr	r2, [pc, #232]	; (8004d74 <HAL_TIM_PWM_MspInit+0x114>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004c92:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <HAL_TIM_PWM_MspInit+0x114>)
 8004c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	613b      	str	r3, [r7, #16]
 8004c9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca0:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_TIM_PWM_MspInit+0x114>)
 8004ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ca6:	4a33      	ldr	r2, [pc, #204]	; (8004d74 <HAL_TIM_PWM_MspInit+0x114>)
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004cb0:	4b30      	ldr	r3, [pc, #192]	; (8004d74 <HAL_TIM_PWM_MspInit+0x114>)
 8004cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 8004cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8004cd4:	f107 0314 	add.w	r3, r7, #20
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4827      	ldr	r0, [pc, #156]	; (8004d78 <HAL_TIM_PWM_MspInit+0x118>)
 8004cdc:	f005 fcbc 	bl	800a658 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream2;
 8004ce0:	4b26      	ldr	r3, [pc, #152]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004ce2:	4a27      	ldr	r2, [pc, #156]	; (8004d80 <HAL_TIM_PWM_MspInit+0x120>)
 8004ce4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 8004ce6:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004ce8:	220b      	movs	r2, #11
 8004cea:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cec:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004cee:	2240      	movs	r2, #64	; 0x40
 8004cf0:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004cf8:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cfe:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d06:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d0e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8004d10:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8004d22:	4816      	ldr	r0, [pc, #88]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004d24:	f003 fa66 	bl	80081f4 <HAL_DMA_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 8004d2e:	f7fe ffe9 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a11      	ldr	r2, [pc, #68]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004d36:	625a      	str	r2, [r3, #36]	; 0x24
 8004d38:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <HAL_TIM_PWM_MspInit+0x11c>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004d3e:	e013      	b.n	8004d68 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a0f      	ldr	r2, [pc, #60]	; (8004d84 <HAL_TIM_PWM_MspInit+0x124>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d10e      	bne.n	8004d68 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <HAL_TIM_PWM_MspInit+0x114>)
 8004d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d50:	4a08      	ldr	r2, [pc, #32]	; (8004d74 <HAL_TIM_PWM_MspInit+0x114>)
 8004d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d5a:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <HAL_TIM_PWM_MspInit+0x114>)
 8004d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]
}
 8004d68:	bf00      	nop
 8004d6a:	3728      	adds	r7, #40	; 0x28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40010000 	.word	0x40010000
 8004d74:	58024400 	.word	0x58024400
 8004d78:	58020000 	.word	0x58020000
 8004d7c:	20000c54 	.word	0x20000c54
 8004d80:	40020040 	.word	0x40020040
 8004d84:	40014000 	.word	0x40014000

08004d88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b092      	sub	sp, #72	; 0x48
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d94:	2200      	movs	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a72      	ldr	r2, [pc, #456]	; (8004f70 <HAL_TIM_Base_MspInit+0x1e8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d12e      	bne.n	8004e08 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004daa:	4b72      	ldr	r3, [pc, #456]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004db0:	4a70      	ldr	r2, [pc, #448]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004db2:	f043 0302 	orr.w	r3, r3, #2
 8004db6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004dba:	4b6e      	ldr	r3, [pc, #440]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004dbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc8:	4b6a      	ldr	r3, [pc, #424]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dce:	4a69      	ldr	r2, [pc, #420]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004dd0:	f043 0302 	orr.w	r3, r3, #2
 8004dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004dd8:	4b66      	ldr	r3, [pc, #408]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 8004de6:	2320      	movs	r3, #32
 8004de8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dea:	2302      	movs	r3, #2
 8004dec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dee:	2300      	movs	r3, #0
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df2:	2300      	movs	r3, #0
 8004df4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004df6:	2302      	movs	r3, #2
 8004df8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 8004dfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004dfe:	4619      	mov	r1, r3
 8004e00:	485d      	ldr	r0, [pc, #372]	; (8004f78 <HAL_TIM_Base_MspInit+0x1f0>)
 8004e02:	f005 fc29 	bl	800a658 <HAL_GPIO_Init>
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8004e06:	e0ae      	b.n	8004f66 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM5)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a5b      	ldr	r2, [pc, #364]	; (8004f7c <HAL_TIM_Base_MspInit+0x1f4>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10f      	bne.n	8004e32 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e12:	4b58      	ldr	r3, [pc, #352]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e18:	4a56      	ldr	r2, [pc, #344]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e1a:	f043 0308 	orr.w	r3, r3, #8
 8004e1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e22:	4b54      	ldr	r3, [pc, #336]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004e30:	e099      	b.n	8004f66 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM6)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a52      	ldr	r2, [pc, #328]	; (8004f80 <HAL_TIM_Base_MspInit+0x1f8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d10f      	bne.n	8004e5c <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004e3c:	4b4d      	ldr	r3, [pc, #308]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e42:	4a4c      	ldr	r2, [pc, #304]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e44:	f043 0310 	orr.w	r3, r3, #16
 8004e48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e4c:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e5a:	e084      	b.n	8004f66 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM13)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a48      	ldr	r2, [pc, #288]	; (8004f84 <HAL_TIM_Base_MspInit+0x1fc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d10f      	bne.n	8004e86 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004e66:	4b43      	ldr	r3, [pc, #268]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e6c:	4a41      	ldr	r2, [pc, #260]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e76:	4b3f      	ldr	r3, [pc, #252]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	623b      	str	r3, [r7, #32]
 8004e82:	6a3b      	ldr	r3, [r7, #32]
}
 8004e84:	e06f      	b.n	8004f66 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM14)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a3f      	ldr	r2, [pc, #252]	; (8004f88 <HAL_TIM_Base_MspInit+0x200>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10f      	bne.n	8004eb0 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004e90:	4b38      	ldr	r3, [pc, #224]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e96:	4a37      	ldr	r2, [pc, #220]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ea0:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	61fb      	str	r3, [r7, #28]
 8004eac:	69fb      	ldr	r3, [r7, #28]
}
 8004eae:	e05a      	b.n	8004f66 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM16)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a35      	ldr	r2, [pc, #212]	; (8004f8c <HAL_TIM_Base_MspInit+0x204>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10f      	bne.n	8004eda <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004eba:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ec0:	4a2c      	ldr	r2, [pc, #176]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004eca:	4b2a      	ldr	r3, [pc, #168]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
}
 8004ed8:	e045      	b.n	8004f66 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM17)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a2c      	ldr	r2, [pc, #176]	; (8004f90 <HAL_TIM_Base_MspInit+0x208>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d10f      	bne.n	8004f04 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004ee4:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004ee6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004eea:	4a22      	ldr	r2, [pc, #136]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004ef4:	4b1f      	ldr	r3, [pc, #124]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	697b      	ldr	r3, [r7, #20]
}
 8004f02:	e030      	b.n	8004f66 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM23)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a22      	ldr	r2, [pc, #136]	; (8004f94 <HAL_TIM_Base_MspInit+0x20c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d117      	bne.n	8004f3e <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004f0e:	4b19      	ldr	r3, [pc, #100]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f10:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f14:	4a17      	ldr	r2, [pc, #92]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f1a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004f1e:	4b15      	ldr	r3, [pc, #84]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f20:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2100      	movs	r1, #0
 8004f30:	20a1      	movs	r0, #161	; 0xa1
 8004f32:	f002 ff2c 	bl	8007d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8004f36:	20a1      	movs	r0, #161	; 0xa1
 8004f38:	f002 ff43 	bl	8007dc2 <HAL_NVIC_EnableIRQ>
}
 8004f3c:	e013      	b.n	8004f66 <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM24)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a15      	ldr	r2, [pc, #84]	; (8004f98 <HAL_TIM_Base_MspInit+0x210>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d10e      	bne.n	8004f66 <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004f48:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f4a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f4e:	4a09      	ldr	r2, [pc, #36]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f54:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004f58:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <HAL_TIM_Base_MspInit+0x1ec>)
 8004f5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
}
 8004f66:	bf00      	nop
 8004f68:	3748      	adds	r7, #72	; 0x48
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40000400 	.word	0x40000400
 8004f74:	58024400 	.word	0x58024400
 8004f78:	58020400 	.word	0x58020400
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40001000 	.word	0x40001000
 8004f84:	40001c00 	.word	0x40001c00
 8004f88:	40002000 	.word	0x40002000
 8004f8c:	40014400 	.word	0x40014400
 8004f90:	40014800 	.word	0x40014800
 8004f94:	4000e000 	.word	0x4000e000
 8004f98:	4000e400 	.word	0x4000e400

08004f9c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08c      	sub	sp, #48	; 0x30
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa4:	f107 031c 	add.w	r3, r7, #28
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a34      	ldr	r2, [pc, #208]	; (800508c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d12f      	bne.n	800501e <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fbe:	4b34      	ldr	r3, [pc, #208]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fc4:	4a32      	ldr	r2, [pc, #200]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fce:	4b30      	ldr	r3, [pc, #192]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fdc:	4b2c      	ldr	r3, [pc, #176]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004fe2:	4a2b      	ldr	r2, [pc, #172]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004fe4:	f043 0308 	orr.w	r3, r3, #8
 8004fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004fec:	4b28      	ldr	r3, [pc, #160]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8004ffa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005000:	2302      	movs	r3, #2
 8005002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005004:	2300      	movs	r3, #0
 8005006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005008:	2300      	movs	r3, #0
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800500c:	2302      	movs	r3, #2
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005010:	f107 031c 	add.w	r3, r7, #28
 8005014:	4619      	mov	r1, r3
 8005016:	481f      	ldr	r0, [pc, #124]	; (8005094 <HAL_TIM_Encoder_MspInit+0xf8>)
 8005018:	f005 fb1e 	bl	800a658 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800501c:	e032      	b.n	8005084 <HAL_TIM_Encoder_MspInit+0xe8>
  else if(tim_encoderHandle->Instance==TIM8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a1d      	ldr	r2, [pc, #116]	; (8005098 <HAL_TIM_Encoder_MspInit+0xfc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d12d      	bne.n	8005084 <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005028:	4b19      	ldr	r3, [pc, #100]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 800502a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800502e:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 8005030:	f043 0302 	orr.w	r3, r3, #2
 8005034:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005038:	4b15      	ldr	r3, [pc, #84]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 800503a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005046:	4b12      	ldr	r3, [pc, #72]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 8005048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800504c:	4a10      	ldr	r2, [pc, #64]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 800504e:	f043 0304 	orr.w	r3, r3, #4
 8005052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005056:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <HAL_TIM_Encoder_MspInit+0xf4>)
 8005058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8005064:	23c0      	movs	r3, #192	; 0xc0
 8005066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005068:	2302      	movs	r3, #2
 800506a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005070:	2300      	movs	r3, #0
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005074:	2303      	movs	r3, #3
 8005076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005078:	f107 031c 	add.w	r3, r7, #28
 800507c:	4619      	mov	r1, r3
 800507e:	4807      	ldr	r0, [pc, #28]	; (800509c <HAL_TIM_Encoder_MspInit+0x100>)
 8005080:	f005 faea 	bl	800a658 <HAL_GPIO_Init>
}
 8005084:	bf00      	nop
 8005086:	3730      	adds	r7, #48	; 0x30
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40000800 	.word	0x40000800
 8005090:	58024400 	.word	0x58024400
 8005094:	58020c00 	.word	0x58020c00
 8005098:	40010400 	.word	0x40010400
 800509c:	58020800 	.word	0x58020800

080050a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b090      	sub	sp, #64	; 0x40
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	605a      	str	r2, [r3, #4]
 80050b2:	609a      	str	r2, [r3, #8]
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a95      	ldr	r2, [pc, #596]	; (8005314 <HAL_TIM_MspPostInit+0x274>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d120      	bne.n	8005104 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050c2:	4b95      	ldr	r3, [pc, #596]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80050c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050c8:	4a93      	ldr	r2, [pc, #588]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050d2:	4b91      	ldr	r3, [pc, #580]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80050d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80050de:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 80050e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e6:	2302      	movs	r3, #2
 80050e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ee:	2300      	movs	r3, #0
 80050f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050f2:	2301      	movs	r3, #1
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 80050f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050fa:	4619      	mov	r1, r3
 80050fc:	4887      	ldr	r0, [pc, #540]	; (800531c <HAL_TIM_MspPostInit+0x27c>)
 80050fe:	f005 faab 	bl	800a658 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8005102:	e103      	b.n	800530c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a85      	ldr	r2, [pc, #532]	; (8005320 <HAL_TIM_MspPostInit+0x280>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d11f      	bne.n	800514e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510e:	4b82      	ldr	r3, [pc, #520]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 8005110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005114:	4a80      	ldr	r2, [pc, #512]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 8005116:	f043 0302 	orr.w	r3, r3, #2
 800511a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800511e:	4b7e      	ldr	r3, [pc, #504]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 8005120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
 800512a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 800512c:	2310      	movs	r3, #16
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005130:	2302      	movs	r3, #2
 8005132:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005134:	2300      	movs	r3, #0
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005138:	2300      	movs	r3, #0
 800513a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800513c:	2302      	movs	r3, #2
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 8005140:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005144:	4619      	mov	r1, r3
 8005146:	4877      	ldr	r0, [pc, #476]	; (8005324 <HAL_TIM_MspPostInit+0x284>)
 8005148:	f005 fa86 	bl	800a658 <HAL_GPIO_Init>
}
 800514c:	e0de      	b.n	800530c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a75      	ldr	r2, [pc, #468]	; (8005328 <HAL_TIM_MspPostInit+0x288>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d11f      	bne.n	8005198 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005158:	4b6f      	ldr	r3, [pc, #444]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 800515a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800515e:	4a6e      	ldr	r2, [pc, #440]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 8005160:	f043 0301 	orr.w	r3, r3, #1
 8005164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005168:	4b6b      	ldr	r3, [pc, #428]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 800516a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	623b      	str	r3, [r7, #32]
 8005174:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005176:	2303      	movs	r3, #3
 8005178:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517a:	2302      	movs	r3, #2
 800517c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517e:	2300      	movs	r3, #0
 8005180:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005182:	2300      	movs	r3, #0
 8005184:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005186:	2302      	movs	r3, #2
 8005188:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800518a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800518e:	4619      	mov	r1, r3
 8005190:	4862      	ldr	r0, [pc, #392]	; (800531c <HAL_TIM_MspPostInit+0x27c>)
 8005192:	f005 fa61 	bl	800a658 <HAL_GPIO_Init>
}
 8005196:	e0b9      	b.n	800530c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a63      	ldr	r2, [pc, #396]	; (800532c <HAL_TIM_MspPostInit+0x28c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d11f      	bne.n	80051e2 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a2:	4b5d      	ldr	r3, [pc, #372]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80051a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a8:	4a5b      	ldr	r2, [pc, #364]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051b2:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80051b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 80051c0:	2340      	movs	r3, #64	; 0x40
 80051c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c4:	2302      	movs	r3, #2
 80051c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051cc:	2300      	movs	r3, #0
 80051ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80051d0:	2309      	movs	r3, #9
 80051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80051d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051d8:	4619      	mov	r1, r3
 80051da:	4850      	ldr	r0, [pc, #320]	; (800531c <HAL_TIM_MspPostInit+0x27c>)
 80051dc:	f005 fa3c 	bl	800a658 <HAL_GPIO_Init>
}
 80051e0:	e094      	b.n	800530c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a52      	ldr	r2, [pc, #328]	; (8005330 <HAL_TIM_MspPostInit+0x290>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d11f      	bne.n	800522c <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ec:	4b4a      	ldr	r3, [pc, #296]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80051ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051f2:	4a49      	ldr	r2, [pc, #292]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051fc:	4b46      	ldr	r3, [pc, #280]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80051fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	61bb      	str	r3, [r7, #24]
 8005208:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 800520a:	2380      	movs	r3, #128	; 0x80
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520e:	2302      	movs	r3, #2
 8005210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005212:	2300      	movs	r3, #0
 8005214:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005216:	2300      	movs	r3, #0
 8005218:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800521a:	2309      	movs	r3, #9
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 800521e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005222:	4619      	mov	r1, r3
 8005224:	483d      	ldr	r0, [pc, #244]	; (800531c <HAL_TIM_MspPostInit+0x27c>)
 8005226:	f005 fa17 	bl	800a658 <HAL_GPIO_Init>
}
 800522a:	e06f      	b.n	800530c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a40      	ldr	r2, [pc, #256]	; (8005334 <HAL_TIM_MspPostInit+0x294>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d11f      	bne.n	8005276 <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005236:	4b38      	ldr	r3, [pc, #224]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 8005238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800523c:	4a36      	ldr	r2, [pc, #216]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 800523e:	f043 0310 	orr.w	r3, r3, #16
 8005242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005246:	4b34      	ldr	r3, [pc, #208]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 8005248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005254:	2320      	movs	r3, #32
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005258:	2302      	movs	r3, #2
 800525a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525c:	2300      	movs	r3, #0
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005260:	2300      	movs	r3, #0
 8005262:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8005264:	2304      	movs	r3, #4
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800526c:	4619      	mov	r1, r3
 800526e:	4832      	ldr	r0, [pc, #200]	; (8005338 <HAL_TIM_MspPostInit+0x298>)
 8005270:	f005 f9f2 	bl	800a658 <HAL_GPIO_Init>
}
 8005274:	e04a      	b.n	800530c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a30      	ldr	r2, [pc, #192]	; (800533c <HAL_TIM_MspPostInit+0x29c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d120      	bne.n	80052c2 <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005280:	4b25      	ldr	r3, [pc, #148]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 8005282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005286:	4a24      	ldr	r2, [pc, #144]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 8005288:	f043 0302 	orr.w	r3, r3, #2
 800528c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005290:	4b21      	ldr	r3, [pc, #132]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 8005292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005296:	f003 0302 	and.w	r3, r3, #2
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 800529e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a4:	2302      	movs	r3, #2
 80052a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052a8:	2300      	movs	r3, #0
 80052aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ac:	2300      	movs	r3, #0
 80052ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80052b0:	2301      	movs	r3, #1
 80052b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80052b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052b8:	4619      	mov	r1, r3
 80052ba:	481a      	ldr	r0, [pc, #104]	; (8005324 <HAL_TIM_MspPostInit+0x284>)
 80052bc:	f005 f9cc 	bl	800a658 <HAL_GPIO_Init>
}
 80052c0:	e024      	b.n	800530c <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1e      	ldr	r2, [pc, #120]	; (8005340 <HAL_TIM_MspPostInit+0x2a0>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d11f      	bne.n	800530c <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80052ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052d2:	4a11      	ldr	r2, [pc, #68]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80052d4:	f043 0302 	orr.w	r3, r3, #2
 80052d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052dc:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <HAL_TIM_MspPostInit+0x278>)
 80052de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 80052ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f0:	2302      	movs	r3, #2
 80052f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f4:	2300      	movs	r3, #0
 80052f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f8:	2300      	movs	r3, #0
 80052fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80052fc:	2301      	movs	r3, #1
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 8005300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005304:	4619      	mov	r1, r3
 8005306:	4807      	ldr	r0, [pc, #28]	; (8005324 <HAL_TIM_MspPostInit+0x284>)
 8005308:	f005 f9a6 	bl	800a658 <HAL_GPIO_Init>
}
 800530c:	bf00      	nop
 800530e:	3740      	adds	r7, #64	; 0x40
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40010000 	.word	0x40010000
 8005318:	58024400 	.word	0x58024400
 800531c:	58020000 	.word	0x58020000
 8005320:	40000400 	.word	0x40000400
 8005324:	58020400 	.word	0x58020400
 8005328:	40000c00 	.word	0x40000c00
 800532c:	40001c00 	.word	0x40001c00
 8005330:	40002000 	.word	0x40002000
 8005334:	40014000 	.word	0x40014000
 8005338:	58021000 	.word	0x58021000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005348:	4b24      	ldr	r3, [pc, #144]	; (80053dc <MX_UART5_Init+0x98>)
 800534a:	4a25      	ldr	r2, [pc, #148]	; (80053e0 <MX_UART5_Init+0x9c>)
 800534c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 800534e:	4b23      	ldr	r3, [pc, #140]	; (80053dc <MX_UART5_Init+0x98>)
 8005350:	4a24      	ldr	r2, [pc, #144]	; (80053e4 <MX_UART5_Init+0xa0>)
 8005352:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005354:	4b21      	ldr	r3, [pc, #132]	; (80053dc <MX_UART5_Init+0x98>)
 8005356:	2200      	movs	r2, #0
 8005358:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800535a:	4b20      	ldr	r3, [pc, #128]	; (80053dc <MX_UART5_Init+0x98>)
 800535c:	2200      	movs	r2, #0
 800535e:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005360:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <MX_UART5_Init+0x98>)
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005366:	4b1d      	ldr	r3, [pc, #116]	; (80053dc <MX_UART5_Init+0x98>)
 8005368:	220c      	movs	r2, #12
 800536a:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800536c:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <MX_UART5_Init+0x98>)
 800536e:	2200      	movs	r2, #0
 8005370:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005372:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <MX_UART5_Init+0x98>)
 8005374:	2200      	movs	r2, #0
 8005376:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005378:	4b18      	ldr	r3, [pc, #96]	; (80053dc <MX_UART5_Init+0x98>)
 800537a:	2200      	movs	r2, #0
 800537c:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800537e:	4b17      	ldr	r3, [pc, #92]	; (80053dc <MX_UART5_Init+0x98>)
 8005380:	2200      	movs	r2, #0
 8005382:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005384:	4b15      	ldr	r3, [pc, #84]	; (80053dc <MX_UART5_Init+0x98>)
 8005386:	2208      	movs	r2, #8
 8005388:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800538a:	4b14      	ldr	r3, [pc, #80]	; (80053dc <MX_UART5_Init+0x98>)
 800538c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005392:	4812      	ldr	r0, [pc, #72]	; (80053dc <MX_UART5_Init+0x98>)
 8005394:	f00c ff6a 	bl	801226c <HAL_UART_Init>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 800539e:	f7fe fcb1 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053a2:	2100      	movs	r1, #0
 80053a4:	480d      	ldr	r0, [pc, #52]	; (80053dc <MX_UART5_Init+0x98>)
 80053a6:	f00f fcb6 	bl	8014d16 <HAL_UARTEx_SetTxFifoThreshold>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 80053b0:	f7fe fca8 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053b4:	2100      	movs	r1, #0
 80053b6:	4809      	ldr	r0, [pc, #36]	; (80053dc <MX_UART5_Init+0x98>)
 80053b8:	f00f fceb 	bl	8014d92 <HAL_UARTEx_SetRxFifoThreshold>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <MX_UART5_Init+0x82>
  {
    Error_Handler();
 80053c2:	f7fe fc9f 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80053c6:	4805      	ldr	r0, [pc, #20]	; (80053dc <MX_UART5_Init+0x98>)
 80053c8:	f00f fc6c 	bl	8014ca4 <HAL_UARTEx_DisableFifoMode>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <MX_UART5_Init+0x92>
  {
    Error_Handler();
 80053d2:	f7fe fc97 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80053d6:	bf00      	nop
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000ccc 	.word	0x20000ccc
 80053e0:	40005000 	.word	0x40005000
 80053e4:	000f4240 	.word	0x000f4240

080053e8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053ec:	4b22      	ldr	r3, [pc, #136]	; (8005478 <MX_USART1_UART_Init+0x90>)
 80053ee:	4a23      	ldr	r2, [pc, #140]	; (800547c <MX_USART1_UART_Init+0x94>)
 80053f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80053f2:	4b21      	ldr	r3, [pc, #132]	; (8005478 <MX_USART1_UART_Init+0x90>)
 80053f4:	4a22      	ldr	r2, [pc, #136]	; (8005480 <MX_USART1_UART_Init+0x98>)
 80053f6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053f8:	4b1f      	ldr	r3, [pc, #124]	; (8005478 <MX_USART1_UART_Init+0x90>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053fe:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <MX_USART1_UART_Init+0x90>)
 8005400:	2200      	movs	r2, #0
 8005402:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005404:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <MX_USART1_UART_Init+0x90>)
 8005406:	2200      	movs	r2, #0
 8005408:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <MX_USART1_UART_Init+0x90>)
 800540c:	220c      	movs	r2, #12
 800540e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005410:	4b19      	ldr	r3, [pc, #100]	; (8005478 <MX_USART1_UART_Init+0x90>)
 8005412:	2200      	movs	r2, #0
 8005414:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005416:	4b18      	ldr	r3, [pc, #96]	; (8005478 <MX_USART1_UART_Init+0x90>)
 8005418:	2200      	movs	r2, #0
 800541a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800541c:	4b16      	ldr	r3, [pc, #88]	; (8005478 <MX_USART1_UART_Init+0x90>)
 800541e:	2200      	movs	r2, #0
 8005420:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <MX_USART1_UART_Init+0x90>)
 8005424:	2200      	movs	r2, #0
 8005426:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005428:	4b13      	ldr	r3, [pc, #76]	; (8005478 <MX_USART1_UART_Init+0x90>)
 800542a:	2200      	movs	r2, #0
 800542c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800542e:	4812      	ldr	r0, [pc, #72]	; (8005478 <MX_USART1_UART_Init+0x90>)
 8005430:	f00c ff1c 	bl	801226c <HAL_UART_Init>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800543a:	f7fe fc63 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800543e:	2100      	movs	r1, #0
 8005440:	480d      	ldr	r0, [pc, #52]	; (8005478 <MX_USART1_UART_Init+0x90>)
 8005442:	f00f fc68 	bl	8014d16 <HAL_UARTEx_SetTxFifoThreshold>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d001      	beq.n	8005450 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 800544c:	f7fe fc5a 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005450:	2100      	movs	r1, #0
 8005452:	4809      	ldr	r0, [pc, #36]	; (8005478 <MX_USART1_UART_Init+0x90>)
 8005454:	f00f fc9d 	bl	8014d92 <HAL_UARTEx_SetRxFifoThreshold>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800545e:	f7fe fc51 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005462:	4805      	ldr	r0, [pc, #20]	; (8005478 <MX_USART1_UART_Init+0x90>)
 8005464:	f00f fc1e 	bl	8014ca4 <HAL_UARTEx_DisableFifoMode>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800546e:	f7fe fc49 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000d5c 	.word	0x20000d5c
 800547c:	40011000 	.word	0x40011000
 8005480:	001e8480 	.word	0x001e8480

08005484 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005488:	4b22      	ldr	r3, [pc, #136]	; (8005514 <MX_USART3_UART_Init+0x90>)
 800548a:	4a23      	ldr	r2, [pc, #140]	; (8005518 <MX_USART3_UART_Init+0x94>)
 800548c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <MX_USART3_UART_Init+0x90>)
 8005490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005496:	4b1f      	ldr	r3, [pc, #124]	; (8005514 <MX_USART3_UART_Init+0x90>)
 8005498:	2200      	movs	r2, #0
 800549a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800549c:	4b1d      	ldr	r3, [pc, #116]	; (8005514 <MX_USART3_UART_Init+0x90>)
 800549e:	2200      	movs	r2, #0
 80054a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80054a2:	4b1c      	ldr	r3, [pc, #112]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80054a8:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054aa:	220c      	movs	r2, #12
 80054ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054ae:	4b19      	ldr	r3, [pc, #100]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80054b4:	4b17      	ldr	r3, [pc, #92]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80054ba:	4b16      	ldr	r3, [pc, #88]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054bc:	2200      	movs	r2, #0
 80054be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80054c6:	4b13      	ldr	r3, [pc, #76]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80054cc:	4811      	ldr	r0, [pc, #68]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054ce:	f00c fecd 	bl	801226c <HAL_UART_Init>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80054d8:	f7fe fc14 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054dc:	2100      	movs	r1, #0
 80054de:	480d      	ldr	r0, [pc, #52]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054e0:	f00f fc19 	bl	8014d16 <HAL_UARTEx_SetTxFifoThreshold>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80054ea:	f7fe fc0b 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054ee:	2100      	movs	r1, #0
 80054f0:	4808      	ldr	r0, [pc, #32]	; (8005514 <MX_USART3_UART_Init+0x90>)
 80054f2:	f00f fc4e 	bl	8014d92 <HAL_UARTEx_SetRxFifoThreshold>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d001      	beq.n	8005500 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80054fc:	f7fe fc02 	bl	8003d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8005500:	4804      	ldr	r0, [pc, #16]	; (8005514 <MX_USART3_UART_Init+0x90>)
 8005502:	f00f fbcf 	bl	8014ca4 <HAL_UARTEx_DisableFifoMode>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800550c:	f7fe fbfa 	bl	8003d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005510:	bf00      	nop
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20000dec 	.word	0x20000dec
 8005518:	40004800 	.word	0x40004800

0800551c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08e      	sub	sp, #56	; 0x38
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	609a      	str	r2, [r3, #8]
 8005530:	60da      	str	r2, [r3, #12]
 8005532:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a86      	ldr	r2, [pc, #536]	; (8005754 <HAL_UART_MspInit+0x238>)
 800553a:	4293      	cmp	r3, r2
 800553c:	f040 8094 	bne.w	8005668 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005540:	4b85      	ldr	r3, [pc, #532]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005542:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005546:	4a84      	ldr	r2, [pc, #528]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800554c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005550:	4b81      	ldr	r3, [pc, #516]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555a:	623b      	str	r3, [r7, #32]
 800555c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800555e:	4b7e      	ldr	r3, [pc, #504]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005564:	4a7c      	ldr	r2, [pc, #496]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005566:	f043 0302 	orr.w	r3, r3, #2
 800556a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800556e:	4b7a      	ldr	r3, [pc, #488]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005570:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	61fb      	str	r3, [r7, #28]
 800557a:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800557c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005582:	2302      	movs	r3, #2
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005586:	2300      	movs	r3, #0
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800558a:	2300      	movs	r3, #0
 800558c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800558e:	230e      	movs	r3, #14
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005596:	4619      	mov	r1, r3
 8005598:	4870      	ldr	r0, [pc, #448]	; (800575c <HAL_UART_MspInit+0x240>)
 800559a:	f005 f85d 	bl	800a658 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800559e:	4b70      	ldr	r3, [pc, #448]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055a0:	4a70      	ldr	r2, [pc, #448]	; (8005764 <HAL_UART_MspInit+0x248>)
 80055a2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80055a4:	4b6e      	ldr	r3, [pc, #440]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055a6:	2241      	movs	r2, #65	; 0x41
 80055a8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055aa:	4b6d      	ldr	r3, [pc, #436]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055b0:	4b6b      	ldr	r3, [pc, #428]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055b6:	4b6a      	ldr	r3, [pc, #424]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055bc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055be:	4b68      	ldr	r3, [pc, #416]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055c4:	4b66      	ldr	r3, [pc, #408]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80055ca:	4b65      	ldr	r3, [pc, #404]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80055d0:	4b63      	ldr	r3, [pc, #396]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055d6:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055d8:	4b61      	ldr	r3, [pc, #388]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055da:	2200      	movs	r2, #0
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80055de:	4860      	ldr	r0, [pc, #384]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055e0:	f002 fe08 	bl	80081f4 <HAL_DMA_Init>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 80055ea:	f7fe fb8b 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a5b      	ldr	r2, [pc, #364]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80055f4:	4a5a      	ldr	r2, [pc, #360]	; (8005760 <HAL_UART_MspInit+0x244>)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 80055fa:	4b5b      	ldr	r3, [pc, #364]	; (8005768 <HAL_UART_MspInit+0x24c>)
 80055fc:	4a5b      	ldr	r2, [pc, #364]	; (800576c <HAL_UART_MspInit+0x250>)
 80055fe:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_UART_MspInit+0x24c>)
 8005602:	2242      	movs	r2, #66	; 0x42
 8005604:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005606:	4b58      	ldr	r3, [pc, #352]	; (8005768 <HAL_UART_MspInit+0x24c>)
 8005608:	2240      	movs	r2, #64	; 0x40
 800560a:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800560c:	4b56      	ldr	r3, [pc, #344]	; (8005768 <HAL_UART_MspInit+0x24c>)
 800560e:	2200      	movs	r2, #0
 8005610:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005612:	4b55      	ldr	r3, [pc, #340]	; (8005768 <HAL_UART_MspInit+0x24c>)
 8005614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005618:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800561a:	4b53      	ldr	r3, [pc, #332]	; (8005768 <HAL_UART_MspInit+0x24c>)
 800561c:	2200      	movs	r2, #0
 800561e:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005620:	4b51      	ldr	r3, [pc, #324]	; (8005768 <HAL_UART_MspInit+0x24c>)
 8005622:	2200      	movs	r2, #0
 8005624:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8005626:	4b50      	ldr	r3, [pc, #320]	; (8005768 <HAL_UART_MspInit+0x24c>)
 8005628:	2200      	movs	r2, #0
 800562a:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800562c:	4b4e      	ldr	r3, [pc, #312]	; (8005768 <HAL_UART_MspInit+0x24c>)
 800562e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005632:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005634:	4b4c      	ldr	r3, [pc, #304]	; (8005768 <HAL_UART_MspInit+0x24c>)
 8005636:	2200      	movs	r2, #0
 8005638:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800563a:	484b      	ldr	r0, [pc, #300]	; (8005768 <HAL_UART_MspInit+0x24c>)
 800563c:	f002 fdda 	bl	80081f4 <HAL_DMA_Init>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8005646:	f7fe fb5d 	bl	8003d04 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a46      	ldr	r2, [pc, #280]	; (8005768 <HAL_UART_MspInit+0x24c>)
 800564e:	679a      	str	r2, [r3, #120]	; 0x78
 8005650:	4a45      	ldr	r2, [pc, #276]	; (8005768 <HAL_UART_MspInit+0x24c>)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8005656:	2200      	movs	r2, #0
 8005658:	2100      	movs	r1, #0
 800565a:	2035      	movs	r0, #53	; 0x35
 800565c:	f002 fb97 	bl	8007d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005660:	2035      	movs	r0, #53	; 0x35
 8005662:	f002 fbae 	bl	8007dc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005666:	e070      	b.n	800574a <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a40      	ldr	r2, [pc, #256]	; (8005770 <HAL_UART_MspInit+0x254>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d12f      	bne.n	80056d2 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005672:	4b39      	ldr	r3, [pc, #228]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005678:	4a37      	ldr	r2, [pc, #220]	; (8005758 <HAL_UART_MspInit+0x23c>)
 800567a:	f043 0310 	orr.w	r3, r3, #16
 800567e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005682:	4b35      	ldr	r3, [pc, #212]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	61bb      	str	r3, [r7, #24]
 800568e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005690:	4b31      	ldr	r3, [pc, #196]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005696:	4a30      	ldr	r2, [pc, #192]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005698:	f043 0302 	orr.w	r3, r3, #2
 800569c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056a0:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <HAL_UART_MspInit+0x23c>)
 80056a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80056ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80056b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b4:	2302      	movs	r3, #2
 80056b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056bc:	2300      	movs	r3, #0
 80056be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80056c0:	2304      	movs	r3, #4
 80056c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c8:	4619      	mov	r1, r3
 80056ca:	4824      	ldr	r0, [pc, #144]	; (800575c <HAL_UART_MspInit+0x240>)
 80056cc:	f004 ffc4 	bl	800a658 <HAL_GPIO_Init>
}
 80056d0:	e03b      	b.n	800574a <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a27      	ldr	r2, [pc, #156]	; (8005774 <HAL_UART_MspInit+0x258>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d136      	bne.n	800574a <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 80056dc:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <HAL_UART_MspInit+0x23c>)
 80056de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056e2:	4a1d      	ldr	r2, [pc, #116]	; (8005758 <HAL_UART_MspInit+0x23c>)
 80056e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80056ec:	4b1a      	ldr	r3, [pc, #104]	; (8005758 <HAL_UART_MspInit+0x23c>)
 80056ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056fa:	4b17      	ldr	r3, [pc, #92]	; (8005758 <HAL_UART_MspInit+0x23c>)
 80056fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005700:	4a15      	ldr	r2, [pc, #84]	; (8005758 <HAL_UART_MspInit+0x23c>)
 8005702:	f043 0308 	orr.w	r3, r3, #8
 8005706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800570a:	4b13      	ldr	r3, [pc, #76]	; (8005758 <HAL_UART_MspInit+0x23c>)
 800570c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005718:	f44f 7340 	mov.w	r3, #768	; 0x300
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571e:	2302      	movs	r3, #2
 8005720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005722:	2300      	movs	r3, #0
 8005724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005726:	2300      	movs	r3, #0
 8005728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800572a:	2307      	movs	r3, #7
 800572c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800572e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005732:	4619      	mov	r1, r3
 8005734:	4810      	ldr	r0, [pc, #64]	; (8005778 <HAL_UART_MspInit+0x25c>)
 8005736:	f004 ff8f 	bl	800a658 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800573a:	2200      	movs	r2, #0
 800573c:	2100      	movs	r1, #0
 800573e:	2027      	movs	r0, #39	; 0x27
 8005740:	f002 fb25 	bl	8007d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005744:	2027      	movs	r0, #39	; 0x27
 8005746:	f002 fb3c 	bl	8007dc2 <HAL_NVIC_EnableIRQ>
}
 800574a:	bf00      	nop
 800574c:	3738      	adds	r7, #56	; 0x38
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	40005000 	.word	0x40005000
 8005758:	58024400 	.word	0x58024400
 800575c:	58020400 	.word	0x58020400
 8005760:	20000e7c 	.word	0x20000e7c
 8005764:	40020010 	.word	0x40020010
 8005768:	20000ef4 	.word	0x20000ef4
 800576c:	40020028 	.word	0x40020028
 8005770:	40011000 	.word	0x40011000
 8005774:	40004800 	.word	0x40004800
 8005778:	58020c00 	.word	0x58020c00

0800577c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800577c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005780:	f7fe fcbe 	bl	8004100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005784:	480c      	ldr	r0, [pc, #48]	; (80057b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005786:	490d      	ldr	r1, [pc, #52]	; (80057bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005788:	4a0d      	ldr	r2, [pc, #52]	; (80057c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800578a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800578c:	e002      	b.n	8005794 <LoopCopyDataInit>

0800578e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800578e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005792:	3304      	adds	r3, #4

08005794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005798:	d3f9      	bcc.n	800578e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800579a:	4a0a      	ldr	r2, [pc, #40]	; (80057c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800579c:	4c0a      	ldr	r4, [pc, #40]	; (80057c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800579e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057a0:	e001      	b.n	80057a6 <LoopFillZerobss>

080057a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057a4:	3204      	adds	r2, #4

080057a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057a8:	d3fb      	bcc.n	80057a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80057aa:	f00f fb7f 	bl	8014eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057ae:	f7fc ffe3 	bl	8002778 <main>
  bx  lr
 80057b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80057b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80057b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057bc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80057c0:	08015de0 	.word	0x08015de0
  ldr r2, =_sbss
 80057c4:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80057c8:	20000f70 	.word	0x20000f70

080057cc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057cc:	e7fe      	b.n	80057cc <ADC_IRQHandler>
	...

080057d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057d6:	2003      	movs	r0, #3
 80057d8:	f002 face 	bl	8007d78 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80057dc:	f007 fe64 	bl	800d4a8 <HAL_RCC_GetSysClockFreq>
 80057e0:	4602      	mov	r2, r0
 80057e2:	4b15      	ldr	r3, [pc, #84]	; (8005838 <HAL_Init+0x68>)
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	0a1b      	lsrs	r3, r3, #8
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	4913      	ldr	r1, [pc, #76]	; (800583c <HAL_Init+0x6c>)
 80057ee:	5ccb      	ldrb	r3, [r1, r3]
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
 80057f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80057fa:	4b0f      	ldr	r3, [pc, #60]	; (8005838 <HAL_Init+0x68>)
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	4a0e      	ldr	r2, [pc, #56]	; (800583c <HAL_Init+0x6c>)
 8005804:	5cd3      	ldrb	r3, [r2, r3]
 8005806:	f003 031f 	and.w	r3, r3, #31
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	fa22 f303 	lsr.w	r3, r2, r3
 8005810:	4a0b      	ldr	r2, [pc, #44]	; (8005840 <HAL_Init+0x70>)
 8005812:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005814:	4a0b      	ldr	r2, [pc, #44]	; (8005844 <HAL_Init+0x74>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800581a:	2000      	movs	r0, #0
 800581c:	f000 f814 	bl	8005848 <HAL_InitTick>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e002      	b.n	8005830 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800582a:	f7fe fbd5 	bl	8003fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	58024400 	.word	0x58024400
 800583c:	08015bb8 	.word	0x08015bb8
 8005840:	20000004 	.word	0x20000004
 8005844:	20000000 	.word	0x20000000

08005848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <HAL_InitTick+0x60>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e021      	b.n	80058a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <HAL_InitTick+0x64>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <HAL_InitTick+0x60>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	4619      	mov	r1, r3
 8005866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800586a:	fbb3 f3f1 	udiv	r3, r3, r1
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	4618      	mov	r0, r3
 8005874:	f002 fab3 	bl	8007dde <HAL_SYSTICK_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e00e      	b.n	80058a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b0f      	cmp	r3, #15
 8005886:	d80a      	bhi.n	800589e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005888:	2200      	movs	r2, #0
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	f002 fa7d 	bl	8007d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005894:	4a06      	ldr	r2, [pc, #24]	; (80058b0 <HAL_InitTick+0x68>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
 800589c:	e000      	b.n	80058a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	2000000c 	.word	0x2000000c
 80058ac:	20000000 	.word	0x20000000
 80058b0:	20000008 	.word	0x20000008

080058b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_IncTick+0x20>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	461a      	mov	r2, r3
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <HAL_IncTick+0x24>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4413      	add	r3, r2
 80058c4:	4a04      	ldr	r2, [pc, #16]	; (80058d8 <HAL_IncTick+0x24>)
 80058c6:	6013      	str	r3, [r2, #0]
}
 80058c8:	bf00      	nop
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	2000000c 	.word	0x2000000c
 80058d8:	20000f6c 	.word	0x20000f6c

080058dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80058dc:	b480      	push	{r7}
 80058de:	af00      	add	r7, sp, #0
  return uwTick;
 80058e0:	4b03      	ldr	r3, [pc, #12]	; (80058f0 <HAL_GetTick+0x14>)
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000f6c 	.word	0x20000f6c

080058f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80058fc:	f7ff ffee 	bl	80058dc <HAL_GetTick>
 8005900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d005      	beq.n	800591a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <HAL_Delay+0x44>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	461a      	mov	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800591a:	bf00      	nop
 800591c:	f7ff ffde 	bl	80058dc <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d8f7      	bhi.n	800591c <HAL_Delay+0x28>
  {
  }
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	2000000c 	.word	0x2000000c

0800593c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	431a      	orrs	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	609a      	str	r2, [r3, #8]
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	431a      	orrs	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	609a      	str	r2, [r3, #8]
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005998:	4618      	mov	r0, r3
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3360      	adds	r3, #96	; 0x60
 80059b6:	461a      	mov	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4a10      	ldr	r2, [pc, #64]	; (8005a04 <LL_ADC_SetOffset+0x60>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d10b      	bne.n	80059e0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80059de:	e00b      	b.n	80059f8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	430b      	orrs	r3, r1
 80059f2:	431a      	orrs	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	601a      	str	r2, [r3, #0]
}
 80059f8:	bf00      	nop
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	58026000 	.word	0x58026000

08005a08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	3360      	adds	r3, #96	; 0x60
 8005a16:	461a      	mov	r2, r3
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3714      	adds	r7, #20
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	fa01 f303 	lsl.w	r3, r1, r3
 8005a54:	431a      	orrs	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	611a      	str	r2, [r3, #16]
}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4a0c      	ldr	r2, [pc, #48]	; (8005aa8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00e      	beq.n	8005a9a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3360      	adds	r3, #96	; 0x60
 8005a80:	461a      	mov	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	431a      	orrs	r2, r3
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	601a      	str	r2, [r3, #0]
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	58026000 	.word	0x58026000

08005aac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <LL_ADC_SetOffsetSaturation+0x40>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10e      	bne.n	8005ade <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	3360      	adds	r3, #96	; 0x60
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8005ade:	bf00      	nop
 8005ae0:	371c      	adds	r7, #28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	58026000 	.word	0x58026000

08005af0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <LL_ADC_SetOffsetSign+0x40>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d10e      	bne.n	8005b22 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3360      	adds	r3, #96	; 0x60
 8005b08:	461a      	mov	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	58026000 	.word	0x58026000

08005b34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3360      	adds	r3, #96	; 0x60
 8005b44:	461a      	mov	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a0c      	ldr	r2, [pc, #48]	; (8005b84 <LL_ADC_SetOffsetState+0x50>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d108      	bne.n	8005b68 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	431a      	orrs	r2, r3
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8005b66:	e007      	b.n	8005b78 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	601a      	str	r2, [r3, #0]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	58026000 	.word	0x58026000

08005b88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b087      	sub	sp, #28
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	3330      	adds	r3, #48	; 0x30
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	f003 030c 	and.w	r3, r3, #12
 8005bca:	4413      	add	r3, r2
 8005bcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	211f      	movs	r1, #31
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	43db      	mvns	r3, r3
 8005be0:	401a      	ands	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	0e9b      	lsrs	r3, r3, #26
 8005be6:	f003 011f 	and.w	r1, r3, #31
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c12:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d101      	bne.n	8005c1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3314      	adds	r3, #20
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	0e5b      	lsrs	r3, r3, #25
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	f003 0304 	and.w	r3, r3, #4
 8005c48:	4413      	add	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	0d1b      	lsrs	r3, r3, #20
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	2107      	movs	r1, #7
 8005c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5e:	43db      	mvns	r3, r3
 8005c60:	401a      	ands	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	0d1b      	lsrs	r3, r3, #20
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c70:	431a      	orrs	r2, r3
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005c76:	bf00      	nop
 8005c78:	371c      	adds	r7, #28
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	60f8      	str	r0, [r7, #12]
 8005c8c:	60b9      	str	r1, [r7, #8]
 8005c8e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <LL_ADC_SetChannelSingleDiff+0x78>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d115      	bne.n	8005cc4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	401a      	ands	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0318 	and.w	r3, r3, #24
 8005cae:	4914      	ldr	r1, [pc, #80]	; (8005d00 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005cb0:	40d9      	lsrs	r1, r3
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	400b      	ands	r3, r1
 8005cb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8005cc2:	e014      	b.n	8005cee <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0318 	and.w	r3, r3, #24
 8005cda:	4909      	ldr	r1, [pc, #36]	; (8005d00 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005cdc:	40d9      	lsrs	r1, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	400b      	ands	r3, r1
 8005ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8005cee:	bf00      	nop
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	58026000 	.word	0x58026000
 8005d00:	000fffff 	.word	0x000fffff

08005d04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 031f 	and.w	r3, r3, #31
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6093      	str	r3, [r2, #8]
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr
 8005d5c:	5fffffc0 	.word	0x5fffffc0

08005d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d74:	d101      	bne.n	8005d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	4b05      	ldr	r3, [pc, #20]	; (8005dac <LL_ADC_EnableInternalRegulator+0x24>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	6fffffc0 	.word	0x6fffffc0

08005db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dc4:	d101      	bne.n	8005dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e000      	b.n	8005dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <LL_ADC_Enable+0x24>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	f043 0201 	orr.w	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	7fffffc0 	.word	0x7fffffc0

08005e00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <LL_ADC_Disable+0x24>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	f043 0202 	orr.w	r2, r3, #2
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	7fffffc0 	.word	0x7fffffc0

08005e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <LL_ADC_IsEnabled+0x18>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <LL_ADC_IsEnabled+0x1a>
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d101      	bne.n	8005e66 <LL_ADC_IsDisableOngoing+0x18>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e000      	b.n	8005e68 <LL_ADC_IsDisableOngoing+0x1a>
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <LL_ADC_REG_StartConversion+0x24>)
 8005e82:	4013      	ands	r3, r2
 8005e84:	f043 0204 	orr.w	r2, r3, #4
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	7fffffc0 	.word	0x7fffffc0

08005e9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b04      	cmp	r3, #4
 8005eae:	d101      	bne.n	8005eb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e000      	b.n	8005eb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b083      	sub	sp, #12
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0308 	and.w	r3, r3, #8
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d101      	bne.n	8005eda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005ee8:	b590      	push	{r4, r7, lr}
 8005eea:	b089      	sub	sp, #36	; 0x24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e1ee      	b.n	80062e0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7fa fe4d 	bl	8000bb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff ff19 	bl	8005d60 <LL_ADC_IsDeepPowerDownEnabled>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff feff 	bl	8005d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff ff34 	bl	8005db0 <LL_ADC_IsInternalRegulatorEnabled>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d114      	bne.n	8005f78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff ff18 	bl	8005d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f58:	4b8e      	ldr	r3, [pc, #568]	; (8006194 <HAL_ADC_Init+0x2ac>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	099b      	lsrs	r3, r3, #6
 8005f5e:	4a8e      	ldr	r2, [pc, #568]	; (8006198 <HAL_ADC_Init+0x2b0>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	099b      	lsrs	r3, r3, #6
 8005f66:	3301      	adds	r3, #1
 8005f68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f6a:	e002      	b.n	8005f72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f9      	bne.n	8005f6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff ff17 	bl	8005db0 <LL_ADC_IsInternalRegulatorEnabled>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10d      	bne.n	8005fa4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8c:	f043 0210 	orr.w	r2, r3, #16
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f98:	f043 0201 	orr.w	r2, r3, #1
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7ff ff77 	bl	8005e9c <LL_ADC_REG_IsConversionOngoing>
 8005fae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb4:	f003 0310 	and.w	r3, r3, #16
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f040 8188 	bne.w	80062ce <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f040 8184 	bne.w	80062ce <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005fce:	f043 0202 	orr.w	r2, r3, #2
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7ff ff24 	bl	8005e28 <LL_ADC_IsEnabled>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d136      	bne.n	8006054 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a6c      	ldr	r2, [pc, #432]	; (800619c <HAL_ADC_Init+0x2b4>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_ADC_Init+0x112>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a6a      	ldr	r2, [pc, #424]	; (80061a0 <HAL_ADC_Init+0x2b8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d10e      	bne.n	8006018 <HAL_ADC_Init+0x130>
 8005ffa:	4868      	ldr	r0, [pc, #416]	; (800619c <HAL_ADC_Init+0x2b4>)
 8005ffc:	f7ff ff14 	bl	8005e28 <LL_ADC_IsEnabled>
 8006000:	4604      	mov	r4, r0
 8006002:	4867      	ldr	r0, [pc, #412]	; (80061a0 <HAL_ADC_Init+0x2b8>)
 8006004:	f7ff ff10 	bl	8005e28 <LL_ADC_IsEnabled>
 8006008:	4603      	mov	r3, r0
 800600a:	4323      	orrs	r3, r4
 800600c:	2b00      	cmp	r3, #0
 800600e:	bf0c      	ite	eq
 8006010:	2301      	moveq	r3, #1
 8006012:	2300      	movne	r3, #0
 8006014:	b2db      	uxtb	r3, r3
 8006016:	e008      	b.n	800602a <HAL_ADC_Init+0x142>
 8006018:	4862      	ldr	r0, [pc, #392]	; (80061a4 <HAL_ADC_Init+0x2bc>)
 800601a:	f7ff ff05 	bl	8005e28 <LL_ADC_IsEnabled>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	bf0c      	ite	eq
 8006024:	2301      	moveq	r3, #1
 8006026:	2300      	movne	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d012      	beq.n	8006054 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a5a      	ldr	r2, [pc, #360]	; (800619c <HAL_ADC_Init+0x2b4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d004      	beq.n	8006042 <HAL_ADC_Init+0x15a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a58      	ldr	r2, [pc, #352]	; (80061a0 <HAL_ADC_Init+0x2b8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d101      	bne.n	8006046 <HAL_ADC_Init+0x15e>
 8006042:	4a59      	ldr	r2, [pc, #356]	; (80061a8 <HAL_ADC_Init+0x2c0>)
 8006044:	e000      	b.n	8006048 <HAL_ADC_Init+0x160>
 8006046:	4a59      	ldr	r2, [pc, #356]	; (80061ac <HAL_ADC_Init+0x2c4>)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	4619      	mov	r1, r3
 800604e:	4610      	mov	r0, r2
 8006050:	f7ff fc74 	bl	800593c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a52      	ldr	r2, [pc, #328]	; (80061a4 <HAL_ADC_Init+0x2bc>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d129      	bne.n	80060b2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	7e5b      	ldrb	r3, [r3, #25]
 8006062:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8006068:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800606e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	2b08      	cmp	r3, #8
 8006076:	d013      	beq.n	80060a0 <HAL_ADC_Init+0x1b8>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	2b0c      	cmp	r3, #12
 800607e:	d00d      	beq.n	800609c <HAL_ADC_Init+0x1b4>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	2b1c      	cmp	r3, #28
 8006086:	d007      	beq.n	8006098 <HAL_ADC_Init+0x1b0>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	2b18      	cmp	r3, #24
 800608e:	d101      	bne.n	8006094 <HAL_ADC_Init+0x1ac>
 8006090:	2318      	movs	r3, #24
 8006092:	e006      	b.n	80060a2 <HAL_ADC_Init+0x1ba>
 8006094:	2300      	movs	r3, #0
 8006096:	e004      	b.n	80060a2 <HAL_ADC_Init+0x1ba>
 8006098:	2310      	movs	r3, #16
 800609a:	e002      	b.n	80060a2 <HAL_ADC_Init+0x1ba>
 800609c:	2308      	movs	r3, #8
 800609e:	e000      	b.n	80060a2 <HAL_ADC_Init+0x1ba>
 80060a0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80060a2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060aa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	e00e      	b.n	80060d0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	7e5b      	ldrb	r3, [r3, #25]
 80060b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80060bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80060c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060ca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d106      	bne.n	80060e8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060de:	3b01      	subs	r3, #1
 80060e0:	045b      	lsls	r3, r3, #17
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d009      	beq.n	8006104 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4313      	orrs	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a26      	ldr	r2, [pc, #152]	; (80061a4 <HAL_ADC_Init+0x2bc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d115      	bne.n	800613a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <HAL_ADC_Init+0x2c8>)
 8006116:	4013      	ands	r3, r2
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6812      	ldr	r2, [r2, #0]
 800611c:	69b9      	ldr	r1, [r7, #24]
 800611e:	430b      	orrs	r3, r1
 8006120:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	611a      	str	r2, [r3, #16]
 8006138:	e009      	b.n	800614e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	4b1c      	ldr	r3, [pc, #112]	; (80061b4 <HAL_ADC_Init+0x2cc>)
 8006142:	4013      	ands	r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	69b9      	ldr	r1, [r7, #24]
 800614a:	430b      	orrs	r3, r1
 800614c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7ff fea2 	bl	8005e9c <LL_ADC_REG_IsConversionOngoing>
 8006158:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff feaf 	bl	8005ec2 <LL_ADC_INJ_IsConversionOngoing>
 8006164:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f040 808e 	bne.w	800628a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f040 808a 	bne.w	800628a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a0a      	ldr	r2, [pc, #40]	; (80061a4 <HAL_ADC_Init+0x2bc>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d11b      	bne.n	80061b8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	7e1b      	ldrb	r3, [r3, #24]
 8006184:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800618c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	e018      	b.n	80061c6 <HAL_ADC_Init+0x2de>
 8006194:	20000000 	.word	0x20000000
 8006198:	053e2d63 	.word	0x053e2d63
 800619c:	40022000 	.word	0x40022000
 80061a0:	40022100 	.word	0x40022100
 80061a4:	58026000 	.word	0x58026000
 80061a8:	40022300 	.word	0x40022300
 80061ac:	58026300 	.word	0x58026300
 80061b0:	fff04007 	.word	0xfff04007
 80061b4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	7e1b      	ldrb	r3, [r3, #24]
 80061bc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	4b46      	ldr	r3, [pc, #280]	; (80062e8 <HAL_ADC_Init+0x400>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	69b9      	ldr	r1, [r7, #24]
 80061d6:	430b      	orrs	r3, r1
 80061d8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d137      	bne.n	8006254 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a3f      	ldr	r2, [pc, #252]	; (80062ec <HAL_ADC_Init+0x404>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d116      	bne.n	8006222 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691a      	ldr	r2, [r3, #16]
 80061fa:	4b3d      	ldr	r3, [pc, #244]	; (80062f0 <HAL_ADC_Init+0x408>)
 80061fc:	4013      	ands	r3, r2
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006206:	4311      	orrs	r1, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800620c:	4311      	orrs	r1, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006212:	430a      	orrs	r2, r1
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	611a      	str	r2, [r3, #16]
 8006220:	e020      	b.n	8006264 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	691a      	ldr	r2, [r3, #16]
 8006228:	4b32      	ldr	r3, [pc, #200]	; (80062f4 <HAL_ADC_Init+0x40c>)
 800622a:	4013      	ands	r3, r2
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006230:	3a01      	subs	r2, #1
 8006232:	0411      	lsls	r1, r2, #16
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006238:	4311      	orrs	r1, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800623e:	4311      	orrs	r1, r2
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006244:	430a      	orrs	r2, r1
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f042 0201 	orr.w	r2, r2, #1
 8006250:	611a      	str	r2, [r3, #16]
 8006252:	e007      	b.n	8006264 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691a      	ldr	r2, [r3, #16]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1b      	ldr	r2, [pc, #108]	; (80062ec <HAL_ADC_Init+0x404>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d002      	beq.n	800628a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f001 f9e9 	bl	800765c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d10c      	bne.n	80062ac <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	f023 010f 	bic.w	r1, r3, #15
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	1e5a      	subs	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
 80062aa:	e007      	b.n	80062bc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f022 020f 	bic.w	r2, r2, #15
 80062ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062c0:	f023 0303 	bic.w	r3, r3, #3
 80062c4:	f043 0201 	orr.w	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	661a      	str	r2, [r3, #96]	; 0x60
 80062cc:	e007      	b.n	80062de <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062d2:	f043 0210 	orr.w	r2, r3, #16
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80062de:	7ffb      	ldrb	r3, [r7, #31]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3724      	adds	r7, #36	; 0x24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd90      	pop	{r4, r7, pc}
 80062e8:	ffffbffc 	.word	0xffffbffc
 80062ec:	58026000 	.word	0x58026000
 80062f0:	fc00f81f 	.word	0xfc00f81f
 80062f4:	fc00f81e 	.word	0xfc00f81e

080062f8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a90      	ldr	r2, [pc, #576]	; (8006548 <HAL_ADC_Start_IT+0x250>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d004      	beq.n	8006314 <HAL_ADC_Start_IT+0x1c>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a8f      	ldr	r2, [pc, #572]	; (800654c <HAL_ADC_Start_IT+0x254>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d101      	bne.n	8006318 <HAL_ADC_Start_IT+0x20>
 8006314:	4b8e      	ldr	r3, [pc, #568]	; (8006550 <HAL_ADC_Start_IT+0x258>)
 8006316:	e000      	b.n	800631a <HAL_ADC_Start_IT+0x22>
 8006318:	4b8e      	ldr	r3, [pc, #568]	; (8006554 <HAL_ADC_Start_IT+0x25c>)
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fcf2 	bl	8005d04 <LL_ADC_GetMultimode>
 8006320:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fdb8 	bl	8005e9c <LL_ADC_REG_IsConversionOngoing>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	f040 8119 	bne.w	8006566 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800633a:	2b01      	cmp	r3, #1
 800633c:	d101      	bne.n	8006342 <HAL_ADC_Start_IT+0x4a>
 800633e:	2302      	movs	r3, #2
 8006340:	e116      	b.n	8006570 <HAL_ADC_Start_IT+0x278>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 f89c 	bl	8007488 <ADC_Enable>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 8100 	bne.w	800655c <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006360:	4b7d      	ldr	r3, [pc, #500]	; (8006558 <HAL_ADC_Start_IT+0x260>)
 8006362:	4013      	ands	r3, r2
 8006364:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a76      	ldr	r2, [pc, #472]	; (800654c <HAL_ADC_Start_IT+0x254>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d002      	beq.n	800637c <HAL_ADC_Start_IT+0x84>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	e000      	b.n	800637e <HAL_ADC_Start_IT+0x86>
 800637c:	4b72      	ldr	r3, [pc, #456]	; (8006548 <HAL_ADC_Start_IT+0x250>)
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	4293      	cmp	r3, r2
 8006384:	d002      	beq.n	800638c <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d105      	bne.n	8006398 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006390:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d006      	beq.n	80063b2 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a8:	f023 0206 	bic.w	r2, r3, #6
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	665a      	str	r2, [r3, #100]	; 0x64
 80063b0:	e002      	b.n	80063b8 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	221c      	movs	r2, #28
 80063be:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 021c 	bic.w	r2, r2, #28
 80063d6:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d108      	bne.n	80063f2 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0208 	orr.w	r2, r2, #8
 80063ee:	605a      	str	r2, [r3, #4]
          break;
 80063f0:	e008      	b.n	8006404 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 0204 	orr.w	r2, r2, #4
 8006400:	605a      	str	r2, [r3, #4]
          break;
 8006402:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d107      	bne.n	800641c <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0210 	orr.w	r2, r2, #16
 800641a:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a4a      	ldr	r2, [pc, #296]	; (800654c <HAL_ADC_Start_IT+0x254>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d002      	beq.n	800642c <HAL_ADC_Start_IT+0x134>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	e000      	b.n	800642e <HAL_ADC_Start_IT+0x136>
 800642c:	4b46      	ldr	r3, [pc, #280]	; (8006548 <HAL_ADC_Start_IT+0x250>)
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	6812      	ldr	r2, [r2, #0]
 8006432:	4293      	cmp	r3, r2
 8006434:	d008      	beq.n	8006448 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d005      	beq.n	8006448 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	2b05      	cmp	r3, #5
 8006440:	d002      	beq.n	8006448 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	2b09      	cmp	r3, #9
 8006446:	d13b      	bne.n	80064c0 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d02d      	beq.n	80064b2 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800645a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800645e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	2b08      	cmp	r3, #8
 800646c:	d110      	bne.n	8006490 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0220 	bic.w	r2, r2, #32
 800647c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800648c:	605a      	str	r2, [r3, #4]
              break;
 800648e:	e011      	b.n	80064b4 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800649e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0220 	orr.w	r2, r2, #32
 80064ae:	605a      	str	r2, [r3, #4]
              break;
 80064b0:	e000      	b.n	80064b4 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 80064b2:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7ff fcdb 	bl	8005e74 <LL_ADC_REG_StartConversion>
 80064be:	e056      	b.n	800656e <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064c4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1e      	ldr	r2, [pc, #120]	; (800654c <HAL_ADC_Start_IT+0x254>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d002      	beq.n	80064dc <HAL_ADC_Start_IT+0x1e4>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	e000      	b.n	80064de <HAL_ADC_Start_IT+0x1e6>
 80064dc:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <HAL_ADC_Start_IT+0x250>)
 80064de:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d03f      	beq.n	800656c <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80064f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d110      	bne.n	8006526 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 0220 	bic.w	r2, r2, #32
 8006512:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006522:	605a      	str	r2, [r3, #4]
              break;
 8006524:	e023      	b.n	800656e <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006534:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0220 	orr.w	r2, r2, #32
 8006544:	605a      	str	r2, [r3, #4]
              break;
 8006546:	e012      	b.n	800656e <HAL_ADC_Start_IT+0x276>
 8006548:	40022000 	.word	0x40022000
 800654c:	40022100 	.word	0x40022100
 8006550:	40022300 	.word	0x40022300
 8006554:	58026300 	.word	0x58026300
 8006558:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8006564:	e003      	b.n	800656e <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006566:	2302      	movs	r3, #2
 8006568:	75fb      	strb	r3, [r7, #23]
 800656a:	e000      	b.n	800656e <HAL_ADC_Start_IT+0x276>
        }
 800656c:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 800656e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3718      	adds	r7, #24
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b08a      	sub	sp, #40	; 0x28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800659c:	2300      	movs	r3, #0
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a87      	ldr	r2, [pc, #540]	; (80067d4 <HAL_ADC_IRQHandler+0x240>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_ADC_IRQHandler+0x30>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a86      	ldr	r2, [pc, #536]	; (80067d8 <HAL_ADC_IRQHandler+0x244>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d101      	bne.n	80065c8 <HAL_ADC_IRQHandler+0x34>
 80065c4:	4b85      	ldr	r3, [pc, #532]	; (80067dc <HAL_ADC_IRQHandler+0x248>)
 80065c6:	e000      	b.n	80065ca <HAL_ADC_IRQHandler+0x36>
 80065c8:	4b85      	ldr	r3, [pc, #532]	; (80067e0 <HAL_ADC_IRQHandler+0x24c>)
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fb9a 	bl	8005d04 <LL_ADC_GetMultimode>
 80065d0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d017      	beq.n	800660c <HAL_ADC_IRQHandler+0x78>
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d012      	beq.n	800660c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ea:	f003 0310 	and.w	r3, r3, #16
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 f9fe 	bl	8007a00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2202      	movs	r2, #2
 800660a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f003 0304 	and.w	r3, r3, #4
 8006612:	2b00      	cmp	r3, #0
 8006614:	d004      	beq.n	8006620 <HAL_ADC_IRQHandler+0x8c>
 8006616:	69bb      	ldr	r3, [r7, #24]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d10a      	bne.n	8006636 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006626:	2b00      	cmp	r3, #0
 8006628:	f000 8083 	beq.w	8006732 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	f003 0308 	and.w	r3, r3, #8
 8006632:	2b00      	cmp	r3, #0
 8006634:	d07d      	beq.n	8006732 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663a:	f003 0310 	and.w	r3, r3, #16
 800663e:	2b00      	cmp	r3, #0
 8006640:	d105      	bne.n	800664e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006646:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f7ff fa98 	bl	8005b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d062      	beq.n	8006724 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a5d      	ldr	r2, [pc, #372]	; (80067d8 <HAL_ADC_IRQHandler+0x244>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d002      	beq.n	800666e <HAL_ADC_IRQHandler+0xda>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	e000      	b.n	8006670 <HAL_ADC_IRQHandler+0xdc>
 800666e:	4b59      	ldr	r3, [pc, #356]	; (80067d4 <HAL_ADC_IRQHandler+0x240>)
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	6812      	ldr	r2, [r2, #0]
 8006674:	4293      	cmp	r3, r2
 8006676:	d008      	beq.n	800668a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2b05      	cmp	r3, #5
 8006682:	d002      	beq.n	800668a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b09      	cmp	r3, #9
 8006688:	d104      	bne.n	8006694 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	623b      	str	r3, [r7, #32]
 8006692:	e00c      	b.n	80066ae <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a4f      	ldr	r2, [pc, #316]	; (80067d8 <HAL_ADC_IRQHandler+0x244>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d002      	beq.n	80066a4 <HAL_ADC_IRQHandler+0x110>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	e000      	b.n	80066a6 <HAL_ADC_IRQHandler+0x112>
 80066a4:	4b4b      	ldr	r3, [pc, #300]	; (80067d4 <HAL_ADC_IRQHandler+0x240>)
 80066a6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d135      	bne.n	8006724 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b08      	cmp	r3, #8
 80066c4:	d12e      	bne.n	8006724 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff fbe6 	bl	8005e9c <LL_ADC_REG_IsConversionOngoing>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d11a      	bne.n	800670c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 020c 	bic.w	r2, r2, #12
 80066e4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d112      	bne.n	8006724 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006702:	f043 0201 	orr.w	r2, r3, #1
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	661a      	str	r2, [r3, #96]	; 0x60
 800670a:	e00b      	b.n	8006724 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006710:	f043 0210 	orr.w	r2, r3, #16
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671c:	f043 0201 	orr.w	r2, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7fc fb53 	bl	8002dd0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	220c      	movs	r2, #12
 8006730:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <HAL_ADC_IRQHandler+0x1b2>
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10b      	bne.n	800675e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80a0 	beq.w	8006892 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 809a 	beq.w	8006892 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006762:	f003 0310 	and.w	r3, r3, #16
 8006766:	2b00      	cmp	r3, #0
 8006768:	d105      	bne.n	8006776 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f7ff fa43 	bl	8005c06 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006780:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff f9fe 	bl	8005b88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800678c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a11      	ldr	r2, [pc, #68]	; (80067d8 <HAL_ADC_IRQHandler+0x244>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d002      	beq.n	800679e <HAL_ADC_IRQHandler+0x20a>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	e000      	b.n	80067a0 <HAL_ADC_IRQHandler+0x20c>
 800679e:	4b0d      	ldr	r3, [pc, #52]	; (80067d4 <HAL_ADC_IRQHandler+0x240>)
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d008      	beq.n	80067ba <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d005      	beq.n	80067ba <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b06      	cmp	r3, #6
 80067b2:	d002      	beq.n	80067ba <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2b07      	cmp	r3, #7
 80067b8:	d104      	bne.n	80067c4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	623b      	str	r3, [r7, #32]
 80067c2:	e014      	b.n	80067ee <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a03      	ldr	r2, [pc, #12]	; (80067d8 <HAL_ADC_IRQHandler+0x244>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00a      	beq.n	80067e4 <HAL_ADC_IRQHandler+0x250>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	e008      	b.n	80067e6 <HAL_ADC_IRQHandler+0x252>
 80067d4:	40022000 	.word	0x40022000
 80067d8:	40022100 	.word	0x40022100
 80067dc:	40022300 	.word	0x40022300
 80067e0:	58026300 	.word	0x58026300
 80067e4:	4b84      	ldr	r3, [pc, #528]	; (80069f8 <HAL_ADC_IRQHandler+0x464>)
 80067e6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d047      	beq.n	8006884 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d007      	beq.n	800680e <HAL_ADC_IRQHandler+0x27a>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d03f      	beq.n	8006884 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800680a:	2b00      	cmp	r3, #0
 800680c:	d13a      	bne.n	8006884 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	d133      	bne.n	8006884 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d12e      	bne.n	8006884 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4618      	mov	r0, r3
 800682c:	f7ff fb49 	bl	8005ec2 <LL_ADC_INJ_IsConversionOngoing>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d11a      	bne.n	800686c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006844:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800685a:	2b00      	cmp	r3, #0
 800685c:	d112      	bne.n	8006884 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006862:	f043 0201 	orr.w	r2, r3, #1
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	661a      	str	r2, [r3, #96]	; 0x60
 800686a:	e00b      	b.n	8006884 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006870:	f043 0210 	orr.w	r2, r3, #16
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800687c:	f043 0201 	orr.w	r2, r3, #1
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 f893 	bl	80079b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2260      	movs	r2, #96	; 0x60
 8006890:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006898:	2b00      	cmp	r3, #0
 800689a:	d011      	beq.n	80068c0 <HAL_ADC_IRQHandler+0x32c>
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00c      	beq.n	80068c0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 f8a8 	bl	8006a08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2280      	movs	r2, #128	; 0x80
 80068be:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d012      	beq.n	80068f0 <HAL_ADC_IRQHandler+0x35c>
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00d      	beq.n	80068f0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f879 	bl	80079d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d012      	beq.n	8006920 <HAL_ADC_IRQHandler+0x38c>
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00d      	beq.n	8006920 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006908:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 f86b 	bl	80079ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b00      	cmp	r3, #0
 8006928:	d043      	beq.n	80069b2 <HAL_ADC_IRQHandler+0x41e>
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	2b00      	cmp	r3, #0
 8006932:	d03e      	beq.n	80069b2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800693c:	2301      	movs	r3, #1
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
 8006940:	e021      	b.n	8006986 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d015      	beq.n	8006974 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a2a      	ldr	r2, [pc, #168]	; (80069f8 <HAL_ADC_IRQHandler+0x464>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d004      	beq.n	800695c <HAL_ADC_IRQHandler+0x3c8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a29      	ldr	r2, [pc, #164]	; (80069fc <HAL_ADC_IRQHandler+0x468>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d101      	bne.n	8006960 <HAL_ADC_IRQHandler+0x3cc>
 800695c:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <HAL_ADC_IRQHandler+0x46c>)
 800695e:	e000      	b.n	8006962 <HAL_ADC_IRQHandler+0x3ce>
 8006960:	4b28      	ldr	r3, [pc, #160]	; (8006a04 <HAL_ADC_IRQHandler+0x470>)
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff f9dc 	bl	8005d20 <LL_ADC_GetMultiDMATransfer>
 8006968:	4603      	mov	r3, r0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800696e:	2301      	movs	r3, #1
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
 8006972:	e008      	b.n	8006986 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8006982:	2301      	movs	r3, #1
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10e      	bne.n	80069aa <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006990:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800699c:	f043 0202 	orr.w	r2, r3, #2
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f839 	bl	8006a1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2210      	movs	r2, #16
 80069b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d018      	beq.n	80069ee <HAL_ADC_IRQHandler+0x45a>
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d013      	beq.n	80069ee <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ca:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d6:	f043 0208 	orr.w	r2, r3, #8
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069e6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 ffeb 	bl	80079c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80069ee:	bf00      	nop
 80069f0:	3728      	adds	r7, #40	; 0x28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40022000 	.word	0x40022000
 80069fc:	40022100 	.word	0x40022100
 8006a00:	40022300 	.word	0x40022300
 8006a04:	58026300 	.word	0x58026300

08006a08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006a30:	b590      	push	{r4, r7, lr}
 8006a32:	b0b9      	sub	sp, #228	; 0xe4
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a4a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	4aa9      	ldr	r2, [pc, #676]	; (8006cf8 <HAL_ADC_ConfigChannel+0x2c8>)
 8006a52:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d102      	bne.n	8006a64 <HAL_ADC_ConfigChannel+0x34>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	f000 bcfa 	b.w	8007458 <HAL_ADC_ConfigChannel+0xa28>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff fa13 	bl	8005e9c <LL_ADC_REG_IsConversionOngoing>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f040 84de 	bne.w	800743a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a9e      	ldr	r2, [pc, #632]	; (8006cfc <HAL_ADC_ConfigChannel+0x2cc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d033      	beq.n	8006af0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d108      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x76>
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	0e9b      	lsrs	r3, r3, #26
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	e01d      	b.n	8006ae2 <HAL_ADC_ConfigChannel+0xb2>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ab2:	fa93 f3a3 	rbit	r3, r3
 8006ab6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006aba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006abe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8006aca:	2320      	movs	r3, #32
 8006acc:	e004      	b.n	8006ad8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8006ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ad2:	fab3 f383 	clz	r3, r3
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f003 031f 	and.w	r3, r3, #31
 8006adc:	2201      	movs	r2, #1
 8006ade:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	6812      	ldr	r2, [r2, #0]
 8006ae6:	69d1      	ldr	r1, [r2, #28]
 8006ae8:	687a      	ldr	r2, [r7, #4]
 8006aea:	6812      	ldr	r2, [r2, #0]
 8006aec:	430b      	orrs	r3, r1
 8006aee:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	6859      	ldr	r1, [r3, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	461a      	mov	r2, r3
 8006afe:	f7ff f856 	bl	8005bae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff f9c8 	bl	8005e9c <LL_ADC_REG_IsConversionOngoing>
 8006b0c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff f9d4 	bl	8005ec2 <LL_ADC_INJ_IsConversionOngoing>
 8006b1a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f040 8270 	bne.w	8007008 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f040 826b 	bne.w	8007008 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6819      	ldr	r1, [r3, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f7ff f874 	bl	8005c2c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a6c      	ldr	r2, [pc, #432]	; (8006cfc <HAL_ADC_ConfigChannel+0x2cc>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d10d      	bne.n	8006b6a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	695a      	ldr	r2, [r3, #20]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	08db      	lsrs	r3, r3, #3
 8006b5a:	f003 0303 	and.w	r3, r3, #3
 8006b5e:	005b      	lsls	r3, r3, #1
 8006b60:	fa02 f303 	lsl.w	r3, r2, r3
 8006b64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b68:	e032      	b.n	8006bd0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006b6a:	4b65      	ldr	r3, [pc, #404]	; (8006d00 <HAL_ADC_ConfigChannel+0x2d0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006b72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b76:	d10b      	bne.n	8006b90 <HAL_ADC_ConfigChannel+0x160>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	695a      	ldr	r2, [r3, #20]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	005b      	lsls	r3, r3, #1
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	e01d      	b.n	8006bcc <HAL_ADC_ConfigChannel+0x19c>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <HAL_ADC_ConfigChannel+0x186>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	089b      	lsrs	r3, r3, #2
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	005b      	lsls	r3, r3, #1
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	e00a      	b.n	8006bcc <HAL_ADC_ConfigChannel+0x19c>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695a      	ldr	r2, [r3, #20]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	089b      	lsrs	r3, r3, #2
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d048      	beq.n	8006c6a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6818      	ldr	r0, [r3, #0]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	6919      	ldr	r1, [r3, #16]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006be8:	f7fe fedc 	bl	80059a4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a42      	ldr	r2, [pc, #264]	; (8006cfc <HAL_ADC_ConfigChannel+0x2cc>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d119      	bne.n	8006c2a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6919      	ldr	r1, [r3, #16]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	461a      	mov	r2, r3
 8006c04:	f7fe ff74 	bl	8005af0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6818      	ldr	r0, [r3, #0]
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	6919      	ldr	r1, [r3, #16]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d102      	bne.n	8006c20 <HAL_ADC_ConfigChannel+0x1f0>
 8006c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c1e:	e000      	b.n	8006c22 <HAL_ADC_ConfigChannel+0x1f2>
 8006c20:	2300      	movs	r3, #0
 8006c22:	461a      	mov	r2, r3
 8006c24:	f7fe ff42 	bl	8005aac <LL_ADC_SetOffsetSaturation>
 8006c28:	e1ee      	b.n	8007008 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6919      	ldr	r1, [r3, #16]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d102      	bne.n	8006c42 <HAL_ADC_ConfigChannel+0x212>
 8006c3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c40:	e000      	b.n	8006c44 <HAL_ADC_ConfigChannel+0x214>
 8006c42:	2300      	movs	r3, #0
 8006c44:	461a      	mov	r2, r3
 8006c46:	f7fe ff0f 	bl	8005a68 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	6919      	ldr	r1, [r3, #16]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	7e1b      	ldrb	r3, [r3, #24]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d102      	bne.n	8006c60 <HAL_ADC_ConfigChannel+0x230>
 8006c5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c5e:	e000      	b.n	8006c62 <HAL_ADC_ConfigChannel+0x232>
 8006c60:	2300      	movs	r3, #0
 8006c62:	461a      	mov	r2, r3
 8006c64:	f7fe fee6 	bl	8005a34 <LL_ADC_SetDataRightShift>
 8006c68:	e1ce      	b.n	8007008 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a23      	ldr	r2, [pc, #140]	; (8006cfc <HAL_ADC_ConfigChannel+0x2cc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	f040 8181 	bne.w	8006f78 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fec3 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <HAL_ADC_ConfigChannel+0x272>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2100      	movs	r1, #0
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fe feb8 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	0e9b      	lsrs	r3, r3, #26
 8006c9c:	f003 021f 	and.w	r2, r3, #31
 8006ca0:	e01e      	b.n	8006ce0 <HAL_ADC_ConfigChannel+0x2b0>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fe fead 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006cb8:	fa93 f3a3 	rbit	r3, r3
 8006cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8006cc0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8006cc8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8006cd0:	2320      	movs	r3, #32
 8006cd2:	e004      	b.n	8006cde <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8006cd4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006cd8:	fab3 f383 	clz	r3, r3
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	461a      	mov	r2, r3
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10b      	bne.n	8006d04 <HAL_ADC_ConfigChannel+0x2d4>
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	0e9b      	lsrs	r3, r3, #26
 8006cf2:	f003 031f 	and.w	r3, r3, #31
 8006cf6:	e01e      	b.n	8006d36 <HAL_ADC_ConfigChannel+0x306>
 8006cf8:	47ff0000 	.word	0x47ff0000
 8006cfc:	58026000 	.word	0x58026000
 8006d00:	5c001000 	.word	0x5c001000
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006d10:	fa93 f3a3 	rbit	r3, r3
 8006d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006d20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8006d28:	2320      	movs	r3, #32
 8006d2a:	e004      	b.n	8006d36 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8006d2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006d30:	fab3 f383 	clz	r3, r3
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d106      	bne.n	8006d48 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe fef6 	bl	8005b34 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2101      	movs	r1, #1
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fe5a 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d10a      	bne.n	8006d74 <HAL_ADC_ConfigChannel+0x344>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2101      	movs	r1, #1
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fe4f 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	0e9b      	lsrs	r3, r3, #26
 8006d6e:	f003 021f 	and.w	r2, r3, #31
 8006d72:	e01e      	b.n	8006db2 <HAL_ADC_ConfigChannel+0x382>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2101      	movs	r1, #1
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe fe44 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d8a:	fa93 f3a3 	rbit	r3, r3
 8006d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8006d92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8006da2:	2320      	movs	r3, #32
 8006da4:	e004      	b.n	8006db0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8006da6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006daa:	fab3 f383 	clz	r3, r3
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <HAL_ADC_ConfigChannel+0x39a>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	0e9b      	lsrs	r3, r3, #26
 8006dc4:	f003 031f 	and.w	r3, r3, #31
 8006dc8:	e018      	b.n	8006dfc <HAL_ADC_ConfigChannel+0x3cc>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006dd6:	fa93 f3a3 	rbit	r3, r3
 8006dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006de2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8006de6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8006dee:	2320      	movs	r3, #32
 8006df0:	e004      	b.n	8006dfc <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8006df2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006df6:	fab3 f383 	clz	r3, r3
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d106      	bne.n	8006e0e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2200      	movs	r2, #0
 8006e06:	2101      	movs	r1, #1
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fe fe93 	bl	8005b34 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2102      	movs	r1, #2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe fdf7 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10a      	bne.n	8006e3a <HAL_ADC_ConfigChannel+0x40a>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2102      	movs	r1, #2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fe fdec 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006e30:	4603      	mov	r3, r0
 8006e32:	0e9b      	lsrs	r3, r3, #26
 8006e34:	f003 021f 	and.w	r2, r3, #31
 8006e38:	e01e      	b.n	8006e78 <HAL_ADC_ConfigChannel+0x448>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2102      	movs	r1, #2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe fde1 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e50:	fa93 f3a3 	rbit	r3, r3
 8006e54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006e58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8006e68:	2320      	movs	r3, #32
 8006e6a:	e004      	b.n	8006e76 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8006e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e70:	fab3 f383 	clz	r3, r3
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	461a      	mov	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d105      	bne.n	8006e90 <HAL_ADC_ConfigChannel+0x460>
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	0e9b      	lsrs	r3, r3, #26
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	e014      	b.n	8006eba <HAL_ADC_ConfigChannel+0x48a>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e98:	fa93 f3a3 	rbit	r3, r3
 8006e9c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8006eac:	2320      	movs	r3, #32
 8006eae:	e004      	b.n	8006eba <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8006eb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006eb4:	fab3 f383 	clz	r3, r3
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d106      	bne.n	8006ecc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	2102      	movs	r1, #2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fe34 	bl	8005b34 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2103      	movs	r1, #3
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fe fd98 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10a      	bne.n	8006ef8 <HAL_ADC_ConfigChannel+0x4c8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2103      	movs	r1, #3
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7fe fd8d 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	0e9b      	lsrs	r3, r3, #26
 8006ef2:	f003 021f 	and.w	r2, r3, #31
 8006ef6:	e017      	b.n	8006f28 <HAL_ADC_ConfigChannel+0x4f8>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2103      	movs	r1, #3
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fd82 	bl	8005a08 <LL_ADC_GetOffsetChannel>
 8006f04:	4603      	mov	r3, r0
 8006f06:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f0a:	fa93 f3a3 	rbit	r3, r3
 8006f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f12:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006f1a:	2320      	movs	r3, #32
 8006f1c:	e003      	b.n	8006f26 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006f1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f20:	fab3 f383 	clz	r3, r3
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d105      	bne.n	8006f40 <HAL_ADC_ConfigChannel+0x510>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	0e9b      	lsrs	r3, r3, #26
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	e011      	b.n	8006f64 <HAL_ADC_ConfigChannel+0x534>
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f48:	fa93 f3a3 	rbit	r3, r3
 8006f4c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8006f4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f50:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8006f52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8006f58:	2320      	movs	r3, #32
 8006f5a:	e003      	b.n	8006f64 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8006f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f5e:	fab3 f383 	clz	r3, r3
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d14f      	bne.n	8007008 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2103      	movs	r1, #3
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fddf 	bl	8005b34 <LL_ADC_SetOffsetState>
 8006f76:	e047      	b.n	8007008 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	069b      	lsls	r3, r3, #26
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d107      	bne.n	8006f9c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006f9a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	069b      	lsls	r3, r3, #26
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d107      	bne.n	8006fc0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006fbe:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	069b      	lsls	r3, r3, #26
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d107      	bne.n	8006fe4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006fe2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	069b      	lsls	r3, r3, #26
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d107      	bne.n	8007008 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007006:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe ff0b 	bl	8005e28 <LL_ADC_IsEnabled>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	f040 8219 	bne.w	800744c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6818      	ldr	r0, [r3, #0]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	6819      	ldr	r1, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	461a      	mov	r2, r3
 8007028:	f7fe fe2c 	bl	8005c84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	4aa1      	ldr	r2, [pc, #644]	; (80072b8 <HAL_ADC_ConfigChannel+0x888>)
 8007032:	4293      	cmp	r3, r2
 8007034:	f040 812e 	bne.w	8007294 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <HAL_ADC_ConfigChannel+0x630>
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	0e9b      	lsrs	r3, r3, #26
 800704e:	3301      	adds	r3, #1
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	2b09      	cmp	r3, #9
 8007056:	bf94      	ite	ls
 8007058:	2301      	movls	r3, #1
 800705a:	2300      	movhi	r3, #0
 800705c:	b2db      	uxtb	r3, r3
 800705e:	e019      	b.n	8007094 <HAL_ADC_ConfigChannel+0x664>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007068:	fa93 f3a3 	rbit	r3, r3
 800706c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800706e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007070:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8007078:	2320      	movs	r3, #32
 800707a:	e003      	b.n	8007084 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800707c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800707e:	fab3 f383 	clz	r3, r3
 8007082:	b2db      	uxtb	r3, r3
 8007084:	3301      	adds	r3, #1
 8007086:	f003 031f 	and.w	r3, r3, #31
 800708a:	2b09      	cmp	r3, #9
 800708c:	bf94      	ite	ls
 800708e:	2301      	movls	r3, #1
 8007090:	2300      	movhi	r3, #0
 8007092:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007094:	2b00      	cmp	r3, #0
 8007096:	d079      	beq.n	800718c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d107      	bne.n	80070b4 <HAL_ADC_ConfigChannel+0x684>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	0e9b      	lsrs	r3, r3, #26
 80070aa:	3301      	adds	r3, #1
 80070ac:	069b      	lsls	r3, r3, #26
 80070ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070b2:	e015      	b.n	80070e0 <HAL_ADC_ConfigChannel+0x6b0>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070bc:	fa93 f3a3 	rbit	r3, r3
 80070c0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80070c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070c4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80070c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80070cc:	2320      	movs	r3, #32
 80070ce:	e003      	b.n	80070d8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80070d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d2:	fab3 f383 	clz	r3, r3
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	3301      	adds	r3, #1
 80070da:	069b      	lsls	r3, r3, #26
 80070dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d109      	bne.n	8007100 <HAL_ADC_ConfigChannel+0x6d0>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	0e9b      	lsrs	r3, r3, #26
 80070f2:	3301      	adds	r3, #1
 80070f4:	f003 031f 	and.w	r3, r3, #31
 80070f8:	2101      	movs	r1, #1
 80070fa:	fa01 f303 	lsl.w	r3, r1, r3
 80070fe:	e017      	b.n	8007130 <HAL_ADC_ConfigChannel+0x700>
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007108:	fa93 f3a3 	rbit	r3, r3
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800710e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007110:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8007112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8007118:	2320      	movs	r3, #32
 800711a:	e003      	b.n	8007124 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800711c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800711e:	fab3 f383 	clz	r3, r3
 8007122:	b2db      	uxtb	r3, r3
 8007124:	3301      	adds	r3, #1
 8007126:	f003 031f 	and.w	r3, r3, #31
 800712a:	2101      	movs	r1, #1
 800712c:	fa01 f303 	lsl.w	r3, r1, r3
 8007130:	ea42 0103 	orr.w	r1, r2, r3
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <HAL_ADC_ConfigChannel+0x726>
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	0e9b      	lsrs	r3, r3, #26
 8007146:	3301      	adds	r3, #1
 8007148:	f003 021f 	and.w	r2, r3, #31
 800714c:	4613      	mov	r3, r2
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	4413      	add	r3, r2
 8007152:	051b      	lsls	r3, r3, #20
 8007154:	e018      	b.n	8007188 <HAL_ADC_ConfigChannel+0x758>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800715c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800715e:	fa93 f3a3 	rbit	r3, r3
 8007162:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800716e:	2320      	movs	r3, #32
 8007170:	e003      	b.n	800717a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	fab3 f383 	clz	r3, r3
 8007178:	b2db      	uxtb	r3, r3
 800717a:	3301      	adds	r3, #1
 800717c:	f003 021f 	and.w	r2, r3, #31
 8007180:	4613      	mov	r3, r2
 8007182:	005b      	lsls	r3, r3, #1
 8007184:	4413      	add	r3, r2
 8007186:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007188:	430b      	orrs	r3, r1
 800718a:	e07e      	b.n	800728a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007194:	2b00      	cmp	r3, #0
 8007196:	d107      	bne.n	80071a8 <HAL_ADC_ConfigChannel+0x778>
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	0e9b      	lsrs	r3, r3, #26
 800719e:	3301      	adds	r3, #1
 80071a0:	069b      	lsls	r3, r3, #26
 80071a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80071a6:	e015      	b.n	80071d4 <HAL_ADC_ConfigChannel+0x7a4>
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	fa93 f3a3 	rbit	r3, r3
 80071b4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80071c0:	2320      	movs	r3, #32
 80071c2:	e003      	b.n	80071cc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	fab3 f383 	clz	r3, r3
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	3301      	adds	r3, #1
 80071ce:	069b      	lsls	r3, r3, #26
 80071d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d109      	bne.n	80071f4 <HAL_ADC_ConfigChannel+0x7c4>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	0e9b      	lsrs	r3, r3, #26
 80071e6:	3301      	adds	r3, #1
 80071e8:	f003 031f 	and.w	r3, r3, #31
 80071ec:	2101      	movs	r1, #1
 80071ee:	fa01 f303 	lsl.w	r3, r1, r3
 80071f2:	e017      	b.n	8007224 <HAL_ADC_ConfigChannel+0x7f4>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	fa93 f3a3 	rbit	r3, r3
 8007200:	61bb      	str	r3, [r7, #24]
  return result;
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800720c:	2320      	movs	r3, #32
 800720e:	e003      	b.n	8007218 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	fab3 f383 	clz	r3, r3
 8007216:	b2db      	uxtb	r3, r3
 8007218:	3301      	adds	r3, #1
 800721a:	f003 031f 	and.w	r3, r3, #31
 800721e:	2101      	movs	r1, #1
 8007220:	fa01 f303 	lsl.w	r3, r1, r3
 8007224:	ea42 0103 	orr.w	r1, r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10d      	bne.n	8007250 <HAL_ADC_ConfigChannel+0x820>
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	0e9b      	lsrs	r3, r3, #26
 800723a:	3301      	adds	r3, #1
 800723c:	f003 021f 	and.w	r2, r3, #31
 8007240:	4613      	mov	r3, r2
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	4413      	add	r3, r2
 8007246:	3b1e      	subs	r3, #30
 8007248:	051b      	lsls	r3, r3, #20
 800724a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800724e:	e01b      	b.n	8007288 <HAL_ADC_ConfigChannel+0x858>
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	fa93 f3a3 	rbit	r3, r3
 800725c:	60fb      	str	r3, [r7, #12]
  return result;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8007268:	2320      	movs	r3, #32
 800726a:	e003      	b.n	8007274 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	fab3 f383 	clz	r3, r3
 8007272:	b2db      	uxtb	r3, r3
 8007274:	3301      	adds	r3, #1
 8007276:	f003 021f 	and.w	r2, r3, #31
 800727a:	4613      	mov	r3, r2
 800727c:	005b      	lsls	r3, r3, #1
 800727e:	4413      	add	r3, r2
 8007280:	3b1e      	subs	r3, #30
 8007282:	051b      	lsls	r3, r3, #20
 8007284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007288:	430b      	orrs	r3, r1
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	6892      	ldr	r2, [r2, #8]
 800728e:	4619      	mov	r1, r3
 8007290:	f7fe fccc 	bl	8005c2c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	f280 80d7 	bge.w	800744c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a06      	ldr	r2, [pc, #24]	; (80072bc <HAL_ADC_ConfigChannel+0x88c>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_ADC_ConfigChannel+0x882>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a04      	ldr	r2, [pc, #16]	; (80072c0 <HAL_ADC_ConfigChannel+0x890>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d10a      	bne.n	80072c8 <HAL_ADC_ConfigChannel+0x898>
 80072b2:	4b04      	ldr	r3, [pc, #16]	; (80072c4 <HAL_ADC_ConfigChannel+0x894>)
 80072b4:	e009      	b.n	80072ca <HAL_ADC_ConfigChannel+0x89a>
 80072b6:	bf00      	nop
 80072b8:	47ff0000 	.word	0x47ff0000
 80072bc:	40022000 	.word	0x40022000
 80072c0:	40022100 	.word	0x40022100
 80072c4:	40022300 	.word	0x40022300
 80072c8:	4b65      	ldr	r3, [pc, #404]	; (8007460 <HAL_ADC_ConfigChannel+0xa30>)
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fb5c 	bl	8005988 <LL_ADC_GetCommonPathInternalCh>
 80072d0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a62      	ldr	r2, [pc, #392]	; (8007464 <HAL_ADC_ConfigChannel+0xa34>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d004      	beq.n	80072e8 <HAL_ADC_ConfigChannel+0x8b8>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a61      	ldr	r2, [pc, #388]	; (8007468 <HAL_ADC_ConfigChannel+0xa38>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d10e      	bne.n	8007306 <HAL_ADC_ConfigChannel+0x8d6>
 80072e8:	485e      	ldr	r0, [pc, #376]	; (8007464 <HAL_ADC_ConfigChannel+0xa34>)
 80072ea:	f7fe fd9d 	bl	8005e28 <LL_ADC_IsEnabled>
 80072ee:	4604      	mov	r4, r0
 80072f0:	485d      	ldr	r0, [pc, #372]	; (8007468 <HAL_ADC_ConfigChannel+0xa38>)
 80072f2:	f7fe fd99 	bl	8005e28 <LL_ADC_IsEnabled>
 80072f6:	4603      	mov	r3, r0
 80072f8:	4323      	orrs	r3, r4
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	bf0c      	ite	eq
 80072fe:	2301      	moveq	r3, #1
 8007300:	2300      	movne	r3, #0
 8007302:	b2db      	uxtb	r3, r3
 8007304:	e008      	b.n	8007318 <HAL_ADC_ConfigChannel+0x8e8>
 8007306:	4859      	ldr	r0, [pc, #356]	; (800746c <HAL_ADC_ConfigChannel+0xa3c>)
 8007308:	f7fe fd8e 	bl	8005e28 <LL_ADC_IsEnabled>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	bf0c      	ite	eq
 8007312:	2301      	moveq	r3, #1
 8007314:	2300      	movne	r3, #0
 8007316:	b2db      	uxtb	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8084 	beq.w	8007426 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a53      	ldr	r2, [pc, #332]	; (8007470 <HAL_ADC_ConfigChannel+0xa40>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d132      	bne.n	800738e <HAL_ADC_ConfigChannel+0x95e>
 8007328:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800732c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d12c      	bne.n	800738e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a4c      	ldr	r2, [pc, #304]	; (800746c <HAL_ADC_ConfigChannel+0xa3c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	f040 8086 	bne.w	800744c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a47      	ldr	r2, [pc, #284]	; (8007464 <HAL_ADC_ConfigChannel+0xa34>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_ADC_ConfigChannel+0x924>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a46      	ldr	r2, [pc, #280]	; (8007468 <HAL_ADC_ConfigChannel+0xa38>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d101      	bne.n	8007358 <HAL_ADC_ConfigChannel+0x928>
 8007354:	4a47      	ldr	r2, [pc, #284]	; (8007474 <HAL_ADC_ConfigChannel+0xa44>)
 8007356:	e000      	b.n	800735a <HAL_ADC_ConfigChannel+0x92a>
 8007358:	4a41      	ldr	r2, [pc, #260]	; (8007460 <HAL_ADC_ConfigChannel+0xa30>)
 800735a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800735e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7fe fafc 	bl	8005962 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800736a:	4b43      	ldr	r3, [pc, #268]	; (8007478 <HAL_ADC_ConfigChannel+0xa48>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	099b      	lsrs	r3, r3, #6
 8007370:	4a42      	ldr	r2, [pc, #264]	; (800747c <HAL_ADC_ConfigChannel+0xa4c>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	099b      	lsrs	r3, r3, #6
 8007378:	3301      	adds	r3, #1
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800737e:	e002      	b.n	8007386 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	3b01      	subs	r3, #1
 8007384:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1f9      	bne.n	8007380 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800738c:	e05e      	b.n	800744c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a3b      	ldr	r2, [pc, #236]	; (8007480 <HAL_ADC_ConfigChannel+0xa50>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d120      	bne.n	80073da <HAL_ADC_ConfigChannel+0x9aa>
 8007398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800739c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d11a      	bne.n	80073da <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a30      	ldr	r2, [pc, #192]	; (800746c <HAL_ADC_ConfigChannel+0xa3c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d14e      	bne.n	800744c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a2c      	ldr	r2, [pc, #176]	; (8007464 <HAL_ADC_ConfigChannel+0xa34>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d004      	beq.n	80073c2 <HAL_ADC_ConfigChannel+0x992>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a2a      	ldr	r2, [pc, #168]	; (8007468 <HAL_ADC_ConfigChannel+0xa38>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d101      	bne.n	80073c6 <HAL_ADC_ConfigChannel+0x996>
 80073c2:	4a2c      	ldr	r2, [pc, #176]	; (8007474 <HAL_ADC_ConfigChannel+0xa44>)
 80073c4:	e000      	b.n	80073c8 <HAL_ADC_ConfigChannel+0x998>
 80073c6:	4a26      	ldr	r2, [pc, #152]	; (8007460 <HAL_ADC_ConfigChannel+0xa30>)
 80073c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073d0:	4619      	mov	r1, r3
 80073d2:	4610      	mov	r0, r2
 80073d4:	f7fe fac5 	bl	8005962 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80073d8:	e038      	b.n	800744c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a29      	ldr	r2, [pc, #164]	; (8007484 <HAL_ADC_ConfigChannel+0xa54>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d133      	bne.n	800744c <HAL_ADC_ConfigChannel+0xa1c>
 80073e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80073e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d12d      	bne.n	800744c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1d      	ldr	r2, [pc, #116]	; (800746c <HAL_ADC_ConfigChannel+0xa3c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d128      	bne.n	800744c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a19      	ldr	r2, [pc, #100]	; (8007464 <HAL_ADC_ConfigChannel+0xa34>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d004      	beq.n	800740e <HAL_ADC_ConfigChannel+0x9de>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a17      	ldr	r2, [pc, #92]	; (8007468 <HAL_ADC_ConfigChannel+0xa38>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d101      	bne.n	8007412 <HAL_ADC_ConfigChannel+0x9e2>
 800740e:	4a19      	ldr	r2, [pc, #100]	; (8007474 <HAL_ADC_ConfigChannel+0xa44>)
 8007410:	e000      	b.n	8007414 <HAL_ADC_ConfigChannel+0x9e4>
 8007412:	4a13      	ldr	r2, [pc, #76]	; (8007460 <HAL_ADC_ConfigChannel+0xa30>)
 8007414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800741c:	4619      	mov	r1, r3
 800741e:	4610      	mov	r0, r2
 8007420:	f7fe fa9f 	bl	8005962 <LL_ADC_SetCommonPathInternalCh>
 8007424:	e012      	b.n	800744c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742a:	f043 0220 	orr.w	r2, r3, #32
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8007438:	e008      	b.n	800744c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8007454:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8007458:	4618      	mov	r0, r3
 800745a:	37e4      	adds	r7, #228	; 0xe4
 800745c:	46bd      	mov	sp, r7
 800745e:	bd90      	pop	{r4, r7, pc}
 8007460:	58026300 	.word	0x58026300
 8007464:	40022000 	.word	0x40022000
 8007468:	40022100 	.word	0x40022100
 800746c:	58026000 	.word	0x58026000
 8007470:	c7520000 	.word	0xc7520000
 8007474:	40022300 	.word	0x40022300
 8007478:	20000000 	.word	0x20000000
 800747c:	053e2d63 	.word	0x053e2d63
 8007480:	c3210000 	.word	0xc3210000
 8007484:	cb840000 	.word	0xcb840000

08007488 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe fcc7 	bl	8005e28 <LL_ADC_IsEnabled>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d16e      	bne.n	800757e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689a      	ldr	r2, [r3, #8]
 80074a6:	4b38      	ldr	r3, [pc, #224]	; (8007588 <ADC_Enable+0x100>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00d      	beq.n	80074ca <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b2:	f043 0210 	orr.w	r2, r3, #16
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074be:	f043 0201 	orr.w	r2, r3, #1
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e05a      	b.n	8007580 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fc82 	bl	8005dd8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80074d4:	f7fe fa02 	bl	80058dc <HAL_GetTick>
 80074d8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a2b      	ldr	r2, [pc, #172]	; (800758c <ADC_Enable+0x104>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d004      	beq.n	80074ee <ADC_Enable+0x66>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a29      	ldr	r2, [pc, #164]	; (8007590 <ADC_Enable+0x108>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d101      	bne.n	80074f2 <ADC_Enable+0x6a>
 80074ee:	4b29      	ldr	r3, [pc, #164]	; (8007594 <ADC_Enable+0x10c>)
 80074f0:	e000      	b.n	80074f4 <ADC_Enable+0x6c>
 80074f2:	4b29      	ldr	r3, [pc, #164]	; (8007598 <ADC_Enable+0x110>)
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7fe fc05 	bl	8005d04 <LL_ADC_GetMultimode>
 80074fa:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a23      	ldr	r2, [pc, #140]	; (8007590 <ADC_Enable+0x108>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d002      	beq.n	800750c <ADC_Enable+0x84>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	e000      	b.n	800750e <ADC_Enable+0x86>
 800750c:	4b1f      	ldr	r3, [pc, #124]	; (800758c <ADC_Enable+0x104>)
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6812      	ldr	r2, [r2, #0]
 8007512:	4293      	cmp	r3, r2
 8007514:	d02c      	beq.n	8007570 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d130      	bne.n	800757e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800751c:	e028      	b.n	8007570 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fc80 	bl	8005e28 <LL_ADC_IsEnabled>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fc50 	bl	8005dd8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007538:	f7fe f9d0 	bl	80058dc <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	2b02      	cmp	r3, #2
 8007544:	d914      	bls.n	8007570 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b01      	cmp	r3, #1
 8007552:	d00d      	beq.n	8007570 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007558:	f043 0210 	orr.w	r2, r3, #16
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007564:	f043 0201 	orr.w	r2, r3, #1
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e007      	b.n	8007580 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d1cf      	bne.n	800751e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	8000003f 	.word	0x8000003f
 800758c:	40022000 	.word	0x40022000
 8007590:	40022100 	.word	0x40022100
 8007594:	40022300 	.word	0x40022300
 8007598:	58026300 	.word	0x58026300

0800759c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fc50 	bl	8005e4e <LL_ADC_IsDisableOngoing>
 80075ae:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe fc37 	bl	8005e28 <LL_ADC_IsEnabled>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d047      	beq.n	8007650 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d144      	bne.n	8007650 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 030d 	and.w	r3, r3, #13
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d10c      	bne.n	80075ee <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fe fc11 	bl	8005e00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2203      	movs	r2, #3
 80075e4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80075e6:	f7fe f979 	bl	80058dc <HAL_GetTick>
 80075ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80075ec:	e029      	b.n	8007642 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075f2:	f043 0210 	orr.w	r2, r3, #16
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075fe:	f043 0201 	orr.w	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e023      	b.n	8007652 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800760a:	f7fe f967 	bl	80058dc <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b02      	cmp	r3, #2
 8007616:	d914      	bls.n	8007642 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00d      	beq.n	8007642 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800762a:	f043 0210 	orr.w	r2, r3, #16
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007636:	f043 0201 	orr.w	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e007      	b.n	8007652 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1dc      	bne.n	800760a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a6b      	ldr	r2, [pc, #428]	; (8007818 <ADC_ConfigureBoostMode+0x1bc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <ADC_ConfigureBoostMode+0x1c>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a6a      	ldr	r2, [pc, #424]	; (800781c <ADC_ConfigureBoostMode+0x1c0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d109      	bne.n	800768c <ADC_ConfigureBoostMode+0x30>
 8007678:	4b69      	ldr	r3, [pc, #420]	; (8007820 <ADC_ConfigureBoostMode+0x1c4>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007680:	2b00      	cmp	r3, #0
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	e008      	b.n	800769e <ADC_ConfigureBoostMode+0x42>
 800768c:	4b65      	ldr	r3, [pc, #404]	; (8007824 <ADC_ConfigureBoostMode+0x1c8>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007694:	2b00      	cmp	r3, #0
 8007696:	bf14      	ite	ne
 8007698:	2301      	movne	r3, #1
 800769a:	2300      	moveq	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01c      	beq.n	80076dc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80076a2:	f006 f87b 	bl	800d79c <HAL_RCC_GetHCLKFreq>
 80076a6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076b0:	d010      	beq.n	80076d4 <ADC_ConfigureBoostMode+0x78>
 80076b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80076b6:	d871      	bhi.n	800779c <ADC_ConfigureBoostMode+0x140>
 80076b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076bc:	d002      	beq.n	80076c4 <ADC_ConfigureBoostMode+0x68>
 80076be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076c2:	d16b      	bne.n	800779c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	0c1b      	lsrs	r3, r3, #16
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80076d0:	60fb      	str	r3, [r7, #12]
        break;
 80076d2:	e066      	b.n	80077a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	089b      	lsrs	r3, r3, #2
 80076d8:	60fb      	str	r3, [r7, #12]
        break;
 80076da:	e062      	b.n	80077a2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80076dc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80076e0:	f006 ffb2 	bl	800e648 <HAL_RCCEx_GetPeriphCLKFreq>
 80076e4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80076ee:	d051      	beq.n	8007794 <ADC_ConfigureBoostMode+0x138>
 80076f0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80076f4:	d854      	bhi.n	80077a0 <ADC_ConfigureBoostMode+0x144>
 80076f6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80076fa:	d047      	beq.n	800778c <ADC_ConfigureBoostMode+0x130>
 80076fc:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007700:	d84e      	bhi.n	80077a0 <ADC_ConfigureBoostMode+0x144>
 8007702:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007706:	d03d      	beq.n	8007784 <ADC_ConfigureBoostMode+0x128>
 8007708:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800770c:	d848      	bhi.n	80077a0 <ADC_ConfigureBoostMode+0x144>
 800770e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007712:	d033      	beq.n	800777c <ADC_ConfigureBoostMode+0x120>
 8007714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007718:	d842      	bhi.n	80077a0 <ADC_ConfigureBoostMode+0x144>
 800771a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800771e:	d029      	beq.n	8007774 <ADC_ConfigureBoostMode+0x118>
 8007720:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007724:	d83c      	bhi.n	80077a0 <ADC_ConfigureBoostMode+0x144>
 8007726:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800772a:	d01a      	beq.n	8007762 <ADC_ConfigureBoostMode+0x106>
 800772c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007730:	d836      	bhi.n	80077a0 <ADC_ConfigureBoostMode+0x144>
 8007732:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007736:	d014      	beq.n	8007762 <ADC_ConfigureBoostMode+0x106>
 8007738:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800773c:	d830      	bhi.n	80077a0 <ADC_ConfigureBoostMode+0x144>
 800773e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007742:	d00e      	beq.n	8007762 <ADC_ConfigureBoostMode+0x106>
 8007744:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007748:	d82a      	bhi.n	80077a0 <ADC_ConfigureBoostMode+0x144>
 800774a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800774e:	d008      	beq.n	8007762 <ADC_ConfigureBoostMode+0x106>
 8007750:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007754:	d824      	bhi.n	80077a0 <ADC_ConfigureBoostMode+0x144>
 8007756:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800775a:	d002      	beq.n	8007762 <ADC_ConfigureBoostMode+0x106>
 800775c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007760:	d11e      	bne.n	80077a0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	0c9b      	lsrs	r3, r3, #18
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007770:	60fb      	str	r3, [r7, #12]
        break;
 8007772:	e016      	b.n	80077a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	091b      	lsrs	r3, r3, #4
 8007778:	60fb      	str	r3, [r7, #12]
        break;
 800777a:	e012      	b.n	80077a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	60fb      	str	r3, [r7, #12]
        break;
 8007782:	e00e      	b.n	80077a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	099b      	lsrs	r3, r3, #6
 8007788:	60fb      	str	r3, [r7, #12]
        break;
 800778a:	e00a      	b.n	80077a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	09db      	lsrs	r3, r3, #7
 8007790:	60fb      	str	r3, [r7, #12]
        break;
 8007792:	e006      	b.n	80077a2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	0a1b      	lsrs	r3, r3, #8
 8007798:	60fb      	str	r3, [r7, #12]
        break;
 800779a:	e002      	b.n	80077a2 <ADC_ConfigureBoostMode+0x146>
        break;
 800779c:	bf00      	nop
 800779e:	e000      	b.n	80077a2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80077a0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	085b      	lsrs	r3, r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4a1f      	ldr	r2, [pc, #124]	; (8007828 <ADC_ConfigureBoostMode+0x1cc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d808      	bhi.n	80077c2 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80077be:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80077c0:	e025      	b.n	800780e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	4a19      	ldr	r2, [pc, #100]	; (800782c <ADC_ConfigureBoostMode+0x1d0>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d80a      	bhi.n	80077e0 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077dc:	609a      	str	r2, [r3, #8]
}
 80077de:	e016      	b.n	800780e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4a13      	ldr	r2, [pc, #76]	; (8007830 <ADC_ConfigureBoostMode+0x1d4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d80a      	bhi.n	80077fe <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077fa:	609a      	str	r2, [r3, #8]
}
 80077fc:	e007      	b.n	800780e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800780c:	609a      	str	r2, [r3, #8]
}
 800780e:	bf00      	nop
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	40022000 	.word	0x40022000
 800781c:	40022100 	.word	0x40022100
 8007820:	40022300 	.word	0x40022300
 8007824:	58026300 	.word	0x58026300
 8007828:	005f5e10 	.word	0x005f5e10
 800782c:	00bebc20 	.word	0x00bebc20
 8007830:	017d7840 	.word	0x017d7840

08007834 <LL_ADC_IsEnabled>:
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <LL_ADC_IsEnabled+0x18>
 8007848:	2301      	movs	r3, #1
 800784a:	e000      	b.n	800784e <LL_ADC_IsEnabled+0x1a>
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
	...

0800785c <LL_ADC_StartCalibration>:
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	4b09      	ldr	r3, [pc, #36]	; (8007894 <LL_ADC_StartCalibration+0x38>)
 800786e:	4013      	ands	r3, r2
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800787c:	430a      	orrs	r2, r1
 800787e:	4313      	orrs	r3, r2
 8007880:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	609a      	str	r2, [r3, #8]
}
 8007888:	bf00      	nop
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	3ffeffc0 	.word	0x3ffeffc0

08007898 <LL_ADC_IsCalibrationOnGoing>:
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078ac:	d101      	bne.n	80078b2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80078ae:	2301      	movs	r3, #1
 80078b0:	e000      	b.n	80078b4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <LL_ADC_REG_IsConversionOngoing>:
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	d101      	bne.n	80078d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80078d4:	2301      	movs	r3, #1
 80078d6:	e000      	b.n	80078da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
	...

080078e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80078f4:	2300      	movs	r3, #0
 80078f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_ADCEx_Calibration_Start+0x1e>
 8007902:	2302      	movs	r3, #2
 8007904:	e04c      	b.n	80079a0 <HAL_ADCEx_Calibration_Start+0xb8>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff fe44 	bl	800759c <ADC_Disable>
 8007914:	4603      	mov	r3, r0
 8007916:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d135      	bne.n	800798a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007922:	4b21      	ldr	r3, [pc, #132]	; (80079a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007924:	4013      	ands	r3, r2
 8007926:	f043 0202 	orr.w	r2, r3, #2
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	68b9      	ldr	r1, [r7, #8]
 8007936:	4618      	mov	r0, r3
 8007938:	f7ff ff90 	bl	800785c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800793c:	e014      	b.n	8007968 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	3301      	adds	r3, #1
 8007942:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	4a19      	ldr	r2, [pc, #100]	; (80079ac <HAL_ADCEx_Calibration_Start+0xc4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d30d      	bcc.n	8007968 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007950:	f023 0312 	bic.w	r3, r3, #18
 8007954:	f043 0210 	orr.w	r2, r3, #16
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e01b      	b.n	80079a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4618      	mov	r0, r3
 800796e:	f7ff ff93 	bl	8007898 <LL_ADC_IsCalibrationOnGoing>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e2      	bne.n	800793e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800797c:	f023 0303 	bic.w	r3, r3, #3
 8007980:	f043 0201 	orr.w	r2, r3, #1
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	661a      	str	r2, [r3, #96]	; 0x60
 8007988:	e005      	b.n	8007996 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800798e:	f043 0210 	orr.w	r2, r3, #16
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800799e:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	ffffeefd 	.word	0xffffeefd
 80079ac:	25c3f800 	.word	0x25c3f800

080079b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007a14:	b590      	push	{r4, r7, lr}
 8007a16:	b0a3      	sub	sp, #140	; 0x8c
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e0c1      	b.n	8007bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a5e      	ldr	r2, [pc, #376]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d102      	bne.n	8007a52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007a4c:	4b5d      	ldr	r3, [pc, #372]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	e001      	b.n	8007a56 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10b      	bne.n	8007a74 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a60:	f043 0220 	orr.w	r2, r3, #32
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e0a0      	b.n	8007bb6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff ff22 	bl	80078c0 <LL_ADC_REG_IsConversionOngoing>
 8007a7c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7ff ff1b 	bl	80078c0 <LL_ADC_REG_IsConversionOngoing>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 8081 	bne.w	8007b94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007a92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d17c      	bne.n	8007b94 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a48      	ldr	r2, [pc, #288]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d004      	beq.n	8007aae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a46      	ldr	r2, [pc, #280]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d101      	bne.n	8007ab2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8007aae:	4b46      	ldr	r3, [pc, #280]	; (8007bc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007ab0:	e000      	b.n	8007ab4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8007ab2:	4b46      	ldr	r3, [pc, #280]	; (8007bcc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007ab4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d039      	beq.n	8007b32 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007abe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	431a      	orrs	r2, r3
 8007acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ace:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a3a      	ldr	r2, [pc, #232]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d004      	beq.n	8007ae4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a39      	ldr	r2, [pc, #228]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d10e      	bne.n	8007b02 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8007ae4:	4836      	ldr	r0, [pc, #216]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007ae6:	f7ff fea5 	bl	8007834 <LL_ADC_IsEnabled>
 8007aea:	4604      	mov	r4, r0
 8007aec:	4835      	ldr	r0, [pc, #212]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007aee:	f7ff fea1 	bl	8007834 <LL_ADC_IsEnabled>
 8007af2:	4603      	mov	r3, r0
 8007af4:	4323      	orrs	r3, r4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bf0c      	ite	eq
 8007afa:	2301      	moveq	r3, #1
 8007afc:	2300      	movne	r3, #0
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	e008      	b.n	8007b14 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007b02:	4833      	ldr	r0, [pc, #204]	; (8007bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007b04:	f7ff fe96 	bl	8007834 <LL_ADC_IsEnabled>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bf0c      	ite	eq
 8007b0e:	2301      	moveq	r3, #1
 8007b10:	2300      	movne	r3, #0
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d047      	beq.n	8007ba8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	4b2d      	ldr	r3, [pc, #180]	; (8007bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	6811      	ldr	r1, [r2, #0]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	6892      	ldr	r2, [r2, #8]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b2e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b30:	e03a      	b.n	8007ba8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007b32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007b3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1f      	ldr	r2, [pc, #124]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d004      	beq.n	8007b52 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d10e      	bne.n	8007b70 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8007b52:	481b      	ldr	r0, [pc, #108]	; (8007bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007b54:	f7ff fe6e 	bl	8007834 <LL_ADC_IsEnabled>
 8007b58:	4604      	mov	r4, r0
 8007b5a:	481a      	ldr	r0, [pc, #104]	; (8007bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007b5c:	f7ff fe6a 	bl	8007834 <LL_ADC_IsEnabled>
 8007b60:	4603      	mov	r3, r0
 8007b62:	4323      	orrs	r3, r4
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf0c      	ite	eq
 8007b68:	2301      	moveq	r3, #1
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	e008      	b.n	8007b82 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8007b70:	4817      	ldr	r0, [pc, #92]	; (8007bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007b72:	f7ff fe5f 	bl	8007834 <LL_ADC_IsEnabled>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bf0c      	ite	eq
 8007b7c:	2301      	moveq	r3, #1
 8007b7e:	2300      	movne	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d010      	beq.n	8007ba8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007b86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007b92:	e009      	b.n	8007ba8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b98:	f043 0220 	orr.w	r2, r3, #32
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8007ba6:	e000      	b.n	8007baa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007ba8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8007bb2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	378c      	adds	r7, #140	; 0x8c
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd90      	pop	{r4, r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	40022000 	.word	0x40022000
 8007bc4:	40022100 	.word	0x40022100
 8007bc8:	40022300 	.word	0x40022300
 8007bcc:	58026300 	.word	0x58026300
 8007bd0:	58026000 	.word	0x58026000
 8007bd4:	fffff0e0 	.word	0xfffff0e0

08007bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f003 0307 	and.w	r3, r3, #7
 8007be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007be8:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <__NVIC_SetPriorityGrouping+0x40>)
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007c00:	4b06      	ldr	r3, [pc, #24]	; (8007c1c <__NVIC_SetPriorityGrouping+0x44>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c06:	4a04      	ldr	r2, [pc, #16]	; (8007c18 <__NVIC_SetPriorityGrouping+0x40>)
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	60d3      	str	r3, [r2, #12]
}
 8007c0c:	bf00      	nop
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	e000ed00 	.word	0xe000ed00
 8007c1c:	05fa0000 	.word	0x05fa0000

08007c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c20:	b480      	push	{r7}
 8007c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c24:	4b04      	ldr	r3, [pc, #16]	; (8007c38 <__NVIC_GetPriorityGrouping+0x18>)
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	0a1b      	lsrs	r3, r3, #8
 8007c2a:	f003 0307 	and.w	r3, r3, #7
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	e000ed00 	.word	0xe000ed00

08007c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	db0b      	blt.n	8007c66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c4e:	88fb      	ldrh	r3, [r7, #6]
 8007c50:	f003 021f 	and.w	r2, r3, #31
 8007c54:	4907      	ldr	r1, [pc, #28]	; (8007c74 <__NVIC_EnableIRQ+0x38>)
 8007c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	2001      	movs	r0, #1
 8007c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8007c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007c66:	bf00      	nop
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	e000e100 	.word	0xe000e100

08007c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	db0a      	blt.n	8007ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	490c      	ldr	r1, [pc, #48]	; (8007cc4 <__NVIC_SetPriority+0x4c>)
 8007c92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c96:	0112      	lsls	r2, r2, #4
 8007c98:	b2d2      	uxtb	r2, r2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ca0:	e00a      	b.n	8007cb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	4908      	ldr	r1, [pc, #32]	; (8007cc8 <__NVIC_SetPriority+0x50>)
 8007ca8:	88fb      	ldrh	r3, [r7, #6]
 8007caa:	f003 030f 	and.w	r3, r3, #15
 8007cae:	3b04      	subs	r3, #4
 8007cb0:	0112      	lsls	r2, r2, #4
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	761a      	strb	r2, [r3, #24]
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	e000e100 	.word	0xe000e100
 8007cc8:	e000ed00 	.word	0xe000ed00

08007ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b089      	sub	sp, #36	; 0x24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f003 0307 	and.w	r3, r3, #7
 8007cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	f1c3 0307 	rsb	r3, r3, #7
 8007ce6:	2b04      	cmp	r3, #4
 8007ce8:	bf28      	it	cs
 8007cea:	2304      	movcs	r3, #4
 8007cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	2b06      	cmp	r3, #6
 8007cf4:	d902      	bls.n	8007cfc <NVIC_EncodePriority+0x30>
 8007cf6:	69fb      	ldr	r3, [r7, #28]
 8007cf8:	3b03      	subs	r3, #3
 8007cfa:	e000      	b.n	8007cfe <NVIC_EncodePriority+0x32>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d00:	f04f 32ff 	mov.w	r2, #4294967295
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	43da      	mvns	r2, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	401a      	ands	r2, r3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d14:	f04f 31ff 	mov.w	r1, #4294967295
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1e:	43d9      	mvns	r1, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d24:	4313      	orrs	r3, r2
         );
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3724      	adds	r7, #36	; 0x24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
	...

08007d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d44:	d301      	bcc.n	8007d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d46:	2301      	movs	r3, #1
 8007d48:	e00f      	b.n	8007d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d4a:	4a0a      	ldr	r2, [pc, #40]	; (8007d74 <SysTick_Config+0x40>)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007d52:	210f      	movs	r1, #15
 8007d54:	f04f 30ff 	mov.w	r0, #4294967295
 8007d58:	f7ff ff8e 	bl	8007c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007d5c:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <SysTick_Config+0x40>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007d62:	4b04      	ldr	r3, [pc, #16]	; (8007d74 <SysTick_Config+0x40>)
 8007d64:	2207      	movs	r2, #7
 8007d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	e000e010 	.word	0xe000e010

08007d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff ff29 	bl	8007bd8 <__NVIC_SetPriorityGrouping>
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b086      	sub	sp, #24
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	4603      	mov	r3, r0
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	607a      	str	r2, [r7, #4]
 8007d9a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d9c:	f7ff ff40 	bl	8007c20 <__NVIC_GetPriorityGrouping>
 8007da0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	68b9      	ldr	r1, [r7, #8]
 8007da6:	6978      	ldr	r0, [r7, #20]
 8007da8:	f7ff ff90 	bl	8007ccc <NVIC_EncodePriority>
 8007dac:	4602      	mov	r2, r0
 8007dae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007db2:	4611      	mov	r1, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff ff5f 	bl	8007c78 <__NVIC_SetPriority>
}
 8007dba:	bf00      	nop
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b082      	sub	sp, #8
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	4603      	mov	r3, r0
 8007dca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff ff33 	bl	8007c3c <__NVIC_EnableIRQ>
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff ffa4 	bl	8007d34 <SysTick_Config>
 8007dec:	4603      	mov	r3, r0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e054      	b.n	8007eb4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	7f5b      	ldrb	r3, [r3, #29]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7f9 fcbc 	bl	8001798 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	791b      	ldrb	r3, [r3, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10c      	bne.n	8007e48 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a22      	ldr	r2, [pc, #136]	; (8007ebc <HAL_CRC_Init+0xc4>)
 8007e34:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689a      	ldr	r2, [r3, #8]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0218 	bic.w	r2, r2, #24
 8007e44:	609a      	str	r2, [r3, #8]
 8007e46:	e00c      	b.n	8007e62 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6899      	ldr	r1, [r3, #8]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	461a      	mov	r2, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f948 	bl	80080e8 <HAL_CRCEx_Polynomial_Set>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e028      	b.n	8007eb4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	795b      	ldrb	r3, [r3, #5]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d105      	bne.n	8007e76 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e72:	611a      	str	r2, [r3, #16]
 8007e74:	e004      	b.n	8007e80 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6912      	ldr	r2, [r2, #16]
 8007e7e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	695a      	ldr	r2, [r3, #20]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	699a      	ldr	r2, [r3, #24]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	04c11db7 	.word	0x04c11db7

08007ec0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8007ecc:	2300      	movs	r3, #0
 8007ece:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 0201 	orr.w	r2, r2, #1
 8007ee4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	2b03      	cmp	r3, #3
 8007eec:	d006      	beq.n	8007efc <HAL_CRC_Calculate+0x3c>
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d829      	bhi.n	8007f46 <HAL_CRC_Calculate+0x86>
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d019      	beq.n	8007f2a <HAL_CRC_Calculate+0x6a>
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d01e      	beq.n	8007f38 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8007efa:	e024      	b.n	8007f46 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	e00a      	b.n	8007f18 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	009b      	lsls	r3, r3, #2
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	441a      	add	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6812      	ldr	r2, [r2, #0]
 8007f10:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	3301      	adds	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3f0      	bcc.n	8007f02 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	613b      	str	r3, [r7, #16]
      break;
 8007f28:	e00e      	b.n	8007f48 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 f812 	bl	8007f58 <CRC_Handle_8>
 8007f34:	6138      	str	r0, [r7, #16]
      break;
 8007f36:	e007      	b.n	8007f48 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f899 	bl	8008074 <CRC_Handle_16>
 8007f42:	6138      	str	r0, [r7, #16]
      break;
 8007f44:	e000      	b.n	8007f48 <HAL_CRC_Calculate+0x88>
      break;
 8007f46:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007f4e:	693b      	ldr	r3, [r7, #16]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b089      	sub	sp, #36	; 0x24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e023      	b.n	8007fb2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	4413      	add	r3, r2
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	68b9      	ldr	r1, [r7, #8]
 8007f7e:	440b      	add	r3, r1
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007f84:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	3302      	adds	r3, #2
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	440b      	add	r3, r1
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007f94:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	3303      	adds	r3, #3
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	440b      	add	r3, r1
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8007fa8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007faa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	61fb      	str	r3, [r7, #28]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	089b      	lsrs	r3, r3, #2
 8007fb6:	69fa      	ldr	r2, [r7, #28]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d3d6      	bcc.n	8007f6a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f003 0303 	and.w	r3, r3, #3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d04d      	beq.n	8008062 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f003 0303 	and.w	r3, r3, #3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d107      	bne.n	8007fe0 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d116      	bne.n	8008018 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	021b      	lsls	r3, r3, #8
 8007ff6:	b21a      	sxth	r2, r3
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	68b9      	ldr	r1, [r7, #8]
 8008000:	440b      	add	r3, r1
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	b21b      	sxth	r3, r3
 8008006:	4313      	orrs	r3, r2
 8008008:	b21b      	sxth	r3, r3
 800800a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	8b7a      	ldrh	r2, [r7, #26]
 8008016:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b03      	cmp	r3, #3
 8008020:	d11f      	bne.n	8008062 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	4413      	add	r3, r2
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	021b      	lsls	r3, r3, #8
 800802e:	b21a      	sxth	r2, r3
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	3301      	adds	r3, #1
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	440b      	add	r3, r1
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	b21b      	sxth	r3, r3
 800803e:	4313      	orrs	r3, r2
 8008040:	b21b      	sxth	r3, r3
 8008042:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	8b7a      	ldrh	r2, [r7, #26]
 800804e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	3302      	adds	r3, #2
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	4413      	add	r3, r2
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681b      	ldr	r3, [r3, #0]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3724      	adds	r7, #36	; 0x24
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008080:	2300      	movs	r3, #0
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e013      	b.n	80080ae <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	4413      	add	r3, r2
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	041a      	lsls	r2, r3, #16
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	3302      	adds	r3, #2
 8008098:	68b9      	ldr	r1, [r7, #8]
 800809a:	440b      	add	r3, r1
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	4619      	mov	r1, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	430a      	orrs	r2, r1
 80080a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	3301      	adds	r3, #1
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	085b      	lsrs	r3, r3, #1
 80080b2:	697a      	ldr	r2, [r7, #20]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d3e6      	bcc.n	8008086 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d009      	beq.n	80080d6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	4413      	add	r3, r2
 80080d0:	881a      	ldrh	r2, [r3, #0]
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80080f8:	231f      	movs	r3, #31
 80080fa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80080fc:	bf00      	nop
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	1e5a      	subs	r2, r3, #1
 8008102:	613a      	str	r2, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d009      	beq.n	800811c <HAL_CRCEx_Polynomial_Set+0x34>
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	fa22 f303 	lsr.w	r3, r2, r3
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0f0      	beq.n	80080fe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b18      	cmp	r3, #24
 8008120:	d846      	bhi.n	80081b0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8008122:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <HAL_CRCEx_Polynomial_Set+0x40>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	080081b7 	.word	0x080081b7
 800812c:	080081b1 	.word	0x080081b1
 8008130:	080081b1 	.word	0x080081b1
 8008134:	080081b1 	.word	0x080081b1
 8008138:	080081b1 	.word	0x080081b1
 800813c:	080081b1 	.word	0x080081b1
 8008140:	080081b1 	.word	0x080081b1
 8008144:	080081b1 	.word	0x080081b1
 8008148:	080081a5 	.word	0x080081a5
 800814c:	080081b1 	.word	0x080081b1
 8008150:	080081b1 	.word	0x080081b1
 8008154:	080081b1 	.word	0x080081b1
 8008158:	080081b1 	.word	0x080081b1
 800815c:	080081b1 	.word	0x080081b1
 8008160:	080081b1 	.word	0x080081b1
 8008164:	080081b1 	.word	0x080081b1
 8008168:	08008199 	.word	0x08008199
 800816c:	080081b1 	.word	0x080081b1
 8008170:	080081b1 	.word	0x080081b1
 8008174:	080081b1 	.word	0x080081b1
 8008178:	080081b1 	.word	0x080081b1
 800817c:	080081b1 	.word	0x080081b1
 8008180:	080081b1 	.word	0x080081b1
 8008184:	080081b1 	.word	0x080081b1
 8008188:	0800818d 	.word	0x0800818d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2b06      	cmp	r3, #6
 8008190:	d913      	bls.n	80081ba <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008196:	e010      	b.n	80081ba <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2b07      	cmp	r3, #7
 800819c:	d90f      	bls.n	80081be <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80081a2:	e00c      	b.n	80081be <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b0f      	cmp	r3, #15
 80081a8:	d90b      	bls.n	80081c2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80081aa:	2301      	movs	r3, #1
 80081ac:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80081ae:	e008      	b.n	80081c2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	75fb      	strb	r3, [r7, #23]
      break;
 80081b4:	e006      	b.n	80081c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80081b6:	bf00      	nop
 80081b8:	e004      	b.n	80081c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80081ba:	bf00      	nop
 80081bc:	e002      	b.n	80081c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80081be:	bf00      	nop
 80081c0:	e000      	b.n	80081c4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80081c2:	bf00      	nop
  }
  if (status == HAL_OK)
 80081c4:	7dfb      	ldrb	r3, [r7, #23]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10d      	bne.n	80081e6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f023 0118 	bic.w	r1, r3, #24
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	430a      	orrs	r2, r1
 80081e4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	371c      	adds	r7, #28
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80081fc:	f7fd fb6e 	bl	80058dc <HAL_GetTick>
 8008200:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e314      	b.n	8008836 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a66      	ldr	r2, [pc, #408]	; (80083ac <HAL_DMA_Init+0x1b8>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d04a      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a65      	ldr	r2, [pc, #404]	; (80083b0 <HAL_DMA_Init+0x1bc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d045      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a63      	ldr	r2, [pc, #396]	; (80083b4 <HAL_DMA_Init+0x1c0>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d040      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a62      	ldr	r2, [pc, #392]	; (80083b8 <HAL_DMA_Init+0x1c4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d03b      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a60      	ldr	r2, [pc, #384]	; (80083bc <HAL_DMA_Init+0x1c8>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d036      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a5f      	ldr	r2, [pc, #380]	; (80083c0 <HAL_DMA_Init+0x1cc>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d031      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a5d      	ldr	r2, [pc, #372]	; (80083c4 <HAL_DMA_Init+0x1d0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d02c      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a5c      	ldr	r2, [pc, #368]	; (80083c8 <HAL_DMA_Init+0x1d4>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d027      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a5a      	ldr	r2, [pc, #360]	; (80083cc <HAL_DMA_Init+0x1d8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d022      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a59      	ldr	r2, [pc, #356]	; (80083d0 <HAL_DMA_Init+0x1dc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d01d      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a57      	ldr	r2, [pc, #348]	; (80083d4 <HAL_DMA_Init+0x1e0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d018      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a56      	ldr	r2, [pc, #344]	; (80083d8 <HAL_DMA_Init+0x1e4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d013      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a54      	ldr	r2, [pc, #336]	; (80083dc <HAL_DMA_Init+0x1e8>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d00e      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a53      	ldr	r2, [pc, #332]	; (80083e0 <HAL_DMA_Init+0x1ec>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d009      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a51      	ldr	r2, [pc, #324]	; (80083e4 <HAL_DMA_Init+0x1f0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d004      	beq.n	80082ac <HAL_DMA_Init+0xb8>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a50      	ldr	r2, [pc, #320]	; (80083e8 <HAL_DMA_Init+0x1f4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d101      	bne.n	80082b0 <HAL_DMA_Init+0xbc>
 80082ac:	2301      	movs	r3, #1
 80082ae:	e000      	b.n	80082b2 <HAL_DMA_Init+0xbe>
 80082b0:	2300      	movs	r3, #0
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f000 813c 	beq.w	8008530 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a37      	ldr	r2, [pc, #220]	; (80083ac <HAL_DMA_Init+0x1b8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d04a      	beq.n	8008368 <HAL_DMA_Init+0x174>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a36      	ldr	r2, [pc, #216]	; (80083b0 <HAL_DMA_Init+0x1bc>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d045      	beq.n	8008368 <HAL_DMA_Init+0x174>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a34      	ldr	r2, [pc, #208]	; (80083b4 <HAL_DMA_Init+0x1c0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d040      	beq.n	8008368 <HAL_DMA_Init+0x174>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a33      	ldr	r2, [pc, #204]	; (80083b8 <HAL_DMA_Init+0x1c4>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d03b      	beq.n	8008368 <HAL_DMA_Init+0x174>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a31      	ldr	r2, [pc, #196]	; (80083bc <HAL_DMA_Init+0x1c8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d036      	beq.n	8008368 <HAL_DMA_Init+0x174>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a30      	ldr	r2, [pc, #192]	; (80083c0 <HAL_DMA_Init+0x1cc>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d031      	beq.n	8008368 <HAL_DMA_Init+0x174>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a2e      	ldr	r2, [pc, #184]	; (80083c4 <HAL_DMA_Init+0x1d0>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d02c      	beq.n	8008368 <HAL_DMA_Init+0x174>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a2d      	ldr	r2, [pc, #180]	; (80083c8 <HAL_DMA_Init+0x1d4>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d027      	beq.n	8008368 <HAL_DMA_Init+0x174>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a2b      	ldr	r2, [pc, #172]	; (80083cc <HAL_DMA_Init+0x1d8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d022      	beq.n	8008368 <HAL_DMA_Init+0x174>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a2a      	ldr	r2, [pc, #168]	; (80083d0 <HAL_DMA_Init+0x1dc>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d01d      	beq.n	8008368 <HAL_DMA_Init+0x174>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a28      	ldr	r2, [pc, #160]	; (80083d4 <HAL_DMA_Init+0x1e0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d018      	beq.n	8008368 <HAL_DMA_Init+0x174>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a27      	ldr	r2, [pc, #156]	; (80083d8 <HAL_DMA_Init+0x1e4>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d013      	beq.n	8008368 <HAL_DMA_Init+0x174>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a25      	ldr	r2, [pc, #148]	; (80083dc <HAL_DMA_Init+0x1e8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00e      	beq.n	8008368 <HAL_DMA_Init+0x174>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a24      	ldr	r2, [pc, #144]	; (80083e0 <HAL_DMA_Init+0x1ec>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d009      	beq.n	8008368 <HAL_DMA_Init+0x174>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a22      	ldr	r2, [pc, #136]	; (80083e4 <HAL_DMA_Init+0x1f0>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d004      	beq.n	8008368 <HAL_DMA_Init+0x174>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a21      	ldr	r2, [pc, #132]	; (80083e8 <HAL_DMA_Init+0x1f4>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d108      	bne.n	800837a <HAL_DMA_Init+0x186>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0201 	bic.w	r2, r2, #1
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	e007      	b.n	800838a <HAL_DMA_Init+0x196>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 0201 	bic.w	r2, r2, #1
 8008388:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800838a:	e02f      	b.n	80083ec <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800838c:	f7fd faa6 	bl	80058dc <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b05      	cmp	r3, #5
 8008398:	d928      	bls.n	80083ec <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2220      	movs	r2, #32
 800839e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2203      	movs	r2, #3
 80083a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80083a8:	2301      	movs	r3, #1
 80083aa:	e244      	b.n	8008836 <HAL_DMA_Init+0x642>
 80083ac:	40020010 	.word	0x40020010
 80083b0:	40020028 	.word	0x40020028
 80083b4:	40020040 	.word	0x40020040
 80083b8:	40020058 	.word	0x40020058
 80083bc:	40020070 	.word	0x40020070
 80083c0:	40020088 	.word	0x40020088
 80083c4:	400200a0 	.word	0x400200a0
 80083c8:	400200b8 	.word	0x400200b8
 80083cc:	40020410 	.word	0x40020410
 80083d0:	40020428 	.word	0x40020428
 80083d4:	40020440 	.word	0x40020440
 80083d8:	40020458 	.word	0x40020458
 80083dc:	40020470 	.word	0x40020470
 80083e0:	40020488 	.word	0x40020488
 80083e4:	400204a0 	.word	0x400204a0
 80083e8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0301 	and.w	r3, r3, #1
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1c8      	bne.n	800838c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	4b84      	ldr	r3, [pc, #528]	; (8008618 <HAL_DMA_Init+0x424>)
 8008406:	4013      	ands	r3, r2
 8008408:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008412:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800841e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800842a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a1b      	ldr	r3, [r3, #32]
 8008430:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	2b04      	cmp	r3, #4
 800843e:	d107      	bne.n	8008450 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008448:	4313      	orrs	r3, r2
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	2b28      	cmp	r3, #40	; 0x28
 8008456:	d903      	bls.n	8008460 <HAL_DMA_Init+0x26c>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	2b2e      	cmp	r3, #46	; 0x2e
 800845e:	d91f      	bls.n	80084a0 <HAL_DMA_Init+0x2ac>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	2b3e      	cmp	r3, #62	; 0x3e
 8008466:	d903      	bls.n	8008470 <HAL_DMA_Init+0x27c>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2b42      	cmp	r3, #66	; 0x42
 800846e:	d917      	bls.n	80084a0 <HAL_DMA_Init+0x2ac>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b46      	cmp	r3, #70	; 0x46
 8008476:	d903      	bls.n	8008480 <HAL_DMA_Init+0x28c>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	2b48      	cmp	r3, #72	; 0x48
 800847e:	d90f      	bls.n	80084a0 <HAL_DMA_Init+0x2ac>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2b4e      	cmp	r3, #78	; 0x4e
 8008486:	d903      	bls.n	8008490 <HAL_DMA_Init+0x29c>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b52      	cmp	r3, #82	; 0x52
 800848e:	d907      	bls.n	80084a0 <HAL_DMA_Init+0x2ac>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b73      	cmp	r3, #115	; 0x73
 8008496:	d905      	bls.n	80084a4 <HAL_DMA_Init+0x2b0>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b77      	cmp	r3, #119	; 0x77
 800849e:	d801      	bhi.n	80084a4 <HAL_DMA_Init+0x2b0>
 80084a0:	2301      	movs	r3, #1
 80084a2:	e000      	b.n	80084a6 <HAL_DMA_Init+0x2b2>
 80084a4:	2300      	movs	r3, #0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084b0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f023 0307 	bic.w	r3, r3, #7
 80084c8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d117      	bne.n	800850c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00e      	beq.n	800850c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f001 ff28 	bl	800a344 <DMA_CheckFifoParam>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2240      	movs	r2, #64	; 0x40
 80084fe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	e194      	b.n	8008836 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 fe63 	bl	800a1e0 <DMA_CalcBaseAndBitshift>
 800851a:	4603      	mov	r3, r0
 800851c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	223f      	movs	r2, #63	; 0x3f
 8008528:	409a      	lsls	r2, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	609a      	str	r2, [r3, #8]
 800852e:	e0ca      	b.n	80086c6 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a39      	ldr	r2, [pc, #228]	; (800861c <HAL_DMA_Init+0x428>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d022      	beq.n	8008580 <HAL_DMA_Init+0x38c>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a38      	ldr	r2, [pc, #224]	; (8008620 <HAL_DMA_Init+0x42c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d01d      	beq.n	8008580 <HAL_DMA_Init+0x38c>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a36      	ldr	r2, [pc, #216]	; (8008624 <HAL_DMA_Init+0x430>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d018      	beq.n	8008580 <HAL_DMA_Init+0x38c>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a35      	ldr	r2, [pc, #212]	; (8008628 <HAL_DMA_Init+0x434>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d013      	beq.n	8008580 <HAL_DMA_Init+0x38c>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a33      	ldr	r2, [pc, #204]	; (800862c <HAL_DMA_Init+0x438>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d00e      	beq.n	8008580 <HAL_DMA_Init+0x38c>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a32      	ldr	r2, [pc, #200]	; (8008630 <HAL_DMA_Init+0x43c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d009      	beq.n	8008580 <HAL_DMA_Init+0x38c>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a30      	ldr	r2, [pc, #192]	; (8008634 <HAL_DMA_Init+0x440>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d004      	beq.n	8008580 <HAL_DMA_Init+0x38c>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2f      	ldr	r2, [pc, #188]	; (8008638 <HAL_DMA_Init+0x444>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d101      	bne.n	8008584 <HAL_DMA_Init+0x390>
 8008580:	2301      	movs	r3, #1
 8008582:	e000      	b.n	8008586 <HAL_DMA_Init+0x392>
 8008584:	2300      	movs	r3, #0
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 8094 	beq.w	80086b4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a22      	ldr	r2, [pc, #136]	; (800861c <HAL_DMA_Init+0x428>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d021      	beq.n	80085da <HAL_DMA_Init+0x3e6>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a21      	ldr	r2, [pc, #132]	; (8008620 <HAL_DMA_Init+0x42c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d01c      	beq.n	80085da <HAL_DMA_Init+0x3e6>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1f      	ldr	r2, [pc, #124]	; (8008624 <HAL_DMA_Init+0x430>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d017      	beq.n	80085da <HAL_DMA_Init+0x3e6>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1e      	ldr	r2, [pc, #120]	; (8008628 <HAL_DMA_Init+0x434>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d012      	beq.n	80085da <HAL_DMA_Init+0x3e6>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a1c      	ldr	r2, [pc, #112]	; (800862c <HAL_DMA_Init+0x438>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d00d      	beq.n	80085da <HAL_DMA_Init+0x3e6>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a1b      	ldr	r2, [pc, #108]	; (8008630 <HAL_DMA_Init+0x43c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d008      	beq.n	80085da <HAL_DMA_Init+0x3e6>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a19      	ldr	r2, [pc, #100]	; (8008634 <HAL_DMA_Init+0x440>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d003      	beq.n	80085da <HAL_DMA_Init+0x3e6>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a18      	ldr	r2, [pc, #96]	; (8008638 <HAL_DMA_Init+0x444>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	4b11      	ldr	r3, [pc, #68]	; (800863c <HAL_DMA_Init+0x448>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d01d      	beq.n	8008640 <HAL_DMA_Init+0x44c>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2b80      	cmp	r3, #128	; 0x80
 800860a:	d102      	bne.n	8008612 <HAL_DMA_Init+0x41e>
 800860c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008610:	e017      	b.n	8008642 <HAL_DMA_Init+0x44e>
 8008612:	2300      	movs	r3, #0
 8008614:	e015      	b.n	8008642 <HAL_DMA_Init+0x44e>
 8008616:	bf00      	nop
 8008618:	fe10803f 	.word	0xfe10803f
 800861c:	58025408 	.word	0x58025408
 8008620:	5802541c 	.word	0x5802541c
 8008624:	58025430 	.word	0x58025430
 8008628:	58025444 	.word	0x58025444
 800862c:	58025458 	.word	0x58025458
 8008630:	5802546c 	.word	0x5802546c
 8008634:	58025480 	.word	0x58025480
 8008638:	58025494 	.word	0x58025494
 800863c:	fffe000f 	.word	0xfffe000f
 8008640:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	68d2      	ldr	r2, [r2, #12]
 8008646:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008648:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008650:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	695b      	ldr	r3, [r3, #20]
 8008656:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008658:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008660:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	69db      	ldr	r3, [r3, #28]
 8008666:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008668:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008670:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	4313      	orrs	r3, r2
 8008676:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	461a      	mov	r2, r3
 8008686:	4b6e      	ldr	r3, [pc, #440]	; (8008840 <HAL_DMA_Init+0x64c>)
 8008688:	4413      	add	r3, r2
 800868a:	4a6e      	ldr	r2, [pc, #440]	; (8008844 <HAL_DMA_Init+0x650>)
 800868c:	fba2 2303 	umull	r2, r3, r2, r3
 8008690:	091b      	lsrs	r3, r3, #4
 8008692:	009a      	lsls	r2, r3, #2
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f001 fda1 	bl	800a1e0 <DMA_CalcBaseAndBitshift>
 800869e:	4603      	mov	r3, r0
 80086a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a6:	f003 031f 	and.w	r3, r3, #31
 80086aa:	2201      	movs	r2, #1
 80086ac:	409a      	lsls	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	605a      	str	r2, [r3, #4]
 80086b2:	e008      	b.n	80086c6 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2240      	movs	r2, #64	; 0x40
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2203      	movs	r2, #3
 80086be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e0b7      	b.n	8008836 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a5f      	ldr	r2, [pc, #380]	; (8008848 <HAL_DMA_Init+0x654>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d072      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a5d      	ldr	r2, [pc, #372]	; (800884c <HAL_DMA_Init+0x658>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d06d      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a5c      	ldr	r2, [pc, #368]	; (8008850 <HAL_DMA_Init+0x65c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d068      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a5a      	ldr	r2, [pc, #360]	; (8008854 <HAL_DMA_Init+0x660>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d063      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a59      	ldr	r2, [pc, #356]	; (8008858 <HAL_DMA_Init+0x664>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d05e      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a57      	ldr	r2, [pc, #348]	; (800885c <HAL_DMA_Init+0x668>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d059      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a56      	ldr	r2, [pc, #344]	; (8008860 <HAL_DMA_Init+0x66c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d054      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a54      	ldr	r2, [pc, #336]	; (8008864 <HAL_DMA_Init+0x670>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d04f      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a53      	ldr	r2, [pc, #332]	; (8008868 <HAL_DMA_Init+0x674>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d04a      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a51      	ldr	r2, [pc, #324]	; (800886c <HAL_DMA_Init+0x678>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d045      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a50      	ldr	r2, [pc, #320]	; (8008870 <HAL_DMA_Init+0x67c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d040      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a4e      	ldr	r2, [pc, #312]	; (8008874 <HAL_DMA_Init+0x680>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d03b      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a4d      	ldr	r2, [pc, #308]	; (8008878 <HAL_DMA_Init+0x684>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d036      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a4b      	ldr	r2, [pc, #300]	; (800887c <HAL_DMA_Init+0x688>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d031      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a4a      	ldr	r2, [pc, #296]	; (8008880 <HAL_DMA_Init+0x68c>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d02c      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a48      	ldr	r2, [pc, #288]	; (8008884 <HAL_DMA_Init+0x690>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d027      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a47      	ldr	r2, [pc, #284]	; (8008888 <HAL_DMA_Init+0x694>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d022      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a45      	ldr	r2, [pc, #276]	; (800888c <HAL_DMA_Init+0x698>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01d      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a44      	ldr	r2, [pc, #272]	; (8008890 <HAL_DMA_Init+0x69c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d018      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a42      	ldr	r2, [pc, #264]	; (8008894 <HAL_DMA_Init+0x6a0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a41      	ldr	r2, [pc, #260]	; (8008898 <HAL_DMA_Init+0x6a4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d00e      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a3f      	ldr	r2, [pc, #252]	; (800889c <HAL_DMA_Init+0x6a8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d009      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a3e      	ldr	r2, [pc, #248]	; (80088a0 <HAL_DMA_Init+0x6ac>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d004      	beq.n	80087b6 <HAL_DMA_Init+0x5c2>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a3c      	ldr	r2, [pc, #240]	; (80088a4 <HAL_DMA_Init+0x6b0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d101      	bne.n	80087ba <HAL_DMA_Init+0x5c6>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e000      	b.n	80087bc <HAL_DMA_Init+0x5c8>
 80087ba:	2300      	movs	r3, #0
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d032      	beq.n	8008826 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 fe3b 	bl	800a43c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	2b80      	cmp	r3, #128	; 0x80
 80087cc:	d102      	bne.n	80087d4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685a      	ldr	r2, [r3, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087dc:	b2d2      	uxtb	r2, r2
 80087de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80087e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d010      	beq.n	8008814 <HAL_DMA_Init+0x620>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	2b08      	cmp	r3, #8
 80087f8:	d80c      	bhi.n	8008814 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 feb8 	bl	800a570 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	e008      	b.n	8008826 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	a7fdabf8 	.word	0xa7fdabf8
 8008844:	cccccccd 	.word	0xcccccccd
 8008848:	40020010 	.word	0x40020010
 800884c:	40020028 	.word	0x40020028
 8008850:	40020040 	.word	0x40020040
 8008854:	40020058 	.word	0x40020058
 8008858:	40020070 	.word	0x40020070
 800885c:	40020088 	.word	0x40020088
 8008860:	400200a0 	.word	0x400200a0
 8008864:	400200b8 	.word	0x400200b8
 8008868:	40020410 	.word	0x40020410
 800886c:	40020428 	.word	0x40020428
 8008870:	40020440 	.word	0x40020440
 8008874:	40020458 	.word	0x40020458
 8008878:	40020470 	.word	0x40020470
 800887c:	40020488 	.word	0x40020488
 8008880:	400204a0 	.word	0x400204a0
 8008884:	400204b8 	.word	0x400204b8
 8008888:	58025408 	.word	0x58025408
 800888c:	5802541c 	.word	0x5802541c
 8008890:	58025430 	.word	0x58025430
 8008894:	58025444 	.word	0x58025444
 8008898:	58025458 	.word	0x58025458
 800889c:	5802546c 	.word	0x5802546c
 80088a0:	58025480 	.word	0x58025480
 80088a4:	58025494 	.word	0x58025494

080088a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80088b0:	f7fd f814 	bl	80058dc <HAL_GetTick>
 80088b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d101      	bne.n	80088c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e2dc      	b.n	8008e7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b02      	cmp	r3, #2
 80088ca:	d008      	beq.n	80088de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2280      	movs	r2, #128	; 0x80
 80088d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e2cd      	b.n	8008e7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a76      	ldr	r2, [pc, #472]	; (8008abc <HAL_DMA_Abort+0x214>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d04a      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a74      	ldr	r2, [pc, #464]	; (8008ac0 <HAL_DMA_Abort+0x218>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d045      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a73      	ldr	r2, [pc, #460]	; (8008ac4 <HAL_DMA_Abort+0x21c>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d040      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a71      	ldr	r2, [pc, #452]	; (8008ac8 <HAL_DMA_Abort+0x220>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d03b      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a70      	ldr	r2, [pc, #448]	; (8008acc <HAL_DMA_Abort+0x224>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d036      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a6e      	ldr	r2, [pc, #440]	; (8008ad0 <HAL_DMA_Abort+0x228>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d031      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a6d      	ldr	r2, [pc, #436]	; (8008ad4 <HAL_DMA_Abort+0x22c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d02c      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a6b      	ldr	r2, [pc, #428]	; (8008ad8 <HAL_DMA_Abort+0x230>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d027      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a6a      	ldr	r2, [pc, #424]	; (8008adc <HAL_DMA_Abort+0x234>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d022      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a68      	ldr	r2, [pc, #416]	; (8008ae0 <HAL_DMA_Abort+0x238>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d01d      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a67      	ldr	r2, [pc, #412]	; (8008ae4 <HAL_DMA_Abort+0x23c>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d018      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a65      	ldr	r2, [pc, #404]	; (8008ae8 <HAL_DMA_Abort+0x240>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d013      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a64      	ldr	r2, [pc, #400]	; (8008aec <HAL_DMA_Abort+0x244>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00e      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a62      	ldr	r2, [pc, #392]	; (8008af0 <HAL_DMA_Abort+0x248>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d009      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a61      	ldr	r2, [pc, #388]	; (8008af4 <HAL_DMA_Abort+0x24c>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d004      	beq.n	800897e <HAL_DMA_Abort+0xd6>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a5f      	ldr	r2, [pc, #380]	; (8008af8 <HAL_DMA_Abort+0x250>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d101      	bne.n	8008982 <HAL_DMA_Abort+0xda>
 800897e:	2301      	movs	r3, #1
 8008980:	e000      	b.n	8008984 <HAL_DMA_Abort+0xdc>
 8008982:	2300      	movs	r3, #0
 8008984:	2b00      	cmp	r3, #0
 8008986:	d013      	beq.n	80089b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 021e 	bic.w	r2, r2, #30
 8008996:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	695a      	ldr	r2, [r3, #20]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	617b      	str	r3, [r7, #20]
 80089ae:	e00a      	b.n	80089c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 020e 	bic.w	r2, r2, #14
 80089be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a3c      	ldr	r2, [pc, #240]	; (8008abc <HAL_DMA_Abort+0x214>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d072      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a3a      	ldr	r2, [pc, #232]	; (8008ac0 <HAL_DMA_Abort+0x218>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d06d      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a39      	ldr	r2, [pc, #228]	; (8008ac4 <HAL_DMA_Abort+0x21c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d068      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a37      	ldr	r2, [pc, #220]	; (8008ac8 <HAL_DMA_Abort+0x220>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d063      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a36      	ldr	r2, [pc, #216]	; (8008acc <HAL_DMA_Abort+0x224>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d05e      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a34      	ldr	r2, [pc, #208]	; (8008ad0 <HAL_DMA_Abort+0x228>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d059      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a33      	ldr	r2, [pc, #204]	; (8008ad4 <HAL_DMA_Abort+0x22c>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d054      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a31      	ldr	r2, [pc, #196]	; (8008ad8 <HAL_DMA_Abort+0x230>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d04f      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a30      	ldr	r2, [pc, #192]	; (8008adc <HAL_DMA_Abort+0x234>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d04a      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a2e      	ldr	r2, [pc, #184]	; (8008ae0 <HAL_DMA_Abort+0x238>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d045      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a2d      	ldr	r2, [pc, #180]	; (8008ae4 <HAL_DMA_Abort+0x23c>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d040      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a2b      	ldr	r2, [pc, #172]	; (8008ae8 <HAL_DMA_Abort+0x240>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d03b      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a2a      	ldr	r2, [pc, #168]	; (8008aec <HAL_DMA_Abort+0x244>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d036      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a28      	ldr	r2, [pc, #160]	; (8008af0 <HAL_DMA_Abort+0x248>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d031      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a27      	ldr	r2, [pc, #156]	; (8008af4 <HAL_DMA_Abort+0x24c>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d02c      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a25      	ldr	r2, [pc, #148]	; (8008af8 <HAL_DMA_Abort+0x250>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d027      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a24      	ldr	r2, [pc, #144]	; (8008afc <HAL_DMA_Abort+0x254>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d022      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a22      	ldr	r2, [pc, #136]	; (8008b00 <HAL_DMA_Abort+0x258>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d01d      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a21      	ldr	r2, [pc, #132]	; (8008b04 <HAL_DMA_Abort+0x25c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d018      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a1f      	ldr	r2, [pc, #124]	; (8008b08 <HAL_DMA_Abort+0x260>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d013      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a1e      	ldr	r2, [pc, #120]	; (8008b0c <HAL_DMA_Abort+0x264>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00e      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a1c      	ldr	r2, [pc, #112]	; (8008b10 <HAL_DMA_Abort+0x268>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d009      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a1b      	ldr	r2, [pc, #108]	; (8008b14 <HAL_DMA_Abort+0x26c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d004      	beq.n	8008ab6 <HAL_DMA_Abort+0x20e>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a19      	ldr	r2, [pc, #100]	; (8008b18 <HAL_DMA_Abort+0x270>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d132      	bne.n	8008b1c <HAL_DMA_Abort+0x274>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e031      	b.n	8008b1e <HAL_DMA_Abort+0x276>
 8008aba:	bf00      	nop
 8008abc:	40020010 	.word	0x40020010
 8008ac0:	40020028 	.word	0x40020028
 8008ac4:	40020040 	.word	0x40020040
 8008ac8:	40020058 	.word	0x40020058
 8008acc:	40020070 	.word	0x40020070
 8008ad0:	40020088 	.word	0x40020088
 8008ad4:	400200a0 	.word	0x400200a0
 8008ad8:	400200b8 	.word	0x400200b8
 8008adc:	40020410 	.word	0x40020410
 8008ae0:	40020428 	.word	0x40020428
 8008ae4:	40020440 	.word	0x40020440
 8008ae8:	40020458 	.word	0x40020458
 8008aec:	40020470 	.word	0x40020470
 8008af0:	40020488 	.word	0x40020488
 8008af4:	400204a0 	.word	0x400204a0
 8008af8:	400204b8 	.word	0x400204b8
 8008afc:	58025408 	.word	0x58025408
 8008b00:	5802541c 	.word	0x5802541c
 8008b04:	58025430 	.word	0x58025430
 8008b08:	58025444 	.word	0x58025444
 8008b0c:	58025458 	.word	0x58025458
 8008b10:	5802546c 	.word	0x5802546c
 8008b14:	58025480 	.word	0x58025480
 8008b18:	58025494 	.word	0x58025494
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d007      	beq.n	8008b32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a6d      	ldr	r2, [pc, #436]	; (8008cec <HAL_DMA_Abort+0x444>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d04a      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a6b      	ldr	r2, [pc, #428]	; (8008cf0 <HAL_DMA_Abort+0x448>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d045      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a6a      	ldr	r2, [pc, #424]	; (8008cf4 <HAL_DMA_Abort+0x44c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d040      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a68      	ldr	r2, [pc, #416]	; (8008cf8 <HAL_DMA_Abort+0x450>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d03b      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a67      	ldr	r2, [pc, #412]	; (8008cfc <HAL_DMA_Abort+0x454>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d036      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a65      	ldr	r2, [pc, #404]	; (8008d00 <HAL_DMA_Abort+0x458>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d031      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a64      	ldr	r2, [pc, #400]	; (8008d04 <HAL_DMA_Abort+0x45c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d02c      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a62      	ldr	r2, [pc, #392]	; (8008d08 <HAL_DMA_Abort+0x460>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d027      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a61      	ldr	r2, [pc, #388]	; (8008d0c <HAL_DMA_Abort+0x464>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d022      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a5f      	ldr	r2, [pc, #380]	; (8008d10 <HAL_DMA_Abort+0x468>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d01d      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a5e      	ldr	r2, [pc, #376]	; (8008d14 <HAL_DMA_Abort+0x46c>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d018      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a5c      	ldr	r2, [pc, #368]	; (8008d18 <HAL_DMA_Abort+0x470>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d013      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a5b      	ldr	r2, [pc, #364]	; (8008d1c <HAL_DMA_Abort+0x474>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d00e      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a59      	ldr	r2, [pc, #356]	; (8008d20 <HAL_DMA_Abort+0x478>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d009      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a58      	ldr	r2, [pc, #352]	; (8008d24 <HAL_DMA_Abort+0x47c>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d004      	beq.n	8008bd2 <HAL_DMA_Abort+0x32a>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a56      	ldr	r2, [pc, #344]	; (8008d28 <HAL_DMA_Abort+0x480>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d108      	bne.n	8008be4 <HAL_DMA_Abort+0x33c>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f022 0201 	bic.w	r2, r2, #1
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	e007      	b.n	8008bf4 <HAL_DMA_Abort+0x34c>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f022 0201 	bic.w	r2, r2, #1
 8008bf2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008bf4:	e013      	b.n	8008c1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008bf6:	f7fc fe71 	bl	80058dc <HAL_GetTick>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	1ad3      	subs	r3, r2, r3
 8008c00:	2b05      	cmp	r3, #5
 8008c02:	d90c      	bls.n	8008c1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2203      	movs	r2, #3
 8008c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e12d      	b.n	8008e7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e5      	bne.n	8008bf6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a2f      	ldr	r2, [pc, #188]	; (8008cec <HAL_DMA_Abort+0x444>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d04a      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a2d      	ldr	r2, [pc, #180]	; (8008cf0 <HAL_DMA_Abort+0x448>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d045      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a2c      	ldr	r2, [pc, #176]	; (8008cf4 <HAL_DMA_Abort+0x44c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d040      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a2a      	ldr	r2, [pc, #168]	; (8008cf8 <HAL_DMA_Abort+0x450>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d03b      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a29      	ldr	r2, [pc, #164]	; (8008cfc <HAL_DMA_Abort+0x454>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d036      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <HAL_DMA_Abort+0x458>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d031      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a26      	ldr	r2, [pc, #152]	; (8008d04 <HAL_DMA_Abort+0x45c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d02c      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a24      	ldr	r2, [pc, #144]	; (8008d08 <HAL_DMA_Abort+0x460>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d027      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a23      	ldr	r2, [pc, #140]	; (8008d0c <HAL_DMA_Abort+0x464>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d022      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a21      	ldr	r2, [pc, #132]	; (8008d10 <HAL_DMA_Abort+0x468>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d01d      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a20      	ldr	r2, [pc, #128]	; (8008d14 <HAL_DMA_Abort+0x46c>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d018      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a1e      	ldr	r2, [pc, #120]	; (8008d18 <HAL_DMA_Abort+0x470>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d013      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	; (8008d1c <HAL_DMA_Abort+0x474>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d00e      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a1b      	ldr	r2, [pc, #108]	; (8008d20 <HAL_DMA_Abort+0x478>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d009      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a1a      	ldr	r2, [pc, #104]	; (8008d24 <HAL_DMA_Abort+0x47c>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d004      	beq.n	8008cca <HAL_DMA_Abort+0x422>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a18      	ldr	r2, [pc, #96]	; (8008d28 <HAL_DMA_Abort+0x480>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d101      	bne.n	8008cce <HAL_DMA_Abort+0x426>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <HAL_DMA_Abort+0x428>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d02b      	beq.n	8008d2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cde:	f003 031f 	and.w	r3, r3, #31
 8008ce2:	223f      	movs	r2, #63	; 0x3f
 8008ce4:	409a      	lsls	r2, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	609a      	str	r2, [r3, #8]
 8008cea:	e02a      	b.n	8008d42 <HAL_DMA_Abort+0x49a>
 8008cec:	40020010 	.word	0x40020010
 8008cf0:	40020028 	.word	0x40020028
 8008cf4:	40020040 	.word	0x40020040
 8008cf8:	40020058 	.word	0x40020058
 8008cfc:	40020070 	.word	0x40020070
 8008d00:	40020088 	.word	0x40020088
 8008d04:	400200a0 	.word	0x400200a0
 8008d08:	400200b8 	.word	0x400200b8
 8008d0c:	40020410 	.word	0x40020410
 8008d10:	40020428 	.word	0x40020428
 8008d14:	40020440 	.word	0x40020440
 8008d18:	40020458 	.word	0x40020458
 8008d1c:	40020470 	.word	0x40020470
 8008d20:	40020488 	.word	0x40020488
 8008d24:	400204a0 	.word	0x400204a0
 8008d28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	409a      	lsls	r2, r3
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a4f      	ldr	r2, [pc, #316]	; (8008e84 <HAL_DMA_Abort+0x5dc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d072      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a4d      	ldr	r2, [pc, #308]	; (8008e88 <HAL_DMA_Abort+0x5e0>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d06d      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a4c      	ldr	r2, [pc, #304]	; (8008e8c <HAL_DMA_Abort+0x5e4>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d068      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a4a      	ldr	r2, [pc, #296]	; (8008e90 <HAL_DMA_Abort+0x5e8>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d063      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a49      	ldr	r2, [pc, #292]	; (8008e94 <HAL_DMA_Abort+0x5ec>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d05e      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a47      	ldr	r2, [pc, #284]	; (8008e98 <HAL_DMA_Abort+0x5f0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d059      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a46      	ldr	r2, [pc, #280]	; (8008e9c <HAL_DMA_Abort+0x5f4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d054      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a44      	ldr	r2, [pc, #272]	; (8008ea0 <HAL_DMA_Abort+0x5f8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d04f      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a43      	ldr	r2, [pc, #268]	; (8008ea4 <HAL_DMA_Abort+0x5fc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d04a      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a41      	ldr	r2, [pc, #260]	; (8008ea8 <HAL_DMA_Abort+0x600>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d045      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a40      	ldr	r2, [pc, #256]	; (8008eac <HAL_DMA_Abort+0x604>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d040      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a3e      	ldr	r2, [pc, #248]	; (8008eb0 <HAL_DMA_Abort+0x608>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d03b      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a3d      	ldr	r2, [pc, #244]	; (8008eb4 <HAL_DMA_Abort+0x60c>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d036      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a3b      	ldr	r2, [pc, #236]	; (8008eb8 <HAL_DMA_Abort+0x610>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d031      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a3a      	ldr	r2, [pc, #232]	; (8008ebc <HAL_DMA_Abort+0x614>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d02c      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a38      	ldr	r2, [pc, #224]	; (8008ec0 <HAL_DMA_Abort+0x618>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d027      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a37      	ldr	r2, [pc, #220]	; (8008ec4 <HAL_DMA_Abort+0x61c>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d022      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a35      	ldr	r2, [pc, #212]	; (8008ec8 <HAL_DMA_Abort+0x620>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d01d      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a34      	ldr	r2, [pc, #208]	; (8008ecc <HAL_DMA_Abort+0x624>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d018      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a32      	ldr	r2, [pc, #200]	; (8008ed0 <HAL_DMA_Abort+0x628>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d013      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a31      	ldr	r2, [pc, #196]	; (8008ed4 <HAL_DMA_Abort+0x62c>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00e      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a2f      	ldr	r2, [pc, #188]	; (8008ed8 <HAL_DMA_Abort+0x630>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d009      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a2e      	ldr	r2, [pc, #184]	; (8008edc <HAL_DMA_Abort+0x634>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d004      	beq.n	8008e32 <HAL_DMA_Abort+0x58a>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a2c      	ldr	r2, [pc, #176]	; (8008ee0 <HAL_DMA_Abort+0x638>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d101      	bne.n	8008e36 <HAL_DMA_Abort+0x58e>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <HAL_DMA_Abort+0x590>
 8008e36:	2300      	movs	r3, #0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d015      	beq.n	8008e68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008e44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00c      	beq.n	8008e68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008e66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3718      	adds	r7, #24
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bd80      	pop	{r7, pc}
 8008e82:	bf00      	nop
 8008e84:	40020010 	.word	0x40020010
 8008e88:	40020028 	.word	0x40020028
 8008e8c:	40020040 	.word	0x40020040
 8008e90:	40020058 	.word	0x40020058
 8008e94:	40020070 	.word	0x40020070
 8008e98:	40020088 	.word	0x40020088
 8008e9c:	400200a0 	.word	0x400200a0
 8008ea0:	400200b8 	.word	0x400200b8
 8008ea4:	40020410 	.word	0x40020410
 8008ea8:	40020428 	.word	0x40020428
 8008eac:	40020440 	.word	0x40020440
 8008eb0:	40020458 	.word	0x40020458
 8008eb4:	40020470 	.word	0x40020470
 8008eb8:	40020488 	.word	0x40020488
 8008ebc:	400204a0 	.word	0x400204a0
 8008ec0:	400204b8 	.word	0x400204b8
 8008ec4:	58025408 	.word	0x58025408
 8008ec8:	5802541c 	.word	0x5802541c
 8008ecc:	58025430 	.word	0x58025430
 8008ed0:	58025444 	.word	0x58025444
 8008ed4:	58025458 	.word	0x58025458
 8008ed8:	5802546c 	.word	0x5802546c
 8008edc:	58025480 	.word	0x58025480
 8008ee0:	58025494 	.word	0x58025494

08008ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b084      	sub	sp, #16
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e237      	b.n	8009366 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d004      	beq.n	8008f0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2280      	movs	r2, #128	; 0x80
 8008f06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e22c      	b.n	8009366 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a5c      	ldr	r2, [pc, #368]	; (8009084 <HAL_DMA_Abort_IT+0x1a0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d04a      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a5b      	ldr	r2, [pc, #364]	; (8009088 <HAL_DMA_Abort_IT+0x1a4>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d045      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a59      	ldr	r2, [pc, #356]	; (800908c <HAL_DMA_Abort_IT+0x1a8>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d040      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a58      	ldr	r2, [pc, #352]	; (8009090 <HAL_DMA_Abort_IT+0x1ac>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d03b      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a56      	ldr	r2, [pc, #344]	; (8009094 <HAL_DMA_Abort_IT+0x1b0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d036      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a55      	ldr	r2, [pc, #340]	; (8009098 <HAL_DMA_Abort_IT+0x1b4>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d031      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a53      	ldr	r2, [pc, #332]	; (800909c <HAL_DMA_Abort_IT+0x1b8>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d02c      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a52      	ldr	r2, [pc, #328]	; (80090a0 <HAL_DMA_Abort_IT+0x1bc>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d027      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a50      	ldr	r2, [pc, #320]	; (80090a4 <HAL_DMA_Abort_IT+0x1c0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d022      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a4f      	ldr	r2, [pc, #316]	; (80090a8 <HAL_DMA_Abort_IT+0x1c4>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d01d      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a4d      	ldr	r2, [pc, #308]	; (80090ac <HAL_DMA_Abort_IT+0x1c8>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d018      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a4c      	ldr	r2, [pc, #304]	; (80090b0 <HAL_DMA_Abort_IT+0x1cc>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d013      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a4a      	ldr	r2, [pc, #296]	; (80090b4 <HAL_DMA_Abort_IT+0x1d0>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d00e      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a49      	ldr	r2, [pc, #292]	; (80090b8 <HAL_DMA_Abort_IT+0x1d4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d009      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a47      	ldr	r2, [pc, #284]	; (80090bc <HAL_DMA_Abort_IT+0x1d8>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d004      	beq.n	8008fac <HAL_DMA_Abort_IT+0xc8>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a46      	ldr	r2, [pc, #280]	; (80090c0 <HAL_DMA_Abort_IT+0x1dc>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d101      	bne.n	8008fb0 <HAL_DMA_Abort_IT+0xcc>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <HAL_DMA_Abort_IT+0xce>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 8086 	beq.w	80090c4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2204      	movs	r2, #4
 8008fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a2f      	ldr	r2, [pc, #188]	; (8009084 <HAL_DMA_Abort_IT+0x1a0>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d04a      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a2e      	ldr	r2, [pc, #184]	; (8009088 <HAL_DMA_Abort_IT+0x1a4>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d045      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a2c      	ldr	r2, [pc, #176]	; (800908c <HAL_DMA_Abort_IT+0x1a8>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d040      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a2b      	ldr	r2, [pc, #172]	; (8009090 <HAL_DMA_Abort_IT+0x1ac>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d03b      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a29      	ldr	r2, [pc, #164]	; (8009094 <HAL_DMA_Abort_IT+0x1b0>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d036      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a28      	ldr	r2, [pc, #160]	; (8009098 <HAL_DMA_Abort_IT+0x1b4>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d031      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a26      	ldr	r2, [pc, #152]	; (800909c <HAL_DMA_Abort_IT+0x1b8>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d02c      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a25      	ldr	r2, [pc, #148]	; (80090a0 <HAL_DMA_Abort_IT+0x1bc>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d027      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a23      	ldr	r2, [pc, #140]	; (80090a4 <HAL_DMA_Abort_IT+0x1c0>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d022      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a22      	ldr	r2, [pc, #136]	; (80090a8 <HAL_DMA_Abort_IT+0x1c4>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d01d      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a20      	ldr	r2, [pc, #128]	; (80090ac <HAL_DMA_Abort_IT+0x1c8>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d018      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <HAL_DMA_Abort_IT+0x1cc>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d013      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <HAL_DMA_Abort_IT+0x1d0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00e      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <HAL_DMA_Abort_IT+0x1d4>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d009      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a1a      	ldr	r2, [pc, #104]	; (80090bc <HAL_DMA_Abort_IT+0x1d8>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d004      	beq.n	8009060 <HAL_DMA_Abort_IT+0x17c>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a19      	ldr	r2, [pc, #100]	; (80090c0 <HAL_DMA_Abort_IT+0x1dc>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d108      	bne.n	8009072 <HAL_DMA_Abort_IT+0x18e>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0201 	bic.w	r2, r2, #1
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	e178      	b.n	8009364 <HAL_DMA_Abort_IT+0x480>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f022 0201 	bic.w	r2, r2, #1
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	e16f      	b.n	8009364 <HAL_DMA_Abort_IT+0x480>
 8009084:	40020010 	.word	0x40020010
 8009088:	40020028 	.word	0x40020028
 800908c:	40020040 	.word	0x40020040
 8009090:	40020058 	.word	0x40020058
 8009094:	40020070 	.word	0x40020070
 8009098:	40020088 	.word	0x40020088
 800909c:	400200a0 	.word	0x400200a0
 80090a0:	400200b8 	.word	0x400200b8
 80090a4:	40020410 	.word	0x40020410
 80090a8:	40020428 	.word	0x40020428
 80090ac:	40020440 	.word	0x40020440
 80090b0:	40020458 	.word	0x40020458
 80090b4:	40020470 	.word	0x40020470
 80090b8:	40020488 	.word	0x40020488
 80090bc:	400204a0 	.word	0x400204a0
 80090c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 020e 	bic.w	r2, r2, #14
 80090d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a6c      	ldr	r2, [pc, #432]	; (800928c <HAL_DMA_Abort_IT+0x3a8>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d04a      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a6b      	ldr	r2, [pc, #428]	; (8009290 <HAL_DMA_Abort_IT+0x3ac>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d045      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a69      	ldr	r2, [pc, #420]	; (8009294 <HAL_DMA_Abort_IT+0x3b0>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d040      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a68      	ldr	r2, [pc, #416]	; (8009298 <HAL_DMA_Abort_IT+0x3b4>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d03b      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a66      	ldr	r2, [pc, #408]	; (800929c <HAL_DMA_Abort_IT+0x3b8>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d036      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a65      	ldr	r2, [pc, #404]	; (80092a0 <HAL_DMA_Abort_IT+0x3bc>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d031      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a63      	ldr	r2, [pc, #396]	; (80092a4 <HAL_DMA_Abort_IT+0x3c0>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d02c      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a62      	ldr	r2, [pc, #392]	; (80092a8 <HAL_DMA_Abort_IT+0x3c4>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d027      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a60      	ldr	r2, [pc, #384]	; (80092ac <HAL_DMA_Abort_IT+0x3c8>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d022      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a5f      	ldr	r2, [pc, #380]	; (80092b0 <HAL_DMA_Abort_IT+0x3cc>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d01d      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a5d      	ldr	r2, [pc, #372]	; (80092b4 <HAL_DMA_Abort_IT+0x3d0>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d018      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a5c      	ldr	r2, [pc, #368]	; (80092b8 <HAL_DMA_Abort_IT+0x3d4>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d013      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a5a      	ldr	r2, [pc, #360]	; (80092bc <HAL_DMA_Abort_IT+0x3d8>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d00e      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a59      	ldr	r2, [pc, #356]	; (80092c0 <HAL_DMA_Abort_IT+0x3dc>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d009      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a57      	ldr	r2, [pc, #348]	; (80092c4 <HAL_DMA_Abort_IT+0x3e0>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d004      	beq.n	8009174 <HAL_DMA_Abort_IT+0x290>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a56      	ldr	r2, [pc, #344]	; (80092c8 <HAL_DMA_Abort_IT+0x3e4>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d108      	bne.n	8009186 <HAL_DMA_Abort_IT+0x2a2>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0201 	bic.w	r2, r2, #1
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	e007      	b.n	8009196 <HAL_DMA_Abort_IT+0x2b2>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0201 	bic.w	r2, r2, #1
 8009194:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a3c      	ldr	r2, [pc, #240]	; (800928c <HAL_DMA_Abort_IT+0x3a8>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d072      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a3a      	ldr	r2, [pc, #232]	; (8009290 <HAL_DMA_Abort_IT+0x3ac>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d06d      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a39      	ldr	r2, [pc, #228]	; (8009294 <HAL_DMA_Abort_IT+0x3b0>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d068      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a37      	ldr	r2, [pc, #220]	; (8009298 <HAL_DMA_Abort_IT+0x3b4>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d063      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a36      	ldr	r2, [pc, #216]	; (800929c <HAL_DMA_Abort_IT+0x3b8>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d05e      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a34      	ldr	r2, [pc, #208]	; (80092a0 <HAL_DMA_Abort_IT+0x3bc>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d059      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a33      	ldr	r2, [pc, #204]	; (80092a4 <HAL_DMA_Abort_IT+0x3c0>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d054      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a31      	ldr	r2, [pc, #196]	; (80092a8 <HAL_DMA_Abort_IT+0x3c4>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d04f      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a30      	ldr	r2, [pc, #192]	; (80092ac <HAL_DMA_Abort_IT+0x3c8>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d04a      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a2e      	ldr	r2, [pc, #184]	; (80092b0 <HAL_DMA_Abort_IT+0x3cc>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d045      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a2d      	ldr	r2, [pc, #180]	; (80092b4 <HAL_DMA_Abort_IT+0x3d0>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d040      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a2b      	ldr	r2, [pc, #172]	; (80092b8 <HAL_DMA_Abort_IT+0x3d4>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d03b      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a2a      	ldr	r2, [pc, #168]	; (80092bc <HAL_DMA_Abort_IT+0x3d8>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d036      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a28      	ldr	r2, [pc, #160]	; (80092c0 <HAL_DMA_Abort_IT+0x3dc>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d031      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a27      	ldr	r2, [pc, #156]	; (80092c4 <HAL_DMA_Abort_IT+0x3e0>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d02c      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a25      	ldr	r2, [pc, #148]	; (80092c8 <HAL_DMA_Abort_IT+0x3e4>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d027      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a24      	ldr	r2, [pc, #144]	; (80092cc <HAL_DMA_Abort_IT+0x3e8>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d022      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a22      	ldr	r2, [pc, #136]	; (80092d0 <HAL_DMA_Abort_IT+0x3ec>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d01d      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a21      	ldr	r2, [pc, #132]	; (80092d4 <HAL_DMA_Abort_IT+0x3f0>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d018      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a1f      	ldr	r2, [pc, #124]	; (80092d8 <HAL_DMA_Abort_IT+0x3f4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d013      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a1e      	ldr	r2, [pc, #120]	; (80092dc <HAL_DMA_Abort_IT+0x3f8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d00e      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a1c      	ldr	r2, [pc, #112]	; (80092e0 <HAL_DMA_Abort_IT+0x3fc>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d009      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a1b      	ldr	r2, [pc, #108]	; (80092e4 <HAL_DMA_Abort_IT+0x400>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d004      	beq.n	8009286 <HAL_DMA_Abort_IT+0x3a2>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a19      	ldr	r2, [pc, #100]	; (80092e8 <HAL_DMA_Abort_IT+0x404>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d132      	bne.n	80092ec <HAL_DMA_Abort_IT+0x408>
 8009286:	2301      	movs	r3, #1
 8009288:	e031      	b.n	80092ee <HAL_DMA_Abort_IT+0x40a>
 800928a:	bf00      	nop
 800928c:	40020010 	.word	0x40020010
 8009290:	40020028 	.word	0x40020028
 8009294:	40020040 	.word	0x40020040
 8009298:	40020058 	.word	0x40020058
 800929c:	40020070 	.word	0x40020070
 80092a0:	40020088 	.word	0x40020088
 80092a4:	400200a0 	.word	0x400200a0
 80092a8:	400200b8 	.word	0x400200b8
 80092ac:	40020410 	.word	0x40020410
 80092b0:	40020428 	.word	0x40020428
 80092b4:	40020440 	.word	0x40020440
 80092b8:	40020458 	.word	0x40020458
 80092bc:	40020470 	.word	0x40020470
 80092c0:	40020488 	.word	0x40020488
 80092c4:	400204a0 	.word	0x400204a0
 80092c8:	400204b8 	.word	0x400204b8
 80092cc:	58025408 	.word	0x58025408
 80092d0:	5802541c 	.word	0x5802541c
 80092d4:	58025430 	.word	0x58025430
 80092d8:	58025444 	.word	0x58025444
 80092dc:	58025458 	.word	0x58025458
 80092e0:	5802546c 	.word	0x5802546c
 80092e4:	58025480 	.word	0x58025480
 80092e8:	58025494 	.word	0x58025494
 80092ec:	2300      	movs	r3, #0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d028      	beq.n	8009344 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092f6:	681a      	ldr	r2, [r3, #0]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009300:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009306:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800930c:	f003 031f 	and.w	r3, r3, #31
 8009310:	2201      	movs	r2, #1
 8009312:	409a      	lsls	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009320:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00c      	beq.n	8009344 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009338:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009342:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009358:	2b00      	cmp	r3, #0
 800935a:	d003      	beq.n	8009364 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop

08009370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08a      	sub	sp, #40	; 0x28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800937c:	4b67      	ldr	r3, [pc, #412]	; (800951c <HAL_DMA_IRQHandler+0x1ac>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a67      	ldr	r2, [pc, #412]	; (8009520 <HAL_DMA_IRQHandler+0x1b0>)
 8009382:	fba2 2303 	umull	r2, r3, r2, r3
 8009386:	0a9b      	lsrs	r3, r3, #10
 8009388:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800938e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009394:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8009396:	6a3b      	ldr	r3, [r7, #32]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a5f      	ldr	r2, [pc, #380]	; (8009524 <HAL_DMA_IRQHandler+0x1b4>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d04a      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a5d      	ldr	r2, [pc, #372]	; (8009528 <HAL_DMA_IRQHandler+0x1b8>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d045      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a5c      	ldr	r2, [pc, #368]	; (800952c <HAL_DMA_IRQHandler+0x1bc>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d040      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a5a      	ldr	r2, [pc, #360]	; (8009530 <HAL_DMA_IRQHandler+0x1c0>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d03b      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a59      	ldr	r2, [pc, #356]	; (8009534 <HAL_DMA_IRQHandler+0x1c4>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d036      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a57      	ldr	r2, [pc, #348]	; (8009538 <HAL_DMA_IRQHandler+0x1c8>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d031      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a56      	ldr	r2, [pc, #344]	; (800953c <HAL_DMA_IRQHandler+0x1cc>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d02c      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a54      	ldr	r2, [pc, #336]	; (8009540 <HAL_DMA_IRQHandler+0x1d0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d027      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a53      	ldr	r2, [pc, #332]	; (8009544 <HAL_DMA_IRQHandler+0x1d4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d022      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a51      	ldr	r2, [pc, #324]	; (8009548 <HAL_DMA_IRQHandler+0x1d8>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d01d      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a50      	ldr	r2, [pc, #320]	; (800954c <HAL_DMA_IRQHandler+0x1dc>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d018      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a4e      	ldr	r2, [pc, #312]	; (8009550 <HAL_DMA_IRQHandler+0x1e0>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d013      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a4d      	ldr	r2, [pc, #308]	; (8009554 <HAL_DMA_IRQHandler+0x1e4>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d00e      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a4b      	ldr	r2, [pc, #300]	; (8009558 <HAL_DMA_IRQHandler+0x1e8>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d009      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a4a      	ldr	r2, [pc, #296]	; (800955c <HAL_DMA_IRQHandler+0x1ec>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d004      	beq.n	8009442 <HAL_DMA_IRQHandler+0xd2>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a48      	ldr	r2, [pc, #288]	; (8009560 <HAL_DMA_IRQHandler+0x1f0>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d101      	bne.n	8009446 <HAL_DMA_IRQHandler+0xd6>
 8009442:	2301      	movs	r3, #1
 8009444:	e000      	b.n	8009448 <HAL_DMA_IRQHandler+0xd8>
 8009446:	2300      	movs	r3, #0
 8009448:	2b00      	cmp	r3, #0
 800944a:	f000 842b 	beq.w	8009ca4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009452:	f003 031f 	and.w	r3, r3, #31
 8009456:	2208      	movs	r2, #8
 8009458:	409a      	lsls	r2, r3
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	f000 80a2 	beq.w	80095a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a2e      	ldr	r2, [pc, #184]	; (8009524 <HAL_DMA_IRQHandler+0x1b4>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d04a      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a2d      	ldr	r2, [pc, #180]	; (8009528 <HAL_DMA_IRQHandler+0x1b8>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d045      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a2b      	ldr	r2, [pc, #172]	; (800952c <HAL_DMA_IRQHandler+0x1bc>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d040      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a2a      	ldr	r2, [pc, #168]	; (8009530 <HAL_DMA_IRQHandler+0x1c0>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d03b      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a28      	ldr	r2, [pc, #160]	; (8009534 <HAL_DMA_IRQHandler+0x1c4>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d036      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a27      	ldr	r2, [pc, #156]	; (8009538 <HAL_DMA_IRQHandler+0x1c8>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d031      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a25      	ldr	r2, [pc, #148]	; (800953c <HAL_DMA_IRQHandler+0x1cc>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d02c      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a24      	ldr	r2, [pc, #144]	; (8009540 <HAL_DMA_IRQHandler+0x1d0>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d027      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a22      	ldr	r2, [pc, #136]	; (8009544 <HAL_DMA_IRQHandler+0x1d4>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d022      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a21      	ldr	r2, [pc, #132]	; (8009548 <HAL_DMA_IRQHandler+0x1d8>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d01d      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a1f      	ldr	r2, [pc, #124]	; (800954c <HAL_DMA_IRQHandler+0x1dc>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d018      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a1e      	ldr	r2, [pc, #120]	; (8009550 <HAL_DMA_IRQHandler+0x1e0>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d013      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a1c      	ldr	r2, [pc, #112]	; (8009554 <HAL_DMA_IRQHandler+0x1e4>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d00e      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a1b      	ldr	r2, [pc, #108]	; (8009558 <HAL_DMA_IRQHandler+0x1e8>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d009      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a19      	ldr	r2, [pc, #100]	; (800955c <HAL_DMA_IRQHandler+0x1ec>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d004      	beq.n	8009504 <HAL_DMA_IRQHandler+0x194>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a18      	ldr	r2, [pc, #96]	; (8009560 <HAL_DMA_IRQHandler+0x1f0>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d12f      	bne.n	8009564 <HAL_DMA_IRQHandler+0x1f4>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0304 	and.w	r3, r3, #4
 800950e:	2b00      	cmp	r3, #0
 8009510:	bf14      	ite	ne
 8009512:	2301      	movne	r3, #1
 8009514:	2300      	moveq	r3, #0
 8009516:	b2db      	uxtb	r3, r3
 8009518:	e02e      	b.n	8009578 <HAL_DMA_IRQHandler+0x208>
 800951a:	bf00      	nop
 800951c:	20000000 	.word	0x20000000
 8009520:	1b4e81b5 	.word	0x1b4e81b5
 8009524:	40020010 	.word	0x40020010
 8009528:	40020028 	.word	0x40020028
 800952c:	40020040 	.word	0x40020040
 8009530:	40020058 	.word	0x40020058
 8009534:	40020070 	.word	0x40020070
 8009538:	40020088 	.word	0x40020088
 800953c:	400200a0 	.word	0x400200a0
 8009540:	400200b8 	.word	0x400200b8
 8009544:	40020410 	.word	0x40020410
 8009548:	40020428 	.word	0x40020428
 800954c:	40020440 	.word	0x40020440
 8009550:	40020458 	.word	0x40020458
 8009554:	40020470 	.word	0x40020470
 8009558:	40020488 	.word	0x40020488
 800955c:	400204a0 	.word	0x400204a0
 8009560:	400204b8 	.word	0x400204b8
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0308 	and.w	r3, r3, #8
 800956e:	2b00      	cmp	r3, #0
 8009570:	bf14      	ite	ne
 8009572:	2301      	movne	r3, #1
 8009574:	2300      	moveq	r3, #0
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	d015      	beq.n	80095a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f022 0204 	bic.w	r2, r2, #4
 800958a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009590:	f003 031f 	and.w	r3, r3, #31
 8009594:	2208      	movs	r2, #8
 8009596:	409a      	lsls	r2, r3
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a0:	f043 0201 	orr.w	r2, r3, #1
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095ac:	f003 031f 	and.w	r3, r3, #31
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	fa22 f303 	lsr.w	r3, r2, r3
 80095b6:	f003 0301 	and.w	r3, r3, #1
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d06e      	beq.n	800969c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a69      	ldr	r2, [pc, #420]	; (8009768 <HAL_DMA_IRQHandler+0x3f8>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d04a      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a67      	ldr	r2, [pc, #412]	; (800976c <HAL_DMA_IRQHandler+0x3fc>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d045      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a66      	ldr	r2, [pc, #408]	; (8009770 <HAL_DMA_IRQHandler+0x400>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d040      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a64      	ldr	r2, [pc, #400]	; (8009774 <HAL_DMA_IRQHandler+0x404>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d03b      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a63      	ldr	r2, [pc, #396]	; (8009778 <HAL_DMA_IRQHandler+0x408>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d036      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a61      	ldr	r2, [pc, #388]	; (800977c <HAL_DMA_IRQHandler+0x40c>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d031      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a60      	ldr	r2, [pc, #384]	; (8009780 <HAL_DMA_IRQHandler+0x410>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d02c      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a5e      	ldr	r2, [pc, #376]	; (8009784 <HAL_DMA_IRQHandler+0x414>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d027      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a5d      	ldr	r2, [pc, #372]	; (8009788 <HAL_DMA_IRQHandler+0x418>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d022      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a5b      	ldr	r2, [pc, #364]	; (800978c <HAL_DMA_IRQHandler+0x41c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d01d      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a5a      	ldr	r2, [pc, #360]	; (8009790 <HAL_DMA_IRQHandler+0x420>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d018      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a58      	ldr	r2, [pc, #352]	; (8009794 <HAL_DMA_IRQHandler+0x424>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d013      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a57      	ldr	r2, [pc, #348]	; (8009798 <HAL_DMA_IRQHandler+0x428>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d00e      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a55      	ldr	r2, [pc, #340]	; (800979c <HAL_DMA_IRQHandler+0x42c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d009      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a54      	ldr	r2, [pc, #336]	; (80097a0 <HAL_DMA_IRQHandler+0x430>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d004      	beq.n	800965e <HAL_DMA_IRQHandler+0x2ee>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a52      	ldr	r2, [pc, #328]	; (80097a4 <HAL_DMA_IRQHandler+0x434>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d10a      	bne.n	8009674 <HAL_DMA_IRQHandler+0x304>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	695b      	ldr	r3, [r3, #20]
 8009664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009668:	2b00      	cmp	r3, #0
 800966a:	bf14      	ite	ne
 800966c:	2301      	movne	r3, #1
 800966e:	2300      	moveq	r3, #0
 8009670:	b2db      	uxtb	r3, r3
 8009672:	e003      	b.n	800967c <HAL_DMA_IRQHandler+0x30c>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2300      	movs	r3, #0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00d      	beq.n	800969c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009684:	f003 031f 	and.w	r3, r3, #31
 8009688:	2201      	movs	r2, #1
 800968a:	409a      	lsls	r2, r3
 800968c:	6a3b      	ldr	r3, [r7, #32]
 800968e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009694:	f043 0202 	orr.w	r2, r3, #2
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a0:	f003 031f 	and.w	r3, r3, #31
 80096a4:	2204      	movs	r2, #4
 80096a6:	409a      	lsls	r2, r3
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	4013      	ands	r3, r2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 808f 	beq.w	80097d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a2c      	ldr	r2, [pc, #176]	; (8009768 <HAL_DMA_IRQHandler+0x3f8>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d04a      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a2a      	ldr	r2, [pc, #168]	; (800976c <HAL_DMA_IRQHandler+0x3fc>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d045      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a29      	ldr	r2, [pc, #164]	; (8009770 <HAL_DMA_IRQHandler+0x400>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d040      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a27      	ldr	r2, [pc, #156]	; (8009774 <HAL_DMA_IRQHandler+0x404>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d03b      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a26      	ldr	r2, [pc, #152]	; (8009778 <HAL_DMA_IRQHandler+0x408>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d036      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a24      	ldr	r2, [pc, #144]	; (800977c <HAL_DMA_IRQHandler+0x40c>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d031      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a23      	ldr	r2, [pc, #140]	; (8009780 <HAL_DMA_IRQHandler+0x410>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d02c      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a21      	ldr	r2, [pc, #132]	; (8009784 <HAL_DMA_IRQHandler+0x414>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d027      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a20      	ldr	r2, [pc, #128]	; (8009788 <HAL_DMA_IRQHandler+0x418>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d022      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a1e      	ldr	r2, [pc, #120]	; (800978c <HAL_DMA_IRQHandler+0x41c>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d01d      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a1d      	ldr	r2, [pc, #116]	; (8009790 <HAL_DMA_IRQHandler+0x420>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d018      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a1b      	ldr	r2, [pc, #108]	; (8009794 <HAL_DMA_IRQHandler+0x424>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d013      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a1a      	ldr	r2, [pc, #104]	; (8009798 <HAL_DMA_IRQHandler+0x428>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d00e      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a18      	ldr	r2, [pc, #96]	; (800979c <HAL_DMA_IRQHandler+0x42c>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d009      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a17      	ldr	r2, [pc, #92]	; (80097a0 <HAL_DMA_IRQHandler+0x430>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d004      	beq.n	8009752 <HAL_DMA_IRQHandler+0x3e2>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <HAL_DMA_IRQHandler+0x434>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d12a      	bne.n	80097a8 <HAL_DMA_IRQHandler+0x438>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0302 	and.w	r3, r3, #2
 800975c:	2b00      	cmp	r3, #0
 800975e:	bf14      	ite	ne
 8009760:	2301      	movne	r3, #1
 8009762:	2300      	moveq	r3, #0
 8009764:	b2db      	uxtb	r3, r3
 8009766:	e023      	b.n	80097b0 <HAL_DMA_IRQHandler+0x440>
 8009768:	40020010 	.word	0x40020010
 800976c:	40020028 	.word	0x40020028
 8009770:	40020040 	.word	0x40020040
 8009774:	40020058 	.word	0x40020058
 8009778:	40020070 	.word	0x40020070
 800977c:	40020088 	.word	0x40020088
 8009780:	400200a0 	.word	0x400200a0
 8009784:	400200b8 	.word	0x400200b8
 8009788:	40020410 	.word	0x40020410
 800978c:	40020428 	.word	0x40020428
 8009790:	40020440 	.word	0x40020440
 8009794:	40020458 	.word	0x40020458
 8009798:	40020470 	.word	0x40020470
 800979c:	40020488 	.word	0x40020488
 80097a0:	400204a0 	.word	0x400204a0
 80097a4:	400204b8 	.word	0x400204b8
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2300      	movs	r3, #0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00d      	beq.n	80097d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b8:	f003 031f 	and.w	r3, r3, #31
 80097bc:	2204      	movs	r2, #4
 80097be:	409a      	lsls	r2, r3
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c8:	f043 0204 	orr.w	r2, r3, #4
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097d4:	f003 031f 	and.w	r3, r3, #31
 80097d8:	2210      	movs	r2, #16
 80097da:	409a      	lsls	r2, r3
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	4013      	ands	r3, r2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 80a6 	beq.w	8009932 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a85      	ldr	r2, [pc, #532]	; (8009a00 <HAL_DMA_IRQHandler+0x690>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d04a      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a83      	ldr	r2, [pc, #524]	; (8009a04 <HAL_DMA_IRQHandler+0x694>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d045      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a82      	ldr	r2, [pc, #520]	; (8009a08 <HAL_DMA_IRQHandler+0x698>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d040      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a80      	ldr	r2, [pc, #512]	; (8009a0c <HAL_DMA_IRQHandler+0x69c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d03b      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a7f      	ldr	r2, [pc, #508]	; (8009a10 <HAL_DMA_IRQHandler+0x6a0>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d036      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a7d      	ldr	r2, [pc, #500]	; (8009a14 <HAL_DMA_IRQHandler+0x6a4>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d031      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a7c      	ldr	r2, [pc, #496]	; (8009a18 <HAL_DMA_IRQHandler+0x6a8>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d02c      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a7a      	ldr	r2, [pc, #488]	; (8009a1c <HAL_DMA_IRQHandler+0x6ac>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d027      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a79      	ldr	r2, [pc, #484]	; (8009a20 <HAL_DMA_IRQHandler+0x6b0>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d022      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a77      	ldr	r2, [pc, #476]	; (8009a24 <HAL_DMA_IRQHandler+0x6b4>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d01d      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a76      	ldr	r2, [pc, #472]	; (8009a28 <HAL_DMA_IRQHandler+0x6b8>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d018      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a74      	ldr	r2, [pc, #464]	; (8009a2c <HAL_DMA_IRQHandler+0x6bc>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d013      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a73      	ldr	r2, [pc, #460]	; (8009a30 <HAL_DMA_IRQHandler+0x6c0>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d00e      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a71      	ldr	r2, [pc, #452]	; (8009a34 <HAL_DMA_IRQHandler+0x6c4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d009      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a70      	ldr	r2, [pc, #448]	; (8009a38 <HAL_DMA_IRQHandler+0x6c8>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d004      	beq.n	8009886 <HAL_DMA_IRQHandler+0x516>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a6e      	ldr	r2, [pc, #440]	; (8009a3c <HAL_DMA_IRQHandler+0x6cc>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d10a      	bne.n	800989c <HAL_DMA_IRQHandler+0x52c>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0308 	and.w	r3, r3, #8
 8009890:	2b00      	cmp	r3, #0
 8009892:	bf14      	ite	ne
 8009894:	2301      	movne	r3, #1
 8009896:	2300      	moveq	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	e009      	b.n	80098b0 <HAL_DMA_IRQHandler+0x540>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0304 	and.w	r3, r3, #4
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	bf14      	ite	ne
 80098aa:	2301      	movne	r3, #1
 80098ac:	2300      	moveq	r3, #0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d03e      	beq.n	8009932 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b8:	f003 031f 	and.w	r3, r3, #31
 80098bc:	2210      	movs	r2, #16
 80098be:	409a      	lsls	r2, r3
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d018      	beq.n	8009904 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d108      	bne.n	80098f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d024      	beq.n	8009932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
 80098f0:	e01f      	b.n	8009932 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d01b      	beq.n	8009932 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	4798      	blx	r3
 8009902:	e016      	b.n	8009932 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800990e:	2b00      	cmp	r3, #0
 8009910:	d107      	bne.n	8009922 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 0208 	bic.w	r2, r2, #8
 8009920:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	d003      	beq.n	8009932 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009936:	f003 031f 	and.w	r3, r3, #31
 800993a:	2220      	movs	r2, #32
 800993c:	409a      	lsls	r2, r3
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	4013      	ands	r3, r2
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8110 	beq.w	8009b68 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a2c      	ldr	r2, [pc, #176]	; (8009a00 <HAL_DMA_IRQHandler+0x690>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d04a      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a2b      	ldr	r2, [pc, #172]	; (8009a04 <HAL_DMA_IRQHandler+0x694>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d045      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a29      	ldr	r2, [pc, #164]	; (8009a08 <HAL_DMA_IRQHandler+0x698>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d040      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a28      	ldr	r2, [pc, #160]	; (8009a0c <HAL_DMA_IRQHandler+0x69c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d03b      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a26      	ldr	r2, [pc, #152]	; (8009a10 <HAL_DMA_IRQHandler+0x6a0>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d036      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a25      	ldr	r2, [pc, #148]	; (8009a14 <HAL_DMA_IRQHandler+0x6a4>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d031      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a23      	ldr	r2, [pc, #140]	; (8009a18 <HAL_DMA_IRQHandler+0x6a8>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d02c      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a22      	ldr	r2, [pc, #136]	; (8009a1c <HAL_DMA_IRQHandler+0x6ac>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d027      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a20      	ldr	r2, [pc, #128]	; (8009a20 <HAL_DMA_IRQHandler+0x6b0>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d022      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a1f      	ldr	r2, [pc, #124]	; (8009a24 <HAL_DMA_IRQHandler+0x6b4>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d01d      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a1d      	ldr	r2, [pc, #116]	; (8009a28 <HAL_DMA_IRQHandler+0x6b8>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d018      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a1c      	ldr	r2, [pc, #112]	; (8009a2c <HAL_DMA_IRQHandler+0x6bc>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d013      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a1a      	ldr	r2, [pc, #104]	; (8009a30 <HAL_DMA_IRQHandler+0x6c0>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d00e      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a19      	ldr	r2, [pc, #100]	; (8009a34 <HAL_DMA_IRQHandler+0x6c4>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d009      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a17      	ldr	r2, [pc, #92]	; (8009a38 <HAL_DMA_IRQHandler+0x6c8>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d004      	beq.n	80099e8 <HAL_DMA_IRQHandler+0x678>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a16      	ldr	r2, [pc, #88]	; (8009a3c <HAL_DMA_IRQHandler+0x6cc>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d12b      	bne.n	8009a40 <HAL_DMA_IRQHandler+0x6d0>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0310 	and.w	r3, r3, #16
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bf14      	ite	ne
 80099f6:	2301      	movne	r3, #1
 80099f8:	2300      	moveq	r3, #0
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	e02a      	b.n	8009a54 <HAL_DMA_IRQHandler+0x6e4>
 80099fe:	bf00      	nop
 8009a00:	40020010 	.word	0x40020010
 8009a04:	40020028 	.word	0x40020028
 8009a08:	40020040 	.word	0x40020040
 8009a0c:	40020058 	.word	0x40020058
 8009a10:	40020070 	.word	0x40020070
 8009a14:	40020088 	.word	0x40020088
 8009a18:	400200a0 	.word	0x400200a0
 8009a1c:	400200b8 	.word	0x400200b8
 8009a20:	40020410 	.word	0x40020410
 8009a24:	40020428 	.word	0x40020428
 8009a28:	40020440 	.word	0x40020440
 8009a2c:	40020458 	.word	0x40020458
 8009a30:	40020470 	.word	0x40020470
 8009a34:	40020488 	.word	0x40020488
 8009a38:	400204a0 	.word	0x400204a0
 8009a3c:	400204b8 	.word	0x400204b8
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bf14      	ite	ne
 8009a4e:	2301      	movne	r3, #1
 8009a50:	2300      	moveq	r3, #0
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 8087 	beq.w	8009b68 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a5e:	f003 031f 	and.w	r3, r3, #31
 8009a62:	2220      	movs	r2, #32
 8009a64:	409a      	lsls	r2, r3
 8009a66:	6a3b      	ldr	r3, [r7, #32]
 8009a68:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b04      	cmp	r3, #4
 8009a74:	d139      	bne.n	8009aea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0216 	bic.w	r2, r2, #22
 8009a84:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	695a      	ldr	r2, [r3, #20]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a94:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d103      	bne.n	8009aa6 <HAL_DMA_IRQHandler+0x736>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d007      	beq.n	8009ab6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0208 	bic.w	r2, r2, #8
 8009ab4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aba:	f003 031f 	and.w	r3, r3, #31
 8009abe:	223f      	movs	r2, #63	; 0x3f
 8009ac0:	409a      	lsls	r2, r3
 8009ac2:	6a3b      	ldr	r3, [r7, #32]
 8009ac4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 834a 	beq.w	800a174 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	4798      	blx	r3
          }
          return;
 8009ae8:	e344      	b.n	800a174 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d018      	beq.n	8009b2a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d108      	bne.n	8009b18 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d02c      	beq.n	8009b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	4798      	blx	r3
 8009b16:	e027      	b.n	8009b68 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d023      	beq.n	8009b68 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	4798      	blx	r3
 8009b28:	e01e      	b.n	8009b68 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10f      	bne.n	8009b58 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f022 0210 	bic.w	r2, r2, #16
 8009b46:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d003      	beq.n	8009b68 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 8306 	beq.w	800a17e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b76:	f003 0301 	and.w	r3, r3, #1
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 8088 	beq.w	8009c90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2204      	movs	r2, #4
 8009b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a7a      	ldr	r2, [pc, #488]	; (8009d78 <HAL_DMA_IRQHandler+0xa08>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d04a      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a79      	ldr	r2, [pc, #484]	; (8009d7c <HAL_DMA_IRQHandler+0xa0c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d045      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a77      	ldr	r2, [pc, #476]	; (8009d80 <HAL_DMA_IRQHandler+0xa10>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d040      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a76      	ldr	r2, [pc, #472]	; (8009d84 <HAL_DMA_IRQHandler+0xa14>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d03b      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a74      	ldr	r2, [pc, #464]	; (8009d88 <HAL_DMA_IRQHandler+0xa18>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d036      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a73      	ldr	r2, [pc, #460]	; (8009d8c <HAL_DMA_IRQHandler+0xa1c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d031      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a71      	ldr	r2, [pc, #452]	; (8009d90 <HAL_DMA_IRQHandler+0xa20>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d02c      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a70      	ldr	r2, [pc, #448]	; (8009d94 <HAL_DMA_IRQHandler+0xa24>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d027      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a6e      	ldr	r2, [pc, #440]	; (8009d98 <HAL_DMA_IRQHandler+0xa28>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d022      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a6d      	ldr	r2, [pc, #436]	; (8009d9c <HAL_DMA_IRQHandler+0xa2c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d01d      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a6b      	ldr	r2, [pc, #428]	; (8009da0 <HAL_DMA_IRQHandler+0xa30>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d018      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a6a      	ldr	r2, [pc, #424]	; (8009da4 <HAL_DMA_IRQHandler+0xa34>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d013      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a68      	ldr	r2, [pc, #416]	; (8009da8 <HAL_DMA_IRQHandler+0xa38>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d00e      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a67      	ldr	r2, [pc, #412]	; (8009dac <HAL_DMA_IRQHandler+0xa3c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d009      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a65      	ldr	r2, [pc, #404]	; (8009db0 <HAL_DMA_IRQHandler+0xa40>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d004      	beq.n	8009c28 <HAL_DMA_IRQHandler+0x8b8>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a64      	ldr	r2, [pc, #400]	; (8009db4 <HAL_DMA_IRQHandler+0xa44>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d108      	bne.n	8009c3a <HAL_DMA_IRQHandler+0x8ca>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f022 0201 	bic.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	e007      	b.n	8009c4a <HAL_DMA_IRQHandler+0x8da>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0201 	bic.w	r2, r2, #1
 8009c48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d307      	bcc.n	8009c66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f003 0301 	and.w	r3, r3, #1
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1f2      	bne.n	8009c4a <HAL_DMA_IRQHandler+0x8da>
 8009c64:	e000      	b.n	8009c68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009c66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 0301 	and.w	r3, r3, #1
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d004      	beq.n	8009c80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2203      	movs	r2, #3
 8009c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8009c7e:	e003      	b.n	8009c88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f000 8272 	beq.w	800a17e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	4798      	blx	r3
 8009ca2:	e26c      	b.n	800a17e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a43      	ldr	r2, [pc, #268]	; (8009db8 <HAL_DMA_IRQHandler+0xa48>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d022      	beq.n	8009cf4 <HAL_DMA_IRQHandler+0x984>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a42      	ldr	r2, [pc, #264]	; (8009dbc <HAL_DMA_IRQHandler+0xa4c>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d01d      	beq.n	8009cf4 <HAL_DMA_IRQHandler+0x984>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a40      	ldr	r2, [pc, #256]	; (8009dc0 <HAL_DMA_IRQHandler+0xa50>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d018      	beq.n	8009cf4 <HAL_DMA_IRQHandler+0x984>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a3f      	ldr	r2, [pc, #252]	; (8009dc4 <HAL_DMA_IRQHandler+0xa54>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d013      	beq.n	8009cf4 <HAL_DMA_IRQHandler+0x984>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a3d      	ldr	r2, [pc, #244]	; (8009dc8 <HAL_DMA_IRQHandler+0xa58>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d00e      	beq.n	8009cf4 <HAL_DMA_IRQHandler+0x984>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a3c      	ldr	r2, [pc, #240]	; (8009dcc <HAL_DMA_IRQHandler+0xa5c>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d009      	beq.n	8009cf4 <HAL_DMA_IRQHandler+0x984>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a3a      	ldr	r2, [pc, #232]	; (8009dd0 <HAL_DMA_IRQHandler+0xa60>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d004      	beq.n	8009cf4 <HAL_DMA_IRQHandler+0x984>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a39      	ldr	r2, [pc, #228]	; (8009dd4 <HAL_DMA_IRQHandler+0xa64>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d101      	bne.n	8009cf8 <HAL_DMA_IRQHandler+0x988>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e000      	b.n	8009cfa <HAL_DMA_IRQHandler+0x98a>
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 823f 	beq.w	800a17e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d0c:	f003 031f 	and.w	r3, r3, #31
 8009d10:	2204      	movs	r2, #4
 8009d12:	409a      	lsls	r2, r3
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	4013      	ands	r3, r2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 80cd 	beq.w	8009eb8 <HAL_DMA_IRQHandler+0xb48>
 8009d1e:	693b      	ldr	r3, [r7, #16]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 80c7 	beq.w	8009eb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d2e:	f003 031f 	and.w	r3, r3, #31
 8009d32:	2204      	movs	r2, #4
 8009d34:	409a      	lsls	r2, r3
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d049      	beq.n	8009dd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d109      	bne.n	8009d62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 8210 	beq.w	800a178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d60:	e20a      	b.n	800a178 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 8206 	beq.w	800a178 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d74:	e200      	b.n	800a178 <HAL_DMA_IRQHandler+0xe08>
 8009d76:	bf00      	nop
 8009d78:	40020010 	.word	0x40020010
 8009d7c:	40020028 	.word	0x40020028
 8009d80:	40020040 	.word	0x40020040
 8009d84:	40020058 	.word	0x40020058
 8009d88:	40020070 	.word	0x40020070
 8009d8c:	40020088 	.word	0x40020088
 8009d90:	400200a0 	.word	0x400200a0
 8009d94:	400200b8 	.word	0x400200b8
 8009d98:	40020410 	.word	0x40020410
 8009d9c:	40020428 	.word	0x40020428
 8009da0:	40020440 	.word	0x40020440
 8009da4:	40020458 	.word	0x40020458
 8009da8:	40020470 	.word	0x40020470
 8009dac:	40020488 	.word	0x40020488
 8009db0:	400204a0 	.word	0x400204a0
 8009db4:	400204b8 	.word	0x400204b8
 8009db8:	58025408 	.word	0x58025408
 8009dbc:	5802541c 	.word	0x5802541c
 8009dc0:	58025430 	.word	0x58025430
 8009dc4:	58025444 	.word	0x58025444
 8009dc8:	58025458 	.word	0x58025458
 8009dcc:	5802546c 	.word	0x5802546c
 8009dd0:	58025480 	.word	0x58025480
 8009dd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f003 0320 	and.w	r3, r3, #32
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d160      	bne.n	8009ea4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a7f      	ldr	r2, [pc, #508]	; (8009fe4 <HAL_DMA_IRQHandler+0xc74>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d04a      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a7d      	ldr	r2, [pc, #500]	; (8009fe8 <HAL_DMA_IRQHandler+0xc78>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d045      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a7c      	ldr	r2, [pc, #496]	; (8009fec <HAL_DMA_IRQHandler+0xc7c>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d040      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a7a      	ldr	r2, [pc, #488]	; (8009ff0 <HAL_DMA_IRQHandler+0xc80>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d03b      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a79      	ldr	r2, [pc, #484]	; (8009ff4 <HAL_DMA_IRQHandler+0xc84>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d036      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a77      	ldr	r2, [pc, #476]	; (8009ff8 <HAL_DMA_IRQHandler+0xc88>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d031      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a76      	ldr	r2, [pc, #472]	; (8009ffc <HAL_DMA_IRQHandler+0xc8c>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d02c      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a74      	ldr	r2, [pc, #464]	; (800a000 <HAL_DMA_IRQHandler+0xc90>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d027      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a73      	ldr	r2, [pc, #460]	; (800a004 <HAL_DMA_IRQHandler+0xc94>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d022      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a71      	ldr	r2, [pc, #452]	; (800a008 <HAL_DMA_IRQHandler+0xc98>)
 8009e42:	4293      	cmp	r3, r2
 8009e44:	d01d      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a70      	ldr	r2, [pc, #448]	; (800a00c <HAL_DMA_IRQHandler+0xc9c>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d018      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a6e      	ldr	r2, [pc, #440]	; (800a010 <HAL_DMA_IRQHandler+0xca0>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d013      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a6d      	ldr	r2, [pc, #436]	; (800a014 <HAL_DMA_IRQHandler+0xca4>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d00e      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a6b      	ldr	r2, [pc, #428]	; (800a018 <HAL_DMA_IRQHandler+0xca8>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d009      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a6a      	ldr	r2, [pc, #424]	; (800a01c <HAL_DMA_IRQHandler+0xcac>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d004      	beq.n	8009e82 <HAL_DMA_IRQHandler+0xb12>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a68      	ldr	r2, [pc, #416]	; (800a020 <HAL_DMA_IRQHandler+0xcb0>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d108      	bne.n	8009e94 <HAL_DMA_IRQHandler+0xb24>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f022 0208 	bic.w	r2, r2, #8
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	e007      	b.n	8009ea4 <HAL_DMA_IRQHandler+0xb34>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0204 	bic.w	r2, r2, #4
 8009ea2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 8165 	beq.w	800a178 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009eb6:	e15f      	b.n	800a178 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ebc:	f003 031f 	and.w	r3, r3, #31
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	409a      	lsls	r2, r3
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 80c5 	beq.w	800a058 <HAL_DMA_IRQHandler+0xce8>
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 80bf 	beq.w	800a058 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ede:	f003 031f 	and.w	r3, r3, #31
 8009ee2:	2202      	movs	r2, #2
 8009ee4:	409a      	lsls	r2, r3
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d018      	beq.n	8009f26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d109      	bne.n	8009f12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 813a 	beq.w	800a17c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f10:	e134      	b.n	800a17c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f000 8130 	beq.w	800a17c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009f24:	e12a      	b.n	800a17c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f003 0320 	and.w	r3, r3, #32
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f040 8089 	bne.w	800a044 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a2b      	ldr	r2, [pc, #172]	; (8009fe4 <HAL_DMA_IRQHandler+0xc74>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d04a      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	4a29      	ldr	r2, [pc, #164]	; (8009fe8 <HAL_DMA_IRQHandler+0xc78>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d045      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a28      	ldr	r2, [pc, #160]	; (8009fec <HAL_DMA_IRQHandler+0xc7c>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d040      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a26      	ldr	r2, [pc, #152]	; (8009ff0 <HAL_DMA_IRQHandler+0xc80>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d03b      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4a25      	ldr	r2, [pc, #148]	; (8009ff4 <HAL_DMA_IRQHandler+0xc84>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d036      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a23      	ldr	r2, [pc, #140]	; (8009ff8 <HAL_DMA_IRQHandler+0xc88>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d031      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a22      	ldr	r2, [pc, #136]	; (8009ffc <HAL_DMA_IRQHandler+0xc8c>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d02c      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a20      	ldr	r2, [pc, #128]	; (800a000 <HAL_DMA_IRQHandler+0xc90>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d027      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a1f      	ldr	r2, [pc, #124]	; (800a004 <HAL_DMA_IRQHandler+0xc94>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d022      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1d      	ldr	r2, [pc, #116]	; (800a008 <HAL_DMA_IRQHandler+0xc98>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d01d      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a1c      	ldr	r2, [pc, #112]	; (800a00c <HAL_DMA_IRQHandler+0xc9c>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d018      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a1a      	ldr	r2, [pc, #104]	; (800a010 <HAL_DMA_IRQHandler+0xca0>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d013      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a19      	ldr	r2, [pc, #100]	; (800a014 <HAL_DMA_IRQHandler+0xca4>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d00e      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a17      	ldr	r2, [pc, #92]	; (800a018 <HAL_DMA_IRQHandler+0xca8>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d009      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a16      	ldr	r2, [pc, #88]	; (800a01c <HAL_DMA_IRQHandler+0xcac>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d004      	beq.n	8009fd2 <HAL_DMA_IRQHandler+0xc62>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a14      	ldr	r2, [pc, #80]	; (800a020 <HAL_DMA_IRQHandler+0xcb0>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d128      	bne.n	800a024 <HAL_DMA_IRQHandler+0xcb4>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0214 	bic.w	r2, r2, #20
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	e027      	b.n	800a034 <HAL_DMA_IRQHandler+0xcc4>
 8009fe4:	40020010 	.word	0x40020010
 8009fe8:	40020028 	.word	0x40020028
 8009fec:	40020040 	.word	0x40020040
 8009ff0:	40020058 	.word	0x40020058
 8009ff4:	40020070 	.word	0x40020070
 8009ff8:	40020088 	.word	0x40020088
 8009ffc:	400200a0 	.word	0x400200a0
 800a000:	400200b8 	.word	0x400200b8
 800a004:	40020410 	.word	0x40020410
 800a008:	40020428 	.word	0x40020428
 800a00c:	40020440 	.word	0x40020440
 800a010:	40020458 	.word	0x40020458
 800a014:	40020470 	.word	0x40020470
 800a018:	40020488 	.word	0x40020488
 800a01c:	400204a0 	.word	0x400204a0
 800a020:	400204b8 	.word	0x400204b8
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 020a 	bic.w	r2, r2, #10
 800a032:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 8097 	beq.w	800a17c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a056:	e091      	b.n	800a17c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a05c:	f003 031f 	and.w	r3, r3, #31
 800a060:	2208      	movs	r2, #8
 800a062:	409a      	lsls	r2, r3
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	4013      	ands	r3, r2
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f000 8088 	beq.w	800a17e <HAL_DMA_IRQHandler+0xe0e>
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 8082 	beq.w	800a17e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a41      	ldr	r2, [pc, #260]	; (800a184 <HAL_DMA_IRQHandler+0xe14>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d04a      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a3f      	ldr	r2, [pc, #252]	; (800a188 <HAL_DMA_IRQHandler+0xe18>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d045      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a3e      	ldr	r2, [pc, #248]	; (800a18c <HAL_DMA_IRQHandler+0xe1c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d040      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a3c      	ldr	r2, [pc, #240]	; (800a190 <HAL_DMA_IRQHandler+0xe20>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d03b      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a3b      	ldr	r2, [pc, #236]	; (800a194 <HAL_DMA_IRQHandler+0xe24>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d036      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a39      	ldr	r2, [pc, #228]	; (800a198 <HAL_DMA_IRQHandler+0xe28>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d031      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a38      	ldr	r2, [pc, #224]	; (800a19c <HAL_DMA_IRQHandler+0xe2c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d02c      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a36      	ldr	r2, [pc, #216]	; (800a1a0 <HAL_DMA_IRQHandler+0xe30>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d027      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a35      	ldr	r2, [pc, #212]	; (800a1a4 <HAL_DMA_IRQHandler+0xe34>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d022      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a33      	ldr	r2, [pc, #204]	; (800a1a8 <HAL_DMA_IRQHandler+0xe38>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d01d      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a32      	ldr	r2, [pc, #200]	; (800a1ac <HAL_DMA_IRQHandler+0xe3c>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d018      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a30      	ldr	r2, [pc, #192]	; (800a1b0 <HAL_DMA_IRQHandler+0xe40>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d013      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a2f      	ldr	r2, [pc, #188]	; (800a1b4 <HAL_DMA_IRQHandler+0xe44>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d00e      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a2d      	ldr	r2, [pc, #180]	; (800a1b8 <HAL_DMA_IRQHandler+0xe48>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d009      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a2c      	ldr	r2, [pc, #176]	; (800a1bc <HAL_DMA_IRQHandler+0xe4c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d004      	beq.n	800a11a <HAL_DMA_IRQHandler+0xdaa>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a2a      	ldr	r2, [pc, #168]	; (800a1c0 <HAL_DMA_IRQHandler+0xe50>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d108      	bne.n	800a12c <HAL_DMA_IRQHandler+0xdbc>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f022 021c 	bic.w	r2, r2, #28
 800a128:	601a      	str	r2, [r3, #0]
 800a12a:	e007      	b.n	800a13c <HAL_DMA_IRQHandler+0xdcc>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f022 020e 	bic.w	r2, r2, #14
 800a13a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a140:	f003 031f 	and.w	r3, r3, #31
 800a144:	2201      	movs	r2, #1
 800a146:	409a      	lsls	r2, r3
 800a148:	69fb      	ldr	r3, [r7, #28]
 800a14a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	4798      	blx	r3
 800a172:	e004      	b.n	800a17e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800a174:	bf00      	nop
 800a176:	e002      	b.n	800a17e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a178:	bf00      	nop
 800a17a:	e000      	b.n	800a17e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a17c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a17e:	3728      	adds	r7, #40	; 0x28
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	40020010 	.word	0x40020010
 800a188:	40020028 	.word	0x40020028
 800a18c:	40020040 	.word	0x40020040
 800a190:	40020058 	.word	0x40020058
 800a194:	40020070 	.word	0x40020070
 800a198:	40020088 	.word	0x40020088
 800a19c:	400200a0 	.word	0x400200a0
 800a1a0:	400200b8 	.word	0x400200b8
 800a1a4:	40020410 	.word	0x40020410
 800a1a8:	40020428 	.word	0x40020428
 800a1ac:	40020440 	.word	0x40020440
 800a1b0:	40020458 	.word	0x40020458
 800a1b4:	40020470 	.word	0x40020470
 800a1b8:	40020488 	.word	0x40020488
 800a1bc:	400204a0 	.word	0x400204a0
 800a1c0:	400204b8 	.word	0x400204b8

0800a1c4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a1d2:	b2db      	uxtb	r3, r3
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a42      	ldr	r2, [pc, #264]	; (800a2f8 <DMA_CalcBaseAndBitshift+0x118>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d04a      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a41      	ldr	r2, [pc, #260]	; (800a2fc <DMA_CalcBaseAndBitshift+0x11c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d045      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a3f      	ldr	r2, [pc, #252]	; (800a300 <DMA_CalcBaseAndBitshift+0x120>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d040      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a3e      	ldr	r2, [pc, #248]	; (800a304 <DMA_CalcBaseAndBitshift+0x124>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d03b      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a3c      	ldr	r2, [pc, #240]	; (800a308 <DMA_CalcBaseAndBitshift+0x128>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d036      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a3b      	ldr	r2, [pc, #236]	; (800a30c <DMA_CalcBaseAndBitshift+0x12c>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d031      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a39      	ldr	r2, [pc, #228]	; (800a310 <DMA_CalcBaseAndBitshift+0x130>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d02c      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a38      	ldr	r2, [pc, #224]	; (800a314 <DMA_CalcBaseAndBitshift+0x134>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d027      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a36      	ldr	r2, [pc, #216]	; (800a318 <DMA_CalcBaseAndBitshift+0x138>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d022      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a35      	ldr	r2, [pc, #212]	; (800a31c <DMA_CalcBaseAndBitshift+0x13c>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d01d      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a33      	ldr	r2, [pc, #204]	; (800a320 <DMA_CalcBaseAndBitshift+0x140>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d018      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a32      	ldr	r2, [pc, #200]	; (800a324 <DMA_CalcBaseAndBitshift+0x144>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d013      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a30      	ldr	r2, [pc, #192]	; (800a328 <DMA_CalcBaseAndBitshift+0x148>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d00e      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a2f      	ldr	r2, [pc, #188]	; (800a32c <DMA_CalcBaseAndBitshift+0x14c>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d009      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a2d      	ldr	r2, [pc, #180]	; (800a330 <DMA_CalcBaseAndBitshift+0x150>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d004      	beq.n	800a288 <DMA_CalcBaseAndBitshift+0xa8>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a2c      	ldr	r2, [pc, #176]	; (800a334 <DMA_CalcBaseAndBitshift+0x154>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d101      	bne.n	800a28c <DMA_CalcBaseAndBitshift+0xac>
 800a288:	2301      	movs	r3, #1
 800a28a:	e000      	b.n	800a28e <DMA_CalcBaseAndBitshift+0xae>
 800a28c:	2300      	movs	r3, #0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d024      	beq.n	800a2dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	b2db      	uxtb	r3, r3
 800a298:	3b10      	subs	r3, #16
 800a29a:	4a27      	ldr	r2, [pc, #156]	; (800a338 <DMA_CalcBaseAndBitshift+0x158>)
 800a29c:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a0:	091b      	lsrs	r3, r3, #4
 800a2a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f003 0307 	and.w	r3, r3, #7
 800a2aa:	4a24      	ldr	r2, [pc, #144]	; (800a33c <DMA_CalcBaseAndBitshift+0x15c>)
 800a2ac:	5cd3      	ldrb	r3, [r2, r3]
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d908      	bls.n	800a2cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	4b1f      	ldr	r3, [pc, #124]	; (800a340 <DMA_CalcBaseAndBitshift+0x160>)
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	1d1a      	adds	r2, r3, #4
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	659a      	str	r2, [r3, #88]	; 0x58
 800a2ca:	e00d      	b.n	800a2e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4b1b      	ldr	r3, [pc, #108]	; (800a340 <DMA_CalcBaseAndBitshift+0x160>)
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6593      	str	r3, [r2, #88]	; 0x58
 800a2da:	e005      	b.n	800a2e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	40020010 	.word	0x40020010
 800a2fc:	40020028 	.word	0x40020028
 800a300:	40020040 	.word	0x40020040
 800a304:	40020058 	.word	0x40020058
 800a308:	40020070 	.word	0x40020070
 800a30c:	40020088 	.word	0x40020088
 800a310:	400200a0 	.word	0x400200a0
 800a314:	400200b8 	.word	0x400200b8
 800a318:	40020410 	.word	0x40020410
 800a31c:	40020428 	.word	0x40020428
 800a320:	40020440 	.word	0x40020440
 800a324:	40020458 	.word	0x40020458
 800a328:	40020470 	.word	0x40020470
 800a32c:	40020488 	.word	0x40020488
 800a330:	400204a0 	.word	0x400204a0
 800a334:	400204b8 	.word	0x400204b8
 800a338:	aaaaaaab 	.word	0xaaaaaaab
 800a33c:	08015bc8 	.word	0x08015bc8
 800a340:	fffffc00 	.word	0xfffffc00

0800a344 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a34c:	2300      	movs	r3, #0
 800a34e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d120      	bne.n	800a39a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d858      	bhi.n	800a412 <DMA_CheckFifoParam+0xce>
 800a360:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <DMA_CheckFifoParam+0x24>)
 800a362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a366:	bf00      	nop
 800a368:	0800a379 	.word	0x0800a379
 800a36c:	0800a38b 	.word	0x0800a38b
 800a370:	0800a379 	.word	0x0800a379
 800a374:	0800a413 	.word	0x0800a413
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d048      	beq.n	800a416 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a388:	e045      	b.n	800a416 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a392:	d142      	bne.n	800a41a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a398:	e03f      	b.n	800a41a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3a2:	d123      	bne.n	800a3ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a8:	2b03      	cmp	r3, #3
 800a3aa:	d838      	bhi.n	800a41e <DMA_CheckFifoParam+0xda>
 800a3ac:	a201      	add	r2, pc, #4	; (adr r2, 800a3b4 <DMA_CheckFifoParam+0x70>)
 800a3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b2:	bf00      	nop
 800a3b4:	0800a3c5 	.word	0x0800a3c5
 800a3b8:	0800a3cb 	.word	0x0800a3cb
 800a3bc:	0800a3c5 	.word	0x0800a3c5
 800a3c0:	0800a3dd 	.word	0x0800a3dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	73fb      	strb	r3, [r7, #15]
        break;
 800a3c8:	e030      	b.n	800a42c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d025      	beq.n	800a422 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a3da:	e022      	b.n	800a422 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a3e4:	d11f      	bne.n	800a426 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a3ea:	e01c      	b.n	800a426 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f0:	2b02      	cmp	r3, #2
 800a3f2:	d902      	bls.n	800a3fa <DMA_CheckFifoParam+0xb6>
 800a3f4:	2b03      	cmp	r3, #3
 800a3f6:	d003      	beq.n	800a400 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a3f8:	e018      	b.n	800a42c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	73fb      	strb	r3, [r7, #15]
        break;
 800a3fe:	e015      	b.n	800a42c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d00e      	beq.n	800a42a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	73fb      	strb	r3, [r7, #15]
    break;
 800a410:	e00b      	b.n	800a42a <DMA_CheckFifoParam+0xe6>
        break;
 800a412:	bf00      	nop
 800a414:	e00a      	b.n	800a42c <DMA_CheckFifoParam+0xe8>
        break;
 800a416:	bf00      	nop
 800a418:	e008      	b.n	800a42c <DMA_CheckFifoParam+0xe8>
        break;
 800a41a:	bf00      	nop
 800a41c:	e006      	b.n	800a42c <DMA_CheckFifoParam+0xe8>
        break;
 800a41e:	bf00      	nop
 800a420:	e004      	b.n	800a42c <DMA_CheckFifoParam+0xe8>
        break;
 800a422:	bf00      	nop
 800a424:	e002      	b.n	800a42c <DMA_CheckFifoParam+0xe8>
        break;
 800a426:	bf00      	nop
 800a428:	e000      	b.n	800a42c <DMA_CheckFifoParam+0xe8>
    break;
 800a42a:	bf00      	nop
    }
  }

  return status;
 800a42c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop

0800a43c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b085      	sub	sp, #20
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a38      	ldr	r2, [pc, #224]	; (800a530 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d022      	beq.n	800a49a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a36      	ldr	r2, [pc, #216]	; (800a534 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d01d      	beq.n	800a49a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a35      	ldr	r2, [pc, #212]	; (800a538 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d018      	beq.n	800a49a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a33      	ldr	r2, [pc, #204]	; (800a53c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d013      	beq.n	800a49a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a32      	ldr	r2, [pc, #200]	; (800a540 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d00e      	beq.n	800a49a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a30      	ldr	r2, [pc, #192]	; (800a544 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d009      	beq.n	800a49a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a2f      	ldr	r2, [pc, #188]	; (800a548 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d004      	beq.n	800a49a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a2d      	ldr	r2, [pc, #180]	; (800a54c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d101      	bne.n	800a49e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a49a:	2301      	movs	r3, #1
 800a49c:	e000      	b.n	800a4a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a49e:	2300      	movs	r3, #0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d01a      	beq.n	800a4da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	3b08      	subs	r3, #8
 800a4ac:	4a28      	ldr	r2, [pc, #160]	; (800a550 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a4ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b2:	091b      	lsrs	r3, r3, #4
 800a4b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	4b26      	ldr	r3, [pc, #152]	; (800a554 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a4ba:	4413      	add	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	461a      	mov	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a24      	ldr	r2, [pc, #144]	; (800a558 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a4c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f003 031f 	and.w	r3, r3, #31
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	409a      	lsls	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a4d8:	e024      	b.n	800a524 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	3b10      	subs	r3, #16
 800a4e2:	4a1e      	ldr	r2, [pc, #120]	; (800a55c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a4e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4e8:	091b      	lsrs	r3, r3, #4
 800a4ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	4a1c      	ldr	r2, [pc, #112]	; (800a560 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d806      	bhi.n	800a502 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4a1b      	ldr	r2, [pc, #108]	; (800a564 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d902      	bls.n	800a502 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	3308      	adds	r3, #8
 800a500:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	4b18      	ldr	r3, [pc, #96]	; (800a568 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a506:	4413      	add	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	461a      	mov	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a16      	ldr	r2, [pc, #88]	; (800a56c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a514:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f003 031f 	and.w	r3, r3, #31
 800a51c:	2201      	movs	r2, #1
 800a51e:	409a      	lsls	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a524:	bf00      	nop
 800a526:	3714      	adds	r7, #20
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	58025408 	.word	0x58025408
 800a534:	5802541c 	.word	0x5802541c
 800a538:	58025430 	.word	0x58025430
 800a53c:	58025444 	.word	0x58025444
 800a540:	58025458 	.word	0x58025458
 800a544:	5802546c 	.word	0x5802546c
 800a548:	58025480 	.word	0x58025480
 800a54c:	58025494 	.word	0x58025494
 800a550:	cccccccd 	.word	0xcccccccd
 800a554:	16009600 	.word	0x16009600
 800a558:	58025880 	.word	0x58025880
 800a55c:	aaaaaaab 	.word	0xaaaaaaab
 800a560:	400204b8 	.word	0x400204b8
 800a564:	4002040f 	.word	0x4002040f
 800a568:	10008200 	.word	0x10008200
 800a56c:	40020880 	.word	0x40020880

0800a570 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d04a      	beq.n	800a61c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2b08      	cmp	r3, #8
 800a58a:	d847      	bhi.n	800a61c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a25      	ldr	r2, [pc, #148]	; (800a628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d022      	beq.n	800a5dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	4a24      	ldr	r2, [pc, #144]	; (800a62c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d01d      	beq.n	800a5dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a22      	ldr	r2, [pc, #136]	; (800a630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d018      	beq.n	800a5dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	4a21      	ldr	r2, [pc, #132]	; (800a634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d013      	beq.n	800a5dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a1f      	ldr	r2, [pc, #124]	; (800a638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00e      	beq.n	800a5dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a1e      	ldr	r2, [pc, #120]	; (800a63c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d009      	beq.n	800a5dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a1c      	ldr	r2, [pc, #112]	; (800a640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d004      	beq.n	800a5dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a1b      	ldr	r2, [pc, #108]	; (800a644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d101      	bne.n	800a5e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	e000      	b.n	800a5e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00a      	beq.n	800a5fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	4b17      	ldr	r3, [pc, #92]	; (800a648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a5ea:	4413      	add	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a15      	ldr	r2, [pc, #84]	; (800a64c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a5f8:	671a      	str	r2, [r3, #112]	; 0x70
 800a5fa:	e009      	b.n	800a610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a600:	4413      	add	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	461a      	mov	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a11      	ldr	r2, [pc, #68]	; (800a654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a60e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3b01      	subs	r3, #1
 800a614:	2201      	movs	r2, #1
 800a616:	409a      	lsls	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a61c:	bf00      	nop
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	58025408 	.word	0x58025408
 800a62c:	5802541c 	.word	0x5802541c
 800a630:	58025430 	.word	0x58025430
 800a634:	58025444 	.word	0x58025444
 800a638:	58025458 	.word	0x58025458
 800a63c:	5802546c 	.word	0x5802546c
 800a640:	58025480 	.word	0x58025480
 800a644:	58025494 	.word	0x58025494
 800a648:	1600963f 	.word	0x1600963f
 800a64c:	58025940 	.word	0x58025940
 800a650:	1000823f 	.word	0x1000823f
 800a654:	40020940 	.word	0x40020940

0800a658 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a658:	b480      	push	{r7}
 800a65a:	b089      	sub	sp, #36	; 0x24
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a662:	2300      	movs	r3, #0
 800a664:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a666:	4b86      	ldr	r3, [pc, #536]	; (800a880 <HAL_GPIO_Init+0x228>)
 800a668:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a66a:	e18c      	b.n	800a986 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	2101      	movs	r1, #1
 800a672:	69fb      	ldr	r3, [r7, #28]
 800a674:	fa01 f303 	lsl.w	r3, r1, r3
 800a678:	4013      	ands	r3, r2
 800a67a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f000 817e 	beq.w	800a980 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f003 0303 	and.w	r3, r3, #3
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d005      	beq.n	800a69c <HAL_GPIO_Init+0x44>
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	f003 0303 	and.w	r3, r3, #3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d130      	bne.n	800a6fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a6a2:	69fb      	ldr	r3, [r7, #28]
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	2203      	movs	r2, #3
 800a6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ac:	43db      	mvns	r3, r3
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	4013      	ands	r3, r2
 800a6b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	68da      	ldr	r2, [r3, #12]
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c0:	69ba      	ldr	r2, [r7, #24]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	69ba      	ldr	r2, [r7, #24]
 800a6ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6da:	43db      	mvns	r3, r3
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	4013      	ands	r3, r2
 800a6e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	091b      	lsrs	r3, r3, #4
 800a6e8:	f003 0201 	and.w	r2, r3, #1
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f2:	69ba      	ldr	r2, [r7, #24]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f003 0303 	and.w	r3, r3, #3
 800a706:	2b03      	cmp	r3, #3
 800a708:	d017      	beq.n	800a73a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	2203      	movs	r2, #3
 800a716:	fa02 f303 	lsl.w	r3, r2, r3
 800a71a:	43db      	mvns	r3, r3
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	4013      	ands	r3, r2
 800a720:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	689a      	ldr	r2, [r3, #8]
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	fa02 f303 	lsl.w	r3, r2, r3
 800a72e:	69ba      	ldr	r2, [r7, #24]
 800a730:	4313      	orrs	r3, r2
 800a732:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	69ba      	ldr	r2, [r7, #24]
 800a738:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	2b02      	cmp	r3, #2
 800a744:	d123      	bne.n	800a78e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	08da      	lsrs	r2, r3, #3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	3208      	adds	r2, #8
 800a74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	220f      	movs	r2, #15
 800a75e:	fa02 f303 	lsl.w	r3, r2, r3
 800a762:	43db      	mvns	r3, r3
 800a764:	69ba      	ldr	r2, [r7, #24]
 800a766:	4013      	ands	r3, r2
 800a768:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	691a      	ldr	r2, [r3, #16]
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	f003 0307 	and.w	r3, r3, #7
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	fa02 f303 	lsl.w	r3, r2, r3
 800a77a:	69ba      	ldr	r2, [r7, #24]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	08da      	lsrs	r2, r3, #3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3208      	adds	r2, #8
 800a788:	69b9      	ldr	r1, [r7, #24]
 800a78a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	2203      	movs	r2, #3
 800a79a:	fa02 f303 	lsl.w	r3, r2, r3
 800a79e:	43db      	mvns	r3, r3
 800a7a0:	69ba      	ldr	r2, [r7, #24]
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	f003 0203 	and.w	r2, r3, #3
 800a7ae:	69fb      	ldr	r3, [r7, #28]
 800a7b0:	005b      	lsls	r3, r3, #1
 800a7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b6:	69ba      	ldr	r2, [r7, #24]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	69ba      	ldr	r2, [r7, #24]
 800a7c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f000 80d8 	beq.w	800a980 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7d0:	4b2c      	ldr	r3, [pc, #176]	; (800a884 <HAL_GPIO_Init+0x22c>)
 800a7d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a7d6:	4a2b      	ldr	r2, [pc, #172]	; (800a884 <HAL_GPIO_Init+0x22c>)
 800a7d8:	f043 0302 	orr.w	r3, r3, #2
 800a7dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a7e0:	4b28      	ldr	r3, [pc, #160]	; (800a884 <HAL_GPIO_Init+0x22c>)
 800a7e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a7e6:	f003 0302 	and.w	r3, r3, #2
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a7ee:	4a26      	ldr	r2, [pc, #152]	; (800a888 <HAL_GPIO_Init+0x230>)
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	089b      	lsrs	r3, r3, #2
 800a7f4:	3302      	adds	r3, #2
 800a7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	f003 0303 	and.w	r3, r3, #3
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	220f      	movs	r2, #15
 800a806:	fa02 f303 	lsl.w	r3, r2, r3
 800a80a:	43db      	mvns	r3, r3
 800a80c:	69ba      	ldr	r2, [r7, #24]
 800a80e:	4013      	ands	r3, r2
 800a810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a1d      	ldr	r2, [pc, #116]	; (800a88c <HAL_GPIO_Init+0x234>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d04a      	beq.n	800a8b0 <HAL_GPIO_Init+0x258>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a1c      	ldr	r2, [pc, #112]	; (800a890 <HAL_GPIO_Init+0x238>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d02b      	beq.n	800a87a <HAL_GPIO_Init+0x222>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a1b      	ldr	r2, [pc, #108]	; (800a894 <HAL_GPIO_Init+0x23c>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d025      	beq.n	800a876 <HAL_GPIO_Init+0x21e>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a1a      	ldr	r2, [pc, #104]	; (800a898 <HAL_GPIO_Init+0x240>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d01f      	beq.n	800a872 <HAL_GPIO_Init+0x21a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a19      	ldr	r2, [pc, #100]	; (800a89c <HAL_GPIO_Init+0x244>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d019      	beq.n	800a86e <HAL_GPIO_Init+0x216>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a18      	ldr	r2, [pc, #96]	; (800a8a0 <HAL_GPIO_Init+0x248>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d013      	beq.n	800a86a <HAL_GPIO_Init+0x212>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a17      	ldr	r2, [pc, #92]	; (800a8a4 <HAL_GPIO_Init+0x24c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d00d      	beq.n	800a866 <HAL_GPIO_Init+0x20e>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a16      	ldr	r2, [pc, #88]	; (800a8a8 <HAL_GPIO_Init+0x250>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d007      	beq.n	800a862 <HAL_GPIO_Init+0x20a>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a15      	ldr	r2, [pc, #84]	; (800a8ac <HAL_GPIO_Init+0x254>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d101      	bne.n	800a85e <HAL_GPIO_Init+0x206>
 800a85a:	2309      	movs	r3, #9
 800a85c:	e029      	b.n	800a8b2 <HAL_GPIO_Init+0x25a>
 800a85e:	230a      	movs	r3, #10
 800a860:	e027      	b.n	800a8b2 <HAL_GPIO_Init+0x25a>
 800a862:	2307      	movs	r3, #7
 800a864:	e025      	b.n	800a8b2 <HAL_GPIO_Init+0x25a>
 800a866:	2306      	movs	r3, #6
 800a868:	e023      	b.n	800a8b2 <HAL_GPIO_Init+0x25a>
 800a86a:	2305      	movs	r3, #5
 800a86c:	e021      	b.n	800a8b2 <HAL_GPIO_Init+0x25a>
 800a86e:	2304      	movs	r3, #4
 800a870:	e01f      	b.n	800a8b2 <HAL_GPIO_Init+0x25a>
 800a872:	2303      	movs	r3, #3
 800a874:	e01d      	b.n	800a8b2 <HAL_GPIO_Init+0x25a>
 800a876:	2302      	movs	r3, #2
 800a878:	e01b      	b.n	800a8b2 <HAL_GPIO_Init+0x25a>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e019      	b.n	800a8b2 <HAL_GPIO_Init+0x25a>
 800a87e:	bf00      	nop
 800a880:	58000080 	.word	0x58000080
 800a884:	58024400 	.word	0x58024400
 800a888:	58000400 	.word	0x58000400
 800a88c:	58020000 	.word	0x58020000
 800a890:	58020400 	.word	0x58020400
 800a894:	58020800 	.word	0x58020800
 800a898:	58020c00 	.word	0x58020c00
 800a89c:	58021000 	.word	0x58021000
 800a8a0:	58021400 	.word	0x58021400
 800a8a4:	58021800 	.word	0x58021800
 800a8a8:	58021c00 	.word	0x58021c00
 800a8ac:	58022400 	.word	0x58022400
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	69fa      	ldr	r2, [r7, #28]
 800a8b4:	f002 0203 	and.w	r2, r2, #3
 800a8b8:	0092      	lsls	r2, r2, #2
 800a8ba:	4093      	lsls	r3, r2
 800a8bc:	69ba      	ldr	r2, [r7, #24]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a8c2:	4938      	ldr	r1, [pc, #224]	; (800a9a4 <HAL_GPIO_Init+0x34c>)
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	089b      	lsrs	r3, r3, #2
 800a8c8:	3302      	adds	r3, #2
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a8d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	43db      	mvns	r3, r3
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	4013      	ands	r3, r2
 800a8e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a8f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a8fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	43db      	mvns	r3, r3
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	4013      	ands	r3, r2
 800a90e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a91c:	69ba      	ldr	r2, [r7, #24]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	4313      	orrs	r3, r2
 800a922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a924:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	43db      	mvns	r3, r3
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	4013      	ands	r3, r2
 800a93a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d003      	beq.n	800a950 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a948:	69ba      	ldr	r2, [r7, #24]
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	69ba      	ldr	r2, [r7, #24]
 800a954:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	43db      	mvns	r3, r3
 800a960:	69ba      	ldr	r2, [r7, #24]
 800a962:	4013      	ands	r3, r2
 800a964:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	4313      	orrs	r3, r2
 800a978:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	3301      	adds	r3, #1
 800a984:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	681a      	ldr	r2, [r3, #0]
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	fa22 f303 	lsr.w	r3, r2, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	f47f ae6b 	bne.w	800a66c <HAL_GPIO_Init+0x14>
  }
}
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	3724      	adds	r7, #36	; 0x24
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	58000400 	.word	0x58000400

0800a9a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b083      	sub	sp, #12
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	807b      	strh	r3, [r7, #2]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a9b8:	787b      	ldrb	r3, [r7, #1]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d003      	beq.n	800a9c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a9be:	887a      	ldrh	r2, [r7, #2]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a9c4:	e003      	b.n	800a9ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a9c6:	887b      	ldrh	r3, [r7, #2]
 800a9c8:	041a      	lsls	r2, r3, #16
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	619a      	str	r2, [r3, #24]
}
 800a9ce:	bf00      	nop
 800a9d0:	370c      	adds	r7, #12
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b085      	sub	sp, #20
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a9ec:	887a      	ldrh	r2, [r7, #2]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	041a      	lsls	r2, r3, #16
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	43d9      	mvns	r1, r3
 800a9f8:	887b      	ldrh	r3, [r7, #2]
 800a9fa:	400b      	ands	r3, r1
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	619a      	str	r2, [r3, #24]
}
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
	...

0800aa10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d101      	bne.n	800aa22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e07f      	b.n	800ab22 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d106      	bne.n	800aa3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f7f7 f89c 	bl	8001b74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2224      	movs	r2, #36	; 0x24
 800aa40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f022 0201 	bic.w	r2, r2, #1
 800aa52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800aa60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689a      	ldr	r2, [r3, #8]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68db      	ldr	r3, [r3, #12]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d107      	bne.n	800aa8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa86:	609a      	str	r2, [r3, #8]
 800aa88:	e006      	b.n	800aa98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	689a      	ldr	r2, [r3, #8]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800aa96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d104      	bne.n	800aaaa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aaa8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	6859      	ldr	r1, [r3, #4]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	4b1d      	ldr	r3, [pc, #116]	; (800ab2c <HAL_I2C_Init+0x11c>)
 800aab6:	430b      	orrs	r3, r1
 800aab8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	68da      	ldr	r2, [r3, #12]
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aac8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	691a      	ldr	r2, [r3, #16]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	695b      	ldr	r3, [r3, #20]
 800aad2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	69d9      	ldr	r1, [r3, #28]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a1a      	ldr	r2, [r3, #32]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	430a      	orrs	r2, r1
 800aaf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f042 0201 	orr.w	r2, r2, #1
 800ab02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2220      	movs	r2, #32
 800ab0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2200      	movs	r2, #0
 800ab16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3708      	adds	r7, #8
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}
 800ab2a:	bf00      	nop
 800ab2c:	02008000 	.word	0x02008000

0800ab30 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	4608      	mov	r0, r1
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4603      	mov	r3, r0
 800ab40:	817b      	strh	r3, [r7, #10]
 800ab42:	460b      	mov	r3, r1
 800ab44:	813b      	strh	r3, [r7, #8]
 800ab46:	4613      	mov	r3, r2
 800ab48:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b20      	cmp	r3, #32
 800ab54:	d176      	bne.n	800ac44 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab56:	6a3b      	ldr	r3, [r7, #32]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <HAL_I2C_Mem_Read_IT+0x32>
 800ab5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d105      	bne.n	800ab6e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab68:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	e06b      	b.n	800ac46 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab7c:	d101      	bne.n	800ab82 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800ab7e:	2302      	movs	r3, #2
 800ab80:	e061      	b.n	800ac46 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d101      	bne.n	800ab90 <HAL_I2C_Mem_Read_IT+0x60>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e05a      	b.n	800ac46 <HAL_I2C_Mem_Read_IT+0x116>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ab98:	f7fa fea0 	bl	80058dc <HAL_GetTick>
 800ab9c:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2222      	movs	r2, #34	; 0x22
 800aba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2240      	movs	r2, #64	; 0x40
 800abaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6a3a      	ldr	r2, [r7, #32]
 800abb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800abbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	4a23      	ldr	r2, [pc, #140]	; (800ac50 <HAL_I2C_Mem_Read_IT+0x120>)
 800abc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	4a22      	ldr	r2, [pc, #136]	; (800ac54 <HAL_I2C_Mem_Read_IT+0x124>)
 800abca:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	2bff      	cmp	r3, #255	; 0xff
 800abd4:	d906      	bls.n	800abe4 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	22ff      	movs	r2, #255	; 0xff
 800abda:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800abdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800abe0:	617b      	str	r3, [r7, #20]
 800abe2:	e007      	b.n	800abf4 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abe8:	b29a      	uxth	r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800abee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800abf2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800abf4:	88f8      	ldrh	r0, [r7, #6]
 800abf6:	893a      	ldrh	r2, [r7, #8]
 800abf8:	8979      	ldrh	r1, [r7, #10]
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	9301      	str	r3, [sp, #4]
 800abfe:	2319      	movs	r3, #25
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	4603      	mov	r3, r0
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 fdf3 	bl	800b7f0 <I2C_RequestMemoryRead>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e014      	b.n	800ac46 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	8979      	ldrh	r1, [r7, #10]
 800ac24:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <HAL_I2C_Mem_Read_IT+0x128>)
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	68f8      	ldr	r0, [r7, #12]
 800ac2c:	f001 fd12 	bl	800c654 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ac38:	2102      	movs	r1, #2
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f001 fd3c 	bl	800c6b8 <I2C_Enable_IRQ>

    return HAL_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	e000      	b.n	800ac46 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800ac44:	2302      	movs	r3, #2
  }
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3718      	adds	r7, #24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	ffff0000 	.word	0xffff0000
 800ac54:	0800adef 	.word	0x0800adef
 800ac58:	80002400 	.word	0x80002400

0800ac5c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	699b      	ldr	r3, [r3, #24]
 800ac6a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	0a1b      	lsrs	r3, r3, #8
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d010      	beq.n	800aca2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	09db      	lsrs	r3, r3, #7
 800ac84:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00a      	beq.n	800aca2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac90:	f043 0201 	orr.w	r2, r3, #1
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aca0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	0a9b      	lsrs	r3, r3, #10
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d010      	beq.n	800acd0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	09db      	lsrs	r3, r3, #7
 800acb2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00a      	beq.n	800acd0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acbe:	f043 0208 	orr.w	r2, r3, #8
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	0a5b      	lsrs	r3, r3, #9
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d010      	beq.n	800acfe <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	09db      	lsrs	r3, r3, #7
 800ace0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00a      	beq.n	800acfe <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acec:	f043 0202 	orr.w	r2, r3, #2
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800acfc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f003 030b 	and.w	r3, r3, #11
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800ad0e:	68f9      	ldr	r1, [r7, #12]
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f001 f9f9 	bl	800c108 <I2C_ITError>
  }
}
 800ad16:	bf00      	nop
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b083      	sub	sp, #12
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800ad26:	bf00      	nop
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b083      	sub	sp, #12
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ad3a:	bf00      	nop
 800ad3c:	370c      	adds	r7, #12
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr

0800ad46 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad46:	b480      	push	{r7}
 800ad48:	b083      	sub	sp, #12
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ad4e:	bf00      	nop
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b083      	sub	sp, #12
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ad62:	bf00      	nop
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b083      	sub	sp, #12
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	460b      	mov	r3, r1
 800ad78:	70fb      	strb	r3, [r7, #3]
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ad7e:	bf00      	nop
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b083      	sub	sp, #12
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800ad92:	bf00      	nop
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ada6:	bf00      	nop
 800ada8:	370c      	adds	r7, #12
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b083      	sub	sp, #12
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800adba:	bf00      	nop
 800adbc:	370c      	adds	r7, #12
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800adc6:	b480      	push	{r7}
 800adc8:	b083      	sub	sp, #12
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800adce:	bf00      	nop
 800add0:	370c      	adds	r7, #12
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800adda:	b480      	push	{r7}
 800addc:	b083      	sub	sp, #12
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ade2:	bf00      	nop
 800ade4:	370c      	adds	r7, #12
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b088      	sub	sp, #32
 800adf2:	af02      	add	r7, sp, #8
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d101      	bne.n	800ae0c <I2C_Master_ISR_IT+0x1e>
 800ae08:	2302      	movs	r3, #2
 800ae0a:	e114      	b.n	800b036 <I2C_Master_ISR_IT+0x248>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	091b      	lsrs	r3, r3, #4
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d013      	beq.n	800ae48 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	091b      	lsrs	r3, r3, #4
 800ae24:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00d      	beq.n	800ae48 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2210      	movs	r2, #16
 800ae32:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae38:	f043 0204 	orr.w	r2, r3, #4
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f001 fa58 	bl	800c2f6 <I2C_Flush_TXDR>
 800ae46:	e0e1      	b.n	800b00c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	089b      	lsrs	r3, r3, #2
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d023      	beq.n	800ae9c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	089b      	lsrs	r3, r3, #2
 800ae58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d01d      	beq.n	800ae9c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	f023 0304 	bic.w	r3, r3, #4
 800ae66:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae72:	b2d2      	uxtb	r2, r2
 800ae74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7a:	1c5a      	adds	r2, r3, #1
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae84:	3b01      	subs	r3, #1
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	3b01      	subs	r3, #1
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ae9a:	e0b7      	b.n	800b00c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	085b      	lsrs	r3, r3, #1
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d01e      	beq.n	800aee6 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	085b      	lsrs	r3, r3, #1
 800aeac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d018      	beq.n	800aee6 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb8:	781a      	ldrb	r2, [r3, #0]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	1c5a      	adds	r2, r3, #1
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aece:	3b01      	subs	r3, #1
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	3b01      	subs	r3, #1
 800aede:	b29a      	uxth	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aee4:	e092      	b.n	800b00c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	09db      	lsrs	r3, r3, #7
 800aeea:	f003 0301 	and.w	r3, r3, #1
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d05d      	beq.n	800afae <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	099b      	lsrs	r3, r3, #6
 800aef6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d057      	beq.n	800afae <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af02:	b29b      	uxth	r3, r3
 800af04:	2b00      	cmp	r3, #0
 800af06:	d040      	beq.n	800af8a <I2C_Master_ISR_IT+0x19c>
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d13c      	bne.n	800af8a <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	b29b      	uxth	r3, r3
 800af18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af1c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af22:	b29b      	uxth	r3, r3
 800af24:	2bff      	cmp	r3, #255	; 0xff
 800af26:	d90e      	bls.n	800af46 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	22ff      	movs	r2, #255	; 0xff
 800af2c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af32:	b2da      	uxtb	r2, r3
 800af34:	8a79      	ldrh	r1, [r7, #18]
 800af36:	2300      	movs	r3, #0
 800af38:	9300      	str	r3, [sp, #0]
 800af3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f001 fb88 	bl	800c654 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af44:	e032      	b.n	800afac <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af54:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af58:	d00b      	beq.n	800af72 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af5e:	b2da      	uxtb	r2, r3
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	8a79      	ldrh	r1, [r7, #18]
 800af66:	2000      	movs	r0, #0
 800af68:	9000      	str	r0, [sp, #0]
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f001 fb72 	bl	800c654 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af70:	e01c      	b.n	800afac <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af76:	b2da      	uxtb	r2, r3
 800af78:	8a79      	ldrh	r1, [r7, #18]
 800af7a:	2300      	movs	r3, #0
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f001 fb66 	bl	800c654 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af88:	e010      	b.n	800afac <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af98:	d003      	beq.n	800afa2 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f000 fd00 	bl	800b9a0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afa0:	e034      	b.n	800b00c <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800afa2:	2140      	movs	r1, #64	; 0x40
 800afa4:	68f8      	ldr	r0, [r7, #12]
 800afa6:	f001 f8af 	bl	800c108 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800afaa:	e02f      	b.n	800b00c <I2C_Master_ISR_IT+0x21e>
 800afac:	e02e      	b.n	800b00c <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	099b      	lsrs	r3, r3, #6
 800afb2:	f003 0301 	and.w	r3, r3, #1
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d028      	beq.n	800b00c <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	099b      	lsrs	r3, r3, #6
 800afbe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d022      	beq.n	800b00c <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afca:	b29b      	uxth	r3, r3
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d119      	bne.n	800b004 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afda:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afde:	d015      	beq.n	800b00c <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800afe8:	d108      	bne.n	800affc <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aff8:	605a      	str	r2, [r3, #4]
 800affa:	e007      	b.n	800b00c <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 fccf 	bl	800b9a0 <I2C_ITMasterSeqCplt>
 800b002:	e003      	b.n	800b00c <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b004:	2140      	movs	r1, #64	; 0x40
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f001 f87e 	bl	800c108 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	095b      	lsrs	r3, r3, #5
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d009      	beq.n	800b02c <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	095b      	lsrs	r3, r3, #5
 800b01c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b020:	2b00      	cmp	r3, #0
 800b022:	d003      	beq.n	800b02c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800b024:	6979      	ldr	r1, [r7, #20]
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f000 fd56 	bl	800bad8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3718      	adds	r7, #24
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b086      	sub	sp, #24
 800b042:	af00      	add	r7, sp, #0
 800b044:	60f8      	str	r0, [r7, #12]
 800b046:	60b9      	str	r1, [r7, #8]
 800b048:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b04e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d101      	bne.n	800b062 <I2C_Slave_ISR_IT+0x24>
 800b05e:	2302      	movs	r3, #2
 800b060:	e0ec      	b.n	800b23c <I2C_Slave_ISR_IT+0x1fe>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	2201      	movs	r2, #1
 800b066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	095b      	lsrs	r3, r3, #5
 800b06e:	f003 0301 	and.w	r3, r3, #1
 800b072:	2b00      	cmp	r3, #0
 800b074:	d009      	beq.n	800b08a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	095b      	lsrs	r3, r3, #5
 800b07a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d003      	beq.n	800b08a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b082:	6939      	ldr	r1, [r7, #16]
 800b084:	68f8      	ldr	r0, [r7, #12]
 800b086:	f000 fdf1 	bl	800bc6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b08a:	693b      	ldr	r3, [r7, #16]
 800b08c:	091b      	lsrs	r3, r3, #4
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	2b00      	cmp	r3, #0
 800b094:	d04d      	beq.n	800b132 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	091b      	lsrs	r3, r3, #4
 800b09a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d047      	beq.n	800b132 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d128      	bne.n	800b0fe <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	2b28      	cmp	r3, #40	; 0x28
 800b0b6:	d108      	bne.n	800b0ca <I2C_Slave_ISR_IT+0x8c>
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0be:	d104      	bne.n	800b0ca <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800b0c0:	6939      	ldr	r1, [r7, #16]
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f000 ffca 	bl	800c05c <I2C_ITListenCplt>
 800b0c8:	e032      	b.n	800b130 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b29      	cmp	r3, #41	; 0x29
 800b0d4:	d10e      	bne.n	800b0f4 <I2C_Slave_ISR_IT+0xb6>
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b0dc:	d00a      	beq.n	800b0f4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2210      	movs	r2, #16
 800b0e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f001 f905 	bl	800c2f6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 fc94 	bl	800ba1a <I2C_ITSlaveSeqCplt>
 800b0f2:	e01d      	b.n	800b130 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2210      	movs	r2, #16
 800b0fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800b0fc:	e096      	b.n	800b22c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	2210      	movs	r2, #16
 800b104:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10a:	f043 0204 	orr.w	r2, r3, #4
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d004      	beq.n	800b122 <I2C_Slave_ISR_IT+0xe4>
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b11e:	f040 8085 	bne.w	800b22c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b126:	4619      	mov	r1, r3
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	f000 ffed 	bl	800c108 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b12e:	e07d      	b.n	800b22c <I2C_Slave_ISR_IT+0x1ee>
 800b130:	e07c      	b.n	800b22c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	089b      	lsrs	r3, r3, #2
 800b136:	f003 0301 	and.w	r3, r3, #1
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d030      	beq.n	800b1a0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	089b      	lsrs	r3, r3, #2
 800b142:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b146:	2b00      	cmp	r3, #0
 800b148:	d02a      	beq.n	800b1a0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b14e:	b29b      	uxth	r3, r3
 800b150:	2b00      	cmp	r3, #0
 800b152:	d018      	beq.n	800b186 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15e:	b2d2      	uxtb	r2, r2
 800b160:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b166:	1c5a      	adds	r2, r3, #1
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b170:	3b01      	subs	r3, #1
 800b172:	b29a      	uxth	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	3b01      	subs	r3, #1
 800b180:	b29a      	uxth	r2, r3
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b18a:	b29b      	uxth	r3, r3
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d14f      	bne.n	800b230 <I2C_Slave_ISR_IT+0x1f2>
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b196:	d04b      	beq.n	800b230 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 fc3e 	bl	800ba1a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800b19e:	e047      	b.n	800b230 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	08db      	lsrs	r3, r3, #3
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00a      	beq.n	800b1c2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	08db      	lsrs	r3, r3, #3
 800b1b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d004      	beq.n	800b1c2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800b1b8:	6939      	ldr	r1, [r7, #16]
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	f000 fb6c 	bl	800b898 <I2C_ITAddrCplt>
 800b1c0:	e037      	b.n	800b232 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	085b      	lsrs	r3, r3, #1
 800b1c6:	f003 0301 	and.w	r3, r3, #1
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d031      	beq.n	800b232 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	085b      	lsrs	r3, r3, #1
 800b1d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d02b      	beq.n	800b232 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d018      	beq.n	800b216 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	781a      	ldrb	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	3b01      	subs	r3, #1
 800b202:	b29a      	uxth	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b20c:	3b01      	subs	r3, #1
 800b20e:	b29a      	uxth	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	851a      	strh	r2, [r3, #40]	; 0x28
 800b214:	e00d      	b.n	800b232 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b21c:	d002      	beq.n	800b224 <I2C_Slave_ISR_IT+0x1e6>
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d106      	bne.n	800b232 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 fbf8 	bl	800ba1a <I2C_ITSlaveSeqCplt>
 800b22a:	e002      	b.n	800b232 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800b22c:	bf00      	nop
 800b22e:	e000      	b.n	800b232 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800b230:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af02      	add	r7, sp, #8
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b256:	2b01      	cmp	r3, #1
 800b258:	d101      	bne.n	800b25e <I2C_Master_ISR_DMA+0x1a>
 800b25a:	2302      	movs	r3, #2
 800b25c:	e0e1      	b.n	800b422 <I2C_Master_ISR_DMA+0x1de>
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2201      	movs	r2, #1
 800b262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	091b      	lsrs	r3, r3, #4
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d017      	beq.n	800b2a2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	091b      	lsrs	r3, r3, #4
 800b276:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d011      	beq.n	800b2a2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2210      	movs	r2, #16
 800b284:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b28a:	f043 0204 	orr.w	r2, r3, #4
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b292:	2120      	movs	r1, #32
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f001 fa0f 	bl	800c6b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f001 f82b 	bl	800c2f6 <I2C_Flush_TXDR>
 800b2a0:	e0ba      	b.n	800b418 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	09db      	lsrs	r3, r3, #7
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d072      	beq.n	800b394 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	099b      	lsrs	r3, r3, #6
 800b2b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d06c      	beq.n	800b394 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b2c8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d04e      	beq.n	800b372 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2e0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	2bff      	cmp	r3, #255	; 0xff
 800b2ea:	d906      	bls.n	800b2fa <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	22ff      	movs	r2, #255	; 0xff
 800b2f0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800b2f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2f6:	617b      	str	r3, [r7, #20]
 800b2f8:	e010      	b.n	800b31c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b30c:	d003      	beq.n	800b316 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b312:	617b      	str	r3, [r7, #20]
 800b314:	e002      	b.n	800b31c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800b316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b31a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b320:	b2da      	uxtb	r2, r3
 800b322:	8a79      	ldrh	r1, [r7, #18]
 800b324:	2300      	movs	r3, #0
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f001 f992 	bl	800c654 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b334:	b29a      	uxth	r2, r3
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b33a:	1ad3      	subs	r3, r2, r3
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b22      	cmp	r3, #34	; 0x22
 800b34c:	d108      	bne.n	800b360 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b35c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b35e:	e05b      	b.n	800b418 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b36e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b370:	e052      	b.n	800b418 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b37c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b380:	d003      	beq.n	800b38a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f000 fb0c 	bl	800b9a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b388:	e046      	b.n	800b418 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b38a:	2140      	movs	r1, #64	; 0x40
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 febb 	bl	800c108 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b392:	e041      	b.n	800b418 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	099b      	lsrs	r3, r3, #6
 800b398:	f003 0301 	and.w	r3, r3, #1
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d029      	beq.n	800b3f4 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	099b      	lsrs	r3, r3, #6
 800b3a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d023      	beq.n	800b3f4 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d119      	bne.n	800b3ea <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3c4:	d027      	beq.n	800b416 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b3ce:	d108      	bne.n	800b3e2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b3de:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b3e0:	e019      	b.n	800b416 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 fadc 	bl	800b9a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b3e8:	e015      	b.n	800b416 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b3ea:	2140      	movs	r1, #64	; 0x40
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f000 fe8b 	bl	800c108 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b3f2:	e010      	b.n	800b416 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	095b      	lsrs	r3, r3, #5
 800b3f8:	f003 0301 	and.w	r3, r3, #1
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00b      	beq.n	800b418 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	095b      	lsrs	r3, r3, #5
 800b404:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d005      	beq.n	800b418 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b40c:	68b9      	ldr	r1, [r7, #8]
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f000 fb62 	bl	800bad8 <I2C_ITMasterCplt>
 800b414:	e000      	b.n	800b418 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800b416:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3718      	adds	r7, #24
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
	...

0800b42c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b088      	sub	sp, #32
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b43c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d101      	bne.n	800b450 <I2C_Slave_ISR_DMA+0x24>
 800b44c:	2302      	movs	r3, #2
 800b44e:	e1ca      	b.n	800b7e6 <I2C_Slave_ISR_DMA+0x3ba>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	095b      	lsrs	r3, r3, #5
 800b45c:	f003 0301 	and.w	r3, r3, #1
 800b460:	2b00      	cmp	r3, #0
 800b462:	d009      	beq.n	800b478 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	095b      	lsrs	r3, r3, #5
 800b468:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d003      	beq.n	800b478 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b470:	68b9      	ldr	r1, [r7, #8]
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f000 fbfa 	bl	800bc6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	091b      	lsrs	r3, r3, #4
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 819b 	beq.w	800b7bc <I2C_Slave_ISR_DMA+0x390>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	091b      	lsrs	r3, r3, #4
 800b48a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 8194 	beq.w	800b7bc <I2C_Slave_ISR_DMA+0x390>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	0b9b      	lsrs	r3, r3, #14
 800b498:	f003 0301 	and.w	r3, r3, #1
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	0bdb      	lsrs	r3, r3, #15
 800b4a4:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f000 8180 	beq.w	800b7ae <I2C_Slave_ISR_DMA+0x382>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d07c      	beq.n	800b5b0 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	0bdb      	lsrs	r3, r3, #15
 800b4ba:	f003 0301 	and.w	r3, r3, #1
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d076      	beq.n	800b5b0 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a74      	ldr	r2, [pc, #464]	; (800b69c <I2C_Slave_ISR_DMA+0x270>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d059      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a72      	ldr	r2, [pc, #456]	; (800b6a0 <I2C_Slave_ISR_DMA+0x274>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d053      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a70      	ldr	r2, [pc, #448]	; (800b6a4 <I2C_Slave_ISR_DMA+0x278>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d04d      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a6e      	ldr	r2, [pc, #440]	; (800b6a8 <I2C_Slave_ISR_DMA+0x27c>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d047      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a6c      	ldr	r2, [pc, #432]	; (800b6ac <I2C_Slave_ISR_DMA+0x280>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d041      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a6a      	ldr	r2, [pc, #424]	; (800b6b0 <I2C_Slave_ISR_DMA+0x284>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d03b      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a68      	ldr	r2, [pc, #416]	; (800b6b4 <I2C_Slave_ISR_DMA+0x288>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d035      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a66      	ldr	r2, [pc, #408]	; (800b6b8 <I2C_Slave_ISR_DMA+0x28c>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d02f      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a64      	ldr	r2, [pc, #400]	; (800b6bc <I2C_Slave_ISR_DMA+0x290>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d029      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a62      	ldr	r2, [pc, #392]	; (800b6c0 <I2C_Slave_ISR_DMA+0x294>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d023      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a60      	ldr	r2, [pc, #384]	; (800b6c4 <I2C_Slave_ISR_DMA+0x298>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d01d      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a5e      	ldr	r2, [pc, #376]	; (800b6c8 <I2C_Slave_ISR_DMA+0x29c>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d017      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a5c      	ldr	r2, [pc, #368]	; (800b6cc <I2C_Slave_ISR_DMA+0x2a0>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d011      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a5a      	ldr	r2, [pc, #360]	; (800b6d0 <I2C_Slave_ISR_DMA+0x2a4>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d00b      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	4a58      	ldr	r2, [pc, #352]	; (800b6d4 <I2C_Slave_ISR_DMA+0x2a8>)
 800b572:	4293      	cmp	r3, r2
 800b574:	d005      	beq.n	800b582 <I2C_Slave_ISR_DMA+0x156>
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a56      	ldr	r2, [pc, #344]	; (800b6d8 <I2C_Slave_ISR_DMA+0x2ac>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d109      	bne.n	800b596 <I2C_Slave_ISR_DMA+0x16a>
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	bf0c      	ite	eq
 800b58e:	2301      	moveq	r3, #1
 800b590:	2300      	movne	r3, #0
 800b592:	b2db      	uxtb	r3, r3
 800b594:	e008      	b.n	800b5a8 <I2C_Slave_ISR_DMA+0x17c>
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	bf0c      	ite	eq
 800b5a2:	2301      	moveq	r3, #1
 800b5a4:	2300      	movne	r3, #0
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f000 809e 	beq.w	800b6f6 <I2C_Slave_ISR_DMA+0x2ca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	0b9b      	lsrs	r3, r3, #14
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f000 8097 	beq.w	800b6f6 <I2C_Slave_ISR_DMA+0x2ca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a33      	ldr	r2, [pc, #204]	; (800b69c <I2C_Slave_ISR_DMA+0x270>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d059      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a31      	ldr	r2, [pc, #196]	; (800b6a0 <I2C_Slave_ISR_DMA+0x274>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d053      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a2f      	ldr	r2, [pc, #188]	; (800b6a4 <I2C_Slave_ISR_DMA+0x278>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d04d      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a2d      	ldr	r2, [pc, #180]	; (800b6a8 <I2C_Slave_ISR_DMA+0x27c>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d047      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a2b      	ldr	r2, [pc, #172]	; (800b6ac <I2C_Slave_ISR_DMA+0x280>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d041      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a29      	ldr	r2, [pc, #164]	; (800b6b0 <I2C_Slave_ISR_DMA+0x284>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d03b      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a27      	ldr	r2, [pc, #156]	; (800b6b4 <I2C_Slave_ISR_DMA+0x288>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d035      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a25      	ldr	r2, [pc, #148]	; (800b6b8 <I2C_Slave_ISR_DMA+0x28c>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d02f      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a23      	ldr	r2, [pc, #140]	; (800b6bc <I2C_Slave_ISR_DMA+0x290>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d029      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a21      	ldr	r2, [pc, #132]	; (800b6c0 <I2C_Slave_ISR_DMA+0x294>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d023      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a1f      	ldr	r2, [pc, #124]	; (800b6c4 <I2C_Slave_ISR_DMA+0x298>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d01d      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a1d      	ldr	r2, [pc, #116]	; (800b6c8 <I2C_Slave_ISR_DMA+0x29c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d017      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a1b      	ldr	r2, [pc, #108]	; (800b6cc <I2C_Slave_ISR_DMA+0x2a0>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d011      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a19      	ldr	r2, [pc, #100]	; (800b6d0 <I2C_Slave_ISR_DMA+0x2a4>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d00b      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a17      	ldr	r2, [pc, #92]	; (800b6d4 <I2C_Slave_ISR_DMA+0x2a8>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d005      	beq.n	800b688 <I2C_Slave_ISR_DMA+0x25c>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a15      	ldr	r2, [pc, #84]	; (800b6d8 <I2C_Slave_ISR_DMA+0x2ac>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d129      	bne.n	800b6dc <I2C_Slave_ISR_DMA+0x2b0>
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	2b00      	cmp	r3, #0
 800b692:	bf0c      	ite	eq
 800b694:	2301      	moveq	r3, #1
 800b696:	2300      	movne	r3, #0
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	e028      	b.n	800b6ee <I2C_Slave_ISR_DMA+0x2c2>
 800b69c:	40020010 	.word	0x40020010
 800b6a0:	40020028 	.word	0x40020028
 800b6a4:	40020040 	.word	0x40020040
 800b6a8:	40020058 	.word	0x40020058
 800b6ac:	40020070 	.word	0x40020070
 800b6b0:	40020088 	.word	0x40020088
 800b6b4:	400200a0 	.word	0x400200a0
 800b6b8:	400200b8 	.word	0x400200b8
 800b6bc:	40020410 	.word	0x40020410
 800b6c0:	40020428 	.word	0x40020428
 800b6c4:	40020440 	.word	0x40020440
 800b6c8:	40020458 	.word	0x40020458
 800b6cc:	40020470 	.word	0x40020470
 800b6d0:	40020488 	.word	0x40020488
 800b6d4:	400204a0 	.word	0x400204a0
 800b6d8:	400204b8 	.word	0x400204b8
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	bf0c      	ite	eq
 800b6e8:	2301      	moveq	r3, #1
 800b6ea:	2300      	movne	r3, #0
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d001      	beq.n	800b6f6 <I2C_Slave_ISR_DMA+0x2ca>
          {
            treatdmanack = 1U;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d128      	bne.n	800b74e <I2C_Slave_ISR_DMA+0x322>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b28      	cmp	r3, #40	; 0x28
 800b706:	d108      	bne.n	800b71a <I2C_Slave_ISR_DMA+0x2ee>
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b70e:	d104      	bne.n	800b71a <I2C_Slave_ISR_DMA+0x2ee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b710:	68b9      	ldr	r1, [r7, #8]
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f000 fca2 	bl	800c05c <I2C_ITListenCplt>
 800b718:	e048      	b.n	800b7ac <I2C_Slave_ISR_DMA+0x380>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b29      	cmp	r3, #41	; 0x29
 800b724:	d10e      	bne.n	800b744 <I2C_Slave_ISR_DMA+0x318>
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b72c:	d00a      	beq.n	800b744 <I2C_Slave_ISR_DMA+0x318>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	2210      	movs	r2, #16
 800b734:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 fddd 	bl	800c2f6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f000 f96c 	bl	800ba1a <I2C_ITSlaveSeqCplt>
 800b742:	e033      	b.n	800b7ac <I2C_Slave_ISR_DMA+0x380>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2210      	movs	r2, #16
 800b74a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b74c:	e034      	b.n	800b7b8 <I2C_Slave_ISR_DMA+0x38c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2210      	movs	r2, #16
 800b754:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b75a:	f043 0204 	orr.w	r2, r3, #4
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b768:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d003      	beq.n	800b778 <I2C_Slave_ISR_DMA+0x34c>
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b776:	d11f      	bne.n	800b7b8 <I2C_Slave_ISR_DMA+0x38c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b778:	7dfb      	ldrb	r3, [r7, #23]
 800b77a:	2b21      	cmp	r3, #33	; 0x21
 800b77c:	d002      	beq.n	800b784 <I2C_Slave_ISR_DMA+0x358>
 800b77e:	7dfb      	ldrb	r3, [r7, #23]
 800b780:	2b29      	cmp	r3, #41	; 0x29
 800b782:	d103      	bne.n	800b78c <I2C_Slave_ISR_DMA+0x360>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2221      	movs	r2, #33	; 0x21
 800b788:	631a      	str	r2, [r3, #48]	; 0x30
 800b78a:	e008      	b.n	800b79e <I2C_Slave_ISR_DMA+0x372>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b78c:	7dfb      	ldrb	r3, [r7, #23]
 800b78e:	2b22      	cmp	r3, #34	; 0x22
 800b790:	d002      	beq.n	800b798 <I2C_Slave_ISR_DMA+0x36c>
 800b792:	7dfb      	ldrb	r3, [r7, #23]
 800b794:	2b2a      	cmp	r3, #42	; 0x2a
 800b796:	d102      	bne.n	800b79e <I2C_Slave_ISR_DMA+0x372>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2222      	movs	r2, #34	; 0x22
 800b79c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f000 fcaf 	bl	800c108 <I2C_ITError>
      if (treatdmanack == 1U)
 800b7aa:	e005      	b.n	800b7b8 <I2C_Slave_ISR_DMA+0x38c>
 800b7ac:	e004      	b.n	800b7b8 <I2C_Slave_ISR_DMA+0x38c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2210      	movs	r2, #16
 800b7b4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b7b6:	e011      	b.n	800b7dc <I2C_Slave_ISR_DMA+0x3b0>
      if (treatdmanack == 1U)
 800b7b8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b7ba:	e00f      	b.n	800b7dc <I2C_Slave_ISR_DMA+0x3b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	08db      	lsrs	r3, r3, #3
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d009      	beq.n	800b7dc <I2C_Slave_ISR_DMA+0x3b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	08db      	lsrs	r3, r3, #3
 800b7cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d003      	beq.n	800b7dc <I2C_Slave_ISR_DMA+0x3b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b7d4:	68b9      	ldr	r1, [r7, #8]
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f000 f85e 	bl	800b898 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b7e4:	2300      	movs	r3, #0
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3720      	adds	r7, #32
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop

0800b7f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af02      	add	r7, sp, #8
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	4608      	mov	r0, r1
 800b7fa:	4611      	mov	r1, r2
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	4603      	mov	r3, r0
 800b800:	817b      	strh	r3, [r7, #10]
 800b802:	460b      	mov	r3, r1
 800b804:	813b      	strh	r3, [r7, #8]
 800b806:	4613      	mov	r3, r2
 800b808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b80a:	88fb      	ldrh	r3, [r7, #6]
 800b80c:	b2da      	uxtb	r2, r3
 800b80e:	8979      	ldrh	r1, [r7, #10]
 800b810:	4b20      	ldr	r3, [pc, #128]	; (800b894 <I2C_RequestMemoryRead+0xa4>)
 800b812:	9300      	str	r3, [sp, #0]
 800b814:	2300      	movs	r3, #0
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 ff1c 	bl	800c654 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b81c:	69fa      	ldr	r2, [r7, #28]
 800b81e:	69b9      	ldr	r1, [r7, #24]
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f000 fdea 	bl	800c3fa <I2C_WaitOnTXISFlagUntilTimeout>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d001      	beq.n	800b830 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e02c      	b.n	800b88a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b830:	88fb      	ldrh	r3, [r7, #6]
 800b832:	2b01      	cmp	r3, #1
 800b834:	d105      	bne.n	800b842 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b836:	893b      	ldrh	r3, [r7, #8]
 800b838:	b2da      	uxtb	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	629a      	str	r2, [r3, #40]	; 0x28
 800b840:	e015      	b.n	800b86e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b842:	893b      	ldrh	r3, [r7, #8]
 800b844:	0a1b      	lsrs	r3, r3, #8
 800b846:	b29b      	uxth	r3, r3
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b850:	69fa      	ldr	r2, [r7, #28]
 800b852:	69b9      	ldr	r1, [r7, #24]
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f000 fdd0 	bl	800c3fa <I2C_WaitOnTXISFlagUntilTimeout>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d001      	beq.n	800b864 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e012      	b.n	800b88a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b864:	893b      	ldrh	r3, [r7, #8]
 800b866:	b2da      	uxtb	r2, r3
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	2200      	movs	r2, #0
 800b876:	2140      	movs	r1, #64	; 0x40
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f000 fd7e 	bl	800c37a <I2C_WaitOnFlagUntilTimeout>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e000      	b.n	800b88a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	80002000 	.word	0x80002000

0800b898 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b8ae:	2b28      	cmp	r3, #40	; 0x28
 800b8b0:	d16a      	bne.n	800b988 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	0c1b      	lsrs	r3, r3, #16
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	f003 0301 	and.w	r3, r3, #1
 800b8c0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	699b      	ldr	r3, [r3, #24]
 800b8c8:	0c1b      	lsrs	r3, r3, #16
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b8d0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8de:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b8ec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d138      	bne.n	800b968 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b8f6:	897b      	ldrh	r3, [r7, #10]
 800b8f8:	09db      	lsrs	r3, r3, #7
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	89bb      	ldrh	r3, [r7, #12]
 800b8fe:	4053      	eors	r3, r2
 800b900:	b29b      	uxth	r3, r3
 800b902:	f003 0306 	and.w	r3, r3, #6
 800b906:	2b00      	cmp	r3, #0
 800b908:	d11c      	bne.n	800b944 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800b90a:	897b      	ldrh	r3, [r7, #10]
 800b90c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b912:	1c5a      	adds	r2, r3, #1
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d13b      	bne.n	800b998 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2208      	movs	r2, #8
 800b92c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b936:	89ba      	ldrh	r2, [r7, #12]
 800b938:	7bfb      	ldrb	r3, [r7, #15]
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7ff fa16 	bl	800ad6e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b942:	e029      	b.n	800b998 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800b944:	893b      	ldrh	r3, [r7, #8]
 800b946:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 ff17 	bl	800c780 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b95a:	89ba      	ldrh	r2, [r7, #12]
 800b95c:	7bfb      	ldrb	r3, [r7, #15]
 800b95e:	4619      	mov	r1, r3
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f7ff fa04 	bl	800ad6e <HAL_I2C_AddrCallback>
}
 800b966:	e017      	b.n	800b998 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 ff07 	bl	800c780 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b97a:	89ba      	ldrh	r2, [r7, #12]
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	4619      	mov	r1, r3
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7ff f9f4 	bl	800ad6e <HAL_I2C_AddrCallback>
}
 800b986:	e007      	b.n	800b998 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2208      	movs	r2, #8
 800b98e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2200      	movs	r2, #0
 800b994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800b998:	bf00      	nop
 800b99a:	3710      	adds	r7, #16
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b21      	cmp	r3, #33	; 0x21
 800b9ba:	d115      	bne.n	800b9e8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2220      	movs	r2, #32
 800b9c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2211      	movs	r2, #17
 800b9c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fed4 	bl	800c780 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff f99c 	bl	800ad1e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b9e6:	e014      	b.n	800ba12 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2220      	movs	r2, #32
 800b9ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2212      	movs	r2, #18
 800b9f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b9fc:	2102      	movs	r1, #2
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 febe 	bl	800c780 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2200      	movs	r2, #0
 800ba08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f7ff f990 	bl	800ad32 <HAL_I2C_MasterRxCpltCallback>
}
 800ba12:	bf00      	nop
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	0b9b      	lsrs	r3, r3, #14
 800ba36:	f003 0301 	and.w	r3, r3, #1
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d008      	beq.n	800ba50 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ba4c:	601a      	str	r2, [r3, #0]
 800ba4e:	e00d      	b.n	800ba6c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	0bdb      	lsrs	r3, r3, #15
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d007      	beq.n	800ba6c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ba6a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	2b29      	cmp	r3, #41	; 0x29
 800ba76:	d112      	bne.n	800ba9e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2228      	movs	r2, #40	; 0x28
 800ba7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2221      	movs	r2, #33	; 0x21
 800ba84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ba86:	2101      	movs	r1, #1
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fe79 	bl	800c780 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7ff f955 	bl	800ad46 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ba9c:	e017      	b.n	800bace <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b2a      	cmp	r3, #42	; 0x2a
 800baa8:	d111      	bne.n	800bace <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2228      	movs	r2, #40	; 0x28
 800baae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2222      	movs	r2, #34	; 0x22
 800bab6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bab8:	2102      	movs	r1, #2
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 fe60 	bl	800c780 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f7ff f946 	bl	800ad5a <HAL_I2C_SlaveRxCpltCallback>
}
 800bace:	bf00      	nop
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
	...

0800bad8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	2220      	movs	r2, #32
 800baec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	2b21      	cmp	r3, #33	; 0x21
 800baf8:	d107      	bne.n	800bb0a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800bafa:	2101      	movs	r1, #1
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fe3f 	bl	800c780 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2211      	movs	r2, #17
 800bb06:	631a      	str	r2, [r3, #48]	; 0x30
 800bb08:	e00c      	b.n	800bb24 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b22      	cmp	r3, #34	; 0x22
 800bb14:	d106      	bne.n	800bb24 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800bb16:	2102      	movs	r1, #2
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fe31 	bl	800c780 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2212      	movs	r2, #18
 800bb22:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6859      	ldr	r1, [r3, #4]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	4b4d      	ldr	r3, [pc, #308]	; (800bc64 <I2C_ITMasterCplt+0x18c>)
 800bb30:	400b      	ands	r3, r1
 800bb32:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a4a      	ldr	r2, [pc, #296]	; (800bc68 <I2C_ITMasterCplt+0x190>)
 800bb3e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	091b      	lsrs	r3, r3, #4
 800bb44:	f003 0301 	and.w	r3, r3, #1
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d009      	beq.n	800bb60 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2210      	movs	r2, #16
 800bb52:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb58:	f043 0204 	orr.w	r2, r3, #4
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b60      	cmp	r3, #96	; 0x60
 800bb6a:	d10b      	bne.n	800bb84 <I2C_ITMasterCplt+0xac>
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	089b      	lsrs	r3, r3, #2
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d005      	beq.n	800bb84 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800bb82:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 fbb6 	bl	800c2f6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb8e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bb96:	b2db      	uxtb	r3, r3
 800bb98:	2b60      	cmp	r3, #96	; 0x60
 800bb9a:	d002      	beq.n	800bba2 <I2C_ITMasterCplt+0xca>
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d006      	beq.n	800bbb0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba6:	4619      	mov	r1, r3
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 faad 	bl	800c108 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bbae:	e054      	b.n	800bc5a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	2b21      	cmp	r3, #33	; 0x21
 800bbba:	d124      	bne.n	800bc06 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2220      	movs	r2, #32
 800bbc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	2b40      	cmp	r3, #64	; 0x40
 800bbd4:	d10b      	bne.n	800bbee <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7ff f8d9 	bl	800ad9e <HAL_I2C_MemTxCpltCallback>
}
 800bbec:	e035      	b.n	800bc5a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff f88d 	bl	800ad1e <HAL_I2C_MasterTxCpltCallback>
}
 800bc04:	e029      	b.n	800bc5a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	2b22      	cmp	r3, #34	; 0x22
 800bc10:	d123      	bne.n	800bc5a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2220      	movs	r2, #32
 800bc16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b40      	cmp	r3, #64	; 0x40
 800bc2a:	d10b      	bne.n	800bc44 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f7ff f8b8 	bl	800adb2 <HAL_I2C_MemRxCpltCallback>
}
 800bc42:	e00a      	b.n	800bc5a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f7ff f86c 	bl	800ad32 <HAL_I2C_MasterRxCpltCallback>
}
 800bc5a:	bf00      	nop
 800bc5c:	3718      	adds	r7, #24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
 800bc62:	bf00      	nop
 800bc64:	fe00e800 	.word	0xfe00e800
 800bc68:	ffff0000 	.word	0xffff0000

0800bc6c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc88:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2220      	movs	r2, #32
 800bc90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bc92:	7bfb      	ldrb	r3, [r7, #15]
 800bc94:	2b21      	cmp	r3, #33	; 0x21
 800bc96:	d002      	beq.n	800bc9e <I2C_ITSlaveCplt+0x32>
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
 800bc9a:	2b29      	cmp	r3, #41	; 0x29
 800bc9c:	d108      	bne.n	800bcb0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800bc9e:	f248 0101 	movw	r1, #32769	; 0x8001
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fd6c 	bl	800c780 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2221      	movs	r2, #33	; 0x21
 800bcac:	631a      	str	r2, [r3, #48]	; 0x30
 800bcae:	e00d      	b.n	800bccc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
 800bcb2:	2b22      	cmp	r3, #34	; 0x22
 800bcb4:	d002      	beq.n	800bcbc <I2C_ITSlaveCplt+0x50>
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
 800bcb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bcba:	d107      	bne.n	800bccc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800bcbc:	f248 0102 	movw	r1, #32770	; 0x8002
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fd5d 	bl	800c780 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2222      	movs	r2, #34	; 0x22
 800bcca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bcda:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	6859      	ldr	r1, [r3, #4]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681a      	ldr	r2, [r3, #0]
 800bce6:	4b80      	ldr	r3, [pc, #512]	; (800bee8 <I2C_ITSlaveCplt+0x27c>)
 800bce8:	400b      	ands	r3, r1
 800bcea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fb02 	bl	800c2f6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	0b9b      	lsrs	r3, r3, #14
 800bcf6:	f003 0301 	and.w	r3, r3, #1
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d07a      	beq.n	800bdf4 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bd0c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f000 8111 	beq.w	800bf3a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a73      	ldr	r2, [pc, #460]	; (800beec <I2C_ITSlaveCplt+0x280>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d059      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a71      	ldr	r2, [pc, #452]	; (800bef0 <I2C_ITSlaveCplt+0x284>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d053      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a6f      	ldr	r2, [pc, #444]	; (800bef4 <I2C_ITSlaveCplt+0x288>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d04d      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a6d      	ldr	r2, [pc, #436]	; (800bef8 <I2C_ITSlaveCplt+0x28c>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d047      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a6b      	ldr	r2, [pc, #428]	; (800befc <I2C_ITSlaveCplt+0x290>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d041      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a69      	ldr	r2, [pc, #420]	; (800bf00 <I2C_ITSlaveCplt+0x294>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d03b      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a67      	ldr	r2, [pc, #412]	; (800bf04 <I2C_ITSlaveCplt+0x298>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d035      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a65      	ldr	r2, [pc, #404]	; (800bf08 <I2C_ITSlaveCplt+0x29c>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d02f      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a63      	ldr	r2, [pc, #396]	; (800bf0c <I2C_ITSlaveCplt+0x2a0>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d029      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a61      	ldr	r2, [pc, #388]	; (800bf10 <I2C_ITSlaveCplt+0x2a4>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d023      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a5f      	ldr	r2, [pc, #380]	; (800bf14 <I2C_ITSlaveCplt+0x2a8>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d01d      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a5d      	ldr	r2, [pc, #372]	; (800bf18 <I2C_ITSlaveCplt+0x2ac>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d017      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a5b      	ldr	r2, [pc, #364]	; (800bf1c <I2C_ITSlaveCplt+0x2b0>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d011      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a59      	ldr	r2, [pc, #356]	; (800bf20 <I2C_ITSlaveCplt+0x2b4>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d00b      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a57      	ldr	r2, [pc, #348]	; (800bf24 <I2C_ITSlaveCplt+0x2b8>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d005      	beq.n	800bdd8 <I2C_ITSlaveCplt+0x16c>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a55      	ldr	r2, [pc, #340]	; (800bf28 <I2C_ITSlaveCplt+0x2bc>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d105      	bne.n	800bde4 <I2C_ITSlaveCplt+0x178>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	e004      	b.n	800bdee <I2C_ITSlaveCplt+0x182>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	8553      	strh	r3, [r2, #42]	; 0x2a
 800bdf2:	e0a2      	b.n	800bf3a <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	0bdb      	lsrs	r3, r3, #15
 800bdf8:	f003 0301 	and.w	r3, r3, #1
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f000 809c 	beq.w	800bf3a <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681a      	ldr	r2, [r3, #0]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be10:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be16:	2b00      	cmp	r3, #0
 800be18:	f000 808f 	beq.w	800bf3a <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a32      	ldr	r2, [pc, #200]	; (800beec <I2C_ITSlaveCplt+0x280>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d059      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a30      	ldr	r2, [pc, #192]	; (800bef0 <I2C_ITSlaveCplt+0x284>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d053      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a2e      	ldr	r2, [pc, #184]	; (800bef4 <I2C_ITSlaveCplt+0x288>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d04d      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a2c      	ldr	r2, [pc, #176]	; (800bef8 <I2C_ITSlaveCplt+0x28c>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d047      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a2a      	ldr	r2, [pc, #168]	; (800befc <I2C_ITSlaveCplt+0x290>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d041      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4a28      	ldr	r2, [pc, #160]	; (800bf00 <I2C_ITSlaveCplt+0x294>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d03b      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a26      	ldr	r2, [pc, #152]	; (800bf04 <I2C_ITSlaveCplt+0x298>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d035      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4a24      	ldr	r2, [pc, #144]	; (800bf08 <I2C_ITSlaveCplt+0x29c>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d02f      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	4a22      	ldr	r2, [pc, #136]	; (800bf0c <I2C_ITSlaveCplt+0x2a0>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d029      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a20      	ldr	r2, [pc, #128]	; (800bf10 <I2C_ITSlaveCplt+0x2a4>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d023      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4a1e      	ldr	r2, [pc, #120]	; (800bf14 <I2C_ITSlaveCplt+0x2a8>)
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d01d      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4a1c      	ldr	r2, [pc, #112]	; (800bf18 <I2C_ITSlaveCplt+0x2ac>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d017      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	4a1a      	ldr	r2, [pc, #104]	; (800bf1c <I2C_ITSlaveCplt+0x2b0>)
 800beb4:	4293      	cmp	r3, r2
 800beb6:	d011      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a18      	ldr	r2, [pc, #96]	; (800bf20 <I2C_ITSlaveCplt+0x2b4>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d00b      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a16      	ldr	r2, [pc, #88]	; (800bf24 <I2C_ITSlaveCplt+0x2b8>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d005      	beq.n	800bedc <I2C_ITSlaveCplt+0x270>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a14      	ldr	r2, [pc, #80]	; (800bf28 <I2C_ITSlaveCplt+0x2bc>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d127      	bne.n	800bf2c <I2C_ITSlaveCplt+0x2c0>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	e026      	b.n	800bf36 <I2C_ITSlaveCplt+0x2ca>
 800bee8:	fe00e800 	.word	0xfe00e800
 800beec:	40020010 	.word	0x40020010
 800bef0:	40020028 	.word	0x40020028
 800bef4:	40020040 	.word	0x40020040
 800bef8:	40020058 	.word	0x40020058
 800befc:	40020070 	.word	0x40020070
 800bf00:	40020088 	.word	0x40020088
 800bf04:	400200a0 	.word	0x400200a0
 800bf08:	400200b8 	.word	0x400200b8
 800bf0c:	40020410 	.word	0x40020410
 800bf10:	40020428 	.word	0x40020428
 800bf14:	40020440 	.word	0x40020440
 800bf18:	40020458 	.word	0x40020458
 800bf1c:	40020470 	.word	0x40020470
 800bf20:	40020488 	.word	0x40020488
 800bf24:	400204a0 	.word	0x400204a0
 800bf28:	400204b8 	.word	0x400204b8
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	089b      	lsrs	r3, r3, #2
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d020      	beq.n	800bf88 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	f023 0304 	bic.w	r3, r3, #4
 800bf4c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf58:	b2d2      	uxtb	r2, r2
 800bf5a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf60:	1c5a      	adds	r2, r3, #1
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d00c      	beq.n	800bf88 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf72:	3b01      	subs	r3, #1
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	3b01      	subs	r3, #1
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf8c:	b29b      	uxth	r3, r3
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d005      	beq.n	800bf9e <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf96:	f043 0204 	orr.w	r2, r3, #4
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d010      	beq.n	800bfd6 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfb8:	4619      	mov	r1, r3
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f8a4 	bl	800c108 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfc6:	b2db      	uxtb	r3, r3
 800bfc8:	2b28      	cmp	r3, #40	; 0x28
 800bfca:	d141      	bne.n	800c050 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800bfcc:	6979      	ldr	r1, [r7, #20]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 f844 	bl	800c05c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bfd4:	e03c      	b.n	800c050 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bfde:	d014      	beq.n	800c00a <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f7ff fd1a 	bl	800ba1a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	4a1b      	ldr	r2, [pc, #108]	; (800c058 <I2C_ITSlaveCplt+0x3ec>)
 800bfea:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2220      	movs	r2, #32
 800bff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7fe fec1 	bl	800ad8a <HAL_I2C_ListenCpltCallback>
}
 800c008:	e022      	b.n	800c050 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b22      	cmp	r3, #34	; 0x22
 800c014:	d10e      	bne.n	800c034 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2220      	movs	r2, #32
 800c01a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f7fe fe94 	bl	800ad5a <HAL_I2C_SlaveRxCpltCallback>
}
 800c032:	e00d      	b.n	800c050 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2220      	movs	r2, #32
 800c038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7fe fe7b 	bl	800ad46 <HAL_I2C_SlaveTxCpltCallback>
}
 800c050:	bf00      	nop
 800c052:	3718      	adds	r7, #24
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	ffff0000 	.word	0xffff0000

0800c05c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a26      	ldr	r2, [pc, #152]	; (800c104 <I2C_ITListenCplt+0xa8>)
 800c06a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2220      	movs	r2, #32
 800c076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	089b      	lsrs	r3, r3, #2
 800c08c:	f003 0301 	and.w	r3, r3, #1
 800c090:	2b00      	cmp	r3, #0
 800c092:	d022      	beq.n	800c0da <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c09e:	b2d2      	uxtb	r2, r2
 800c0a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a6:	1c5a      	adds	r2, r3, #1
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d012      	beq.n	800c0da <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0b8:	3b01      	subs	r3, #1
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	3b01      	subs	r3, #1
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d2:	f043 0204 	orr.w	r2, r3, #4
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c0da:	f248 0103 	movw	r1, #32771	; 0x8003
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fb4e 	bl	800c780 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2210      	movs	r2, #16
 800c0ea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f7fe fe48 	bl	800ad8a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	ffff0000 	.word	0xffff0000

0800c108 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c118:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	4a5d      	ldr	r2, [pc, #372]	; (800c29c <I2C_ITError+0x194>)
 800c126:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	431a      	orrs	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
 800c13c:	2b28      	cmp	r3, #40	; 0x28
 800c13e:	d005      	beq.n	800c14c <I2C_ITError+0x44>
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	2b29      	cmp	r3, #41	; 0x29
 800c144:	d002      	beq.n	800c14c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800c146:	7bfb      	ldrb	r3, [r7, #15]
 800c148:	2b2a      	cmp	r3, #42	; 0x2a
 800c14a:	d10b      	bne.n	800c164 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c14c:	2103      	movs	r1, #3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fb16 	bl	800c780 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2228      	movs	r2, #40	; 0x28
 800c158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a50      	ldr	r2, [pc, #320]	; (800c2a0 <I2C_ITError+0x198>)
 800c160:	635a      	str	r2, [r3, #52]	; 0x34
 800c162:	e011      	b.n	800c188 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800c164:	f248 0103 	movw	r1, #32771	; 0x8003
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 fb09 	bl	800c780 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c174:	b2db      	uxtb	r3, r3
 800c176:	2b60      	cmp	r3, #96	; 0x60
 800c178:	d003      	beq.n	800c182 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2220      	movs	r2, #32
 800c17e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c18c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c192:	2b00      	cmp	r3, #0
 800c194:	d039      	beq.n	800c20a <I2C_ITError+0x102>
 800c196:	68bb      	ldr	r3, [r7, #8]
 800c198:	2b11      	cmp	r3, #17
 800c19a:	d002      	beq.n	800c1a2 <I2C_ITError+0x9a>
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b21      	cmp	r3, #33	; 0x21
 800c1a0:	d133      	bne.n	800c20a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1b0:	d107      	bne.n	800c1c2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c1c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fd fffc 	bl	800a1c4 <HAL_DMA_GetState>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d017      	beq.n	800c202 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d6:	4a33      	ldr	r2, [pc, #204]	; (800c2a4 <I2C_ITError+0x19c>)
 800c1d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fc fe7c 	bl	8008ee4 <HAL_DMA_Abort_IT>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d04d      	beq.n	800c28e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c200:	e045      	b.n	800c28e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f850 	bl	800c2a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c208:	e041      	b.n	800c28e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d039      	beq.n	800c286 <I2C_ITError+0x17e>
 800c212:	68bb      	ldr	r3, [r7, #8]
 800c214:	2b12      	cmp	r3, #18
 800c216:	d002      	beq.n	800c21e <I2C_ITError+0x116>
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b22      	cmp	r3, #34	; 0x22
 800c21c:	d133      	bne.n	800c286 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c22c:	d107      	bne.n	800c23e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c23c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c242:	4618      	mov	r0, r3
 800c244:	f7fd ffbe 	bl	800a1c4 <HAL_DMA_GetState>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d017      	beq.n	800c27e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c252:	4a14      	ldr	r2, [pc, #80]	; (800c2a4 <I2C_ITError+0x19c>)
 800c254:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c262:	4618      	mov	r0, r3
 800c264:	f7fc fe3e 	bl	8008ee4 <HAL_DMA_Abort_IT>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d011      	beq.n	800c292 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c278:	4610      	mov	r0, r2
 800c27a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c27c:	e009      	b.n	800c292 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f812 	bl	800c2a8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c284:	e005      	b.n	800c292 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f000 f80e 	bl	800c2a8 <I2C_TreatErrorCallback>
  }
}
 800c28c:	e002      	b.n	800c294 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c28e:	bf00      	nop
 800c290:	e000      	b.n	800c294 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c292:	bf00      	nop
}
 800c294:	bf00      	nop
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	ffff0000 	.word	0xffff0000
 800c2a0:	0800b03f 	.word	0x0800b03f
 800c2a4:	0800c33f 	.word	0x0800c33f

0800c2a8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	2b60      	cmp	r3, #96	; 0x60
 800c2ba:	d10e      	bne.n	800c2da <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2220      	movs	r2, #32
 800c2c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f7fe fd81 	bl	800adda <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c2d8:	e009      	b.n	800c2ee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7fe fd6c 	bl	800adc6 <HAL_I2C_ErrorCallback>
}
 800c2ee:	bf00      	nop
 800c2f0:	3708      	adds	r7, #8
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}

0800c2f6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c2f6:	b480      	push	{r7}
 800c2f8:	b083      	sub	sp, #12
 800c2fa:	af00      	add	r7, sp, #0
 800c2fc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	f003 0302 	and.w	r3, r3, #2
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d103      	bne.n	800c314 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2200      	movs	r2, #0
 800c312:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	699b      	ldr	r3, [r3, #24]
 800c31a:	f003 0301 	and.w	r3, r3, #1
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d007      	beq.n	800c332 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	699a      	ldr	r2, [r3, #24]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	f042 0201 	orr.w	r2, r2, #1
 800c330:	619a      	str	r2, [r3, #24]
  }
}
 800c332:	bf00      	nop
 800c334:	370c      	adds	r7, #12
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b084      	sub	sp, #16
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c34a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c350:	2b00      	cmp	r3, #0
 800c352:	d003      	beq.n	800c35c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c358:	2200      	movs	r2, #0
 800c35a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c360:	2b00      	cmp	r3, #0
 800c362:	d003      	beq.n	800c36c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c368:	2200      	movs	r2, #0
 800c36a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f7ff ff9b 	bl	800c2a8 <I2C_TreatErrorCallback>
}
 800c372:	bf00      	nop
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b084      	sub	sp, #16
 800c37e:	af00      	add	r7, sp, #0
 800c380:	60f8      	str	r0, [r7, #12]
 800c382:	60b9      	str	r1, [r7, #8]
 800c384:	603b      	str	r3, [r7, #0]
 800c386:	4613      	mov	r3, r2
 800c388:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c38a:	e022      	b.n	800c3d2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c392:	d01e      	beq.n	800c3d2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c394:	f7f9 faa2 	bl	80058dc <HAL_GetTick>
 800c398:	4602      	mov	r2, r0
 800c39a:	69bb      	ldr	r3, [r7, #24]
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	683a      	ldr	r2, [r7, #0]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d302      	bcc.n	800c3aa <I2C_WaitOnFlagUntilTimeout+0x30>
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d113      	bne.n	800c3d2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ae:	f043 0220 	orr.w	r2, r3, #32
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2220      	movs	r2, #32
 800c3ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e00f      	b.n	800c3f2 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	699a      	ldr	r2, [r3, #24]
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	4013      	ands	r3, r2
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	bf0c      	ite	eq
 800c3e2:	2301      	moveq	r3, #1
 800c3e4:	2300      	movne	r3, #0
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	79fb      	ldrb	r3, [r7, #7]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d0cd      	beq.n	800c38c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c3f0:	2300      	movs	r3, #0
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3710      	adds	r7, #16
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b084      	sub	sp, #16
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	60f8      	str	r0, [r7, #12]
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c406:	e02c      	b.n	800c462 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	68b9      	ldr	r1, [r7, #8]
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f000 f835 	bl	800c47c <I2C_IsErrorOccurred>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	d001      	beq.n	800c41c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c418:	2301      	movs	r3, #1
 800c41a:	e02a      	b.n	800c472 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c422:	d01e      	beq.n	800c462 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c424:	f7f9 fa5a 	bl	80058dc <HAL_GetTick>
 800c428:	4602      	mov	r2, r0
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	429a      	cmp	r2, r3
 800c432:	d302      	bcc.n	800c43a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d113      	bne.n	800c462 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c43e:	f043 0220 	orr.w	r2, r3, #32
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2220      	movs	r2, #32
 800c44a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	e007      	b.n	800c472 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	f003 0302 	and.w	r3, r3, #2
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d1cb      	bne.n	800c408 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
	...

0800c47c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b08a      	sub	sp, #40	; 0x28
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c488:	2300      	movs	r3, #0
 800c48a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	699b      	ldr	r3, [r3, #24]
 800c494:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800c49e:	69bb      	ldr	r3, [r7, #24]
 800c4a0:	f003 0310 	and.w	r3, r3, #16
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d075      	beq.n	800c594 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2210      	movs	r2, #16
 800c4ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c4b0:	e056      	b.n	800c560 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b8:	d052      	beq.n	800c560 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c4ba:	f7f9 fa0f 	bl	80058dc <HAL_GetTick>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d302      	bcc.n	800c4d0 <I2C_IsErrorOccurred+0x54>
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d147      	bne.n	800c560 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c4e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	699b      	ldr	r3, [r3, #24]
 800c4ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4f2:	d12e      	bne.n	800c552 <I2C_IsErrorOccurred+0xd6>
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4fa:	d02a      	beq.n	800c552 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800c4fc:	7cfb      	ldrb	r3, [r7, #19]
 800c4fe:	2b20      	cmp	r3, #32
 800c500:	d027      	beq.n	800c552 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c510:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800c512:	f7f9 f9e3 	bl	80058dc <HAL_GetTick>
 800c516:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c518:	e01b      	b.n	800c552 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800c51a:	f7f9 f9df 	bl	80058dc <HAL_GetTick>
 800c51e:	4602      	mov	r2, r0
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	1ad3      	subs	r3, r2, r3
 800c524:	2b19      	cmp	r3, #25
 800c526:	d914      	bls.n	800c552 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c52c:	f043 0220 	orr.w	r2, r3, #32
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2220      	movs	r2, #32
 800c538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2200      	movs	r2, #0
 800c540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800c54c:	2301      	movs	r3, #1
 800c54e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	699b      	ldr	r3, [r3, #24]
 800c558:	f003 0320 	and.w	r3, r3, #32
 800c55c:	2b20      	cmp	r3, #32
 800c55e:	d1dc      	bne.n	800c51a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	f003 0320 	and.w	r3, r3, #32
 800c56a:	2b20      	cmp	r3, #32
 800c56c:	d003      	beq.n	800c576 <I2C_IsErrorOccurred+0xfa>
 800c56e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c572:	2b00      	cmp	r3, #0
 800c574:	d09d      	beq.n	800c4b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800c576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d103      	bne.n	800c586 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2220      	movs	r2, #32
 800c584:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	f043 0304 	orr.w	r3, r3, #4
 800c58c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	699b      	ldr	r3, [r3, #24]
 800c59a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00b      	beq.n	800c5be <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800c5a6:	6a3b      	ldr	r3, [r7, #32]
 800c5a8:	f043 0301 	orr.w	r3, r3, #1
 800c5ac:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c5b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	f043 0308 	orr.w	r3, r3, #8
 800c5ce:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c5d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d00b      	beq.n	800c602 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800c5ea:	6a3b      	ldr	r3, [r7, #32]
 800c5ec:	f043 0302 	orr.w	r3, r3, #2
 800c5f0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c5fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800c5fc:	2301      	movs	r3, #1
 800c5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800c602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c606:	2b00      	cmp	r3, #0
 800c608:	d01c      	beq.n	800c644 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f7ff fe73 	bl	800c2f6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	6859      	ldr	r1, [r3, #4]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <I2C_IsErrorOccurred+0x1d4>)
 800c61c:	400b      	ands	r3, r1
 800c61e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c624:	6a3b      	ldr	r3, [r7, #32]
 800c626:	431a      	orrs	r2, r3
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2220      	movs	r2, #32
 800c630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2200      	movs	r2, #0
 800c638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800c644:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3728      	adds	r7, #40	; 0x28
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}
 800c650:	fe00e800 	.word	0xfe00e800

0800c654 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c654:	b480      	push	{r7}
 800c656:	b087      	sub	sp, #28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	607b      	str	r3, [r7, #4]
 800c65e:	460b      	mov	r3, r1
 800c660:	817b      	strh	r3, [r7, #10]
 800c662:	4613      	mov	r3, r2
 800c664:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c666:	897b      	ldrh	r3, [r7, #10]
 800c668:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c66c:	7a7b      	ldrb	r3, [r7, #9]
 800c66e:	041b      	lsls	r3, r3, #16
 800c670:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c674:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c67a:	6a3b      	ldr	r3, [r7, #32]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c682:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	6a3b      	ldr	r3, [r7, #32]
 800c68c:	0d5b      	lsrs	r3, r3, #21
 800c68e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c692:	4b08      	ldr	r3, [pc, #32]	; (800c6b4 <I2C_TransferConfig+0x60>)
 800c694:	430b      	orrs	r3, r1
 800c696:	43db      	mvns	r3, r3
 800c698:	ea02 0103 	and.w	r1, r2, r3
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	430a      	orrs	r2, r1
 800c6a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c6a6:	bf00      	nop
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	03ff63ff 	.word	0x03ff63ff

0800c6b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6cc:	4a2a      	ldr	r2, [pc, #168]	; (800c778 <I2C_Enable_IRQ+0xc0>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d004      	beq.n	800c6dc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800c6d6:	4a29      	ldr	r2, [pc, #164]	; (800c77c <I2C_Enable_IRQ+0xc4>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d11d      	bne.n	800c718 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c6dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	da03      	bge.n	800c6ec <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c6ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c6ec:	887b      	ldrh	r3, [r7, #2]
 800c6ee:	2b10      	cmp	r3, #16
 800c6f0:	d103      	bne.n	800c6fa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800c6f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c6fa:	887b      	ldrh	r3, [r7, #2]
 800c6fc:	2b20      	cmp	r3, #32
 800c6fe:	d103      	bne.n	800c708 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c706:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c708:	887b      	ldrh	r3, [r7, #2]
 800c70a:	2b40      	cmp	r3, #64	; 0x40
 800c70c:	d125      	bne.n	800c75a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c714:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c716:	e020      	b.n	800c75a <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	da03      	bge.n	800c728 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c726:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c728:	887b      	ldrh	r3, [r7, #2]
 800c72a:	f003 0301 	and.w	r3, r3, #1
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800c738:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c73a:	887b      	ldrh	r3, [r7, #2]
 800c73c:	f003 0302 	and.w	r3, r3, #2
 800c740:	2b00      	cmp	r3, #0
 800c742:	d003      	beq.n	800c74c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800c74a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c74c:	887b      	ldrh	r3, [r7, #2]
 800c74e:	2b20      	cmp	r3, #32
 800c750:	d103      	bne.n	800c75a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f043 0320 	orr.w	r3, r3, #32
 800c758:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	6819      	ldr	r1, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68fa      	ldr	r2, [r7, #12]
 800c766:	430a      	orrs	r2, r1
 800c768:	601a      	str	r2, [r3, #0]
}
 800c76a:	bf00      	nop
 800c76c:	3714      	adds	r7, #20
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	0800b245 	.word	0x0800b245
 800c77c:	0800b42d 	.word	0x0800b42d

0800c780 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	460b      	mov	r3, r1
 800c78a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800c78c:	2300      	movs	r3, #0
 800c78e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c790:	887b      	ldrh	r3, [r7, #2]
 800c792:	f003 0301 	and.w	r3, r3, #1
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00f      	beq.n	800c7ba <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800c7a0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c7ae:	2b28      	cmp	r3, #40	; 0x28
 800c7b0:	d003      	beq.n	800c7ba <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c7b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c7ba:	887b      	ldrh	r3, [r7, #2]
 800c7bc:	f003 0302 	and.w	r3, r3, #2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00f      	beq.n	800c7e4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800c7ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c7d8:	2b28      	cmp	r3, #40	; 0x28
 800c7da:	d003      	beq.n	800c7e4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800c7e2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c7e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	da03      	bge.n	800c7f4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800c7f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c7f4:	887b      	ldrh	r3, [r7, #2]
 800c7f6:	2b10      	cmp	r3, #16
 800c7f8:	d103      	bne.n	800c802 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800c800:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c802:	887b      	ldrh	r3, [r7, #2]
 800c804:	2b20      	cmp	r3, #32
 800c806:	d103      	bne.n	800c810 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f043 0320 	orr.w	r3, r3, #32
 800c80e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c810:	887b      	ldrh	r3, [r7, #2]
 800c812:	2b40      	cmp	r3, #64	; 0x40
 800c814:	d103      	bne.n	800c81e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c81c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6819      	ldr	r1, [r3, #0]
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	43da      	mvns	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	400a      	ands	r2, r1
 800c82e:	601a      	str	r2, [r3, #0]
}
 800c830:	bf00      	nop
 800c832:	3714      	adds	r7, #20
 800c834:	46bd      	mov	sp, r7
 800c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83a:	4770      	bx	lr

0800c83c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b20      	cmp	r3, #32
 800c850:	d138      	bne.n	800c8c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d101      	bne.n	800c860 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c85c:	2302      	movs	r3, #2
 800c85e:	e032      	b.n	800c8c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2224      	movs	r2, #36	; 0x24
 800c86c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f022 0201 	bic.w	r2, r2, #1
 800c87e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c88e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6819      	ldr	r1, [r3, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	430a      	orrs	r2, r1
 800c89e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f042 0201 	orr.w	r2, r2, #1
 800c8ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2220      	movs	r2, #32
 800c8b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e000      	b.n	800c8c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c8c4:	2302      	movs	r3, #2
  }
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c8d2:	b480      	push	{r7}
 800c8d4:	b085      	sub	sp, #20
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b20      	cmp	r3, #32
 800c8e6:	d139      	bne.n	800c95c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c8ee:	2b01      	cmp	r3, #1
 800c8f0:	d101      	bne.n	800c8f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c8f2:	2302      	movs	r3, #2
 800c8f4:	e033      	b.n	800c95e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2201      	movs	r2, #1
 800c8fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2224      	movs	r2, #36	; 0x24
 800c902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f022 0201 	bic.w	r2, r2, #1
 800c914:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c924:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	021b      	lsls	r3, r3, #8
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	4313      	orrs	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f042 0201 	orr.w	r2, r2, #1
 800c946:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2220      	movs	r2, #32
 800c94c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c958:	2300      	movs	r3, #0
 800c95a:	e000      	b.n	800c95e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c95c:	2302      	movs	r3, #2
  }
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
	...

0800c96c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c974:	4b19      	ldr	r3, [pc, #100]	; (800c9dc <HAL_PWREx_ConfigSupply+0x70>)
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	f003 0304 	and.w	r3, r3, #4
 800c97c:	2b04      	cmp	r3, #4
 800c97e:	d00a      	beq.n	800c996 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c980:	4b16      	ldr	r3, [pc, #88]	; (800c9dc <HAL_PWREx_ConfigSupply+0x70>)
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	f003 0307 	and.w	r3, r3, #7
 800c988:	687a      	ldr	r2, [r7, #4]
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d001      	beq.n	800c992 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e01f      	b.n	800c9d2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	e01d      	b.n	800c9d2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c996:	4b11      	ldr	r3, [pc, #68]	; (800c9dc <HAL_PWREx_ConfigSupply+0x70>)
 800c998:	68db      	ldr	r3, [r3, #12]
 800c99a:	f023 0207 	bic.w	r2, r3, #7
 800c99e:	490f      	ldr	r1, [pc, #60]	; (800c9dc <HAL_PWREx_ConfigSupply+0x70>)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c9a6:	f7f8 ff99 	bl	80058dc <HAL_GetTick>
 800c9aa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c9ac:	e009      	b.n	800c9c2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c9ae:	f7f8 ff95 	bl	80058dc <HAL_GetTick>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9bc:	d901      	bls.n	800c9c2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e007      	b.n	800c9d2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c9c2:	4b06      	ldr	r3, [pc, #24]	; (800c9dc <HAL_PWREx_ConfigSupply+0x70>)
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c9ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9ce:	d1ee      	bne.n	800c9ae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c9d0:	2300      	movs	r3, #0
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	58024800 	.word	0x58024800

0800c9e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b08c      	sub	sp, #48	; 0x30
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d101      	bne.n	800c9f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e39d      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0301 	and.w	r3, r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 8087 	beq.w	800cb0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca00:	4b88      	ldr	r3, [pc, #544]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ca0a:	4b86      	ldr	r3, [pc, #536]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ca10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca12:	2b10      	cmp	r3, #16
 800ca14:	d007      	beq.n	800ca26 <HAL_RCC_OscConfig+0x46>
 800ca16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca18:	2b18      	cmp	r3, #24
 800ca1a:	d110      	bne.n	800ca3e <HAL_RCC_OscConfig+0x5e>
 800ca1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1e:	f003 0303 	and.w	r3, r3, #3
 800ca22:	2b02      	cmp	r3, #2
 800ca24:	d10b      	bne.n	800ca3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca26:	4b7f      	ldr	r3, [pc, #508]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d06c      	beq.n	800cb0c <HAL_RCC_OscConfig+0x12c>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d168      	bne.n	800cb0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e377      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca46:	d106      	bne.n	800ca56 <HAL_RCC_OscConfig+0x76>
 800ca48:	4b76      	ldr	r3, [pc, #472]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a75      	ldr	r2, [pc, #468]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca52:	6013      	str	r3, [r2, #0]
 800ca54:	e02e      	b.n	800cab4 <HAL_RCC_OscConfig+0xd4>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	685b      	ldr	r3, [r3, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d10c      	bne.n	800ca78 <HAL_RCC_OscConfig+0x98>
 800ca5e:	4b71      	ldr	r3, [pc, #452]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	4a70      	ldr	r2, [pc, #448]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ca68:	6013      	str	r3, [r2, #0]
 800ca6a:	4b6e      	ldr	r3, [pc, #440]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a6d      	ldr	r2, [pc, #436]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ca74:	6013      	str	r3, [r2, #0]
 800ca76:	e01d      	b.n	800cab4 <HAL_RCC_OscConfig+0xd4>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca80:	d10c      	bne.n	800ca9c <HAL_RCC_OscConfig+0xbc>
 800ca82:	4b68      	ldr	r3, [pc, #416]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a67      	ldr	r2, [pc, #412]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ca8c:	6013      	str	r3, [r2, #0]
 800ca8e:	4b65      	ldr	r3, [pc, #404]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a64      	ldr	r2, [pc, #400]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca98:	6013      	str	r3, [r2, #0]
 800ca9a:	e00b      	b.n	800cab4 <HAL_RCC_OscConfig+0xd4>
 800ca9c:	4b61      	ldr	r3, [pc, #388]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a60      	ldr	r2, [pc, #384]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800caa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caa6:	6013      	str	r3, [r2, #0]
 800caa8:	4b5e      	ldr	r3, [pc, #376]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a5d      	ldr	r2, [pc, #372]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800caae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d013      	beq.n	800cae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cabc:	f7f8 ff0e 	bl	80058dc <HAL_GetTick>
 800cac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cac2:	e008      	b.n	800cad6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cac4:	f7f8 ff0a 	bl	80058dc <HAL_GetTick>
 800cac8:	4602      	mov	r2, r0
 800caca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	2b64      	cmp	r3, #100	; 0x64
 800cad0:	d901      	bls.n	800cad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800cad2:	2303      	movs	r3, #3
 800cad4:	e32b      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cad6:	4b53      	ldr	r3, [pc, #332]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0f0      	beq.n	800cac4 <HAL_RCC_OscConfig+0xe4>
 800cae2:	e014      	b.n	800cb0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cae4:	f7f8 fefa 	bl	80058dc <HAL_GetTick>
 800cae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800caea:	e008      	b.n	800cafe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800caec:	f7f8 fef6 	bl	80058dc <HAL_GetTick>
 800caf0:	4602      	mov	r2, r0
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	2b64      	cmp	r3, #100	; 0x64
 800caf8:	d901      	bls.n	800cafe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e317      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cafe:	4b49      	ldr	r3, [pc, #292]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1f0      	bne.n	800caec <HAL_RCC_OscConfig+0x10c>
 800cb0a:	e000      	b.n	800cb0e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 0302 	and.w	r3, r3, #2
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 808c 	beq.w	800cc34 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb1c:	4b41      	ldr	r3, [pc, #260]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cb1e:	691b      	ldr	r3, [r3, #16]
 800cb20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb26:	4b3f      	ldr	r3, [pc, #252]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb2a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d007      	beq.n	800cb42 <HAL_RCC_OscConfig+0x162>
 800cb32:	6a3b      	ldr	r3, [r7, #32]
 800cb34:	2b18      	cmp	r3, #24
 800cb36:	d137      	bne.n	800cba8 <HAL_RCC_OscConfig+0x1c8>
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	f003 0303 	and.w	r3, r3, #3
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d132      	bne.n	800cba8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cb42:	4b38      	ldr	r3, [pc, #224]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f003 0304 	and.w	r3, r3, #4
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d005      	beq.n	800cb5a <HAL_RCC_OscConfig+0x17a>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	68db      	ldr	r3, [r3, #12]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d101      	bne.n	800cb5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	e2e9      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cb5a:	4b32      	ldr	r3, [pc, #200]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f023 0219 	bic.w	r2, r3, #25
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	492f      	ldr	r1, [pc, #188]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cb6c:	f7f8 feb6 	bl	80058dc <HAL_GetTick>
 800cb70:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb72:	e008      	b.n	800cb86 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cb74:	f7f8 feb2 	bl	80058dc <HAL_GetTick>
 800cb78:	4602      	mov	r2, r0
 800cb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7c:	1ad3      	subs	r3, r2, r3
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d901      	bls.n	800cb86 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800cb82:	2303      	movs	r3, #3
 800cb84:	e2d3      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb86:	4b27      	ldr	r3, [pc, #156]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f003 0304 	and.w	r3, r3, #4
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d0f0      	beq.n	800cb74 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb92:	4b24      	ldr	r3, [pc, #144]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	061b      	lsls	r3, r3, #24
 800cba0:	4920      	ldr	r1, [pc, #128]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cba6:	e045      	b.n	800cc34 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d026      	beq.n	800cbfe <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cbb0:	4b1c      	ldr	r3, [pc, #112]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f023 0219 	bic.w	r2, r3, #25
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	4919      	ldr	r1, [pc, #100]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cbbe:	4313      	orrs	r3, r2
 800cbc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbc2:	f7f8 fe8b 	bl	80058dc <HAL_GetTick>
 800cbc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cbc8:	e008      	b.n	800cbdc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cbca:	f7f8 fe87 	bl	80058dc <HAL_GetTick>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbd2:	1ad3      	subs	r3, r2, r3
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d901      	bls.n	800cbdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800cbd8:	2303      	movs	r3, #3
 800cbda:	e2a8      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cbdc:	4b11      	ldr	r3, [pc, #68]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0304 	and.w	r3, r3, #4
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0f0      	beq.n	800cbca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbe8:	4b0e      	ldr	r3, [pc, #56]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	691b      	ldr	r3, [r3, #16]
 800cbf4:	061b      	lsls	r3, r3, #24
 800cbf6:	490b      	ldr	r1, [pc, #44]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	604b      	str	r3, [r1, #4]
 800cbfc:	e01a      	b.n	800cc34 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cbfe:	4b09      	ldr	r3, [pc, #36]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a08      	ldr	r2, [pc, #32]	; (800cc24 <HAL_RCC_OscConfig+0x244>)
 800cc04:	f023 0301 	bic.w	r3, r3, #1
 800cc08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc0a:	f7f8 fe67 	bl	80058dc <HAL_GetTick>
 800cc0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cc10:	e00a      	b.n	800cc28 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cc12:	f7f8 fe63 	bl	80058dc <HAL_GetTick>
 800cc16:	4602      	mov	r2, r0
 800cc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1a:	1ad3      	subs	r3, r2, r3
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d903      	bls.n	800cc28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800cc20:	2303      	movs	r3, #3
 800cc22:	e284      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
 800cc24:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cc28:	4b96      	ldr	r3, [pc, #600]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 0304 	and.w	r3, r3, #4
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1ee      	bne.n	800cc12 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f003 0310 	and.w	r3, r3, #16
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d06a      	beq.n	800cd16 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc40:	4b90      	ldr	r3, [pc, #576]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cc42:	691b      	ldr	r3, [r3, #16]
 800cc44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cc4a:	4b8e      	ldr	r3, [pc, #568]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cc4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc4e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	2b08      	cmp	r3, #8
 800cc54:	d007      	beq.n	800cc66 <HAL_RCC_OscConfig+0x286>
 800cc56:	69bb      	ldr	r3, [r7, #24]
 800cc58:	2b18      	cmp	r3, #24
 800cc5a:	d11b      	bne.n	800cc94 <HAL_RCC_OscConfig+0x2b4>
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	f003 0303 	and.w	r3, r3, #3
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d116      	bne.n	800cc94 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cc66:	4b87      	ldr	r3, [pc, #540]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d005      	beq.n	800cc7e <HAL_RCC_OscConfig+0x29e>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	69db      	ldr	r3, [r3, #28]
 800cc76:	2b80      	cmp	r3, #128	; 0x80
 800cc78:	d001      	beq.n	800cc7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	e257      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cc7e:	4b81      	ldr	r3, [pc, #516]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6a1b      	ldr	r3, [r3, #32]
 800cc8a:	061b      	lsls	r3, r3, #24
 800cc8c:	497d      	ldr	r1, [pc, #500]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cc92:	e040      	b.n	800cd16 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	69db      	ldr	r3, [r3, #28]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d023      	beq.n	800cce4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cc9c:	4b79      	ldr	r3, [pc, #484]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4a78      	ldr	r2, [pc, #480]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cca8:	f7f8 fe18 	bl	80058dc <HAL_GetTick>
 800ccac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ccae:	e008      	b.n	800ccc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ccb0:	f7f8 fe14 	bl	80058dc <HAL_GetTick>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	2b02      	cmp	r3, #2
 800ccbc:	d901      	bls.n	800ccc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ccbe:	2303      	movs	r3, #3
 800ccc0:	e235      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ccc2:	4b70      	ldr	r3, [pc, #448]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d0f0      	beq.n	800ccb0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ccce:	4b6d      	ldr	r3, [pc, #436]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	061b      	lsls	r3, r3, #24
 800ccdc:	4969      	ldr	r1, [pc, #420]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ccde:	4313      	orrs	r3, r2
 800cce0:	60cb      	str	r3, [r1, #12]
 800cce2:	e018      	b.n	800cd16 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cce4:	4b67      	ldr	r3, [pc, #412]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a66      	ldr	r2, [pc, #408]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ccea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccf0:	f7f8 fdf4 	bl	80058dc <HAL_GetTick>
 800ccf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ccf6:	e008      	b.n	800cd0a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800ccf8:	f7f8 fdf0 	bl	80058dc <HAL_GetTick>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d901      	bls.n	800cd0a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800cd06:	2303      	movs	r3, #3
 800cd08:	e211      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cd0a:	4b5e      	ldr	r3, [pc, #376]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1f0      	bne.n	800ccf8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f003 0308 	and.w	r3, r3, #8
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d036      	beq.n	800cd90 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	695b      	ldr	r3, [r3, #20]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d019      	beq.n	800cd5e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd2a:	4b56      	ldr	r3, [pc, #344]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cd2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd2e:	4a55      	ldr	r2, [pc, #340]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cd30:	f043 0301 	orr.w	r3, r3, #1
 800cd34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd36:	f7f8 fdd1 	bl	80058dc <HAL_GetTick>
 800cd3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cd3c:	e008      	b.n	800cd50 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd3e:	f7f8 fdcd 	bl	80058dc <HAL_GetTick>
 800cd42:	4602      	mov	r2, r0
 800cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd46:	1ad3      	subs	r3, r2, r3
 800cd48:	2b02      	cmp	r3, #2
 800cd4a:	d901      	bls.n	800cd50 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	e1ee      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cd50:	4b4c      	ldr	r3, [pc, #304]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cd52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd54:	f003 0302 	and.w	r3, r3, #2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d0f0      	beq.n	800cd3e <HAL_RCC_OscConfig+0x35e>
 800cd5c:	e018      	b.n	800cd90 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd5e:	4b49      	ldr	r3, [pc, #292]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cd60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd62:	4a48      	ldr	r2, [pc, #288]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cd64:	f023 0301 	bic.w	r3, r3, #1
 800cd68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd6a:	f7f8 fdb7 	bl	80058dc <HAL_GetTick>
 800cd6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd70:	e008      	b.n	800cd84 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd72:	f7f8 fdb3 	bl	80058dc <HAL_GetTick>
 800cd76:	4602      	mov	r2, r0
 800cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	d901      	bls.n	800cd84 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800cd80:	2303      	movs	r3, #3
 800cd82:	e1d4      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd84:	4b3f      	ldr	r3, [pc, #252]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cd86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd88:	f003 0302 	and.w	r3, r3, #2
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d1f0      	bne.n	800cd72 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 0320 	and.w	r3, r3, #32
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d036      	beq.n	800ce0a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	699b      	ldr	r3, [r3, #24]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d019      	beq.n	800cdd8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cda4:	4b37      	ldr	r3, [pc, #220]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	4a36      	ldr	r2, [pc, #216]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cdaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cdae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cdb0:	f7f8 fd94 	bl	80058dc <HAL_GetTick>
 800cdb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cdb6:	e008      	b.n	800cdca <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800cdb8:	f7f8 fd90 	bl	80058dc <HAL_GetTick>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	2b02      	cmp	r3, #2
 800cdc4:	d901      	bls.n	800cdca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800cdc6:	2303      	movs	r3, #3
 800cdc8:	e1b1      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cdca:	4b2e      	ldr	r3, [pc, #184]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d0f0      	beq.n	800cdb8 <HAL_RCC_OscConfig+0x3d8>
 800cdd6:	e018      	b.n	800ce0a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cdd8:	4b2a      	ldr	r3, [pc, #168]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a29      	ldr	r2, [pc, #164]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800cdde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cde2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cde4:	f7f8 fd7a 	bl	80058dc <HAL_GetTick>
 800cde8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cdea:	e008      	b.n	800cdfe <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800cdec:	f7f8 fd76 	bl	80058dc <HAL_GetTick>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	1ad3      	subs	r3, r2, r3
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d901      	bls.n	800cdfe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800cdfa:	2303      	movs	r3, #3
 800cdfc:	e197      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cdfe:	4b21      	ldr	r3, [pc, #132]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1f0      	bne.n	800cdec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 0304 	and.w	r3, r3, #4
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 8086 	beq.w	800cf24 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ce18:	4b1b      	ldr	r3, [pc, #108]	; (800ce88 <HAL_RCC_OscConfig+0x4a8>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a1a      	ldr	r2, [pc, #104]	; (800ce88 <HAL_RCC_OscConfig+0x4a8>)
 800ce1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ce24:	f7f8 fd5a 	bl	80058dc <HAL_GetTick>
 800ce28:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce2a:	e008      	b.n	800ce3e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ce2c:	f7f8 fd56 	bl	80058dc <HAL_GetTick>
 800ce30:	4602      	mov	r2, r0
 800ce32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce34:	1ad3      	subs	r3, r2, r3
 800ce36:	2b64      	cmp	r3, #100	; 0x64
 800ce38:	d901      	bls.n	800ce3e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ce3a:	2303      	movs	r3, #3
 800ce3c:	e177      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce3e:	4b12      	ldr	r3, [pc, #72]	; (800ce88 <HAL_RCC_OscConfig+0x4a8>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d0f0      	beq.n	800ce2c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d106      	bne.n	800ce60 <HAL_RCC_OscConfig+0x480>
 800ce52:	4b0c      	ldr	r3, [pc, #48]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ce54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce56:	4a0b      	ldr	r2, [pc, #44]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ce58:	f043 0301 	orr.w	r3, r3, #1
 800ce5c:	6713      	str	r3, [r2, #112]	; 0x70
 800ce5e:	e032      	b.n	800cec6 <HAL_RCC_OscConfig+0x4e6>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d111      	bne.n	800ce8c <HAL_RCC_OscConfig+0x4ac>
 800ce68:	4b06      	ldr	r3, [pc, #24]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ce6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce6c:	4a05      	ldr	r2, [pc, #20]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ce6e:	f023 0301 	bic.w	r3, r3, #1
 800ce72:	6713      	str	r3, [r2, #112]	; 0x70
 800ce74:	4b03      	ldr	r3, [pc, #12]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ce76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce78:	4a02      	ldr	r2, [pc, #8]	; (800ce84 <HAL_RCC_OscConfig+0x4a4>)
 800ce7a:	f023 0304 	bic.w	r3, r3, #4
 800ce7e:	6713      	str	r3, [r2, #112]	; 0x70
 800ce80:	e021      	b.n	800cec6 <HAL_RCC_OscConfig+0x4e6>
 800ce82:	bf00      	nop
 800ce84:	58024400 	.word	0x58024400
 800ce88:	58024800 	.word	0x58024800
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	689b      	ldr	r3, [r3, #8]
 800ce90:	2b05      	cmp	r3, #5
 800ce92:	d10c      	bne.n	800ceae <HAL_RCC_OscConfig+0x4ce>
 800ce94:	4b83      	ldr	r3, [pc, #524]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800ce96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce98:	4a82      	ldr	r2, [pc, #520]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800ce9a:	f043 0304 	orr.w	r3, r3, #4
 800ce9e:	6713      	str	r3, [r2, #112]	; 0x70
 800cea0:	4b80      	ldr	r3, [pc, #512]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea4:	4a7f      	ldr	r2, [pc, #508]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cea6:	f043 0301 	orr.w	r3, r3, #1
 800ceaa:	6713      	str	r3, [r2, #112]	; 0x70
 800ceac:	e00b      	b.n	800cec6 <HAL_RCC_OscConfig+0x4e6>
 800ceae:	4b7d      	ldr	r3, [pc, #500]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800ceb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb2:	4a7c      	ldr	r2, [pc, #496]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800ceb4:	f023 0301 	bic.w	r3, r3, #1
 800ceb8:	6713      	str	r3, [r2, #112]	; 0x70
 800ceba:	4b7a      	ldr	r3, [pc, #488]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebe:	4a79      	ldr	r2, [pc, #484]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cec0:	f023 0304 	bic.w	r3, r3, #4
 800cec4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d015      	beq.n	800cefa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cece:	f7f8 fd05 	bl	80058dc <HAL_GetTick>
 800ced2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ced4:	e00a      	b.n	800ceec <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ced6:	f7f8 fd01 	bl	80058dc <HAL_GetTick>
 800ceda:	4602      	mov	r2, r0
 800cedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cede:	1ad3      	subs	r3, r2, r3
 800cee0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d901      	bls.n	800ceec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800cee8:	2303      	movs	r3, #3
 800ceea:	e120      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ceec:	4b6d      	ldr	r3, [pc, #436]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800ceee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef0:	f003 0302 	and.w	r3, r3, #2
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0ee      	beq.n	800ced6 <HAL_RCC_OscConfig+0x4f6>
 800cef8:	e014      	b.n	800cf24 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cefa:	f7f8 fcef 	bl	80058dc <HAL_GetTick>
 800cefe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cf00:	e00a      	b.n	800cf18 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf02:	f7f8 fceb 	bl	80058dc <HAL_GetTick>
 800cf06:	4602      	mov	r2, r0
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	1ad3      	subs	r3, r2, r3
 800cf0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d901      	bls.n	800cf18 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800cf14:	2303      	movs	r3, #3
 800cf16:	e10a      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cf18:	4b62      	ldr	r3, [pc, #392]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cf1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf1c:	f003 0302 	and.w	r3, r3, #2
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d1ee      	bne.n	800cf02 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	f000 80ff 	beq.w	800d12c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cf2e:	4b5d      	ldr	r3, [pc, #372]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf36:	2b18      	cmp	r3, #24
 800cf38:	f000 80ba 	beq.w	800d0b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	f040 8095 	bne.w	800d070 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf46:	4b57      	ldr	r3, [pc, #348]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a56      	ldr	r2, [pc, #344]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cf4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf52:	f7f8 fcc3 	bl	80058dc <HAL_GetTick>
 800cf56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf58:	e008      	b.n	800cf6c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf5a:	f7f8 fcbf 	bl	80058dc <HAL_GetTick>
 800cf5e:	4602      	mov	r2, r0
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	2b02      	cmp	r3, #2
 800cf66:	d901      	bls.n	800cf6c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e0e0      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf6c:	4b4d      	ldr	r3, [pc, #308]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1f0      	bne.n	800cf5a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf78:	4b4a      	ldr	r3, [pc, #296]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cf7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf7c:	4b4a      	ldr	r3, [pc, #296]	; (800d0a8 <HAL_RCC_OscConfig+0x6c8>)
 800cf7e:	4013      	ands	r3, r2
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cf88:	0112      	lsls	r2, r2, #4
 800cf8a:	430a      	orrs	r2, r1
 800cf8c:	4945      	ldr	r1, [pc, #276]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cf8e:	4313      	orrs	r3, r2
 800cf90:	628b      	str	r3, [r1, #40]	; 0x28
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf96:	3b01      	subs	r3, #1
 800cf98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa0:	3b01      	subs	r3, #1
 800cfa2:	025b      	lsls	r3, r3, #9
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfac:	3b01      	subs	r3, #1
 800cfae:	041b      	lsls	r3, r3, #16
 800cfb0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cfb4:	431a      	orrs	r2, r3
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfba:	3b01      	subs	r3, #1
 800cfbc:	061b      	lsls	r3, r3, #24
 800cfbe:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cfc2:	4938      	ldr	r1, [pc, #224]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800cfc8:	4b36      	ldr	r3, [pc, #216]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfcc:	4a35      	ldr	r2, [pc, #212]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cfce:	f023 0301 	bic.w	r3, r3, #1
 800cfd2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cfd4:	4b33      	ldr	r3, [pc, #204]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cfd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfd8:	4b34      	ldr	r3, [pc, #208]	; (800d0ac <HAL_RCC_OscConfig+0x6cc>)
 800cfda:	4013      	ands	r3, r2
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cfe0:	00d2      	lsls	r2, r2, #3
 800cfe2:	4930      	ldr	r1, [pc, #192]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cfe4:	4313      	orrs	r3, r2
 800cfe6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cfe8:	4b2e      	ldr	r3, [pc, #184]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cfea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfec:	f023 020c 	bic.w	r2, r3, #12
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cff4:	492b      	ldr	r1, [pc, #172]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cff6:	4313      	orrs	r3, r2
 800cff8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800cffa:	4b2a      	ldr	r3, [pc, #168]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800cffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffe:	f023 0202 	bic.w	r2, r3, #2
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d006:	4927      	ldr	r1, [pc, #156]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d008:	4313      	orrs	r3, r2
 800d00a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d00c:	4b25      	ldr	r3, [pc, #148]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d010:	4a24      	ldr	r2, [pc, #144]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d012:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d018:	4b22      	ldr	r3, [pc, #136]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d01c:	4a21      	ldr	r2, [pc, #132]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d01e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d024:	4b1f      	ldr	r3, [pc, #124]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d028:	4a1e      	ldr	r2, [pc, #120]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d02a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d02e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800d030:	4b1c      	ldr	r3, [pc, #112]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d034:	4a1b      	ldr	r2, [pc, #108]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d036:	f043 0301 	orr.w	r3, r3, #1
 800d03a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d03c:	4b19      	ldr	r3, [pc, #100]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a18      	ldr	r2, [pc, #96]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d048:	f7f8 fc48 	bl	80058dc <HAL_GetTick>
 800d04c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d04e:	e008      	b.n	800d062 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d050:	f7f8 fc44 	bl	80058dc <HAL_GetTick>
 800d054:	4602      	mov	r2, r0
 800d056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d058:	1ad3      	subs	r3, r2, r3
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d901      	bls.n	800d062 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d05e:	2303      	movs	r3, #3
 800d060:	e065      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d062:	4b10      	ldr	r3, [pc, #64]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d0f0      	beq.n	800d050 <HAL_RCC_OscConfig+0x670>
 800d06e:	e05d      	b.n	800d12c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d070:	4b0c      	ldr	r3, [pc, #48]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a0b      	ldr	r2, [pc, #44]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d07a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d07c:	f7f8 fc2e 	bl	80058dc <HAL_GetTick>
 800d080:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d082:	e008      	b.n	800d096 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d084:	f7f8 fc2a 	bl	80058dc <HAL_GetTick>
 800d088:	4602      	mov	r2, r0
 800d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08c:	1ad3      	subs	r3, r2, r3
 800d08e:	2b02      	cmp	r3, #2
 800d090:	d901      	bls.n	800d096 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d092:	2303      	movs	r3, #3
 800d094:	e04b      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d096:	4b03      	ldr	r3, [pc, #12]	; (800d0a4 <HAL_RCC_OscConfig+0x6c4>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1f0      	bne.n	800d084 <HAL_RCC_OscConfig+0x6a4>
 800d0a2:	e043      	b.n	800d12c <HAL_RCC_OscConfig+0x74c>
 800d0a4:	58024400 	.word	0x58024400
 800d0a8:	fffffc0c 	.word	0xfffffc0c
 800d0ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d0b0:	4b21      	ldr	r3, [pc, #132]	; (800d138 <HAL_RCC_OscConfig+0x758>)
 800d0b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d0b6:	4b20      	ldr	r3, [pc, #128]	; (800d138 <HAL_RCC_OscConfig+0x758>)
 800d0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c0:	2b01      	cmp	r3, #1
 800d0c2:	d031      	beq.n	800d128 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	f003 0203 	and.w	r2, r3, #3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d12a      	bne.n	800d128 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	091b      	lsrs	r3, r3, #4
 800d0d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0de:	429a      	cmp	r2, r3
 800d0e0:	d122      	bne.n	800d128 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d11a      	bne.n	800d128 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	0a5b      	lsrs	r3, r3, #9
 800d0f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d100:	429a      	cmp	r2, r3
 800d102:	d111      	bne.n	800d128 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	0c1b      	lsrs	r3, r3, #16
 800d108:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d110:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d112:	429a      	cmp	r2, r3
 800d114:	d108      	bne.n	800d128 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	0e1b      	lsrs	r3, r3, #24
 800d11a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d122:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d124:	429a      	cmp	r2, r3
 800d126:	d001      	beq.n	800d12c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	e000      	b.n	800d12e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3730      	adds	r7, #48	; 0x30
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
 800d136:	bf00      	nop
 800d138:	58024400 	.word	0x58024400

0800d13c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b086      	sub	sp, #24
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d101      	bne.n	800d150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	e19c      	b.n	800d48a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d150:	4b8a      	ldr	r3, [pc, #552]	; (800d37c <HAL_RCC_ClockConfig+0x240>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 030f 	and.w	r3, r3, #15
 800d158:	683a      	ldr	r2, [r7, #0]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d910      	bls.n	800d180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d15e:	4b87      	ldr	r3, [pc, #540]	; (800d37c <HAL_RCC_ClockConfig+0x240>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f023 020f 	bic.w	r2, r3, #15
 800d166:	4985      	ldr	r1, [pc, #532]	; (800d37c <HAL_RCC_ClockConfig+0x240>)
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	4313      	orrs	r3, r2
 800d16c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d16e:	4b83      	ldr	r3, [pc, #524]	; (800d37c <HAL_RCC_ClockConfig+0x240>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f003 030f 	and.w	r3, r3, #15
 800d176:	683a      	ldr	r2, [r7, #0]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d001      	beq.n	800d180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e184      	b.n	800d48a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f003 0304 	and.w	r3, r3, #4
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d010      	beq.n	800d1ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	691a      	ldr	r2, [r3, #16]
 800d190:	4b7b      	ldr	r3, [pc, #492]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d192:	699b      	ldr	r3, [r3, #24]
 800d194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d198:	429a      	cmp	r2, r3
 800d19a:	d908      	bls.n	800d1ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d19c:	4b78      	ldr	r3, [pc, #480]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d19e:	699b      	ldr	r3, [r3, #24]
 800d1a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	4975      	ldr	r1, [pc, #468]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f003 0308 	and.w	r3, r3, #8
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d010      	beq.n	800d1dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	695a      	ldr	r2, [r3, #20]
 800d1be:	4b70      	ldr	r3, [pc, #448]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d1c0:	69db      	ldr	r3, [r3, #28]
 800d1c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d908      	bls.n	800d1dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d1ca:	4b6d      	ldr	r3, [pc, #436]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d1cc:	69db      	ldr	r3, [r3, #28]
 800d1ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	695b      	ldr	r3, [r3, #20]
 800d1d6:	496a      	ldr	r1, [pc, #424]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 0310 	and.w	r3, r3, #16
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d010      	beq.n	800d20a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	699a      	ldr	r2, [r3, #24]
 800d1ec:	4b64      	ldr	r3, [pc, #400]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d1ee:	69db      	ldr	r3, [r3, #28]
 800d1f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d908      	bls.n	800d20a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d1f8:	4b61      	ldr	r3, [pc, #388]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d1fa:	69db      	ldr	r3, [r3, #28]
 800d1fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	699b      	ldr	r3, [r3, #24]
 800d204:	495e      	ldr	r1, [pc, #376]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d206:	4313      	orrs	r3, r2
 800d208:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 0320 	and.w	r3, r3, #32
 800d212:	2b00      	cmp	r3, #0
 800d214:	d010      	beq.n	800d238 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	69da      	ldr	r2, [r3, #28]
 800d21a:	4b59      	ldr	r3, [pc, #356]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d21c:	6a1b      	ldr	r3, [r3, #32]
 800d21e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d222:	429a      	cmp	r2, r3
 800d224:	d908      	bls.n	800d238 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d226:	4b56      	ldr	r3, [pc, #344]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d228:	6a1b      	ldr	r3, [r3, #32]
 800d22a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	69db      	ldr	r3, [r3, #28]
 800d232:	4953      	ldr	r1, [pc, #332]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d234:	4313      	orrs	r3, r2
 800d236:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f003 0302 	and.w	r3, r3, #2
 800d240:	2b00      	cmp	r3, #0
 800d242:	d010      	beq.n	800d266 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	68da      	ldr	r2, [r3, #12]
 800d248:	4b4d      	ldr	r3, [pc, #308]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d24a:	699b      	ldr	r3, [r3, #24]
 800d24c:	f003 030f 	and.w	r3, r3, #15
 800d250:	429a      	cmp	r2, r3
 800d252:	d908      	bls.n	800d266 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d254:	4b4a      	ldr	r3, [pc, #296]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	f023 020f 	bic.w	r2, r3, #15
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	4947      	ldr	r1, [pc, #284]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d262:	4313      	orrs	r3, r2
 800d264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f003 0301 	and.w	r3, r3, #1
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d055      	beq.n	800d31e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d272:	4b43      	ldr	r3, [pc, #268]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d274:	699b      	ldr	r3, [r3, #24]
 800d276:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	689b      	ldr	r3, [r3, #8]
 800d27e:	4940      	ldr	r1, [pc, #256]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d280:	4313      	orrs	r3, r2
 800d282:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d107      	bne.n	800d29c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d28c:	4b3c      	ldr	r3, [pc, #240]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d294:	2b00      	cmp	r3, #0
 800d296:	d121      	bne.n	800d2dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d298:	2301      	movs	r3, #1
 800d29a:	e0f6      	b.n	800d48a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	2b03      	cmp	r3, #3
 800d2a2:	d107      	bne.n	800d2b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2a4:	4b36      	ldr	r3, [pc, #216]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d115      	bne.n	800d2dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e0ea      	b.n	800d48a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d107      	bne.n	800d2cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d2bc:	4b30      	ldr	r3, [pc, #192]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d109      	bne.n	800d2dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	e0de      	b.n	800d48a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d2cc:	4b2c      	ldr	r3, [pc, #176]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f003 0304 	and.w	r3, r3, #4
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d101      	bne.n	800d2dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	e0d6      	b.n	800d48a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d2dc:	4b28      	ldr	r3, [pc, #160]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d2de:	691b      	ldr	r3, [r3, #16]
 800d2e0:	f023 0207 	bic.w	r2, r3, #7
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	4925      	ldr	r1, [pc, #148]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d2ea:	4313      	orrs	r3, r2
 800d2ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2ee:	f7f8 faf5 	bl	80058dc <HAL_GetTick>
 800d2f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2f4:	e00a      	b.n	800d30c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2f6:	f7f8 faf1 	bl	80058dc <HAL_GetTick>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	1ad3      	subs	r3, r2, r3
 800d300:	f241 3288 	movw	r2, #5000	; 0x1388
 800d304:	4293      	cmp	r3, r2
 800d306:	d901      	bls.n	800d30c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800d308:	2303      	movs	r3, #3
 800d30a:	e0be      	b.n	800d48a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d30c:	4b1c      	ldr	r3, [pc, #112]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d30e:	691b      	ldr	r3, [r3, #16]
 800d310:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	685b      	ldr	r3, [r3, #4]
 800d318:	00db      	lsls	r3, r3, #3
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d1eb      	bne.n	800d2f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f003 0302 	and.w	r3, r3, #2
 800d326:	2b00      	cmp	r3, #0
 800d328:	d010      	beq.n	800d34c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	68da      	ldr	r2, [r3, #12]
 800d32e:	4b14      	ldr	r3, [pc, #80]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d330:	699b      	ldr	r3, [r3, #24]
 800d332:	f003 030f 	and.w	r3, r3, #15
 800d336:	429a      	cmp	r2, r3
 800d338:	d208      	bcs.n	800d34c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d33a:	4b11      	ldr	r3, [pc, #68]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d33c:	699b      	ldr	r3, [r3, #24]
 800d33e:	f023 020f 	bic.w	r2, r3, #15
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	68db      	ldr	r3, [r3, #12]
 800d346:	490e      	ldr	r1, [pc, #56]	; (800d380 <HAL_RCC_ClockConfig+0x244>)
 800d348:	4313      	orrs	r3, r2
 800d34a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d34c:	4b0b      	ldr	r3, [pc, #44]	; (800d37c <HAL_RCC_ClockConfig+0x240>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 030f 	and.w	r3, r3, #15
 800d354:	683a      	ldr	r2, [r7, #0]
 800d356:	429a      	cmp	r2, r3
 800d358:	d214      	bcs.n	800d384 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d35a:	4b08      	ldr	r3, [pc, #32]	; (800d37c <HAL_RCC_ClockConfig+0x240>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	f023 020f 	bic.w	r2, r3, #15
 800d362:	4906      	ldr	r1, [pc, #24]	; (800d37c <HAL_RCC_ClockConfig+0x240>)
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	4313      	orrs	r3, r2
 800d368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d36a:	4b04      	ldr	r3, [pc, #16]	; (800d37c <HAL_RCC_ClockConfig+0x240>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f003 030f 	and.w	r3, r3, #15
 800d372:	683a      	ldr	r2, [r7, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d005      	beq.n	800d384 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d378:	2301      	movs	r3, #1
 800d37a:	e086      	b.n	800d48a <HAL_RCC_ClockConfig+0x34e>
 800d37c:	52002000 	.word	0x52002000
 800d380:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f003 0304 	and.w	r3, r3, #4
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d010      	beq.n	800d3b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	691a      	ldr	r2, [r3, #16]
 800d394:	4b3f      	ldr	r3, [pc, #252]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d396:	699b      	ldr	r3, [r3, #24]
 800d398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d208      	bcs.n	800d3b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d3a0:	4b3c      	ldr	r3, [pc, #240]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d3a2:	699b      	ldr	r3, [r3, #24]
 800d3a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	4939      	ldr	r1, [pc, #228]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f003 0308 	and.w	r3, r3, #8
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d010      	beq.n	800d3e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	695a      	ldr	r2, [r3, #20]
 800d3c2:	4b34      	ldr	r3, [pc, #208]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d3c4:	69db      	ldr	r3, [r3, #28]
 800d3c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d208      	bcs.n	800d3e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d3ce:	4b31      	ldr	r3, [pc, #196]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d3d0:	69db      	ldr	r3, [r3, #28]
 800d3d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	695b      	ldr	r3, [r3, #20]
 800d3da:	492e      	ldr	r1, [pc, #184]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f003 0310 	and.w	r3, r3, #16
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d010      	beq.n	800d40e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	699a      	ldr	r2, [r3, #24]
 800d3f0:	4b28      	ldr	r3, [pc, #160]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d3f2:	69db      	ldr	r3, [r3, #28]
 800d3f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d208      	bcs.n	800d40e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d3fc:	4b25      	ldr	r3, [pc, #148]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d3fe:	69db      	ldr	r3, [r3, #28]
 800d400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	4922      	ldr	r1, [pc, #136]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d40a:	4313      	orrs	r3, r2
 800d40c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f003 0320 	and.w	r3, r3, #32
 800d416:	2b00      	cmp	r3, #0
 800d418:	d010      	beq.n	800d43c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	69da      	ldr	r2, [r3, #28]
 800d41e:	4b1d      	ldr	r3, [pc, #116]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d426:	429a      	cmp	r2, r3
 800d428:	d208      	bcs.n	800d43c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d42a:	4b1a      	ldr	r3, [pc, #104]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d42c:	6a1b      	ldr	r3, [r3, #32]
 800d42e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	69db      	ldr	r3, [r3, #28]
 800d436:	4917      	ldr	r1, [pc, #92]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d438:	4313      	orrs	r3, r2
 800d43a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d43c:	f000 f834 	bl	800d4a8 <HAL_RCC_GetSysClockFreq>
 800d440:	4602      	mov	r2, r0
 800d442:	4b14      	ldr	r3, [pc, #80]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d444:	699b      	ldr	r3, [r3, #24]
 800d446:	0a1b      	lsrs	r3, r3, #8
 800d448:	f003 030f 	and.w	r3, r3, #15
 800d44c:	4912      	ldr	r1, [pc, #72]	; (800d498 <HAL_RCC_ClockConfig+0x35c>)
 800d44e:	5ccb      	ldrb	r3, [r1, r3]
 800d450:	f003 031f 	and.w	r3, r3, #31
 800d454:	fa22 f303 	lsr.w	r3, r2, r3
 800d458:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d45a:	4b0e      	ldr	r3, [pc, #56]	; (800d494 <HAL_RCC_ClockConfig+0x358>)
 800d45c:	699b      	ldr	r3, [r3, #24]
 800d45e:	f003 030f 	and.w	r3, r3, #15
 800d462:	4a0d      	ldr	r2, [pc, #52]	; (800d498 <HAL_RCC_ClockConfig+0x35c>)
 800d464:	5cd3      	ldrb	r3, [r2, r3]
 800d466:	f003 031f 	and.w	r3, r3, #31
 800d46a:	693a      	ldr	r2, [r7, #16]
 800d46c:	fa22 f303 	lsr.w	r3, r2, r3
 800d470:	4a0a      	ldr	r2, [pc, #40]	; (800d49c <HAL_RCC_ClockConfig+0x360>)
 800d472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d474:	4a0a      	ldr	r2, [pc, #40]	; (800d4a0 <HAL_RCC_ClockConfig+0x364>)
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800d47a:	4b0a      	ldr	r3, [pc, #40]	; (800d4a4 <HAL_RCC_ClockConfig+0x368>)
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4618      	mov	r0, r3
 800d480:	f7f8 f9e2 	bl	8005848 <HAL_InitTick>
 800d484:	4603      	mov	r3, r0
 800d486:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d488:	7bfb      	ldrb	r3, [r7, #15]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3718      	adds	r7, #24
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	58024400 	.word	0x58024400
 800d498:	08015bb8 	.word	0x08015bb8
 800d49c:	20000004 	.word	0x20000004
 800d4a0:	20000000 	.word	0x20000000
 800d4a4:	20000008 	.word	0x20000008

0800d4a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b089      	sub	sp, #36	; 0x24
 800d4ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d4ae:	4bb3      	ldr	r3, [pc, #716]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4b0:	691b      	ldr	r3, [r3, #16]
 800d4b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d4b6:	2b18      	cmp	r3, #24
 800d4b8:	f200 8155 	bhi.w	800d766 <HAL_RCC_GetSysClockFreq+0x2be>
 800d4bc:	a201      	add	r2, pc, #4	; (adr r2, 800d4c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c2:	bf00      	nop
 800d4c4:	0800d529 	.word	0x0800d529
 800d4c8:	0800d767 	.word	0x0800d767
 800d4cc:	0800d767 	.word	0x0800d767
 800d4d0:	0800d767 	.word	0x0800d767
 800d4d4:	0800d767 	.word	0x0800d767
 800d4d8:	0800d767 	.word	0x0800d767
 800d4dc:	0800d767 	.word	0x0800d767
 800d4e0:	0800d767 	.word	0x0800d767
 800d4e4:	0800d54f 	.word	0x0800d54f
 800d4e8:	0800d767 	.word	0x0800d767
 800d4ec:	0800d767 	.word	0x0800d767
 800d4f0:	0800d767 	.word	0x0800d767
 800d4f4:	0800d767 	.word	0x0800d767
 800d4f8:	0800d767 	.word	0x0800d767
 800d4fc:	0800d767 	.word	0x0800d767
 800d500:	0800d767 	.word	0x0800d767
 800d504:	0800d555 	.word	0x0800d555
 800d508:	0800d767 	.word	0x0800d767
 800d50c:	0800d767 	.word	0x0800d767
 800d510:	0800d767 	.word	0x0800d767
 800d514:	0800d767 	.word	0x0800d767
 800d518:	0800d767 	.word	0x0800d767
 800d51c:	0800d767 	.word	0x0800d767
 800d520:	0800d767 	.word	0x0800d767
 800d524:	0800d55b 	.word	0x0800d55b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d528:	4b94      	ldr	r3, [pc, #592]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f003 0320 	and.w	r3, r3, #32
 800d530:	2b00      	cmp	r3, #0
 800d532:	d009      	beq.n	800d548 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d534:	4b91      	ldr	r3, [pc, #580]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	08db      	lsrs	r3, r3, #3
 800d53a:	f003 0303 	and.w	r3, r3, #3
 800d53e:	4a90      	ldr	r2, [pc, #576]	; (800d780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d540:	fa22 f303 	lsr.w	r3, r2, r3
 800d544:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800d546:	e111      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d548:	4b8d      	ldr	r3, [pc, #564]	; (800d780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d54a:	61bb      	str	r3, [r7, #24]
    break;
 800d54c:	e10e      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800d54e:	4b8d      	ldr	r3, [pc, #564]	; (800d784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d550:	61bb      	str	r3, [r7, #24]
    break;
 800d552:	e10b      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800d554:	4b8c      	ldr	r3, [pc, #560]	; (800d788 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d556:	61bb      	str	r3, [r7, #24]
    break;
 800d558:	e108      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d55a:	4b88      	ldr	r3, [pc, #544]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d55e:	f003 0303 	and.w	r3, r3, #3
 800d562:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800d564:	4b85      	ldr	r3, [pc, #532]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d568:	091b      	lsrs	r3, r3, #4
 800d56a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d56e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d570:	4b82      	ldr	r3, [pc, #520]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d574:	f003 0301 	and.w	r3, r3, #1
 800d578:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d57a:	4b80      	ldr	r3, [pc, #512]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d57e:	08db      	lsrs	r3, r3, #3
 800d580:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	fb02 f303 	mul.w	r3, r2, r3
 800d58a:	ee07 3a90 	vmov	s15, r3
 800d58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d592:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f000 80e1 	beq.w	800d760 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	f000 8083 	beq.w	800d6ac <HAL_RCC_GetSysClockFreq+0x204>
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	f200 80a1 	bhi.w	800d6f0 <HAL_RCC_GetSysClockFreq+0x248>
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d003      	beq.n	800d5bc <HAL_RCC_GetSysClockFreq+0x114>
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	2b01      	cmp	r3, #1
 800d5b8:	d056      	beq.n	800d668 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d5ba:	e099      	b.n	800d6f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5bc:	4b6f      	ldr	r3, [pc, #444]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	f003 0320 	and.w	r3, r3, #32
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d02d      	beq.n	800d624 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d5c8:	4b6c      	ldr	r3, [pc, #432]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	08db      	lsrs	r3, r3, #3
 800d5ce:	f003 0303 	and.w	r3, r3, #3
 800d5d2:	4a6b      	ldr	r2, [pc, #428]	; (800d780 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d5d4:	fa22 f303 	lsr.w	r3, r2, r3
 800d5d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	ee07 3a90 	vmov	s15, r3
 800d5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	ee07 3a90 	vmov	s15, r3
 800d5ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5f2:	4b62      	ldr	r3, [pc, #392]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5fa:	ee07 3a90 	vmov	s15, r3
 800d5fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d602:	ed97 6a02 	vldr	s12, [r7, #8]
 800d606:	eddf 5a61 	vldr	s11, [pc, #388]	; 800d78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d60a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d60e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d612:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d616:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d61a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d61e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800d622:	e087      	b.n	800d734 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	ee07 3a90 	vmov	s15, r3
 800d62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d62e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800d790 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d636:	4b51      	ldr	r3, [pc, #324]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d63e:	ee07 3a90 	vmov	s15, r3
 800d642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d646:	ed97 6a02 	vldr	s12, [r7, #8]
 800d64a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800d78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d64e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d65a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d65e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d662:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d666:	e065      	b.n	800d734 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	ee07 3a90 	vmov	s15, r3
 800d66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d672:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d794 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d67a:	4b40      	ldr	r3, [pc, #256]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d682:	ee07 3a90 	vmov	s15, r3
 800d686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d68a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d68e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d69a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d69e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6aa:	e043      	b.n	800d734 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	ee07 3a90 	vmov	s15, r3
 800d6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800d798 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6be:	4b2f      	ldr	r3, [pc, #188]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6c6:	ee07 3a90 	vmov	s15, r3
 800d6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800d6d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6ee:	e021      	b.n	800d734 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d6f0:	693b      	ldr	r3, [r7, #16]
 800d6f2:	ee07 3a90 	vmov	s15, r3
 800d6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d794 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d702:	4b1e      	ldr	r3, [pc, #120]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d70a:	ee07 3a90 	vmov	s15, r3
 800d70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d712:	ed97 6a02 	vldr	s12, [r7, #8]
 800d716:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d78c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d72e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d732:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800d734:	4b11      	ldr	r3, [pc, #68]	; (800d77c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d738:	0a5b      	lsrs	r3, r3, #9
 800d73a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d73e:	3301      	adds	r3, #1
 800d740:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	ee07 3a90 	vmov	s15, r3
 800d748:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d74c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d758:	ee17 3a90 	vmov	r3, s15
 800d75c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800d75e:	e005      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800d760:	2300      	movs	r3, #0
 800d762:	61bb      	str	r3, [r7, #24]
    break;
 800d764:	e002      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800d766:	4b07      	ldr	r3, [pc, #28]	; (800d784 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d768:	61bb      	str	r3, [r7, #24]
    break;
 800d76a:	bf00      	nop
  }

  return sysclockfreq;
 800d76c:	69bb      	ldr	r3, [r7, #24]
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3724      	adds	r7, #36	; 0x24
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop
 800d77c:	58024400 	.word	0x58024400
 800d780:	03d09000 	.word	0x03d09000
 800d784:	003d0900 	.word	0x003d0900
 800d788:	017d7840 	.word	0x017d7840
 800d78c:	46000000 	.word	0x46000000
 800d790:	4c742400 	.word	0x4c742400
 800d794:	4a742400 	.word	0x4a742400
 800d798:	4bbebc20 	.word	0x4bbebc20

0800d79c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d7a2:	f7ff fe81 	bl	800d4a8 <HAL_RCC_GetSysClockFreq>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	4b10      	ldr	r3, [pc, #64]	; (800d7ec <HAL_RCC_GetHCLKFreq+0x50>)
 800d7aa:	699b      	ldr	r3, [r3, #24]
 800d7ac:	0a1b      	lsrs	r3, r3, #8
 800d7ae:	f003 030f 	and.w	r3, r3, #15
 800d7b2:	490f      	ldr	r1, [pc, #60]	; (800d7f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d7b4:	5ccb      	ldrb	r3, [r1, r3]
 800d7b6:	f003 031f 	and.w	r3, r3, #31
 800d7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800d7be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d7c0:	4b0a      	ldr	r3, [pc, #40]	; (800d7ec <HAL_RCC_GetHCLKFreq+0x50>)
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	f003 030f 	and.w	r3, r3, #15
 800d7c8:	4a09      	ldr	r2, [pc, #36]	; (800d7f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d7ca:	5cd3      	ldrb	r3, [r2, r3]
 800d7cc:	f003 031f 	and.w	r3, r3, #31
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d7d6:	4a07      	ldr	r2, [pc, #28]	; (800d7f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d7d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d7da:	4a07      	ldr	r2, [pc, #28]	; (800d7f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d7e0:	4b04      	ldr	r3, [pc, #16]	; (800d7f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d7e2:	681b      	ldr	r3, [r3, #0]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	58024400 	.word	0x58024400
 800d7f0:	08015bb8 	.word	0x08015bb8
 800d7f4:	20000004 	.word	0x20000004
 800d7f8:	20000000 	.word	0x20000000

0800d7fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d800:	f7ff ffcc 	bl	800d79c <HAL_RCC_GetHCLKFreq>
 800d804:	4602      	mov	r2, r0
 800d806:	4b06      	ldr	r3, [pc, #24]	; (800d820 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d808:	69db      	ldr	r3, [r3, #28]
 800d80a:	091b      	lsrs	r3, r3, #4
 800d80c:	f003 0307 	and.w	r3, r3, #7
 800d810:	4904      	ldr	r1, [pc, #16]	; (800d824 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d812:	5ccb      	ldrb	r3, [r1, r3]
 800d814:	f003 031f 	and.w	r3, r3, #31
 800d818:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	58024400 	.word	0x58024400
 800d824:	08015bb8 	.word	0x08015bb8

0800d828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d82c:	f7ff ffb6 	bl	800d79c <HAL_RCC_GetHCLKFreq>
 800d830:	4602      	mov	r2, r0
 800d832:	4b06      	ldr	r3, [pc, #24]	; (800d84c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	0a1b      	lsrs	r3, r3, #8
 800d838:	f003 0307 	and.w	r3, r3, #7
 800d83c:	4904      	ldr	r1, [pc, #16]	; (800d850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d83e:	5ccb      	ldrb	r3, [r1, r3]
 800d840:	f003 031f 	and.w	r3, r3, #31
 800d844:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d848:	4618      	mov	r0, r3
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	58024400 	.word	0x58024400
 800d850:	08015bb8 	.word	0x08015bb8

0800d854 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b086      	sub	sp, #24
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d85c:	2300      	movs	r3, #0
 800d85e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d860:	2300      	movs	r3, #0
 800d862:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d03f      	beq.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d874:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d878:	d02a      	beq.n	800d8d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800d87a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d87e:	d824      	bhi.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d880:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d884:	d018      	beq.n	800d8b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d88a:	d81e      	bhi.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d003      	beq.n	800d898 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800d890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d894:	d007      	beq.n	800d8a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800d896:	e018      	b.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d898:	4ba4      	ldr	r3, [pc, #656]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d89c:	4aa3      	ldr	r2, [pc, #652]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d89e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d8a4:	e015      	b.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	3304      	adds	r3, #4
 800d8aa:	2102      	movs	r1, #2
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f001 ff01 	bl	800f6b4 <RCCEx_PLL2_Config>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d8b6:	e00c      	b.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	3324      	adds	r3, #36	; 0x24
 800d8bc:	2102      	movs	r1, #2
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f001 ffaa 	bl	800f818 <RCCEx_PLL3_Config>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800d8c8:	e003      	b.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	75fb      	strb	r3, [r7, #23]
      break;
 800d8ce:	e000      	b.n	800d8d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800d8d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d109      	bne.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d8d8:	4b94      	ldr	r3, [pc, #592]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8e4:	4991      	ldr	r1, [pc, #580]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	650b      	str	r3, [r1, #80]	; 0x50
 800d8ea:	e001      	b.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8ec:	7dfb      	ldrb	r3, [r7, #23]
 800d8ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d03d      	beq.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d900:	2b04      	cmp	r3, #4
 800d902:	d826      	bhi.n	800d952 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800d904:	a201      	add	r2, pc, #4	; (adr r2, 800d90c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800d906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d90a:	bf00      	nop
 800d90c:	0800d921 	.word	0x0800d921
 800d910:	0800d92f 	.word	0x0800d92f
 800d914:	0800d941 	.word	0x0800d941
 800d918:	0800d959 	.word	0x0800d959
 800d91c:	0800d959 	.word	0x0800d959
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d920:	4b82      	ldr	r3, [pc, #520]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d924:	4a81      	ldr	r2, [pc, #516]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d92a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d92c:	e015      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	3304      	adds	r3, #4
 800d932:	2100      	movs	r1, #0
 800d934:	4618      	mov	r0, r3
 800d936:	f001 febd 	bl	800f6b4 <RCCEx_PLL2_Config>
 800d93a:	4603      	mov	r3, r0
 800d93c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d93e:	e00c      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	3324      	adds	r3, #36	; 0x24
 800d944:	2100      	movs	r1, #0
 800d946:	4618      	mov	r0, r3
 800d948:	f001 ff66 	bl	800f818 <RCCEx_PLL3_Config>
 800d94c:	4603      	mov	r3, r0
 800d94e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d950:	e003      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	75fb      	strb	r3, [r7, #23]
      break;
 800d956:	e000      	b.n	800d95a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800d958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d95a:	7dfb      	ldrb	r3, [r7, #23]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d109      	bne.n	800d974 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d960:	4b72      	ldr	r3, [pc, #456]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d964:	f023 0207 	bic.w	r2, r3, #7
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d96c:	496f      	ldr	r1, [pc, #444]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d96e:	4313      	orrs	r3, r2
 800d970:	650b      	str	r3, [r1, #80]	; 0x50
 800d972:	e001      	b.n	800d978 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d974:	7dfb      	ldrb	r3, [r7, #23]
 800d976:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d980:	2b00      	cmp	r3, #0
 800d982:	d051      	beq.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d98a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800d98e:	d036      	beq.n	800d9fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800d990:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800d994:	d830      	bhi.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d99a:	d032      	beq.n	800da02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800d99c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d9a0:	d82a      	bhi.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d9a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d9a6:	d02e      	beq.n	800da06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800d9a8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d9ac:	d824      	bhi.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d9ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9b2:	d018      	beq.n	800d9e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800d9b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9b8:	d81e      	bhi.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d003      	beq.n	800d9c6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800d9be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d9c2:	d007      	beq.n	800d9d4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800d9c4:	e018      	b.n	800d9f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d9c6:	4b59      	ldr	r3, [pc, #356]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ca:	4a58      	ldr	r2, [pc, #352]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800d9cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d9d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d9d2:	e019      	b.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	3304      	adds	r3, #4
 800d9d8:	2100      	movs	r1, #0
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f001 fe6a 	bl	800f6b4 <RCCEx_PLL2_Config>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800d9e4:	e010      	b.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	3324      	adds	r3, #36	; 0x24
 800d9ea:	2100      	movs	r1, #0
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f001 ff13 	bl	800f818 <RCCEx_PLL3_Config>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800d9f6:	e007      	b.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	75fb      	strb	r3, [r7, #23]
      break;
 800d9fc:	e004      	b.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800d9fe:	bf00      	nop
 800da00:	e002      	b.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800da02:	bf00      	nop
 800da04:	e000      	b.n	800da08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800da06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800da08:	7dfb      	ldrb	r3, [r7, #23]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d10a      	bne.n	800da24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800da0e:	4b47      	ldr	r3, [pc, #284]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800da10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da12:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800da1c:	4943      	ldr	r1, [pc, #268]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800da1e:	4313      	orrs	r3, r2
 800da20:	658b      	str	r3, [r1, #88]	; 0x58
 800da22:	e001      	b.n	800da28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da24:	7dfb      	ldrb	r3, [r7, #23]
 800da26:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da30:	2b00      	cmp	r3, #0
 800da32:	d051      	beq.n	800dad8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800da3a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800da3e:	d036      	beq.n	800daae <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800da40:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800da44:	d830      	bhi.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800da46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da4a:	d032      	beq.n	800dab2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800da4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800da50:	d82a      	bhi.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800da52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800da56:	d02e      	beq.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800da58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800da5c:	d824      	bhi.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800da5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da62:	d018      	beq.n	800da96 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800da64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da68:	d81e      	bhi.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d003      	beq.n	800da76 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800da6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800da72:	d007      	beq.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800da74:	e018      	b.n	800daa8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da76:	4b2d      	ldr	r3, [pc, #180]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800da78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7a:	4a2c      	ldr	r2, [pc, #176]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800da7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800da82:	e019      	b.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	3304      	adds	r3, #4
 800da88:	2100      	movs	r1, #0
 800da8a:	4618      	mov	r0, r3
 800da8c:	f001 fe12 	bl	800f6b4 <RCCEx_PLL2_Config>
 800da90:	4603      	mov	r3, r0
 800da92:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800da94:	e010      	b.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3324      	adds	r3, #36	; 0x24
 800da9a:	2100      	movs	r1, #0
 800da9c:	4618      	mov	r0, r3
 800da9e:	f001 febb 	bl	800f818 <RCCEx_PLL3_Config>
 800daa2:	4603      	mov	r3, r0
 800daa4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800daa6:	e007      	b.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800daa8:	2301      	movs	r3, #1
 800daaa:	75fb      	strb	r3, [r7, #23]
      break;
 800daac:	e004      	b.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800daae:	bf00      	nop
 800dab0:	e002      	b.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800dab2:	bf00      	nop
 800dab4:	e000      	b.n	800dab8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800dab6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dab8:	7dfb      	ldrb	r3, [r7, #23]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d10a      	bne.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dabe:	4b1b      	ldr	r3, [pc, #108]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800dac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dac2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dacc:	4917      	ldr	r1, [pc, #92]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800dace:	4313      	orrs	r3, r2
 800dad0:	658b      	str	r3, [r1, #88]	; 0x58
 800dad2:	e001      	b.n	800dad8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dad4:	7dfb      	ldrb	r3, [r7, #23]
 800dad6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d035      	beq.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dae8:	2b30      	cmp	r3, #48	; 0x30
 800daea:	d01c      	beq.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800daec:	2b30      	cmp	r3, #48	; 0x30
 800daee:	d817      	bhi.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800daf0:	2b20      	cmp	r3, #32
 800daf2:	d00c      	beq.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800daf4:	2b20      	cmp	r3, #32
 800daf6:	d813      	bhi.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d019      	beq.n	800db30 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800dafc:	2b10      	cmp	r3, #16
 800dafe:	d10f      	bne.n	800db20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db00:	4b0a      	ldr	r3, [pc, #40]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800db02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db04:	4a09      	ldr	r2, [pc, #36]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800db06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800db0c:	e011      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	3304      	adds	r3, #4
 800db12:	2102      	movs	r1, #2
 800db14:	4618      	mov	r0, r3
 800db16:	f001 fdcd 	bl	800f6b4 <RCCEx_PLL2_Config>
 800db1a:	4603      	mov	r3, r0
 800db1c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800db1e:	e008      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800db20:	2301      	movs	r3, #1
 800db22:	75fb      	strb	r3, [r7, #23]
      break;
 800db24:	e005      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800db26:	bf00      	nop
 800db28:	e003      	b.n	800db32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800db2a:	bf00      	nop
 800db2c:	58024400 	.word	0x58024400
      break;
 800db30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800db32:	7dfb      	ldrb	r3, [r7, #23]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d109      	bne.n	800db4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800db38:	4ba3      	ldr	r3, [pc, #652]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800db3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db44:	49a0      	ldr	r1, [pc, #640]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800db46:	4313      	orrs	r3, r2
 800db48:	64cb      	str	r3, [r1, #76]	; 0x4c
 800db4a:	e001      	b.n	800db50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d047      	beq.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db64:	d030      	beq.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800db66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db6a:	d82a      	bhi.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800db6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800db70:	d02c      	beq.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x378>
 800db72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800db76:	d824      	bhi.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800db78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db7c:	d018      	beq.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800db7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db82:	d81e      	bhi.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800db84:	2b00      	cmp	r3, #0
 800db86:	d003      	beq.n	800db90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800db88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db8c:	d007      	beq.n	800db9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800db8e:	e018      	b.n	800dbc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db90:	4b8d      	ldr	r3, [pc, #564]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800db92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db94:	4a8c      	ldr	r2, [pc, #560]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800db96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800db9c:	e017      	b.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	3304      	adds	r3, #4
 800dba2:	2100      	movs	r1, #0
 800dba4:	4618      	mov	r0, r3
 800dba6:	f001 fd85 	bl	800f6b4 <RCCEx_PLL2_Config>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800dbae:	e00e      	b.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	3324      	adds	r3, #36	; 0x24
 800dbb4:	2100      	movs	r1, #0
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f001 fe2e 	bl	800f818 <RCCEx_PLL3_Config>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800dbc0:	e005      	b.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	75fb      	strb	r3, [r7, #23]
      break;
 800dbc6:	e002      	b.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800dbc8:	bf00      	nop
 800dbca:	e000      	b.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800dbcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dbce:	7dfb      	ldrb	r3, [r7, #23]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d109      	bne.n	800dbe8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dbd4:	4b7c      	ldr	r3, [pc, #496]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dbd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbd8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbe0:	4979      	ldr	r1, [pc, #484]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dbe2:	4313      	orrs	r3, r2
 800dbe4:	650b      	str	r3, [r1, #80]	; 0x50
 800dbe6:	e001      	b.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbe8:	7dfb      	ldrb	r3, [r7, #23]
 800dbea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d049      	beq.n	800dc8c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dc00:	d02e      	beq.n	800dc60 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800dc02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dc06:	d828      	bhi.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dc08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dc0c:	d02a      	beq.n	800dc64 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800dc0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dc12:	d822      	bhi.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dc14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dc18:	d026      	beq.n	800dc68 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800dc1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dc1e:	d81c      	bhi.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dc20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc24:	d010      	beq.n	800dc48 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800dc26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc2a:	d816      	bhi.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d01d      	beq.n	800dc6c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800dc30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc34:	d111      	bne.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	3304      	adds	r3, #4
 800dc3a:	2101      	movs	r1, #1
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f001 fd39 	bl	800f6b4 <RCCEx_PLL2_Config>
 800dc42:	4603      	mov	r3, r0
 800dc44:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800dc46:	e012      	b.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	3324      	adds	r3, #36	; 0x24
 800dc4c:	2101      	movs	r1, #1
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f001 fde2 	bl	800f818 <RCCEx_PLL3_Config>
 800dc54:	4603      	mov	r3, r0
 800dc56:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800dc58:	e009      	b.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	75fb      	strb	r3, [r7, #23]
      break;
 800dc5e:	e006      	b.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800dc60:	bf00      	nop
 800dc62:	e004      	b.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800dc64:	bf00      	nop
 800dc66:	e002      	b.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800dc68:	bf00      	nop
 800dc6a:	e000      	b.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800dc6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d109      	bne.n	800dc88 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800dc74:	4b54      	ldr	r3, [pc, #336]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc78:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc80:	4951      	ldr	r1, [pc, #324]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dc82:	4313      	orrs	r3, r2
 800dc84:	650b      	str	r3, [r1, #80]	; 0x50
 800dc86:	e001      	b.n	800dc8c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc88:	7dfb      	ldrb	r3, [r7, #23]
 800dc8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d04b      	beq.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dc9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dca2:	d02e      	beq.n	800dd02 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800dca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dca8:	d828      	bhi.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800dcaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcae:	d02a      	beq.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800dcb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcb4:	d822      	bhi.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800dcb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dcba:	d026      	beq.n	800dd0a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800dcbc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dcc0:	d81c      	bhi.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800dcc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcc6:	d010      	beq.n	800dcea <HAL_RCCEx_PeriphCLKConfig+0x496>
 800dcc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dccc:	d816      	bhi.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d01d      	beq.n	800dd0e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800dcd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcd6:	d111      	bne.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	3304      	adds	r3, #4
 800dcdc:	2101      	movs	r1, #1
 800dcde:	4618      	mov	r0, r3
 800dce0:	f001 fce8 	bl	800f6b4 <RCCEx_PLL2_Config>
 800dce4:	4603      	mov	r3, r0
 800dce6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800dce8:	e012      	b.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	3324      	adds	r3, #36	; 0x24
 800dcee:	2101      	movs	r1, #1
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f001 fd91 	bl	800f818 <RCCEx_PLL3_Config>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800dcfa:	e009      	b.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	75fb      	strb	r3, [r7, #23]
      break;
 800dd00:	e006      	b.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dd02:	bf00      	nop
 800dd04:	e004      	b.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dd06:	bf00      	nop
 800dd08:	e002      	b.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dd0a:	bf00      	nop
 800dd0c:	e000      	b.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800dd0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dd10:	7dfb      	ldrb	r3, [r7, #23]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d10a      	bne.n	800dd2c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800dd16:	4b2c      	ldr	r3, [pc, #176]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dd18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dd24:	4928      	ldr	r1, [pc, #160]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dd26:	4313      	orrs	r3, r2
 800dd28:	658b      	str	r3, [r1, #88]	; 0x58
 800dd2a:	e001      	b.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd2c:	7dfb      	ldrb	r3, [r7, #23]
 800dd2e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d02f      	beq.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd44:	d00e      	beq.n	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800dd46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd4a:	d814      	bhi.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d015      	beq.n	800dd7c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800dd50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd54:	d10f      	bne.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd56:	4b1c      	ldr	r3, [pc, #112]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5a:	4a1b      	ldr	r2, [pc, #108]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dd5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800dd62:	e00c      	b.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	3304      	adds	r3, #4
 800dd68:	2101      	movs	r1, #1
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f001 fca2 	bl	800f6b4 <RCCEx_PLL2_Config>
 800dd70:	4603      	mov	r3, r0
 800dd72:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800dd74:	e003      	b.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dd76:	2301      	movs	r3, #1
 800dd78:	75fb      	strb	r3, [r7, #23]
      break;
 800dd7a:	e000      	b.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800dd7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dd7e:	7dfb      	ldrb	r3, [r7, #23]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d109      	bne.n	800dd98 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dd84:	4b10      	ldr	r3, [pc, #64]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dd86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd90:	490d      	ldr	r1, [pc, #52]	; (800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800dd92:	4313      	orrs	r3, r2
 800dd94:	650b      	str	r3, [r1, #80]	; 0x50
 800dd96:	e001      	b.n	800dd9c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd98:	7dfb      	ldrb	r3, [r7, #23]
 800dd9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d034      	beq.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddac:	2b03      	cmp	r3, #3
 800ddae:	d81d      	bhi.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ddb0:	a201      	add	r2, pc, #4	; (adr r2, 800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800ddb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb6:	bf00      	nop
 800ddb8:	0800ddf3 	.word	0x0800ddf3
 800ddbc:	0800ddcd 	.word	0x0800ddcd
 800ddc0:	0800dddb 	.word	0x0800dddb
 800ddc4:	0800ddf3 	.word	0x0800ddf3
 800ddc8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddcc:	4bb1      	ldr	r3, [pc, #708]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd0:	4ab0      	ldr	r2, [pc, #704]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ddd8:	e00c      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	3304      	adds	r3, #4
 800ddde:	2102      	movs	r1, #2
 800dde0:	4618      	mov	r0, r3
 800dde2:	f001 fc67 	bl	800f6b4 <RCCEx_PLL2_Config>
 800dde6:	4603      	mov	r3, r0
 800dde8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ddea:	e003      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ddec:	2301      	movs	r3, #1
 800ddee:	75fb      	strb	r3, [r7, #23]
      break;
 800ddf0:	e000      	b.n	800ddf4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800ddf2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ddf4:	7dfb      	ldrb	r3, [r7, #23]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d109      	bne.n	800de0e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ddfa:	4ba6      	ldr	r3, [pc, #664]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ddfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddfe:	f023 0203 	bic.w	r2, r3, #3
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de06:	49a3      	ldr	r1, [pc, #652]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800de08:	4313      	orrs	r3, r2
 800de0a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800de0c:	e001      	b.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	f000 8086 	beq.w	800df2c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800de20:	4b9d      	ldr	r3, [pc, #628]	; (800e098 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a9c      	ldr	r2, [pc, #624]	; (800e098 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800de26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800de2c:	f7f7 fd56 	bl	80058dc <HAL_GetTick>
 800de30:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de32:	e009      	b.n	800de48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800de34:	f7f7 fd52 	bl	80058dc <HAL_GetTick>
 800de38:	4602      	mov	r2, r0
 800de3a:	693b      	ldr	r3, [r7, #16]
 800de3c:	1ad3      	subs	r3, r2, r3
 800de3e:	2b64      	cmp	r3, #100	; 0x64
 800de40:	d902      	bls.n	800de48 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800de42:	2303      	movs	r3, #3
 800de44:	75fb      	strb	r3, [r7, #23]
        break;
 800de46:	e005      	b.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800de48:	4b93      	ldr	r3, [pc, #588]	; (800e098 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de50:	2b00      	cmp	r3, #0
 800de52:	d0ef      	beq.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800de54:	7dfb      	ldrb	r3, [r7, #23]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d166      	bne.n	800df28 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800de5a:	4b8e      	ldr	r3, [pc, #568]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800de5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800de64:	4053      	eors	r3, r2
 800de66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d013      	beq.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800de6e:	4b89      	ldr	r3, [pc, #548]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800de70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800de76:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800de78:	4b86      	ldr	r3, [pc, #536]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800de7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de7c:	4a85      	ldr	r2, [pc, #532]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800de7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de82:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800de84:	4b83      	ldr	r3, [pc, #524]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800de86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de88:	4a82      	ldr	r2, [pc, #520]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800de8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800de8e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800de90:	4a80      	ldr	r2, [pc, #512]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800de9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dea0:	d115      	bne.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dea2:	f7f7 fd1b 	bl	80058dc <HAL_GetTick>
 800dea6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dea8:	e00b      	b.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800deaa:	f7f7 fd17 	bl	80058dc <HAL_GetTick>
 800deae:	4602      	mov	r2, r0
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800deb8:	4293      	cmp	r3, r2
 800deba:	d902      	bls.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800debc:	2303      	movs	r3, #3
 800debe:	75fb      	strb	r3, [r7, #23]
            break;
 800dec0:	e005      	b.n	800dece <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dec2:	4b74      	ldr	r3, [pc, #464]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dec6:	f003 0302 	and.w	r3, r3, #2
 800deca:	2b00      	cmp	r3, #0
 800decc:	d0ed      	beq.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800dece:	7dfb      	ldrb	r3, [r7, #23]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d126      	bne.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800deda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dede:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dee2:	d10d      	bne.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800dee4:	4b6b      	ldr	r3, [pc, #428]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800def2:	0919      	lsrs	r1, r3, #4
 800def4:	4b69      	ldr	r3, [pc, #420]	; (800e09c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800def6:	400b      	ands	r3, r1
 800def8:	4966      	ldr	r1, [pc, #408]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800defa:	4313      	orrs	r3, r2
 800defc:	610b      	str	r3, [r1, #16]
 800defe:	e005      	b.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800df00:	4b64      	ldr	r3, [pc, #400]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800df02:	691b      	ldr	r3, [r3, #16]
 800df04:	4a63      	ldr	r2, [pc, #396]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800df06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800df0a:	6113      	str	r3, [r2, #16]
 800df0c:	4b61      	ldr	r3, [pc, #388]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800df0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800df16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df1a:	495e      	ldr	r1, [pc, #376]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800df1c:	4313      	orrs	r3, r2
 800df1e:	670b      	str	r3, [r1, #112]	; 0x70
 800df20:	e004      	b.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800df22:	7dfb      	ldrb	r3, [r7, #23]
 800df24:	75bb      	strb	r3, [r7, #22]
 800df26:	e001      	b.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df28:	7dfb      	ldrb	r3, [r7, #23]
 800df2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f003 0301 	and.w	r3, r3, #1
 800df34:	2b00      	cmp	r3, #0
 800df36:	d07e      	beq.n	800e036 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df3c:	2b28      	cmp	r3, #40	; 0x28
 800df3e:	d867      	bhi.n	800e010 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800df40:	a201      	add	r2, pc, #4	; (adr r2, 800df48 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800df42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df46:	bf00      	nop
 800df48:	0800e017 	.word	0x0800e017
 800df4c:	0800e011 	.word	0x0800e011
 800df50:	0800e011 	.word	0x0800e011
 800df54:	0800e011 	.word	0x0800e011
 800df58:	0800e011 	.word	0x0800e011
 800df5c:	0800e011 	.word	0x0800e011
 800df60:	0800e011 	.word	0x0800e011
 800df64:	0800e011 	.word	0x0800e011
 800df68:	0800dfed 	.word	0x0800dfed
 800df6c:	0800e011 	.word	0x0800e011
 800df70:	0800e011 	.word	0x0800e011
 800df74:	0800e011 	.word	0x0800e011
 800df78:	0800e011 	.word	0x0800e011
 800df7c:	0800e011 	.word	0x0800e011
 800df80:	0800e011 	.word	0x0800e011
 800df84:	0800e011 	.word	0x0800e011
 800df88:	0800dfff 	.word	0x0800dfff
 800df8c:	0800e011 	.word	0x0800e011
 800df90:	0800e011 	.word	0x0800e011
 800df94:	0800e011 	.word	0x0800e011
 800df98:	0800e011 	.word	0x0800e011
 800df9c:	0800e011 	.word	0x0800e011
 800dfa0:	0800e011 	.word	0x0800e011
 800dfa4:	0800e011 	.word	0x0800e011
 800dfa8:	0800e017 	.word	0x0800e017
 800dfac:	0800e011 	.word	0x0800e011
 800dfb0:	0800e011 	.word	0x0800e011
 800dfb4:	0800e011 	.word	0x0800e011
 800dfb8:	0800e011 	.word	0x0800e011
 800dfbc:	0800e011 	.word	0x0800e011
 800dfc0:	0800e011 	.word	0x0800e011
 800dfc4:	0800e011 	.word	0x0800e011
 800dfc8:	0800e017 	.word	0x0800e017
 800dfcc:	0800e011 	.word	0x0800e011
 800dfd0:	0800e011 	.word	0x0800e011
 800dfd4:	0800e011 	.word	0x0800e011
 800dfd8:	0800e011 	.word	0x0800e011
 800dfdc:	0800e011 	.word	0x0800e011
 800dfe0:	0800e011 	.word	0x0800e011
 800dfe4:	0800e011 	.word	0x0800e011
 800dfe8:	0800e017 	.word	0x0800e017
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	3304      	adds	r3, #4
 800dff0:	2101      	movs	r1, #1
 800dff2:	4618      	mov	r0, r3
 800dff4:	f001 fb5e 	bl	800f6b4 <RCCEx_PLL2_Config>
 800dff8:	4603      	mov	r3, r0
 800dffa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800dffc:	e00c      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	3324      	adds	r3, #36	; 0x24
 800e002:	2101      	movs	r1, #1
 800e004:	4618      	mov	r0, r3
 800e006:	f001 fc07 	bl	800f818 <RCCEx_PLL3_Config>
 800e00a:	4603      	mov	r3, r0
 800e00c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e00e:	e003      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e010:	2301      	movs	r3, #1
 800e012:	75fb      	strb	r3, [r7, #23]
      break;
 800e014:	e000      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800e016:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e018:	7dfb      	ldrb	r3, [r7, #23]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d109      	bne.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e01e:	4b1d      	ldr	r3, [pc, #116]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e022:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e02a:	491a      	ldr	r1, [pc, #104]	; (800e094 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e02c:	4313      	orrs	r3, r2
 800e02e:	654b      	str	r3, [r1, #84]	; 0x54
 800e030:	e001      	b.n	800e036 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e032:	7dfb      	ldrb	r3, [r7, #23]
 800e034:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f003 0302 	and.w	r3, r3, #2
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d03e      	beq.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e046:	2b05      	cmp	r3, #5
 800e048:	d820      	bhi.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0x838>
 800e04a:	a201      	add	r2, pc, #4	; (adr r2, 800e050 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800e04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e050:	0800e0a1 	.word	0x0800e0a1
 800e054:	0800e069 	.word	0x0800e069
 800e058:	0800e07b 	.word	0x0800e07b
 800e05c:	0800e0a1 	.word	0x0800e0a1
 800e060:	0800e0a1 	.word	0x0800e0a1
 800e064:	0800e0a1 	.word	0x0800e0a1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	3304      	adds	r3, #4
 800e06c:	2101      	movs	r1, #1
 800e06e:	4618      	mov	r0, r3
 800e070:	f001 fb20 	bl	800f6b4 <RCCEx_PLL2_Config>
 800e074:	4603      	mov	r3, r0
 800e076:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e078:	e013      	b.n	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	3324      	adds	r3, #36	; 0x24
 800e07e:	2101      	movs	r1, #1
 800e080:	4618      	mov	r0, r3
 800e082:	f001 fbc9 	bl	800f818 <RCCEx_PLL3_Config>
 800e086:	4603      	mov	r3, r0
 800e088:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e08a:	e00a      	b.n	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e08c:	2301      	movs	r3, #1
 800e08e:	75fb      	strb	r3, [r7, #23]
      break;
 800e090:	e007      	b.n	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800e092:	bf00      	nop
 800e094:	58024400 	.word	0x58024400
 800e098:	58024800 	.word	0x58024800
 800e09c:	00ffffcf 	.word	0x00ffffcf
      break;
 800e0a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e0a2:	7dfb      	ldrb	r3, [r7, #23]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d109      	bne.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e0a8:	4b9f      	ldr	r3, [pc, #636]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e0aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ac:	f023 0207 	bic.w	r2, r3, #7
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0b4:	499c      	ldr	r1, [pc, #624]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	654b      	str	r3, [r1, #84]	; 0x54
 800e0ba:	e001      	b.n	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0bc:	7dfb      	ldrb	r3, [r7, #23]
 800e0be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f003 0304 	and.w	r3, r3, #4
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d039      	beq.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e0d2:	2b05      	cmp	r3, #5
 800e0d4:	d820      	bhi.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800e0d6:	a201      	add	r2, pc, #4	; (adr r2, 800e0dc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800e0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0dc:	0800e11f 	.word	0x0800e11f
 800e0e0:	0800e0f5 	.word	0x0800e0f5
 800e0e4:	0800e107 	.word	0x0800e107
 800e0e8:	0800e11f 	.word	0x0800e11f
 800e0ec:	0800e11f 	.word	0x0800e11f
 800e0f0:	0800e11f 	.word	0x0800e11f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	3304      	adds	r3, #4
 800e0f8:	2101      	movs	r1, #1
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f001 fada 	bl	800f6b4 <RCCEx_PLL2_Config>
 800e100:	4603      	mov	r3, r0
 800e102:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e104:	e00c      	b.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	3324      	adds	r3, #36	; 0x24
 800e10a:	2101      	movs	r1, #1
 800e10c:	4618      	mov	r0, r3
 800e10e:	f001 fb83 	bl	800f818 <RCCEx_PLL3_Config>
 800e112:	4603      	mov	r3, r0
 800e114:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e116:	e003      	b.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	75fb      	strb	r3, [r7, #23]
      break;
 800e11c:	e000      	b.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800e11e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e120:	7dfb      	ldrb	r3, [r7, #23]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d10a      	bne.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e126:	4b80      	ldr	r3, [pc, #512]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e12a:	f023 0207 	bic.w	r2, r3, #7
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e134:	497c      	ldr	r1, [pc, #496]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e136:	4313      	orrs	r3, r2
 800e138:	658b      	str	r3, [r1, #88]	; 0x58
 800e13a:	e001      	b.n	800e140 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e13c:	7dfb      	ldrb	r3, [r7, #23]
 800e13e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f003 0320 	and.w	r3, r3, #32
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d04b      	beq.n	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e156:	d02e      	beq.n	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800e158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e15c:	d828      	bhi.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e162:	d02a      	beq.n	800e1ba <HAL_RCCEx_PeriphCLKConfig+0x966>
 800e164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e168:	d822      	bhi.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e16a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e16e:	d026      	beq.n	800e1be <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800e170:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e174:	d81c      	bhi.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e17a:	d010      	beq.n	800e19e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800e17c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e180:	d816      	bhi.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800e182:	2b00      	cmp	r3, #0
 800e184:	d01d      	beq.n	800e1c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800e186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e18a:	d111      	bne.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	3304      	adds	r3, #4
 800e190:	2100      	movs	r1, #0
 800e192:	4618      	mov	r0, r3
 800e194:	f001 fa8e 	bl	800f6b4 <RCCEx_PLL2_Config>
 800e198:	4603      	mov	r3, r0
 800e19a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e19c:	e012      	b.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	3324      	adds	r3, #36	; 0x24
 800e1a2:	2102      	movs	r1, #2
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f001 fb37 	bl	800f818 <RCCEx_PLL3_Config>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e1ae:	e009      	b.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	75fb      	strb	r3, [r7, #23]
      break;
 800e1b4:	e006      	b.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e1b6:	bf00      	nop
 800e1b8:	e004      	b.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e1ba:	bf00      	nop
 800e1bc:	e002      	b.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e1be:	bf00      	nop
 800e1c0:	e000      	b.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800e1c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e1c4:	7dfb      	ldrb	r3, [r7, #23]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d10a      	bne.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e1ca:	4b57      	ldr	r3, [pc, #348]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e1cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1d8:	4953      	ldr	r1, [pc, #332]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e1da:	4313      	orrs	r3, r2
 800e1dc:	654b      	str	r3, [r1, #84]	; 0x54
 800e1de:	e001      	b.n	800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1e0:	7dfb      	ldrb	r3, [r7, #23]
 800e1e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d04b      	beq.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e1f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e1fa:	d02e      	beq.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800e1fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e200:	d828      	bhi.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e206:	d02a      	beq.n	800e25e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800e208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e20c:	d822      	bhi.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e20e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e212:	d026      	beq.n	800e262 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800e214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e218:	d81c      	bhi.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e21a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e21e:	d010      	beq.n	800e242 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800e220:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e224:	d816      	bhi.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800e226:	2b00      	cmp	r3, #0
 800e228:	d01d      	beq.n	800e266 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800e22a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e22e:	d111      	bne.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3304      	adds	r3, #4
 800e234:	2100      	movs	r1, #0
 800e236:	4618      	mov	r0, r3
 800e238:	f001 fa3c 	bl	800f6b4 <RCCEx_PLL2_Config>
 800e23c:	4603      	mov	r3, r0
 800e23e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e240:	e012      	b.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	3324      	adds	r3, #36	; 0x24
 800e246:	2102      	movs	r1, #2
 800e248:	4618      	mov	r0, r3
 800e24a:	f001 fae5 	bl	800f818 <RCCEx_PLL3_Config>
 800e24e:	4603      	mov	r3, r0
 800e250:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e252:	e009      	b.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	75fb      	strb	r3, [r7, #23]
      break;
 800e258:	e006      	b.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e25a:	bf00      	nop
 800e25c:	e004      	b.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e25e:	bf00      	nop
 800e260:	e002      	b.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e262:	bf00      	nop
 800e264:	e000      	b.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800e266:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e268:	7dfb      	ldrb	r3, [r7, #23]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10a      	bne.n	800e284 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e26e:	4b2e      	ldr	r3, [pc, #184]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e272:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e27c:	492a      	ldr	r1, [pc, #168]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e27e:	4313      	orrs	r3, r2
 800e280:	658b      	str	r3, [r1, #88]	; 0x58
 800e282:	e001      	b.n	800e288 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e284:	7dfb      	ldrb	r3, [r7, #23]
 800e286:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e290:	2b00      	cmp	r3, #0
 800e292:	d04d      	beq.n	800e330 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e29a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e29e:	d02e      	beq.n	800e2fe <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800e2a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e2a4:	d828      	bhi.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e2a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2aa:	d02a      	beq.n	800e302 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800e2ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2b0:	d822      	bhi.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e2b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e2b6:	d026      	beq.n	800e306 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800e2b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e2bc:	d81c      	bhi.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e2be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2c2:	d010      	beq.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800e2c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2c8:	d816      	bhi.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d01d      	beq.n	800e30a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800e2ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e2d2:	d111      	bne.n	800e2f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	3304      	adds	r3, #4
 800e2d8:	2100      	movs	r1, #0
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f001 f9ea 	bl	800f6b4 <RCCEx_PLL2_Config>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e2e4:	e012      	b.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	3324      	adds	r3, #36	; 0x24
 800e2ea:	2102      	movs	r1, #2
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f001 fa93 	bl	800f818 <RCCEx_PLL3_Config>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e2f6:	e009      	b.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	75fb      	strb	r3, [r7, #23]
      break;
 800e2fc:	e006      	b.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e2fe:	bf00      	nop
 800e300:	e004      	b.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e302:	bf00      	nop
 800e304:	e002      	b.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e306:	bf00      	nop
 800e308:	e000      	b.n	800e30c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800e30a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e30c:	7dfb      	ldrb	r3, [r7, #23]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10c      	bne.n	800e32c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e312:	4b05      	ldr	r3, [pc, #20]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e320:	4901      	ldr	r1, [pc, #4]	; (800e328 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800e322:	4313      	orrs	r3, r2
 800e324:	658b      	str	r3, [r1, #88]	; 0x58
 800e326:	e003      	b.n	800e330 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800e328:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e32c:	7dfb      	ldrb	r3, [r7, #23]
 800e32e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f003 0308 	and.w	r3, r3, #8
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d018      	beq.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e344:	d10a      	bne.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	3324      	adds	r3, #36	; 0x24
 800e34a:	2102      	movs	r1, #2
 800e34c:	4618      	mov	r0, r3
 800e34e:	f001 fa63 	bl	800f818 <RCCEx_PLL3_Config>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d001      	beq.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800e35c:	4b8a      	ldr	r3, [pc, #552]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e360:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e368:	4987      	ldr	r1, [pc, #540]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e36a:	4313      	orrs	r3, r2
 800e36c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f003 0310 	and.w	r3, r3, #16
 800e376:	2b00      	cmp	r3, #0
 800e378:	d01a      	beq.n	800e3b0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e384:	d10a      	bne.n	800e39c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	3324      	adds	r3, #36	; 0x24
 800e38a:	2102      	movs	r1, #2
 800e38c:	4618      	mov	r0, r3
 800e38e:	f001 fa43 	bl	800f818 <RCCEx_PLL3_Config>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d001      	beq.n	800e39c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800e398:	2301      	movs	r3, #1
 800e39a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e39c:	4b7a      	ldr	r3, [pc, #488]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e39e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3aa:	4977      	ldr	r1, [pc, #476]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d034      	beq.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e3c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3c6:	d01d      	beq.n	800e404 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800e3c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e3cc:	d817      	bhi.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d003      	beq.n	800e3da <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800e3d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3d6:	d009      	beq.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e3d8:	e011      	b.n	800e3fe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	3304      	adds	r3, #4
 800e3de:	2100      	movs	r1, #0
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f001 f967 	bl	800f6b4 <RCCEx_PLL2_Config>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800e3ea:	e00c      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	3324      	adds	r3, #36	; 0x24
 800e3f0:	2102      	movs	r1, #2
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f001 fa10 	bl	800f818 <RCCEx_PLL3_Config>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800e3fc:	e003      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e3fe:	2301      	movs	r3, #1
 800e400:	75fb      	strb	r3, [r7, #23]
      break;
 800e402:	e000      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800e404:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e406:	7dfb      	ldrb	r3, [r7, #23]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d10a      	bne.n	800e422 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e40c:	4b5e      	ldr	r3, [pc, #376]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e40e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e41a:	495b      	ldr	r1, [pc, #364]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e41c:	4313      	orrs	r3, r2
 800e41e:	658b      	str	r3, [r1, #88]	; 0x58
 800e420:	e001      	b.n	800e426 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e422:	7dfb      	ldrb	r3, [r7, #23]
 800e424:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d033      	beq.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e438:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e43c:	d01c      	beq.n	800e478 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800e43e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e442:	d816      	bhi.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e444:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e448:	d003      	beq.n	800e452 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800e44a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e44e:	d007      	beq.n	800e460 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800e450:	e00f      	b.n	800e472 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e452:	4b4d      	ldr	r3, [pc, #308]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e456:	4a4c      	ldr	r2, [pc, #304]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e45c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800e45e:	e00c      	b.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3324      	adds	r3, #36	; 0x24
 800e464:	2101      	movs	r1, #1
 800e466:	4618      	mov	r0, r3
 800e468:	f001 f9d6 	bl	800f818 <RCCEx_PLL3_Config>
 800e46c:	4603      	mov	r3, r0
 800e46e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800e470:	e003      	b.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e472:	2301      	movs	r3, #1
 800e474:	75fb      	strb	r3, [r7, #23]
      break;
 800e476:	e000      	b.n	800e47a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800e478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e47a:	7dfb      	ldrb	r3, [r7, #23]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d10a      	bne.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e480:	4b41      	ldr	r3, [pc, #260]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e48e:	493e      	ldr	r1, [pc, #248]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e490:	4313      	orrs	r3, r2
 800e492:	654b      	str	r3, [r1, #84]	; 0x54
 800e494:	e001      	b.n	800e49a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e496:	7dfb      	ldrb	r3, [r7, #23]
 800e498:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d029      	beq.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d003      	beq.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800e4ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4b2:	d007      	beq.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800e4b4:	e00f      	b.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e4b6:	4b34      	ldr	r3, [pc, #208]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ba:	4a33      	ldr	r2, [pc, #204]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e4bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e4c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800e4c2:	e00b      	b.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	3304      	adds	r3, #4
 800e4c8:	2102      	movs	r1, #2
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f001 f8f2 	bl	800f6b4 <RCCEx_PLL2_Config>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800e4d4:	e002      	b.n	800e4dc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	75fb      	strb	r3, [r7, #23]
      break;
 800e4da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e4dc:	7dfb      	ldrb	r3, [r7, #23]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d109      	bne.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e4e2:	4b29      	ldr	r3, [pc, #164]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ee:	4926      	ldr	r1, [pc, #152]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e4f4:	e001      	b.n	800e4fa <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4f6:	7dfb      	ldrb	r3, [r7, #23]
 800e4f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00a      	beq.n	800e51c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	3324      	adds	r3, #36	; 0x24
 800e50a:	2102      	movs	r1, #2
 800e50c:	4618      	mov	r0, r3
 800e50e:	f001 f983 	bl	800f818 <RCCEx_PLL3_Config>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d001      	beq.n	800e51c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800e518:	2301      	movs	r3, #1
 800e51a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e524:	2b00      	cmp	r3, #0
 800e526:	d033      	beq.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e52c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e530:	d017      	beq.n	800e562 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800e532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e536:	d811      	bhi.n	800e55c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e538:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e53c:	d013      	beq.n	800e566 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800e53e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e542:	d80b      	bhi.n	800e55c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e544:	2b00      	cmp	r3, #0
 800e546:	d010      	beq.n	800e56a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800e548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e54c:	d106      	bne.n	800e55c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e54e:	4b0e      	ldr	r3, [pc, #56]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e552:	4a0d      	ldr	r2, [pc, #52]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e558:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800e55a:	e007      	b.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e55c:	2301      	movs	r3, #1
 800e55e:	75fb      	strb	r3, [r7, #23]
      break;
 800e560:	e004      	b.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800e562:	bf00      	nop
 800e564:	e002      	b.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800e566:	bf00      	nop
 800e568:	e000      	b.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800e56a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e56c:	7dfb      	ldrb	r3, [r7, #23]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d10c      	bne.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e572:	4b05      	ldr	r3, [pc, #20]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e576:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e57e:	4902      	ldr	r1, [pc, #8]	; (800e588 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800e580:	4313      	orrs	r3, r2
 800e582:	654b      	str	r3, [r1, #84]	; 0x54
 800e584:	e004      	b.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800e586:	bf00      	nop
 800e588:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e58c:	7dfb      	ldrb	r3, [r7, #23]
 800e58e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d008      	beq.n	800e5ae <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e59c:	4b29      	ldr	r3, [pc, #164]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5a8:	4926      	ldr	r1, [pc, #152]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e5aa:	4313      	orrs	r3, r2
 800e5ac:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d008      	beq.n	800e5cc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e5ba:	4b22      	ldr	r3, [pc, #136]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e5bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e5c6:	491f      	ldr	r1, [pc, #124]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d00d      	beq.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e5d8:	4b1a      	ldr	r3, [pc, #104]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e5da:	691b      	ldr	r3, [r3, #16]
 800e5dc:	4a19      	ldr	r2, [pc, #100]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e5de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e5e2:	6113      	str	r3, [r2, #16]
 800e5e4:	4b17      	ldr	r3, [pc, #92]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e5e6:	691a      	ldr	r2, [r3, #16]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e5ee:	4915      	ldr	r1, [pc, #84]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	da08      	bge.n	800e60e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e5fc:	4b11      	ldr	r3, [pc, #68]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e5fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e600:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e608:	490e      	ldr	r1, [pc, #56]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e60a:	4313      	orrs	r3, r2
 800e60c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e616:	2b00      	cmp	r3, #0
 800e618:	d009      	beq.n	800e62e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e61a:	4b0a      	ldr	r3, [pc, #40]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e61e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e628:	4906      	ldr	r1, [pc, #24]	; (800e644 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e62a:	4313      	orrs	r3, r2
 800e62c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800e62e:	7dbb      	ldrb	r3, [r7, #22]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d101      	bne.n	800e638 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800e634:	2300      	movs	r3, #0
 800e636:	e000      	b.n	800e63a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800e638:	2301      	movs	r3, #1
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	58024400 	.word	0x58024400

0800e648 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b090      	sub	sp, #64	; 0x40
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e656:	f040 8089 	bne.w	800e76c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800e65a:	4b95      	ldr	r3, [pc, #596]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e65e:	f003 0307 	and.w	r3, r3, #7
 800e662:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800e664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e666:	2b04      	cmp	r3, #4
 800e668:	d87d      	bhi.n	800e766 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800e66a:	a201      	add	r2, pc, #4	; (adr r2, 800e670 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800e66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e670:	0800e685 	.word	0x0800e685
 800e674:	0800e6a9 	.word	0x0800e6a9
 800e678:	0800e6cd 	.word	0x0800e6cd
 800e67c:	0800e761 	.word	0x0800e761
 800e680:	0800e6f1 	.word	0x0800e6f1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e684:	4b8a      	ldr	r3, [pc, #552]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e68c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e690:	d107      	bne.n	800e6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e696:	4618      	mov	r0, r3
 800e698:	f000 feba 	bl	800f410 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800e69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e6a0:	e3ef      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e6a6:	e3ec      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e6a8:	4b81      	ldr	r3, [pc, #516]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e6b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e6b4:	d107      	bne.n	800e6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e6b6:	f107 0318 	add.w	r3, r7, #24
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 fc00 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e6c4:	e3dd      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e6ca:	e3da      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e6cc:	4b78      	ldr	r3, [pc, #480]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e6d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e6d8:	d107      	bne.n	800e6ea <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e6da:	f107 030c 	add.w	r3, r7, #12
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f000 fd42 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e6e8:	e3cb      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e6ee:	e3c8      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e6f0:	4b6f      	ldr	r3, [pc, #444]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e6f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e6f8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e6fa:	4b6d      	ldr	r3, [pc, #436]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	f003 0304 	and.w	r3, r3, #4
 800e702:	2b04      	cmp	r3, #4
 800e704:	d10c      	bne.n	800e720 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800e706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d109      	bne.n	800e720 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e70c:	4b68      	ldr	r3, [pc, #416]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	08db      	lsrs	r3, r3, #3
 800e712:	f003 0303 	and.w	r3, r3, #3
 800e716:	4a67      	ldr	r2, [pc, #412]	; (800e8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800e718:	fa22 f303 	lsr.w	r3, r2, r3
 800e71c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e71e:	e01e      	b.n	800e75e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e720:	4b63      	ldr	r3, [pc, #396]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e72c:	d106      	bne.n	800e73c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800e72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e730:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e734:	d102      	bne.n	800e73c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e736:	4b60      	ldr	r3, [pc, #384]	; (800e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800e738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e73a:	e010      	b.n	800e75e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e73c:	4b5c      	ldr	r3, [pc, #368]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e748:	d106      	bne.n	800e758 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800e74a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e74c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e750:	d102      	bne.n	800e758 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e752:	4b5a      	ldr	r3, [pc, #360]	; (800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800e754:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e756:	e002      	b.n	800e75e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e758:	2300      	movs	r3, #0
 800e75a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e75c:	e391      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e75e:	e390      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e760:	4b57      	ldr	r3, [pc, #348]	; (800e8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e762:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e764:	e38d      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800e766:	2300      	movs	r3, #0
 800e768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e76a:	e38a      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e772:	f040 80a7 	bne.w	800e8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800e776:	4b4e      	ldr	r3, [pc, #312]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e77a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800e77e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800e780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e782:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e786:	d054      	beq.n	800e832 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800e788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e78e:	f200 808b 	bhi.w	800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e798:	f000 8083 	beq.w	800e8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e7a2:	f200 8081 	bhi.w	800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e7ac:	d02f      	beq.n	800e80e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800e7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e7b4:	d878      	bhi.n	800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800e7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d004      	beq.n	800e7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800e7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e7c2:	d012      	beq.n	800e7ea <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800e7c4:	e070      	b.n	800e8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e7c6:	4b3a      	ldr	r3, [pc, #232]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e7d2:	d107      	bne.n	800e7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e7d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f000 fe19 	bl	800f410 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e7e2:	e34e      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e7e8:	e34b      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e7ea:	4b31      	ldr	r3, [pc, #196]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e7f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e7f6:	d107      	bne.n	800e808 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7f8:	f107 0318 	add.w	r3, r7, #24
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f000 fb5f 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e802:	69bb      	ldr	r3, [r7, #24]
 800e804:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e806:	e33c      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e808:	2300      	movs	r3, #0
 800e80a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e80c:	e339      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e80e:	4b28      	ldr	r3, [pc, #160]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e81a:	d107      	bne.n	800e82c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e81c:	f107 030c 	add.w	r3, r7, #12
 800e820:	4618      	mov	r0, r3
 800e822:	f000 fca1 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e82a:	e32a      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e82c:	2300      	movs	r3, #0
 800e82e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e830:	e327      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e832:	4b1f      	ldr	r3, [pc, #124]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e836:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e83a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e83c:	4b1c      	ldr	r3, [pc, #112]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f003 0304 	and.w	r3, r3, #4
 800e844:	2b04      	cmp	r3, #4
 800e846:	d10c      	bne.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800e848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d109      	bne.n	800e862 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e84e:	4b18      	ldr	r3, [pc, #96]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	08db      	lsrs	r3, r3, #3
 800e854:	f003 0303 	and.w	r3, r3, #3
 800e858:	4a16      	ldr	r2, [pc, #88]	; (800e8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800e85a:	fa22 f303 	lsr.w	r3, r2, r3
 800e85e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e860:	e01e      	b.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e862:	4b13      	ldr	r3, [pc, #76]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e86a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e86e:	d106      	bne.n	800e87e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800e870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e876:	d102      	bne.n	800e87e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e878:	4b0f      	ldr	r3, [pc, #60]	; (800e8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800e87a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e87c:	e010      	b.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e87e:	4b0c      	ldr	r3, [pc, #48]	; (800e8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e88a:	d106      	bne.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800e88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e88e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e892:	d102      	bne.n	800e89a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e894:	4b09      	ldr	r3, [pc, #36]	; (800e8bc <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800e896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e898:	e002      	b.n	800e8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e89a:	2300      	movs	r3, #0
 800e89c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e89e:	e2f0      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e8a0:	e2ef      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e8a2:	4b07      	ldr	r3, [pc, #28]	; (800e8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800e8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e8a6:	e2ec      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e8ac:	e2e9      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e8ae:	bf00      	nop
 800e8b0:	58024400 	.word	0x58024400
 800e8b4:	03d09000 	.word	0x03d09000
 800e8b8:	003d0900 	.word	0x003d0900
 800e8bc:	017d7840 	.word	0x017d7840
 800e8c0:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8ca:	f040 809c 	bne.w	800ea06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800e8ce:	4b9d      	ldr	r3, [pc, #628]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800e8d6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800e8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e8de:	d054      	beq.n	800e98a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800e8e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e8e6:	f200 808b 	bhi.w	800ea00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e8f0:	f000 8083 	beq.w	800e9fa <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800e8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e8fa:	f200 8081 	bhi.w	800ea00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800e8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e904:	d02f      	beq.n	800e966 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800e906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e90c:	d878      	bhi.n	800ea00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800e90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e910:	2b00      	cmp	r3, #0
 800e912:	d004      	beq.n	800e91e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800e914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e916:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e91a:	d012      	beq.n	800e942 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800e91c:	e070      	b.n	800ea00 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e91e:	4b89      	ldr	r3, [pc, #548]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e926:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e92a:	d107      	bne.n	800e93c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e92c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e930:	4618      	mov	r0, r3
 800e932:	f000 fd6d 	bl	800f410 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e938:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e93a:	e2a2      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e93c:	2300      	movs	r3, #0
 800e93e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e940:	e29f      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e942:	4b80      	ldr	r3, [pc, #512]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e94a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e94e:	d107      	bne.n	800e960 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e950:	f107 0318 	add.w	r3, r7, #24
 800e954:	4618      	mov	r0, r3
 800e956:	f000 fab3 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800e95e:	e290      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e960:	2300      	movs	r3, #0
 800e962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e964:	e28d      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e966:	4b77      	ldr	r3, [pc, #476]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e96e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e972:	d107      	bne.n	800e984 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e974:	f107 030c 	add.w	r3, r7, #12
 800e978:	4618      	mov	r0, r3
 800e97a:	f000 fbf5 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e982:	e27e      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800e984:	2300      	movs	r3, #0
 800e986:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e988:	e27b      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e98a:	4b6e      	ldr	r3, [pc, #440]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e98c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e98e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e992:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e994:	4b6b      	ldr	r3, [pc, #428]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f003 0304 	and.w	r3, r3, #4
 800e99c:	2b04      	cmp	r3, #4
 800e99e:	d10c      	bne.n	800e9ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d109      	bne.n	800e9ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e9a6:	4b67      	ldr	r3, [pc, #412]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	08db      	lsrs	r3, r3, #3
 800e9ac:	f003 0303 	and.w	r3, r3, #3
 800e9b0:	4a65      	ldr	r2, [pc, #404]	; (800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800e9b2:	fa22 f303 	lsr.w	r3, r2, r3
 800e9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9b8:	e01e      	b.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e9ba:	4b62      	ldr	r3, [pc, #392]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9c6:	d106      	bne.n	800e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800e9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9ce:	d102      	bne.n	800e9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e9d0:	4b5e      	ldr	r3, [pc, #376]	; (800eb4c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800e9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9d4:	e010      	b.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e9d6:	4b5b      	ldr	r3, [pc, #364]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9e2:	d106      	bne.n	800e9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800e9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e9ea:	d102      	bne.n	800e9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e9ec:	4b58      	ldr	r3, [pc, #352]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800e9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9f0:	e002      	b.n	800e9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e9f6:	e244      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800e9f8:	e243      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e9fa:	4b56      	ldr	r3, [pc, #344]	; (800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800e9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e9fe:	e240      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800ea00:	2300      	movs	r3, #0
 800ea02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ea04:	e23d      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea0c:	f040 80a7 	bne.w	800eb5e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ea10:	4b4c      	ldr	r3, [pc, #304]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ea12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea14:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ea18:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ea1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea20:	d055      	beq.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800ea22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ea28:	f200 8096 	bhi.w	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800ea2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ea32:	f000 8084 	beq.w	800eb3e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800ea36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ea3c:	f200 808c 	bhi.w	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800ea40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea46:	d030      	beq.n	800eaaa <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800ea48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ea4e:	f200 8083 	bhi.w	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800ea52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d004      	beq.n	800ea62 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800ea58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ea5e:	d012      	beq.n	800ea86 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800ea60:	e07a      	b.n	800eb58 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ea62:	4b38      	ldr	r3, [pc, #224]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea6e:	d107      	bne.n	800ea80 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ea70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea74:	4618      	mov	r0, r3
 800ea76:	f000 fccb 	bl	800f410 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ea7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ea7e:	e200      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ea80:	2300      	movs	r3, #0
 800ea82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ea84:	e1fd      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ea86:	4b2f      	ldr	r3, [pc, #188]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ea92:	d107      	bne.n	800eaa4 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea94:	f107 0318 	add.w	r3, r7, #24
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f000 fa11 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eaa2:	e1ee      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eaa8:	e1eb      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eaaa:	4b26      	ldr	r3, [pc, #152]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eab6:	d107      	bne.n	800eac8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eab8:	f107 030c 	add.w	r3, r7, #12
 800eabc:	4618      	mov	r0, r3
 800eabe:	f000 fb53 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eac6:	e1dc      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eacc:	e1d9      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800eace:	4b1d      	ldr	r3, [pc, #116]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800ead0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ead2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ead6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ead8:	4b1a      	ldr	r3, [pc, #104]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	f003 0304 	and.w	r3, r3, #4
 800eae0:	2b04      	cmp	r3, #4
 800eae2:	d10c      	bne.n	800eafe <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800eae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d109      	bne.n	800eafe <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eaea:	4b16      	ldr	r3, [pc, #88]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	08db      	lsrs	r3, r3, #3
 800eaf0:	f003 0303 	and.w	r3, r3, #3
 800eaf4:	4a14      	ldr	r2, [pc, #80]	; (800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800eaf6:	fa22 f303 	lsr.w	r3, r2, r3
 800eafa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eafc:	e01e      	b.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eafe:	4b11      	ldr	r3, [pc, #68]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb0a:	d106      	bne.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800eb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb12:	d102      	bne.n	800eb1a <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800eb14:	4b0d      	ldr	r3, [pc, #52]	; (800eb4c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800eb16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb18:	e010      	b.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eb1a:	4b0a      	ldr	r3, [pc, #40]	; (800eb44 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb26:	d106      	bne.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800eb28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb2e:	d102      	bne.n	800eb36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800eb30:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800eb32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb34:	e002      	b.n	800eb3c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800eb36:	2300      	movs	r3, #0
 800eb38:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800eb3a:	e1a2      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eb3c:	e1a1      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800eb3e:	4b05      	ldr	r3, [pc, #20]	; (800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800eb40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eb42:	e19e      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800eb44:	58024400 	.word	0x58024400
 800eb48:	03d09000 	.word	0x03d09000
 800eb4c:	003d0900 	.word	0x003d0900
 800eb50:	017d7840 	.word	0x017d7840
 800eb54:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800eb58:	2300      	movs	r3, #0
 800eb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eb5c:	e191      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800eb64:	d173      	bne.n	800ec4e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800eb66:	4b9b      	ldr	r3, [pc, #620]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800eb6e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800eb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb76:	d02f      	beq.n	800ebd8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800eb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb7e:	d863      	bhi.n	800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800eb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d004      	beq.n	800eb90 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800eb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb8c:	d012      	beq.n	800ebb4 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800eb8e:	e05b      	b.n	800ec48 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eb90:	4b90      	ldr	r3, [pc, #576]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eb98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eb9c:	d107      	bne.n	800ebae <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb9e:	f107 0318 	add.w	r3, r7, #24
 800eba2:	4618      	mov	r0, r3
 800eba4:	f000 f98c 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eba8:	69bb      	ldr	r3, [r7, #24]
 800ebaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ebac:	e169      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ebae:	2300      	movs	r3, #0
 800ebb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ebb2:	e166      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ebb4:	4b87      	ldr	r3, [pc, #540]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ebbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ebc0:	d107      	bne.n	800ebd2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ebc2:	f107 030c 	add.w	r3, r7, #12
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f000 face 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ebd0:	e157      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ebd6:	e154      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ebd8:	4b7e      	ldr	r3, [pc, #504]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ebda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ebe0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ebe2:	4b7c      	ldr	r3, [pc, #496]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f003 0304 	and.w	r3, r3, #4
 800ebea:	2b04      	cmp	r3, #4
 800ebec:	d10c      	bne.n	800ec08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800ebee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d109      	bne.n	800ec08 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ebf4:	4b77      	ldr	r3, [pc, #476]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	08db      	lsrs	r3, r3, #3
 800ebfa:	f003 0303 	and.w	r3, r3, #3
 800ebfe:	4a76      	ldr	r2, [pc, #472]	; (800edd8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800ec00:	fa22 f303 	lsr.w	r3, r2, r3
 800ec04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec06:	e01e      	b.n	800ec46 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ec08:	4b72      	ldr	r3, [pc, #456]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec14:	d106      	bne.n	800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800ec16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ec1c:	d102      	bne.n	800ec24 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ec1e:	4b6f      	ldr	r3, [pc, #444]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800ec20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec22:	e010      	b.n	800ec46 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ec24:	4b6b      	ldr	r3, [pc, #428]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ec30:	d106      	bne.n	800ec40 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800ec32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec38:	d102      	bne.n	800ec40 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ec3a:	4b69      	ldr	r3, [pc, #420]	; (800ede0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ec3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec3e:	e002      	b.n	800ec46 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ec44:	e11d      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ec46:	e11c      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ec4c:	e119      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec54:	d133      	bne.n	800ecbe <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800ec56:	4b5f      	ldr	r3, [pc, #380]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ec58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ec5e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ec60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d004      	beq.n	800ec70 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800ec66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec6c:	d012      	beq.n	800ec94 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ec6e:	e023      	b.n	800ecb8 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ec70:	4b58      	ldr	r3, [pc, #352]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec7c:	d107      	bne.n	800ec8e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ec7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec82:	4618      	mov	r0, r3
 800ec84:	f000 fbc4 	bl	800f410 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ec8c:	e0f9      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ec92:	e0f6      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ec94:	4b4f      	ldr	r3, [pc, #316]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eca0:	d107      	bne.n	800ecb2 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eca2:	f107 0318 	add.w	r3, r7, #24
 800eca6:	4618      	mov	r0, r3
 800eca8:	f000 f90a 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ecac:	6a3b      	ldr	r3, [r7, #32]
 800ecae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ecb0:	e0e7      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ecb6:	e0e4      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ecbc:	e0e1      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ecc4:	f040 808e 	bne.w	800ede4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800ecc8:	4b42      	ldr	r3, [pc, #264]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ecca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eccc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ecd0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ecd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ecd8:	d06b      	beq.n	800edb2 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800ecda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ece0:	d874      	bhi.n	800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ece2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ece8:	d056      	beq.n	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800ecea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecf0:	d86c      	bhi.n	800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ecf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ecf8:	d03b      	beq.n	800ed72 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800ecfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ed00:	d864      	bhi.n	800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ed02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed08:	d021      	beq.n	800ed4e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800ed0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed10:	d85c      	bhi.n	800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800ed12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d004      	beq.n	800ed22 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ed18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed1e:	d004      	beq.n	800ed2a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800ed20:	e054      	b.n	800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ed22:	f000 f8b7 	bl	800ee94 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed26:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800ed28:	e0ab      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed2a:	4b2a      	ldr	r3, [pc, #168]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed36:	d107      	bne.n	800ed48 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed38:	f107 0318 	add.w	r3, r7, #24
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	f000 f8bf 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ed42:	69fb      	ldr	r3, [r7, #28]
 800ed44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ed46:	e09c      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ed48:	2300      	movs	r3, #0
 800ed4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ed4c:	e099      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed4e:	4b21      	ldr	r3, [pc, #132]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed5a:	d107      	bne.n	800ed6c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed5c:	f107 030c 	add.w	r3, r7, #12
 800ed60:	4618      	mov	r0, r3
 800ed62:	f000 fa01 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ed6a:	e08a      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ed70:	e087      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ed72:	4b18      	ldr	r3, [pc, #96]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	f003 0304 	and.w	r3, r3, #4
 800ed7a:	2b04      	cmp	r3, #4
 800ed7c:	d109      	bne.n	800ed92 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ed7e:	4b15      	ldr	r3, [pc, #84]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	08db      	lsrs	r3, r3, #3
 800ed84:	f003 0303 	and.w	r3, r3, #3
 800ed88:	4a13      	ldr	r2, [pc, #76]	; (800edd8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800ed8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ed8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ed90:	e077      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ed92:	2300      	movs	r3, #0
 800ed94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ed96:	e074      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ed98:	4b0e      	ldr	r3, [pc, #56]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eda0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eda4:	d102      	bne.n	800edac <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800eda6:	4b0d      	ldr	r3, [pc, #52]	; (800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800eda8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800edaa:	e06a      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800edac:	2300      	movs	r3, #0
 800edae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800edb0:	e067      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800edb2:	4b08      	ldr	r3, [pc, #32]	; (800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edbe:	d102      	bne.n	800edc6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800edc0:	4b07      	ldr	r3, [pc, #28]	; (800ede0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800edc2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800edc4:	e05d      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800edc6:	2300      	movs	r3, #0
 800edc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800edca:	e05a      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800edcc:	2300      	movs	r3, #0
 800edce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800edd0:	e057      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800edd2:	bf00      	nop
 800edd4:	58024400 	.word	0x58024400
 800edd8:	03d09000 	.word	0x03d09000
 800eddc:	003d0900 	.word	0x003d0900
 800ede0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edea:	d148      	bne.n	800ee7e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800edec:	4b27      	ldr	r3, [pc, #156]	; (800ee8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800edee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800edf4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800edf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edfc:	d02a      	beq.n	800ee54 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800edfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee04:	d838      	bhi.n	800ee78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800ee06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d004      	beq.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ee12:	d00d      	beq.n	800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800ee14:	e030      	b.n	800ee78 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ee16:	4b1d      	ldr	r3, [pc, #116]	; (800ee8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee22:	d102      	bne.n	800ee2a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800ee24:	4b1a      	ldr	r3, [pc, #104]	; (800ee90 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800ee26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ee28:	e02b      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee2e:	e028      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee30:	4b16      	ldr	r3, [pc, #88]	; (800ee8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee3c:	d107      	bne.n	800ee4e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 fae4 	bl	800f410 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ee4c:	e019      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ee4e:	2300      	movs	r3, #0
 800ee50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee52:	e016      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee54:	4b0d      	ldr	r3, [pc, #52]	; (800ee8c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee60:	d107      	bne.n	800ee72 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee62:	f107 0318 	add.w	r3, r7, #24
 800ee66:	4618      	mov	r0, r3
 800ee68:	f000 f82a 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800ee70:	e007      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800ee72:	2300      	movs	r3, #0
 800ee74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee76:	e004      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee7c:	e001      	b.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800ee82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3740      	adds	r7, #64	; 0x40
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}
 800ee8c:	58024400 	.word	0x58024400
 800ee90:	017d7840 	.word	0x017d7840

0800ee94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ee98:	f7fe fc80 	bl	800d79c <HAL_RCC_GetHCLKFreq>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	4b06      	ldr	r3, [pc, #24]	; (800eeb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800eea0:	6a1b      	ldr	r3, [r3, #32]
 800eea2:	091b      	lsrs	r3, r3, #4
 800eea4:	f003 0307 	and.w	r3, r3, #7
 800eea8:	4904      	ldr	r1, [pc, #16]	; (800eebc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800eeaa:	5ccb      	ldrb	r3, [r1, r3]
 800eeac:	f003 031f 	and.w	r3, r3, #31
 800eeb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	bd80      	pop	{r7, pc}
 800eeb8:	58024400 	.word	0x58024400
 800eebc:	08015bb8 	.word	0x08015bb8

0800eec0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800eec0:	b480      	push	{r7}
 800eec2:	b089      	sub	sp, #36	; 0x24
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800eec8:	4ba1      	ldr	r3, [pc, #644]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eecc:	f003 0303 	and.w	r3, r3, #3
 800eed0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800eed2:	4b9f      	ldr	r3, [pc, #636]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed6:	0b1b      	lsrs	r3, r3, #12
 800eed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eedc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800eede:	4b9c      	ldr	r3, [pc, #624]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eee2:	091b      	lsrs	r3, r3, #4
 800eee4:	f003 0301 	and.w	r3, r3, #1
 800eee8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800eeea:	4b99      	ldr	r3, [pc, #612]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800eeec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eeee:	08db      	lsrs	r3, r3, #3
 800eef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800eef4:	693a      	ldr	r2, [r7, #16]
 800eef6:	fb02 f303 	mul.w	r3, r2, r3
 800eefa:	ee07 3a90 	vmov	s15, r3
 800eefe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ef06:	697b      	ldr	r3, [r7, #20]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	f000 8111 	beq.w	800f130 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	2b02      	cmp	r3, #2
 800ef12:	f000 8083 	beq.w	800f01c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ef16:	69bb      	ldr	r3, [r7, #24]
 800ef18:	2b02      	cmp	r3, #2
 800ef1a:	f200 80a1 	bhi.w	800f060 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d003      	beq.n	800ef2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ef24:	69bb      	ldr	r3, [r7, #24]
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	d056      	beq.n	800efd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ef2a:	e099      	b.n	800f060 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef2c:	4b88      	ldr	r3, [pc, #544]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f003 0320 	and.w	r3, r3, #32
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d02d      	beq.n	800ef94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ef38:	4b85      	ldr	r3, [pc, #532]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	08db      	lsrs	r3, r3, #3
 800ef3e:	f003 0303 	and.w	r3, r3, #3
 800ef42:	4a84      	ldr	r2, [pc, #528]	; (800f154 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ef44:	fa22 f303 	lsr.w	r3, r2, r3
 800ef48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	ee07 3a90 	vmov	s15, r3
 800ef50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef54:	697b      	ldr	r3, [r7, #20]
 800ef56:	ee07 3a90 	vmov	s15, r3
 800ef5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ef62:	4b7b      	ldr	r3, [pc, #492]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef6a:	ee07 3a90 	vmov	s15, r3
 800ef6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef72:	ed97 6a03 	vldr	s12, [r7, #12]
 800ef76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ef7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ef7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ef82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ef92:	e087      	b.n	800f0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	ee07 3a90 	vmov	s15, r3
 800ef9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f15c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800efa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efa6:	4b6a      	ldr	r3, [pc, #424]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efae:	ee07 3a90 	vmov	s15, r3
 800efb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800efba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800efbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800efca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800efce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800efd6:	e065      	b.n	800f0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	ee07 3a90 	vmov	s15, r3
 800efde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efe2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f160 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800efe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efea:	4b59      	ldr	r3, [pc, #356]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eff2:	ee07 3a90 	vmov	s15, r3
 800eff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800effa:	ed97 6a03 	vldr	s12, [r7, #12]
 800effe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f01a:	e043      	b.n	800f0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	ee07 3a90 	vmov	s15, r3
 800f022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f026:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f02e:	4b48      	ldr	r3, [pc, #288]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f036:	ee07 3a90 	vmov	s15, r3
 800f03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f03e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f042:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f05a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f05e:	e021      	b.n	800f0a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	ee07 3a90 	vmov	s15, r3
 800f066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f06a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f160 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f072:	4b37      	ldr	r3, [pc, #220]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f07a:	ee07 3a90 	vmov	s15, r3
 800f07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f082:	ed97 6a03 	vldr	s12, [r7, #12]
 800f086:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f09e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f0a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800f0a4:	4b2a      	ldr	r3, [pc, #168]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0a8:	0a5b      	lsrs	r3, r3, #9
 800f0aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0ae:	ee07 3a90 	vmov	s15, r3
 800f0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f0ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f0be:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0ca:	ee17 2a90 	vmov	r2, s15
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800f0d2:	4b1f      	ldr	r3, [pc, #124]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0d6:	0c1b      	lsrs	r3, r3, #16
 800f0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0dc:	ee07 3a90 	vmov	s15, r3
 800f0e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f0e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f0ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800f0f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f0f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f0f8:	ee17 2a90 	vmov	r2, s15
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800f100:	4b13      	ldr	r3, [pc, #76]	; (800f150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f104:	0e1b      	lsrs	r3, r3, #24
 800f106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f10a:	ee07 3a90 	vmov	s15, r3
 800f10e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f11a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f11e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f126:	ee17 2a90 	vmov	r2, s15
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f12e:	e008      	b.n	800f142 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	609a      	str	r2, [r3, #8]
}
 800f142:	bf00      	nop
 800f144:	3724      	adds	r7, #36	; 0x24
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop
 800f150:	58024400 	.word	0x58024400
 800f154:	03d09000 	.word	0x03d09000
 800f158:	46000000 	.word	0x46000000
 800f15c:	4c742400 	.word	0x4c742400
 800f160:	4a742400 	.word	0x4a742400
 800f164:	4bbebc20 	.word	0x4bbebc20

0800f168 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800f168:	b480      	push	{r7}
 800f16a:	b089      	sub	sp, #36	; 0x24
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f170:	4ba1      	ldr	r3, [pc, #644]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f174:	f003 0303 	and.w	r3, r3, #3
 800f178:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800f17a:	4b9f      	ldr	r3, [pc, #636]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f17e:	0d1b      	lsrs	r3, r3, #20
 800f180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f184:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f186:	4b9c      	ldr	r3, [pc, #624]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f18a:	0a1b      	lsrs	r3, r3, #8
 800f18c:	f003 0301 	and.w	r3, r3, #1
 800f190:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f192:	4b99      	ldr	r3, [pc, #612]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f196:	08db      	lsrs	r3, r3, #3
 800f198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f19c:	693a      	ldr	r2, [r7, #16]
 800f19e:	fb02 f303 	mul.w	r3, r2, r3
 800f1a2:	ee07 3a90 	vmov	s15, r3
 800f1a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f1aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	f000 8111 	beq.w	800f3d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f1b6:	69bb      	ldr	r3, [r7, #24]
 800f1b8:	2b02      	cmp	r3, #2
 800f1ba:	f000 8083 	beq.w	800f2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	2b02      	cmp	r3, #2
 800f1c2:	f200 80a1 	bhi.w	800f308 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d003      	beq.n	800f1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f1cc:	69bb      	ldr	r3, [r7, #24]
 800f1ce:	2b01      	cmp	r3, #1
 800f1d0:	d056      	beq.n	800f280 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f1d2:	e099      	b.n	800f308 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1d4:	4b88      	ldr	r3, [pc, #544]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f003 0320 	and.w	r3, r3, #32
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d02d      	beq.n	800f23c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f1e0:	4b85      	ldr	r3, [pc, #532]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	08db      	lsrs	r3, r3, #3
 800f1e6:	f003 0303 	and.w	r3, r3, #3
 800f1ea:	4a84      	ldr	r2, [pc, #528]	; (800f3fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f1ec:	fa22 f303 	lsr.w	r3, r2, r3
 800f1f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	ee07 3a90 	vmov	s15, r3
 800f1f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	ee07 3a90 	vmov	s15, r3
 800f202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f20a:	4b7b      	ldr	r3, [pc, #492]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f212:	ee07 3a90 	vmov	s15, r3
 800f216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f21a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f21e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f22a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f22e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f232:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f236:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f23a:	e087      	b.n	800f34c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	ee07 3a90 	vmov	s15, r3
 800f242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f246:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f404 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f24e:	4b6a      	ldr	r3, [pc, #424]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f256:	ee07 3a90 	vmov	s15, r3
 800f25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f25e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f262:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f26e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f27a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f27e:	e065      	b.n	800f34c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	ee07 3a90 	vmov	s15, r3
 800f286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f28a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f408 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f292:	4b59      	ldr	r3, [pc, #356]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f29a:	ee07 3a90 	vmov	s15, r3
 800f29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f2c2:	e043      	b.n	800f34c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	ee07 3a90 	vmov	s15, r3
 800f2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f40c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2d6:	4b48      	ldr	r3, [pc, #288]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2de:	ee07 3a90 	vmov	s15, r3
 800f2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f306:	e021      	b.n	800f34c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	ee07 3a90 	vmov	s15, r3
 800f30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f312:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f408 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f31a:	4b37      	ldr	r3, [pc, #220]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f322:	ee07 3a90 	vmov	s15, r3
 800f326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f32a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f32e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f33a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f34a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800f34c:	4b2a      	ldr	r3, [pc, #168]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f350:	0a5b      	lsrs	r3, r3, #9
 800f352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f356:	ee07 3a90 	vmov	s15, r3
 800f35a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f35e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f362:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f366:	edd7 6a07 	vldr	s13, [r7, #28]
 800f36a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f36e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f372:	ee17 2a90 	vmov	r2, s15
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800f37a:	4b1f      	ldr	r3, [pc, #124]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f37e:	0c1b      	lsrs	r3, r3, #16
 800f380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f384:	ee07 3a90 	vmov	s15, r3
 800f388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f38c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f390:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f394:	edd7 6a07 	vldr	s13, [r7, #28]
 800f398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f39c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f3a0:	ee17 2a90 	vmov	r2, s15
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800f3a8:	4b13      	ldr	r3, [pc, #76]	; (800f3f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ac:	0e1b      	lsrs	r3, r3, #24
 800f3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f3b2:	ee07 3a90 	vmov	s15, r3
 800f3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f3be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f3c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800f3c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f3ce:	ee17 2a90 	vmov	r2, s15
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f3d6:	e008      	b.n	800f3ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	609a      	str	r2, [r3, #8]
}
 800f3ea:	bf00      	nop
 800f3ec:	3724      	adds	r7, #36	; 0x24
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	58024400 	.word	0x58024400
 800f3fc:	03d09000 	.word	0x03d09000
 800f400:	46000000 	.word	0x46000000
 800f404:	4c742400 	.word	0x4c742400
 800f408:	4a742400 	.word	0x4a742400
 800f40c:	4bbebc20 	.word	0x4bbebc20

0800f410 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800f410:	b480      	push	{r7}
 800f412:	b089      	sub	sp, #36	; 0x24
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f418:	4ba0      	ldr	r3, [pc, #640]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f41c:	f003 0303 	and.w	r3, r3, #3
 800f420:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800f422:	4b9e      	ldr	r3, [pc, #632]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f426:	091b      	lsrs	r3, r3, #4
 800f428:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f42c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f42e:	4b9b      	ldr	r3, [pc, #620]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f432:	f003 0301 	and.w	r3, r3, #1
 800f436:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f438:	4b98      	ldr	r3, [pc, #608]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f43c:	08db      	lsrs	r3, r3, #3
 800f43e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f442:	693a      	ldr	r2, [r7, #16]
 800f444:	fb02 f303 	mul.w	r3, r2, r3
 800f448:	ee07 3a90 	vmov	s15, r3
 800f44c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f450:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	2b00      	cmp	r3, #0
 800f458:	f000 8111 	beq.w	800f67e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f45c:	69bb      	ldr	r3, [r7, #24]
 800f45e:	2b02      	cmp	r3, #2
 800f460:	f000 8083 	beq.w	800f56a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	2b02      	cmp	r3, #2
 800f468:	f200 80a1 	bhi.w	800f5ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d003      	beq.n	800f47a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f472:	69bb      	ldr	r3, [r7, #24]
 800f474:	2b01      	cmp	r3, #1
 800f476:	d056      	beq.n	800f526 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f478:	e099      	b.n	800f5ae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f47a:	4b88      	ldr	r3, [pc, #544]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f003 0320 	and.w	r3, r3, #32
 800f482:	2b00      	cmp	r3, #0
 800f484:	d02d      	beq.n	800f4e2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f486:	4b85      	ldr	r3, [pc, #532]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	08db      	lsrs	r3, r3, #3
 800f48c:	f003 0303 	and.w	r3, r3, #3
 800f490:	4a83      	ldr	r2, [pc, #524]	; (800f6a0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f492:	fa22 f303 	lsr.w	r3, r2, r3
 800f496:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	ee07 3a90 	vmov	s15, r3
 800f49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	ee07 3a90 	vmov	s15, r3
 800f4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4b0:	4b7a      	ldr	r3, [pc, #488]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f4b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4b8:	ee07 3a90 	vmov	s15, r3
 800f4bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800f4c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800f6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f4c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f4e0:	e087      	b.n	800f5f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	ee07 3a90 	vmov	s15, r3
 800f4e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800f6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f4f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f4f4:	4b69      	ldr	r3, [pc, #420]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4fc:	ee07 3a90 	vmov	s15, r3
 800f500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f504:	ed97 6a03 	vldr	s12, [r7, #12]
 800f508:	eddf 5a66 	vldr	s11, [pc, #408]	; 800f6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f50c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f510:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f514:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f518:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f51c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f520:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f524:	e065      	b.n	800f5f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	ee07 3a90 	vmov	s15, r3
 800f52c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f530:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800f6ac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f538:	4b58      	ldr	r3, [pc, #352]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f53c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f540:	ee07 3a90 	vmov	s15, r3
 800f544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f548:	ed97 6a03 	vldr	s12, [r7, #12]
 800f54c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800f6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f550:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f554:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f55c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f560:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f564:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f568:	e043      	b.n	800f5f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	ee07 3a90 	vmov	s15, r3
 800f570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f574:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800f6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f57c:	4b47      	ldr	r3, [pc, #284]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f584:	ee07 3a90 	vmov	s15, r3
 800f588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f58c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f590:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f59c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f5a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f5ac:	e021      	b.n	800f5f2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	ee07 3a90 	vmov	s15, r3
 800f5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5b8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800f6a8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f5bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5c0:	4b36      	ldr	r3, [pc, #216]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5c8:	ee07 3a90 	vmov	s15, r3
 800f5cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800f6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f5d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f5e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f5f0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800f5f2:	4b2a      	ldr	r3, [pc, #168]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5f6:	0a5b      	lsrs	r3, r3, #9
 800f5f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f5fc:	ee07 3a90 	vmov	s15, r3
 800f600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f608:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f60c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f618:	ee17 2a90 	vmov	r2, s15
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800f620:	4b1e      	ldr	r3, [pc, #120]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f624:	0c1b      	lsrs	r3, r3, #16
 800f626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f62a:	ee07 3a90 	vmov	s15, r3
 800f62e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f632:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f636:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f63a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f63e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f646:	ee17 2a90 	vmov	r2, s15
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800f64e:	4b13      	ldr	r3, [pc, #76]	; (800f69c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f652:	0e1b      	lsrs	r3, r3, #24
 800f654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f658:	ee07 3a90 	vmov	s15, r3
 800f65c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f664:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f668:	edd7 6a07 	vldr	s13, [r7, #28]
 800f66c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f674:	ee17 2a90 	vmov	r2, s15
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f67c:	e008      	b.n	800f690 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2200      	movs	r2, #0
 800f688:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2200      	movs	r2, #0
 800f68e:	609a      	str	r2, [r3, #8]
}
 800f690:	bf00      	nop
 800f692:	3724      	adds	r7, #36	; 0x24
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr
 800f69c:	58024400 	.word	0x58024400
 800f6a0:	03d09000 	.word	0x03d09000
 800f6a4:	46000000 	.word	0x46000000
 800f6a8:	4c742400 	.word	0x4c742400
 800f6ac:	4a742400 	.word	0x4a742400
 800f6b0:	4bbebc20 	.word	0x4bbebc20

0800f6b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b084      	sub	sp, #16
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
 800f6bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f6c2:	4b53      	ldr	r3, [pc, #332]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f6c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c6:	f003 0303 	and.w	r3, r3, #3
 800f6ca:	2b03      	cmp	r3, #3
 800f6cc:	d101      	bne.n	800f6d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e099      	b.n	800f806 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f6d2:	4b4f      	ldr	r3, [pc, #316]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a4e      	ldr	r2, [pc, #312]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f6d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f6dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f6de:	f7f6 f8fd 	bl	80058dc <HAL_GetTick>
 800f6e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f6e4:	e008      	b.n	800f6f8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f6e6:	f7f6 f8f9 	bl	80058dc <HAL_GetTick>
 800f6ea:	4602      	mov	r2, r0
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	1ad3      	subs	r3, r2, r3
 800f6f0:	2b02      	cmp	r3, #2
 800f6f2:	d901      	bls.n	800f6f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f6f4:	2303      	movs	r3, #3
 800f6f6:	e086      	b.n	800f806 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f6f8:	4b45      	ldr	r3, [pc, #276]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f700:	2b00      	cmp	r3, #0
 800f702:	d1f0      	bne.n	800f6e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f704:	4b42      	ldr	r3, [pc, #264]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f708:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	031b      	lsls	r3, r3, #12
 800f712:	493f      	ldr	r1, [pc, #252]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f714:	4313      	orrs	r3, r2
 800f716:	628b      	str	r3, [r1, #40]	; 0x28
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	3b01      	subs	r3, #1
 800f728:	025b      	lsls	r3, r3, #9
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	431a      	orrs	r2, r3
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	68db      	ldr	r3, [r3, #12]
 800f732:	3b01      	subs	r3, #1
 800f734:	041b      	lsls	r3, r3, #16
 800f736:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f73a:	431a      	orrs	r2, r3
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	691b      	ldr	r3, [r3, #16]
 800f740:	3b01      	subs	r3, #1
 800f742:	061b      	lsls	r3, r3, #24
 800f744:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f748:	4931      	ldr	r1, [pc, #196]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f74a:	4313      	orrs	r3, r2
 800f74c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f74e:	4b30      	ldr	r3, [pc, #192]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	695b      	ldr	r3, [r3, #20]
 800f75a:	492d      	ldr	r1, [pc, #180]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f75c:	4313      	orrs	r3, r2
 800f75e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f760:	4b2b      	ldr	r3, [pc, #172]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f764:	f023 0220 	bic.w	r2, r3, #32
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	699b      	ldr	r3, [r3, #24]
 800f76c:	4928      	ldr	r1, [pc, #160]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f76e:	4313      	orrs	r3, r2
 800f770:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f772:	4b27      	ldr	r3, [pc, #156]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f776:	4a26      	ldr	r2, [pc, #152]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f778:	f023 0310 	bic.w	r3, r3, #16
 800f77c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f77e:	4b24      	ldr	r3, [pc, #144]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f780:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f782:	4b24      	ldr	r3, [pc, #144]	; (800f814 <RCCEx_PLL2_Config+0x160>)
 800f784:	4013      	ands	r3, r2
 800f786:	687a      	ldr	r2, [r7, #4]
 800f788:	69d2      	ldr	r2, [r2, #28]
 800f78a:	00d2      	lsls	r2, r2, #3
 800f78c:	4920      	ldr	r1, [pc, #128]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f78e:	4313      	orrs	r3, r2
 800f790:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f792:	4b1f      	ldr	r3, [pc, #124]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f796:	4a1e      	ldr	r2, [pc, #120]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f798:	f043 0310 	orr.w	r3, r3, #16
 800f79c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d106      	bne.n	800f7b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f7a4:	4b1a      	ldr	r3, [pc, #104]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a8:	4a19      	ldr	r2, [pc, #100]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f7aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f7b0:	e00f      	b.n	800f7d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d106      	bne.n	800f7c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f7b8:	4b15      	ldr	r3, [pc, #84]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7bc:	4a14      	ldr	r2, [pc, #80]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f7be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f7c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f7c4:	e005      	b.n	800f7d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f7c6:	4b12      	ldr	r3, [pc, #72]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ca:	4a11      	ldr	r2, [pc, #68]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f7cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f7d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f7d2:	4b0f      	ldr	r3, [pc, #60]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	4a0e      	ldr	r2, [pc, #56]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f7d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f7dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f7de:	f7f6 f87d 	bl	80058dc <HAL_GetTick>
 800f7e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f7e4:	e008      	b.n	800f7f8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800f7e6:	f7f6 f879 	bl	80058dc <HAL_GetTick>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	1ad3      	subs	r3, r2, r3
 800f7f0:	2b02      	cmp	r3, #2
 800f7f2:	d901      	bls.n	800f7f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	e006      	b.n	800f806 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f7f8:	4b05      	ldr	r3, [pc, #20]	; (800f810 <RCCEx_PLL2_Config+0x15c>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f800:	2b00      	cmp	r3, #0
 800f802:	d0f0      	beq.n	800f7e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f804:	7bfb      	ldrb	r3, [r7, #15]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3710      	adds	r7, #16
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	58024400 	.word	0x58024400
 800f814:	ffff0007 	.word	0xffff0007

0800f818 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f822:	2300      	movs	r3, #0
 800f824:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f826:	4b53      	ldr	r3, [pc, #332]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f82a:	f003 0303 	and.w	r3, r3, #3
 800f82e:	2b03      	cmp	r3, #3
 800f830:	d101      	bne.n	800f836 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f832:	2301      	movs	r3, #1
 800f834:	e099      	b.n	800f96a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f836:	4b4f      	ldr	r3, [pc, #316]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	4a4e      	ldr	r2, [pc, #312]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f83c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f842:	f7f6 f84b 	bl	80058dc <HAL_GetTick>
 800f846:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f848:	e008      	b.n	800f85c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f84a:	f7f6 f847 	bl	80058dc <HAL_GetTick>
 800f84e:	4602      	mov	r2, r0
 800f850:	68bb      	ldr	r3, [r7, #8]
 800f852:	1ad3      	subs	r3, r2, r3
 800f854:	2b02      	cmp	r3, #2
 800f856:	d901      	bls.n	800f85c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f858:	2303      	movs	r3, #3
 800f85a:	e086      	b.n	800f96a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f85c:	4b45      	ldr	r3, [pc, #276]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1f0      	bne.n	800f84a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f868:	4b42      	ldr	r3, [pc, #264]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f86c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	051b      	lsls	r3, r3, #20
 800f876:	493f      	ldr	r1, [pc, #252]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f878:	4313      	orrs	r3, r2
 800f87a:	628b      	str	r3, [r1, #40]	; 0x28
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	685b      	ldr	r3, [r3, #4]
 800f880:	3b01      	subs	r3, #1
 800f882:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	3b01      	subs	r3, #1
 800f88c:	025b      	lsls	r3, r3, #9
 800f88e:	b29b      	uxth	r3, r3
 800f890:	431a      	orrs	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	3b01      	subs	r3, #1
 800f898:	041b      	lsls	r3, r3, #16
 800f89a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f89e:	431a      	orrs	r2, r3
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	691b      	ldr	r3, [r3, #16]
 800f8a4:	3b01      	subs	r3, #1
 800f8a6:	061b      	lsls	r3, r3, #24
 800f8a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f8ac:	4931      	ldr	r1, [pc, #196]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f8b2:	4b30      	ldr	r3, [pc, #192]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	695b      	ldr	r3, [r3, #20]
 800f8be:	492d      	ldr	r1, [pc, #180]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f8c4:	4b2b      	ldr	r3, [pc, #172]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	699b      	ldr	r3, [r3, #24]
 800f8d0:	4928      	ldr	r1, [pc, #160]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f8d6:	4b27      	ldr	r3, [pc, #156]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8da:	4a26      	ldr	r2, [pc, #152]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f8e2:	4b24      	ldr	r3, [pc, #144]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f8e6:	4b24      	ldr	r3, [pc, #144]	; (800f978 <RCCEx_PLL3_Config+0x160>)
 800f8e8:	4013      	ands	r3, r2
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	69d2      	ldr	r2, [r2, #28]
 800f8ee:	00d2      	lsls	r2, r2, #3
 800f8f0:	4920      	ldr	r1, [pc, #128]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8f2:	4313      	orrs	r3, r2
 800f8f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f8f6:	4b1f      	ldr	r3, [pc, #124]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8fa:	4a1e      	ldr	r2, [pc, #120]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f8fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f900:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d106      	bne.n	800f916 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f908:	4b1a      	ldr	r3, [pc, #104]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f90c:	4a19      	ldr	r2, [pc, #100]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f90e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f912:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f914:	e00f      	b.n	800f936 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	2b01      	cmp	r3, #1
 800f91a:	d106      	bne.n	800f92a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f91c:	4b15      	ldr	r3, [pc, #84]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f920:	4a14      	ldr	r2, [pc, #80]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f922:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f926:	62d3      	str	r3, [r2, #44]	; 0x2c
 800f928:	e005      	b.n	800f936 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f92a:	4b12      	ldr	r3, [pc, #72]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f92c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92e:	4a11      	ldr	r2, [pc, #68]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f930:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f934:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f936:	4b0f      	ldr	r3, [pc, #60]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a0e      	ldr	r2, [pc, #56]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f93c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f942:	f7f5 ffcb 	bl	80058dc <HAL_GetTick>
 800f946:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f948:	e008      	b.n	800f95c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800f94a:	f7f5 ffc7 	bl	80058dc <HAL_GetTick>
 800f94e:	4602      	mov	r2, r0
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	1ad3      	subs	r3, r2, r3
 800f954:	2b02      	cmp	r3, #2
 800f956:	d901      	bls.n	800f95c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f958:	2303      	movs	r3, #3
 800f95a:	e006      	b.n	800f96a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f95c:	4b05      	ldr	r3, [pc, #20]	; (800f974 <RCCEx_PLL3_Config+0x15c>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f964:	2b00      	cmp	r3, #0
 800f966:	d0f0      	beq.n	800f94a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f968:	7bfb      	ldrb	r3, [r7, #15]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	58024400 	.word	0x58024400
 800f978:	ffff0007 	.word	0xffff0007

0800f97c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d101      	bne.n	800f98e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f98a:	2301      	movs	r3, #1
 800f98c:	e0f1      	b.n	800fb72 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2200      	movs	r2, #0
 800f992:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	4a78      	ldr	r2, [pc, #480]	; (800fb7c <HAL_SPI_Init+0x200>)
 800f99a:	4293      	cmp	r3, r2
 800f99c:	d00f      	beq.n	800f9be <HAL_SPI_Init+0x42>
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	4a77      	ldr	r2, [pc, #476]	; (800fb80 <HAL_SPI_Init+0x204>)
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d00a      	beq.n	800f9be <HAL_SPI_Init+0x42>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	4a75      	ldr	r2, [pc, #468]	; (800fb84 <HAL_SPI_Init+0x208>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d005      	beq.n	800f9be <HAL_SPI_Init+0x42>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	2b0f      	cmp	r3, #15
 800f9b8:	d901      	bls.n	800f9be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e0d9      	b.n	800fb72 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f000 ff66 	bl	8010890 <SPI_GetPacketSize>
 800f9c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	4a6c      	ldr	r2, [pc, #432]	; (800fb7c <HAL_SPI_Init+0x200>)
 800f9cc:	4293      	cmp	r3, r2
 800f9ce:	d00c      	beq.n	800f9ea <HAL_SPI_Init+0x6e>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	4a6a      	ldr	r2, [pc, #424]	; (800fb80 <HAL_SPI_Init+0x204>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d007      	beq.n	800f9ea <HAL_SPI_Init+0x6e>
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a69      	ldr	r2, [pc, #420]	; (800fb84 <HAL_SPI_Init+0x208>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d002      	beq.n	800f9ea <HAL_SPI_Init+0x6e>
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2b08      	cmp	r3, #8
 800f9e8:	d811      	bhi.n	800fa0e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f9ee:	4a63      	ldr	r2, [pc, #396]	; (800fb7c <HAL_SPI_Init+0x200>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d009      	beq.n	800fa08 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a61      	ldr	r2, [pc, #388]	; (800fb80 <HAL_SPI_Init+0x204>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d004      	beq.n	800fa08 <HAL_SPI_Init+0x8c>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	4a60      	ldr	r2, [pc, #384]	; (800fb84 <HAL_SPI_Init+0x208>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d104      	bne.n	800fa12 <HAL_SPI_Init+0x96>
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2b10      	cmp	r3, #16
 800fa0c:	d901      	bls.n	800fa12 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fa0e:	2301      	movs	r3, #1
 800fa10:	e0af      	b.n	800fb72 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d106      	bne.n	800fa2c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f7f4 fa20 	bl	8003e6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2202      	movs	r2, #2
 800fa30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f022 0201 	bic.w	r2, r2, #1
 800fa42:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	689b      	ldr	r3, [r3, #8]
 800fa4a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800fa4e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	699b      	ldr	r3, [r3, #24]
 800fa54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fa58:	d119      	bne.n	800fa8e <HAL_SPI_Init+0x112>
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fa62:	d103      	bne.n	800fa6c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d008      	beq.n	800fa7e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d10c      	bne.n	800fa8e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fa78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa7c:	d107      	bne.n	800fa8e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	681a      	ldr	r2, [r3, #0]
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fa8c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	69da      	ldr	r2, [r3, #28]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa96:	431a      	orrs	r2, r3
 800fa98:	68bb      	ldr	r3, [r7, #8]
 800fa9a:	431a      	orrs	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faa0:	ea42 0103 	orr.w	r1, r2, r3
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	68da      	ldr	r2, [r3, #12]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	430a      	orrs	r2, r1
 800faae:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab8:	431a      	orrs	r2, r3
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fabe:	431a      	orrs	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	699b      	ldr	r3, [r3, #24]
 800fac4:	431a      	orrs	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	691b      	ldr	r3, [r3, #16]
 800faca:	431a      	orrs	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	695b      	ldr	r3, [r3, #20]
 800fad0:	431a      	orrs	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6a1b      	ldr	r3, [r3, #32]
 800fad6:	431a      	orrs	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	431a      	orrs	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fae2:	431a      	orrs	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	431a      	orrs	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800faee:	ea42 0103 	orr.w	r1, r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	430a      	orrs	r2, r1
 800fafc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d113      	bne.n	800fb2e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fb18:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	689b      	ldr	r3, [r3, #8]
 800fb20:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fb2c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f022 0201 	bic.w	r2, r2, #1
 800fb3c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00a      	beq.n	800fb60 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	430a      	orrs	r2, r1
 800fb5e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800fb70:	2300      	movs	r3, #0
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3710      	adds	r7, #16
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	40013000 	.word	0x40013000
 800fb80:	40003800 	.word	0x40003800
 800fb84:	40003c00 	.word	0x40003c00

0800fb88 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b08a      	sub	sp, #40	; 0x28
 800fb8c:	af02      	add	r7, sp, #8
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	603b      	str	r3, [r7, #0]
 800fb94:	4613      	mov	r3, r2
 800fb96:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	3320      	adds	r3, #32
 800fb9e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d101      	bne.n	800fbb2 <HAL_SPI_Transmit+0x2a>
 800fbae:	2302      	movs	r3, #2
 800fbb0:	e1d7      	b.n	800ff62 <HAL_SPI_Transmit+0x3da>
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2201      	movs	r2, #1
 800fbb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fbba:	f7f5 fe8f 	bl	80058dc <HAL_GetTick>
 800fbbe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	2b01      	cmp	r3, #1
 800fbca:	d007      	beq.n	800fbdc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800fbcc:	2302      	movs	r3, #2
 800fbce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fbd8:	7efb      	ldrb	r3, [r7, #27]
 800fbda:	e1c2      	b.n	800ff62 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d002      	beq.n	800fbe8 <HAL_SPI_Transmit+0x60>
 800fbe2:	88fb      	ldrh	r3, [r7, #6]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d107      	bne.n	800fbf8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800fbe8:	2301      	movs	r3, #1
 800fbea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fbf4:	7efb      	ldrb	r3, [r7, #27]
 800fbf6:	e1b4      	b.n	800ff62 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2203      	movs	r2, #3
 800fbfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	2200      	movs	r2, #0
 800fc04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	68ba      	ldr	r2, [r7, #8]
 800fc0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	88fa      	ldrh	r2, [r7, #6]
 800fc12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	88fa      	ldrh	r2, [r7, #6]
 800fc1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2200      	movs	r2, #0
 800fc22:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2200      	movs	r2, #0
 800fc28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2200      	movs	r2, #0
 800fc38:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fc48:	d107      	bne.n	800fc5a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681a      	ldr	r2, [r3, #0]
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fc58:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	685a      	ldr	r2, [r3, #4]
 800fc60:	4b96      	ldr	r3, [pc, #600]	; (800febc <HAL_SPI_Transmit+0x334>)
 800fc62:	4013      	ands	r3, r2
 800fc64:	88f9      	ldrh	r1, [r7, #6]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	6812      	ldr	r2, [r2, #0]
 800fc6a:	430b      	orrs	r3, r1
 800fc6c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f042 0201 	orr.w	r2, r2, #1
 800fc7c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fc86:	d107      	bne.n	800fc98 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	681a      	ldr	r2, [r3, #0]
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	2b0f      	cmp	r3, #15
 800fc9e:	d947      	bls.n	800fd30 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fca0:	e03f      	b.n	800fd22 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	695b      	ldr	r3, [r3, #20]
 800fca8:	f003 0302 	and.w	r3, r3, #2
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d114      	bne.n	800fcda <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	6812      	ldr	r2, [r2, #0]
 800fcba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcc0:	1d1a      	adds	r2, r3, #4
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fccc:	b29b      	uxth	r3, r3
 800fcce:	3b01      	subs	r3, #1
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fcd8:	e023      	b.n	800fd22 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fcda:	f7f5 fdff 	bl	80058dc <HAL_GetTick>
 800fcde:	4602      	mov	r2, r0
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	1ad3      	subs	r3, r2, r3
 800fce4:	683a      	ldr	r2, [r7, #0]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d803      	bhi.n	800fcf2 <HAL_SPI_Transmit+0x16a>
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf0:	d102      	bne.n	800fcf8 <HAL_SPI_Transmit+0x170>
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d114      	bne.n	800fd22 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fcf8:	68f8      	ldr	r0, [r7, #12]
 800fcfa:	f000 fcfb 	bl	80106f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2201      	movs	r2, #1
 800fd1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fd1e:	2303      	movs	r3, #3
 800fd20:	e11f      	b.n	800ff62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d1b9      	bne.n	800fca2 <HAL_SPI_Transmit+0x11a>
 800fd2e:	e0f2      	b.n	800ff16 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	2b07      	cmp	r3, #7
 800fd36:	f240 80e7 	bls.w	800ff08 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fd3a:	e05d      	b.n	800fdf8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	695b      	ldr	r3, [r3, #20]
 800fd42:	f003 0302 	and.w	r3, r3, #2
 800fd46:	2b02      	cmp	r3, #2
 800fd48:	d132      	bne.n	800fdb0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd50:	b29b      	uxth	r3, r3
 800fd52:	2b01      	cmp	r3, #1
 800fd54:	d918      	bls.n	800fd88 <HAL_SPI_Transmit+0x200>
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d014      	beq.n	800fd88 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	6812      	ldr	r2, [r2, #0]
 800fd68:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd6e:	1d1a      	adds	r2, r3, #4
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd7a:	b29b      	uxth	r3, r3
 800fd7c:	3b02      	subs	r3, #2
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fd86:	e037      	b.n	800fdf8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd8c:	881a      	ldrh	r2, [r3, #0]
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd96:	1c9a      	adds	r2, r3, #2
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	3b01      	subs	r3, #1
 800fda6:	b29a      	uxth	r2, r3
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fdae:	e023      	b.n	800fdf8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fdb0:	f7f5 fd94 	bl	80058dc <HAL_GetTick>
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	697b      	ldr	r3, [r7, #20]
 800fdb8:	1ad3      	subs	r3, r2, r3
 800fdba:	683a      	ldr	r2, [r7, #0]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d803      	bhi.n	800fdc8 <HAL_SPI_Transmit+0x240>
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc6:	d102      	bne.n	800fdce <HAL_SPI_Transmit+0x246>
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d114      	bne.n	800fdf8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fdce:	68f8      	ldr	r0, [r7, #12]
 800fdd0:	f000 fc90 	bl	80106f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fde2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fdf4:	2303      	movs	r3, #3
 800fdf6:	e0b4      	b.n	800ff62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d19b      	bne.n	800fd3c <HAL_SPI_Transmit+0x1b4>
 800fe04:	e087      	b.n	800ff16 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	695b      	ldr	r3, [r3, #20]
 800fe0c:	f003 0302 	and.w	r3, r3, #2
 800fe10:	2b02      	cmp	r3, #2
 800fe12:	d155      	bne.n	800fec0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe1a:	b29b      	uxth	r3, r3
 800fe1c:	2b03      	cmp	r3, #3
 800fe1e:	d918      	bls.n	800fe52 <HAL_SPI_Transmit+0x2ca>
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe24:	2b40      	cmp	r3, #64	; 0x40
 800fe26:	d914      	bls.n	800fe52 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	6812      	ldr	r2, [r2, #0]
 800fe32:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe38:	1d1a      	adds	r2, r3, #4
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	3b04      	subs	r3, #4
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fe50:	e05a      	b.n	800ff08 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d917      	bls.n	800fe8e <HAL_SPI_Transmit+0x306>
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d013      	beq.n	800fe8e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe6a:	881a      	ldrh	r2, [r3, #0]
 800fe6c:	69fb      	ldr	r3, [r7, #28]
 800fe6e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe74:	1c9a      	adds	r2, r3, #2
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe80:	b29b      	uxth	r3, r3
 800fe82:	3b02      	subs	r3, #2
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fe8c:	e03c      	b.n	800ff08 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	3320      	adds	r3, #32
 800fe98:	7812      	ldrb	r2, [r2, #0]
 800fe9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fea0:	1c5a      	adds	r2, r3, #1
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800feac:	b29b      	uxth	r3, r3
 800feae:	3b01      	subs	r3, #1
 800feb0:	b29a      	uxth	r2, r3
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800feb8:	e026      	b.n	800ff08 <HAL_SPI_Transmit+0x380>
 800feba:	bf00      	nop
 800febc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fec0:	f7f5 fd0c 	bl	80058dc <HAL_GetTick>
 800fec4:	4602      	mov	r2, r0
 800fec6:	697b      	ldr	r3, [r7, #20]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	683a      	ldr	r2, [r7, #0]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d803      	bhi.n	800fed8 <HAL_SPI_Transmit+0x350>
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fed6:	d102      	bne.n	800fede <HAL_SPI_Transmit+0x356>
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d114      	bne.n	800ff08 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fede:	68f8      	ldr	r0, [r7, #12]
 800fee0:	f000 fc08 	bl	80106f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	2200      	movs	r2, #0
 800fee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fef2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2201      	movs	r2, #1
 800ff00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ff04:	2303      	movs	r3, #3
 800ff06:	e02c      	b.n	800ff62 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	f47f af78 	bne.w	800fe06 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	9300      	str	r3, [sp, #0]
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	2108      	movs	r1, #8
 800ff20:	68f8      	ldr	r0, [r7, #12]
 800ff22:	f000 fc87 	bl	8010834 <SPI_WaitOnFlagUntilTimeout>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d007      	beq.n	800ff3c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff32:	f043 0220 	orr.w	r2, r3, #32
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ff3c:	68f8      	ldr	r0, [r7, #12]
 800ff3e:	f000 fbd9 	bl	80106f4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	2200      	movs	r2, #0
 800ff46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	2201      	movs	r2, #1
 800ff4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e000      	b.n	800ff62 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800ff60:	7efb      	ldrb	r3, [r7, #27]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3720      	adds	r7, #32
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop

0800ff6c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b08a      	sub	sp, #40	; 0x28
 800ff70:	af02      	add	r7, sp, #8
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	603b      	str	r3, [r7, #0]
 800ff78:	4613      	mov	r3, r2
 800ff7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	3330      	adds	r3, #48	; 0x30
 800ff86:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	685b      	ldr	r3, [r3, #4]
 800ff8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff90:	d112      	bne.n	800ffb8 <HAL_SPI_Receive+0x4c>
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	689b      	ldr	r3, [r3, #8]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d10e      	bne.n	800ffb8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2204      	movs	r2, #4
 800ff9e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ffa2:	88fa      	ldrh	r2, [r7, #6]
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	9300      	str	r3, [sp, #0]
 800ffa8:	4613      	mov	r3, r2
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	68b9      	ldr	r1, [r7, #8]
 800ffae:	68f8      	ldr	r0, [r7, #12]
 800ffb0:	f000 f978 	bl	80102a4 <HAL_SPI_TransmitReceive>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	e16f      	b.n	8010298 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d101      	bne.n	800ffc6 <HAL_SPI_Receive+0x5a>
 800ffc2:	2302      	movs	r3, #2
 800ffc4:	e168      	b.n	8010298 <HAL_SPI_Receive+0x32c>
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	2201      	movs	r2, #1
 800ffca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ffce:	f7f5 fc85 	bl	80058dc <HAL_GetTick>
 800ffd2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	2b01      	cmp	r3, #1
 800ffde:	d007      	beq.n	800fff0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ffe0:	2302      	movs	r3, #2
 800ffe2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ffec:	7ffb      	ldrb	r3, [r7, #31]
 800ffee:	e153      	b.n	8010298 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d002      	beq.n	800fffc <HAL_SPI_Receive+0x90>
 800fff6:	88fb      	ldrh	r3, [r7, #6]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d107      	bne.n	801000c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800fffc:	2301      	movs	r3, #1
 800fffe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	2200      	movs	r2, #0
 8010004:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010008:	7ffb      	ldrb	r3, [r7, #31]
 801000a:	e145      	b.n	8010298 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	2204      	movs	r2, #4
 8010010:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2200      	movs	r2, #0
 8010018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	68ba      	ldr	r2, [r7, #8]
 8010020:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	88fa      	ldrh	r2, [r7, #6]
 8010026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	88fa      	ldrh	r2, [r7, #6]
 801002e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2200      	movs	r2, #0
 8010036:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2200      	movs	r2, #0
 8010044:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2200      	movs	r2, #0
 801004c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2200      	movs	r2, #0
 8010052:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	689b      	ldr	r3, [r3, #8]
 8010058:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 801005c:	d107      	bne.n	801006e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	681a      	ldr	r2, [r3, #0]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801006c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	685a      	ldr	r2, [r3, #4]
 8010074:	4b8a      	ldr	r3, [pc, #552]	; (80102a0 <HAL_SPI_Receive+0x334>)
 8010076:	4013      	ands	r3, r2
 8010078:	88f9      	ldrh	r1, [r7, #6]
 801007a:	68fa      	ldr	r2, [r7, #12]
 801007c:	6812      	ldr	r2, [r2, #0]
 801007e:	430b      	orrs	r3, r1
 8010080:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	681a      	ldr	r2, [r3, #0]
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f042 0201 	orr.w	r2, r2, #1
 8010090:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	685b      	ldr	r3, [r3, #4]
 8010096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801009a:	d107      	bne.n	80100ac <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80100aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	2b0f      	cmp	r3, #15
 80100b2:	d948      	bls.n	8010146 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80100b4:	e040      	b.n	8010138 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	695a      	ldr	r2, [r3, #20]
 80100bc:	f248 0308 	movw	r3, #32776	; 0x8008
 80100c0:	4013      	ands	r3, r2
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d014      	beq.n	80100f0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	681a      	ldr	r2, [r3, #0]
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80100d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80100d6:	1d1a      	adds	r2, r3, #4
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80100e2:	b29b      	uxth	r3, r3
 80100e4:	3b01      	subs	r3, #1
 80100e6:	b29a      	uxth	r2, r3
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80100ee:	e023      	b.n	8010138 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100f0:	f7f5 fbf4 	bl	80058dc <HAL_GetTick>
 80100f4:	4602      	mov	r2, r0
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	683a      	ldr	r2, [r7, #0]
 80100fc:	429a      	cmp	r2, r3
 80100fe:	d803      	bhi.n	8010108 <HAL_SPI_Receive+0x19c>
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010106:	d102      	bne.n	801010e <HAL_SPI_Receive+0x1a2>
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d114      	bne.n	8010138 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	f000 faf0 	bl	80106f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	2200      	movs	r2, #0
 8010118:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010122:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2201      	movs	r2, #1
 8010130:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010134:	2303      	movs	r3, #3
 8010136:	e0af      	b.n	8010298 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801013e:	b29b      	uxth	r3, r3
 8010140:	2b00      	cmp	r3, #0
 8010142:	d1b8      	bne.n	80100b6 <HAL_SPI_Receive+0x14a>
 8010144:	e095      	b.n	8010272 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	2b07      	cmp	r3, #7
 801014c:	f240 808b 	bls.w	8010266 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010150:	e03f      	b.n	80101d2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	695b      	ldr	r3, [r3, #20]
 8010158:	f003 0301 	and.w	r3, r3, #1
 801015c:	2b01      	cmp	r3, #1
 801015e:	d114      	bne.n	801018a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010164:	69ba      	ldr	r2, [r7, #24]
 8010166:	8812      	ldrh	r2, [r2, #0]
 8010168:	b292      	uxth	r2, r2
 801016a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010170:	1c9a      	adds	r2, r3, #2
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801017c:	b29b      	uxth	r3, r3
 801017e:	3b01      	subs	r3, #1
 8010180:	b29a      	uxth	r2, r3
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010188:	e023      	b.n	80101d2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801018a:	f7f5 fba7 	bl	80058dc <HAL_GetTick>
 801018e:	4602      	mov	r2, r0
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	1ad3      	subs	r3, r2, r3
 8010194:	683a      	ldr	r2, [r7, #0]
 8010196:	429a      	cmp	r2, r3
 8010198:	d803      	bhi.n	80101a2 <HAL_SPI_Receive+0x236>
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101a0:	d102      	bne.n	80101a8 <HAL_SPI_Receive+0x23c>
 80101a2:	683b      	ldr	r3, [r7, #0]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d114      	bne.n	80101d2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f000 faa3 	bl	80106f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	2200      	movs	r2, #0
 80101b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	2201      	movs	r2, #1
 80101ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80101ce:	2303      	movs	r3, #3
 80101d0:	e062      	b.n	8010298 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80101d8:	b29b      	uxth	r3, r3
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1b9      	bne.n	8010152 <HAL_SPI_Receive+0x1e6>
 80101de:	e048      	b.n	8010272 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	695b      	ldr	r3, [r3, #20]
 80101e6:	f003 0301 	and.w	r3, r3, #1
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d117      	bne.n	801021e <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101fa:	7812      	ldrb	r2, [r2, #0]
 80101fc:	b2d2      	uxtb	r2, r2
 80101fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010204:	1c5a      	adds	r2, r3, #1
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010210:	b29b      	uxth	r3, r3
 8010212:	3b01      	subs	r3, #1
 8010214:	b29a      	uxth	r2, r3
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801021c:	e023      	b.n	8010266 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801021e:	f7f5 fb5d 	bl	80058dc <HAL_GetTick>
 8010222:	4602      	mov	r2, r0
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	683a      	ldr	r2, [r7, #0]
 801022a:	429a      	cmp	r2, r3
 801022c:	d803      	bhi.n	8010236 <HAL_SPI_Receive+0x2ca>
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010234:	d102      	bne.n	801023c <HAL_SPI_Receive+0x2d0>
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d114      	bne.n	8010266 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 fa59 	bl	80106f4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	2200      	movs	r2, #0
 8010246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010250:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2201      	movs	r2, #1
 801025e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010262:	2303      	movs	r3, #3
 8010264:	e018      	b.n	8010298 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801026c:	b29b      	uxth	r3, r3
 801026e:	2b00      	cmp	r3, #0
 8010270:	d1b6      	bne.n	80101e0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010272:	68f8      	ldr	r0, [r7, #12]
 8010274:	f000 fa3e 	bl	80106f4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	2200      	movs	r2, #0
 801027c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2201      	movs	r2, #1
 8010284:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801028e:	2b00      	cmp	r3, #0
 8010290:	d001      	beq.n	8010296 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8010292:	2301      	movs	r3, #1
 8010294:	e000      	b.n	8010298 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8010296:	7ffb      	ldrb	r3, [r7, #31]
}
 8010298:	4618      	mov	r0, r3
 801029a:	3720      	adds	r7, #32
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}
 80102a0:	ffff0000 	.word	0xffff0000

080102a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b08e      	sub	sp, #56	; 0x38
 80102a8:	af02      	add	r7, sp, #8
 80102aa:	60f8      	str	r0, [r7, #12]
 80102ac:	60b9      	str	r1, [r7, #8]
 80102ae:	607a      	str	r2, [r7, #4]
 80102b0:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80102b2:	2300      	movs	r3, #0
 80102b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	3320      	adds	r3, #32
 80102be:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	3330      	adds	r3, #48	; 0x30
 80102c6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d101      	bne.n	80102d6 <HAL_SPI_TransmitReceive+0x32>
 80102d2:	2302      	movs	r3, #2
 80102d4:	e209      	b.n	80106ea <HAL_SPI_TransmitReceive+0x446>
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	2201      	movs	r2, #1
 80102da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80102de:	f7f5 fafd 	bl	80058dc <HAL_GetTick>
 80102e2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 80102e4:	887b      	ldrh	r3, [r7, #2]
 80102e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 80102e8:	887b      	ldrh	r3, [r7, #2]
 80102ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80102f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80102fa:	7efb      	ldrb	r3, [r7, #27]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d014      	beq.n	801032a <HAL_SPI_TransmitReceive+0x86>
 8010300:	697b      	ldr	r3, [r7, #20]
 8010302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010306:	d106      	bne.n	8010316 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 801030c:	2b00      	cmp	r3, #0
 801030e:	d102      	bne.n	8010316 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8010310:	7efb      	ldrb	r3, [r7, #27]
 8010312:	2b04      	cmp	r3, #4
 8010314:	d009      	beq.n	801032a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8010316:	2302      	movs	r3, #2
 8010318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2200      	movs	r2, #0
 8010320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010324:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010328:	e1df      	b.n	80106ea <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801032a:	68bb      	ldr	r3, [r7, #8]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d005      	beq.n	801033c <HAL_SPI_TransmitReceive+0x98>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d002      	beq.n	801033c <HAL_SPI_TransmitReceive+0x98>
 8010336:	887b      	ldrh	r3, [r7, #2]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d109      	bne.n	8010350 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 801033c:	2301      	movs	r3, #1
 801033e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2200      	movs	r2, #0
 8010346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801034a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801034e:	e1cc      	b.n	80106ea <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010356:	b2db      	uxtb	r3, r3
 8010358:	2b04      	cmp	r3, #4
 801035a:	d003      	beq.n	8010364 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2205      	movs	r2, #5
 8010360:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2200      	movs	r2, #0
 8010368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	887a      	ldrh	r2, [r7, #2]
 8010376:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	887a      	ldrh	r2, [r7, #2]
 801037e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	887a      	ldrh	r2, [r7, #2]
 801038c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8010390:	68fb      	ldr	r3, [r7, #12]
 8010392:	887a      	ldrh	r2, [r7, #2]
 8010394:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	2200      	movs	r2, #0
 80103a2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	685a      	ldr	r2, [r3, #4]
 80103aa:	4b82      	ldr	r3, [pc, #520]	; (80105b4 <HAL_SPI_TransmitReceive+0x310>)
 80103ac:	4013      	ands	r3, r2
 80103ae:	8879      	ldrh	r1, [r7, #2]
 80103b0:	68fa      	ldr	r2, [r7, #12]
 80103b2:	6812      	ldr	r2, [r2, #0]
 80103b4:	430b      	orrs	r3, r1
 80103b6:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	f042 0201 	orr.w	r2, r2, #1
 80103c6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	685b      	ldr	r3, [r3, #4]
 80103cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80103d0:	d107      	bne.n	80103e2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	68db      	ldr	r3, [r3, #12]
 80103e6:	2b0f      	cmp	r3, #15
 80103e8:	d970      	bls.n	80104cc <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80103ea:	e068      	b.n	80104be <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	695b      	ldr	r3, [r3, #20]
 80103f2:	f003 0302 	and.w	r3, r3, #2
 80103f6:	2b02      	cmp	r3, #2
 80103f8:	d11a      	bne.n	8010430 <HAL_SPI_TransmitReceive+0x18c>
 80103fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d017      	beq.n	8010430 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	6812      	ldr	r2, [r2, #0]
 801040a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010410:	1d1a      	adds	r2, r3, #4
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801041c:	b29b      	uxth	r3, r3
 801041e:	3b01      	subs	r3, #1
 8010420:	b29a      	uxth	r2, r3
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801042e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	695a      	ldr	r2, [r3, #20]
 8010436:	f248 0308 	movw	r3, #32776	; 0x8008
 801043a:	4013      	ands	r3, r2
 801043c:	2b00      	cmp	r3, #0
 801043e:	d01a      	beq.n	8010476 <HAL_SPI_TransmitReceive+0x1d2>
 8010440:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010442:	2b00      	cmp	r3, #0
 8010444:	d017      	beq.n	8010476 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801044e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010450:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010456:	1d1a      	adds	r2, r3, #4
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010462:	b29b      	uxth	r3, r3
 8010464:	3b01      	subs	r3, #1
 8010466:	b29a      	uxth	r2, r3
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010474:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010476:	f7f5 fa31 	bl	80058dc <HAL_GetTick>
 801047a:	4602      	mov	r2, r0
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	1ad3      	subs	r3, r2, r3
 8010480:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010482:	429a      	cmp	r2, r3
 8010484:	d803      	bhi.n	801048e <HAL_SPI_TransmitReceive+0x1ea>
 8010486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801048c:	d102      	bne.n	8010494 <HAL_SPI_TransmitReceive+0x1f0>
 801048e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010490:	2b00      	cmp	r3, #0
 8010492:	d114      	bne.n	80104be <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f000 f92d 	bl	80106f4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	2200      	movs	r2, #0
 801049e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	2201      	movs	r2, #1
 80104b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80104ba:	2303      	movs	r3, #3
 80104bc:	e115      	b.n	80106ea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80104be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d193      	bne.n	80103ec <HAL_SPI_TransmitReceive+0x148>
 80104c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d190      	bne.n	80103ec <HAL_SPI_TransmitReceive+0x148>
 80104ca:	e0e7      	b.n	801069c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	2b07      	cmp	r3, #7
 80104d2:	f240 80dd 	bls.w	8010690 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80104d6:	e066      	b.n	80105a6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	695b      	ldr	r3, [r3, #20]
 80104de:	f003 0302 	and.w	r3, r3, #2
 80104e2:	2b02      	cmp	r3, #2
 80104e4:	d119      	bne.n	801051a <HAL_SPI_TransmitReceive+0x276>
 80104e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d016      	beq.n	801051a <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104f0:	881a      	ldrh	r2, [r3, #0]
 80104f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104fa:	1c9a      	adds	r2, r3, #2
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010506:	b29b      	uxth	r3, r3
 8010508:	3b01      	subs	r3, #1
 801050a:	b29a      	uxth	r2, r3
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010518:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	695b      	ldr	r3, [r3, #20]
 8010520:	f003 0301 	and.w	r3, r3, #1
 8010524:	2b01      	cmp	r3, #1
 8010526:	d11a      	bne.n	801055e <HAL_SPI_TransmitReceive+0x2ba>
 8010528:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801052a:	2b00      	cmp	r3, #0
 801052c:	d017      	beq.n	801055e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010532:	6a3a      	ldr	r2, [r7, #32]
 8010534:	8812      	ldrh	r2, [r2, #0]
 8010536:	b292      	uxth	r2, r2
 8010538:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801053e:	1c9a      	adds	r2, r3, #2
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801054a:	b29b      	uxth	r3, r3
 801054c:	3b01      	subs	r3, #1
 801054e:	b29a      	uxth	r2, r3
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801055c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801055e:	f7f5 f9bd 	bl	80058dc <HAL_GetTick>
 8010562:	4602      	mov	r2, r0
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	1ad3      	subs	r3, r2, r3
 8010568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801056a:	429a      	cmp	r2, r3
 801056c:	d803      	bhi.n	8010576 <HAL_SPI_TransmitReceive+0x2d2>
 801056e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010574:	d102      	bne.n	801057c <HAL_SPI_TransmitReceive+0x2d8>
 8010576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010578:	2b00      	cmp	r3, #0
 801057a:	d114      	bne.n	80105a6 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f000 f8b9 	bl	80106f4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	2200      	movs	r2, #0
 8010586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010590:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2201      	movs	r2, #1
 801059e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80105a2:	2303      	movs	r3, #3
 80105a4:	e0a1      	b.n	80106ea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80105a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d195      	bne.n	80104d8 <HAL_SPI_TransmitReceive+0x234>
 80105ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d192      	bne.n	80104d8 <HAL_SPI_TransmitReceive+0x234>
 80105b2:	e073      	b.n	801069c <HAL_SPI_TransmitReceive+0x3f8>
 80105b4:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	695b      	ldr	r3, [r3, #20]
 80105be:	f003 0302 	and.w	r3, r3, #2
 80105c2:	2b02      	cmp	r3, #2
 80105c4:	d11b      	bne.n	80105fe <HAL_SPI_TransmitReceive+0x35a>
 80105c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d018      	beq.n	80105fe <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	3320      	adds	r3, #32
 80105d6:	7812      	ldrb	r2, [r2, #0]
 80105d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105de:	1c5a      	adds	r2, r3, #1
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	3b01      	subs	r3, #1
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80105fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	695b      	ldr	r3, [r3, #20]
 8010604:	f003 0301 	and.w	r3, r3, #1
 8010608:	2b01      	cmp	r3, #1
 801060a:	d11d      	bne.n	8010648 <HAL_SPI_TransmitReceive+0x3a4>
 801060c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801060e:	2b00      	cmp	r3, #0
 8010610:	d01a      	beq.n	8010648 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801061e:	7812      	ldrb	r2, [r2, #0]
 8010620:	b2d2      	uxtb	r2, r2
 8010622:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010628:	1c5a      	adds	r2, r3, #1
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010634:	b29b      	uxth	r3, r3
 8010636:	3b01      	subs	r3, #1
 8010638:	b29a      	uxth	r2, r3
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010646:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010648:	f7f5 f948 	bl	80058dc <HAL_GetTick>
 801064c:	4602      	mov	r2, r0
 801064e:	69fb      	ldr	r3, [r7, #28]
 8010650:	1ad3      	subs	r3, r2, r3
 8010652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010654:	429a      	cmp	r2, r3
 8010656:	d803      	bhi.n	8010660 <HAL_SPI_TransmitReceive+0x3bc>
 8010658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801065a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801065e:	d102      	bne.n	8010666 <HAL_SPI_TransmitReceive+0x3c2>
 8010660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010662:	2b00      	cmp	r3, #0
 8010664:	d114      	bne.n	8010690 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8010666:	68f8      	ldr	r0, [r7, #12]
 8010668:	f000 f844 	bl	80106f4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2200      	movs	r2, #0
 8010670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801067a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2201      	movs	r2, #1
 8010688:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 801068c:	2303      	movs	r3, #3
 801068e:	e02c      	b.n	80106ea <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010690:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010692:	2b00      	cmp	r3, #0
 8010694:	d190      	bne.n	80105b8 <HAL_SPI_TransmitReceive+0x314>
 8010696:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010698:	2b00      	cmp	r3, #0
 801069a:	d18d      	bne.n	80105b8 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 801069c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069e:	9300      	str	r3, [sp, #0]
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	2200      	movs	r2, #0
 80106a4:	2108      	movs	r1, #8
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f000 f8c4 	bl	8010834 <SPI_WaitOnFlagUntilTimeout>
 80106ac:	4603      	mov	r3, r0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d007      	beq.n	80106c2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106b8:	f043 0220 	orr.w	r2, r3, #32
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80106c2:	68f8      	ldr	r0, [r7, #12]
 80106c4:	f000 f816 	bl	80106f4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	2200      	movs	r2, #0
 80106cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2201      	movs	r2, #1
 80106d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80106e2:	2301      	movs	r3, #1
 80106e4:	e001      	b.n	80106ea <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80106e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80106ea:	4618      	mov	r0, r3
 80106ec:	3730      	adds	r7, #48	; 0x30
 80106ee:	46bd      	mov	sp, r7
 80106f0:	bd80      	pop	{r7, pc}
 80106f2:	bf00      	nop

080106f4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b085      	sub	sp, #20
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	695b      	ldr	r3, [r3, #20]
 8010702:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	699a      	ldr	r2, [r3, #24]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f042 0208 	orr.w	r2, r2, #8
 8010712:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	699a      	ldr	r2, [r3, #24]
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f042 0210 	orr.w	r2, r2, #16
 8010722:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	681a      	ldr	r2, [r3, #0]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f022 0201 	bic.w	r2, r2, #1
 8010732:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	6919      	ldr	r1, [r3, #16]
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681a      	ldr	r2, [r3, #0]
 801073e:	4b3c      	ldr	r3, [pc, #240]	; (8010830 <SPI_CloseTransfer+0x13c>)
 8010740:	400b      	ands	r3, r1
 8010742:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	689a      	ldr	r2, [r3, #8]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8010752:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801075a:	b2db      	uxtb	r3, r3
 801075c:	2b04      	cmp	r3, #4
 801075e:	d014      	beq.n	801078a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	f003 0320 	and.w	r3, r3, #32
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00f      	beq.n	801078a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010770:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	699a      	ldr	r2, [r3, #24]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f042 0220 	orr.w	r2, r2, #32
 8010788:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010790:	b2db      	uxtb	r3, r3
 8010792:	2b03      	cmp	r3, #3
 8010794:	d014      	beq.n	80107c0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00f      	beq.n	80107c0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107a6:	f043 0204 	orr.w	r2, r3, #4
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	699a      	ldr	r2, [r3, #24]
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107be:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d00f      	beq.n	80107ea <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107d0:	f043 0201 	orr.w	r2, r3, #1
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	699a      	ldr	r2, [r3, #24]
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107e8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00f      	beq.n	8010814 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80107fa:	f043 0208 	orr.w	r2, r3, #8
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	699a      	ldr	r2, [r3, #24]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010812:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2200      	movs	r2, #0
 8010818:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	2200      	movs	r2, #0
 8010820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010824:	bf00      	nop
 8010826:	3714      	adds	r7, #20
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr
 8010830:	fffffc90 	.word	0xfffffc90

08010834 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b084      	sub	sp, #16
 8010838:	af00      	add	r7, sp, #0
 801083a:	60f8      	str	r0, [r7, #12]
 801083c:	60b9      	str	r1, [r7, #8]
 801083e:	603b      	str	r3, [r7, #0]
 8010840:	4613      	mov	r3, r2
 8010842:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010844:	e010      	b.n	8010868 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010846:	f7f5 f849 	bl	80058dc <HAL_GetTick>
 801084a:	4602      	mov	r2, r0
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	1ad3      	subs	r3, r2, r3
 8010850:	69ba      	ldr	r2, [r7, #24]
 8010852:	429a      	cmp	r2, r3
 8010854:	d803      	bhi.n	801085e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8010856:	69bb      	ldr	r3, [r7, #24]
 8010858:	f1b3 3fff 	cmp.w	r3, #4294967295
 801085c:	d102      	bne.n	8010864 <SPI_WaitOnFlagUntilTimeout+0x30>
 801085e:	69bb      	ldr	r3, [r7, #24]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d101      	bne.n	8010868 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8010864:	2303      	movs	r3, #3
 8010866:	e00f      	b.n	8010888 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	695a      	ldr	r2, [r3, #20]
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	4013      	ands	r3, r2
 8010872:	68ba      	ldr	r2, [r7, #8]
 8010874:	429a      	cmp	r2, r3
 8010876:	bf0c      	ite	eq
 8010878:	2301      	moveq	r3, #1
 801087a:	2300      	movne	r3, #0
 801087c:	b2db      	uxtb	r3, r3
 801087e:	461a      	mov	r2, r3
 8010880:	79fb      	ldrb	r3, [r7, #7]
 8010882:	429a      	cmp	r2, r3
 8010884:	d0df      	beq.n	8010846 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8010886:	2300      	movs	r3, #0
}
 8010888:	4618      	mov	r0, r3
 801088a:	3710      	adds	r7, #16
 801088c:	46bd      	mov	sp, r7
 801088e:	bd80      	pop	{r7, pc}

08010890 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010890:	b480      	push	{r7}
 8010892:	b085      	sub	sp, #20
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801089c:	095b      	lsrs	r3, r3, #5
 801089e:	3301      	adds	r3, #1
 80108a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	68db      	ldr	r3, [r3, #12]
 80108a6:	3301      	adds	r3, #1
 80108a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	3307      	adds	r3, #7
 80108ae:	08db      	lsrs	r3, r3, #3
 80108b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	68fa      	ldr	r2, [r7, #12]
 80108b6:	fb02 f303 	mul.w	r3, r2, r3
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	3714      	adds	r7, #20
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b082      	sub	sp, #8
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d101      	bne.n	80108d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80108d4:	2301      	movs	r3, #1
 80108d6:	e049      	b.n	801096c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d106      	bne.n	80108f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2200      	movs	r2, #0
 80108e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7f4 fa4b 	bl	8004d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2202      	movs	r2, #2
 80108f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	681a      	ldr	r2, [r3, #0]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	3304      	adds	r3, #4
 8010902:	4619      	mov	r1, r3
 8010904:	4610      	mov	r0, r2
 8010906:	f000 ff17 	bl	8011738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2201      	movs	r2, #1
 801090e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2201      	movs	r2, #1
 8010916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2201      	movs	r2, #1
 801091e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2201      	movs	r2, #1
 8010926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2201      	movs	r2, #1
 801092e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2201      	movs	r2, #1
 8010936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2201      	movs	r2, #1
 801093e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2201      	movs	r2, #1
 8010946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2201      	movs	r2, #1
 801094e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2201      	movs	r2, #1
 8010956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2201      	movs	r2, #1
 801095e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2201      	movs	r2, #1
 8010966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801096a:	2300      	movs	r3, #0
}
 801096c:	4618      	mov	r0, r3
 801096e:	3708      	adds	r7, #8
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010982:	b2db      	uxtb	r3, r3
 8010984:	2b01      	cmp	r3, #1
 8010986:	d001      	beq.n	801098c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010988:	2301      	movs	r3, #1
 801098a:	e05e      	b.n	8010a4a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	2202      	movs	r2, #2
 8010990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	68da      	ldr	r2, [r3, #12]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f042 0201 	orr.w	r2, r2, #1
 80109a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	4a2b      	ldr	r2, [pc, #172]	; (8010a58 <HAL_TIM_Base_Start_IT+0xe4>)
 80109aa:	4293      	cmp	r3, r2
 80109ac:	d02c      	beq.n	8010a08 <HAL_TIM_Base_Start_IT+0x94>
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109b6:	d027      	beq.n	8010a08 <HAL_TIM_Base_Start_IT+0x94>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	4a27      	ldr	r2, [pc, #156]	; (8010a5c <HAL_TIM_Base_Start_IT+0xe8>)
 80109be:	4293      	cmp	r3, r2
 80109c0:	d022      	beq.n	8010a08 <HAL_TIM_Base_Start_IT+0x94>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a26      	ldr	r2, [pc, #152]	; (8010a60 <HAL_TIM_Base_Start_IT+0xec>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d01d      	beq.n	8010a08 <HAL_TIM_Base_Start_IT+0x94>
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a24      	ldr	r2, [pc, #144]	; (8010a64 <HAL_TIM_Base_Start_IT+0xf0>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d018      	beq.n	8010a08 <HAL_TIM_Base_Start_IT+0x94>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	4a23      	ldr	r2, [pc, #140]	; (8010a68 <HAL_TIM_Base_Start_IT+0xf4>)
 80109dc:	4293      	cmp	r3, r2
 80109de:	d013      	beq.n	8010a08 <HAL_TIM_Base_Start_IT+0x94>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4a21      	ldr	r2, [pc, #132]	; (8010a6c <HAL_TIM_Base_Start_IT+0xf8>)
 80109e6:	4293      	cmp	r3, r2
 80109e8:	d00e      	beq.n	8010a08 <HAL_TIM_Base_Start_IT+0x94>
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	4a20      	ldr	r2, [pc, #128]	; (8010a70 <HAL_TIM_Base_Start_IT+0xfc>)
 80109f0:	4293      	cmp	r3, r2
 80109f2:	d009      	beq.n	8010a08 <HAL_TIM_Base_Start_IT+0x94>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4a1e      	ldr	r2, [pc, #120]	; (8010a74 <HAL_TIM_Base_Start_IT+0x100>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d004      	beq.n	8010a08 <HAL_TIM_Base_Start_IT+0x94>
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	4a1d      	ldr	r2, [pc, #116]	; (8010a78 <HAL_TIM_Base_Start_IT+0x104>)
 8010a04:	4293      	cmp	r3, r2
 8010a06:	d115      	bne.n	8010a34 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	689a      	ldr	r2, [r3, #8]
 8010a0e:	4b1b      	ldr	r3, [pc, #108]	; (8010a7c <HAL_TIM_Base_Start_IT+0x108>)
 8010a10:	4013      	ands	r3, r2
 8010a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	2b06      	cmp	r3, #6
 8010a18:	d015      	beq.n	8010a46 <HAL_TIM_Base_Start_IT+0xd2>
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a20:	d011      	beq.n	8010a46 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f042 0201 	orr.w	r2, r2, #1
 8010a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a32:	e008      	b.n	8010a46 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	681a      	ldr	r2, [r3, #0]
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f042 0201 	orr.w	r2, r2, #1
 8010a42:	601a      	str	r2, [r3, #0]
 8010a44:	e000      	b.n	8010a48 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010a48:	2300      	movs	r3, #0
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3714      	adds	r7, #20
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop
 8010a58:	40010000 	.word	0x40010000
 8010a5c:	40000400 	.word	0x40000400
 8010a60:	40000800 	.word	0x40000800
 8010a64:	40000c00 	.word	0x40000c00
 8010a68:	40010400 	.word	0x40010400
 8010a6c:	40001800 	.word	0x40001800
 8010a70:	40014000 	.word	0x40014000
 8010a74:	4000e000 	.word	0x4000e000
 8010a78:	4000e400 	.word	0x4000e400
 8010a7c:	00010007 	.word	0x00010007

08010a80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d101      	bne.n	8010a92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010a8e:	2301      	movs	r3, #1
 8010a90:	e049      	b.n	8010b26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d106      	bne.n	8010aac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010aa6:	6878      	ldr	r0, [r7, #4]
 8010aa8:	f7f4 f8da 	bl	8004c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2202      	movs	r2, #2
 8010ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	3304      	adds	r3, #4
 8010abc:	4619      	mov	r1, r3
 8010abe:	4610      	mov	r0, r2
 8010ac0:	f000 fe3a 	bl	8011738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2201      	movs	r2, #1
 8010ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2201      	movs	r2, #1
 8010ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2201      	movs	r2, #1
 8010ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2201      	movs	r2, #1
 8010af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2201      	movs	r2, #1
 8010af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2201      	movs	r2, #1
 8010b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2201      	movs	r2, #1
 8010b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	2201      	movs	r2, #1
 8010b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2201      	movs	r2, #1
 8010b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2201      	movs	r2, #1
 8010b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010b24:	2300      	movs	r3, #0
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3708      	adds	r7, #8
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
	...

08010b30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b084      	sub	sp, #16
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d109      	bne.n	8010b54 <HAL_TIM_PWM_Start+0x24>
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b46:	b2db      	uxtb	r3, r3
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	bf14      	ite	ne
 8010b4c:	2301      	movne	r3, #1
 8010b4e:	2300      	moveq	r3, #0
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	e03c      	b.n	8010bce <HAL_TIM_PWM_Start+0x9e>
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	2b04      	cmp	r3, #4
 8010b58:	d109      	bne.n	8010b6e <HAL_TIM_PWM_Start+0x3e>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	2b01      	cmp	r3, #1
 8010b64:	bf14      	ite	ne
 8010b66:	2301      	movne	r3, #1
 8010b68:	2300      	moveq	r3, #0
 8010b6a:	b2db      	uxtb	r3, r3
 8010b6c:	e02f      	b.n	8010bce <HAL_TIM_PWM_Start+0x9e>
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	2b08      	cmp	r3, #8
 8010b72:	d109      	bne.n	8010b88 <HAL_TIM_PWM_Start+0x58>
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010b7a:	b2db      	uxtb	r3, r3
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	bf14      	ite	ne
 8010b80:	2301      	movne	r3, #1
 8010b82:	2300      	moveq	r3, #0
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	e022      	b.n	8010bce <HAL_TIM_PWM_Start+0x9e>
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	2b0c      	cmp	r3, #12
 8010b8c:	d109      	bne.n	8010ba2 <HAL_TIM_PWM_Start+0x72>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	bf14      	ite	ne
 8010b9a:	2301      	movne	r3, #1
 8010b9c:	2300      	moveq	r3, #0
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	e015      	b.n	8010bce <HAL_TIM_PWM_Start+0x9e>
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	2b10      	cmp	r3, #16
 8010ba6:	d109      	bne.n	8010bbc <HAL_TIM_PWM_Start+0x8c>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010bae:	b2db      	uxtb	r3, r3
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	bf14      	ite	ne
 8010bb4:	2301      	movne	r3, #1
 8010bb6:	2300      	moveq	r3, #0
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	e008      	b.n	8010bce <HAL_TIM_PWM_Start+0x9e>
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bc2:	b2db      	uxtb	r3, r3
 8010bc4:	2b01      	cmp	r3, #1
 8010bc6:	bf14      	ite	ne
 8010bc8:	2301      	movne	r3, #1
 8010bca:	2300      	moveq	r3, #0
 8010bcc:	b2db      	uxtb	r3, r3
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d001      	beq.n	8010bd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010bd2:	2301      	movs	r3, #1
 8010bd4:	e0ab      	b.n	8010d2e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bd6:	683b      	ldr	r3, [r7, #0]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d104      	bne.n	8010be6 <HAL_TIM_PWM_Start+0xb6>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2202      	movs	r2, #2
 8010be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010be4:	e023      	b.n	8010c2e <HAL_TIM_PWM_Start+0xfe>
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	2b04      	cmp	r3, #4
 8010bea:	d104      	bne.n	8010bf6 <HAL_TIM_PWM_Start+0xc6>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	2202      	movs	r2, #2
 8010bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010bf4:	e01b      	b.n	8010c2e <HAL_TIM_PWM_Start+0xfe>
 8010bf6:	683b      	ldr	r3, [r7, #0]
 8010bf8:	2b08      	cmp	r3, #8
 8010bfa:	d104      	bne.n	8010c06 <HAL_TIM_PWM_Start+0xd6>
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2202      	movs	r2, #2
 8010c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c04:	e013      	b.n	8010c2e <HAL_TIM_PWM_Start+0xfe>
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	2b0c      	cmp	r3, #12
 8010c0a:	d104      	bne.n	8010c16 <HAL_TIM_PWM_Start+0xe6>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2202      	movs	r2, #2
 8010c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010c14:	e00b      	b.n	8010c2e <HAL_TIM_PWM_Start+0xfe>
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	2b10      	cmp	r3, #16
 8010c1a:	d104      	bne.n	8010c26 <HAL_TIM_PWM_Start+0xf6>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2202      	movs	r2, #2
 8010c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010c24:	e003      	b.n	8010c2e <HAL_TIM_PWM_Start+0xfe>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2202      	movs	r2, #2
 8010c2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	2201      	movs	r2, #1
 8010c34:	6839      	ldr	r1, [r7, #0]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f001 f998 	bl	8011f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	4a3d      	ldr	r2, [pc, #244]	; (8010d38 <HAL_TIM_PWM_Start+0x208>)
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d013      	beq.n	8010c6e <HAL_TIM_PWM_Start+0x13e>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4a3c      	ldr	r2, [pc, #240]	; (8010d3c <HAL_TIM_PWM_Start+0x20c>)
 8010c4c:	4293      	cmp	r3, r2
 8010c4e:	d00e      	beq.n	8010c6e <HAL_TIM_PWM_Start+0x13e>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a3a      	ldr	r2, [pc, #232]	; (8010d40 <HAL_TIM_PWM_Start+0x210>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	d009      	beq.n	8010c6e <HAL_TIM_PWM_Start+0x13e>
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	4a39      	ldr	r2, [pc, #228]	; (8010d44 <HAL_TIM_PWM_Start+0x214>)
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d004      	beq.n	8010c6e <HAL_TIM_PWM_Start+0x13e>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4a37      	ldr	r2, [pc, #220]	; (8010d48 <HAL_TIM_PWM_Start+0x218>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d101      	bne.n	8010c72 <HAL_TIM_PWM_Start+0x142>
 8010c6e:	2301      	movs	r3, #1
 8010c70:	e000      	b.n	8010c74 <HAL_TIM_PWM_Start+0x144>
 8010c72:	2300      	movs	r3, #0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d007      	beq.n	8010c88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010c86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a2a      	ldr	r2, [pc, #168]	; (8010d38 <HAL_TIM_PWM_Start+0x208>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d02c      	beq.n	8010cec <HAL_TIM_PWM_Start+0x1bc>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c9a:	d027      	beq.n	8010cec <HAL_TIM_PWM_Start+0x1bc>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4a2a      	ldr	r2, [pc, #168]	; (8010d4c <HAL_TIM_PWM_Start+0x21c>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d022      	beq.n	8010cec <HAL_TIM_PWM_Start+0x1bc>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	4a29      	ldr	r2, [pc, #164]	; (8010d50 <HAL_TIM_PWM_Start+0x220>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d01d      	beq.n	8010cec <HAL_TIM_PWM_Start+0x1bc>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	4a27      	ldr	r2, [pc, #156]	; (8010d54 <HAL_TIM_PWM_Start+0x224>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d018      	beq.n	8010cec <HAL_TIM_PWM_Start+0x1bc>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	4a1f      	ldr	r2, [pc, #124]	; (8010d3c <HAL_TIM_PWM_Start+0x20c>)
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d013      	beq.n	8010cec <HAL_TIM_PWM_Start+0x1bc>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	4a23      	ldr	r2, [pc, #140]	; (8010d58 <HAL_TIM_PWM_Start+0x228>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d00e      	beq.n	8010cec <HAL_TIM_PWM_Start+0x1bc>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	4a1b      	ldr	r2, [pc, #108]	; (8010d40 <HAL_TIM_PWM_Start+0x210>)
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	d009      	beq.n	8010cec <HAL_TIM_PWM_Start+0x1bc>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	4a1f      	ldr	r2, [pc, #124]	; (8010d5c <HAL_TIM_PWM_Start+0x22c>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d004      	beq.n	8010cec <HAL_TIM_PWM_Start+0x1bc>
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	4a1e      	ldr	r2, [pc, #120]	; (8010d60 <HAL_TIM_PWM_Start+0x230>)
 8010ce8:	4293      	cmp	r3, r2
 8010cea:	d115      	bne.n	8010d18 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	689a      	ldr	r2, [r3, #8]
 8010cf2:	4b1c      	ldr	r3, [pc, #112]	; (8010d64 <HAL_TIM_PWM_Start+0x234>)
 8010cf4:	4013      	ands	r3, r2
 8010cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2b06      	cmp	r3, #6
 8010cfc:	d015      	beq.n	8010d2a <HAL_TIM_PWM_Start+0x1fa>
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010d04:	d011      	beq.n	8010d2a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f042 0201 	orr.w	r2, r2, #1
 8010d14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d16:	e008      	b.n	8010d2a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	f042 0201 	orr.w	r2, r2, #1
 8010d26:	601a      	str	r2, [r3, #0]
 8010d28:	e000      	b.n	8010d2c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010d2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	40010000 	.word	0x40010000
 8010d3c:	40010400 	.word	0x40010400
 8010d40:	40014000 	.word	0x40014000
 8010d44:	40014400 	.word	0x40014400
 8010d48:	40014800 	.word	0x40014800
 8010d4c:	40000400 	.word	0x40000400
 8010d50:	40000800 	.word	0x40000800
 8010d54:	40000c00 	.word	0x40000c00
 8010d58:	40001800 	.word	0x40001800
 8010d5c:	4000e000 	.word	0x4000e000
 8010d60:	4000e400 	.word	0x4000e400
 8010d64:	00010007 	.word	0x00010007

08010d68 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b084      	sub	sp, #16
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010d72:	2300      	movs	r3, #0
 8010d74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	2b0c      	cmp	r3, #12
 8010d7a:	d855      	bhi.n	8010e28 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8010d7c:	a201      	add	r2, pc, #4	; (adr r2, 8010d84 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8010d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d82:	bf00      	nop
 8010d84:	08010db9 	.word	0x08010db9
 8010d88:	08010e29 	.word	0x08010e29
 8010d8c:	08010e29 	.word	0x08010e29
 8010d90:	08010e29 	.word	0x08010e29
 8010d94:	08010dd5 	.word	0x08010dd5
 8010d98:	08010e29 	.word	0x08010e29
 8010d9c:	08010e29 	.word	0x08010e29
 8010da0:	08010e29 	.word	0x08010e29
 8010da4:	08010df1 	.word	0x08010df1
 8010da8:	08010e29 	.word	0x08010e29
 8010dac:	08010e29 	.word	0x08010e29
 8010db0:	08010e29 	.word	0x08010e29
 8010db4:	08010e0d 	.word	0x08010e0d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	68da      	ldr	r2, [r3, #12]
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010dc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f7f8 f889 	bl	8008ee4 <HAL_DMA_Abort_IT>
      break;
 8010dd2:	e02c      	b.n	8010e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	68da      	ldr	r2, [r3, #12]
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010de2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010de8:	4618      	mov	r0, r3
 8010dea:	f7f8 f87b 	bl	8008ee4 <HAL_DMA_Abort_IT>
      break;
 8010dee:	e01e      	b.n	8010e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	68da      	ldr	r2, [r3, #12]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010dfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7f8 f86d 	bl	8008ee4 <HAL_DMA_Abort_IT>
      break;
 8010e0a:	e010      	b.n	8010e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	68da      	ldr	r2, [r3, #12]
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010e1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7f8 f85f 	bl	8008ee4 <HAL_DMA_Abort_IT>
      break;
 8010e26:	e002      	b.n	8010e2e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8010e28:	2301      	movs	r3, #1
 8010e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8010e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e2e:	7bfb      	ldrb	r3, [r7, #15]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	f040 8081 	bne.w	8010f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	6839      	ldr	r1, [r7, #0]
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f001 f894 	bl	8011f6c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	4a3e      	ldr	r2, [pc, #248]	; (8010f44 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d013      	beq.n	8010e76 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	4a3d      	ldr	r2, [pc, #244]	; (8010f48 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d00e      	beq.n	8010e76 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4a3b      	ldr	r2, [pc, #236]	; (8010f4c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d009      	beq.n	8010e76 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	4a3a      	ldr	r2, [pc, #232]	; (8010f50 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8010e68:	4293      	cmp	r3, r2
 8010e6a:	d004      	beq.n	8010e76 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4a38      	ldr	r2, [pc, #224]	; (8010f54 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8010e72:	4293      	cmp	r3, r2
 8010e74:	d101      	bne.n	8010e7a <HAL_TIM_PWM_Stop_DMA+0x112>
 8010e76:	2301      	movs	r3, #1
 8010e78:	e000      	b.n	8010e7c <HAL_TIM_PWM_Stop_DMA+0x114>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d017      	beq.n	8010eb0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	6a1a      	ldr	r2, [r3, #32]
 8010e86:	f241 1311 	movw	r3, #4369	; 0x1111
 8010e8a:	4013      	ands	r3, r2
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d10f      	bne.n	8010eb0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	6a1a      	ldr	r2, [r3, #32]
 8010e96:	f240 4344 	movw	r3, #1092	; 0x444
 8010e9a:	4013      	ands	r3, r2
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d107      	bne.n	8010eb0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010eae:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	6a1a      	ldr	r2, [r3, #32]
 8010eb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8010eba:	4013      	ands	r3, r2
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d10f      	bne.n	8010ee0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	6a1a      	ldr	r2, [r3, #32]
 8010ec6:	f240 4344 	movw	r3, #1092	; 0x444
 8010eca:	4013      	ands	r3, r2
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d107      	bne.n	8010ee0 <HAL_TIM_PWM_Stop_DMA+0x178>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	681a      	ldr	r2, [r3, #0]
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f022 0201 	bic.w	r2, r2, #1
 8010ede:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d104      	bne.n	8010ef0 <HAL_TIM_PWM_Stop_DMA+0x188>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2201      	movs	r2, #1
 8010eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010eee:	e023      	b.n	8010f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	2b04      	cmp	r3, #4
 8010ef4:	d104      	bne.n	8010f00 <HAL_TIM_PWM_Stop_DMA+0x198>
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010efe:	e01b      	b.n	8010f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	2b08      	cmp	r3, #8
 8010f04:	d104      	bne.n	8010f10 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	2201      	movs	r2, #1
 8010f0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f0e:	e013      	b.n	8010f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	2b0c      	cmp	r3, #12
 8010f14:	d104      	bne.n	8010f20 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2201      	movs	r2, #1
 8010f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010f1e:	e00b      	b.n	8010f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010f20:	683b      	ldr	r3, [r7, #0]
 8010f22:	2b10      	cmp	r3, #16
 8010f24:	d104      	bne.n	8010f30 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2201      	movs	r2, #1
 8010f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010f2e:	e003      	b.n	8010f38 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	2201      	movs	r2, #1
 8010f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8010f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	3710      	adds	r7, #16
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	40010000 	.word	0x40010000
 8010f48:	40010400 	.word	0x40010400
 8010f4c:	40014000 	.word	0x40014000
 8010f50:	40014400 	.word	0x40014400
 8010f54:	40014800 	.word	0x40014800

08010f58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b086      	sub	sp, #24
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	6078      	str	r0, [r7, #4]
 8010f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d101      	bne.n	8010f6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	e08f      	b.n	801108c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d106      	bne.n	8010f86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010f80:	6878      	ldr	r0, [r7, #4]
 8010f82:	f7f4 f80b 	bl	8004f9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2202      	movs	r2, #2
 8010f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6899      	ldr	r1, [r3, #8]
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681a      	ldr	r2, [r3, #0]
 8010f98:	4b3e      	ldr	r3, [pc, #248]	; (8011094 <HAL_TIM_Encoder_Init+0x13c>)
 8010f9a:	400b      	ands	r3, r1
 8010f9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681a      	ldr	r2, [r3, #0]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	3304      	adds	r3, #4
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	4610      	mov	r0, r2
 8010faa:	f000 fbc5 	bl	8011738 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	689b      	ldr	r3, [r3, #8]
 8010fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	699b      	ldr	r3, [r3, #24]
 8010fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	6a1b      	ldr	r3, [r3, #32]
 8010fc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8010fd0:	693a      	ldr	r2, [r7, #16]
 8010fd2:	4b31      	ldr	r3, [pc, #196]	; (8011098 <HAL_TIM_Encoder_Init+0x140>)
 8010fd4:	4013      	ands	r3, r2
 8010fd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	689a      	ldr	r2, [r3, #8]
 8010fdc:	683b      	ldr	r3, [r7, #0]
 8010fde:	699b      	ldr	r3, [r3, #24]
 8010fe0:	021b      	lsls	r3, r3, #8
 8010fe2:	4313      	orrs	r3, r2
 8010fe4:	693a      	ldr	r2, [r7, #16]
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8010fea:	693a      	ldr	r2, [r7, #16]
 8010fec:	4b2b      	ldr	r3, [pc, #172]	; (801109c <HAL_TIM_Encoder_Init+0x144>)
 8010fee:	4013      	ands	r3, r2
 8010ff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8010ff2:	693a      	ldr	r2, [r7, #16]
 8010ff4:	4b2a      	ldr	r3, [pc, #168]	; (80110a0 <HAL_TIM_Encoder_Init+0x148>)
 8010ff6:	4013      	ands	r3, r2
 8010ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	68da      	ldr	r2, [r3, #12]
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	69db      	ldr	r3, [r3, #28]
 8011002:	021b      	lsls	r3, r3, #8
 8011004:	4313      	orrs	r3, r2
 8011006:	693a      	ldr	r2, [r7, #16]
 8011008:	4313      	orrs	r3, r2
 801100a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	691b      	ldr	r3, [r3, #16]
 8011010:	011a      	lsls	r2, r3, #4
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	6a1b      	ldr	r3, [r3, #32]
 8011016:	031b      	lsls	r3, r3, #12
 8011018:	4313      	orrs	r3, r2
 801101a:	693a      	ldr	r2, [r7, #16]
 801101c:	4313      	orrs	r3, r2
 801101e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011026:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801102e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	685a      	ldr	r2, [r3, #4]
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	695b      	ldr	r3, [r3, #20]
 8011038:	011b      	lsls	r3, r3, #4
 801103a:	4313      	orrs	r3, r2
 801103c:	68fa      	ldr	r2, [r7, #12]
 801103e:	4313      	orrs	r3, r2
 8011040:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	697a      	ldr	r2, [r7, #20]
 8011048:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	693a      	ldr	r2, [r7, #16]
 8011050:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	68fa      	ldr	r2, [r7, #12]
 8011058:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	2201      	movs	r2, #1
 801105e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2201      	movs	r2, #1
 8011066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2201      	movs	r2, #1
 801106e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2201      	movs	r2, #1
 8011076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2201      	movs	r2, #1
 801107e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2201      	movs	r2, #1
 8011086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801108a:	2300      	movs	r3, #0
}
 801108c:	4618      	mov	r0, r3
 801108e:	3718      	adds	r7, #24
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	fffebff8 	.word	0xfffebff8
 8011098:	fffffcfc 	.word	0xfffffcfc
 801109c:	fffff3f3 	.word	0xfffff3f3
 80110a0:	ffff0f0f 	.word	0xffff0f0f

080110a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b082      	sub	sp, #8
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	691b      	ldr	r3, [r3, #16]
 80110b2:	f003 0302 	and.w	r3, r3, #2
 80110b6:	2b02      	cmp	r3, #2
 80110b8:	d122      	bne.n	8011100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	68db      	ldr	r3, [r3, #12]
 80110c0:	f003 0302 	and.w	r3, r3, #2
 80110c4:	2b02      	cmp	r3, #2
 80110c6:	d11b      	bne.n	8011100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f06f 0202 	mvn.w	r2, #2
 80110d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2201      	movs	r2, #1
 80110d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	681b      	ldr	r3, [r3, #0]
 80110dc:	699b      	ldr	r3, [r3, #24]
 80110de:	f003 0303 	and.w	r3, r3, #3
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d003      	beq.n	80110ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f000 fb12 	bl	8011710 <HAL_TIM_IC_CaptureCallback>
 80110ec:	e005      	b.n	80110fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 fb04 	bl	80116fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7f1 fe59 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2200      	movs	r2, #0
 80110fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	691b      	ldr	r3, [r3, #16]
 8011106:	f003 0304 	and.w	r3, r3, #4
 801110a:	2b04      	cmp	r3, #4
 801110c:	d122      	bne.n	8011154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	f003 0304 	and.w	r3, r3, #4
 8011118:	2b04      	cmp	r3, #4
 801111a:	d11b      	bne.n	8011154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	f06f 0204 	mvn.w	r2, #4
 8011124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2202      	movs	r2, #2
 801112a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	699b      	ldr	r3, [r3, #24]
 8011132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011136:	2b00      	cmp	r3, #0
 8011138:	d003      	beq.n	8011142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f000 fae8 	bl	8011710 <HAL_TIM_IC_CaptureCallback>
 8011140:	e005      	b.n	801114e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f000 fada 	bl	80116fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f7f1 fe2f 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2200      	movs	r2, #0
 8011152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	691b      	ldr	r3, [r3, #16]
 801115a:	f003 0308 	and.w	r3, r3, #8
 801115e:	2b08      	cmp	r3, #8
 8011160:	d122      	bne.n	80111a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	68db      	ldr	r3, [r3, #12]
 8011168:	f003 0308 	and.w	r3, r3, #8
 801116c:	2b08      	cmp	r3, #8
 801116e:	d11b      	bne.n	80111a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f06f 0208 	mvn.w	r2, #8
 8011178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2204      	movs	r2, #4
 801117e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	69db      	ldr	r3, [r3, #28]
 8011186:	f003 0303 	and.w	r3, r3, #3
 801118a:	2b00      	cmp	r3, #0
 801118c:	d003      	beq.n	8011196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 fabe 	bl	8011710 <HAL_TIM_IC_CaptureCallback>
 8011194:	e005      	b.n	80111a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 fab0 	bl	80116fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f7f1 fe05 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2200      	movs	r2, #0
 80111a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	691b      	ldr	r3, [r3, #16]
 80111ae:	f003 0310 	and.w	r3, r3, #16
 80111b2:	2b10      	cmp	r3, #16
 80111b4:	d122      	bne.n	80111fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	68db      	ldr	r3, [r3, #12]
 80111bc:	f003 0310 	and.w	r3, r3, #16
 80111c0:	2b10      	cmp	r3, #16
 80111c2:	d11b      	bne.n	80111fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f06f 0210 	mvn.w	r2, #16
 80111cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2208      	movs	r2, #8
 80111d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	69db      	ldr	r3, [r3, #28]
 80111da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d003      	beq.n	80111ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 fa94 	bl	8011710 <HAL_TIM_IC_CaptureCallback>
 80111e8:	e005      	b.n	80111f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f000 fa86 	bl	80116fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f7f1 fddb 	bl	8002dac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2200      	movs	r2, #0
 80111fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	691b      	ldr	r3, [r3, #16]
 8011202:	f003 0301 	and.w	r3, r3, #1
 8011206:	2b01      	cmp	r3, #1
 8011208:	d10e      	bne.n	8011228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	f003 0301 	and.w	r3, r3, #1
 8011214:	2b01      	cmp	r3, #1
 8011216:	d107      	bne.n	8011228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	f06f 0201 	mvn.w	r2, #1
 8011220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011222:	6878      	ldr	r0, [r7, #4]
 8011224:	f7f1 fe12 	bl	8002e4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	691b      	ldr	r3, [r3, #16]
 801122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011232:	2b80      	cmp	r3, #128	; 0x80
 8011234:	d10e      	bne.n	8011254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	68db      	ldr	r3, [r3, #12]
 801123c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011240:	2b80      	cmp	r3, #128	; 0x80
 8011242:	d107      	bne.n	8011254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801124c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 fff8 	bl	8012244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	691b      	ldr	r3, [r3, #16]
 801125a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801125e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011262:	d10e      	bne.n	8011282 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	68db      	ldr	r3, [r3, #12]
 801126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801126e:	2b80      	cmp	r3, #128	; 0x80
 8011270:	d107      	bne.n	8011282 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801127a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f000 ffeb 	bl	8012258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	691b      	ldr	r3, [r3, #16]
 8011288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801128c:	2b40      	cmp	r3, #64	; 0x40
 801128e:	d10e      	bne.n	80112ae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	68db      	ldr	r3, [r3, #12]
 8011296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801129a:	2b40      	cmp	r3, #64	; 0x40
 801129c:	d107      	bne.n	80112ae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80112a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f000 fa3b 	bl	8011724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	691b      	ldr	r3, [r3, #16]
 80112b4:	f003 0320 	and.w	r3, r3, #32
 80112b8:	2b20      	cmp	r3, #32
 80112ba:	d10e      	bne.n	80112da <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	68db      	ldr	r3, [r3, #12]
 80112c2:	f003 0320 	and.w	r3, r3, #32
 80112c6:	2b20      	cmp	r3, #32
 80112c8:	d107      	bne.n	80112da <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f06f 0220 	mvn.w	r2, #32
 80112d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80112d4:	6878      	ldr	r0, [r7, #4]
 80112d6:	f000 ffab 	bl	8012230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80112da:	bf00      	nop
 80112dc:	3708      	adds	r7, #8
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
	...

080112e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b086      	sub	sp, #24
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	60f8      	str	r0, [r7, #12]
 80112ec:	60b9      	str	r1, [r7, #8]
 80112ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112f0:	2300      	movs	r3, #0
 80112f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	d101      	bne.n	8011302 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80112fe:	2302      	movs	r3, #2
 8011300:	e0ff      	b.n	8011502 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2201      	movs	r2, #1
 8011306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2b14      	cmp	r3, #20
 801130e:	f200 80f0 	bhi.w	80114f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011312:	a201      	add	r2, pc, #4	; (adr r2, 8011318 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011318:	0801136d 	.word	0x0801136d
 801131c:	080114f3 	.word	0x080114f3
 8011320:	080114f3 	.word	0x080114f3
 8011324:	080114f3 	.word	0x080114f3
 8011328:	080113ad 	.word	0x080113ad
 801132c:	080114f3 	.word	0x080114f3
 8011330:	080114f3 	.word	0x080114f3
 8011334:	080114f3 	.word	0x080114f3
 8011338:	080113ef 	.word	0x080113ef
 801133c:	080114f3 	.word	0x080114f3
 8011340:	080114f3 	.word	0x080114f3
 8011344:	080114f3 	.word	0x080114f3
 8011348:	0801142f 	.word	0x0801142f
 801134c:	080114f3 	.word	0x080114f3
 8011350:	080114f3 	.word	0x080114f3
 8011354:	080114f3 	.word	0x080114f3
 8011358:	08011471 	.word	0x08011471
 801135c:	080114f3 	.word	0x080114f3
 8011360:	080114f3 	.word	0x080114f3
 8011364:	080114f3 	.word	0x080114f3
 8011368:	080114b1 	.word	0x080114b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	68b9      	ldr	r1, [r7, #8]
 8011372:	4618      	mov	r0, r3
 8011374:	f000 fa86 	bl	8011884 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	699a      	ldr	r2, [r3, #24]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	f042 0208 	orr.w	r2, r2, #8
 8011386:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	699a      	ldr	r2, [r3, #24]
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	f022 0204 	bic.w	r2, r2, #4
 8011396:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	6999      	ldr	r1, [r3, #24]
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	691a      	ldr	r2, [r3, #16]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	430a      	orrs	r2, r1
 80113a8:	619a      	str	r2, [r3, #24]
      break;
 80113aa:	e0a5      	b.n	80114f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	68b9      	ldr	r1, [r7, #8]
 80113b2:	4618      	mov	r0, r3
 80113b4:	f000 faf6 	bl	80119a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	699a      	ldr	r2, [r3, #24]
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80113c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	699a      	ldr	r2, [r3, #24]
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	6999      	ldr	r1, [r3, #24]
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	691b      	ldr	r3, [r3, #16]
 80113e2:	021a      	lsls	r2, r3, #8
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	430a      	orrs	r2, r1
 80113ea:	619a      	str	r2, [r3, #24]
      break;
 80113ec:	e084      	b.n	80114f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68b9      	ldr	r1, [r7, #8]
 80113f4:	4618      	mov	r0, r3
 80113f6:	f000 fb5f 	bl	8011ab8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	69da      	ldr	r2, [r3, #28]
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f042 0208 	orr.w	r2, r2, #8
 8011408:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	69da      	ldr	r2, [r3, #28]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	f022 0204 	bic.w	r2, r2, #4
 8011418:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	69d9      	ldr	r1, [r3, #28]
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	691a      	ldr	r2, [r3, #16]
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	430a      	orrs	r2, r1
 801142a:	61da      	str	r2, [r3, #28]
      break;
 801142c:	e064      	b.n	80114f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	68b9      	ldr	r1, [r7, #8]
 8011434:	4618      	mov	r0, r3
 8011436:	f000 fbc7 	bl	8011bc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	69da      	ldr	r2, [r3, #28]
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	69da      	ldr	r2, [r3, #28]
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	69d9      	ldr	r1, [r3, #28]
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	691b      	ldr	r3, [r3, #16]
 8011464:	021a      	lsls	r2, r3, #8
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	430a      	orrs	r2, r1
 801146c:	61da      	str	r2, [r3, #28]
      break;
 801146e:	e043      	b.n	80114f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	68b9      	ldr	r1, [r7, #8]
 8011476:	4618      	mov	r0, r3
 8011478:	f000 fc10 	bl	8011c9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f042 0208 	orr.w	r2, r2, #8
 801148a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f022 0204 	bic.w	r2, r2, #4
 801149a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80114a2:	68bb      	ldr	r3, [r7, #8]
 80114a4:	691a      	ldr	r2, [r3, #16]
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	430a      	orrs	r2, r1
 80114ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80114ae:	e023      	b.n	80114f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	68b9      	ldr	r1, [r7, #8]
 80114b6:	4618      	mov	r0, r3
 80114b8:	f000 fc54 	bl	8011d64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	691b      	ldr	r3, [r3, #16]
 80114e6:	021a      	lsls	r2, r3, #8
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	430a      	orrs	r2, r1
 80114ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80114f0:	e002      	b.n	80114f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80114f2:	2301      	movs	r3, #1
 80114f4:	75fb      	strb	r3, [r7, #23]
      break;
 80114f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2200      	movs	r2, #0
 80114fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011500:	7dfb      	ldrb	r3, [r7, #23]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3718      	adds	r7, #24
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop

0801150c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b084      	sub	sp, #16
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011516:	2300      	movs	r3, #0
 8011518:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011520:	2b01      	cmp	r3, #1
 8011522:	d101      	bne.n	8011528 <HAL_TIM_ConfigClockSource+0x1c>
 8011524:	2302      	movs	r3, #2
 8011526:	e0dc      	b.n	80116e2 <HAL_TIM_ConfigClockSource+0x1d6>
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	2201      	movs	r2, #1
 801152c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2202      	movs	r2, #2
 8011534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	689b      	ldr	r3, [r3, #8]
 801153e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011540:	68ba      	ldr	r2, [r7, #8]
 8011542:	4b6a      	ldr	r3, [pc, #424]	; (80116ec <HAL_TIM_ConfigClockSource+0x1e0>)
 8011544:	4013      	ands	r3, r2
 8011546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801154e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4a64      	ldr	r2, [pc, #400]	; (80116f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 801155e:	4293      	cmp	r3, r2
 8011560:	f000 80a9 	beq.w	80116b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8011564:	4a62      	ldr	r2, [pc, #392]	; (80116f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011566:	4293      	cmp	r3, r2
 8011568:	f200 80ae 	bhi.w	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801156c:	4a61      	ldr	r2, [pc, #388]	; (80116f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 801156e:	4293      	cmp	r3, r2
 8011570:	f000 80a1 	beq.w	80116b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8011574:	4a5f      	ldr	r2, [pc, #380]	; (80116f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011576:	4293      	cmp	r3, r2
 8011578:	f200 80a6 	bhi.w	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801157c:	4a5e      	ldr	r2, [pc, #376]	; (80116f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 801157e:	4293      	cmp	r3, r2
 8011580:	f000 8099 	beq.w	80116b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8011584:	4a5c      	ldr	r2, [pc, #368]	; (80116f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011586:	4293      	cmp	r3, r2
 8011588:	f200 809e 	bhi.w	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801158c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011590:	f000 8091 	beq.w	80116b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8011594:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011598:	f200 8096 	bhi.w	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 801159c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115a0:	f000 8089 	beq.w	80116b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80115a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115a8:	f200 808e 	bhi.w	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80115ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115b0:	d03e      	beq.n	8011630 <HAL_TIM_ConfigClockSource+0x124>
 80115b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80115b6:	f200 8087 	bhi.w	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80115ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115be:	f000 8086 	beq.w	80116ce <HAL_TIM_ConfigClockSource+0x1c2>
 80115c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115c6:	d87f      	bhi.n	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80115c8:	2b70      	cmp	r3, #112	; 0x70
 80115ca:	d01a      	beq.n	8011602 <HAL_TIM_ConfigClockSource+0xf6>
 80115cc:	2b70      	cmp	r3, #112	; 0x70
 80115ce:	d87b      	bhi.n	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80115d0:	2b60      	cmp	r3, #96	; 0x60
 80115d2:	d050      	beq.n	8011676 <HAL_TIM_ConfigClockSource+0x16a>
 80115d4:	2b60      	cmp	r3, #96	; 0x60
 80115d6:	d877      	bhi.n	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80115d8:	2b50      	cmp	r3, #80	; 0x50
 80115da:	d03c      	beq.n	8011656 <HAL_TIM_ConfigClockSource+0x14a>
 80115dc:	2b50      	cmp	r3, #80	; 0x50
 80115de:	d873      	bhi.n	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80115e0:	2b40      	cmp	r3, #64	; 0x40
 80115e2:	d058      	beq.n	8011696 <HAL_TIM_ConfigClockSource+0x18a>
 80115e4:	2b40      	cmp	r3, #64	; 0x40
 80115e6:	d86f      	bhi.n	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80115e8:	2b30      	cmp	r3, #48	; 0x30
 80115ea:	d064      	beq.n	80116b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80115ec:	2b30      	cmp	r3, #48	; 0x30
 80115ee:	d86b      	bhi.n	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80115f0:	2b20      	cmp	r3, #32
 80115f2:	d060      	beq.n	80116b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80115f4:	2b20      	cmp	r3, #32
 80115f6:	d867      	bhi.n	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d05c      	beq.n	80116b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80115fc:	2b10      	cmp	r3, #16
 80115fe:	d05a      	beq.n	80116b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8011600:	e062      	b.n	80116c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6818      	ldr	r0, [r3, #0]
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	6899      	ldr	r1, [r3, #8]
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	685a      	ldr	r2, [r3, #4]
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	f000 fc8b 	bl	8011f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	689b      	ldr	r3, [r3, #8]
 801161c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801161e:	68bb      	ldr	r3, [r7, #8]
 8011620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011624:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	68ba      	ldr	r2, [r7, #8]
 801162c:	609a      	str	r2, [r3, #8]
      break;
 801162e:	e04f      	b.n	80116d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6818      	ldr	r0, [r3, #0]
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	6899      	ldr	r1, [r3, #8]
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	685a      	ldr	r2, [r3, #4]
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	68db      	ldr	r3, [r3, #12]
 8011640:	f000 fc74 	bl	8011f2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	689a      	ldr	r2, [r3, #8]
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011652:	609a      	str	r2, [r3, #8]
      break;
 8011654:	e03c      	b.n	80116d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6818      	ldr	r0, [r3, #0]
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	6859      	ldr	r1, [r3, #4]
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	68db      	ldr	r3, [r3, #12]
 8011662:	461a      	mov	r2, r3
 8011664:	f000 fbe4 	bl	8011e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2150      	movs	r1, #80	; 0x50
 801166e:	4618      	mov	r0, r3
 8011670:	f000 fc3e 	bl	8011ef0 <TIM_ITRx_SetConfig>
      break;
 8011674:	e02c      	b.n	80116d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6818      	ldr	r0, [r3, #0]
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	6859      	ldr	r1, [r3, #4]
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	461a      	mov	r2, r3
 8011684:	f000 fc03 	bl	8011e8e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	2160      	movs	r1, #96	; 0x60
 801168e:	4618      	mov	r0, r3
 8011690:	f000 fc2e 	bl	8011ef0 <TIM_ITRx_SetConfig>
      break;
 8011694:	e01c      	b.n	80116d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6818      	ldr	r0, [r3, #0]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	6859      	ldr	r1, [r3, #4]
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	68db      	ldr	r3, [r3, #12]
 80116a2:	461a      	mov	r2, r3
 80116a4:	f000 fbc4 	bl	8011e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	2140      	movs	r1, #64	; 0x40
 80116ae:	4618      	mov	r0, r3
 80116b0:	f000 fc1e 	bl	8011ef0 <TIM_ITRx_SetConfig>
      break;
 80116b4:	e00c      	b.n	80116d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	4619      	mov	r1, r3
 80116c0:	4610      	mov	r0, r2
 80116c2:	f000 fc15 	bl	8011ef0 <TIM_ITRx_SetConfig>
      break;
 80116c6:	e003      	b.n	80116d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80116c8:	2301      	movs	r3, #1
 80116ca:	73fb      	strb	r3, [r7, #15]
      break;
 80116cc:	e000      	b.n	80116d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80116ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2201      	movs	r2, #1
 80116d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2200      	movs	r2, #0
 80116dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80116e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3710      	adds	r7, #16
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	ffceff88 	.word	0xffceff88
 80116f0:	00100040 	.word	0x00100040
 80116f4:	00100030 	.word	0x00100030
 80116f8:	00100020 	.word	0x00100020

080116fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011704:	bf00      	nop
 8011706:	370c      	adds	r7, #12
 8011708:	46bd      	mov	sp, r7
 801170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170e:	4770      	bx	lr

08011710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011710:	b480      	push	{r7}
 8011712:	b083      	sub	sp, #12
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8011718:	bf00      	nop
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011724:	b480      	push	{r7}
 8011726:	b083      	sub	sp, #12
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801172c:	bf00      	nop
 801172e:	370c      	adds	r7, #12
 8011730:	46bd      	mov	sp, r7
 8011732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011736:	4770      	bx	lr

08011738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8011738:	b480      	push	{r7}
 801173a:	b085      	sub	sp, #20
 801173c:	af00      	add	r7, sp, #0
 801173e:	6078      	str	r0, [r7, #4]
 8011740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	4a44      	ldr	r2, [pc, #272]	; (801185c <TIM_Base_SetConfig+0x124>)
 801174c:	4293      	cmp	r3, r2
 801174e:	d013      	beq.n	8011778 <TIM_Base_SetConfig+0x40>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011756:	d00f      	beq.n	8011778 <TIM_Base_SetConfig+0x40>
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	4a41      	ldr	r2, [pc, #260]	; (8011860 <TIM_Base_SetConfig+0x128>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d00b      	beq.n	8011778 <TIM_Base_SetConfig+0x40>
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4a40      	ldr	r2, [pc, #256]	; (8011864 <TIM_Base_SetConfig+0x12c>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d007      	beq.n	8011778 <TIM_Base_SetConfig+0x40>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	4a3f      	ldr	r2, [pc, #252]	; (8011868 <TIM_Base_SetConfig+0x130>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d003      	beq.n	8011778 <TIM_Base_SetConfig+0x40>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	4a3e      	ldr	r2, [pc, #248]	; (801186c <TIM_Base_SetConfig+0x134>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d108      	bne.n	801178a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801177e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	68fa      	ldr	r2, [r7, #12]
 8011786:	4313      	orrs	r3, r2
 8011788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	4a33      	ldr	r2, [pc, #204]	; (801185c <TIM_Base_SetConfig+0x124>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d027      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011798:	d023      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	4a30      	ldr	r2, [pc, #192]	; (8011860 <TIM_Base_SetConfig+0x128>)
 801179e:	4293      	cmp	r3, r2
 80117a0:	d01f      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	4a2f      	ldr	r2, [pc, #188]	; (8011864 <TIM_Base_SetConfig+0x12c>)
 80117a6:	4293      	cmp	r3, r2
 80117a8:	d01b      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	4a2e      	ldr	r2, [pc, #184]	; (8011868 <TIM_Base_SetConfig+0x130>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d017      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	4a2d      	ldr	r2, [pc, #180]	; (801186c <TIM_Base_SetConfig+0x134>)
 80117b6:	4293      	cmp	r3, r2
 80117b8:	d013      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	4a2c      	ldr	r2, [pc, #176]	; (8011870 <TIM_Base_SetConfig+0x138>)
 80117be:	4293      	cmp	r3, r2
 80117c0:	d00f      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	4a2b      	ldr	r2, [pc, #172]	; (8011874 <TIM_Base_SetConfig+0x13c>)
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d00b      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	4a2a      	ldr	r2, [pc, #168]	; (8011878 <TIM_Base_SetConfig+0x140>)
 80117ce:	4293      	cmp	r3, r2
 80117d0:	d007      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	4a29      	ldr	r2, [pc, #164]	; (801187c <TIM_Base_SetConfig+0x144>)
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d003      	beq.n	80117e2 <TIM_Base_SetConfig+0xaa>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4a28      	ldr	r2, [pc, #160]	; (8011880 <TIM_Base_SetConfig+0x148>)
 80117de:	4293      	cmp	r3, r2
 80117e0:	d108      	bne.n	80117f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80117e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80117ea:	683b      	ldr	r3, [r7, #0]
 80117ec:	68db      	ldr	r3, [r3, #12]
 80117ee:	68fa      	ldr	r2, [r7, #12]
 80117f0:	4313      	orrs	r3, r2
 80117f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	695b      	ldr	r3, [r3, #20]
 80117fe:	4313      	orrs	r3, r2
 8011800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	68fa      	ldr	r2, [r7, #12]
 8011806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	689a      	ldr	r2, [r3, #8]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	4a10      	ldr	r2, [pc, #64]	; (801185c <TIM_Base_SetConfig+0x124>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d00f      	beq.n	8011840 <TIM_Base_SetConfig+0x108>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	4a12      	ldr	r2, [pc, #72]	; (801186c <TIM_Base_SetConfig+0x134>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d00b      	beq.n	8011840 <TIM_Base_SetConfig+0x108>
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	4a11      	ldr	r2, [pc, #68]	; (8011870 <TIM_Base_SetConfig+0x138>)
 801182c:	4293      	cmp	r3, r2
 801182e:	d007      	beq.n	8011840 <TIM_Base_SetConfig+0x108>
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	4a10      	ldr	r2, [pc, #64]	; (8011874 <TIM_Base_SetConfig+0x13c>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d003      	beq.n	8011840 <TIM_Base_SetConfig+0x108>
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4a0f      	ldr	r2, [pc, #60]	; (8011878 <TIM_Base_SetConfig+0x140>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d103      	bne.n	8011848 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	691a      	ldr	r2, [r3, #16]
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2201      	movs	r2, #1
 801184c:	615a      	str	r2, [r3, #20]
}
 801184e:	bf00      	nop
 8011850:	3714      	adds	r7, #20
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop
 801185c:	40010000 	.word	0x40010000
 8011860:	40000400 	.word	0x40000400
 8011864:	40000800 	.word	0x40000800
 8011868:	40000c00 	.word	0x40000c00
 801186c:	40010400 	.word	0x40010400
 8011870:	40014000 	.word	0x40014000
 8011874:	40014400 	.word	0x40014400
 8011878:	40014800 	.word	0x40014800
 801187c:	4000e000 	.word	0x4000e000
 8011880:	4000e400 	.word	0x4000e400

08011884 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011884:	b480      	push	{r7}
 8011886:	b087      	sub	sp, #28
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6a1b      	ldr	r3, [r3, #32]
 8011892:	f023 0201 	bic.w	r2, r3, #1
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6a1b      	ldr	r3, [r3, #32]
 801189e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	699b      	ldr	r3, [r3, #24]
 80118aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80118ac:	68fa      	ldr	r2, [r7, #12]
 80118ae:	4b37      	ldr	r3, [pc, #220]	; (801198c <TIM_OC1_SetConfig+0x108>)
 80118b0:	4013      	ands	r3, r2
 80118b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f023 0303 	bic.w	r3, r3, #3
 80118ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	68fa      	ldr	r2, [r7, #12]
 80118c2:	4313      	orrs	r3, r2
 80118c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	f023 0302 	bic.w	r3, r3, #2
 80118cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	689b      	ldr	r3, [r3, #8]
 80118d2:	697a      	ldr	r2, [r7, #20]
 80118d4:	4313      	orrs	r3, r2
 80118d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	4a2d      	ldr	r2, [pc, #180]	; (8011990 <TIM_OC1_SetConfig+0x10c>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d00f      	beq.n	8011900 <TIM_OC1_SetConfig+0x7c>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	4a2c      	ldr	r2, [pc, #176]	; (8011994 <TIM_OC1_SetConfig+0x110>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d00b      	beq.n	8011900 <TIM_OC1_SetConfig+0x7c>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	4a2b      	ldr	r2, [pc, #172]	; (8011998 <TIM_OC1_SetConfig+0x114>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d007      	beq.n	8011900 <TIM_OC1_SetConfig+0x7c>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	4a2a      	ldr	r2, [pc, #168]	; (801199c <TIM_OC1_SetConfig+0x118>)
 80118f4:	4293      	cmp	r3, r2
 80118f6:	d003      	beq.n	8011900 <TIM_OC1_SetConfig+0x7c>
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4a29      	ldr	r2, [pc, #164]	; (80119a0 <TIM_OC1_SetConfig+0x11c>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d10c      	bne.n	801191a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	f023 0308 	bic.w	r3, r3, #8
 8011906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	68db      	ldr	r3, [r3, #12]
 801190c:	697a      	ldr	r2, [r7, #20]
 801190e:	4313      	orrs	r3, r2
 8011910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	f023 0304 	bic.w	r3, r3, #4
 8011918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	4a1c      	ldr	r2, [pc, #112]	; (8011990 <TIM_OC1_SetConfig+0x10c>)
 801191e:	4293      	cmp	r3, r2
 8011920:	d00f      	beq.n	8011942 <TIM_OC1_SetConfig+0xbe>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4a1b      	ldr	r2, [pc, #108]	; (8011994 <TIM_OC1_SetConfig+0x110>)
 8011926:	4293      	cmp	r3, r2
 8011928:	d00b      	beq.n	8011942 <TIM_OC1_SetConfig+0xbe>
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	4a1a      	ldr	r2, [pc, #104]	; (8011998 <TIM_OC1_SetConfig+0x114>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d007      	beq.n	8011942 <TIM_OC1_SetConfig+0xbe>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	4a19      	ldr	r2, [pc, #100]	; (801199c <TIM_OC1_SetConfig+0x118>)
 8011936:	4293      	cmp	r3, r2
 8011938:	d003      	beq.n	8011942 <TIM_OC1_SetConfig+0xbe>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	4a18      	ldr	r2, [pc, #96]	; (80119a0 <TIM_OC1_SetConfig+0x11c>)
 801193e:	4293      	cmp	r3, r2
 8011940:	d111      	bne.n	8011966 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011942:	693b      	ldr	r3, [r7, #16]
 8011944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801194a:	693b      	ldr	r3, [r7, #16]
 801194c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	695b      	ldr	r3, [r3, #20]
 8011956:	693a      	ldr	r2, [r7, #16]
 8011958:	4313      	orrs	r3, r2
 801195a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	699b      	ldr	r3, [r3, #24]
 8011960:	693a      	ldr	r2, [r7, #16]
 8011962:	4313      	orrs	r3, r2
 8011964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	693a      	ldr	r2, [r7, #16]
 801196a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	68fa      	ldr	r2, [r7, #12]
 8011970:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	685a      	ldr	r2, [r3, #4]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	697a      	ldr	r2, [r7, #20]
 801197e:	621a      	str	r2, [r3, #32]
}
 8011980:	bf00      	nop
 8011982:	371c      	adds	r7, #28
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr
 801198c:	fffeff8f 	.word	0xfffeff8f
 8011990:	40010000 	.word	0x40010000
 8011994:	40010400 	.word	0x40010400
 8011998:	40014000 	.word	0x40014000
 801199c:	40014400 	.word	0x40014400
 80119a0:	40014800 	.word	0x40014800

080119a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80119a4:	b480      	push	{r7}
 80119a6:	b087      	sub	sp, #28
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	6078      	str	r0, [r7, #4]
 80119ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6a1b      	ldr	r3, [r3, #32]
 80119b2:	f023 0210 	bic.w	r2, r3, #16
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6a1b      	ldr	r3, [r3, #32]
 80119be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	699b      	ldr	r3, [r3, #24]
 80119ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80119cc:	68fa      	ldr	r2, [r7, #12]
 80119ce:	4b34      	ldr	r3, [pc, #208]	; (8011aa0 <TIM_OC2_SetConfig+0xfc>)
 80119d0:	4013      	ands	r3, r2
 80119d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80119da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	021b      	lsls	r3, r3, #8
 80119e2:	68fa      	ldr	r2, [r7, #12]
 80119e4:	4313      	orrs	r3, r2
 80119e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	f023 0320 	bic.w	r3, r3, #32
 80119ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	011b      	lsls	r3, r3, #4
 80119f6:	697a      	ldr	r2, [r7, #20]
 80119f8:	4313      	orrs	r3, r2
 80119fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	4a29      	ldr	r2, [pc, #164]	; (8011aa4 <TIM_OC2_SetConfig+0x100>)
 8011a00:	4293      	cmp	r3, r2
 8011a02:	d003      	beq.n	8011a0c <TIM_OC2_SetConfig+0x68>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	4a28      	ldr	r2, [pc, #160]	; (8011aa8 <TIM_OC2_SetConfig+0x104>)
 8011a08:	4293      	cmp	r3, r2
 8011a0a:	d10d      	bne.n	8011a28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	011b      	lsls	r3, r3, #4
 8011a1a:	697a      	ldr	r2, [r7, #20]
 8011a1c:	4313      	orrs	r3, r2
 8011a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	4a1e      	ldr	r2, [pc, #120]	; (8011aa4 <TIM_OC2_SetConfig+0x100>)
 8011a2c:	4293      	cmp	r3, r2
 8011a2e:	d00f      	beq.n	8011a50 <TIM_OC2_SetConfig+0xac>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	4a1d      	ldr	r2, [pc, #116]	; (8011aa8 <TIM_OC2_SetConfig+0x104>)
 8011a34:	4293      	cmp	r3, r2
 8011a36:	d00b      	beq.n	8011a50 <TIM_OC2_SetConfig+0xac>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	4a1c      	ldr	r2, [pc, #112]	; (8011aac <TIM_OC2_SetConfig+0x108>)
 8011a3c:	4293      	cmp	r3, r2
 8011a3e:	d007      	beq.n	8011a50 <TIM_OC2_SetConfig+0xac>
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	4a1b      	ldr	r2, [pc, #108]	; (8011ab0 <TIM_OC2_SetConfig+0x10c>)
 8011a44:	4293      	cmp	r3, r2
 8011a46:	d003      	beq.n	8011a50 <TIM_OC2_SetConfig+0xac>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	4a1a      	ldr	r2, [pc, #104]	; (8011ab4 <TIM_OC2_SetConfig+0x110>)
 8011a4c:	4293      	cmp	r3, r2
 8011a4e:	d113      	bne.n	8011a78 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	695b      	ldr	r3, [r3, #20]
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	693a      	ldr	r2, [r7, #16]
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	699b      	ldr	r3, [r3, #24]
 8011a70:	009b      	lsls	r3, r3, #2
 8011a72:	693a      	ldr	r2, [r7, #16]
 8011a74:	4313      	orrs	r3, r2
 8011a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	693a      	ldr	r2, [r7, #16]
 8011a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	68fa      	ldr	r2, [r7, #12]
 8011a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	685a      	ldr	r2, [r3, #4]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	697a      	ldr	r2, [r7, #20]
 8011a90:	621a      	str	r2, [r3, #32]
}
 8011a92:	bf00      	nop
 8011a94:	371c      	adds	r7, #28
 8011a96:	46bd      	mov	sp, r7
 8011a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9c:	4770      	bx	lr
 8011a9e:	bf00      	nop
 8011aa0:	feff8fff 	.word	0xfeff8fff
 8011aa4:	40010000 	.word	0x40010000
 8011aa8:	40010400 	.word	0x40010400
 8011aac:	40014000 	.word	0x40014000
 8011ab0:	40014400 	.word	0x40014400
 8011ab4:	40014800 	.word	0x40014800

08011ab8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011ab8:	b480      	push	{r7}
 8011aba:	b087      	sub	sp, #28
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6a1b      	ldr	r3, [r3, #32]
 8011ac6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	6a1b      	ldr	r3, [r3, #32]
 8011ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	685b      	ldr	r3, [r3, #4]
 8011ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	69db      	ldr	r3, [r3, #28]
 8011ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011ae0:	68fa      	ldr	r2, [r7, #12]
 8011ae2:	4b33      	ldr	r3, [pc, #204]	; (8011bb0 <TIM_OC3_SetConfig+0xf8>)
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	f023 0303 	bic.w	r3, r3, #3
 8011aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	68fa      	ldr	r2, [r7, #12]
 8011af6:	4313      	orrs	r3, r2
 8011af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	689b      	ldr	r3, [r3, #8]
 8011b06:	021b      	lsls	r3, r3, #8
 8011b08:	697a      	ldr	r2, [r7, #20]
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	4a28      	ldr	r2, [pc, #160]	; (8011bb4 <TIM_OC3_SetConfig+0xfc>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d003      	beq.n	8011b1e <TIM_OC3_SetConfig+0x66>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	4a27      	ldr	r2, [pc, #156]	; (8011bb8 <TIM_OC3_SetConfig+0x100>)
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	d10d      	bne.n	8011b3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	68db      	ldr	r3, [r3, #12]
 8011b2a:	021b      	lsls	r3, r3, #8
 8011b2c:	697a      	ldr	r2, [r7, #20]
 8011b2e:	4313      	orrs	r3, r2
 8011b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	4a1d      	ldr	r2, [pc, #116]	; (8011bb4 <TIM_OC3_SetConfig+0xfc>)
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d00f      	beq.n	8011b62 <TIM_OC3_SetConfig+0xaa>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4a1c      	ldr	r2, [pc, #112]	; (8011bb8 <TIM_OC3_SetConfig+0x100>)
 8011b46:	4293      	cmp	r3, r2
 8011b48:	d00b      	beq.n	8011b62 <TIM_OC3_SetConfig+0xaa>
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	4a1b      	ldr	r2, [pc, #108]	; (8011bbc <TIM_OC3_SetConfig+0x104>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d007      	beq.n	8011b62 <TIM_OC3_SetConfig+0xaa>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	4a1a      	ldr	r2, [pc, #104]	; (8011bc0 <TIM_OC3_SetConfig+0x108>)
 8011b56:	4293      	cmp	r3, r2
 8011b58:	d003      	beq.n	8011b62 <TIM_OC3_SetConfig+0xaa>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	4a19      	ldr	r2, [pc, #100]	; (8011bc4 <TIM_OC3_SetConfig+0x10c>)
 8011b5e:	4293      	cmp	r3, r2
 8011b60:	d113      	bne.n	8011b8a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011b72:	683b      	ldr	r3, [r7, #0]
 8011b74:	695b      	ldr	r3, [r3, #20]
 8011b76:	011b      	lsls	r3, r3, #4
 8011b78:	693a      	ldr	r2, [r7, #16]
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	699b      	ldr	r3, [r3, #24]
 8011b82:	011b      	lsls	r3, r3, #4
 8011b84:	693a      	ldr	r2, [r7, #16]
 8011b86:	4313      	orrs	r3, r2
 8011b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	693a      	ldr	r2, [r7, #16]
 8011b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	68fa      	ldr	r2, [r7, #12]
 8011b94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	685a      	ldr	r2, [r3, #4]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	697a      	ldr	r2, [r7, #20]
 8011ba2:	621a      	str	r2, [r3, #32]
}
 8011ba4:	bf00      	nop
 8011ba6:	371c      	adds	r7, #28
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr
 8011bb0:	fffeff8f 	.word	0xfffeff8f
 8011bb4:	40010000 	.word	0x40010000
 8011bb8:	40010400 	.word	0x40010400
 8011bbc:	40014000 	.word	0x40014000
 8011bc0:	40014400 	.word	0x40014400
 8011bc4:	40014800 	.word	0x40014800

08011bc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b087      	sub	sp, #28
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	6a1b      	ldr	r3, [r3, #32]
 8011bd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6a1b      	ldr	r3, [r3, #32]
 8011be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	685b      	ldr	r3, [r3, #4]
 8011be8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	69db      	ldr	r3, [r3, #28]
 8011bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011bf0:	68fa      	ldr	r2, [r7, #12]
 8011bf2:	4b24      	ldr	r3, [pc, #144]	; (8011c84 <TIM_OC4_SetConfig+0xbc>)
 8011bf4:	4013      	ands	r3, r2
 8011bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	021b      	lsls	r3, r3, #8
 8011c06:	68fa      	ldr	r2, [r7, #12]
 8011c08:	4313      	orrs	r3, r2
 8011c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011c0c:	693b      	ldr	r3, [r7, #16]
 8011c0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011c12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	689b      	ldr	r3, [r3, #8]
 8011c18:	031b      	lsls	r3, r3, #12
 8011c1a:	693a      	ldr	r2, [r7, #16]
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	4a19      	ldr	r2, [pc, #100]	; (8011c88 <TIM_OC4_SetConfig+0xc0>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d00f      	beq.n	8011c48 <TIM_OC4_SetConfig+0x80>
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	4a18      	ldr	r2, [pc, #96]	; (8011c8c <TIM_OC4_SetConfig+0xc4>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d00b      	beq.n	8011c48 <TIM_OC4_SetConfig+0x80>
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	4a17      	ldr	r2, [pc, #92]	; (8011c90 <TIM_OC4_SetConfig+0xc8>)
 8011c34:	4293      	cmp	r3, r2
 8011c36:	d007      	beq.n	8011c48 <TIM_OC4_SetConfig+0x80>
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	4a16      	ldr	r2, [pc, #88]	; (8011c94 <TIM_OC4_SetConfig+0xcc>)
 8011c3c:	4293      	cmp	r3, r2
 8011c3e:	d003      	beq.n	8011c48 <TIM_OC4_SetConfig+0x80>
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	4a15      	ldr	r2, [pc, #84]	; (8011c98 <TIM_OC4_SetConfig+0xd0>)
 8011c44:	4293      	cmp	r3, r2
 8011c46:	d109      	bne.n	8011c5c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	695b      	ldr	r3, [r3, #20]
 8011c54:	019b      	lsls	r3, r3, #6
 8011c56:	697a      	ldr	r2, [r7, #20]
 8011c58:	4313      	orrs	r3, r2
 8011c5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	697a      	ldr	r2, [r7, #20]
 8011c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	68fa      	ldr	r2, [r7, #12]
 8011c66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	685a      	ldr	r2, [r3, #4]
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	693a      	ldr	r2, [r7, #16]
 8011c74:	621a      	str	r2, [r3, #32]
}
 8011c76:	bf00      	nop
 8011c78:	371c      	adds	r7, #28
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop
 8011c84:	feff8fff 	.word	0xfeff8fff
 8011c88:	40010000 	.word	0x40010000
 8011c8c:	40010400 	.word	0x40010400
 8011c90:	40014000 	.word	0x40014000
 8011c94:	40014400 	.word	0x40014400
 8011c98:	40014800 	.word	0x40014800

08011c9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b087      	sub	sp, #28
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	6a1b      	ldr	r3, [r3, #32]
 8011caa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6a1b      	ldr	r3, [r3, #32]
 8011cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011cc4:	68fa      	ldr	r2, [r7, #12]
 8011cc6:	4b21      	ldr	r3, [pc, #132]	; (8011d4c <TIM_OC5_SetConfig+0xb0>)
 8011cc8:	4013      	ands	r3, r2
 8011cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	68fa      	ldr	r2, [r7, #12]
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011cdc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011cde:	683b      	ldr	r3, [r7, #0]
 8011ce0:	689b      	ldr	r3, [r3, #8]
 8011ce2:	041b      	lsls	r3, r3, #16
 8011ce4:	693a      	ldr	r2, [r7, #16]
 8011ce6:	4313      	orrs	r3, r2
 8011ce8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	4a18      	ldr	r2, [pc, #96]	; (8011d50 <TIM_OC5_SetConfig+0xb4>)
 8011cee:	4293      	cmp	r3, r2
 8011cf0:	d00f      	beq.n	8011d12 <TIM_OC5_SetConfig+0x76>
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	4a17      	ldr	r2, [pc, #92]	; (8011d54 <TIM_OC5_SetConfig+0xb8>)
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d00b      	beq.n	8011d12 <TIM_OC5_SetConfig+0x76>
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	4a16      	ldr	r2, [pc, #88]	; (8011d58 <TIM_OC5_SetConfig+0xbc>)
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d007      	beq.n	8011d12 <TIM_OC5_SetConfig+0x76>
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	4a15      	ldr	r2, [pc, #84]	; (8011d5c <TIM_OC5_SetConfig+0xc0>)
 8011d06:	4293      	cmp	r3, r2
 8011d08:	d003      	beq.n	8011d12 <TIM_OC5_SetConfig+0x76>
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	4a14      	ldr	r2, [pc, #80]	; (8011d60 <TIM_OC5_SetConfig+0xc4>)
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d109      	bne.n	8011d26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011d18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	695b      	ldr	r3, [r3, #20]
 8011d1e:	021b      	lsls	r3, r3, #8
 8011d20:	697a      	ldr	r2, [r7, #20]
 8011d22:	4313      	orrs	r3, r2
 8011d24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	697a      	ldr	r2, [r7, #20]
 8011d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	68fa      	ldr	r2, [r7, #12]
 8011d30:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011d32:	683b      	ldr	r3, [r7, #0]
 8011d34:	685a      	ldr	r2, [r3, #4]
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	693a      	ldr	r2, [r7, #16]
 8011d3e:	621a      	str	r2, [r3, #32]
}
 8011d40:	bf00      	nop
 8011d42:	371c      	adds	r7, #28
 8011d44:	46bd      	mov	sp, r7
 8011d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4a:	4770      	bx	lr
 8011d4c:	fffeff8f 	.word	0xfffeff8f
 8011d50:	40010000 	.word	0x40010000
 8011d54:	40010400 	.word	0x40010400
 8011d58:	40014000 	.word	0x40014000
 8011d5c:	40014400 	.word	0x40014400
 8011d60:	40014800 	.word	0x40014800

08011d64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011d64:	b480      	push	{r7}
 8011d66:	b087      	sub	sp, #28
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6a1b      	ldr	r3, [r3, #32]
 8011d72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	6a1b      	ldr	r3, [r3, #32]
 8011d7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	685b      	ldr	r3, [r3, #4]
 8011d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011d8c:	68fa      	ldr	r2, [r7, #12]
 8011d8e:	4b22      	ldr	r3, [pc, #136]	; (8011e18 <TIM_OC6_SetConfig+0xb4>)
 8011d90:	4013      	ands	r3, r2
 8011d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	021b      	lsls	r3, r3, #8
 8011d9a:	68fa      	ldr	r2, [r7, #12]
 8011d9c:	4313      	orrs	r3, r2
 8011d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011da6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	689b      	ldr	r3, [r3, #8]
 8011dac:	051b      	lsls	r3, r3, #20
 8011dae:	693a      	ldr	r2, [r7, #16]
 8011db0:	4313      	orrs	r3, r2
 8011db2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	4a19      	ldr	r2, [pc, #100]	; (8011e1c <TIM_OC6_SetConfig+0xb8>)
 8011db8:	4293      	cmp	r3, r2
 8011dba:	d00f      	beq.n	8011ddc <TIM_OC6_SetConfig+0x78>
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	4a18      	ldr	r2, [pc, #96]	; (8011e20 <TIM_OC6_SetConfig+0xbc>)
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d00b      	beq.n	8011ddc <TIM_OC6_SetConfig+0x78>
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	4a17      	ldr	r2, [pc, #92]	; (8011e24 <TIM_OC6_SetConfig+0xc0>)
 8011dc8:	4293      	cmp	r3, r2
 8011dca:	d007      	beq.n	8011ddc <TIM_OC6_SetConfig+0x78>
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	4a16      	ldr	r2, [pc, #88]	; (8011e28 <TIM_OC6_SetConfig+0xc4>)
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	d003      	beq.n	8011ddc <TIM_OC6_SetConfig+0x78>
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	4a15      	ldr	r2, [pc, #84]	; (8011e2c <TIM_OC6_SetConfig+0xc8>)
 8011dd8:	4293      	cmp	r3, r2
 8011dda:	d109      	bne.n	8011df0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011de2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	695b      	ldr	r3, [r3, #20]
 8011de8:	029b      	lsls	r3, r3, #10
 8011dea:	697a      	ldr	r2, [r7, #20]
 8011dec:	4313      	orrs	r3, r2
 8011dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	697a      	ldr	r2, [r7, #20]
 8011df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	68fa      	ldr	r2, [r7, #12]
 8011dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	685a      	ldr	r2, [r3, #4]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	693a      	ldr	r2, [r7, #16]
 8011e08:	621a      	str	r2, [r3, #32]
}
 8011e0a:	bf00      	nop
 8011e0c:	371c      	adds	r7, #28
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop
 8011e18:	feff8fff 	.word	0xfeff8fff
 8011e1c:	40010000 	.word	0x40010000
 8011e20:	40010400 	.word	0x40010400
 8011e24:	40014000 	.word	0x40014000
 8011e28:	40014400 	.word	0x40014400
 8011e2c:	40014800 	.word	0x40014800

08011e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011e30:	b480      	push	{r7}
 8011e32:	b087      	sub	sp, #28
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	60f8      	str	r0, [r7, #12]
 8011e38:	60b9      	str	r1, [r7, #8]
 8011e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	6a1b      	ldr	r3, [r3, #32]
 8011e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	6a1b      	ldr	r3, [r3, #32]
 8011e46:	f023 0201 	bic.w	r2, r3, #1
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	699b      	ldr	r3, [r3, #24]
 8011e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	011b      	lsls	r3, r3, #4
 8011e60:	693a      	ldr	r2, [r7, #16]
 8011e62:	4313      	orrs	r3, r2
 8011e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	f023 030a 	bic.w	r3, r3, #10
 8011e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011e6e:	697a      	ldr	r2, [r7, #20]
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	4313      	orrs	r3, r2
 8011e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	693a      	ldr	r2, [r7, #16]
 8011e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	697a      	ldr	r2, [r7, #20]
 8011e80:	621a      	str	r2, [r3, #32]
}
 8011e82:	bf00      	nop
 8011e84:	371c      	adds	r7, #28
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr

08011e8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011e8e:	b480      	push	{r7}
 8011e90:	b087      	sub	sp, #28
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	60f8      	str	r0, [r7, #12]
 8011e96:	60b9      	str	r1, [r7, #8]
 8011e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6a1b      	ldr	r3, [r3, #32]
 8011e9e:	f023 0210 	bic.w	r2, r3, #16
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	699b      	ldr	r3, [r3, #24]
 8011eaa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	6a1b      	ldr	r3, [r3, #32]
 8011eb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	031b      	lsls	r3, r3, #12
 8011ebe:	697a      	ldr	r2, [r7, #20]
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011ec4:	693b      	ldr	r3, [r7, #16]
 8011ec6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011eca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	011b      	lsls	r3, r3, #4
 8011ed0:	693a      	ldr	r2, [r7, #16]
 8011ed2:	4313      	orrs	r3, r2
 8011ed4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	697a      	ldr	r2, [r7, #20]
 8011eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	693a      	ldr	r2, [r7, #16]
 8011ee0:	621a      	str	r2, [r3, #32]
}
 8011ee2:	bf00      	nop
 8011ee4:	371c      	adds	r7, #28
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr
	...

08011ef0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b085      	sub	sp, #20
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
 8011ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	689b      	ldr	r3, [r3, #8]
 8011efe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011f00:	68fa      	ldr	r2, [r7, #12]
 8011f02:	4b09      	ldr	r3, [pc, #36]	; (8011f28 <TIM_ITRx_SetConfig+0x38>)
 8011f04:	4013      	ands	r3, r2
 8011f06:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011f08:	683a      	ldr	r2, [r7, #0]
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	4313      	orrs	r3, r2
 8011f0e:	f043 0307 	orr.w	r3, r3, #7
 8011f12:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	68fa      	ldr	r2, [r7, #12]
 8011f18:	609a      	str	r2, [r3, #8]
}
 8011f1a:	bf00      	nop
 8011f1c:	3714      	adds	r7, #20
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	ffcfff8f 	.word	0xffcfff8f

08011f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b087      	sub	sp, #28
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	60f8      	str	r0, [r7, #12]
 8011f34:	60b9      	str	r1, [r7, #8]
 8011f36:	607a      	str	r2, [r7, #4]
 8011f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	689b      	ldr	r3, [r3, #8]
 8011f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011f40:	697b      	ldr	r3, [r7, #20]
 8011f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	021a      	lsls	r2, r3, #8
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	431a      	orrs	r2, r3
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	4313      	orrs	r3, r2
 8011f54:	697a      	ldr	r2, [r7, #20]
 8011f56:	4313      	orrs	r3, r2
 8011f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	697a      	ldr	r2, [r7, #20]
 8011f5e:	609a      	str	r2, [r3, #8]
}
 8011f60:	bf00      	nop
 8011f62:	371c      	adds	r7, #28
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr

08011f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b087      	sub	sp, #28
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	60f8      	str	r0, [r7, #12]
 8011f74:	60b9      	str	r1, [r7, #8]
 8011f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	f003 031f 	and.w	r3, r3, #31
 8011f7e:	2201      	movs	r2, #1
 8011f80:	fa02 f303 	lsl.w	r3, r2, r3
 8011f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	6a1a      	ldr	r2, [r3, #32]
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	43db      	mvns	r3, r3
 8011f8e:	401a      	ands	r2, r3
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	6a1a      	ldr	r2, [r3, #32]
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	f003 031f 	and.w	r3, r3, #31
 8011f9e:	6879      	ldr	r1, [r7, #4]
 8011fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8011fa4:	431a      	orrs	r2, r3
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	621a      	str	r2, [r3, #32]
}
 8011faa:	bf00      	nop
 8011fac:	371c      	adds	r7, #28
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr
	...

08011fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b085      	sub	sp, #20
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d101      	bne.n	8011fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011fcc:	2302      	movs	r3, #2
 8011fce:	e077      	b.n	80120c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	2202      	movs	r2, #2
 8011fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	685b      	ldr	r3, [r3, #4]
 8011fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	689b      	ldr	r3, [r3, #8]
 8011fee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	4a35      	ldr	r2, [pc, #212]	; (80120cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011ff6:	4293      	cmp	r3, r2
 8011ff8:	d004      	beq.n	8012004 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	4a34      	ldr	r2, [pc, #208]	; (80120d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012000:	4293      	cmp	r3, r2
 8012002:	d108      	bne.n	8012016 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801200a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	68fa      	ldr	r2, [r7, #12]
 8012012:	4313      	orrs	r3, r2
 8012014:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801201c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	68fa      	ldr	r2, [r7, #12]
 8012024:	4313      	orrs	r3, r2
 8012026:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	68fa      	ldr	r2, [r7, #12]
 801202e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	4a25      	ldr	r2, [pc, #148]	; (80120cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012036:	4293      	cmp	r3, r2
 8012038:	d02c      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012042:	d027      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4a22      	ldr	r2, [pc, #136]	; (80120d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801204a:	4293      	cmp	r3, r2
 801204c:	d022      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	4a21      	ldr	r2, [pc, #132]	; (80120d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8012054:	4293      	cmp	r3, r2
 8012056:	d01d      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	4a1f      	ldr	r2, [pc, #124]	; (80120dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801205e:	4293      	cmp	r3, r2
 8012060:	d018      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	4a1a      	ldr	r2, [pc, #104]	; (80120d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012068:	4293      	cmp	r3, r2
 801206a:	d013      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	4a1b      	ldr	r2, [pc, #108]	; (80120e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8012072:	4293      	cmp	r3, r2
 8012074:	d00e      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	4a1a      	ldr	r2, [pc, #104]	; (80120e4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801207c:	4293      	cmp	r3, r2
 801207e:	d009      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	4a18      	ldr	r2, [pc, #96]	; (80120e8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8012086:	4293      	cmp	r3, r2
 8012088:	d004      	beq.n	8012094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	4a17      	ldr	r2, [pc, #92]	; (80120ec <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8012090:	4293      	cmp	r3, r2
 8012092:	d10c      	bne.n	80120ae <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801209a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	68ba      	ldr	r2, [r7, #8]
 80120a2:	4313      	orrs	r3, r2
 80120a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	68ba      	ldr	r2, [r7, #8]
 80120ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	2201      	movs	r2, #1
 80120b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	2200      	movs	r2, #0
 80120ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80120be:	2300      	movs	r3, #0
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3714      	adds	r7, #20
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr
 80120cc:	40010000 	.word	0x40010000
 80120d0:	40010400 	.word	0x40010400
 80120d4:	40000400 	.word	0x40000400
 80120d8:	40000800 	.word	0x40000800
 80120dc:	40000c00 	.word	0x40000c00
 80120e0:	40001800 	.word	0x40001800
 80120e4:	40014000 	.word	0x40014000
 80120e8:	4000e000 	.word	0x4000e000
 80120ec:	4000e400 	.word	0x4000e400

080120f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80120f0:	b480      	push	{r7}
 80120f2:	b085      	sub	sp, #20
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
 80120f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80120fa:	2300      	movs	r3, #0
 80120fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012104:	2b01      	cmp	r3, #1
 8012106:	d101      	bne.n	801210c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012108:	2302      	movs	r3, #2
 801210a:	e087      	b.n	801221c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2201      	movs	r2, #1
 8012110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	68db      	ldr	r3, [r3, #12]
 801211e:	4313      	orrs	r3, r2
 8012120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	689b      	ldr	r3, [r3, #8]
 801212c:	4313      	orrs	r3, r2
 801212e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	4313      	orrs	r3, r2
 801213c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012144:	683b      	ldr	r3, [r7, #0]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	4313      	orrs	r3, r2
 801214a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	691b      	ldr	r3, [r3, #16]
 8012156:	4313      	orrs	r3, r2
 8012158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012160:	683b      	ldr	r3, [r7, #0]
 8012162:	695b      	ldr	r3, [r3, #20]
 8012164:	4313      	orrs	r3, r2
 8012166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012172:	4313      	orrs	r3, r2
 8012174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	699b      	ldr	r3, [r3, #24]
 8012180:	041b      	lsls	r3, r3, #16
 8012182:	4313      	orrs	r3, r2
 8012184:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	4a27      	ldr	r2, [pc, #156]	; (8012228 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801218c:	4293      	cmp	r3, r2
 801218e:	d004      	beq.n	801219a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	4a25      	ldr	r2, [pc, #148]	; (801222c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012196:	4293      	cmp	r3, r2
 8012198:	d106      	bne.n	80121a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80121a0:	683b      	ldr	r3, [r7, #0]
 80121a2:	69db      	ldr	r3, [r3, #28]
 80121a4:	4313      	orrs	r3, r2
 80121a6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	4a1e      	ldr	r2, [pc, #120]	; (8012228 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80121ae:	4293      	cmp	r3, r2
 80121b0:	d004      	beq.n	80121bc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	4a1d      	ldr	r2, [pc, #116]	; (801222c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80121b8:	4293      	cmp	r3, r2
 80121ba:	d126      	bne.n	801220a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121c6:	051b      	lsls	r3, r3, #20
 80121c8:	4313      	orrs	r3, r2
 80121ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	6a1b      	ldr	r3, [r3, #32]
 80121d6:	4313      	orrs	r3, r2
 80121d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e4:	4313      	orrs	r3, r2
 80121e6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	4a0e      	ldr	r2, [pc, #56]	; (8012228 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80121ee:	4293      	cmp	r3, r2
 80121f0:	d004      	beq.n	80121fc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	4a0d      	ldr	r2, [pc, #52]	; (801222c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80121f8:	4293      	cmp	r3, r2
 80121fa:	d106      	bne.n	801220a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012206:	4313      	orrs	r3, r2
 8012208:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	68fa      	ldr	r2, [r7, #12]
 8012210:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2200      	movs	r2, #0
 8012216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801221a:	2300      	movs	r3, #0
}
 801221c:	4618      	mov	r0, r3
 801221e:	3714      	adds	r7, #20
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr
 8012228:	40010000 	.word	0x40010000
 801222c:	40010400 	.word	0x40010400

08012230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012230:	b480      	push	{r7}
 8012232:	b083      	sub	sp, #12
 8012234:	af00      	add	r7, sp, #0
 8012236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012238:	bf00      	nop
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801224c:	bf00      	nop
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr

08012258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012258:	b480      	push	{r7}
 801225a:	b083      	sub	sp, #12
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012260:	bf00      	nop
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d101      	bne.n	801227e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801227a:	2301      	movs	r3, #1
 801227c:	e042      	b.n	8012304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012284:	2b00      	cmp	r3, #0
 8012286:	d106      	bne.n	8012296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7f3 f943 	bl	800551c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	2224      	movs	r2, #36	; 0x24
 801229a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	681a      	ldr	r2, [r3, #0]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	f022 0201 	bic.w	r2, r2, #1
 80122ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 fce8 	bl	8012c84 <UART_SetConfig>
 80122b4:	4603      	mov	r3, r0
 80122b6:	2b01      	cmp	r3, #1
 80122b8:	d101      	bne.n	80122be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80122ba:	2301      	movs	r3, #1
 80122bc:	e022      	b.n	8012304 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d002      	beq.n	80122cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80122c6:	6878      	ldr	r0, [r7, #4]
 80122c8:	f001 fb48 	bl	801395c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	685a      	ldr	r2, [r3, #4]
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	681b      	ldr	r3, [r3, #0]
 80122d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80122da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	689a      	ldr	r2, [r3, #8]
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80122ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f042 0201 	orr.w	r2, r2, #1
 80122fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f001 fbcf 	bl	8013aa0 <UART_CheckIdleState>
 8012302:	4603      	mov	r3, r0
}
 8012304:	4618      	mov	r0, r3
 8012306:	3708      	adds	r7, #8
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801230c:	b480      	push	{r7}
 801230e:	b091      	sub	sp, #68	; 0x44
 8012310:	af00      	add	r7, sp, #0
 8012312:	60f8      	str	r0, [r7, #12]
 8012314:	60b9      	str	r1, [r7, #8]
 8012316:	4613      	mov	r3, r2
 8012318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012320:	2b20      	cmp	r3, #32
 8012322:	f040 808c 	bne.w	801243e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d002      	beq.n	8012332 <HAL_UART_Transmit_IT+0x26>
 801232c:	88fb      	ldrh	r3, [r7, #6]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d101      	bne.n	8012336 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8012332:	2301      	movs	r3, #1
 8012334:	e084      	b.n	8012440 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801233c:	2b01      	cmp	r3, #1
 801233e:	d101      	bne.n	8012344 <HAL_UART_Transmit_IT+0x38>
 8012340:	2302      	movs	r3, #2
 8012342:	e07d      	b.n	8012440 <HAL_UART_Transmit_IT+0x134>
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	2201      	movs	r2, #1
 8012348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	68ba      	ldr	r2, [r7, #8]
 8012350:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	88fa      	ldrh	r2, [r7, #6]
 8012356:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	88fa      	ldrh	r2, [r7, #6]
 801235e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	2200      	movs	r2, #0
 8012366:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	2200      	movs	r2, #0
 801236c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2221      	movs	r2, #33	; 0x21
 8012374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801237c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012380:	d12e      	bne.n	80123e0 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	689b      	ldr	r3, [r3, #8]
 8012386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801238a:	d107      	bne.n	801239c <HAL_UART_Transmit_IT+0x90>
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	691b      	ldr	r3, [r3, #16]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d103      	bne.n	801239c <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	4a2d      	ldr	r2, [pc, #180]	; (801244c <HAL_UART_Transmit_IT+0x140>)
 8012398:	675a      	str	r2, [r3, #116]	; 0x74
 801239a:	e002      	b.n	80123a2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	4a2c      	ldr	r2, [pc, #176]	; (8012450 <HAL_UART_Transmit_IT+0x144>)
 80123a0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2200      	movs	r2, #0
 80123a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	3308      	adds	r3, #8
 80123b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b4:	e853 3f00 	ldrex	r3, [r3]
 80123b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80123ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80123c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	3308      	adds	r3, #8
 80123c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123ca:	637a      	str	r2, [r7, #52]	; 0x34
 80123cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80123d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123d2:	e841 2300 	strex	r3, r2, [r1]
 80123d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80123d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d1e5      	bne.n	80123aa <HAL_UART_Transmit_IT+0x9e>
 80123de:	e02c      	b.n	801243a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	689b      	ldr	r3, [r3, #8]
 80123e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123e8:	d107      	bne.n	80123fa <HAL_UART_Transmit_IT+0xee>
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	691b      	ldr	r3, [r3, #16]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d103      	bne.n	80123fa <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	4a17      	ldr	r2, [pc, #92]	; (8012454 <HAL_UART_Transmit_IT+0x148>)
 80123f6:	675a      	str	r2, [r3, #116]	; 0x74
 80123f8:	e002      	b.n	8012400 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	4a16      	ldr	r2, [pc, #88]	; (8012458 <HAL_UART_Transmit_IT+0x14c>)
 80123fe:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2200      	movs	r2, #0
 8012404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	e853 3f00 	ldrex	r3, [r3]
 8012414:	613b      	str	r3, [r7, #16]
   return(result);
 8012416:	693b      	ldr	r3, [r7, #16]
 8012418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801241c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	461a      	mov	r2, r3
 8012424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012426:	623b      	str	r3, [r7, #32]
 8012428:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801242a:	69f9      	ldr	r1, [r7, #28]
 801242c:	6a3a      	ldr	r2, [r7, #32]
 801242e:	e841 2300 	strex	r3, r2, [r1]
 8012432:	61bb      	str	r3, [r7, #24]
   return(result);
 8012434:	69bb      	ldr	r3, [r7, #24]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d1e6      	bne.n	8012408 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 801243a:	2300      	movs	r3, #0
 801243c:	e000      	b.n	8012440 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 801243e:	2302      	movs	r3, #2
  }
}
 8012440:	4618      	mov	r0, r3
 8012442:	3744      	adds	r7, #68	; 0x44
 8012444:	46bd      	mov	sp, r7
 8012446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801244a:	4770      	bx	lr
 801244c:	0801426f 	.word	0x0801426f
 8012450:	0801418f 	.word	0x0801418f
 8012454:	080140cd 	.word	0x080140cd
 8012458:	08014015 	.word	0x08014015

0801245c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b08a      	sub	sp, #40	; 0x28
 8012460:	af00      	add	r7, sp, #0
 8012462:	60f8      	str	r0, [r7, #12]
 8012464:	60b9      	str	r1, [r7, #8]
 8012466:	4613      	mov	r3, r2
 8012468:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012470:	2b20      	cmp	r3, #32
 8012472:	d142      	bne.n	80124fa <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d002      	beq.n	8012480 <HAL_UART_Receive_IT+0x24>
 801247a:	88fb      	ldrh	r3, [r7, #6]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d101      	bne.n	8012484 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8012480:	2301      	movs	r3, #1
 8012482:	e03b      	b.n	80124fc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801248a:	2b01      	cmp	r3, #1
 801248c:	d101      	bne.n	8012492 <HAL_UART_Receive_IT+0x36>
 801248e:	2302      	movs	r3, #2
 8012490:	e034      	b.n	80124fc <HAL_UART_Receive_IT+0xa0>
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	2201      	movs	r2, #1
 8012496:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	2200      	movs	r2, #0
 801249e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4a17      	ldr	r2, [pc, #92]	; (8012504 <HAL_UART_Receive_IT+0xa8>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d01f      	beq.n	80124ea <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d018      	beq.n	80124ea <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	e853 3f00 	ldrex	r3, [r3]
 80124c4:	613b      	str	r3, [r7, #16]
   return(result);
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80124cc:	627b      	str	r3, [r7, #36]	; 0x24
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	461a      	mov	r2, r3
 80124d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d6:	623b      	str	r3, [r7, #32]
 80124d8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124da:	69f9      	ldr	r1, [r7, #28]
 80124dc:	6a3a      	ldr	r2, [r7, #32]
 80124de:	e841 2300 	strex	r3, r2, [r1]
 80124e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d1e6      	bne.n	80124b8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80124ea:	88fb      	ldrh	r3, [r7, #6]
 80124ec:	461a      	mov	r2, r3
 80124ee:	68b9      	ldr	r1, [r7, #8]
 80124f0:	68f8      	ldr	r0, [r7, #12]
 80124f2:	f001 fbe9 	bl	8013cc8 <UART_Start_Receive_IT>
 80124f6:	4603      	mov	r3, r0
 80124f8:	e000      	b.n	80124fc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80124fa:	2302      	movs	r3, #2
  }
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3728      	adds	r7, #40	; 0x28
 8012500:	46bd      	mov	sp, r7
 8012502:	bd80      	pop	{r7, pc}
 8012504:	58000c00 	.word	0x58000c00

08012508 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b0ba      	sub	sp, #232	; 0xe8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	69db      	ldr	r3, [r3, #28]
 8012516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	689b      	ldr	r3, [r3, #8]
 801252a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801252e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012532:	f640 030f 	movw	r3, #2063	; 0x80f
 8012536:	4013      	ands	r3, r2
 8012538:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801253c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012540:	2b00      	cmp	r3, #0
 8012542:	d11b      	bne.n	801257c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012548:	f003 0320 	and.w	r3, r3, #32
 801254c:	2b00      	cmp	r3, #0
 801254e:	d015      	beq.n	801257c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012554:	f003 0320 	and.w	r3, r3, #32
 8012558:	2b00      	cmp	r3, #0
 801255a:	d105      	bne.n	8012568 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801255c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012564:	2b00      	cmp	r3, #0
 8012566:	d009      	beq.n	801257c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801256c:	2b00      	cmp	r3, #0
 801256e:	f000 835a 	beq.w	8012c26 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012576:	6878      	ldr	r0, [r7, #4]
 8012578:	4798      	blx	r3
      }
      return;
 801257a:	e354      	b.n	8012c26 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801257c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012580:	2b00      	cmp	r3, #0
 8012582:	f000 811f 	beq.w	80127c4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012586:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801258a:	4b8b      	ldr	r3, [pc, #556]	; (80127b8 <HAL_UART_IRQHandler+0x2b0>)
 801258c:	4013      	ands	r3, r2
 801258e:	2b00      	cmp	r3, #0
 8012590:	d106      	bne.n	80125a0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012592:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012596:	4b89      	ldr	r3, [pc, #548]	; (80127bc <HAL_UART_IRQHandler+0x2b4>)
 8012598:	4013      	ands	r3, r2
 801259a:	2b00      	cmp	r3, #0
 801259c:	f000 8112 	beq.w	80127c4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80125a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125a4:	f003 0301 	and.w	r3, r3, #1
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d011      	beq.n	80125d0 <HAL_UART_IRQHandler+0xc8>
 80125ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80125b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d00b      	beq.n	80125d0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	2201      	movs	r2, #1
 80125be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125c6:	f043 0201 	orr.w	r2, r3, #1
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125d4:	f003 0302 	and.w	r3, r3, #2
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d011      	beq.n	8012600 <HAL_UART_IRQHandler+0xf8>
 80125dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80125e0:	f003 0301 	and.w	r3, r3, #1
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d00b      	beq.n	8012600 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2202      	movs	r2, #2
 80125ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80125f6:	f043 0204 	orr.w	r2, r3, #4
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012604:	f003 0304 	and.w	r3, r3, #4
 8012608:	2b00      	cmp	r3, #0
 801260a:	d011      	beq.n	8012630 <HAL_UART_IRQHandler+0x128>
 801260c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012610:	f003 0301 	and.w	r3, r3, #1
 8012614:	2b00      	cmp	r3, #0
 8012616:	d00b      	beq.n	8012630 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	2204      	movs	r2, #4
 801261e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012626:	f043 0202 	orr.w	r2, r3, #2
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012634:	f003 0308 	and.w	r3, r3, #8
 8012638:	2b00      	cmp	r3, #0
 801263a:	d017      	beq.n	801266c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801263c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012640:	f003 0320 	and.w	r3, r3, #32
 8012644:	2b00      	cmp	r3, #0
 8012646:	d105      	bne.n	8012654 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012648:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801264c:	4b5a      	ldr	r3, [pc, #360]	; (80127b8 <HAL_UART_IRQHandler+0x2b0>)
 801264e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012650:	2b00      	cmp	r3, #0
 8012652:	d00b      	beq.n	801266c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	2208      	movs	r2, #8
 801265a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012662:	f043 0208 	orr.w	r2, r3, #8
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801266c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012674:	2b00      	cmp	r3, #0
 8012676:	d012      	beq.n	801269e <HAL_UART_IRQHandler+0x196>
 8012678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801267c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012680:	2b00      	cmp	r3, #0
 8012682:	d00c      	beq.n	801269e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801268c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012694:	f043 0220 	orr.w	r2, r3, #32
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	f000 82c0 	beq.w	8012c2a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80126aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126ae:	f003 0320 	and.w	r3, r3, #32
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d013      	beq.n	80126de <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80126b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126ba:	f003 0320 	and.w	r3, r3, #32
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d105      	bne.n	80126ce <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80126c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d007      	beq.n	80126de <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d003      	beq.n	80126de <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	689b      	ldr	r3, [r3, #8]
 80126ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126f2:	2b40      	cmp	r3, #64	; 0x40
 80126f4:	d005      	beq.n	8012702 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80126f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80126fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d04f      	beq.n	80127a2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f001 fc0a 	bl	8013f1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	689b      	ldr	r3, [r3, #8]
 801270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012712:	2b40      	cmp	r3, #64	; 0x40
 8012714:	d141      	bne.n	801279a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	3308      	adds	r3, #8
 801271c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012724:	e853 3f00 	ldrex	r3, [r3]
 8012728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801272c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	3308      	adds	r3, #8
 801273e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801274a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801274e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012752:	e841 2300 	strex	r3, r2, [r1]
 8012756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801275a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801275e:	2b00      	cmp	r3, #0
 8012760:	d1d9      	bne.n	8012716 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012766:	2b00      	cmp	r3, #0
 8012768:	d013      	beq.n	8012792 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801276e:	4a14      	ldr	r2, [pc, #80]	; (80127c0 <HAL_UART_IRQHandler+0x2b8>)
 8012770:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012776:	4618      	mov	r0, r3
 8012778:	f7f6 fbb4 	bl	8008ee4 <HAL_DMA_Abort_IT>
 801277c:	4603      	mov	r3, r0
 801277e:	2b00      	cmp	r3, #0
 8012780:	d017      	beq.n	80127b2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 801278c:	4610      	mov	r0, r2
 801278e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012790:	e00f      	b.n	80127b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f000 fa60 	bl	8012c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012798:	e00b      	b.n	80127b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f000 fa5c 	bl	8012c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127a0:	e007      	b.n	80127b2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80127a2:	6878      	ldr	r0, [r7, #4]
 80127a4:	f000 fa58 	bl	8012c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2200      	movs	r2, #0
 80127ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80127b0:	e23b      	b.n	8012c2a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127b2:	bf00      	nop
    return;
 80127b4:	e239      	b.n	8012c2a <HAL_UART_IRQHandler+0x722>
 80127b6:	bf00      	nop
 80127b8:	10000001 	.word	0x10000001
 80127bc:	04000120 	.word	0x04000120
 80127c0:	08013fe9 	.word	0x08013fe9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	f040 81ce 	bne.w	8012b6a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80127ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127d2:	f003 0310 	and.w	r3, r3, #16
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	f000 81c7 	beq.w	8012b6a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80127dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127e0:	f003 0310 	and.w	r3, r3, #16
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	f000 81c0 	beq.w	8012b6a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	2210      	movs	r2, #16
 80127f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	689b      	ldr	r3, [r3, #8]
 80127f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127fc:	2b40      	cmp	r3, #64	; 0x40
 80127fe:	f040 813b 	bne.w	8012a78 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	4a8b      	ldr	r2, [pc, #556]	; (8012a38 <HAL_UART_IRQHandler+0x530>)
 801280a:	4293      	cmp	r3, r2
 801280c:	d059      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4a89      	ldr	r2, [pc, #548]	; (8012a3c <HAL_UART_IRQHandler+0x534>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d053      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	4a87      	ldr	r2, [pc, #540]	; (8012a40 <HAL_UART_IRQHandler+0x538>)
 8012822:	4293      	cmp	r3, r2
 8012824:	d04d      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	4a85      	ldr	r2, [pc, #532]	; (8012a44 <HAL_UART_IRQHandler+0x53c>)
 801282e:	4293      	cmp	r3, r2
 8012830:	d047      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	4a83      	ldr	r2, [pc, #524]	; (8012a48 <HAL_UART_IRQHandler+0x540>)
 801283a:	4293      	cmp	r3, r2
 801283c:	d041      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4a81      	ldr	r2, [pc, #516]	; (8012a4c <HAL_UART_IRQHandler+0x544>)
 8012846:	4293      	cmp	r3, r2
 8012848:	d03b      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	4a7f      	ldr	r2, [pc, #508]	; (8012a50 <HAL_UART_IRQHandler+0x548>)
 8012852:	4293      	cmp	r3, r2
 8012854:	d035      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	4a7d      	ldr	r2, [pc, #500]	; (8012a54 <HAL_UART_IRQHandler+0x54c>)
 801285e:	4293      	cmp	r3, r2
 8012860:	d02f      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4a7b      	ldr	r2, [pc, #492]	; (8012a58 <HAL_UART_IRQHandler+0x550>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d029      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	4a79      	ldr	r2, [pc, #484]	; (8012a5c <HAL_UART_IRQHandler+0x554>)
 8012876:	4293      	cmp	r3, r2
 8012878:	d023      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4a77      	ldr	r2, [pc, #476]	; (8012a60 <HAL_UART_IRQHandler+0x558>)
 8012882:	4293      	cmp	r3, r2
 8012884:	d01d      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	4a75      	ldr	r2, [pc, #468]	; (8012a64 <HAL_UART_IRQHandler+0x55c>)
 801288e:	4293      	cmp	r3, r2
 8012890:	d017      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a73      	ldr	r2, [pc, #460]	; (8012a68 <HAL_UART_IRQHandler+0x560>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d011      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	4a71      	ldr	r2, [pc, #452]	; (8012a6c <HAL_UART_IRQHandler+0x564>)
 80128a6:	4293      	cmp	r3, r2
 80128a8:	d00b      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4a6f      	ldr	r2, [pc, #444]	; (8012a70 <HAL_UART_IRQHandler+0x568>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d005      	beq.n	80128c2 <HAL_UART_IRQHandler+0x3ba>
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	4a6d      	ldr	r2, [pc, #436]	; (8012a74 <HAL_UART_IRQHandler+0x56c>)
 80128be:	4293      	cmp	r3, r2
 80128c0:	d105      	bne.n	80128ce <HAL_UART_IRQHandler+0x3c6>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	b29b      	uxth	r3, r3
 80128cc:	e004      	b.n	80128d8 <HAL_UART_IRQHandler+0x3d0>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80128dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f000 81a4 	beq.w	8012c2e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80128ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80128f0:	429a      	cmp	r2, r3
 80128f2:	f080 819c 	bcs.w	8012c2e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80128fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012904:	69db      	ldr	r3, [r3, #28]
 8012906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801290a:	f000 8086 	beq.w	8012a1a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012916:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801291a:	e853 3f00 	ldrex	r3, [r3]
 801291e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012922:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801292a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	461a      	mov	r2, r3
 8012934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801293c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012940:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012944:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012948:	e841 2300 	strex	r3, r2, [r1]
 801294c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012950:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012954:	2b00      	cmp	r3, #0
 8012956:	d1da      	bne.n	801290e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	3308      	adds	r3, #8
 801295e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012962:	e853 3f00 	ldrex	r3, [r3]
 8012966:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801296a:	f023 0301 	bic.w	r3, r3, #1
 801296e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	3308      	adds	r3, #8
 8012978:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801297c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012980:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012982:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012984:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012988:	e841 2300 	strex	r3, r2, [r1]
 801298c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801298e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012990:	2b00      	cmp	r3, #0
 8012992:	d1e1      	bne.n	8012958 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	3308      	adds	r3, #8
 801299a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801299c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801299e:	e853 3f00 	ldrex	r3, [r3]
 80129a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80129a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	3308      	adds	r3, #8
 80129b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80129b8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80129ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80129be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80129c0:	e841 2300 	strex	r3, r2, [r1]
 80129c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80129c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d1e3      	bne.n	8012994 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2220      	movs	r2, #32
 80129d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2200      	movs	r2, #0
 80129d8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129e2:	e853 3f00 	ldrex	r3, [r3]
 80129e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80129e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129ea:	f023 0310 	bic.w	r3, r3, #16
 80129ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	461a      	mov	r2, r3
 80129f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80129fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a04:	e841 2300 	strex	r3, r2, [r1]
 8012a08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d1e4      	bne.n	80129da <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7f5 ff47 	bl	80088a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a26:	b29b      	uxth	r3, r3
 8012a28:	1ad3      	subs	r3, r2, r3
 8012a2a:	b29b      	uxth	r3, r3
 8012a2c:	4619      	mov	r1, r3
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 f91c 	bl	8012c6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012a34:	e0fb      	b.n	8012c2e <HAL_UART_IRQHandler+0x726>
 8012a36:	bf00      	nop
 8012a38:	40020010 	.word	0x40020010
 8012a3c:	40020028 	.word	0x40020028
 8012a40:	40020040 	.word	0x40020040
 8012a44:	40020058 	.word	0x40020058
 8012a48:	40020070 	.word	0x40020070
 8012a4c:	40020088 	.word	0x40020088
 8012a50:	400200a0 	.word	0x400200a0
 8012a54:	400200b8 	.word	0x400200b8
 8012a58:	40020410 	.word	0x40020410
 8012a5c:	40020428 	.word	0x40020428
 8012a60:	40020440 	.word	0x40020440
 8012a64:	40020458 	.word	0x40020458
 8012a68:	40020470 	.word	0x40020470
 8012a6c:	40020488 	.word	0x40020488
 8012a70:	400204a0 	.word	0x400204a0
 8012a74:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	1ad3      	subs	r3, r2, r3
 8012a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a92:	b29b      	uxth	r3, r3
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	f000 80cc 	beq.w	8012c32 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8012a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	f000 80c7 	beq.w	8012c32 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aac:	e853 3f00 	ldrex	r3, [r3]
 8012ab0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8012ac8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012acc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ace:	e841 2300 	strex	r3, r2, [r1]
 8012ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d1e4      	bne.n	8012aa4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	3308      	adds	r3, #8
 8012ae0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae4:	e853 3f00 	ldrex	r3, [r3]
 8012ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8012aea:	6a3a      	ldr	r2, [r7, #32]
 8012aec:	4b54      	ldr	r3, [pc, #336]	; (8012c40 <HAL_UART_IRQHandler+0x738>)
 8012aee:	4013      	ands	r3, r2
 8012af0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	3308      	adds	r3, #8
 8012afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012afe:	633a      	str	r2, [r7, #48]	; 0x30
 8012b00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b06:	e841 2300 	strex	r3, r2, [r1]
 8012b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d1e3      	bne.n	8012ada <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2220      	movs	r2, #32
 8012b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2200      	movs	r2, #0
 8012b24:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	e853 3f00 	ldrex	r3, [r3]
 8012b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	f023 0310 	bic.w	r3, r3, #16
 8012b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	461a      	mov	r2, r3
 8012b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012b48:	61fb      	str	r3, [r7, #28]
 8012b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b4c:	69b9      	ldr	r1, [r7, #24]
 8012b4e:	69fa      	ldr	r2, [r7, #28]
 8012b50:	e841 2300 	strex	r3, r2, [r1]
 8012b54:	617b      	str	r3, [r7, #20]
   return(result);
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d1e4      	bne.n	8012b26 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012b60:	4619      	mov	r1, r3
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f000 f882 	bl	8012c6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012b68:	e063      	b.n	8012c32 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d00e      	beq.n	8012b94 <HAL_UART_IRQHandler+0x68c>
 8012b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d008      	beq.n	8012b94 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012b8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f002 f86b 	bl	8014c68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012b92:	e051      	b.n	8012c38 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d014      	beq.n	8012bca <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d105      	bne.n	8012bb8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d008      	beq.n	8012bca <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d03a      	beq.n	8012c36 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	4798      	blx	r3
    }
    return;
 8012bc8:	e035      	b.n	8012c36 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d009      	beq.n	8012bea <HAL_UART_IRQHandler+0x6e2>
 8012bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d003      	beq.n	8012bea <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f001 fbb8 	bl	8014358 <UART_EndTransmit_IT>
    return;
 8012be8:	e026      	b.n	8012c38 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d009      	beq.n	8012c0a <HAL_UART_IRQHandler+0x702>
 8012bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012bfa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d003      	beq.n	8012c0a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f002 f844 	bl	8014c90 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c08:	e016      	b.n	8012c38 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d010      	beq.n	8012c38 <HAL_UART_IRQHandler+0x730>
 8012c16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	da0c      	bge.n	8012c38 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012c1e:	6878      	ldr	r0, [r7, #4]
 8012c20:	f002 f82c 	bl	8014c7c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c24:	e008      	b.n	8012c38 <HAL_UART_IRQHandler+0x730>
      return;
 8012c26:	bf00      	nop
 8012c28:	e006      	b.n	8012c38 <HAL_UART_IRQHandler+0x730>
    return;
 8012c2a:	bf00      	nop
 8012c2c:	e004      	b.n	8012c38 <HAL_UART_IRQHandler+0x730>
      return;
 8012c2e:	bf00      	nop
 8012c30:	e002      	b.n	8012c38 <HAL_UART_IRQHandler+0x730>
      return;
 8012c32:	bf00      	nop
 8012c34:	e000      	b.n	8012c38 <HAL_UART_IRQHandler+0x730>
    return;
 8012c36:	bf00      	nop
  }
}
 8012c38:	37e8      	adds	r7, #232	; 0xe8
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	effffffe 	.word	0xeffffffe

08012c44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8012c44:	b480      	push	{r7}
 8012c46:	b083      	sub	sp, #12
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012c4c:	bf00      	nop
 8012c4e:	370c      	adds	r7, #12
 8012c50:	46bd      	mov	sp, r7
 8012c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c56:	4770      	bx	lr

08012c58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012c60:	bf00      	nop
 8012c62:	370c      	adds	r7, #12
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr

08012c6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012c6c:	b480      	push	{r7}
 8012c6e:	b083      	sub	sp, #12
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
 8012c74:	460b      	mov	r3, r1
 8012c76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012c78:	bf00      	nop
 8012c7a:	370c      	adds	r7, #12
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr

08012c84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012c88:	b092      	sub	sp, #72	; 0x48
 8012c8a:	af00      	add	r7, sp, #0
 8012c8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	689a      	ldr	r2, [r3, #8]
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	691b      	ldr	r3, [r3, #16]
 8012c9c:	431a      	orrs	r2, r3
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	695b      	ldr	r3, [r3, #20]
 8012ca2:	431a      	orrs	r2, r3
 8012ca4:	697b      	ldr	r3, [r7, #20]
 8012ca6:	69db      	ldr	r3, [r3, #28]
 8012ca8:	4313      	orrs	r3, r2
 8012caa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	4bbe      	ldr	r3, [pc, #760]	; (8012fac <UART_SetConfig+0x328>)
 8012cb4:	4013      	ands	r3, r2
 8012cb6:	697a      	ldr	r2, [r7, #20]
 8012cb8:	6812      	ldr	r2, [r2, #0]
 8012cba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012cbc:	430b      	orrs	r3, r1
 8012cbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012cc0:	697b      	ldr	r3, [r7, #20]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	685b      	ldr	r3, [r3, #4]
 8012cc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	68da      	ldr	r2, [r3, #12]
 8012cce:	697b      	ldr	r3, [r7, #20]
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	430a      	orrs	r2, r1
 8012cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	699b      	ldr	r3, [r3, #24]
 8012cda:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	4ab3      	ldr	r2, [pc, #716]	; (8012fb0 <UART_SetConfig+0x32c>)
 8012ce2:	4293      	cmp	r3, r2
 8012ce4:	d004      	beq.n	8012cf0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	6a1b      	ldr	r3, [r3, #32]
 8012cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012cec:	4313      	orrs	r3, r2
 8012cee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012cf0:	697b      	ldr	r3, [r7, #20]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	689a      	ldr	r2, [r3, #8]
 8012cf6:	4baf      	ldr	r3, [pc, #700]	; (8012fb4 <UART_SetConfig+0x330>)
 8012cf8:	4013      	ands	r3, r2
 8012cfa:	697a      	ldr	r2, [r7, #20]
 8012cfc:	6812      	ldr	r2, [r2, #0]
 8012cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012d00:	430b      	orrs	r3, r1
 8012d02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d0a:	f023 010f 	bic.w	r1, r3, #15
 8012d0e:	697b      	ldr	r3, [r7, #20]
 8012d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	430a      	orrs	r2, r1
 8012d18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	4aa6      	ldr	r2, [pc, #664]	; (8012fb8 <UART_SetConfig+0x334>)
 8012d20:	4293      	cmp	r3, r2
 8012d22:	d177      	bne.n	8012e14 <UART_SetConfig+0x190>
 8012d24:	4ba5      	ldr	r3, [pc, #660]	; (8012fbc <UART_SetConfig+0x338>)
 8012d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012d2c:	2b28      	cmp	r3, #40	; 0x28
 8012d2e:	d86d      	bhi.n	8012e0c <UART_SetConfig+0x188>
 8012d30:	a201      	add	r2, pc, #4	; (adr r2, 8012d38 <UART_SetConfig+0xb4>)
 8012d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d36:	bf00      	nop
 8012d38:	08012ddd 	.word	0x08012ddd
 8012d3c:	08012e0d 	.word	0x08012e0d
 8012d40:	08012e0d 	.word	0x08012e0d
 8012d44:	08012e0d 	.word	0x08012e0d
 8012d48:	08012e0d 	.word	0x08012e0d
 8012d4c:	08012e0d 	.word	0x08012e0d
 8012d50:	08012e0d 	.word	0x08012e0d
 8012d54:	08012e0d 	.word	0x08012e0d
 8012d58:	08012de5 	.word	0x08012de5
 8012d5c:	08012e0d 	.word	0x08012e0d
 8012d60:	08012e0d 	.word	0x08012e0d
 8012d64:	08012e0d 	.word	0x08012e0d
 8012d68:	08012e0d 	.word	0x08012e0d
 8012d6c:	08012e0d 	.word	0x08012e0d
 8012d70:	08012e0d 	.word	0x08012e0d
 8012d74:	08012e0d 	.word	0x08012e0d
 8012d78:	08012ded 	.word	0x08012ded
 8012d7c:	08012e0d 	.word	0x08012e0d
 8012d80:	08012e0d 	.word	0x08012e0d
 8012d84:	08012e0d 	.word	0x08012e0d
 8012d88:	08012e0d 	.word	0x08012e0d
 8012d8c:	08012e0d 	.word	0x08012e0d
 8012d90:	08012e0d 	.word	0x08012e0d
 8012d94:	08012e0d 	.word	0x08012e0d
 8012d98:	08012df5 	.word	0x08012df5
 8012d9c:	08012e0d 	.word	0x08012e0d
 8012da0:	08012e0d 	.word	0x08012e0d
 8012da4:	08012e0d 	.word	0x08012e0d
 8012da8:	08012e0d 	.word	0x08012e0d
 8012dac:	08012e0d 	.word	0x08012e0d
 8012db0:	08012e0d 	.word	0x08012e0d
 8012db4:	08012e0d 	.word	0x08012e0d
 8012db8:	08012dfd 	.word	0x08012dfd
 8012dbc:	08012e0d 	.word	0x08012e0d
 8012dc0:	08012e0d 	.word	0x08012e0d
 8012dc4:	08012e0d 	.word	0x08012e0d
 8012dc8:	08012e0d 	.word	0x08012e0d
 8012dcc:	08012e0d 	.word	0x08012e0d
 8012dd0:	08012e0d 	.word	0x08012e0d
 8012dd4:	08012e0d 	.word	0x08012e0d
 8012dd8:	08012e05 	.word	0x08012e05
 8012ddc:	2301      	movs	r3, #1
 8012dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012de2:	e326      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012de4:	2304      	movs	r3, #4
 8012de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dea:	e322      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012dec:	2308      	movs	r3, #8
 8012dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012df2:	e31e      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012df4:	2310      	movs	r3, #16
 8012df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dfa:	e31a      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012dfc:	2320      	movs	r3, #32
 8012dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e02:	e316      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e04:	2340      	movs	r3, #64	; 0x40
 8012e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e0a:	e312      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e0c:	2380      	movs	r3, #128	; 0x80
 8012e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e12:	e30e      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e14:	697b      	ldr	r3, [r7, #20]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	4a69      	ldr	r2, [pc, #420]	; (8012fc0 <UART_SetConfig+0x33c>)
 8012e1a:	4293      	cmp	r3, r2
 8012e1c:	d130      	bne.n	8012e80 <UART_SetConfig+0x1fc>
 8012e1e:	4b67      	ldr	r3, [pc, #412]	; (8012fbc <UART_SetConfig+0x338>)
 8012e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e22:	f003 0307 	and.w	r3, r3, #7
 8012e26:	2b05      	cmp	r3, #5
 8012e28:	d826      	bhi.n	8012e78 <UART_SetConfig+0x1f4>
 8012e2a:	a201      	add	r2, pc, #4	; (adr r2, 8012e30 <UART_SetConfig+0x1ac>)
 8012e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e30:	08012e49 	.word	0x08012e49
 8012e34:	08012e51 	.word	0x08012e51
 8012e38:	08012e59 	.word	0x08012e59
 8012e3c:	08012e61 	.word	0x08012e61
 8012e40:	08012e69 	.word	0x08012e69
 8012e44:	08012e71 	.word	0x08012e71
 8012e48:	2300      	movs	r3, #0
 8012e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e4e:	e2f0      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e50:	2304      	movs	r3, #4
 8012e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e56:	e2ec      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e58:	2308      	movs	r3, #8
 8012e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e5e:	e2e8      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e60:	2310      	movs	r3, #16
 8012e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e66:	e2e4      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e68:	2320      	movs	r3, #32
 8012e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e6e:	e2e0      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e70:	2340      	movs	r3, #64	; 0x40
 8012e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e76:	e2dc      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e78:	2380      	movs	r3, #128	; 0x80
 8012e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e7e:	e2d8      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4a4f      	ldr	r2, [pc, #316]	; (8012fc4 <UART_SetConfig+0x340>)
 8012e86:	4293      	cmp	r3, r2
 8012e88:	d130      	bne.n	8012eec <UART_SetConfig+0x268>
 8012e8a:	4b4c      	ldr	r3, [pc, #304]	; (8012fbc <UART_SetConfig+0x338>)
 8012e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e8e:	f003 0307 	and.w	r3, r3, #7
 8012e92:	2b05      	cmp	r3, #5
 8012e94:	d826      	bhi.n	8012ee4 <UART_SetConfig+0x260>
 8012e96:	a201      	add	r2, pc, #4	; (adr r2, 8012e9c <UART_SetConfig+0x218>)
 8012e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e9c:	08012eb5 	.word	0x08012eb5
 8012ea0:	08012ebd 	.word	0x08012ebd
 8012ea4:	08012ec5 	.word	0x08012ec5
 8012ea8:	08012ecd 	.word	0x08012ecd
 8012eac:	08012ed5 	.word	0x08012ed5
 8012eb0:	08012edd 	.word	0x08012edd
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eba:	e2ba      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012ebc:	2304      	movs	r3, #4
 8012ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ec2:	e2b6      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012ec4:	2308      	movs	r3, #8
 8012ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eca:	e2b2      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012ecc:	2310      	movs	r3, #16
 8012ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ed2:	e2ae      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012ed4:	2320      	movs	r3, #32
 8012ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eda:	e2aa      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012edc:	2340      	movs	r3, #64	; 0x40
 8012ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ee2:	e2a6      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012ee4:	2380      	movs	r3, #128	; 0x80
 8012ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eea:	e2a2      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	4a35      	ldr	r2, [pc, #212]	; (8012fc8 <UART_SetConfig+0x344>)
 8012ef2:	4293      	cmp	r3, r2
 8012ef4:	d130      	bne.n	8012f58 <UART_SetConfig+0x2d4>
 8012ef6:	4b31      	ldr	r3, [pc, #196]	; (8012fbc <UART_SetConfig+0x338>)
 8012ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012efa:	f003 0307 	and.w	r3, r3, #7
 8012efe:	2b05      	cmp	r3, #5
 8012f00:	d826      	bhi.n	8012f50 <UART_SetConfig+0x2cc>
 8012f02:	a201      	add	r2, pc, #4	; (adr r2, 8012f08 <UART_SetConfig+0x284>)
 8012f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f08:	08012f21 	.word	0x08012f21
 8012f0c:	08012f29 	.word	0x08012f29
 8012f10:	08012f31 	.word	0x08012f31
 8012f14:	08012f39 	.word	0x08012f39
 8012f18:	08012f41 	.word	0x08012f41
 8012f1c:	08012f49 	.word	0x08012f49
 8012f20:	2300      	movs	r3, #0
 8012f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f26:	e284      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012f28:	2304      	movs	r3, #4
 8012f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f2e:	e280      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012f30:	2308      	movs	r3, #8
 8012f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f36:	e27c      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012f38:	2310      	movs	r3, #16
 8012f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f3e:	e278      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012f40:	2320      	movs	r3, #32
 8012f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f46:	e274      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012f48:	2340      	movs	r3, #64	; 0x40
 8012f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f4e:	e270      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012f50:	2380      	movs	r3, #128	; 0x80
 8012f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f56:	e26c      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	4a1b      	ldr	r2, [pc, #108]	; (8012fcc <UART_SetConfig+0x348>)
 8012f5e:	4293      	cmp	r3, r2
 8012f60:	d142      	bne.n	8012fe8 <UART_SetConfig+0x364>
 8012f62:	4b16      	ldr	r3, [pc, #88]	; (8012fbc <UART_SetConfig+0x338>)
 8012f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f66:	f003 0307 	and.w	r3, r3, #7
 8012f6a:	2b05      	cmp	r3, #5
 8012f6c:	d838      	bhi.n	8012fe0 <UART_SetConfig+0x35c>
 8012f6e:	a201      	add	r2, pc, #4	; (adr r2, 8012f74 <UART_SetConfig+0x2f0>)
 8012f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f74:	08012f8d 	.word	0x08012f8d
 8012f78:	08012f95 	.word	0x08012f95
 8012f7c:	08012f9d 	.word	0x08012f9d
 8012f80:	08012fa5 	.word	0x08012fa5
 8012f84:	08012fd1 	.word	0x08012fd1
 8012f88:	08012fd9 	.word	0x08012fd9
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f92:	e24e      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012f94:	2304      	movs	r3, #4
 8012f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f9a:	e24a      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012f9c:	2308      	movs	r3, #8
 8012f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fa2:	e246      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012fa4:	2310      	movs	r3, #16
 8012fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012faa:	e242      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012fac:	cfff69f3 	.word	0xcfff69f3
 8012fb0:	58000c00 	.word	0x58000c00
 8012fb4:	11fff4ff 	.word	0x11fff4ff
 8012fb8:	40011000 	.word	0x40011000
 8012fbc:	58024400 	.word	0x58024400
 8012fc0:	40004400 	.word	0x40004400
 8012fc4:	40004800 	.word	0x40004800
 8012fc8:	40004c00 	.word	0x40004c00
 8012fcc:	40005000 	.word	0x40005000
 8012fd0:	2320      	movs	r3, #32
 8012fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fd6:	e22c      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012fd8:	2340      	movs	r3, #64	; 0x40
 8012fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fde:	e228      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012fe0:	2380      	movs	r3, #128	; 0x80
 8012fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fe6:	e224      	b.n	8013432 <UART_SetConfig+0x7ae>
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	4ab1      	ldr	r2, [pc, #708]	; (80132b4 <UART_SetConfig+0x630>)
 8012fee:	4293      	cmp	r3, r2
 8012ff0:	d176      	bne.n	80130e0 <UART_SetConfig+0x45c>
 8012ff2:	4bb1      	ldr	r3, [pc, #708]	; (80132b8 <UART_SetConfig+0x634>)
 8012ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012ffa:	2b28      	cmp	r3, #40	; 0x28
 8012ffc:	d86c      	bhi.n	80130d8 <UART_SetConfig+0x454>
 8012ffe:	a201      	add	r2, pc, #4	; (adr r2, 8013004 <UART_SetConfig+0x380>)
 8013000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013004:	080130a9 	.word	0x080130a9
 8013008:	080130d9 	.word	0x080130d9
 801300c:	080130d9 	.word	0x080130d9
 8013010:	080130d9 	.word	0x080130d9
 8013014:	080130d9 	.word	0x080130d9
 8013018:	080130d9 	.word	0x080130d9
 801301c:	080130d9 	.word	0x080130d9
 8013020:	080130d9 	.word	0x080130d9
 8013024:	080130b1 	.word	0x080130b1
 8013028:	080130d9 	.word	0x080130d9
 801302c:	080130d9 	.word	0x080130d9
 8013030:	080130d9 	.word	0x080130d9
 8013034:	080130d9 	.word	0x080130d9
 8013038:	080130d9 	.word	0x080130d9
 801303c:	080130d9 	.word	0x080130d9
 8013040:	080130d9 	.word	0x080130d9
 8013044:	080130b9 	.word	0x080130b9
 8013048:	080130d9 	.word	0x080130d9
 801304c:	080130d9 	.word	0x080130d9
 8013050:	080130d9 	.word	0x080130d9
 8013054:	080130d9 	.word	0x080130d9
 8013058:	080130d9 	.word	0x080130d9
 801305c:	080130d9 	.word	0x080130d9
 8013060:	080130d9 	.word	0x080130d9
 8013064:	080130c1 	.word	0x080130c1
 8013068:	080130d9 	.word	0x080130d9
 801306c:	080130d9 	.word	0x080130d9
 8013070:	080130d9 	.word	0x080130d9
 8013074:	080130d9 	.word	0x080130d9
 8013078:	080130d9 	.word	0x080130d9
 801307c:	080130d9 	.word	0x080130d9
 8013080:	080130d9 	.word	0x080130d9
 8013084:	080130c9 	.word	0x080130c9
 8013088:	080130d9 	.word	0x080130d9
 801308c:	080130d9 	.word	0x080130d9
 8013090:	080130d9 	.word	0x080130d9
 8013094:	080130d9 	.word	0x080130d9
 8013098:	080130d9 	.word	0x080130d9
 801309c:	080130d9 	.word	0x080130d9
 80130a0:	080130d9 	.word	0x080130d9
 80130a4:	080130d1 	.word	0x080130d1
 80130a8:	2301      	movs	r3, #1
 80130aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ae:	e1c0      	b.n	8013432 <UART_SetConfig+0x7ae>
 80130b0:	2304      	movs	r3, #4
 80130b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130b6:	e1bc      	b.n	8013432 <UART_SetConfig+0x7ae>
 80130b8:	2308      	movs	r3, #8
 80130ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130be:	e1b8      	b.n	8013432 <UART_SetConfig+0x7ae>
 80130c0:	2310      	movs	r3, #16
 80130c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130c6:	e1b4      	b.n	8013432 <UART_SetConfig+0x7ae>
 80130c8:	2320      	movs	r3, #32
 80130ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ce:	e1b0      	b.n	8013432 <UART_SetConfig+0x7ae>
 80130d0:	2340      	movs	r3, #64	; 0x40
 80130d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130d6:	e1ac      	b.n	8013432 <UART_SetConfig+0x7ae>
 80130d8:	2380      	movs	r3, #128	; 0x80
 80130da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130de:	e1a8      	b.n	8013432 <UART_SetConfig+0x7ae>
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4a75      	ldr	r2, [pc, #468]	; (80132bc <UART_SetConfig+0x638>)
 80130e6:	4293      	cmp	r3, r2
 80130e8:	d130      	bne.n	801314c <UART_SetConfig+0x4c8>
 80130ea:	4b73      	ldr	r3, [pc, #460]	; (80132b8 <UART_SetConfig+0x634>)
 80130ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130ee:	f003 0307 	and.w	r3, r3, #7
 80130f2:	2b05      	cmp	r3, #5
 80130f4:	d826      	bhi.n	8013144 <UART_SetConfig+0x4c0>
 80130f6:	a201      	add	r2, pc, #4	; (adr r2, 80130fc <UART_SetConfig+0x478>)
 80130f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130fc:	08013115 	.word	0x08013115
 8013100:	0801311d 	.word	0x0801311d
 8013104:	08013125 	.word	0x08013125
 8013108:	0801312d 	.word	0x0801312d
 801310c:	08013135 	.word	0x08013135
 8013110:	0801313d 	.word	0x0801313d
 8013114:	2300      	movs	r3, #0
 8013116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801311a:	e18a      	b.n	8013432 <UART_SetConfig+0x7ae>
 801311c:	2304      	movs	r3, #4
 801311e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013122:	e186      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013124:	2308      	movs	r3, #8
 8013126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801312a:	e182      	b.n	8013432 <UART_SetConfig+0x7ae>
 801312c:	2310      	movs	r3, #16
 801312e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013132:	e17e      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013134:	2320      	movs	r3, #32
 8013136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801313a:	e17a      	b.n	8013432 <UART_SetConfig+0x7ae>
 801313c:	2340      	movs	r3, #64	; 0x40
 801313e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013142:	e176      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013144:	2380      	movs	r3, #128	; 0x80
 8013146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801314a:	e172      	b.n	8013432 <UART_SetConfig+0x7ae>
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	4a5b      	ldr	r2, [pc, #364]	; (80132c0 <UART_SetConfig+0x63c>)
 8013152:	4293      	cmp	r3, r2
 8013154:	d130      	bne.n	80131b8 <UART_SetConfig+0x534>
 8013156:	4b58      	ldr	r3, [pc, #352]	; (80132b8 <UART_SetConfig+0x634>)
 8013158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801315a:	f003 0307 	and.w	r3, r3, #7
 801315e:	2b05      	cmp	r3, #5
 8013160:	d826      	bhi.n	80131b0 <UART_SetConfig+0x52c>
 8013162:	a201      	add	r2, pc, #4	; (adr r2, 8013168 <UART_SetConfig+0x4e4>)
 8013164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013168:	08013181 	.word	0x08013181
 801316c:	08013189 	.word	0x08013189
 8013170:	08013191 	.word	0x08013191
 8013174:	08013199 	.word	0x08013199
 8013178:	080131a1 	.word	0x080131a1
 801317c:	080131a9 	.word	0x080131a9
 8013180:	2300      	movs	r3, #0
 8013182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013186:	e154      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013188:	2304      	movs	r3, #4
 801318a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801318e:	e150      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013190:	2308      	movs	r3, #8
 8013192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013196:	e14c      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013198:	2310      	movs	r3, #16
 801319a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801319e:	e148      	b.n	8013432 <UART_SetConfig+0x7ae>
 80131a0:	2320      	movs	r3, #32
 80131a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131a6:	e144      	b.n	8013432 <UART_SetConfig+0x7ae>
 80131a8:	2340      	movs	r3, #64	; 0x40
 80131aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ae:	e140      	b.n	8013432 <UART_SetConfig+0x7ae>
 80131b0:	2380      	movs	r3, #128	; 0x80
 80131b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131b6:	e13c      	b.n	8013432 <UART_SetConfig+0x7ae>
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	4a41      	ldr	r2, [pc, #260]	; (80132c4 <UART_SetConfig+0x640>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	f040 8082 	bne.w	80132c8 <UART_SetConfig+0x644>
 80131c4:	4b3c      	ldr	r3, [pc, #240]	; (80132b8 <UART_SetConfig+0x634>)
 80131c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80131cc:	2b28      	cmp	r3, #40	; 0x28
 80131ce:	d86d      	bhi.n	80132ac <UART_SetConfig+0x628>
 80131d0:	a201      	add	r2, pc, #4	; (adr r2, 80131d8 <UART_SetConfig+0x554>)
 80131d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131d6:	bf00      	nop
 80131d8:	0801327d 	.word	0x0801327d
 80131dc:	080132ad 	.word	0x080132ad
 80131e0:	080132ad 	.word	0x080132ad
 80131e4:	080132ad 	.word	0x080132ad
 80131e8:	080132ad 	.word	0x080132ad
 80131ec:	080132ad 	.word	0x080132ad
 80131f0:	080132ad 	.word	0x080132ad
 80131f4:	080132ad 	.word	0x080132ad
 80131f8:	08013285 	.word	0x08013285
 80131fc:	080132ad 	.word	0x080132ad
 8013200:	080132ad 	.word	0x080132ad
 8013204:	080132ad 	.word	0x080132ad
 8013208:	080132ad 	.word	0x080132ad
 801320c:	080132ad 	.word	0x080132ad
 8013210:	080132ad 	.word	0x080132ad
 8013214:	080132ad 	.word	0x080132ad
 8013218:	0801328d 	.word	0x0801328d
 801321c:	080132ad 	.word	0x080132ad
 8013220:	080132ad 	.word	0x080132ad
 8013224:	080132ad 	.word	0x080132ad
 8013228:	080132ad 	.word	0x080132ad
 801322c:	080132ad 	.word	0x080132ad
 8013230:	080132ad 	.word	0x080132ad
 8013234:	080132ad 	.word	0x080132ad
 8013238:	08013295 	.word	0x08013295
 801323c:	080132ad 	.word	0x080132ad
 8013240:	080132ad 	.word	0x080132ad
 8013244:	080132ad 	.word	0x080132ad
 8013248:	080132ad 	.word	0x080132ad
 801324c:	080132ad 	.word	0x080132ad
 8013250:	080132ad 	.word	0x080132ad
 8013254:	080132ad 	.word	0x080132ad
 8013258:	0801329d 	.word	0x0801329d
 801325c:	080132ad 	.word	0x080132ad
 8013260:	080132ad 	.word	0x080132ad
 8013264:	080132ad 	.word	0x080132ad
 8013268:	080132ad 	.word	0x080132ad
 801326c:	080132ad 	.word	0x080132ad
 8013270:	080132ad 	.word	0x080132ad
 8013274:	080132ad 	.word	0x080132ad
 8013278:	080132a5 	.word	0x080132a5
 801327c:	2301      	movs	r3, #1
 801327e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013282:	e0d6      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013284:	2304      	movs	r3, #4
 8013286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801328a:	e0d2      	b.n	8013432 <UART_SetConfig+0x7ae>
 801328c:	2308      	movs	r3, #8
 801328e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013292:	e0ce      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013294:	2310      	movs	r3, #16
 8013296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801329a:	e0ca      	b.n	8013432 <UART_SetConfig+0x7ae>
 801329c:	2320      	movs	r3, #32
 801329e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132a2:	e0c6      	b.n	8013432 <UART_SetConfig+0x7ae>
 80132a4:	2340      	movs	r3, #64	; 0x40
 80132a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132aa:	e0c2      	b.n	8013432 <UART_SetConfig+0x7ae>
 80132ac:	2380      	movs	r3, #128	; 0x80
 80132ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132b2:	e0be      	b.n	8013432 <UART_SetConfig+0x7ae>
 80132b4:	40011400 	.word	0x40011400
 80132b8:	58024400 	.word	0x58024400
 80132bc:	40007800 	.word	0x40007800
 80132c0:	40007c00 	.word	0x40007c00
 80132c4:	40011800 	.word	0x40011800
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4aad      	ldr	r2, [pc, #692]	; (8013584 <UART_SetConfig+0x900>)
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d176      	bne.n	80133c0 <UART_SetConfig+0x73c>
 80132d2:	4bad      	ldr	r3, [pc, #692]	; (8013588 <UART_SetConfig+0x904>)
 80132d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80132da:	2b28      	cmp	r3, #40	; 0x28
 80132dc:	d86c      	bhi.n	80133b8 <UART_SetConfig+0x734>
 80132de:	a201      	add	r2, pc, #4	; (adr r2, 80132e4 <UART_SetConfig+0x660>)
 80132e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132e4:	08013389 	.word	0x08013389
 80132e8:	080133b9 	.word	0x080133b9
 80132ec:	080133b9 	.word	0x080133b9
 80132f0:	080133b9 	.word	0x080133b9
 80132f4:	080133b9 	.word	0x080133b9
 80132f8:	080133b9 	.word	0x080133b9
 80132fc:	080133b9 	.word	0x080133b9
 8013300:	080133b9 	.word	0x080133b9
 8013304:	08013391 	.word	0x08013391
 8013308:	080133b9 	.word	0x080133b9
 801330c:	080133b9 	.word	0x080133b9
 8013310:	080133b9 	.word	0x080133b9
 8013314:	080133b9 	.word	0x080133b9
 8013318:	080133b9 	.word	0x080133b9
 801331c:	080133b9 	.word	0x080133b9
 8013320:	080133b9 	.word	0x080133b9
 8013324:	08013399 	.word	0x08013399
 8013328:	080133b9 	.word	0x080133b9
 801332c:	080133b9 	.word	0x080133b9
 8013330:	080133b9 	.word	0x080133b9
 8013334:	080133b9 	.word	0x080133b9
 8013338:	080133b9 	.word	0x080133b9
 801333c:	080133b9 	.word	0x080133b9
 8013340:	080133b9 	.word	0x080133b9
 8013344:	080133a1 	.word	0x080133a1
 8013348:	080133b9 	.word	0x080133b9
 801334c:	080133b9 	.word	0x080133b9
 8013350:	080133b9 	.word	0x080133b9
 8013354:	080133b9 	.word	0x080133b9
 8013358:	080133b9 	.word	0x080133b9
 801335c:	080133b9 	.word	0x080133b9
 8013360:	080133b9 	.word	0x080133b9
 8013364:	080133a9 	.word	0x080133a9
 8013368:	080133b9 	.word	0x080133b9
 801336c:	080133b9 	.word	0x080133b9
 8013370:	080133b9 	.word	0x080133b9
 8013374:	080133b9 	.word	0x080133b9
 8013378:	080133b9 	.word	0x080133b9
 801337c:	080133b9 	.word	0x080133b9
 8013380:	080133b9 	.word	0x080133b9
 8013384:	080133b1 	.word	0x080133b1
 8013388:	2301      	movs	r3, #1
 801338a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801338e:	e050      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013390:	2304      	movs	r3, #4
 8013392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013396:	e04c      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013398:	2308      	movs	r3, #8
 801339a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801339e:	e048      	b.n	8013432 <UART_SetConfig+0x7ae>
 80133a0:	2310      	movs	r3, #16
 80133a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133a6:	e044      	b.n	8013432 <UART_SetConfig+0x7ae>
 80133a8:	2320      	movs	r3, #32
 80133aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ae:	e040      	b.n	8013432 <UART_SetConfig+0x7ae>
 80133b0:	2340      	movs	r3, #64	; 0x40
 80133b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133b6:	e03c      	b.n	8013432 <UART_SetConfig+0x7ae>
 80133b8:	2380      	movs	r3, #128	; 0x80
 80133ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133be:	e038      	b.n	8013432 <UART_SetConfig+0x7ae>
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	4a71      	ldr	r2, [pc, #452]	; (801358c <UART_SetConfig+0x908>)
 80133c6:	4293      	cmp	r3, r2
 80133c8:	d130      	bne.n	801342c <UART_SetConfig+0x7a8>
 80133ca:	4b6f      	ldr	r3, [pc, #444]	; (8013588 <UART_SetConfig+0x904>)
 80133cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80133ce:	f003 0307 	and.w	r3, r3, #7
 80133d2:	2b05      	cmp	r3, #5
 80133d4:	d826      	bhi.n	8013424 <UART_SetConfig+0x7a0>
 80133d6:	a201      	add	r2, pc, #4	; (adr r2, 80133dc <UART_SetConfig+0x758>)
 80133d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133dc:	080133f5 	.word	0x080133f5
 80133e0:	080133fd 	.word	0x080133fd
 80133e4:	08013405 	.word	0x08013405
 80133e8:	0801340d 	.word	0x0801340d
 80133ec:	08013415 	.word	0x08013415
 80133f0:	0801341d 	.word	0x0801341d
 80133f4:	2302      	movs	r3, #2
 80133f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133fa:	e01a      	b.n	8013432 <UART_SetConfig+0x7ae>
 80133fc:	2304      	movs	r3, #4
 80133fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013402:	e016      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013404:	2308      	movs	r3, #8
 8013406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801340a:	e012      	b.n	8013432 <UART_SetConfig+0x7ae>
 801340c:	2310      	movs	r3, #16
 801340e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013412:	e00e      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013414:	2320      	movs	r3, #32
 8013416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801341a:	e00a      	b.n	8013432 <UART_SetConfig+0x7ae>
 801341c:	2340      	movs	r3, #64	; 0x40
 801341e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013422:	e006      	b.n	8013432 <UART_SetConfig+0x7ae>
 8013424:	2380      	movs	r3, #128	; 0x80
 8013426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801342a:	e002      	b.n	8013432 <UART_SetConfig+0x7ae>
 801342c:	2380      	movs	r3, #128	; 0x80
 801342e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4a55      	ldr	r2, [pc, #340]	; (801358c <UART_SetConfig+0x908>)
 8013438:	4293      	cmp	r3, r2
 801343a:	f040 80f8 	bne.w	801362e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801343e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013442:	2b20      	cmp	r3, #32
 8013444:	dc46      	bgt.n	80134d4 <UART_SetConfig+0x850>
 8013446:	2b02      	cmp	r3, #2
 8013448:	db75      	blt.n	8013536 <UART_SetConfig+0x8b2>
 801344a:	3b02      	subs	r3, #2
 801344c:	2b1e      	cmp	r3, #30
 801344e:	d872      	bhi.n	8013536 <UART_SetConfig+0x8b2>
 8013450:	a201      	add	r2, pc, #4	; (adr r2, 8013458 <UART_SetConfig+0x7d4>)
 8013452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013456:	bf00      	nop
 8013458:	080134db 	.word	0x080134db
 801345c:	08013537 	.word	0x08013537
 8013460:	080134e3 	.word	0x080134e3
 8013464:	08013537 	.word	0x08013537
 8013468:	08013537 	.word	0x08013537
 801346c:	08013537 	.word	0x08013537
 8013470:	080134f3 	.word	0x080134f3
 8013474:	08013537 	.word	0x08013537
 8013478:	08013537 	.word	0x08013537
 801347c:	08013537 	.word	0x08013537
 8013480:	08013537 	.word	0x08013537
 8013484:	08013537 	.word	0x08013537
 8013488:	08013537 	.word	0x08013537
 801348c:	08013537 	.word	0x08013537
 8013490:	08013503 	.word	0x08013503
 8013494:	08013537 	.word	0x08013537
 8013498:	08013537 	.word	0x08013537
 801349c:	08013537 	.word	0x08013537
 80134a0:	08013537 	.word	0x08013537
 80134a4:	08013537 	.word	0x08013537
 80134a8:	08013537 	.word	0x08013537
 80134ac:	08013537 	.word	0x08013537
 80134b0:	08013537 	.word	0x08013537
 80134b4:	08013537 	.word	0x08013537
 80134b8:	08013537 	.word	0x08013537
 80134bc:	08013537 	.word	0x08013537
 80134c0:	08013537 	.word	0x08013537
 80134c4:	08013537 	.word	0x08013537
 80134c8:	08013537 	.word	0x08013537
 80134cc:	08013537 	.word	0x08013537
 80134d0:	08013529 	.word	0x08013529
 80134d4:	2b40      	cmp	r3, #64	; 0x40
 80134d6:	d02a      	beq.n	801352e <UART_SetConfig+0x8aa>
 80134d8:	e02d      	b.n	8013536 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80134da:	f7fb fcdb 	bl	800ee94 <HAL_RCCEx_GetD3PCLK1Freq>
 80134de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80134e0:	e02f      	b.n	8013542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80134e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7fb fcea 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80134ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134f0:	e027      	b.n	8013542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80134f2:	f107 0318 	add.w	r3, r7, #24
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7fb fe36 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80134fc:	69fb      	ldr	r3, [r7, #28]
 80134fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013500:	e01f      	b.n	8013542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013502:	4b21      	ldr	r3, [pc, #132]	; (8013588 <UART_SetConfig+0x904>)
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f003 0320 	and.w	r3, r3, #32
 801350a:	2b00      	cmp	r3, #0
 801350c:	d009      	beq.n	8013522 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801350e:	4b1e      	ldr	r3, [pc, #120]	; (8013588 <UART_SetConfig+0x904>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	08db      	lsrs	r3, r3, #3
 8013514:	f003 0303 	and.w	r3, r3, #3
 8013518:	4a1d      	ldr	r2, [pc, #116]	; (8013590 <UART_SetConfig+0x90c>)
 801351a:	fa22 f303 	lsr.w	r3, r2, r3
 801351e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013520:	e00f      	b.n	8013542 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013522:	4b1b      	ldr	r3, [pc, #108]	; (8013590 <UART_SetConfig+0x90c>)
 8013524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013526:	e00c      	b.n	8013542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013528:	4b1a      	ldr	r3, [pc, #104]	; (8013594 <UART_SetConfig+0x910>)
 801352a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801352c:	e009      	b.n	8013542 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013534:	e005      	b.n	8013542 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013536:	2300      	movs	r3, #0
 8013538:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801353a:	2301      	movs	r3, #1
 801353c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013540:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013544:	2b00      	cmp	r3, #0
 8013546:	f000 81ee 	beq.w	8013926 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801354e:	4a12      	ldr	r2, [pc, #72]	; (8013598 <UART_SetConfig+0x914>)
 8013550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013554:	461a      	mov	r2, r3
 8013556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013558:	fbb3 f3f2 	udiv	r3, r3, r2
 801355c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	685a      	ldr	r2, [r3, #4]
 8013562:	4613      	mov	r3, r2
 8013564:	005b      	lsls	r3, r3, #1
 8013566:	4413      	add	r3, r2
 8013568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801356a:	429a      	cmp	r2, r3
 801356c:	d305      	bcc.n	801357a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	685b      	ldr	r3, [r3, #4]
 8013572:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013576:	429a      	cmp	r2, r3
 8013578:	d910      	bls.n	801359c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801357a:	2301      	movs	r3, #1
 801357c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013580:	e1d1      	b.n	8013926 <UART_SetConfig+0xca2>
 8013582:	bf00      	nop
 8013584:	40011c00 	.word	0x40011c00
 8013588:	58024400 	.word	0x58024400
 801358c:	58000c00 	.word	0x58000c00
 8013590:	03d09000 	.word	0x03d09000
 8013594:	003d0900 	.word	0x003d0900
 8013598:	08015bd0 	.word	0x08015bd0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801359c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801359e:	2200      	movs	r2, #0
 80135a0:	60bb      	str	r3, [r7, #8]
 80135a2:	60fa      	str	r2, [r7, #12]
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135a8:	4ac0      	ldr	r2, [pc, #768]	; (80138ac <UART_SetConfig+0xc28>)
 80135aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	2200      	movs	r2, #0
 80135b2:	603b      	str	r3, [r7, #0]
 80135b4:	607a      	str	r2, [r7, #4]
 80135b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80135ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80135be:	f7ec fea7 	bl	8000310 <__aeabi_uldivmod>
 80135c2:	4602      	mov	r2, r0
 80135c4:	460b      	mov	r3, r1
 80135c6:	4610      	mov	r0, r2
 80135c8:	4619      	mov	r1, r3
 80135ca:	f04f 0200 	mov.w	r2, #0
 80135ce:	f04f 0300 	mov.w	r3, #0
 80135d2:	020b      	lsls	r3, r1, #8
 80135d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80135d8:	0202      	lsls	r2, r0, #8
 80135da:	6979      	ldr	r1, [r7, #20]
 80135dc:	6849      	ldr	r1, [r1, #4]
 80135de:	0849      	lsrs	r1, r1, #1
 80135e0:	2000      	movs	r0, #0
 80135e2:	460c      	mov	r4, r1
 80135e4:	4605      	mov	r5, r0
 80135e6:	eb12 0804 	adds.w	r8, r2, r4
 80135ea:	eb43 0905 	adc.w	r9, r3, r5
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	2200      	movs	r2, #0
 80135f4:	469a      	mov	sl, r3
 80135f6:	4693      	mov	fp, r2
 80135f8:	4652      	mov	r2, sl
 80135fa:	465b      	mov	r3, fp
 80135fc:	4640      	mov	r0, r8
 80135fe:	4649      	mov	r1, r9
 8013600:	f7ec fe86 	bl	8000310 <__aeabi_uldivmod>
 8013604:	4602      	mov	r2, r0
 8013606:	460b      	mov	r3, r1
 8013608:	4613      	mov	r3, r2
 801360a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801360c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801360e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013612:	d308      	bcc.n	8013626 <UART_SetConfig+0x9a2>
 8013614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801361a:	d204      	bcs.n	8013626 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013622:	60da      	str	r2, [r3, #12]
 8013624:	e17f      	b.n	8013926 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8013626:	2301      	movs	r3, #1
 8013628:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801362c:	e17b      	b.n	8013926 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	69db      	ldr	r3, [r3, #28]
 8013632:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013636:	f040 80bd 	bne.w	80137b4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801363a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801363e:	2b20      	cmp	r3, #32
 8013640:	dc48      	bgt.n	80136d4 <UART_SetConfig+0xa50>
 8013642:	2b00      	cmp	r3, #0
 8013644:	db7b      	blt.n	801373e <UART_SetConfig+0xaba>
 8013646:	2b20      	cmp	r3, #32
 8013648:	d879      	bhi.n	801373e <UART_SetConfig+0xaba>
 801364a:	a201      	add	r2, pc, #4	; (adr r2, 8013650 <UART_SetConfig+0x9cc>)
 801364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013650:	080136db 	.word	0x080136db
 8013654:	080136e3 	.word	0x080136e3
 8013658:	0801373f 	.word	0x0801373f
 801365c:	0801373f 	.word	0x0801373f
 8013660:	080136eb 	.word	0x080136eb
 8013664:	0801373f 	.word	0x0801373f
 8013668:	0801373f 	.word	0x0801373f
 801366c:	0801373f 	.word	0x0801373f
 8013670:	080136fb 	.word	0x080136fb
 8013674:	0801373f 	.word	0x0801373f
 8013678:	0801373f 	.word	0x0801373f
 801367c:	0801373f 	.word	0x0801373f
 8013680:	0801373f 	.word	0x0801373f
 8013684:	0801373f 	.word	0x0801373f
 8013688:	0801373f 	.word	0x0801373f
 801368c:	0801373f 	.word	0x0801373f
 8013690:	0801370b 	.word	0x0801370b
 8013694:	0801373f 	.word	0x0801373f
 8013698:	0801373f 	.word	0x0801373f
 801369c:	0801373f 	.word	0x0801373f
 80136a0:	0801373f 	.word	0x0801373f
 80136a4:	0801373f 	.word	0x0801373f
 80136a8:	0801373f 	.word	0x0801373f
 80136ac:	0801373f 	.word	0x0801373f
 80136b0:	0801373f 	.word	0x0801373f
 80136b4:	0801373f 	.word	0x0801373f
 80136b8:	0801373f 	.word	0x0801373f
 80136bc:	0801373f 	.word	0x0801373f
 80136c0:	0801373f 	.word	0x0801373f
 80136c4:	0801373f 	.word	0x0801373f
 80136c8:	0801373f 	.word	0x0801373f
 80136cc:	0801373f 	.word	0x0801373f
 80136d0:	08013731 	.word	0x08013731
 80136d4:	2b40      	cmp	r3, #64	; 0x40
 80136d6:	d02e      	beq.n	8013736 <UART_SetConfig+0xab2>
 80136d8:	e031      	b.n	801373e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80136da:	f7fa f88f 	bl	800d7fc <HAL_RCC_GetPCLK1Freq>
 80136de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80136e0:	e033      	b.n	801374a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80136e2:	f7fa f8a1 	bl	800d828 <HAL_RCC_GetPCLK2Freq>
 80136e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80136e8:	e02f      	b.n	801374a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80136ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7fb fbe6 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80136f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136f8:	e027      	b.n	801374a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80136fa:	f107 0318 	add.w	r3, r7, #24
 80136fe:	4618      	mov	r0, r3
 8013700:	f7fb fd32 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013708:	e01f      	b.n	801374a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801370a:	4b69      	ldr	r3, [pc, #420]	; (80138b0 <UART_SetConfig+0xc2c>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	f003 0320 	and.w	r3, r3, #32
 8013712:	2b00      	cmp	r3, #0
 8013714:	d009      	beq.n	801372a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013716:	4b66      	ldr	r3, [pc, #408]	; (80138b0 <UART_SetConfig+0xc2c>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	08db      	lsrs	r3, r3, #3
 801371c:	f003 0303 	and.w	r3, r3, #3
 8013720:	4a64      	ldr	r2, [pc, #400]	; (80138b4 <UART_SetConfig+0xc30>)
 8013722:	fa22 f303 	lsr.w	r3, r2, r3
 8013726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013728:	e00f      	b.n	801374a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801372a:	4b62      	ldr	r3, [pc, #392]	; (80138b4 <UART_SetConfig+0xc30>)
 801372c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801372e:	e00c      	b.n	801374a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013730:	4b61      	ldr	r3, [pc, #388]	; (80138b8 <UART_SetConfig+0xc34>)
 8013732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013734:	e009      	b.n	801374a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801373a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801373c:	e005      	b.n	801374a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801373e:	2300      	movs	r3, #0
 8013740:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013742:	2301      	movs	r3, #1
 8013744:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801374a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801374c:	2b00      	cmp	r3, #0
 801374e:	f000 80ea 	beq.w	8013926 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013756:	4a55      	ldr	r2, [pc, #340]	; (80138ac <UART_SetConfig+0xc28>)
 8013758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801375c:	461a      	mov	r2, r3
 801375e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013760:	fbb3 f3f2 	udiv	r3, r3, r2
 8013764:	005a      	lsls	r2, r3, #1
 8013766:	697b      	ldr	r3, [r7, #20]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	085b      	lsrs	r3, r3, #1
 801376c:	441a      	add	r2, r3
 801376e:	697b      	ldr	r3, [r7, #20]
 8013770:	685b      	ldr	r3, [r3, #4]
 8013772:	fbb2 f3f3 	udiv	r3, r2, r3
 8013776:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801377a:	2b0f      	cmp	r3, #15
 801377c:	d916      	bls.n	80137ac <UART_SetConfig+0xb28>
 801377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013784:	d212      	bcs.n	80137ac <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013788:	b29b      	uxth	r3, r3
 801378a:	f023 030f 	bic.w	r3, r3, #15
 801378e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013792:	085b      	lsrs	r3, r3, #1
 8013794:	b29b      	uxth	r3, r3
 8013796:	f003 0307 	and.w	r3, r3, #7
 801379a:	b29a      	uxth	r2, r3
 801379c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801379e:	4313      	orrs	r3, r2
 80137a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80137a8:	60da      	str	r2, [r3, #12]
 80137aa:	e0bc      	b.n	8013926 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80137ac:	2301      	movs	r3, #1
 80137ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80137b2:	e0b8      	b.n	8013926 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80137b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80137b8:	2b20      	cmp	r3, #32
 80137ba:	dc4b      	bgt.n	8013854 <UART_SetConfig+0xbd0>
 80137bc:	2b00      	cmp	r3, #0
 80137be:	f2c0 8087 	blt.w	80138d0 <UART_SetConfig+0xc4c>
 80137c2:	2b20      	cmp	r3, #32
 80137c4:	f200 8084 	bhi.w	80138d0 <UART_SetConfig+0xc4c>
 80137c8:	a201      	add	r2, pc, #4	; (adr r2, 80137d0 <UART_SetConfig+0xb4c>)
 80137ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137ce:	bf00      	nop
 80137d0:	0801385b 	.word	0x0801385b
 80137d4:	08013863 	.word	0x08013863
 80137d8:	080138d1 	.word	0x080138d1
 80137dc:	080138d1 	.word	0x080138d1
 80137e0:	0801386b 	.word	0x0801386b
 80137e4:	080138d1 	.word	0x080138d1
 80137e8:	080138d1 	.word	0x080138d1
 80137ec:	080138d1 	.word	0x080138d1
 80137f0:	0801387b 	.word	0x0801387b
 80137f4:	080138d1 	.word	0x080138d1
 80137f8:	080138d1 	.word	0x080138d1
 80137fc:	080138d1 	.word	0x080138d1
 8013800:	080138d1 	.word	0x080138d1
 8013804:	080138d1 	.word	0x080138d1
 8013808:	080138d1 	.word	0x080138d1
 801380c:	080138d1 	.word	0x080138d1
 8013810:	0801388b 	.word	0x0801388b
 8013814:	080138d1 	.word	0x080138d1
 8013818:	080138d1 	.word	0x080138d1
 801381c:	080138d1 	.word	0x080138d1
 8013820:	080138d1 	.word	0x080138d1
 8013824:	080138d1 	.word	0x080138d1
 8013828:	080138d1 	.word	0x080138d1
 801382c:	080138d1 	.word	0x080138d1
 8013830:	080138d1 	.word	0x080138d1
 8013834:	080138d1 	.word	0x080138d1
 8013838:	080138d1 	.word	0x080138d1
 801383c:	080138d1 	.word	0x080138d1
 8013840:	080138d1 	.word	0x080138d1
 8013844:	080138d1 	.word	0x080138d1
 8013848:	080138d1 	.word	0x080138d1
 801384c:	080138d1 	.word	0x080138d1
 8013850:	080138c3 	.word	0x080138c3
 8013854:	2b40      	cmp	r3, #64	; 0x40
 8013856:	d037      	beq.n	80138c8 <UART_SetConfig+0xc44>
 8013858:	e03a      	b.n	80138d0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801385a:	f7f9 ffcf 	bl	800d7fc <HAL_RCC_GetPCLK1Freq>
 801385e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013860:	e03c      	b.n	80138dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013862:	f7f9 ffe1 	bl	800d828 <HAL_RCC_GetPCLK2Freq>
 8013866:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013868:	e038      	b.n	80138dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801386a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801386e:	4618      	mov	r0, r3
 8013870:	f7fb fb26 	bl	800eec0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013878:	e030      	b.n	80138dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801387a:	f107 0318 	add.w	r3, r7, #24
 801387e:	4618      	mov	r0, r3
 8013880:	f7fb fc72 	bl	800f168 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013888:	e028      	b.n	80138dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801388a:	4b09      	ldr	r3, [pc, #36]	; (80138b0 <UART_SetConfig+0xc2c>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	f003 0320 	and.w	r3, r3, #32
 8013892:	2b00      	cmp	r3, #0
 8013894:	d012      	beq.n	80138bc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013896:	4b06      	ldr	r3, [pc, #24]	; (80138b0 <UART_SetConfig+0xc2c>)
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	08db      	lsrs	r3, r3, #3
 801389c:	f003 0303 	and.w	r3, r3, #3
 80138a0:	4a04      	ldr	r2, [pc, #16]	; (80138b4 <UART_SetConfig+0xc30>)
 80138a2:	fa22 f303 	lsr.w	r3, r2, r3
 80138a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80138a8:	e018      	b.n	80138dc <UART_SetConfig+0xc58>
 80138aa:	bf00      	nop
 80138ac:	08015bd0 	.word	0x08015bd0
 80138b0:	58024400 	.word	0x58024400
 80138b4:	03d09000 	.word	0x03d09000
 80138b8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80138bc:	4b24      	ldr	r3, [pc, #144]	; (8013950 <UART_SetConfig+0xccc>)
 80138be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80138c0:	e00c      	b.n	80138dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80138c2:	4b24      	ldr	r3, [pc, #144]	; (8013954 <UART_SetConfig+0xcd0>)
 80138c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80138c6:	e009      	b.n	80138dc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80138c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80138cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80138ce:	e005      	b.n	80138dc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80138d0:	2300      	movs	r3, #0
 80138d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80138d4:	2301      	movs	r3, #1
 80138d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80138da:	bf00      	nop
    }

    if (pclk != 0U)
 80138dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d021      	beq.n	8013926 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138e6:	4a1c      	ldr	r2, [pc, #112]	; (8013958 <UART_SetConfig+0xcd4>)
 80138e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80138ec:	461a      	mov	r2, r3
 80138ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	085b      	lsrs	r3, r3, #1
 80138fa:	441a      	add	r2, r3
 80138fc:	697b      	ldr	r3, [r7, #20]
 80138fe:	685b      	ldr	r3, [r3, #4]
 8013900:	fbb2 f3f3 	udiv	r3, r2, r3
 8013904:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013908:	2b0f      	cmp	r3, #15
 801390a:	d909      	bls.n	8013920 <UART_SetConfig+0xc9c>
 801390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801390e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013912:	d205      	bcs.n	8013920 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013916:	b29a      	uxth	r2, r3
 8013918:	697b      	ldr	r3, [r7, #20]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	60da      	str	r2, [r3, #12]
 801391e:	e002      	b.n	8013926 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013920:	2301      	movs	r3, #1
 8013922:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	2201      	movs	r2, #1
 801392a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	2201      	movs	r2, #1
 8013932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	2200      	movs	r2, #0
 801393a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	2200      	movs	r2, #0
 8013940:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8013942:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013946:	4618      	mov	r0, r3
 8013948:	3748      	adds	r7, #72	; 0x48
 801394a:	46bd      	mov	sp, r7
 801394c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013950:	03d09000 	.word	0x03d09000
 8013954:	003d0900 	.word	0x003d0900
 8013958:	08015bd0 	.word	0x08015bd0

0801395c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801395c:	b480      	push	{r7}
 801395e:	b083      	sub	sp, #12
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013968:	f003 0301 	and.w	r3, r3, #1
 801396c:	2b00      	cmp	r3, #0
 801396e:	d00a      	beq.n	8013986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	685b      	ldr	r3, [r3, #4]
 8013976:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	430a      	orrs	r2, r1
 8013984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801398a:	f003 0302 	and.w	r3, r3, #2
 801398e:	2b00      	cmp	r3, #0
 8013990:	d00a      	beq.n	80139a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	685b      	ldr	r3, [r3, #4]
 8013998:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	430a      	orrs	r2, r1
 80139a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139ac:	f003 0304 	and.w	r3, r3, #4
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d00a      	beq.n	80139ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	685b      	ldr	r3, [r3, #4]
 80139ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	430a      	orrs	r2, r1
 80139c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139ce:	f003 0308 	and.w	r3, r3, #8
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d00a      	beq.n	80139ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	685b      	ldr	r3, [r3, #4]
 80139dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	430a      	orrs	r2, r1
 80139ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139f0:	f003 0310 	and.w	r3, r3, #16
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d00a      	beq.n	8013a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	689b      	ldr	r3, [r3, #8]
 80139fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	430a      	orrs	r2, r1
 8013a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a12:	f003 0320 	and.w	r3, r3, #32
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d00a      	beq.n	8013a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	689b      	ldr	r3, [r3, #8]
 8013a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	430a      	orrs	r2, r1
 8013a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d01a      	beq.n	8013a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	685b      	ldr	r3, [r3, #4]
 8013a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	430a      	orrs	r2, r1
 8013a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013a5a:	d10a      	bne.n	8013a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	685b      	ldr	r3, [r3, #4]
 8013a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	430a      	orrs	r2, r1
 8013a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d00a      	beq.n	8013a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	685b      	ldr	r3, [r3, #4]
 8013a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	430a      	orrs	r2, r1
 8013a92:	605a      	str	r2, [r3, #4]
  }
}
 8013a94:	bf00      	nop
 8013a96:	370c      	adds	r7, #12
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9e:	4770      	bx	lr

08013aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	b086      	sub	sp, #24
 8013aa4:	af02      	add	r7, sp, #8
 8013aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013ab0:	f7f1 ff14 	bl	80058dc <HAL_GetTick>
 8013ab4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	f003 0308 	and.w	r3, r3, #8
 8013ac0:	2b08      	cmp	r3, #8
 8013ac2:	d10e      	bne.n	8013ae2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013ac8:	9300      	str	r3, [sp, #0]
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2200      	movs	r2, #0
 8013ace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f000 f82f 	bl	8013b36 <UART_WaitOnFlagUntilTimeout>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d001      	beq.n	8013ae2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013ade:	2303      	movs	r3, #3
 8013ae0:	e025      	b.n	8013b2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f003 0304 	and.w	r3, r3, #4
 8013aec:	2b04      	cmp	r3, #4
 8013aee:	d10e      	bne.n	8013b0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013af4:	9300      	str	r3, [sp, #0]
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	2200      	movs	r2, #0
 8013afa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f000 f819 	bl	8013b36 <UART_WaitOnFlagUntilTimeout>
 8013b04:	4603      	mov	r3, r0
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d001      	beq.n	8013b0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b0a:	2303      	movs	r3, #3
 8013b0c:	e00f      	b.n	8013b2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	2220      	movs	r2, #32
 8013b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2220      	movs	r2, #32
 8013b1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2200      	movs	r2, #0
 8013b22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2200      	movs	r2, #0
 8013b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	3710      	adds	r7, #16
 8013b32:	46bd      	mov	sp, r7
 8013b34:	bd80      	pop	{r7, pc}

08013b36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013b36:	b580      	push	{r7, lr}
 8013b38:	b09c      	sub	sp, #112	; 0x70
 8013b3a:	af00      	add	r7, sp, #0
 8013b3c:	60f8      	str	r0, [r7, #12]
 8013b3e:	60b9      	str	r1, [r7, #8]
 8013b40:	603b      	str	r3, [r7, #0]
 8013b42:	4613      	mov	r3, r2
 8013b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013b46:	e0a9      	b.n	8013c9c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b4e:	f000 80a5 	beq.w	8013c9c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013b52:	f7f1 fec3 	bl	80058dc <HAL_GetTick>
 8013b56:	4602      	mov	r2, r0
 8013b58:	683b      	ldr	r3, [r7, #0]
 8013b5a:	1ad3      	subs	r3, r2, r3
 8013b5c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d302      	bcc.n	8013b68 <UART_WaitOnFlagUntilTimeout+0x32>
 8013b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d140      	bne.n	8013bea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b70:	e853 3f00 	ldrex	r3, [r3]
 8013b74:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b78:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013b7c:	667b      	str	r3, [r7, #100]	; 0x64
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	461a      	mov	r2, r3
 8013b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013b88:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013b8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013b8e:	e841 2300 	strex	r3, r2, [r1]
 8013b92:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d1e6      	bne.n	8013b68 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	3308      	adds	r3, #8
 8013ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ba4:	e853 3f00 	ldrex	r3, [r3]
 8013ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bac:	f023 0301 	bic.w	r3, r3, #1
 8013bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	3308      	adds	r3, #8
 8013bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013bba:	64ba      	str	r2, [r7, #72]	; 0x48
 8013bbc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013bc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013bc2:	e841 2300 	strex	r3, r2, [r1]
 8013bc6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013bc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d1e5      	bne.n	8013b9a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2220      	movs	r2, #32
 8013bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	2220      	movs	r2, #32
 8013bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	2200      	movs	r2, #0
 8013be2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8013be6:	2303      	movs	r3, #3
 8013be8:	e069      	b.n	8013cbe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	f003 0304 	and.w	r3, r3, #4
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d051      	beq.n	8013c9c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	69db      	ldr	r3, [r3, #28]
 8013bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c06:	d149      	bne.n	8013c9c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c10:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1a:	e853 3f00 	ldrex	r3, [r3]
 8013c1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013c26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c30:	637b      	str	r3, [r7, #52]	; 0x34
 8013c32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c38:	e841 2300 	strex	r3, r2, [r1]
 8013c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d1e6      	bne.n	8013c12 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	3308      	adds	r3, #8
 8013c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c4c:	697b      	ldr	r3, [r7, #20]
 8013c4e:	e853 3f00 	ldrex	r3, [r3]
 8013c52:	613b      	str	r3, [r7, #16]
   return(result);
 8013c54:	693b      	ldr	r3, [r7, #16]
 8013c56:	f023 0301 	bic.w	r3, r3, #1
 8013c5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	3308      	adds	r3, #8
 8013c62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013c64:	623a      	str	r2, [r7, #32]
 8013c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c68:	69f9      	ldr	r1, [r7, #28]
 8013c6a:	6a3a      	ldr	r2, [r7, #32]
 8013c6c:	e841 2300 	strex	r3, r2, [r1]
 8013c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8013c72:	69bb      	ldr	r3, [r7, #24]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d1e5      	bne.n	8013c44 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	2220      	movs	r2, #32
 8013c7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2220      	movs	r2, #32
 8013c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	2220      	movs	r2, #32
 8013c8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	2200      	movs	r2, #0
 8013c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8013c98:	2303      	movs	r3, #3
 8013c9a:	e010      	b.n	8013cbe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	69da      	ldr	r2, [r3, #28]
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	4013      	ands	r3, r2
 8013ca6:	68ba      	ldr	r2, [r7, #8]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	bf0c      	ite	eq
 8013cac:	2301      	moveq	r3, #1
 8013cae:	2300      	movne	r3, #0
 8013cb0:	b2db      	uxtb	r3, r3
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	79fb      	ldrb	r3, [r7, #7]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	f43f af46 	beq.w	8013b48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3770      	adds	r7, #112	; 0x70
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
	...

08013cc8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013cc8:	b480      	push	{r7}
 8013cca:	b0a3      	sub	sp, #140	; 0x8c
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	4613      	mov	r3, r2
 8013cd4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	88fa      	ldrh	r2, [r7, #6]
 8013ce0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	88fa      	ldrh	r2, [r7, #6]
 8013ce8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	2200      	movs	r2, #0
 8013cf0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	689b      	ldr	r3, [r3, #8]
 8013cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013cfa:	d10e      	bne.n	8013d1a <UART_Start_Receive_IT+0x52>
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	691b      	ldr	r3, [r3, #16]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d105      	bne.n	8013d10 <UART_Start_Receive_IT+0x48>
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013d0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d0e:	e02d      	b.n	8013d6c <UART_Start_Receive_IT+0xa4>
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	22ff      	movs	r2, #255	; 0xff
 8013d14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d18:	e028      	b.n	8013d6c <UART_Start_Receive_IT+0xa4>
 8013d1a:	68fb      	ldr	r3, [r7, #12]
 8013d1c:	689b      	ldr	r3, [r3, #8]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d10d      	bne.n	8013d3e <UART_Start_Receive_IT+0x76>
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	691b      	ldr	r3, [r3, #16]
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d104      	bne.n	8013d34 <UART_Start_Receive_IT+0x6c>
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	22ff      	movs	r2, #255	; 0xff
 8013d2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d32:	e01b      	b.n	8013d6c <UART_Start_Receive_IT+0xa4>
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	227f      	movs	r2, #127	; 0x7f
 8013d38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d3c:	e016      	b.n	8013d6c <UART_Start_Receive_IT+0xa4>
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	689b      	ldr	r3, [r3, #8]
 8013d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013d46:	d10d      	bne.n	8013d64 <UART_Start_Receive_IT+0x9c>
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	691b      	ldr	r3, [r3, #16]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d104      	bne.n	8013d5a <UART_Start_Receive_IT+0x92>
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	227f      	movs	r2, #127	; 0x7f
 8013d54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d58:	e008      	b.n	8013d6c <UART_Start_Receive_IT+0xa4>
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	223f      	movs	r2, #63	; 0x3f
 8013d5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013d62:	e003      	b.n	8013d6c <UART_Start_Receive_IT+0xa4>
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	2200      	movs	r2, #0
 8013d68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	2222      	movs	r2, #34	; 0x22
 8013d78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	3308      	adds	r3, #8
 8013d82:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013d86:	e853 3f00 	ldrex	r3, [r3]
 8013d8a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013d8e:	f043 0301 	orr.w	r3, r3, #1
 8013d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	3308      	adds	r3, #8
 8013d9c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013da0:	673a      	str	r2, [r7, #112]	; 0x70
 8013da2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013da4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013da6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013da8:	e841 2300 	strex	r3, r2, [r1]
 8013dac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8013dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d1e3      	bne.n	8013d7c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013db4:	68fb      	ldr	r3, [r7, #12]
 8013db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013dbc:	d153      	bne.n	8013e66 <UART_Start_Receive_IT+0x19e>
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013dc4:	88fa      	ldrh	r2, [r7, #6]
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d34d      	bcc.n	8013e66 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	689b      	ldr	r3, [r3, #8]
 8013dce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013dd2:	d107      	bne.n	8013de4 <UART_Start_Receive_IT+0x11c>
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	691b      	ldr	r3, [r3, #16]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d103      	bne.n	8013de4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	4a4b      	ldr	r2, [pc, #300]	; (8013f0c <UART_Start_Receive_IT+0x244>)
 8013de0:	671a      	str	r2, [r3, #112]	; 0x70
 8013de2:	e002      	b.n	8013dea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	4a4a      	ldr	r2, [pc, #296]	; (8013f10 <UART_Start_Receive_IT+0x248>)
 8013de8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	2200      	movs	r2, #0
 8013dee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	691b      	ldr	r3, [r3, #16]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d01a      	beq.n	8013e30 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e02:	e853 3f00 	ldrex	r3, [r3]
 8013e06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	461a      	mov	r2, r3
 8013e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013e1e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013e22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013e24:	e841 2300 	strex	r3, r2, [r1]
 8013e28:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d1e4      	bne.n	8013dfa <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	3308      	adds	r3, #8
 8013e36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e3a:	e853 3f00 	ldrex	r3, [r3]
 8013e3e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	3308      	adds	r3, #8
 8013e4e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013e50:	64ba      	str	r2, [r7, #72]	; 0x48
 8013e52:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e54:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e58:	e841 2300 	strex	r3, r2, [r1]
 8013e5c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d1e5      	bne.n	8013e30 <UART_Start_Receive_IT+0x168>
 8013e64:	e04a      	b.n	8013efc <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	689b      	ldr	r3, [r3, #8]
 8013e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e6e:	d107      	bne.n	8013e80 <UART_Start_Receive_IT+0x1b8>
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	691b      	ldr	r3, [r3, #16]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d103      	bne.n	8013e80 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	4a26      	ldr	r2, [pc, #152]	; (8013f14 <UART_Start_Receive_IT+0x24c>)
 8013e7c:	671a      	str	r2, [r3, #112]	; 0x70
 8013e7e:	e002      	b.n	8013e86 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	4a25      	ldr	r2, [pc, #148]	; (8013f18 <UART_Start_Receive_IT+0x250>)
 8013e84:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	691b      	ldr	r3, [r3, #16]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d019      	beq.n	8013eca <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e9e:	e853 3f00 	ldrex	r3, [r3]
 8013ea2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013eaa:	677b      	str	r3, [r7, #116]	; 0x74
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	461a      	mov	r2, r3
 8013eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8013eb6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013eba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ebc:	e841 2300 	strex	r3, r2, [r1]
 8013ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d1e6      	bne.n	8013e96 <UART_Start_Receive_IT+0x1ce>
 8013ec8:	e018      	b.n	8013efc <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ed0:	697b      	ldr	r3, [r7, #20]
 8013ed2:	e853 3f00 	ldrex	r3, [r3]
 8013ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8013ed8:	693b      	ldr	r3, [r7, #16]
 8013eda:	f043 0320 	orr.w	r3, r3, #32
 8013ede:	67bb      	str	r3, [r7, #120]	; 0x78
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	461a      	mov	r2, r3
 8013ee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013ee8:	623b      	str	r3, [r7, #32]
 8013eea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013eec:	69f9      	ldr	r1, [r7, #28]
 8013eee:	6a3a      	ldr	r2, [r7, #32]
 8013ef0:	e841 2300 	strex	r3, r2, [r1]
 8013ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8013ef6:	69bb      	ldr	r3, [r7, #24]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1e6      	bne.n	8013eca <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8013efc:	2300      	movs	r3, #0
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	378c      	adds	r7, #140	; 0x8c
 8013f02:	46bd      	mov	sp, r7
 8013f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f08:	4770      	bx	lr
 8013f0a:	bf00      	nop
 8013f0c:	08014969 	.word	0x08014969
 8013f10:	08014671 	.word	0x08014671
 8013f14:	0801450f 	.word	0x0801450f
 8013f18:	080143af 	.word	0x080143af

08013f1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b095      	sub	sp, #84	; 0x54
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f2c:	e853 3f00 	ldrex	r3, [r3]
 8013f30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013f38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	461a      	mov	r2, r3
 8013f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f42:	643b      	str	r3, [r7, #64]	; 0x40
 8013f44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f4a:	e841 2300 	strex	r3, r2, [r1]
 8013f4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d1e6      	bne.n	8013f24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	3308      	adds	r3, #8
 8013f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f5e:	6a3b      	ldr	r3, [r7, #32]
 8013f60:	e853 3f00 	ldrex	r3, [r3]
 8013f64:	61fb      	str	r3, [r7, #28]
   return(result);
 8013f66:	69fa      	ldr	r2, [r7, #28]
 8013f68:	4b1e      	ldr	r3, [pc, #120]	; (8013fe4 <UART_EndRxTransfer+0xc8>)
 8013f6a:	4013      	ands	r3, r2
 8013f6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	3308      	adds	r3, #8
 8013f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013f78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f7e:	e841 2300 	strex	r3, r2, [r1]
 8013f82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d1e5      	bne.n	8013f56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f8e:	2b01      	cmp	r3, #1
 8013f90:	d118      	bne.n	8013fc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f98:	68fb      	ldr	r3, [r7, #12]
 8013f9a:	e853 3f00 	ldrex	r3, [r3]
 8013f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013fa0:	68bb      	ldr	r3, [r7, #8]
 8013fa2:	f023 0310 	bic.w	r3, r3, #16
 8013fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	461a      	mov	r2, r3
 8013fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fb0:	61bb      	str	r3, [r7, #24]
 8013fb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fb4:	6979      	ldr	r1, [r7, #20]
 8013fb6:	69ba      	ldr	r2, [r7, #24]
 8013fb8:	e841 2300 	strex	r3, r2, [r1]
 8013fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8013fbe:	693b      	ldr	r3, [r7, #16]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d1e6      	bne.n	8013f92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2220      	movs	r2, #32
 8013fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	671a      	str	r2, [r3, #112]	; 0x70
}
 8013fd8:	bf00      	nop
 8013fda:	3754      	adds	r7, #84	; 0x54
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe2:	4770      	bx	lr
 8013fe4:	effffffe 	.word	0xeffffffe

08013fe8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b084      	sub	sp, #16
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ff4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	2200      	movs	r2, #0
 8014002:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014006:	68f8      	ldr	r0, [r7, #12]
 8014008:	f7fe fe26 	bl	8012c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801400c:	bf00      	nop
 801400e:	3710      	adds	r7, #16
 8014010:	46bd      	mov	sp, r7
 8014012:	bd80      	pop	{r7, pc}

08014014 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014014:	b480      	push	{r7}
 8014016:	b08f      	sub	sp, #60	; 0x3c
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014022:	2b21      	cmp	r3, #33	; 0x21
 8014024:	d14c      	bne.n	80140c0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801402c:	b29b      	uxth	r3, r3
 801402e:	2b00      	cmp	r3, #0
 8014030:	d132      	bne.n	8014098 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014038:	6a3b      	ldr	r3, [r7, #32]
 801403a:	e853 3f00 	ldrex	r3, [r3]
 801403e:	61fb      	str	r3, [r7, #28]
   return(result);
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014046:	637b      	str	r3, [r7, #52]	; 0x34
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	461a      	mov	r2, r3
 801404e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014052:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014054:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014056:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014058:	e841 2300 	strex	r3, r2, [r1]
 801405c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1e6      	bne.n	8014032 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	e853 3f00 	ldrex	r3, [r3]
 8014070:	60bb      	str	r3, [r7, #8]
   return(result);
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014078:	633b      	str	r3, [r7, #48]	; 0x30
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	461a      	mov	r2, r3
 8014080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014082:	61bb      	str	r3, [r7, #24]
 8014084:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014086:	6979      	ldr	r1, [r7, #20]
 8014088:	69ba      	ldr	r2, [r7, #24]
 801408a:	e841 2300 	strex	r3, r2, [r1]
 801408e:	613b      	str	r3, [r7, #16]
   return(result);
 8014090:	693b      	ldr	r3, [r7, #16]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d1e6      	bne.n	8014064 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8014096:	e013      	b.n	80140c0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801409c:	781a      	ldrb	r2, [r3, #0]
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80140a8:	1c5a      	adds	r2, r3, #1
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	3b01      	subs	r3, #1
 80140b8:	b29a      	uxth	r2, r3
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80140c0:	bf00      	nop
 80140c2:	373c      	adds	r7, #60	; 0x3c
 80140c4:	46bd      	mov	sp, r7
 80140c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ca:	4770      	bx	lr

080140cc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80140cc:	b480      	push	{r7}
 80140ce:	b091      	sub	sp, #68	; 0x44
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80140da:	2b21      	cmp	r3, #33	; 0x21
 80140dc:	d151      	bne.n	8014182 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80140e4:	b29b      	uxth	r3, r3
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d132      	bne.n	8014150 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f2:	e853 3f00 	ldrex	r3, [r3]
 80140f6:	623b      	str	r3, [r7, #32]
   return(result);
 80140f8:	6a3b      	ldr	r3, [r7, #32]
 80140fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80140fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	461a      	mov	r2, r3
 8014106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014108:	633b      	str	r3, [r7, #48]	; 0x30
 801410a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801410c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801410e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014110:	e841 2300 	strex	r3, r2, [r1]
 8014114:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014118:	2b00      	cmp	r3, #0
 801411a:	d1e6      	bne.n	80140ea <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014122:	693b      	ldr	r3, [r7, #16]
 8014124:	e853 3f00 	ldrex	r3, [r3]
 8014128:	60fb      	str	r3, [r7, #12]
   return(result);
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014130:	637b      	str	r3, [r7, #52]	; 0x34
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	461a      	mov	r2, r3
 8014138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801413a:	61fb      	str	r3, [r7, #28]
 801413c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801413e:	69b9      	ldr	r1, [r7, #24]
 8014140:	69fa      	ldr	r2, [r7, #28]
 8014142:	e841 2300 	strex	r3, r2, [r1]
 8014146:	617b      	str	r3, [r7, #20]
   return(result);
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d1e6      	bne.n	801411c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801414e:	e018      	b.n	8014182 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014154:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8014156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	461a      	mov	r2, r3
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014164:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801416a:	1c9a      	adds	r2, r3, #2
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014176:	b29b      	uxth	r3, r3
 8014178:	3b01      	subs	r3, #1
 801417a:	b29a      	uxth	r2, r3
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8014182:	bf00      	nop
 8014184:	3744      	adds	r7, #68	; 0x44
 8014186:	46bd      	mov	sp, r7
 8014188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418c:	4770      	bx	lr

0801418e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801418e:	b480      	push	{r7}
 8014190:	b091      	sub	sp, #68	; 0x44
 8014192:	af00      	add	r7, sp, #0
 8014194:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801419c:	2b21      	cmp	r3, #33	; 0x21
 801419e:	d160      	bne.n	8014262 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80141a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80141a8:	e057      	b.n	801425a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80141b0:	b29b      	uxth	r3, r3
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d133      	bne.n	801421e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	3308      	adds	r3, #8
 80141bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c0:	e853 3f00 	ldrex	r3, [r3]
 80141c4:	623b      	str	r3, [r7, #32]
   return(result);
 80141c6:	6a3b      	ldr	r3, [r7, #32]
 80141c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80141cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	3308      	adds	r3, #8
 80141d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141d6:	633a      	str	r2, [r7, #48]	; 0x30
 80141d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80141dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141de:	e841 2300 	strex	r3, r2, [r1]
 80141e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80141e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d1e5      	bne.n	80141b6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	e853 3f00 	ldrex	r3, [r3]
 80141f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141fe:	637b      	str	r3, [r7, #52]	; 0x34
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	461a      	mov	r2, r3
 8014206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014208:	61fb      	str	r3, [r7, #28]
 801420a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801420c:	69b9      	ldr	r1, [r7, #24]
 801420e:	69fa      	ldr	r2, [r7, #28]
 8014210:	e841 2300 	strex	r3, r2, [r1]
 8014214:	617b      	str	r3, [r7, #20]
   return(result);
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	2b00      	cmp	r3, #0
 801421a:	d1e6      	bne.n	80141ea <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801421c:	e021      	b.n	8014262 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	69db      	ldr	r3, [r3, #28]
 8014224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014228:	2b00      	cmp	r3, #0
 801422a:	d013      	beq.n	8014254 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014230:	781a      	ldrb	r2, [r3, #0]
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801423c:	1c5a      	adds	r2, r3, #1
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014248:	b29b      	uxth	r3, r3
 801424a:	3b01      	subs	r3, #1
 801424c:	b29a      	uxth	r2, r3
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014254:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014256:	3b01      	subs	r3, #1
 8014258:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801425a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801425c:	2b00      	cmp	r3, #0
 801425e:	d1a4      	bne.n	80141aa <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8014260:	e7ff      	b.n	8014262 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8014262:	bf00      	nop
 8014264:	3744      	adds	r7, #68	; 0x44
 8014266:	46bd      	mov	sp, r7
 8014268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801426c:	4770      	bx	lr

0801426e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801426e:	b480      	push	{r7}
 8014270:	b091      	sub	sp, #68	; 0x44
 8014272:	af00      	add	r7, sp, #0
 8014274:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801427c:	2b21      	cmp	r3, #33	; 0x21
 801427e:	d165      	bne.n	801434c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014286:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014288:	e05c      	b.n	8014344 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014290:	b29b      	uxth	r3, r3
 8014292:	2b00      	cmp	r3, #0
 8014294:	d133      	bne.n	80142fe <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	3308      	adds	r3, #8
 801429c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801429e:	6a3b      	ldr	r3, [r7, #32]
 80142a0:	e853 3f00 	ldrex	r3, [r3]
 80142a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80142ac:	637b      	str	r3, [r7, #52]	; 0x34
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	3308      	adds	r3, #8
 80142b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80142b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80142bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80142be:	e841 2300 	strex	r3, r2, [r1]
 80142c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80142c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d1e5      	bne.n	8014296 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	e853 3f00 	ldrex	r3, [r3]
 80142d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142de:	633b      	str	r3, [r7, #48]	; 0x30
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	681b      	ldr	r3, [r3, #0]
 80142e4:	461a      	mov	r2, r3
 80142e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e8:	61bb      	str	r3, [r7, #24]
 80142ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142ec:	6979      	ldr	r1, [r7, #20]
 80142ee:	69ba      	ldr	r2, [r7, #24]
 80142f0:	e841 2300 	strex	r3, r2, [r1]
 80142f4:	613b      	str	r3, [r7, #16]
   return(result);
 80142f6:	693b      	ldr	r3, [r7, #16]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d1e6      	bne.n	80142ca <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80142fc:	e026      	b.n	801434c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	69db      	ldr	r3, [r3, #28]
 8014304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014308:	2b00      	cmp	r3, #0
 801430a:	d018      	beq.n	801433e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014310:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8014312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014314:	881b      	ldrh	r3, [r3, #0]
 8014316:	461a      	mov	r2, r3
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014320:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014326:	1c9a      	adds	r2, r3, #2
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014332:	b29b      	uxth	r3, r3
 8014334:	3b01      	subs	r3, #1
 8014336:	b29a      	uxth	r2, r3
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801433e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014340:	3b01      	subs	r3, #1
 8014342:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014344:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014346:	2b00      	cmp	r3, #0
 8014348:	d19f      	bne.n	801428a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801434a:	e7ff      	b.n	801434c <UART_TxISR_16BIT_FIFOEN+0xde>
 801434c:	bf00      	nop
 801434e:	3744      	adds	r7, #68	; 0x44
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b088      	sub	sp, #32
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	e853 3f00 	ldrex	r3, [r3]
 801436c:	60bb      	str	r3, [r7, #8]
   return(result);
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014374:	61fb      	str	r3, [r7, #28]
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	461a      	mov	r2, r3
 801437c:	69fb      	ldr	r3, [r7, #28]
 801437e:	61bb      	str	r3, [r7, #24]
 8014380:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014382:	6979      	ldr	r1, [r7, #20]
 8014384:	69ba      	ldr	r2, [r7, #24]
 8014386:	e841 2300 	strex	r3, r2, [r1]
 801438a:	613b      	str	r3, [r7, #16]
   return(result);
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d1e6      	bne.n	8014360 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2220      	movs	r2, #32
 8014396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	2200      	movs	r2, #0
 801439e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80143a0:	6878      	ldr	r0, [r7, #4]
 80143a2:	f7fe fc4f 	bl	8012c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80143a6:	bf00      	nop
 80143a8:	3720      	adds	r7, #32
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}

080143ae <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80143ae:	b580      	push	{r7, lr}
 80143b0:	b096      	sub	sp, #88	; 0x58
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80143bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143c6:	2b22      	cmp	r3, #34	; 0x22
 80143c8:	f040 8095 	bne.w	80144f6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143d2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80143d6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80143da:	b2d9      	uxtb	r1, r3
 80143dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80143e0:	b2da      	uxtb	r2, r3
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143e6:	400a      	ands	r2, r1
 80143e8:	b2d2      	uxtb	r2, r2
 80143ea:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80143f0:	1c5a      	adds	r2, r3, #1
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80143fc:	b29b      	uxth	r3, r3
 80143fe:	3b01      	subs	r3, #1
 8014400:	b29a      	uxth	r2, r3
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801440e:	b29b      	uxth	r3, r3
 8014410:	2b00      	cmp	r3, #0
 8014412:	d178      	bne.n	8014506 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801441c:	e853 3f00 	ldrex	r3, [r3]
 8014420:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014428:	653b      	str	r3, [r7, #80]	; 0x50
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	461a      	mov	r2, r3
 8014430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014432:	647b      	str	r3, [r7, #68]	; 0x44
 8014434:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014436:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014438:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801443a:	e841 2300 	strex	r3, r2, [r1]
 801443e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014442:	2b00      	cmp	r3, #0
 8014444:	d1e6      	bne.n	8014414 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	3308      	adds	r3, #8
 801444c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014450:	e853 3f00 	ldrex	r3, [r3]
 8014454:	623b      	str	r3, [r7, #32]
   return(result);
 8014456:	6a3b      	ldr	r3, [r7, #32]
 8014458:	f023 0301 	bic.w	r3, r3, #1
 801445c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	3308      	adds	r3, #8
 8014464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014466:	633a      	str	r2, [r7, #48]	; 0x30
 8014468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801446a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801446c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801446e:	e841 2300 	strex	r3, r2, [r1]
 8014472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014476:	2b00      	cmp	r3, #0
 8014478:	d1e5      	bne.n	8014446 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2220      	movs	r2, #32
 801447e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2200      	movs	r2, #0
 8014486:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801448c:	2b01      	cmp	r3, #1
 801448e:	d12e      	bne.n	80144ee <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2200      	movs	r2, #0
 8014494:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	e853 3f00 	ldrex	r3, [r3]
 80144a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	f023 0310 	bic.w	r3, r3, #16
 80144aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	461a      	mov	r2, r3
 80144b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144b4:	61fb      	str	r3, [r7, #28]
 80144b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144b8:	69b9      	ldr	r1, [r7, #24]
 80144ba:	69fa      	ldr	r2, [r7, #28]
 80144bc:	e841 2300 	strex	r3, r2, [r1]
 80144c0:	617b      	str	r3, [r7, #20]
   return(result);
 80144c2:	697b      	ldr	r3, [r7, #20]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d1e6      	bne.n	8014496 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	69db      	ldr	r3, [r3, #28]
 80144ce:	f003 0310 	and.w	r3, r3, #16
 80144d2:	2b10      	cmp	r3, #16
 80144d4:	d103      	bne.n	80144de <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2210      	movs	r2, #16
 80144dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80144e4:	4619      	mov	r1, r3
 80144e6:	6878      	ldr	r0, [r7, #4]
 80144e8:	f7fe fbc0 	bl	8012c6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80144ec:	e00b      	b.n	8014506 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	f7ee fc46 	bl	8002d80 <HAL_UART_RxCpltCallback>
}
 80144f4:	e007      	b.n	8014506 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	699a      	ldr	r2, [r3, #24]
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	f042 0208 	orr.w	r2, r2, #8
 8014504:	619a      	str	r2, [r3, #24]
}
 8014506:	bf00      	nop
 8014508:	3758      	adds	r7, #88	; 0x58
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}

0801450e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801450e:	b580      	push	{r7, lr}
 8014510:	b096      	sub	sp, #88	; 0x58
 8014512:	af00      	add	r7, sp, #0
 8014514:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801451c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014526:	2b22      	cmp	r3, #34	; 0x22
 8014528:	f040 8095 	bne.w	8014656 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014532:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801453a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801453c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8014540:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014544:	4013      	ands	r3, r2
 8014546:	b29a      	uxth	r2, r3
 8014548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801454a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014550:	1c9a      	adds	r2, r3, #2
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801455c:	b29b      	uxth	r3, r3
 801455e:	3b01      	subs	r3, #1
 8014560:	b29a      	uxth	r2, r3
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801456e:	b29b      	uxth	r3, r3
 8014570:	2b00      	cmp	r3, #0
 8014572:	d178      	bne.n	8014666 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014574:	687b      	ldr	r3, [r7, #4]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801457a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801457c:	e853 3f00 	ldrex	r3, [r3]
 8014580:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014584:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014588:	64fb      	str	r3, [r7, #76]	; 0x4c
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	461a      	mov	r2, r3
 8014590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014592:	643b      	str	r3, [r7, #64]	; 0x40
 8014594:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014596:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014598:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801459a:	e841 2300 	strex	r3, r2, [r1]
 801459e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80145a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d1e6      	bne.n	8014574 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	3308      	adds	r3, #8
 80145ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145ae:	6a3b      	ldr	r3, [r7, #32]
 80145b0:	e853 3f00 	ldrex	r3, [r3]
 80145b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80145b6:	69fb      	ldr	r3, [r7, #28]
 80145b8:	f023 0301 	bic.w	r3, r3, #1
 80145bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	3308      	adds	r3, #8
 80145c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80145c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80145ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80145cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145ce:	e841 2300 	strex	r3, r2, [r1]
 80145d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80145d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d1e5      	bne.n	80145a6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2220      	movs	r2, #32
 80145de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2200      	movs	r2, #0
 80145e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145ec:	2b01      	cmp	r3, #1
 80145ee:	d12e      	bne.n	801464e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2200      	movs	r2, #0
 80145f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	e853 3f00 	ldrex	r3, [r3]
 8014602:	60bb      	str	r3, [r7, #8]
   return(result);
 8014604:	68bb      	ldr	r3, [r7, #8]
 8014606:	f023 0310 	bic.w	r3, r3, #16
 801460a:	647b      	str	r3, [r7, #68]	; 0x44
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	461a      	mov	r2, r3
 8014612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014614:	61bb      	str	r3, [r7, #24]
 8014616:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014618:	6979      	ldr	r1, [r7, #20]
 801461a:	69ba      	ldr	r2, [r7, #24]
 801461c:	e841 2300 	strex	r3, r2, [r1]
 8014620:	613b      	str	r3, [r7, #16]
   return(result);
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d1e6      	bne.n	80145f6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	69db      	ldr	r3, [r3, #28]
 801462e:	f003 0310 	and.w	r3, r3, #16
 8014632:	2b10      	cmp	r3, #16
 8014634:	d103      	bne.n	801463e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	2210      	movs	r2, #16
 801463c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014644:	4619      	mov	r1, r3
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f7fe fb10 	bl	8012c6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801464c:	e00b      	b.n	8014666 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f7ee fb96 	bl	8002d80 <HAL_UART_RxCpltCallback>
}
 8014654:	e007      	b.n	8014666 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	699a      	ldr	r2, [r3, #24]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	f042 0208 	orr.w	r2, r2, #8
 8014664:	619a      	str	r2, [r3, #24]
}
 8014666:	bf00      	nop
 8014668:	3758      	adds	r7, #88	; 0x58
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
	...

08014670 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b0a6      	sub	sp, #152	; 0x98
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801467e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	681b      	ldr	r3, [r3, #0]
 8014686:	69db      	ldr	r3, [r3, #28]
 8014688:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80146a6:	2b22      	cmp	r3, #34	; 0x22
 80146a8:	f040 814d 	bne.w	8014946 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80146b2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80146b6:	e0f4      	b.n	80148a2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146be:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80146c2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80146c6:	b2d9      	uxtb	r1, r3
 80146c8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80146cc:	b2da      	uxtb	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146d2:	400a      	ands	r2, r1
 80146d4:	b2d2      	uxtb	r2, r2
 80146d6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80146dc:	1c5a      	adds	r2, r3, #1
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	3b01      	subs	r3, #1
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	69db      	ldr	r3, [r3, #28]
 80146fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80146fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014702:	f003 0307 	and.w	r3, r3, #7
 8014706:	2b00      	cmp	r3, #0
 8014708:	d053      	beq.n	80147b2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801470a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801470e:	f003 0301 	and.w	r3, r3, #1
 8014712:	2b00      	cmp	r3, #0
 8014714:	d011      	beq.n	801473a <UART_RxISR_8BIT_FIFOEN+0xca>
 8014716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801471e:	2b00      	cmp	r3, #0
 8014720:	d00b      	beq.n	801473a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	2201      	movs	r2, #1
 8014728:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014730:	f043 0201 	orr.w	r2, r3, #1
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801473a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801473e:	f003 0302 	and.w	r3, r3, #2
 8014742:	2b00      	cmp	r3, #0
 8014744:	d011      	beq.n	801476a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8014746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801474a:	f003 0301 	and.w	r3, r3, #1
 801474e:	2b00      	cmp	r3, #0
 8014750:	d00b      	beq.n	801476a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	2202      	movs	r2, #2
 8014758:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014760:	f043 0204 	orr.w	r2, r3, #4
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801476a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801476e:	f003 0304 	and.w	r3, r3, #4
 8014772:	2b00      	cmp	r3, #0
 8014774:	d011      	beq.n	801479a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8014776:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801477a:	f003 0301 	and.w	r3, r3, #1
 801477e:	2b00      	cmp	r3, #0
 8014780:	d00b      	beq.n	801479a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	2204      	movs	r2, #4
 8014788:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014790:	f043 0202 	orr.w	r2, r3, #2
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d006      	beq.n	80147b2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80147a4:	6878      	ldr	r0, [r7, #4]
 80147a6:	f7fe fa57 	bl	8012c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2200      	movs	r2, #0
 80147ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d171      	bne.n	80148a2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80147c6:	e853 3f00 	ldrex	r3, [r3]
 80147ca:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80147cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80147ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80147d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	461a      	mov	r2, r3
 80147dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80147e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80147e2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147e4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80147e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80147e8:	e841 2300 	strex	r3, r2, [r1]
 80147ec:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80147ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d1e4      	bne.n	80147be <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	3308      	adds	r3, #8
 80147fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80147fe:	e853 3f00 	ldrex	r3, [r3]
 8014802:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8014804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014806:	4b56      	ldr	r3, [pc, #344]	; (8014960 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8014808:	4013      	ands	r3, r2
 801480a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	3308      	adds	r3, #8
 8014812:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014814:	657a      	str	r2, [r7, #84]	; 0x54
 8014816:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014818:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801481a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801481c:	e841 2300 	strex	r3, r2, [r1]
 8014820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014824:	2b00      	cmp	r3, #0
 8014826:	d1e5      	bne.n	80147f4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2220      	movs	r2, #32
 801482c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2200      	movs	r2, #0
 8014834:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801483a:	2b01      	cmp	r3, #1
 801483c:	d12e      	bne.n	801489c <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2200      	movs	r2, #0
 8014842:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801484c:	e853 3f00 	ldrex	r3, [r3]
 8014850:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014854:	f023 0310 	bic.w	r3, r3, #16
 8014858:	67bb      	str	r3, [r7, #120]	; 0x78
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	461a      	mov	r2, r3
 8014860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014862:	643b      	str	r3, [r7, #64]	; 0x40
 8014864:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014866:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801486a:	e841 2300 	strex	r3, r2, [r1]
 801486e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014872:	2b00      	cmp	r3, #0
 8014874:	d1e6      	bne.n	8014844 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	69db      	ldr	r3, [r3, #28]
 801487c:	f003 0310 	and.w	r3, r3, #16
 8014880:	2b10      	cmp	r3, #16
 8014882:	d103      	bne.n	801488c <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	2210      	movs	r2, #16
 801488a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014892:	4619      	mov	r1, r3
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f7fe f9e9 	bl	8012c6c <HAL_UARTEx_RxEventCallback>
 801489a:	e002      	b.n	80148a2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	f7ee fa6f 	bl	8002d80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80148a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d006      	beq.n	80148b8 <UART_RxISR_8BIT_FIFOEN+0x248>
 80148aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80148ae:	f003 0320 	and.w	r3, r3, #32
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	f47f af00 	bne.w	80146b8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80148be:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80148c2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d045      	beq.n	8014956 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80148d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80148d4:	429a      	cmp	r2, r3
 80148d6:	d23e      	bcs.n	8014956 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	3308      	adds	r3, #8
 80148de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148e0:	6a3b      	ldr	r3, [r7, #32]
 80148e2:	e853 3f00 	ldrex	r3, [r3]
 80148e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80148ee:	673b      	str	r3, [r7, #112]	; 0x70
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	3308      	adds	r3, #8
 80148f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80148f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80148fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80148fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014900:	e841 2300 	strex	r3, r2, [r1]
 8014904:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014908:	2b00      	cmp	r3, #0
 801490a:	d1e5      	bne.n	80148d8 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	4a15      	ldr	r2, [pc, #84]	; (8014964 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8014910:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	e853 3f00 	ldrex	r3, [r3]
 801491e:	60bb      	str	r3, [r7, #8]
   return(result);
 8014920:	68bb      	ldr	r3, [r7, #8]
 8014922:	f043 0320 	orr.w	r3, r3, #32
 8014926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	461a      	mov	r2, r3
 801492e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014930:	61bb      	str	r3, [r7, #24]
 8014932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014934:	6979      	ldr	r1, [r7, #20]
 8014936:	69ba      	ldr	r2, [r7, #24]
 8014938:	e841 2300 	strex	r3, r2, [r1]
 801493c:	613b      	str	r3, [r7, #16]
   return(result);
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d1e6      	bne.n	8014912 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014944:	e007      	b.n	8014956 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	699a      	ldr	r2, [r3, #24]
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	f042 0208 	orr.w	r2, r2, #8
 8014954:	619a      	str	r2, [r3, #24]
}
 8014956:	bf00      	nop
 8014958:	3798      	adds	r7, #152	; 0x98
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}
 801495e:	bf00      	nop
 8014960:	effffffe 	.word	0xeffffffe
 8014964:	080143af 	.word	0x080143af

08014968 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b0a8      	sub	sp, #160	; 0xa0
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014976:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	69db      	ldr	r3, [r3, #28]
 8014980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	689b      	ldr	r3, [r3, #8]
 8014994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801499e:	2b22      	cmp	r3, #34	; 0x22
 80149a0:	f040 8151 	bne.w	8014c46 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80149aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80149ae:	e0f8      	b.n	8014ba2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149b6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80149c2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80149c6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80149ca:	4013      	ands	r3, r2
 80149cc:	b29a      	uxth	r2, r3
 80149ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80149d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80149d8:	1c9a      	adds	r2, r3, #2
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80149e4:	b29b      	uxth	r3, r3
 80149e6:	3b01      	subs	r3, #1
 80149e8:	b29a      	uxth	r2, r3
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	69db      	ldr	r3, [r3, #28]
 80149f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80149fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80149fe:	f003 0307 	and.w	r3, r3, #7
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d053      	beq.n	8014aae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014a0a:	f003 0301 	and.w	r3, r3, #1
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d011      	beq.n	8014a36 <UART_RxISR_16BIT_FIFOEN+0xce>
 8014a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d00b      	beq.n	8014a36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	2201      	movs	r2, #1
 8014a24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a2c:	f043 0201 	orr.w	r2, r3, #1
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014a36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014a3a:	f003 0302 	and.w	r3, r3, #2
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d011      	beq.n	8014a66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8014a42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014a46:	f003 0301 	and.w	r3, r3, #1
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d00b      	beq.n	8014a66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	2202      	movs	r2, #2
 8014a54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a5c:	f043 0204 	orr.w	r2, r3, #4
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014a66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014a6a:	f003 0304 	and.w	r3, r3, #4
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d011      	beq.n	8014a96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8014a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014a76:	f003 0301 	and.w	r3, r3, #1
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00b      	beq.n	8014a96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	2204      	movs	r2, #4
 8014a84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a8c:	f043 0202 	orr.w	r2, r3, #2
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d006      	beq.n	8014aae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014aa0:	6878      	ldr	r0, [r7, #4]
 8014aa2:	f7fe f8d9 	bl	8012c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d173      	bne.n	8014ba2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014ac2:	e853 3f00 	ldrex	r3, [r3]
 8014ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014ac8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014aca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014ace:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014adc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014ade:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ae0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014ae2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014ae4:	e841 2300 	strex	r3, r2, [r1]
 8014ae8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014aea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d1e4      	bne.n	8014aba <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	3308      	adds	r3, #8
 8014af6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014af8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014afa:	e853 3f00 	ldrex	r3, [r3]
 8014afe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b02:	4b57      	ldr	r3, [pc, #348]	; (8014c60 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8014b04:	4013      	ands	r3, r2
 8014b06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	3308      	adds	r3, #8
 8014b10:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014b14:	65ba      	str	r2, [r7, #88]	; 0x58
 8014b16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014b1c:	e841 2300 	strex	r3, r2, [r1]
 8014b20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d1e3      	bne.n	8014af0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	2220      	movs	r2, #32
 8014b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b3a:	2b01      	cmp	r3, #1
 8014b3c:	d12e      	bne.n	8014b9c <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2200      	movs	r2, #0
 8014b42:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b4c:	e853 3f00 	ldrex	r3, [r3]
 8014b50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b54:	f023 0310 	bic.w	r3, r3, #16
 8014b58:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	461a      	mov	r2, r3
 8014b60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014b62:	647b      	str	r3, [r7, #68]	; 0x44
 8014b64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014b68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b6a:	e841 2300 	strex	r3, r2, [r1]
 8014b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d1e6      	bne.n	8014b44 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	69db      	ldr	r3, [r3, #28]
 8014b7c:	f003 0310 	and.w	r3, r3, #16
 8014b80:	2b10      	cmp	r3, #16
 8014b82:	d103      	bne.n	8014b8c <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	2210      	movs	r2, #16
 8014b8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014b92:	4619      	mov	r1, r3
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f7fe f869 	bl	8012c6c <HAL_UARTEx_RxEventCallback>
 8014b9a:	e002      	b.n	8014ba2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f7ee f8ef 	bl	8002d80 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8014ba2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d006      	beq.n	8014bb8 <UART_RxISR_16BIT_FIFOEN+0x250>
 8014baa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014bae:	f003 0320 	and.w	r3, r3, #32
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	f47f aefc 	bne.w	80149b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014bbe:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8014bc2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d045      	beq.n	8014c56 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014bd0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d23e      	bcs.n	8014c56 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	3308      	adds	r3, #8
 8014bde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014be2:	e853 3f00 	ldrex	r3, [r3]
 8014be6:	623b      	str	r3, [r7, #32]
   return(result);
 8014be8:	6a3b      	ldr	r3, [r7, #32]
 8014bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014bee:	677b      	str	r3, [r7, #116]	; 0x74
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	3308      	adds	r3, #8
 8014bf6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014bf8:	633a      	str	r2, [r7, #48]	; 0x30
 8014bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c00:	e841 2300 	strex	r3, r2, [r1]
 8014c04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d1e5      	bne.n	8014bd8 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	4a15      	ldr	r2, [pc, #84]	; (8014c64 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8014c10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	e853 3f00 	ldrex	r3, [r3]
 8014c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f043 0320 	orr.w	r3, r3, #32
 8014c26:	673b      	str	r3, [r7, #112]	; 0x70
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	461a      	mov	r2, r3
 8014c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c30:	61fb      	str	r3, [r7, #28]
 8014c32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c34:	69b9      	ldr	r1, [r7, #24]
 8014c36:	69fa      	ldr	r2, [r7, #28]
 8014c38:	e841 2300 	strex	r3, r2, [r1]
 8014c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d1e6      	bne.n	8014c12 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014c44:	e007      	b.n	8014c56 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	699a      	ldr	r2, [r3, #24]
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	f042 0208 	orr.w	r2, r2, #8
 8014c54:	619a      	str	r2, [r3, #24]
}
 8014c56:	bf00      	nop
 8014c58:	37a0      	adds	r7, #160	; 0xa0
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	effffffe 	.word	0xeffffffe
 8014c64:	0801450f 	.word	0x0801450f

08014c68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014c68:	b480      	push	{r7}
 8014c6a:	b083      	sub	sp, #12
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014c70:	bf00      	nop
 8014c72:	370c      	adds	r7, #12
 8014c74:	46bd      	mov	sp, r7
 8014c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7a:	4770      	bx	lr

08014c7c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014c7c:	b480      	push	{r7}
 8014c7e:	b083      	sub	sp, #12
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014c84:	bf00      	nop
 8014c86:	370c      	adds	r7, #12
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8e:	4770      	bx	lr

08014c90 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014c90:	b480      	push	{r7}
 8014c92:	b083      	sub	sp, #12
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014c98:	bf00      	nop
 8014c9a:	370c      	adds	r7, #12
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr

08014ca4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014ca4:	b480      	push	{r7}
 8014ca6:	b085      	sub	sp, #20
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d101      	bne.n	8014cba <HAL_UARTEx_DisableFifoMode+0x16>
 8014cb6:	2302      	movs	r3, #2
 8014cb8:	e027      	b.n	8014d0a <HAL_UARTEx_DisableFifoMode+0x66>
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	2201      	movs	r2, #1
 8014cbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	2224      	movs	r2, #36	; 0x24
 8014cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	681b      	ldr	r3, [r3, #0]
 8014cd6:	681a      	ldr	r2, [r3, #0]
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	f022 0201 	bic.w	r2, r2, #1
 8014ce0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014ce8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2200      	movs	r2, #0
 8014cee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	68fa      	ldr	r2, [r7, #12]
 8014cf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2220      	movs	r2, #32
 8014cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	2200      	movs	r2, #0
 8014d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014d08:	2300      	movs	r3, #0
}
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	3714      	adds	r7, #20
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d14:	4770      	bx	lr

08014d16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014d16:	b580      	push	{r7, lr}
 8014d18:	b084      	sub	sp, #16
 8014d1a:	af00      	add	r7, sp, #0
 8014d1c:	6078      	str	r0, [r7, #4]
 8014d1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014d26:	2b01      	cmp	r3, #1
 8014d28:	d101      	bne.n	8014d2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014d2a:	2302      	movs	r3, #2
 8014d2c:	e02d      	b.n	8014d8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2201      	movs	r2, #1
 8014d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	2224      	movs	r2, #36	; 0x24
 8014d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	f022 0201 	bic.w	r2, r2, #1
 8014d54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	689b      	ldr	r3, [r3, #8]
 8014d5c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	683a      	ldr	r2, [r7, #0]
 8014d66:	430a      	orrs	r2, r1
 8014d68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f000 f850 	bl	8014e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	68fa      	ldr	r2, [r7, #12]
 8014d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	2220      	movs	r2, #32
 8014d7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	2200      	movs	r2, #0
 8014d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014d88:	2300      	movs	r3, #0
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3710      	adds	r7, #16
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}

08014d92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014d92:	b580      	push	{r7, lr}
 8014d94:	b084      	sub	sp, #16
 8014d96:	af00      	add	r7, sp, #0
 8014d98:	6078      	str	r0, [r7, #4]
 8014d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014da2:	2b01      	cmp	r3, #1
 8014da4:	d101      	bne.n	8014daa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014da6:	2302      	movs	r3, #2
 8014da8:	e02d      	b.n	8014e06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	2201      	movs	r2, #1
 8014dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2224      	movs	r2, #36	; 0x24
 8014db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	f022 0201 	bic.w	r2, r2, #1
 8014dd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	689b      	ldr	r3, [r3, #8]
 8014dd8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	683a      	ldr	r2, [r7, #0]
 8014de2:	430a      	orrs	r2, r1
 8014de4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f000 f812 	bl	8014e10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	68fa      	ldr	r2, [r7, #12]
 8014df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	2220      	movs	r2, #32
 8014df8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014e04:	2300      	movs	r3, #0
}
 8014e06:	4618      	mov	r0, r3
 8014e08:	3710      	adds	r7, #16
 8014e0a:	46bd      	mov	sp, r7
 8014e0c:	bd80      	pop	{r7, pc}
	...

08014e10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014e10:	b480      	push	{r7}
 8014e12:	b085      	sub	sp, #20
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d108      	bne.n	8014e32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2201      	movs	r2, #1
 8014e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	2201      	movs	r2, #1
 8014e2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014e30:	e031      	b.n	8014e96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014e32:	2310      	movs	r3, #16
 8014e34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014e36:	2310      	movs	r3, #16
 8014e38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	689b      	ldr	r3, [r3, #8]
 8014e40:	0e5b      	lsrs	r3, r3, #25
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	f003 0307 	and.w	r3, r3, #7
 8014e48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	689b      	ldr	r3, [r3, #8]
 8014e50:	0f5b      	lsrs	r3, r3, #29
 8014e52:	b2db      	uxtb	r3, r3
 8014e54:	f003 0307 	and.w	r3, r3, #7
 8014e58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014e5a:	7bbb      	ldrb	r3, [r7, #14]
 8014e5c:	7b3a      	ldrb	r2, [r7, #12]
 8014e5e:	4911      	ldr	r1, [pc, #68]	; (8014ea4 <UARTEx_SetNbDataToProcess+0x94>)
 8014e60:	5c8a      	ldrb	r2, [r1, r2]
 8014e62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014e66:	7b3a      	ldrb	r2, [r7, #12]
 8014e68:	490f      	ldr	r1, [pc, #60]	; (8014ea8 <UARTEx_SetNbDataToProcess+0x98>)
 8014e6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014e6c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014e70:	b29a      	uxth	r2, r3
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014e78:	7bfb      	ldrb	r3, [r7, #15]
 8014e7a:	7b7a      	ldrb	r2, [r7, #13]
 8014e7c:	4909      	ldr	r1, [pc, #36]	; (8014ea4 <UARTEx_SetNbDataToProcess+0x94>)
 8014e7e:	5c8a      	ldrb	r2, [r1, r2]
 8014e80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014e84:	7b7a      	ldrb	r2, [r7, #13]
 8014e86:	4908      	ldr	r1, [pc, #32]	; (8014ea8 <UARTEx_SetNbDataToProcess+0x98>)
 8014e88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014e8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8014e8e:	b29a      	uxth	r2, r3
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014e96:	bf00      	nop
 8014e98:	3714      	adds	r7, #20
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea0:	4770      	bx	lr
 8014ea2:	bf00      	nop
 8014ea4:	08015be8 	.word	0x08015be8
 8014ea8:	08015bf0 	.word	0x08015bf0

08014eac <__libc_init_array>:
 8014eac:	b570      	push	{r4, r5, r6, lr}
 8014eae:	4d0d      	ldr	r5, [pc, #52]	; (8014ee4 <__libc_init_array+0x38>)
 8014eb0:	4c0d      	ldr	r4, [pc, #52]	; (8014ee8 <__libc_init_array+0x3c>)
 8014eb2:	1b64      	subs	r4, r4, r5
 8014eb4:	10a4      	asrs	r4, r4, #2
 8014eb6:	2600      	movs	r6, #0
 8014eb8:	42a6      	cmp	r6, r4
 8014eba:	d109      	bne.n	8014ed0 <__libc_init_array+0x24>
 8014ebc:	4d0b      	ldr	r5, [pc, #44]	; (8014eec <__libc_init_array+0x40>)
 8014ebe:	4c0c      	ldr	r4, [pc, #48]	; (8014ef0 <__libc_init_array+0x44>)
 8014ec0:	f000 fe64 	bl	8015b8c <_init>
 8014ec4:	1b64      	subs	r4, r4, r5
 8014ec6:	10a4      	asrs	r4, r4, #2
 8014ec8:	2600      	movs	r6, #0
 8014eca:	42a6      	cmp	r6, r4
 8014ecc:	d105      	bne.n	8014eda <__libc_init_array+0x2e>
 8014ece:	bd70      	pop	{r4, r5, r6, pc}
 8014ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ed4:	4798      	blx	r3
 8014ed6:	3601      	adds	r6, #1
 8014ed8:	e7ee      	b.n	8014eb8 <__libc_init_array+0xc>
 8014eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8014ede:	4798      	blx	r3
 8014ee0:	3601      	adds	r6, #1
 8014ee2:	e7f2      	b.n	8014eca <__libc_init_array+0x1e>
 8014ee4:	08015dd8 	.word	0x08015dd8
 8014ee8:	08015dd8 	.word	0x08015dd8
 8014eec:	08015dd8 	.word	0x08015dd8
 8014ef0:	08015ddc 	.word	0x08015ddc

08014ef4 <memset>:
 8014ef4:	4402      	add	r2, r0
 8014ef6:	4603      	mov	r3, r0
 8014ef8:	4293      	cmp	r3, r2
 8014efa:	d100      	bne.n	8014efe <memset+0xa>
 8014efc:	4770      	bx	lr
 8014efe:	f803 1b01 	strb.w	r1, [r3], #1
 8014f02:	e7f9      	b.n	8014ef8 <memset+0x4>
 8014f04:	0000      	movs	r0, r0
	...

08014f08 <cos>:
 8014f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014f0a:	eeb0 7b40 	vmov.f64	d7, d0
 8014f0e:	ee17 3a90 	vmov	r3, s15
 8014f12:	4a21      	ldr	r2, [pc, #132]	; (8014f98 <cos+0x90>)
 8014f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014f18:	4293      	cmp	r3, r2
 8014f1a:	dc06      	bgt.n	8014f2a <cos+0x22>
 8014f1c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8014f90 <cos+0x88>
 8014f20:	b005      	add	sp, #20
 8014f22:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f26:	f000 b9cb 	b.w	80152c0 <__kernel_cos>
 8014f2a:	4a1c      	ldr	r2, [pc, #112]	; (8014f9c <cos+0x94>)
 8014f2c:	4293      	cmp	r3, r2
 8014f2e:	dd04      	ble.n	8014f3a <cos+0x32>
 8014f30:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014f34:	b005      	add	sp, #20
 8014f36:	f85d fb04 	ldr.w	pc, [sp], #4
 8014f3a:	4668      	mov	r0, sp
 8014f3c:	f000 f87c 	bl	8015038 <__ieee754_rem_pio2>
 8014f40:	f000 0003 	and.w	r0, r0, #3
 8014f44:	2801      	cmp	r0, #1
 8014f46:	d009      	beq.n	8014f5c <cos+0x54>
 8014f48:	2802      	cmp	r0, #2
 8014f4a:	d010      	beq.n	8014f6e <cos+0x66>
 8014f4c:	b9b0      	cbnz	r0, 8014f7c <cos+0x74>
 8014f4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014f52:	ed9d 0b00 	vldr	d0, [sp]
 8014f56:	f000 f9b3 	bl	80152c0 <__kernel_cos>
 8014f5a:	e7eb      	b.n	8014f34 <cos+0x2c>
 8014f5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014f60:	ed9d 0b00 	vldr	d0, [sp]
 8014f64:	f000 fcb0 	bl	80158c8 <__kernel_sin>
 8014f68:	eeb1 0b40 	vneg.f64	d0, d0
 8014f6c:	e7e2      	b.n	8014f34 <cos+0x2c>
 8014f6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014f72:	ed9d 0b00 	vldr	d0, [sp]
 8014f76:	f000 f9a3 	bl	80152c0 <__kernel_cos>
 8014f7a:	e7f5      	b.n	8014f68 <cos+0x60>
 8014f7c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014f80:	ed9d 0b00 	vldr	d0, [sp]
 8014f84:	2001      	movs	r0, #1
 8014f86:	f000 fc9f 	bl	80158c8 <__kernel_sin>
 8014f8a:	e7d3      	b.n	8014f34 <cos+0x2c>
 8014f8c:	f3af 8000 	nop.w
	...
 8014f98:	3fe921fb 	.word	0x3fe921fb
 8014f9c:	7fefffff 	.word	0x7fefffff

08014fa0 <sin>:
 8014fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014fa2:	eeb0 7b40 	vmov.f64	d7, d0
 8014fa6:	ee17 3a90 	vmov	r3, s15
 8014faa:	4a21      	ldr	r2, [pc, #132]	; (8015030 <sin+0x90>)
 8014fac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014fb0:	4293      	cmp	r3, r2
 8014fb2:	dc07      	bgt.n	8014fc4 <sin+0x24>
 8014fb4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8015028 <sin+0x88>
 8014fb8:	2000      	movs	r0, #0
 8014fba:	b005      	add	sp, #20
 8014fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014fc0:	f000 bc82 	b.w	80158c8 <__kernel_sin>
 8014fc4:	4a1b      	ldr	r2, [pc, #108]	; (8015034 <sin+0x94>)
 8014fc6:	4293      	cmp	r3, r2
 8014fc8:	dd04      	ble.n	8014fd4 <sin+0x34>
 8014fca:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014fce:	b005      	add	sp, #20
 8014fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014fd4:	4668      	mov	r0, sp
 8014fd6:	f000 f82f 	bl	8015038 <__ieee754_rem_pio2>
 8014fda:	f000 0003 	and.w	r0, r0, #3
 8014fde:	2801      	cmp	r0, #1
 8014fe0:	d00a      	beq.n	8014ff8 <sin+0x58>
 8014fe2:	2802      	cmp	r0, #2
 8014fe4:	d00f      	beq.n	8015006 <sin+0x66>
 8014fe6:	b9c0      	cbnz	r0, 801501a <sin+0x7a>
 8014fe8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014fec:	ed9d 0b00 	vldr	d0, [sp]
 8014ff0:	2001      	movs	r0, #1
 8014ff2:	f000 fc69 	bl	80158c8 <__kernel_sin>
 8014ff6:	e7ea      	b.n	8014fce <sin+0x2e>
 8014ff8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014ffc:	ed9d 0b00 	vldr	d0, [sp]
 8015000:	f000 f95e 	bl	80152c0 <__kernel_cos>
 8015004:	e7e3      	b.n	8014fce <sin+0x2e>
 8015006:	ed9d 1b02 	vldr	d1, [sp, #8]
 801500a:	ed9d 0b00 	vldr	d0, [sp]
 801500e:	2001      	movs	r0, #1
 8015010:	f000 fc5a 	bl	80158c8 <__kernel_sin>
 8015014:	eeb1 0b40 	vneg.f64	d0, d0
 8015018:	e7d9      	b.n	8014fce <sin+0x2e>
 801501a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801501e:	ed9d 0b00 	vldr	d0, [sp]
 8015022:	f000 f94d 	bl	80152c0 <__kernel_cos>
 8015026:	e7f5      	b.n	8015014 <sin+0x74>
	...
 8015030:	3fe921fb 	.word	0x3fe921fb
 8015034:	7fefffff 	.word	0x7fefffff

08015038 <__ieee754_rem_pio2>:
 8015038:	b570      	push	{r4, r5, r6, lr}
 801503a:	eeb0 7b40 	vmov.f64	d7, d0
 801503e:	ee17 5a90 	vmov	r5, s15
 8015042:	4b99      	ldr	r3, [pc, #612]	; (80152a8 <__ieee754_rem_pio2+0x270>)
 8015044:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015048:	429e      	cmp	r6, r3
 801504a:	b088      	sub	sp, #32
 801504c:	4604      	mov	r4, r0
 801504e:	dc07      	bgt.n	8015060 <__ieee754_rem_pio2+0x28>
 8015050:	2200      	movs	r2, #0
 8015052:	2300      	movs	r3, #0
 8015054:	ed84 0b00 	vstr	d0, [r4]
 8015058:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801505c:	2000      	movs	r0, #0
 801505e:	e01b      	b.n	8015098 <__ieee754_rem_pio2+0x60>
 8015060:	4b92      	ldr	r3, [pc, #584]	; (80152ac <__ieee754_rem_pio2+0x274>)
 8015062:	429e      	cmp	r6, r3
 8015064:	dc3b      	bgt.n	80150de <__ieee754_rem_pio2+0xa6>
 8015066:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801506a:	2d00      	cmp	r5, #0
 801506c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8015268 <__ieee754_rem_pio2+0x230>
 8015070:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8015074:	dd19      	ble.n	80150aa <__ieee754_rem_pio2+0x72>
 8015076:	ee30 7b46 	vsub.f64	d7, d0, d6
 801507a:	429e      	cmp	r6, r3
 801507c:	d00e      	beq.n	801509c <__ieee754_rem_pio2+0x64>
 801507e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8015270 <__ieee754_rem_pio2+0x238>
 8015082:	ee37 5b46 	vsub.f64	d5, d7, d6
 8015086:	ee37 7b45 	vsub.f64	d7, d7, d5
 801508a:	ed84 5b00 	vstr	d5, [r4]
 801508e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015092:	ed84 7b02 	vstr	d7, [r4, #8]
 8015096:	2001      	movs	r0, #1
 8015098:	b008      	add	sp, #32
 801509a:	bd70      	pop	{r4, r5, r6, pc}
 801509c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015278 <__ieee754_rem_pio2+0x240>
 80150a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80150a4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8015280 <__ieee754_rem_pio2+0x248>
 80150a8:	e7eb      	b.n	8015082 <__ieee754_rem_pio2+0x4a>
 80150aa:	429e      	cmp	r6, r3
 80150ac:	ee30 7b06 	vadd.f64	d7, d0, d6
 80150b0:	d00e      	beq.n	80150d0 <__ieee754_rem_pio2+0x98>
 80150b2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8015270 <__ieee754_rem_pio2+0x238>
 80150b6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80150ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 80150be:	ed84 5b00 	vstr	d5, [r4]
 80150c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80150c6:	f04f 30ff 	mov.w	r0, #4294967295
 80150ca:	ed84 7b02 	vstr	d7, [r4, #8]
 80150ce:	e7e3      	b.n	8015098 <__ieee754_rem_pio2+0x60>
 80150d0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015278 <__ieee754_rem_pio2+0x240>
 80150d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80150d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015280 <__ieee754_rem_pio2+0x248>
 80150dc:	e7eb      	b.n	80150b6 <__ieee754_rem_pio2+0x7e>
 80150de:	4b74      	ldr	r3, [pc, #464]	; (80152b0 <__ieee754_rem_pio2+0x278>)
 80150e0:	429e      	cmp	r6, r3
 80150e2:	dc70      	bgt.n	80151c6 <__ieee754_rem_pio2+0x18e>
 80150e4:	f000 fc48 	bl	8015978 <fabs>
 80150e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80150ec:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015288 <__ieee754_rem_pio2+0x250>
 80150f0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80150f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80150f8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80150fc:	ee17 0a90 	vmov	r0, s15
 8015100:	eeb1 4b45 	vneg.f64	d4, d5
 8015104:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015268 <__ieee754_rem_pio2+0x230>
 8015108:	eea5 0b47 	vfms.f64	d0, d5, d7
 801510c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8015270 <__ieee754_rem_pio2+0x238>
 8015110:	281f      	cmp	r0, #31
 8015112:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015116:	ee30 6b47 	vsub.f64	d6, d0, d7
 801511a:	dc08      	bgt.n	801512e <__ieee754_rem_pio2+0xf6>
 801511c:	4b65      	ldr	r3, [pc, #404]	; (80152b4 <__ieee754_rem_pio2+0x27c>)
 801511e:	1e42      	subs	r2, r0, #1
 8015120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015124:	42b3      	cmp	r3, r6
 8015126:	d002      	beq.n	801512e <__ieee754_rem_pio2+0xf6>
 8015128:	ed84 6b00 	vstr	d6, [r4]
 801512c:	e026      	b.n	801517c <__ieee754_rem_pio2+0x144>
 801512e:	ee16 3a90 	vmov	r3, s13
 8015132:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015136:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801513a:	2b10      	cmp	r3, #16
 801513c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015140:	ddf2      	ble.n	8015128 <__ieee754_rem_pio2+0xf0>
 8015142:	eeb0 6b40 	vmov.f64	d6, d0
 8015146:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8015278 <__ieee754_rem_pio2+0x240>
 801514a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8015280 <__ieee754_rem_pio2+0x248>
 801514e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015152:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015156:	eea4 0b07 	vfma.f64	d0, d4, d7
 801515a:	eeb0 7b40 	vmov.f64	d7, d0
 801515e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8015162:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015166:	ee13 3a90 	vmov	r3, s7
 801516a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801516e:	1ad3      	subs	r3, r2, r3
 8015170:	2b31      	cmp	r3, #49	; 0x31
 8015172:	dc17      	bgt.n	80151a4 <__ieee754_rem_pio2+0x16c>
 8015174:	eeb0 0b46 	vmov.f64	d0, d6
 8015178:	ed84 3b00 	vstr	d3, [r4]
 801517c:	ed94 6b00 	vldr	d6, [r4]
 8015180:	2d00      	cmp	r5, #0
 8015182:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015186:	ee30 0b47 	vsub.f64	d0, d0, d7
 801518a:	ed84 0b02 	vstr	d0, [r4, #8]
 801518e:	da83      	bge.n	8015098 <__ieee754_rem_pio2+0x60>
 8015190:	eeb1 6b46 	vneg.f64	d6, d6
 8015194:	eeb1 0b40 	vneg.f64	d0, d0
 8015198:	ed84 6b00 	vstr	d6, [r4]
 801519c:	ed84 0b02 	vstr	d0, [r4, #8]
 80151a0:	4240      	negs	r0, r0
 80151a2:	e779      	b.n	8015098 <__ieee754_rem_pio2+0x60>
 80151a4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8015290 <__ieee754_rem_pio2+0x258>
 80151a8:	eeb0 0b46 	vmov.f64	d0, d6
 80151ac:	eea4 0b03 	vfma.f64	d0, d4, d3
 80151b0:	ee36 7b40 	vsub.f64	d7, d6, d0
 80151b4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8015298 <__ieee754_rem_pio2+0x260>
 80151b8:	eea4 7b03 	vfma.f64	d7, d4, d3
 80151bc:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80151c0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80151c4:	e7b0      	b.n	8015128 <__ieee754_rem_pio2+0xf0>
 80151c6:	4b3c      	ldr	r3, [pc, #240]	; (80152b8 <__ieee754_rem_pio2+0x280>)
 80151c8:	429e      	cmp	r6, r3
 80151ca:	dd06      	ble.n	80151da <__ieee754_rem_pio2+0x1a2>
 80151cc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80151d0:	ed80 7b02 	vstr	d7, [r0, #8]
 80151d4:	ed80 7b00 	vstr	d7, [r0]
 80151d8:	e740      	b.n	801505c <__ieee754_rem_pio2+0x24>
 80151da:	1532      	asrs	r2, r6, #20
 80151dc:	ee10 0a10 	vmov	r0, s0
 80151e0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80151e4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80151e8:	ec41 0b17 	vmov	d7, r0, r1
 80151ec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80151f0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80152a0 <__ieee754_rem_pio2+0x268>
 80151f4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80151f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80151fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015200:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015204:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015208:	a902      	add	r1, sp, #8
 801520a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801520e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015212:	ed8d 6b04 	vstr	d6, [sp, #16]
 8015216:	ee27 7b05 	vmul.f64	d7, d7, d5
 801521a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801521e:	2603      	movs	r6, #3
 8015220:	4608      	mov	r0, r1
 8015222:	ed91 7b04 	vldr	d7, [r1, #16]
 8015226:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801522e:	4633      	mov	r3, r6
 8015230:	f1a1 0108 	sub.w	r1, r1, #8
 8015234:	f106 36ff 	add.w	r6, r6, #4294967295
 8015238:	d0f3      	beq.n	8015222 <__ieee754_rem_pio2+0x1ea>
 801523a:	4920      	ldr	r1, [pc, #128]	; (80152bc <__ieee754_rem_pio2+0x284>)
 801523c:	9101      	str	r1, [sp, #4]
 801523e:	2102      	movs	r1, #2
 8015240:	9100      	str	r1, [sp, #0]
 8015242:	4621      	mov	r1, r4
 8015244:	f000 f8a8 	bl	8015398 <__kernel_rem_pio2>
 8015248:	2d00      	cmp	r5, #0
 801524a:	f6bf af25 	bge.w	8015098 <__ieee754_rem_pio2+0x60>
 801524e:	ed94 7b00 	vldr	d7, [r4]
 8015252:	eeb1 7b47 	vneg.f64	d7, d7
 8015256:	ed84 7b00 	vstr	d7, [r4]
 801525a:	ed94 7b02 	vldr	d7, [r4, #8]
 801525e:	eeb1 7b47 	vneg.f64	d7, d7
 8015262:	ed84 7b02 	vstr	d7, [r4, #8]
 8015266:	e79b      	b.n	80151a0 <__ieee754_rem_pio2+0x168>
 8015268:	54400000 	.word	0x54400000
 801526c:	3ff921fb 	.word	0x3ff921fb
 8015270:	1a626331 	.word	0x1a626331
 8015274:	3dd0b461 	.word	0x3dd0b461
 8015278:	1a600000 	.word	0x1a600000
 801527c:	3dd0b461 	.word	0x3dd0b461
 8015280:	2e037073 	.word	0x2e037073
 8015284:	3ba3198a 	.word	0x3ba3198a
 8015288:	6dc9c883 	.word	0x6dc9c883
 801528c:	3fe45f30 	.word	0x3fe45f30
 8015290:	2e000000 	.word	0x2e000000
 8015294:	3ba3198a 	.word	0x3ba3198a
 8015298:	252049c1 	.word	0x252049c1
 801529c:	397b839a 	.word	0x397b839a
 80152a0:	00000000 	.word	0x00000000
 80152a4:	41700000 	.word	0x41700000
 80152a8:	3fe921fb 	.word	0x3fe921fb
 80152ac:	4002d97b 	.word	0x4002d97b
 80152b0:	413921fb 	.word	0x413921fb
 80152b4:	08015bf8 	.word	0x08015bf8
 80152b8:	7fefffff 	.word	0x7fefffff
 80152bc:	08015c78 	.word	0x08015c78

080152c0 <__kernel_cos>:
 80152c0:	ee10 1a90 	vmov	r1, s1
 80152c4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80152c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80152cc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80152d0:	da05      	bge.n	80152de <__kernel_cos+0x1e>
 80152d2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80152d6:	ee17 3a90 	vmov	r3, s15
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d03d      	beq.n	801535a <__kernel_cos+0x9a>
 80152de:	ee20 3b00 	vmul.f64	d3, d0, d0
 80152e2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8015360 <__kernel_cos+0xa0>
 80152e6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8015368 <__kernel_cos+0xa8>
 80152ea:	eea3 6b07 	vfma.f64	d6, d3, d7
 80152ee:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015370 <__kernel_cos+0xb0>
 80152f2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80152f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8015378 <__kernel_cos+0xb8>
 80152fa:	eea7 6b03 	vfma.f64	d6, d7, d3
 80152fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015380 <__kernel_cos+0xc0>
 8015302:	4b23      	ldr	r3, [pc, #140]	; (8015390 <__kernel_cos+0xd0>)
 8015304:	eea6 7b03 	vfma.f64	d7, d6, d3
 8015308:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8015388 <__kernel_cos+0xc8>
 801530c:	4299      	cmp	r1, r3
 801530e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8015312:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8015316:	ee26 5b03 	vmul.f64	d5, d6, d3
 801531a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801531e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8015322:	eea3 6b05 	vfma.f64	d6, d3, d5
 8015326:	dc04      	bgt.n	8015332 <__kernel_cos+0x72>
 8015328:	ee37 6b46 	vsub.f64	d6, d7, d6
 801532c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8015330:	4770      	bx	lr
 8015332:	4b18      	ldr	r3, [pc, #96]	; (8015394 <__kernel_cos+0xd4>)
 8015334:	4299      	cmp	r1, r3
 8015336:	dc0d      	bgt.n	8015354 <__kernel_cos+0x94>
 8015338:	2200      	movs	r2, #0
 801533a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801533e:	ec43 2b15 	vmov	d5, r2, r3
 8015342:	ee34 0b45 	vsub.f64	d0, d4, d5
 8015346:	ee37 7b45 	vsub.f64	d7, d7, d5
 801534a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801534e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015352:	4770      	bx	lr
 8015354:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8015358:	e7f3      	b.n	8015342 <__kernel_cos+0x82>
 801535a:	eeb0 0b44 	vmov.f64	d0, d4
 801535e:	4770      	bx	lr
 8015360:	be8838d4 	.word	0xbe8838d4
 8015364:	bda8fae9 	.word	0xbda8fae9
 8015368:	bdb4b1c4 	.word	0xbdb4b1c4
 801536c:	3e21ee9e 	.word	0x3e21ee9e
 8015370:	809c52ad 	.word	0x809c52ad
 8015374:	be927e4f 	.word	0xbe927e4f
 8015378:	19cb1590 	.word	0x19cb1590
 801537c:	3efa01a0 	.word	0x3efa01a0
 8015380:	16c15177 	.word	0x16c15177
 8015384:	bf56c16c 	.word	0xbf56c16c
 8015388:	5555554c 	.word	0x5555554c
 801538c:	3fa55555 	.word	0x3fa55555
 8015390:	3fd33332 	.word	0x3fd33332
 8015394:	3fe90000 	.word	0x3fe90000

08015398 <__kernel_rem_pio2>:
 8015398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801539c:	ed2d 8b06 	vpush	{d8-d10}
 80153a0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80153a4:	460f      	mov	r7, r1
 80153a6:	9002      	str	r0, [sp, #8]
 80153a8:	49c5      	ldr	r1, [pc, #788]	; (80156c0 <__kernel_rem_pio2+0x328>)
 80153aa:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80153ac:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80153b0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80153b4:	9301      	str	r3, [sp, #4]
 80153b6:	f112 0f14 	cmn.w	r2, #20
 80153ba:	bfa8      	it	ge
 80153bc:	2018      	movge	r0, #24
 80153be:	f103 31ff 	add.w	r1, r3, #4294967295
 80153c2:	bfb8      	it	lt
 80153c4:	2000      	movlt	r0, #0
 80153c6:	f06f 0417 	mvn.w	r4, #23
 80153ca:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80156a8 <__kernel_rem_pio2+0x310>
 80153ce:	bfa4      	itt	ge
 80153d0:	f1a2 0a03 	subge.w	sl, r2, #3
 80153d4:	fb9a f0f0 	sdivge	r0, sl, r0
 80153d8:	fb00 4404 	mla	r4, r0, r4, r4
 80153dc:	1a46      	subs	r6, r0, r1
 80153de:	4414      	add	r4, r2
 80153e0:	eb09 0c01 	add.w	ip, r9, r1
 80153e4:	ad1a      	add	r5, sp, #104	; 0x68
 80153e6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80153ea:	2200      	movs	r2, #0
 80153ec:	4562      	cmp	r2, ip
 80153ee:	dd10      	ble.n	8015412 <__kernel_rem_pio2+0x7a>
 80153f0:	9a01      	ldr	r2, [sp, #4]
 80153f2:	ab1a      	add	r3, sp, #104	; 0x68
 80153f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80153f8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80153fc:	f04f 0c00 	mov.w	ip, #0
 8015400:	45cc      	cmp	ip, r9
 8015402:	dc26      	bgt.n	8015452 <__kernel_rem_pio2+0xba>
 8015404:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80156a8 <__kernel_rem_pio2+0x310>
 8015408:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801540c:	4616      	mov	r6, r2
 801540e:	2500      	movs	r5, #0
 8015410:	e015      	b.n	801543e <__kernel_rem_pio2+0xa6>
 8015412:	42d6      	cmn	r6, r2
 8015414:	d409      	bmi.n	801542a <__kernel_rem_pio2+0x92>
 8015416:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801541a:	ee07 3a90 	vmov	s15, r3
 801541e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015422:	eca5 7b02 	vstmia	r5!, {d7}
 8015426:	3201      	adds	r2, #1
 8015428:	e7e0      	b.n	80153ec <__kernel_rem_pio2+0x54>
 801542a:	eeb0 7b46 	vmov.f64	d7, d6
 801542e:	e7f8      	b.n	8015422 <__kernel_rem_pio2+0x8a>
 8015430:	ecb8 5b02 	vldmia	r8!, {d5}
 8015434:	ed96 6b00 	vldr	d6, [r6]
 8015438:	3501      	adds	r5, #1
 801543a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801543e:	428d      	cmp	r5, r1
 8015440:	f1a6 0608 	sub.w	r6, r6, #8
 8015444:	ddf4      	ble.n	8015430 <__kernel_rem_pio2+0x98>
 8015446:	ecaa 7b02 	vstmia	sl!, {d7}
 801544a:	f10c 0c01 	add.w	ip, ip, #1
 801544e:	3208      	adds	r2, #8
 8015450:	e7d6      	b.n	8015400 <__kernel_rem_pio2+0x68>
 8015452:	ab06      	add	r3, sp, #24
 8015454:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80156b0 <__kernel_rem_pio2+0x318>
 8015458:	ed9f ab97 	vldr	d10, [pc, #604]	; 80156b8 <__kernel_rem_pio2+0x320>
 801545c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8015460:	9303      	str	r3, [sp, #12]
 8015462:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8015466:	464d      	mov	r5, r9
 8015468:	00eb      	lsls	r3, r5, #3
 801546a:	9304      	str	r3, [sp, #16]
 801546c:	ab92      	add	r3, sp, #584	; 0x248
 801546e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8015472:	f10d 0b18 	add.w	fp, sp, #24
 8015476:	ab6a      	add	r3, sp, #424	; 0x1a8
 8015478:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801547c:	465e      	mov	r6, fp
 801547e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8015482:	4628      	mov	r0, r5
 8015484:	2800      	cmp	r0, #0
 8015486:	f1a2 0208 	sub.w	r2, r2, #8
 801548a:	dc4c      	bgt.n	8015526 <__kernel_rem_pio2+0x18e>
 801548c:	4620      	mov	r0, r4
 801548e:	9105      	str	r1, [sp, #20]
 8015490:	f000 faf2 	bl	8015a78 <scalbn>
 8015494:	eeb0 8b40 	vmov.f64	d8, d0
 8015498:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801549c:	ee28 0b00 	vmul.f64	d0, d8, d0
 80154a0:	f000 fa76 	bl	8015990 <floor>
 80154a4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80154a8:	eea0 8b47 	vfms.f64	d8, d0, d7
 80154ac:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80154b0:	2c00      	cmp	r4, #0
 80154b2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80154b6:	ee17 8a90 	vmov	r8, s15
 80154ba:	ee38 8b40 	vsub.f64	d8, d8, d0
 80154be:	9905      	ldr	r1, [sp, #20]
 80154c0:	dd43      	ble.n	801554a <__kernel_rem_pio2+0x1b2>
 80154c2:	1e68      	subs	r0, r5, #1
 80154c4:	ab06      	add	r3, sp, #24
 80154c6:	f1c4 0c18 	rsb	ip, r4, #24
 80154ca:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80154ce:	fa46 f20c 	asr.w	r2, r6, ip
 80154d2:	4490      	add	r8, r2
 80154d4:	fa02 f20c 	lsl.w	r2, r2, ip
 80154d8:	1ab6      	subs	r6, r6, r2
 80154da:	f1c4 0217 	rsb	r2, r4, #23
 80154de:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80154e2:	4116      	asrs	r6, r2
 80154e4:	2e00      	cmp	r6, #0
 80154e6:	dd3f      	ble.n	8015568 <__kernel_rem_pio2+0x1d0>
 80154e8:	f04f 0c00 	mov.w	ip, #0
 80154ec:	f108 0801 	add.w	r8, r8, #1
 80154f0:	4660      	mov	r0, ip
 80154f2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80154f6:	4565      	cmp	r5, ip
 80154f8:	dc6e      	bgt.n	80155d8 <__kernel_rem_pio2+0x240>
 80154fa:	2c00      	cmp	r4, #0
 80154fc:	dd04      	ble.n	8015508 <__kernel_rem_pio2+0x170>
 80154fe:	2c01      	cmp	r4, #1
 8015500:	d07f      	beq.n	8015602 <__kernel_rem_pio2+0x26a>
 8015502:	2c02      	cmp	r4, #2
 8015504:	f000 8087 	beq.w	8015616 <__kernel_rem_pio2+0x27e>
 8015508:	2e02      	cmp	r6, #2
 801550a:	d12d      	bne.n	8015568 <__kernel_rem_pio2+0x1d0>
 801550c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015510:	ee30 8b48 	vsub.f64	d8, d0, d8
 8015514:	b340      	cbz	r0, 8015568 <__kernel_rem_pio2+0x1d0>
 8015516:	4620      	mov	r0, r4
 8015518:	9105      	str	r1, [sp, #20]
 801551a:	f000 faad 	bl	8015a78 <scalbn>
 801551e:	9905      	ldr	r1, [sp, #20]
 8015520:	ee38 8b40 	vsub.f64	d8, d8, d0
 8015524:	e020      	b.n	8015568 <__kernel_rem_pio2+0x1d0>
 8015526:	ee20 7b09 	vmul.f64	d7, d0, d9
 801552a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801552e:	3801      	subs	r0, #1
 8015530:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8015534:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8015538:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801553c:	eca6 0a01 	vstmia	r6!, {s0}
 8015540:	ed92 0b00 	vldr	d0, [r2]
 8015544:	ee37 0b00 	vadd.f64	d0, d7, d0
 8015548:	e79c      	b.n	8015484 <__kernel_rem_pio2+0xec>
 801554a:	d105      	bne.n	8015558 <__kernel_rem_pio2+0x1c0>
 801554c:	1e6a      	subs	r2, r5, #1
 801554e:	ab06      	add	r3, sp, #24
 8015550:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8015554:	15f6      	asrs	r6, r6, #23
 8015556:	e7c5      	b.n	80154e4 <__kernel_rem_pio2+0x14c>
 8015558:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801555c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015564:	da36      	bge.n	80155d4 <__kernel_rem_pio2+0x23c>
 8015566:	2600      	movs	r6, #0
 8015568:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801556c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015570:	f040 80aa 	bne.w	80156c8 <__kernel_rem_pio2+0x330>
 8015574:	f105 3bff 	add.w	fp, r5, #4294967295
 8015578:	4658      	mov	r0, fp
 801557a:	2200      	movs	r2, #0
 801557c:	4548      	cmp	r0, r9
 801557e:	da52      	bge.n	8015626 <__kernel_rem_pio2+0x28e>
 8015580:	2a00      	cmp	r2, #0
 8015582:	f000 8081 	beq.w	8015688 <__kernel_rem_pio2+0x2f0>
 8015586:	ab06      	add	r3, sp, #24
 8015588:	3c18      	subs	r4, #24
 801558a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801558e:	2b00      	cmp	r3, #0
 8015590:	f000 8087 	beq.w	80156a2 <__kernel_rem_pio2+0x30a>
 8015594:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8015598:	4620      	mov	r0, r4
 801559a:	f000 fa6d 	bl	8015a78 <scalbn>
 801559e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80155a2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80156b0 <__kernel_rem_pio2+0x318>
 80155a6:	a96a      	add	r1, sp, #424	; 0x1a8
 80155a8:	f103 0208 	add.w	r2, r3, #8
 80155ac:	1888      	adds	r0, r1, r2
 80155ae:	4659      	mov	r1, fp
 80155b0:	2900      	cmp	r1, #0
 80155b2:	f280 80b7 	bge.w	8015724 <__kernel_rem_pio2+0x38c>
 80155b6:	4659      	mov	r1, fp
 80155b8:	2900      	cmp	r1, #0
 80155ba:	f2c0 80d5 	blt.w	8015768 <__kernel_rem_pio2+0x3d0>
 80155be:	a86a      	add	r0, sp, #424	; 0x1a8
 80155c0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80155c4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80156a8 <__kernel_rem_pio2+0x310>
 80155c8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80156c4 <__kernel_rem_pio2+0x32c>
 80155cc:	2400      	movs	r4, #0
 80155ce:	ebab 0001 	sub.w	r0, fp, r1
 80155d2:	e0be      	b.n	8015752 <__kernel_rem_pio2+0x3ba>
 80155d4:	2602      	movs	r6, #2
 80155d6:	e787      	b.n	80154e8 <__kernel_rem_pio2+0x150>
 80155d8:	f8db 2000 	ldr.w	r2, [fp]
 80155dc:	b958      	cbnz	r0, 80155f6 <__kernel_rem_pio2+0x25e>
 80155de:	b122      	cbz	r2, 80155ea <__kernel_rem_pio2+0x252>
 80155e0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80155e4:	f8cb 2000 	str.w	r2, [fp]
 80155e8:	2201      	movs	r2, #1
 80155ea:	f10c 0c01 	add.w	ip, ip, #1
 80155ee:	f10b 0b04 	add.w	fp, fp, #4
 80155f2:	4610      	mov	r0, r2
 80155f4:	e77f      	b.n	80154f6 <__kernel_rem_pio2+0x15e>
 80155f6:	ebae 0202 	sub.w	r2, lr, r2
 80155fa:	f8cb 2000 	str.w	r2, [fp]
 80155fe:	4602      	mov	r2, r0
 8015600:	e7f3      	b.n	80155ea <__kernel_rem_pio2+0x252>
 8015602:	f105 3cff 	add.w	ip, r5, #4294967295
 8015606:	ab06      	add	r3, sp, #24
 8015608:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801560c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8015610:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8015614:	e778      	b.n	8015508 <__kernel_rem_pio2+0x170>
 8015616:	f105 3cff 	add.w	ip, r5, #4294967295
 801561a:	ab06      	add	r3, sp, #24
 801561c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8015620:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8015624:	e7f4      	b.n	8015610 <__kernel_rem_pio2+0x278>
 8015626:	ab06      	add	r3, sp, #24
 8015628:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801562c:	3801      	subs	r0, #1
 801562e:	431a      	orrs	r2, r3
 8015630:	e7a4      	b.n	801557c <__kernel_rem_pio2+0x1e4>
 8015632:	f10c 0c01 	add.w	ip, ip, #1
 8015636:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801563a:	2800      	cmp	r0, #0
 801563c:	d0f9      	beq.n	8015632 <__kernel_rem_pio2+0x29a>
 801563e:	9b04      	ldr	r3, [sp, #16]
 8015640:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8015644:	eb0d 0203 	add.w	r2, sp, r3
 8015648:	9b01      	ldr	r3, [sp, #4]
 801564a:	18e8      	adds	r0, r5, r3
 801564c:	ab1a      	add	r3, sp, #104	; 0x68
 801564e:	1c6e      	adds	r6, r5, #1
 8015650:	3a98      	subs	r2, #152	; 0x98
 8015652:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8015656:	4465      	add	r5, ip
 8015658:	42b5      	cmp	r5, r6
 801565a:	f6ff af05 	blt.w	8015468 <__kernel_rem_pio2+0xd0>
 801565e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8015662:	f8dd e008 	ldr.w	lr, [sp, #8]
 8015666:	ee07 3a90 	vmov	s15, r3
 801566a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801566e:	f04f 0c00 	mov.w	ip, #0
 8015672:	eca0 7b02 	vstmia	r0!, {d7}
 8015676:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80156a8 <__kernel_rem_pio2+0x310>
 801567a:	4680      	mov	r8, r0
 801567c:	458c      	cmp	ip, r1
 801567e:	dd07      	ble.n	8015690 <__kernel_rem_pio2+0x2f8>
 8015680:	eca2 7b02 	vstmia	r2!, {d7}
 8015684:	3601      	adds	r6, #1
 8015686:	e7e7      	b.n	8015658 <__kernel_rem_pio2+0x2c0>
 8015688:	9a03      	ldr	r2, [sp, #12]
 801568a:	f04f 0c01 	mov.w	ip, #1
 801568e:	e7d2      	b.n	8015636 <__kernel_rem_pio2+0x29e>
 8015690:	ecbe 5b02 	vldmia	lr!, {d5}
 8015694:	ed38 6b02 	vldmdb	r8!, {d6}
 8015698:	f10c 0c01 	add.w	ip, ip, #1
 801569c:	eea5 7b06 	vfma.f64	d7, d5, d6
 80156a0:	e7ec      	b.n	801567c <__kernel_rem_pio2+0x2e4>
 80156a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80156a6:	e76e      	b.n	8015586 <__kernel_rem_pio2+0x1ee>
	...
 80156b4:	3e700000 	.word	0x3e700000
 80156b8:	00000000 	.word	0x00000000
 80156bc:	41700000 	.word	0x41700000
 80156c0:	08015dc0 	.word	0x08015dc0
 80156c4:	08015d80 	.word	0x08015d80
 80156c8:	4260      	negs	r0, r4
 80156ca:	eeb0 0b48 	vmov.f64	d0, d8
 80156ce:	f000 f9d3 	bl	8015a78 <scalbn>
 80156d2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80158b0 <__kernel_rem_pio2+0x518>
 80156d6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80156da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80156de:	db18      	blt.n	8015712 <__kernel_rem_pio2+0x37a>
 80156e0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80158b8 <__kernel_rem_pio2+0x520>
 80156e4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80156e8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80156ec:	aa06      	add	r2, sp, #24
 80156ee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80156f2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80156f6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80156fa:	f105 0b01 	add.w	fp, r5, #1
 80156fe:	ee10 3a10 	vmov	r3, s0
 8015702:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015706:	ee17 3a10 	vmov	r3, s14
 801570a:	3418      	adds	r4, #24
 801570c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8015710:	e740      	b.n	8015594 <__kernel_rem_pio2+0x1fc>
 8015712:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8015716:	aa06      	add	r2, sp, #24
 8015718:	ee10 3a10 	vmov	r3, s0
 801571c:	46ab      	mov	fp, r5
 801571e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8015722:	e737      	b.n	8015594 <__kernel_rem_pio2+0x1fc>
 8015724:	ac06      	add	r4, sp, #24
 8015726:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801572a:	9401      	str	r4, [sp, #4]
 801572c:	ee07 4a90 	vmov	s15, r4
 8015730:	3901      	subs	r1, #1
 8015732:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015736:	ee27 7b00 	vmul.f64	d7, d7, d0
 801573a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801573e:	ed20 7b02 	vstmdb	r0!, {d7}
 8015742:	e735      	b.n	80155b0 <__kernel_rem_pio2+0x218>
 8015744:	ecbc 5b02 	vldmia	ip!, {d5}
 8015748:	ecb5 6b02 	vldmia	r5!, {d6}
 801574c:	3401      	adds	r4, #1
 801574e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8015752:	454c      	cmp	r4, r9
 8015754:	dc01      	bgt.n	801575a <__kernel_rem_pio2+0x3c2>
 8015756:	4284      	cmp	r4, r0
 8015758:	ddf4      	ble.n	8015744 <__kernel_rem_pio2+0x3ac>
 801575a:	ac42      	add	r4, sp, #264	; 0x108
 801575c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8015760:	ed80 7b00 	vstr	d7, [r0]
 8015764:	3901      	subs	r1, #1
 8015766:	e727      	b.n	80155b8 <__kernel_rem_pio2+0x220>
 8015768:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801576a:	2902      	cmp	r1, #2
 801576c:	dc0a      	bgt.n	8015784 <__kernel_rem_pio2+0x3ec>
 801576e:	2900      	cmp	r1, #0
 8015770:	dc2c      	bgt.n	80157cc <__kernel_rem_pio2+0x434>
 8015772:	d045      	beq.n	8015800 <__kernel_rem_pio2+0x468>
 8015774:	f008 0007 	and.w	r0, r8, #7
 8015778:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801577c:	ecbd 8b06 	vpop	{d8-d10}
 8015780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015784:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8015786:	2a03      	cmp	r2, #3
 8015788:	d1f4      	bne.n	8015774 <__kernel_rem_pio2+0x3dc>
 801578a:	aa42      	add	r2, sp, #264	; 0x108
 801578c:	4413      	add	r3, r2
 801578e:	461a      	mov	r2, r3
 8015790:	4619      	mov	r1, r3
 8015792:	4658      	mov	r0, fp
 8015794:	2800      	cmp	r0, #0
 8015796:	f1a1 0108 	sub.w	r1, r1, #8
 801579a:	dc54      	bgt.n	8015846 <__kernel_rem_pio2+0x4ae>
 801579c:	4659      	mov	r1, fp
 801579e:	2901      	cmp	r1, #1
 80157a0:	f1a2 0208 	sub.w	r2, r2, #8
 80157a4:	dc5f      	bgt.n	8015866 <__kernel_rem_pio2+0x4ce>
 80157a6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80158c0 <__kernel_rem_pio2+0x528>
 80157aa:	3308      	adds	r3, #8
 80157ac:	f1bb 0f01 	cmp.w	fp, #1
 80157b0:	dc69      	bgt.n	8015886 <__kernel_rem_pio2+0x4ee>
 80157b2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80157b6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80157ba:	2e00      	cmp	r6, #0
 80157bc:	d16a      	bne.n	8015894 <__kernel_rem_pio2+0x4fc>
 80157be:	ed87 5b00 	vstr	d5, [r7]
 80157c2:	ed87 6b02 	vstr	d6, [r7, #8]
 80157c6:	ed87 7b04 	vstr	d7, [r7, #16]
 80157ca:	e7d3      	b.n	8015774 <__kernel_rem_pio2+0x3dc>
 80157cc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80158c0 <__kernel_rem_pio2+0x528>
 80157d0:	ab42      	add	r3, sp, #264	; 0x108
 80157d2:	441a      	add	r2, r3
 80157d4:	465b      	mov	r3, fp
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	da26      	bge.n	8015828 <__kernel_rem_pio2+0x490>
 80157da:	b35e      	cbz	r6, 8015834 <__kernel_rem_pio2+0x49c>
 80157dc:	eeb1 7b46 	vneg.f64	d7, d6
 80157e0:	ed87 7b00 	vstr	d7, [r7]
 80157e4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80157e8:	aa44      	add	r2, sp, #272	; 0x110
 80157ea:	2301      	movs	r3, #1
 80157ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80157f0:	459b      	cmp	fp, r3
 80157f2:	da22      	bge.n	801583a <__kernel_rem_pio2+0x4a2>
 80157f4:	b10e      	cbz	r6, 80157fa <__kernel_rem_pio2+0x462>
 80157f6:	eeb1 7b47 	vneg.f64	d7, d7
 80157fa:	ed87 7b02 	vstr	d7, [r7, #8]
 80157fe:	e7b9      	b.n	8015774 <__kernel_rem_pio2+0x3dc>
 8015800:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80158c0 <__kernel_rem_pio2+0x528>
 8015804:	ab42      	add	r3, sp, #264	; 0x108
 8015806:	441a      	add	r2, r3
 8015808:	f1bb 0f00 	cmp.w	fp, #0
 801580c:	da05      	bge.n	801581a <__kernel_rem_pio2+0x482>
 801580e:	b10e      	cbz	r6, 8015814 <__kernel_rem_pio2+0x47c>
 8015810:	eeb1 7b47 	vneg.f64	d7, d7
 8015814:	ed87 7b00 	vstr	d7, [r7]
 8015818:	e7ac      	b.n	8015774 <__kernel_rem_pio2+0x3dc>
 801581a:	ed32 6b02 	vldmdb	r2!, {d6}
 801581e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015822:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015826:	e7ef      	b.n	8015808 <__kernel_rem_pio2+0x470>
 8015828:	ed32 7b02 	vldmdb	r2!, {d7}
 801582c:	3b01      	subs	r3, #1
 801582e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8015832:	e7d0      	b.n	80157d6 <__kernel_rem_pio2+0x43e>
 8015834:	eeb0 7b46 	vmov.f64	d7, d6
 8015838:	e7d2      	b.n	80157e0 <__kernel_rem_pio2+0x448>
 801583a:	ecb2 6b02 	vldmia	r2!, {d6}
 801583e:	3301      	adds	r3, #1
 8015840:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015844:	e7d4      	b.n	80157f0 <__kernel_rem_pio2+0x458>
 8015846:	ed91 7b00 	vldr	d7, [r1]
 801584a:	ed91 5b02 	vldr	d5, [r1, #8]
 801584e:	3801      	subs	r0, #1
 8015850:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015854:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015858:	ed81 6b00 	vstr	d6, [r1]
 801585c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015860:	ed81 7b02 	vstr	d7, [r1, #8]
 8015864:	e796      	b.n	8015794 <__kernel_rem_pio2+0x3fc>
 8015866:	ed92 7b00 	vldr	d7, [r2]
 801586a:	ed92 5b02 	vldr	d5, [r2, #8]
 801586e:	3901      	subs	r1, #1
 8015870:	ee37 6b05 	vadd.f64	d6, d7, d5
 8015874:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015878:	ed82 6b00 	vstr	d6, [r2]
 801587c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8015880:	ed82 7b02 	vstr	d7, [r2, #8]
 8015884:	e78b      	b.n	801579e <__kernel_rem_pio2+0x406>
 8015886:	ed33 6b02 	vldmdb	r3!, {d6}
 801588a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801588e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015892:	e78b      	b.n	80157ac <__kernel_rem_pio2+0x414>
 8015894:	eeb1 5b45 	vneg.f64	d5, d5
 8015898:	eeb1 6b46 	vneg.f64	d6, d6
 801589c:	ed87 5b00 	vstr	d5, [r7]
 80158a0:	eeb1 7b47 	vneg.f64	d7, d7
 80158a4:	ed87 6b02 	vstr	d6, [r7, #8]
 80158a8:	e78d      	b.n	80157c6 <__kernel_rem_pio2+0x42e>
 80158aa:	bf00      	nop
 80158ac:	f3af 8000 	nop.w
 80158b0:	00000000 	.word	0x00000000
 80158b4:	41700000 	.word	0x41700000
 80158b8:	00000000 	.word	0x00000000
 80158bc:	3e700000 	.word	0x3e700000
	...

080158c8 <__kernel_sin>:
 80158c8:	ee10 3a90 	vmov	r3, s1
 80158cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158d0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80158d4:	da04      	bge.n	80158e0 <__kernel_sin+0x18>
 80158d6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80158da:	ee17 3a90 	vmov	r3, s15
 80158de:	b35b      	cbz	r3, 8015938 <__kernel_sin+0x70>
 80158e0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80158e4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80158e8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8015940 <__kernel_sin+0x78>
 80158ec:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015948 <__kernel_sin+0x80>
 80158f0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80158f4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8015950 <__kernel_sin+0x88>
 80158f8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80158fc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015958 <__kernel_sin+0x90>
 8015900:	eea7 4b06 	vfma.f64	d4, d7, d6
 8015904:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8015960 <__kernel_sin+0x98>
 8015908:	eea4 7b06 	vfma.f64	d7, d4, d6
 801590c:	b930      	cbnz	r0, 801591c <__kernel_sin+0x54>
 801590e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8015968 <__kernel_sin+0xa0>
 8015912:	eea6 4b07 	vfma.f64	d4, d6, d7
 8015916:	eea4 0b05 	vfma.f64	d0, d4, d5
 801591a:	4770      	bx	lr
 801591c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8015920:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8015924:	eea1 7b04 	vfma.f64	d7, d1, d4
 8015928:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801592c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8015970 <__kernel_sin+0xa8>
 8015930:	eea5 1b07 	vfma.f64	d1, d5, d7
 8015934:	ee30 0b41 	vsub.f64	d0, d0, d1
 8015938:	4770      	bx	lr
 801593a:	bf00      	nop
 801593c:	f3af 8000 	nop.w
 8015940:	5acfd57c 	.word	0x5acfd57c
 8015944:	3de5d93a 	.word	0x3de5d93a
 8015948:	8a2b9ceb 	.word	0x8a2b9ceb
 801594c:	be5ae5e6 	.word	0xbe5ae5e6
 8015950:	57b1fe7d 	.word	0x57b1fe7d
 8015954:	3ec71de3 	.word	0x3ec71de3
 8015958:	19c161d5 	.word	0x19c161d5
 801595c:	bf2a01a0 	.word	0xbf2a01a0
 8015960:	1110f8a6 	.word	0x1110f8a6
 8015964:	3f811111 	.word	0x3f811111
 8015968:	55555549 	.word	0x55555549
 801596c:	bfc55555 	.word	0xbfc55555
 8015970:	55555549 	.word	0x55555549
 8015974:	3fc55555 	.word	0x3fc55555

08015978 <fabs>:
 8015978:	ec51 0b10 	vmov	r0, r1, d0
 801597c:	ee10 2a10 	vmov	r2, s0
 8015980:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015984:	ec43 2b10 	vmov	d0, r2, r3
 8015988:	4770      	bx	lr
 801598a:	0000      	movs	r0, r0
 801598c:	0000      	movs	r0, r0
	...

08015990 <floor>:
 8015990:	ee10 1a90 	vmov	r1, s1
 8015994:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015998:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801599c:	2b13      	cmp	r3, #19
 801599e:	b530      	push	{r4, r5, lr}
 80159a0:	ee10 0a10 	vmov	r0, s0
 80159a4:	ee10 5a10 	vmov	r5, s0
 80159a8:	dc31      	bgt.n	8015a0e <floor+0x7e>
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	da15      	bge.n	80159da <floor+0x4a>
 80159ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015a68 <floor+0xd8>
 80159b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80159b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80159ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159be:	dd07      	ble.n	80159d0 <floor+0x40>
 80159c0:	2900      	cmp	r1, #0
 80159c2:	da4e      	bge.n	8015a62 <floor+0xd2>
 80159c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80159c8:	4318      	orrs	r0, r3
 80159ca:	d001      	beq.n	80159d0 <floor+0x40>
 80159cc:	4928      	ldr	r1, [pc, #160]	; (8015a70 <floor+0xe0>)
 80159ce:	2000      	movs	r0, #0
 80159d0:	460b      	mov	r3, r1
 80159d2:	4602      	mov	r2, r0
 80159d4:	ec43 2b10 	vmov	d0, r2, r3
 80159d8:	e020      	b.n	8015a1c <floor+0x8c>
 80159da:	4a26      	ldr	r2, [pc, #152]	; (8015a74 <floor+0xe4>)
 80159dc:	411a      	asrs	r2, r3
 80159de:	ea01 0402 	and.w	r4, r1, r2
 80159e2:	4304      	orrs	r4, r0
 80159e4:	d01a      	beq.n	8015a1c <floor+0x8c>
 80159e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015a68 <floor+0xd8>
 80159ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 80159ee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80159f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f6:	ddeb      	ble.n	80159d0 <floor+0x40>
 80159f8:	2900      	cmp	r1, #0
 80159fa:	bfbe      	ittt	lt
 80159fc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8015a00:	fa40 f303 	asrlt.w	r3, r0, r3
 8015a04:	18c9      	addlt	r1, r1, r3
 8015a06:	ea21 0102 	bic.w	r1, r1, r2
 8015a0a:	2000      	movs	r0, #0
 8015a0c:	e7e0      	b.n	80159d0 <floor+0x40>
 8015a0e:	2b33      	cmp	r3, #51	; 0x33
 8015a10:	dd05      	ble.n	8015a1e <floor+0x8e>
 8015a12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015a16:	d101      	bne.n	8015a1c <floor+0x8c>
 8015a18:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015a1c:	bd30      	pop	{r4, r5, pc}
 8015a1e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8015a22:	f04f 32ff 	mov.w	r2, #4294967295
 8015a26:	40e2      	lsrs	r2, r4
 8015a28:	4202      	tst	r2, r0
 8015a2a:	d0f7      	beq.n	8015a1c <floor+0x8c>
 8015a2c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8015a68 <floor+0xd8>
 8015a30:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015a34:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a3c:	ddc8      	ble.n	80159d0 <floor+0x40>
 8015a3e:	2900      	cmp	r1, #0
 8015a40:	da02      	bge.n	8015a48 <floor+0xb8>
 8015a42:	2b14      	cmp	r3, #20
 8015a44:	d103      	bne.n	8015a4e <floor+0xbe>
 8015a46:	3101      	adds	r1, #1
 8015a48:	ea20 0002 	bic.w	r0, r0, r2
 8015a4c:	e7c0      	b.n	80159d0 <floor+0x40>
 8015a4e:	2401      	movs	r4, #1
 8015a50:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015a54:	fa04 f303 	lsl.w	r3, r4, r3
 8015a58:	4418      	add	r0, r3
 8015a5a:	42a8      	cmp	r0, r5
 8015a5c:	bf38      	it	cc
 8015a5e:	1909      	addcc	r1, r1, r4
 8015a60:	e7f2      	b.n	8015a48 <floor+0xb8>
 8015a62:	2000      	movs	r0, #0
 8015a64:	4601      	mov	r1, r0
 8015a66:	e7b3      	b.n	80159d0 <floor+0x40>
 8015a68:	8800759c 	.word	0x8800759c
 8015a6c:	7e37e43c 	.word	0x7e37e43c
 8015a70:	bff00000 	.word	0xbff00000
 8015a74:	000fffff 	.word	0x000fffff

08015a78 <scalbn>:
 8015a78:	ee10 1a90 	vmov	r1, s1
 8015a7c:	b510      	push	{r4, lr}
 8015a7e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8015a82:	b98c      	cbnz	r4, 8015aa8 <scalbn+0x30>
 8015a84:	ee10 3a10 	vmov	r3, s0
 8015a88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015a8c:	430b      	orrs	r3, r1
 8015a8e:	d011      	beq.n	8015ab4 <scalbn+0x3c>
 8015a90:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8015b58 <scalbn+0xe0>
 8015a94:	4b3c      	ldr	r3, [pc, #240]	; (8015b88 <scalbn+0x110>)
 8015a96:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015a9a:	4298      	cmp	r0, r3
 8015a9c:	da0b      	bge.n	8015ab6 <scalbn+0x3e>
 8015a9e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8015b60 <scalbn+0xe8>
 8015aa2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015aa6:	e005      	b.n	8015ab4 <scalbn+0x3c>
 8015aa8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8015aac:	429c      	cmp	r4, r3
 8015aae:	d107      	bne.n	8015ac0 <scalbn+0x48>
 8015ab0:	ee30 0b00 	vadd.f64	d0, d0, d0
 8015ab4:	bd10      	pop	{r4, pc}
 8015ab6:	ee10 1a90 	vmov	r1, s1
 8015aba:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8015abe:	3c36      	subs	r4, #54	; 0x36
 8015ac0:	4404      	add	r4, r0
 8015ac2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8015ac6:	429c      	cmp	r4, r3
 8015ac8:	dd0d      	ble.n	8015ae6 <scalbn+0x6e>
 8015aca:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8015b68 <scalbn+0xf0>
 8015ace:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8015b70 <scalbn+0xf8>
 8015ad2:	eeb0 6b47 	vmov.f64	d6, d7
 8015ad6:	ee10 3a90 	vmov	r3, s1
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	fe27 7b05 	vselge.f64	d7, d7, d5
 8015ae0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8015ae4:	e7e6      	b.n	8015ab4 <scalbn+0x3c>
 8015ae6:	2c00      	cmp	r4, #0
 8015ae8:	dd0a      	ble.n	8015b00 <scalbn+0x88>
 8015aea:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8015aee:	ec53 2b10 	vmov	r2, r3, d0
 8015af2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8015af6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8015afa:	ec43 2b10 	vmov	d0, r2, r3
 8015afe:	e7d9      	b.n	8015ab4 <scalbn+0x3c>
 8015b00:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8015b04:	da19      	bge.n	8015b3a <scalbn+0xc2>
 8015b06:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015b0a:	4298      	cmp	r0, r3
 8015b0c:	ee10 3a90 	vmov	r3, s1
 8015b10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8015b14:	dd09      	ble.n	8015b2a <scalbn+0xb2>
 8015b16:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8015b68 <scalbn+0xf0>
 8015b1a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8015b70 <scalbn+0xf8>
 8015b1e:	eeb0 7b40 	vmov.f64	d7, d0
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8015b28:	e7bb      	b.n	8015aa2 <scalbn+0x2a>
 8015b2a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8015b60 <scalbn+0xe8>
 8015b2e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8015b78 <scalbn+0x100>
 8015b32:	eeb0 7b40 	vmov.f64	d7, d0
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	e7f4      	b.n	8015b24 <scalbn+0xac>
 8015b3a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8015b3e:	ec53 2b10 	vmov	r2, r3, d0
 8015b42:	3436      	adds	r4, #54	; 0x36
 8015b44:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8015b48:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8015b4c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8015b80 <scalbn+0x108>
 8015b50:	ec43 2b10 	vmov	d0, r2, r3
 8015b54:	e7a5      	b.n	8015aa2 <scalbn+0x2a>
 8015b56:	bf00      	nop
 8015b58:	00000000 	.word	0x00000000
 8015b5c:	43500000 	.word	0x43500000
 8015b60:	c2f8f359 	.word	0xc2f8f359
 8015b64:	01a56e1f 	.word	0x01a56e1f
 8015b68:	8800759c 	.word	0x8800759c
 8015b6c:	7e37e43c 	.word	0x7e37e43c
 8015b70:	8800759c 	.word	0x8800759c
 8015b74:	fe37e43c 	.word	0xfe37e43c
 8015b78:	c2f8f359 	.word	0xc2f8f359
 8015b7c:	81a56e1f 	.word	0x81a56e1f
 8015b80:	00000000 	.word	0x00000000
 8015b84:	3c900000 	.word	0x3c900000
 8015b88:	ffff3cb0 	.word	0xffff3cb0

08015b8c <_init>:
 8015b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b8e:	bf00      	nop
 8015b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b92:	bc08      	pop	{r3}
 8015b94:	469e      	mov	lr, r3
 8015b96:	4770      	bx	lr

08015b98 <_fini>:
 8015b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b9a:	bf00      	nop
 8015b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015b9e:	bc08      	pop	{r3}
 8015ba0:	469e      	mov	lr, r3
 8015ba2:	4770      	bx	lr
