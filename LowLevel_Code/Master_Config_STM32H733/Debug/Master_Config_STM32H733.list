
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000168a4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08016b78  08016b78  00026b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016e68  08016e68  00026e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016e70  08016e70  00026e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016e74  08016e74  00026e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08016e78  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        00000034  20000094  08016f0c  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000013b0  200000c8  08016f40  000300c8  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20001478  08016f40  00031478  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002bfd2  00000000  00000000  000300f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004a8a  00000000  00000000  0005c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d90  00000000  00000000  00060b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bb0  00000000  00000000  000628e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039786  00000000  00000000  00064498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002c34a  00000000  00000000  0009dc1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cfa3  00000000  00000000  000c9f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00236f0b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000080d0  00000000  00000000  00236f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000c8 	.word	0x200000c8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08016b5c 	.word	0x08016b5c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000cc 	.word	0x200000cc
 800030c:	08016b5c 	.word	0x08016b5c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

double EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8ef 	bl	8000808 <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	89db      	ldrh	r3, [r3, #14]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000658 <EncPulse2Rad_Read+0x44>
 800063a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	ed93 7b08 	vldr	d7, [r3, #32]
 8000648:	ee36 7b47 	vsub.f64	d7, d6, d7
//	return (Enc->Position * 0.000383495f);
}
 800064c:	eeb0 0b47 	vmov.f64	d0, d7
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	39c90fd4 	.word	0x39c90fd4
 800065c:	00000000 	.word	0x00000000

08000660 <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,double offset) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6178      	str	r0, [r7, #20]
 8000668:	6139      	str	r1, [r7, #16]
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	ed87 0b00 	vstr	d0, [r7]
	dev->hspiHandle = hspiHandle;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	8c3a      	ldrh	r2, [r7, #32]
 8000688:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 800068a:	8c3b      	ldrh	r3, [r7, #32]
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f00b fb63 	bl	800bd5c <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2200      	movs	r2, #0
 800069a:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2200      	movs	r2, #0
 80006a0:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	2200      	movs	r2, #0
 80006a6:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	2200      	movs	r2, #0
 80006ac:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2200      	movs	r2, #0
 80006b2:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2200      	movs	r2, #0
 80006b8:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2200      	movs	r2, #0
 80006be:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2200      	movs	r2, #0
 80006c4:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2200      	movs	r2, #0
 80006ca:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2200      	movs	r2, #0
 80006d0:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006d2:	ed97 7b00 	vldr	d7, [r7]
 80006d6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80006f0 <AS5047U_init+0x90>
 80006da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	ed83 7b08 	vstr	d7, [r3, #32]
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	f3af 8000 	nop.w
 80006f0:	80000000 	.word	0x80000000
 80006f4:	3f3921fa 	.word	0x3f3921fa

080006f8 <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
 8000704:	4613      	mov	r3, r2
 8000706:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <AS5047U_Write+0x10c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	723b      	strb	r3, [r7, #8]
 800070e:	f107 0309 	add.w	r3, r7, #9
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000722:	b2db      	uxtb	r3, r3
 8000724:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f107 0108 	add.w	r1, r7, #8
 8000734:	2202      	movs	r2, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f008 fd9c 	bl	8009274 <HAL_CRC_Calculate>
 800073c:	4603      	mov	r3, r0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6898      	ldr	r0, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	899b      	ldrh	r3, [r3, #12]
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	f00b fb03 	bl	800bd5c <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
 800075a:	e002      	b.n	8000762 <AS5047U_Write+0x6a>
 800075c:	89fb      	ldrh	r3, [r7, #14]
 800075e:	3301      	adds	r3, #1
 8000760:	81fb      	strh	r3, [r7, #14]
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	f240 2226 	movw	r2, #550	; 0x226
 8000768:	4293      	cmp	r3, r2
 800076a:	d9f7      	bls.n	800075c <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	f107 0108 	add.w	r1, r7, #8
 8000774:	2301      	movs	r3, #1
 8000776:	2203      	movs	r2, #3
 8000778:	f010 f804 	bl	8010784 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6898      	ldr	r0, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f00b fae8 	bl	800bd5c <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b29b      	uxth	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f107 0108 	add.w	r1, r7, #8
 80007a4:	2202      	movs	r2, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f008 fd64 	bl	8009274 <HAL_CRC_Calculate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6898      	ldr	r0, [r3, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	899b      	ldrh	r3, [r3, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	f00b facb 	bl	800bd5c <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007c6:	2300      	movs	r3, #0
 80007c8:	81bb      	strh	r3, [r7, #12]
 80007ca:	e002      	b.n	80007d2 <AS5047U_Write+0xda>
 80007cc:	89bb      	ldrh	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	81bb      	strh	r3, [r7, #12]
 80007d2:	89bb      	ldrh	r3, [r7, #12]
 80007d4:	f240 2226 	movw	r2, #550	; 0x226
 80007d8:	4293      	cmp	r3, r2
 80007da:	d9f7      	bls.n	80007cc <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f107 0108 	add.w	r1, r7, #8
 80007e4:	2301      	movs	r3, #1
 80007e6:	2203      	movs	r2, #3
 80007e8:	f00f ffcc 	bl	8010784 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6898      	ldr	r0, [r3, #8]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f00b fab0 	bl	800bd5c <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08016b78 	.word	0x08016b78

08000808 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 8000814:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000818:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 800081a:	2300      	movs	r3, #0
 800081c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 800081e:	2300      	movs	r3, #0
 8000820:	82fb      	strh	r3, [r7, #22]
 8000822:	e002      	b.n	800082a <AS5047U_Position_Highspeed_Read+0x22>
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	3301      	adds	r3, #1
 8000828:	82fb      	strh	r3, [r7, #22]
 800082a:	8afb      	ldrh	r3, [r7, #22]
 800082c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000830:	d9f8      	bls.n	8000824 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6898      	ldr	r0, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	899b      	ldrh	r3, [r3, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	f00b fa8d 	bl	800bd5c <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f107 0110 	add.w	r1, r7, #16
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	2202      	movs	r2, #2
 800084e:	f00f ff99 	bl	8010784 <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6898      	ldr	r0, [r3, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	899b      	ldrh	r3, [r3, #12]
 800085a:	2201      	movs	r2, #1
 800085c:	4619      	mov	r1, r3
 800085e:	f00b fa7d 	bl	800bd5c <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000862:	2300      	movs	r3, #0
 8000864:	82bb      	strh	r3, [r7, #20]
 8000866:	e002      	b.n	800086e <AS5047U_Position_Highspeed_Read+0x66>
 8000868:	8abb      	ldrh	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	82bb      	strh	r3, [r7, #20]
 800086e:	8abb      	ldrh	r3, [r7, #20]
 8000870:	f240 2226 	movw	r2, #550	; 0x226
 8000874:	4293      	cmp	r3, r2
 8000876:	d9f7      	bls.n	8000868 <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6898      	ldr	r0, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	899b      	ldrh	r3, [r3, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f00b fa6a 	bl	800bd5c <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	f107 010c 	add.w	r1, r7, #12
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2202      	movs	r2, #2
 8000894:	f010 f968 	bl	8010b68 <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6898      	ldr	r0, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	899b      	ldrh	r3, [r3, #12]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	f00b fa5a 	bl	800bd5c <HAL_GPIO_WritePin>
	if (dir == 1){
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d111      	bne.n	80008d2 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008c8:	4053      	eors	r3, r2
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	81da      	strh	r2, [r3, #14]
 80008d0:	e00c      	b.n	80008ec <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008dc:	b21a      	sxth	r2, r3
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	89db      	ldrh	r3, [r3, #14]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Tmp75_Init>:
#include "Tmp75.h"

//I2C_HandleTypeDef hi2c2;

void Tmp75_Init(I2C_HandleTypeDef *hi2c) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	/*configuration register = 0x01
	 [res][res][OS][FQ][POL][TM][SD][RES][RES][RES][RES][RES][RES][RES][RES][RES]
	   0    0   1   0    0    0   0   0    0    0    0    0    0    0    0    0   =  0x2000
	 */
	Write_Register(0x01, 0x2000,hi2c);
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000906:	2001      	movs	r0, #1
 8000908:	f000 f804 	bl	8000914 <Write_Register>

}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <Write_Register>:

void Write_Register(uint8_t register_pointer, uint16_t register_value, I2C_HandleTypeDef *hi2c) {
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af02      	add	r7, sp, #8
 800091a:	4603      	mov	r3, r0
 800091c:	603a      	str	r2, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
 8000920:	460b      	mov	r3, r1
 8000922:	80bb      	strh	r3, [r7, #4]
	uint8_t data[3];
	data[0] = register_pointer;     // TMP75_ADDR
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	733b      	strb	r3, [r7, #12]
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8000928:	88bb      	ldrh	r3, [r7, #4]
 800092a:	0a1b      	lsrs	r3, r3, #8
 800092c:	b29b      	uxth	r3, r3
 800092e:	b2db      	uxtb	r3, r3
 8000930:	737b      	strb	r3, [r7, #13]
	data[2] = register_value;       // LSB byte of 16bit data
 8000932:	88bb      	ldrh	r3, [r7, #4]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, data, 3, 100);
 8000938:	f107 020c 	add.w	r2, r7, #12
 800093c:	2364      	movs	r3, #100	; 0x64
 800093e:	9300      	str	r3, [sp, #0]
 8000940:	2303      	movs	r3, #3
 8000942:	2192      	movs	r1, #146	; 0x92
 8000944:	6838      	ldr	r0, [r7, #0]
 8000946:	f00b facd 	bl	800bee4 <HAL_I2C_Master_Transmit>

}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, I2C_HandleTypeDef *hi2c) {
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af02      	add	r7, sp, #8
 8000958:	4603      	mov	r3, r0
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
 800095e:	73fb      	strb	r3, [r7, #15]
	// first set the register pointer to the register wanted to be read
	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, &register_pointer, 1, 100);
 8000960:	f107 020f 	add.w	r2, r7, #15
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	2192      	movs	r1, #146	; 0x92
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f00b fab9 	bl	800bee4 <HAL_I2C_Master_Transmit>

	// receive the 2 x 8bit data into the receive buffer
	HAL_I2C_Master_Receive(hi2c, TMP75_ADDR, receive_buffer, 2, 100);
 8000972:	2364      	movs	r3, #100	; 0x64
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2302      	movs	r3, #2
 8000978:	68ba      	ldr	r2, [r7, #8]
 800097a:	2192      	movs	r1, #146	; 0x92
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f00b fba5 	bl	800c0cc <HAL_I2C_Master_Receive>
}
 8000982:	bf00      	nop
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <One_ShotTemp>:

void One_ShotTemp(I2C_HandleTypeDef *hi2c) {
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
	//One-Shot register = 0x04 and write any value to start aconversion
	Write_Register(0x04, 0x0000,hi2c);
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	2100      	movs	r1, #0
 8000996:	2004      	movs	r0, #4
 8000998:	f7ff ffbc 	bl	8000914 <Write_Register>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	0000      	movs	r0, r0
	...

080009a8 <Read_TempCelsius>:

void Read_TempCelsius(double *receive_buffer,I2C_HandleTypeDef *hi2c) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	uint8_t buffer[2];
	uint16_t TempSum;
	Read_Register(0x00, buffer,hi2c);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	4619      	mov	r1, r3
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff ffc9 	bl	8000952 <Read_Register>
	TempSum = (((buffer[0] << 8) | buffer[1]) >> 4);
 80009c0:	7b3b      	ldrb	r3, [r7, #12]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	7b7a      	ldrb	r2, [r7, #13]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	111b      	asrs	r3, r3, #4
 80009ca:	81fb      	strh	r3, [r7, #14]
	*receive_buffer = (TempSum * FTMP75_TEMP_AD_STEP);
 80009cc:	89fb      	ldrh	r3, [r7, #14]
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009d6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80009f0 <Read_TempCelsius+0x48>
 80009da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	ed83 7b00 	vstr	d7, [r3]
}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	f3af 8000 	nop.w
 80009f0:	00000000 	.word	0x00000000
 80009f4:	3fb00000 	.word	0x3fb00000

080009f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2224      	movs	r2, #36	; 0x24
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f015 f873 	bl	8015afc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a16:	4b33      	ldr	r3, [pc, #204]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a18:	4a33      	ldr	r2, [pc, #204]	; (8000ae8 <MX_ADC1_Init+0xf0>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000a1c:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a1e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000a22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a24:	4b2f      	ldr	r3, [pc, #188]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a76:	481b      	ldr	r0, [pc, #108]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a78:	f006 fc10 	bl	800729c <HAL_ADC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a82:	f004 fa89 	bl	8004f98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8000a86:	2305      	movs	r3, #5
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000a9a:	f008 f995 	bl	8008dc8 <HAL_ADCEx_MultiModeConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000aa4:	f004 fa78 	bl	8004f98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_ADC1_Init+0xf4>)
 8000aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aac:	2306      	movs	r3, #6
 8000aae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ab4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ab8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aba:	2304      	movs	r3, #4
 8000abc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_ADC1_Init+0xec>)
 8000ace:	f007 f989 	bl	8007de4 <HAL_ADC_ConfigChannel>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ad8:	f004 fa5e 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3730      	adds	r7, #48	; 0x30
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000e4 	.word	0x200000e4
 8000ae8:	40022000 	.word	0x40022000
 8000aec:	21800100 	.word	0x21800100

08000af0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2224      	movs	r2, #36	; 0x24
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f014 fffd 	bl	8015afc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b02:	4b28      	ldr	r3, [pc, #160]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b04:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <MX_ADC2_Init+0xb8>)
 8000b06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000b08:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b0a:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000b0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b1e:	2204      	movs	r2, #4
 8000b20:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b56:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b58:	f006 fba0 	bl	800729c <HAL_ADC_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000b62:	f004 fa19 	bl	8004f98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_ADC2_Init+0xbc>)
 8000b68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b6a:	2306      	movs	r3, #6
 8000b6c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b72:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b78:	2304      	movs	r3, #4
 8000b7a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_ADC2_Init+0xb4>)
 8000b8c:	f007 f92a 	bl	8007de4 <HAL_ADC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b96:	f004 f9ff 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3728      	adds	r7, #40	; 0x28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000154 	.word	0x20000154
 8000ba8:	40022100 	.word	0x40022100
 8000bac:	21800100 	.word	0x21800100

08000bb0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2224      	movs	r2, #36	; 0x24
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f014 ff9d 	bl	8015afc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bc4:	4a32      	ldr	r2, [pc, #200]	; (8000c90 <MX_ADC3_Init+0xe0>)
 8000bc6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000bd4:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c06:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c26:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000c34:	4815      	ldr	r0, [pc, #84]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c36:	f006 fb31 	bl	800729c <HAL_ADC_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000c40:	f004 f9aa 	bl	8004f98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_ADC3_Init+0xe4>)
 8000c46:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c48:	2306      	movs	r3, #6
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000c4c:	2306      	movs	r3, #6
 8000c4e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c50:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c54:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c56:	2304      	movs	r3, #4
 8000c58:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4619      	mov	r1, r3
 8000c72:	4806      	ldr	r0, [pc, #24]	; (8000c8c <MX_ADC3_Init+0xdc>)
 8000c74:	f007 f8b6 	bl	8007de4 <HAL_ADC_ConfigChannel>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000c7e:	f004 f98b 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	3728      	adds	r7, #40	; 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001c4 	.word	0x200001c4
 8000c90:	58026000 	.word	0x58026000
 8000c94:	c7520000 	.word	0xc7520000

08000c98 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08c      	sub	sp, #48	; 0x30
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 031c 	add.w	r3, r7, #28
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a47      	ldr	r2, [pc, #284]	; (8000dd4 <HAL_ADC_MspInit+0x13c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d133      	bne.n	8000d22 <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cba:	4b47      	ldr	r3, [pc, #284]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	4a45      	ldr	r2, [pc, #276]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000cc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d10e      	bne.n	8000cea <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ccc:	4b43      	ldr	r3, [pc, #268]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cd2:	4a42      	ldr	r2, [pc, #264]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cd4:	f043 0320 	orr.w	r3, r3, #32
 8000cd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cdc:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfa:	4b38      	ldr	r3, [pc, #224]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	617b      	str	r3, [r7, #20]
 8000d06:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d08:	2320      	movs	r3, #32
 8000d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4831      	ldr	r0, [pc, #196]	; (8000de0 <HAL_ADC_MspInit+0x148>)
 8000d1c:	f00a fe76 	bl	800ba0c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d20:	e054      	b.n	8000dcc <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a2f      	ldr	r2, [pc, #188]	; (8000de4 <HAL_ADC_MspInit+0x14c>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d133      	bne.n	8000d94 <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	4a29      	ldr	r2, [pc, #164]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000d34:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d36:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <HAL_ADC_MspInit+0x140>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10e      	bne.n	8000d5c <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d44:	4a25      	ldr	r2, [pc, #148]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d46:	f043 0320 	orr.w	r3, r3, #32
 8000d4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d54:	f003 0320 	and.w	r3, r3, #32
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d62:	4a1e      	ldr	r2, [pc, #120]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d64:	f043 0304 	orr.w	r3, r3, #4
 8000d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d72:	f003 0304 	and.w	r3, r3, #4
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7a:	2320      	movs	r3, #32
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4814      	ldr	r0, [pc, #80]	; (8000de0 <HAL_ADC_MspInit+0x148>)
 8000d8e:	f00a fe3d 	bl	800ba0c <HAL_GPIO_Init>
}
 8000d92:	e01b      	b.n	8000dcc <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <HAL_ADC_MspInit+0x150>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d116      	bne.n	8000dcc <HAL_ADC_MspInit+0x134>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_ADC_MspInit+0x144>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	207f      	movs	r0, #127	; 0x7f
 8000dc2:	f008 f9be 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000dc6:	207f      	movs	r0, #127	; 0x7f
 8000dc8:	f008 f9d5 	bl	8009176 <HAL_NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3730      	adds	r7, #48	; 0x30
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40022000 	.word	0x40022000
 8000dd8:	20000234 	.word	0x20000234
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	58020800 	.word	0x58020800
 8000de4:	40022100 	.word	0x40022100
 8000de8:	58026000 	.word	0x58026000

08000dec <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	68ba      	ldr	r2, [r7, #8]
 8000dfe:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	683a      	ldr	r2, [r7, #0]
 8000e0a:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	8b3a      	ldrh	r2, [r7, #24]
 8000e10:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e20:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	f010 fc7d 	bl	801172c <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <Step_Driver>:


void Step_Driver(SteperParameter *step, double f_driver) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	ed87 0b00 	vstr	d0, [r7]
	double abs_f_driver = fabs(f_driver);
 8000e5c:	ed97 7b00 	vldr	d7, [r7]
 8000e60:	eeb0 7bc7 	vabs.f64	d7, d7
 8000e64:	ed87 7b06 	vstr	d7, [r7, #24]
	uint16_t reg_out;
	if (abs_f_driver <= 7) {
 8000e68:	ed97 7b06 	vldr	d7, [r7, #24]
 8000e6c:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 8000e70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e78:	d80e      	bhi.n	8000e98 <Step_Driver+0x48>
		reg_out = 50000;
 8000e7a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000e7e:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = 50000;
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2200      	movs	r2, #0
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
 8000e96:	e033      	b.n	8000f00 <Step_Driver+0xb0>
	} else if (abs_f_driver < 10) {
 8000e98:	ed97 7b06 	vldr	d7, [r7, #24]
 8000e9c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8000ea0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea8:	d50f      	bpl.n	8000eca <Step_Driver+0x7a>
		reg_out = 50000;
 8000eaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000eae:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	8afa      	ldrh	r2, [r7, #22]
 8000eb8:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000eba:	8afb      	ldrh	r3, [r7, #22]
 8000ebc:	085b      	lsrs	r3, r3, #1
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec8:	e01a      	b.n	8000f00 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	89db      	ldrh	r3, [r3, #14]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000ed6:	ed97 6b06 	vldr	d6, [r7, #24]
 8000eda:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000ede:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ee2:	ee17 3a90 	vmov	r3, s15
 8000ee6:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	8afa      	ldrh	r2, [r7, #22]
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000ef2:	8afb      	ldrh	r3, [r7, #22]
 8000ef4:	085b      	lsrs	r3, r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000f00:	ed97 7b00 	vldr	d7, [r7]
 8000f04:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0c:	db09      	blt.n	8000f22 <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6898      	ldr	r0, [r3, #8]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	8999      	ldrh	r1, [r3, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	7c1b      	ldrb	r3, [r3, #16]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f00a ff1e 	bl	800bd5c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000f20:	e00b      	b.n	8000f3a <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6898      	ldr	r0, [r3, #8]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	8999      	ldrh	r1, [r3, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	7c1b      	ldrb	r3, [r3, #16]
 8000f2e:	f083 0301 	eor.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	461a      	mov	r2, r3
 8000f36:	f00a ff11 	bl	800bd5c <HAL_GPIO_WritePin>
}
 8000f3a:	bf00      	nop
 8000f3c:	3720      	adds	r7, #32
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <Servo_init>:

/*
 * Servo Drive init
 */
void Servo_init(ServoParameter *Servo,TIM_HandleTypeDef *htim,
		uint32_t Channel){
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
	Servo->htim = htim;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	601a      	str	r2, [r3, #0]
	Servo->Channel = Channel;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(Servo->htim, Servo->Channel);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	4619      	mov	r1, r3
 8000f64:	4610      	mov	r0, r2
 8000f66:	f010 fbe1 	bl	801172c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d106      	bne.n	8000f80 <Servo_init+0x3e>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f240 52db 	movw	r2, #1499	; 0x5db
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f7e:	e031      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d106      	bne.n	8000f96 <Servo_init+0x54>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	f240 53db 	movw	r3, #1499	; 0x5db
 8000f92:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000f94:	e026      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d106      	bne.n	8000fac <Servo_init+0x6a>
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fa8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000faa:	e01b      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	2b0c      	cmp	r3, #12
 8000fb2:	d106      	bne.n	8000fc2 <Servo_init+0x80>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fc0:	e010      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	2b10      	cmp	r3, #16
 8000fc8:	d106      	bne.n	8000fd8 <Servo_init+0x96>
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000fd6:	e005      	b.n	8000fe4 <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f240 53db 	movw	r3, #1499	; 0x5db
 8000fe2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <Servo_Drive>:

/*
 * Servo Drive Function
 * Deg Range (0 -> 180)
 */
void Servo_Drive(ServoParameter *Servo,uint8_t Deg){
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	70fb      	strb	r3, [r7, #3]
	uint16_t Pulse_in  =  (uint16_t)((Deg * 8.3333333f) +499);
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001002:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001098 <Servo_Drive+0xac>
 8001006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800100a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800109c <Servo_Drive+0xb0>
 800100e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001016:	ee17 3a90 	vmov	r3, s15
 800101a:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d105      	bne.n	8001030 <Servo_Drive+0x44>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	89fa      	ldrh	r2, [r7, #14]
 800102c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800102e:	e02c      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b04      	cmp	r3, #4
 8001036:	d105      	bne.n	8001044 <Servo_Drive+0x58>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001042:	e022      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b08      	cmp	r3, #8
 800104a:	d105      	bne.n	8001058 <Servo_Drive+0x6c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001056:	e018      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d105      	bne.n	800106c <Servo_Drive+0x80>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	6413      	str	r3, [r2, #64]	; 0x40
}
 800106a:	e00e      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b10      	cmp	r3, #16
 8001072:	d105      	bne.n	8001080 <Servo_Drive+0x94>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800107e:	e004      	b.n	800108a <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	89fb      	ldrh	r3, [r7, #14]
 8001088:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	41055555 	.word	0x41055555
 800109c:	43f98000 	.word	0x43f98000

080010a0 <Traj_Coeff_Cal>:

void Traj_Coeff_Cal(TrajParameter *Traj, double T, double Pos_Final,
  double Pos_Now, double Vel_Final, double Vel_Now) {
 80010a0:	b480      	push	{r7}
 80010a2:	b09b      	sub	sp, #108	; 0x6c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80010a8:	ed87 0b08 	vstr	d0, [r7, #32]
 80010ac:	ed87 1b06 	vstr	d1, [r7, #24]
 80010b0:	ed87 2b04 	vstr	d2, [r7, #16]
 80010b4:	ed87 3b02 	vstr	d3, [r7, #8]
 80010b8:	ed87 4b00 	vstr	d4, [r7]
 Traj->T = T;
 80010bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80010c2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 double T_P2 = T * T;
 80010c6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010ca:	ee27 7b07 	vmul.f64	d7, d7, d7
 80010ce:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 double T_P3 = T_P2 * T;
 80010d2:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80010d6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010de:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 double T_P4 = T_P3 * T;
 80010e2:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80010e6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010ee:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 double T_P5 = T_P4 * T;
 80010f2:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80010f6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80010fe:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 double ds = Pos_Now - Pos_Final;
 8001102:	ed97 6b04 	vldr	d6, [r7, #16]
 8001106:	ed97 7b06 	vldr	d7, [r7, #24]
 800110a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800110e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 double tfv0 = T * Vel_Now;
 8001112:	ed97 6b08 	vldr	d6, [r7, #32]
 8001116:	ed97 7b00 	vldr	d7, [r7]
 800111a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800111e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 double tfv1 = T * Vel_Final;
 8001122:	ed97 6b08 	vldr	d6, [r7, #32]
 8001126:	ed97 7b02 	vldr	d7, [r7, #8]
 800112a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800112e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 Traj->TrajCoef[0] = Pos_Now;
 8001132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001138:	e9c1 2300 	strd	r2, r3, [r1]
 Traj->TrajCoef[1] = Vel_Now;
 800113c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800113e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001142:	e9c1 2302 	strd	r2, r3, [r1, #8]
 Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0 + 2*tfv1)) / T_P3;
 8001146:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800114a:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800114e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001152:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001156:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800115a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800115e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001162:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001166:	ee37 7b07 	vadd.f64	d7, d7, d7
 800116a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800116e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001172:	eeb1 5b47 	vneg.f64	d5, d7
 8001176:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800117a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800117e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001180:	ed83 7b06 	vstr	d7, [r3, #24]
 Traj->TrajCoef[4] = (15 * ds + 8 * tfv0 + 7*tfv1) / T_P4;
 8001184:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001188:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
 800118c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001190:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001194:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001198:	ee27 7b05 	vmul.f64	d7, d7, d5
 800119c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011a0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80011a4:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80011a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80011ac:	ee36 5b07 	vadd.f64	d5, d6, d7
 80011b0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80011b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ba:	ed83 7b08 	vstr	d7, [r3, #32]
 Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0 + tfv1)) / T_P5;
 80011be:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80011c2:	ee37 6b07 	vadd.f64	d6, d7, d7
 80011c6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80011ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011ce:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80011d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011d6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80011da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011de:	eeb1 5b47 	vneg.f64	d5, d7
 80011e2:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80011e6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80011ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ec:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80011f0:	bf00      	nop
 80011f2:	376c      	adds	r7, #108	; 0x6c
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <TrajFollow>:

void TrajFollow(TrajParameter *Traj, double traj_t[5], double *Position,
		double *Velocity) {
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	ed93 6b00 	vldr	d6, [r3]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	ed93 5b02 	vldr	d5, [r3, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	ed93 7b00 	vldr	d7, [r3]
 800121c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001220:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	ed93 5b06 	vldr	d5, [r3, #24]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	3310      	adds	r3, #16
 800122e:	ed93 7b00 	vldr	d7, [r3]
 8001232:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001236:	ee36 6b07 	vadd.f64	d6, d6, d7
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	ed93 5b08 	vldr	d5, [r3, #32]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3318      	adds	r3, #24
 8001244:	ed93 7b00 	vldr	d7, [r3]
 8001248:	ee25 7b07 	vmul.f64	d7, d5, d7
 800124c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	3320      	adds	r3, #32
 800125a:	ed93 7b00 	vldr	d7, [r3]
 800125e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001262:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	ed83 7b00 	vstr	d7, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	ed93 6b02 	vldr	d6, [r3, #8]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	ed93 7b06 	vldr	d7, [r3, #24]
 8001278:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800127c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	3308      	adds	r3, #8
 8001284:	ed93 7b00 	vldr	d7, [r3]
 8001288:	ee25 7b07 	vmul.f64	d7, d5, d7
 800128c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	ed93 7b08 	vldr	d7, [r3, #32]
 8001296:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800129a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3310      	adds	r3, #16
 80012a2:	ed93 7b00 	vldr	d7, [r3]
 80012a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012aa:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80012b4:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80012b8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3318      	adds	r3, #24
 80012c0:	ed93 7b00 	vldr	d7, [r3]
 80012c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80012c8:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	ed83 7b00 	vstr	d7, [r3]
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6178      	str	r0, [r7, #20]
 80012e8:	ed87 0b02 	vstr	d0, [r7, #8]
 80012ec:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 80012f0:	6979      	ldr	r1, [r7, #20]
 80012f2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012f6:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->R = R; 			// Adjustable
 80012fa:	6979      	ldr	r1, [r7, #20]
 80012fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001300:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalman->x1 = 0.0;
 8001304:	6979      	ldr	r1, [r7, #20]
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	f04f 0300 	mov.w	r3, #0
 800130e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = 0.0;
 8001312:	6979      	ldr	r1, [r7, #20]
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = 0.05;
 8001320:	6979      	ldr	r1, [r7, #20]
 8001322:	a30f      	add	r3, pc, #60	; (adr r3, 8001360 <Kalman_init+0x80>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = 0.05;
 800132c:	6979      	ldr	r1, [r7, #20]
 800132e:	a30c      	add	r3, pc, #48	; (adr r3, 8001360 <Kalman_init+0x80>)
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = 0.05;
 8001338:	6979      	ldr	r1, [r7, #20]
 800133a:	a309      	add	r3, pc, #36	; (adr r3, 8001360 <Kalman_init+0x80>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = 0.05;
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	a306      	add	r3, pc, #24	; (adr r3, 8001360 <Kalman_init+0x80>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	f3af 8000 	nop.w
 8001360:	9999999a 	.word	0x9999999a
 8001364:	3fa99999 	.word	0x3fa99999

08001368 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8001368:	b480      	push	{r7}
 800136a:	b0a5      	sub	sp, #148	; 0x94
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800137a:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 80016d0 <KalmanFilter+0x368>
 800137e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001382:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800138c:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 80016d0 <KalmanFilter+0x368>
 8001390:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001394:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	ed93 7b00 	vldr	d7, [r3]
 800139e:	ed9f 6bce 	vldr	d6, [pc, #824]	; 80016d8 <KalmanFilter+0x370>
 80013a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80013a6:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 80013aa:	a3d1      	add	r3, pc, #836	; (adr r3, 80016f0 <KalmanFilter+0x388>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 80013b4:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80013b8:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80013bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80013c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013ca:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80013d4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80013d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	ed93 7b08 	vldr	d7, [r3, #32]
 80013e2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80013ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013ee:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80013f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013f6:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80013fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013fe:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001402:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001406:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 800140a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800140e:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	ed93 7b02 	vldr	d7, [r3, #8]
 8001418:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800141c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	ed93 7b04 	vldr	d7, [r3, #16]
 8001426:	ee26 6b07 	vmul.f64	d6, d6, d7
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ed93 7b08 	vldr	d7, [r3, #32]
 8001430:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001434:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001438:	ed97 7b00 	vldr	d7, [r7]
 800143c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001440:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001444:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8001448:	ed97 7b00 	vldr	d7, [r7]
 800144c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001450:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	ed93 7b02 	vldr	d7, [r3, #8]
 800145a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800145e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001462:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 80016e0 <KalmanFilter+0x378>
 8001466:	ee27 5b05 	vmul.f64	d5, d7, d5
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	ed93 7b06 	vldr	d7, [r3, #24]
 8001470:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001474:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001478:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 800147c:	ed97 7b00 	vldr	d7, [r7]
 8001480:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001484:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001488:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 800148c:	ed97 7b00 	vldr	d7, [r7]
 8001490:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001494:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8001498:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 800149c:	ed97 7b00 	vldr	d7, [r7]
 80014a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80014a4:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 80014a8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80014ac:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80014b0:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80014ba:	ed9f 6b89 	vldr	d6, [pc, #548]	; 80016e0 <KalmanFilter+0x378>
 80014be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014c2:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	ed93 7b00 	vldr	d7, [r3]
 80014cc:	ed9f 6b86 	vldr	d6, [pc, #536]	; 80016e8 <KalmanFilter+0x380>
 80014d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014d4:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 80014d8:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80014dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014e4:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80014e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014ec:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80014f6:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80014fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014fe:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	ed93 6b02 	vldr	d6, [r3, #8]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	ed93 7b08 	vldr	d7, [r3, #32]
 800150e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001518:	ed9f 5b71 	vldr	d5, [pc, #452]	; 80016e0 <KalmanFilter+0x378>
 800151c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001520:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001524:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001528:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 800152c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001530:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800153a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800153e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001542:	ed9f 5b67 	vldr	d5, [pc, #412]	; 80016e0 <KalmanFilter+0x378>
 8001546:	ee27 7b05 	vmul.f64	d7, d7, d5
 800154a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800154e:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	ed93 6b06 	vldr	d6, [r3, #24]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	ed93 5b04 	vldr	d5, [r3, #16]
 800155e:	ed97 7b00 	vldr	d7, [r7]
 8001562:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	ed93 7b06 	vldr	d7, [r3, #24]
 800156c:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 80016e0 <KalmanFilter+0x378>
 8001570:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001574:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001578:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800157c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001580:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001584:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001588:	ee36 7b47 	vsub.f64	d7, d6, d7
 800158c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	ed93 6b02 	vldr	d6, [r3, #8]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	ed93 7b08 	vldr	d7, [r3, #32]
 800159c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80015a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80015a4:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80015a8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015ac:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80015b0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015b4:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80015b8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015bc:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80015c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80015c4:	ee26 5b07 	vmul.f64	d5, d6, d7
 80015c8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80015cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80015da:	ee37 7b07 	vadd.f64	d7, d7, d7
 80015de:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80016e0 <KalmanFilter+0x378>
 80015e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015e6:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80015ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015ee:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80015f8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001602:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001606:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800160a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800160e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001612:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001616:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800161a:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	ed93 7b02 	vldr	d7, [r3, #8]
 8001624:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800162e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001632:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001636:	ee35 7b07 	vadd.f64	d7, d5, d7
 800163a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800163e:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001642:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001646:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	ed93 5b00 	vldr	d5, [r3]
 8001656:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800165a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800165e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001668:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800166c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001670:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001674:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001678:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800167c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001680:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001684:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800168e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = xx2;
 8001692:	68f9      	ldr	r1, [r7, #12]
 8001694:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001698:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = pp11;
 800169c:	68f9      	ldr	r1, [r7, #12]
 800169e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016a2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = pp12;
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016ac:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = pp21;
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = pp22;
 80016ba:	68f9      	ldr	r1, [r7, #12]
 80016bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80016c0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80016c4:	bf00      	nop
 80016c6:	3794      	adds	r7, #148	; 0x94
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80016d4:	3f70624d 	.word	0x3f70624d
 80016d8:	812dea12 	.word	0x812dea12
 80016dc:	3d719799 	.word	0x3d719799
 80016e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80016e4:	3f50624d 	.word	0x3f50624d
 80016e8:	e826d695 	.word	0xe826d695
 80016ec:	3e112e0b 	.word	0x3e112e0b
 80016f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80016f4:	3eb0c6f7 	.word	0x3eb0c6f7

080016f8 <PID_init>:

double BaseENCRead(){
	return 970.0f;  //fsaldfkjas;dflkjas;dflksjf;asdf
}

void PID_init(PIDParameter *PID, double Kp, double Ki, double Kd) {
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	61f8      	str	r0, [r7, #28]
 8001700:	ed87 0b04 	vstr	d0, [r7, #16]
 8001704:	ed87 1b02 	vstr	d1, [r7, #8]
 8001708:	ed87 2b00 	vstr	d2, [r7]
	PID->Kp = Kp;
 800170c:	69f9      	ldr	r1, [r7, #28]
 800170e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001712:	e9c1 2300 	strd	r2, r3, [r1]
	PID->Ki = Ki;
 8001716:	69f9      	ldr	r1, [r7, #28]
 8001718:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800171c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	PID->Kd = Kd;
 8001720:	69f9      	ldr	r1, [r7, #28]
 8001722:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001726:	e9c1 2304 	strd	r2, r3, [r1, #16]
	PID->ITerm = 0;
 800172a:	69f9      	ldr	r1, [r7, #28]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PID->Setpoint = 0;
 8001738:	69f9      	ldr	r1, [r7, #28]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Feedback = 0;
 8001746:	69f9      	ldr	r1, [r7, #28]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Error[0] = 0;
 8001754:	69f9      	ldr	r1, [r7, #28]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID->Error[1] = 0;
 8001762:	69f9      	ldr	r1, [r7, #28]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	PID->Output = 0;
 8001770:	69f9      	ldr	r1, [r7, #28]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 800177e:	bf00      	nop
 8001780:	3724      	adds	r7, #36	; 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <PID_Control>:

double PID_Control(PIDParameter *PID,double Setpoint,double Feedback){
 800178a:	b480      	push	{r7}
 800178c:	b087      	sub	sp, #28
 800178e:	af00      	add	r7, sp, #0
 8001790:	6178      	str	r0, [r7, #20]
 8001792:	ed87 0b02 	vstr	d0, [r7, #8]
 8001796:	ed87 1b00 	vstr	d1, [r7]
	PID->Feedback = Feedback; 	// Feedback Input
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017a0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Setpoint = Setpoint;	// Setpoint Input
 80017a4:	6979      	ldr	r1, [r7, #20]
 80017a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017aa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	ed93 6b08 	vldr	d6, [r3, #32]
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80017ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	PID->ITerm += PID->Error[0];
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	ed93 6b06 	vldr	d6, [r3, #24]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80017d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	ed83 7b06 	vstr	d7, [r3, #24]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	ed93 6b00 	vldr	d6, [r3]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80017e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	ed93 5b02 	vldr	d5, [r3, #8]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	ed93 7b06 	vldr	d7, [r3, #24]
 80017f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017fa:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	ed93 5b04 	vldr	d5, [r3, #16]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001810:	ee34 7b47 	vsub.f64	d7, d4, d7
 8001814:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001818:	ee36 7b07 	vadd.f64	d7, d6, d7
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	PID->Error[1] = PID->Error[0]; // Update Error
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001828:	6979      	ldr	r1, [r7, #20]
 800182a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	return PID->Output;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8001834:	ec43 2b17 	vmov	d7, r2, r3
}
 8001838:	eeb0 0b47 	vmov.f64	d0, d7
 800183c:	371c      	adds	r7, #28
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,double PosP,double PosI,double PosD,double VelP,double VelI,double VelD, double GFeed){
 8001846:	b580      	push	{r7, lr}
 8001848:	b090      	sub	sp, #64	; 0x40
 800184a:	af00      	add	r7, sp, #0
 800184c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800184e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8001852:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8001856:	ed87 2b08 	vstr	d2, [r7, #32]
 800185a:	ed87 3b06 	vstr	d3, [r7, #24]
 800185e:	ed87 4b04 	vstr	d4, [r7, #16]
 8001862:	ed87 5b02 	vstr	d5, [r7, #8]
 8001866:	ed87 6b00 	vstr	d6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 800186a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800186c:	ed97 2b08 	vldr	d2, [r7, #32]
 8001870:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001874:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff3d 	bl	80016f8 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 800187e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001880:	3360      	adds	r3, #96	; 0x60
 8001882:	ed97 2b02 	vldr	d2, [r7, #8]
 8001886:	ed97 1b04 	vldr	d1, [r7, #16]
 800188a:	ed97 0b06 	vldr	d0, [r7, #24]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff32 	bl	80016f8 <PID_init>
	Control->Vel_Gfeed = GFeed;
 8001894:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800189a:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 800189e:	bf00      	nop
 80018a0:	3740      	adds	r7, #64	; 0x40
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		double Pos_Feed, double pos_set, double vel_set) {
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b088      	sub	sp, #32
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	61f8      	str	r0, [r7, #28]
 80018ae:	61b9      	str	r1, [r7, #24]
 80018b0:	ed87 0b04 	vstr	d0, [r7, #16]
 80018b4:	ed87 1b02 	vstr	d1, [r7, #8]
 80018b8:	ed87 2b00 	vstr	d2, [r7]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 80018bc:	69f9      	ldr	r1, [r7, #28]
 80018be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c2:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Control->VelocitySetpoint = vel_set;
 80018c6:	69f9      	ldr	r1, [r7, #28]
 80018c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018cc:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 80018d0:	ed97 0b04 	vldr	d0, [r7, #16]
 80018d4:	69b8      	ldr	r0, [r7, #24]
 80018d6:	f7ff fd47 	bl	8001368 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018e0:	69f9      	ldr	r1, [r7, #28]
 80018e2:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	Control->PositionFeedback = kalman->x1;
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018ec:	69f9      	ldr	r1, [r7, #28]
 80018ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001900:	eeb0 1b46 	vmov.f64	d1, d6
 8001904:	eeb0 0b47 	vmov.f64	d0, d7
 8001908:	4610      	mov	r0, r2
 800190a:	f7ff ff3e 	bl	800178a <PID_Control>
 800190e:	eeb0 7b40 	vmov.f64	d7, d0
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8001924:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	ed93 6b2e 	vldr	d6, [r3, #184]	; 0xb8
 8001940:	eeb0 1b46 	vmov.f64	d1, d6
 8001944:	eeb0 0b47 	vmov.f64	d0, d7
 8001948:	4610      	mov	r0, r2
 800194a:	f7ff ff1e 	bl	800178a <PID_Control>
 800194e:	eeb0 7b40 	vmov.f64	d7, d0
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001964:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ Control->VelocityPIDOutput;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 800196e:	ee36 7b07 	vadd.f64	d7, d6, d7
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
//	Control->Output = Control->VelocityPIDOutput;
}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_CRC_Init+0x50>)
 8001986:	4a13      	ldr	r2, [pc, #76]	; (80019d4 <MX_CRC_Init+0x54>)
 8001988:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_CRC_Init+0x50>)
 800198c:	2201      	movs	r2, #1
 800198e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_CRC_Init+0x50>)
 8001992:	2201      	movs	r2, #1
 8001994:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_CRC_Init+0x50>)
 8001998:	221d      	movs	r2, #29
 800199a:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_CRC_Init+0x50>)
 800199e:	2210      	movs	r2, #16
 80019a0:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_CRC_Init+0x50>)
 80019a4:	22c4      	movs	r2, #196	; 0xc4
 80019a6:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_CRC_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_CRC_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_CRC_Init+0x50>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_CRC_Init+0x50>)
 80019bc:	f007 fbf6 	bl	80091ac <HAL_CRC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80019c6:	f003 fae7 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000238 	.word	0x20000238
 80019d4:	58024c00 	.word	0x58024c00

080019d8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <HAL_CRC_MspInit+0x3c>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d10e      	bne.n	8001a08 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019ea:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_CRC_MspInit+0x40>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_CRC_MspInit+0x40>)
 80019f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_CRC_MspInit+0x40>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	58024c00 	.word	0x58024c00
 8001a18:	58024400 	.word	0x58024400

08001a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <MX_DMA_Init+0x5c>)
 8001a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <MX_DMA_Init+0x5c>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_DMA_Init+0x5c>)
 8001a34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	200b      	movs	r0, #11
 8001a46:	f007 fb7c 	bl	8009142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a4a:	200b      	movs	r0, #11
 8001a4c:	f007 fb93 	bl	8009176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	200c      	movs	r0, #12
 8001a56:	f007 fb74 	bl	8009142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a5a:	200c      	movs	r0, #12
 8001a5c:	f007 fb8b 	bl	8009176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	200d      	movs	r0, #13
 8001a66:	f007 fb6c 	bl	8009142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a6a:	200d      	movs	r0, #13
 8001a6c:	f007 fb83 	bl	8009176 <HAL_NVIC_EnableIRQ>

}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	58024400 	.word	0x58024400

08001a7c <MX_GPIO_Init>:
        * the Code Generation settings)
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 031c 	add.w	r3, r7, #28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a92:	4b91      	ldr	r3, [pc, #580]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a98:	4a8f      	ldr	r2, [pc, #572]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa2:	4b8d      	ldr	r3, [pc, #564]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab6:	4a88      	ldr	r2, [pc, #544]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac0:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ace:	4b82      	ldr	r3, [pc, #520]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	4a80      	ldr	r2, [pc, #512]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ade:	4b7e      	ldr	r3, [pc, #504]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	4b7a      	ldr	r3, [pc, #488]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af2:	4a79      	ldr	r2, [pc, #484]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001afc:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0a:	4b73      	ldr	r3, [pc, #460]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b10:	4a71      	ldr	r2, [pc, #452]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b12:	f043 0302 	orr.w	r3, r3, #2
 8001b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1a:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2e:	4a6a      	ldr	r2, [pc, #424]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b38:	4b67      	ldr	r3, [pc, #412]	; (8001cd8 <MX_GPIO_Init+0x25c>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001b46:	2200      	movs	r2, #0
 8001b48:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001b4c:	4863      	ldr	r0, [pc, #396]	; (8001cdc <MX_GPIO_Init+0x260>)
 8001b4e:	f00a f905 	bl	800bd5c <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001b58:	4861      	ldr	r0, [pc, #388]	; (8001ce0 <MX_GPIO_Init+0x264>)
 8001b5a:	f00a f8ff 	bl	800bd5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	21c4      	movs	r1, #196	; 0xc4
 8001b62:	4860      	ldr	r0, [pc, #384]	; (8001ce4 <MX_GPIO_Init+0x268>)
 8001b64:	f00a f8fa 	bl	800bd5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001b6e:	485e      	ldr	r0, [pc, #376]	; (8001ce8 <MX_GPIO_Init+0x26c>)
 8001b70:	f00a f8f4 	bl	800bd5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001b74:	2201      	movs	r2, #1
 8001b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b7a:	4859      	ldr	r0, [pc, #356]	; (8001ce0 <MX_GPIO_Init+0x264>)
 8001b7c:	f00a f8ee 	bl	800bd5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001b80:	2201      	movs	r2, #1
 8001b82:	213f      	movs	r1, #63	; 0x3f
 8001b84:	4858      	ldr	r0, [pc, #352]	; (8001ce8 <MX_GPIO_Init+0x26c>)
 8001b86:	f00a f8e9 	bl	800bd5c <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001b8a:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001b8e:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9c:	f107 031c 	add.w	r3, r7, #28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	484e      	ldr	r0, [pc, #312]	; (8001cdc <MX_GPIO_Init+0x260>)
 8001ba4:	f009 ff32 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001ba8:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8001bac:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4848      	ldr	r0, [pc, #288]	; (8001ce0 <MX_GPIO_Init+0x264>)
 8001bbe:	f009 ff25 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bc2:	233c      	movs	r3, #60	; 0x3c
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	f107 031c 	add.w	r3, r7, #28
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4845      	ldr	r0, [pc, #276]	; (8001cec <MX_GPIO_Init+0x270>)
 8001bd6:	f009 ff19 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 8001bda:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be0:	2301      	movs	r3, #1
 8001be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	483b      	ldr	r0, [pc, #236]	; (8001ce0 <MX_GPIO_Init+0x264>)
 8001bf4:	f009 ff0a 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4836      	ldr	r0, [pc, #216]	; (8001ce4 <MX_GPIO_Init+0x268>)
 8001c0c:	f009 fefe 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001c10:	2302      	movs	r3, #2
 8001c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	482f      	ldr	r0, [pc, #188]	; (8001ce4 <MX_GPIO_Init+0x268>)
 8001c26:	f009 fef1 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001c2a:	23c4      	movs	r3, #196	; 0xc4
 8001c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4828      	ldr	r0, [pc, #160]	; (8001ce4 <MX_GPIO_Init+0x268>)
 8001c42:	f009 fee3 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4820      	ldr	r0, [pc, #128]	; (8001cdc <MX_GPIO_Init+0x260>)
 8001c5c:	f009 fed6 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001c60:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001c64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c66:	2303      	movs	r3, #3
 8001c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	481c      	ldr	r0, [pc, #112]	; (8001ce8 <MX_GPIO_Init+0x26c>)
 8001c76:	f009 fec9 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001c7a:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001c7e:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c80:	2301      	movs	r3, #1
 8001c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <MX_GPIO_Init+0x26c>)
 8001c94:	f009 feba 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	480f      	ldr	r0, [pc, #60]	; (8001cec <MX_GPIO_Init+0x270>)
 8001cae:	f009 fead 	bl	800ba0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001cb2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4808      	ldr	r0, [pc, #32]	; (8001cec <MX_GPIO_Init+0x270>)
 8001ccc:	f009 fe9e 	bl	800ba0c <HAL_GPIO_Init>

}
 8001cd0:	bf00      	nop
 8001cd2:	3730      	adds	r7, #48	; 0x30
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	58024400 	.word	0x58024400
 8001cdc:	58021000 	.word	0x58021000
 8001ce0:	58020800 	.word	0x58020800
 8001ce4:	58020400 	.word	0x58020400
 8001ce8:	58020c00 	.word	0x58020c00
 8001cec:	58020000 	.word	0x58020000

08001cf0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001cf6:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <MX_I2C2_Init+0x78>)
 8001cf8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <MX_I2C2_Init+0x7c>)
 8001cfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d0c:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001d12:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d2a:	480e      	ldr	r0, [pc, #56]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d2c:	f00a f84a 	bl	800bdc4 <HAL_I2C_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001d36:	f003 f92f 	bl	8004f98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d3e:	f00b fb7b 	bl	800d438 <HAL_I2CEx_ConfigAnalogFilter>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001d48:	f003 f926 	bl	8004f98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_I2C2_Init+0x74>)
 8001d50:	f00b fbbd 	bl	800d4ce <HAL_I2CEx_ConfigDigitalFilter>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001d5a:	f003 f91d 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000025c 	.word	0x2000025c
 8001d68:	40005800 	.word	0x40005800
 8001d6c:	60404e72 	.word	0x60404e72

08001d70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b0b6      	sub	sp, #216	; 0xd8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	22b4      	movs	r2, #180	; 0xb4
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4618      	mov	r0, r3
 8001d92:	f013 feb3 	bl	8015afc <memset>
  if(i2cHandle->Instance==I2C2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <HAL_I2C_MspInit+0xd0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d14a      	bne.n	8001e36 <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001da0:	2308      	movs	r3, #8
 8001da2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	4618      	mov	r0, r3
 8001db0:	f00c fb4e 	bl	800e450 <HAL_RCCEx_PeriphCLKConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dba:	f003 f8ed 	bl	8004f98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ddc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de4:	2312      	movs	r3, #18
 8001de6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001df6:	2304      	movs	r3, #4
 8001df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e00:	4619      	mov	r1, r3
 8001e02:	4811      	ldr	r0, [pc, #68]	; (8001e48 <HAL_I2C_MspInit+0xd8>)
 8001e04:	f009 fe02 	bl	800ba0c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001e0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_I2C_MspInit+0xd4>)
 8001e1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	2022      	movs	r0, #34	; 0x22
 8001e2c:	f007 f989 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001e30:	2022      	movs	r0, #34	; 0x22
 8001e32:	f007 f9a0 	bl	8009176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e36:	bf00      	nop
 8001e38:	37d8      	adds	r7, #216	; 0xd8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40005800 	.word	0x40005800
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58020400 	.word	0x58020400
 8001e4c:	00000000 	.word	0x00000000

08001e50 <IPK>:
 *
 **************** Output ********************
 * q[4]				---> JointSpace Position
 *
 */
Kinematics_StatusTypeDef IPK(double gammabar[3], double chi[3], double q[4]) {
 8001e50:	b580      	push	{r7, lr}
 8001e52:	ed2d 8b02 	vpush	{d8}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
	double c2;
	double q2;
	double q3;
	double s2;
	double x24;
	x24 = gammabar[1] * sqrt(chi[0] * chi[0] + chi[1] * chi[1]) - 20.0;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3308      	adds	r3, #8
 8001e64:	ed93 8b00 	vldr	d8, [r3]
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	ed93 6b00 	vldr	d6, [r3]
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	ed93 7b00 	vldr	d7, [r3]
 8001e74:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	ed93 5b00 	vldr	d5, [r3]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3308      	adds	r3, #8
 8001e84:	ed93 7b00 	vldr	d7, [r3]
 8001e88:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001e8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e90:	eeb0 0b47 	vmov.f64	d0, d7
 8001e94:	f013 fed8 	bl	8015c48 <sqrt>
 8001e98:	eeb0 7b40 	vmov.f64	d7, d0
 8001e9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001ea0:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001ea4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ea8:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	c2 = x24 * x24
 8001eac:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001eb0:	ee27 6b07 	vmul.f64	d6, d7, d7
			+ ((chi[2] + 268.23) - 295.89) * ((chi[2] + 268.23) - 295.89);
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	3310      	adds	r3, #16
 8001eb8:	ed93 7b00 	vldr	d7, [r3]
 8001ebc:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002070 <IPK+0x220>
 8001ec0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001ec4:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002078 <IPK+0x228>
 8001ec8:	ee37 5b45 	vsub.f64	d5, d7, d5
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	3310      	adds	r3, #16
 8001ed0:	ed93 7b00 	vldr	d7, [r3]
 8001ed4:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002070 <IPK+0x220>
 8001ed8:	ee37 7b04 	vadd.f64	d7, d7, d4
 8001edc:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002078 <IPK+0x228>
 8001ee0:	ee37 7b44 	vsub.f64	d7, d7, d4
 8001ee4:	ee25 7b07 	vmul.f64	d7, d5, d7
	c2 = x24 * x24
 8001ee8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001eec:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	s2 = sqrt(c2);
 8001ef0:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001ef4:	f013 fea8 	bl	8015c48 <sqrt>
 8001ef8:	ed87 0b08 	vstr	d0, [r7, #32]
	if ((s2 <= 760.0) && (s2 >= 0.0)) {
 8001efc:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f00:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8002080 <IPK+0x230>
 8001f04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	f200 80a8 	bhi.w	8002060 <IPK+0x210>
 8001f10:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	f2c0 80a0 	blt.w	8002060 <IPK+0x210>
		c2 = ((c2 - 144400.0) - 144400.0) / 288800.0;
 8001f20:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f24:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8002088 <IPK+0x238>
 8001f28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f2c:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002088 <IPK+0x238>
 8001f30:	ee37 6b46 	vsub.f64	d6, d7, d6
 8001f34:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8002090 <IPK+0x240>
 8001f38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f3c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		s2 = gammabar[2] * sqrt(1.0 - c2 * c2);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3310      	adds	r3, #16
 8001f44:	ed93 8b00 	vldr	d8, [r3]
 8001f48:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001f4c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001f50:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001f54:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f58:	eeb0 0b47 	vmov.f64	d0, d7
 8001f5c:	f013 fe74 	bl	8015c48 <sqrt>
 8001f60:	eeb0 7b40 	vmov.f64	d7, d0
 8001f64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001f68:	ed87 7b08 	vstr	d7, [r7, #32]
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3310      	adds	r3, #16
 8001f70:	ed93 7b00 	vldr	d7, [r3]
 8001f74:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002070 <IPK+0x220>
 8001f78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f7c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002078 <IPK+0x228>
 8001f80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f84:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8001f88:	eeb0 0b47 	vmov.f64	d0, d7
 8001f8c:	f013 fe58 	bl	8015c40 <atan2>
 8001f90:	eeb0 8b40 	vmov.f64	d8, d0
				- atan2(380.0 * s2, 380.0 * c2 + 380.0)) - 1.5707963267948966;
 8001f94:	ed97 7b08 	vldr	d7, [r7, #32]
 8001f98:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002098 <IPK+0x248>
 8001f9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fa0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001fa4:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002098 <IPK+0x248>
 8001fa8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001fac:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002098 <IPK+0x248>
 8001fb0:	ee37 7b05 	vadd.f64	d7, d7, d5
 8001fb4:	eeb0 1b47 	vmov.f64	d1, d7
 8001fb8:	eeb0 0b46 	vmov.f64	d0, d6
 8001fbc:	f013 fe40 	bl	8015c40 <atan2>
 8001fc0:	eeb0 7b40 	vmov.f64	d7, d0
 8001fc4:	ee38 7b47 	vsub.f64	d7, d8, d7
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8001fc8:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80020a0 <IPK+0x250>
 8001fcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fd0:	ed87 7b06 	vstr	d7, [r7, #24]
		q3 = atan2(s2, c2) + 1.5707963267948966;
 8001fd4:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001fd8:	ed97 0b08 	vldr	d0, [r7, #32]
 8001fdc:	f013 fe30 	bl	8015c40 <atan2>
 8001fe0:	eeb0 7b40 	vmov.f64	d7, d0
 8001fe4:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 80020a0 <IPK+0x250>
 8001fe8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fec:	ed87 7b04 	vstr	d7, [r7, #16]
		q[0] = atan2(gammabar[0] * chi[1], gammabar[0] * chi[0]);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	ed93 6b00 	vldr	d6, [r3]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	ed93 7b00 	vldr	d7, [r3]
 8001ffe:	ee26 5b07 	vmul.f64	d5, d6, d7
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	ed93 6b00 	vldr	d6, [r3]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	ed93 7b00 	vldr	d7, [r3]
 800200e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002012:	eeb0 1b47 	vmov.f64	d1, d7
 8002016:	eeb0 0b45 	vmov.f64	d0, d5
 800201a:	f013 fe11 	bl	8015c40 <atan2>
 800201e:	eeb0 7b40 	vmov.f64	d7, d0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	ed83 7b00 	vstr	d7, [r3]
		q[1] = q2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f103 0108 	add.w	r1, r3, #8
 800202e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002032:	e9c1 2300 	strd	r2, r3, [r1]
		q[2] = q3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0110 	add.w	r1, r3, #16
 800203c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002040:	e9c1 2300 	strd	r2, r3, [r1]
		q[3] = -q2 - q3;
 8002044:	ed97 7b06 	vldr	d7, [r7, #24]
 8002048:	eeb1 6b47 	vneg.f64	d6, d7
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3318      	adds	r3, #24
 8002050:	ed97 7b04 	vldr	d7, [r7, #16]
 8002054:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002058:	ed83 7b00 	vstr	d7, [r3]
		return Kinematics_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e000      	b.n	8002062 <IPK+0x212>
	} else {
		return Error_Link_length;
 8002060:	2301      	movs	r3, #1
	}
}
 8002062:	4618      	mov	r0, r3
 8002064:	3738      	adds	r7, #56	; 0x38
 8002066:	46bd      	mov	sp, r7
 8002068:	ecbd 8b02 	vpop	{d8}
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	147ae148 	.word	0x147ae148
 8002074:	4070c3ae 	.word	0x4070c3ae
 8002078:	70a3d70a 	.word	0x70a3d70a
 800207c:	40727e3d 	.word	0x40727e3d
 8002080:	00000000 	.word	0x00000000
 8002084:	4087c000 	.word	0x4087c000
 8002088:	00000000 	.word	0x00000000
 800208c:	4101a080 	.word	0x4101a080
 8002090:	00000000 	.word	0x00000000
 8002094:	4111a080 	.word	0x4111a080
 8002098:	00000000 	.word	0x00000000
 800209c:	4077c000 	.word	0x4077c000
 80020a0:	54442d18 	.word	0x54442d18
 80020a4:	3ff921fb 	.word	0x3ff921fb

080020a8 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(double q[3], double chi_dot[3], double qv[4])

Kinematics_StatusTypeDef IVK(double q[4], double chi_dot[3], double qv[4])
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	ed2d 8b04 	vpush	{d8-d9}
 80020ae:	b0a6      	sub	sp, #152	; 0x98
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  double qvbar_idx_1;
  double qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3308      	adds	r3, #8
 80020bc:	ed93 6b00 	vldr	d6, [r3]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3310      	adds	r3, #16
 80020c4:	ed93 7b00 	vldr	d7, [r3]
 80020c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020cc:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = sin(qvbar_idx_1);
 80020d0:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 80020d4:	f013 fd68 	bl	8015ba8 <sin>
 80020d8:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78
  Jv4_tmp = cos(q[0]);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	ed93 7b00 	vldr	d7, [r3]
 80020e2:	eeb0 0b47 	vmov.f64	d0, d7
 80020e6:	f013 fd13 	bl	8015b10 <cos>
 80020ea:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
  b_Jv4_tmp = sin(q[0]);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	ed93 7b00 	vldr	d7, [r3]
 80020f4:	eeb0 0b47 	vmov.f64	d0, d7
 80020f8:	f013 fd56 	bl	8015ba8 <sin>
 80020fc:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 8002100:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 8002104:	f013 fd04 	bl	8015b10 <cos>
 8002108:	eeb0 7b40 	vmov.f64	d7, d0
 800210c:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 8002430 <IVK+0x388>
 8002110:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002114:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	3308      	adds	r3, #8
 800211c:	ed93 7b00 	vldr	d7, [r3]
 8002120:	eeb0 0b47 	vmov.f64	d0, d7
 8002124:	f013 fd40 	bl	8015ba8 <sin>
 8002128:	eeb0 7b40 	vmov.f64	d7, d0
 800212c:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 8002430 <IVK+0x388>
 8002130:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002134:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 8002138:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800213c:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8002140:	ee37 6b06 	vadd.f64	d6, d7, d6
 8002144:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002148:	ee36 7b47 	vsub.f64	d7, d6, d7
 800214c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 8002150:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002154:	eeb1 6b47 	vneg.f64	d6, d7
 8002158:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800215c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002160:	ed87 7b04 	vstr	d7, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 8002164:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002168:	eeb1 8b47 	vneg.f64	d8, d7
 800216c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002170:	ed9f 6baf 	vldr	d6, [pc, #700]	; 8002430 <IVK+0x388>
 8002174:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3308      	adds	r3, #8
 800217c:	ed93 7b00 	vldr	d7, [r3]
 8002180:	eeb0 0b47 	vmov.f64	d0, d7
 8002184:	f013 fcc4 	bl	8015b10 <cos>
 8002188:	eeb0 7b40 	vmov.f64	d7, d0
 800218c:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8002430 <IVK+0x388>
 8002190:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002194:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002198:	ee28 7b07 	vmul.f64	d7, d8, d7
 800219c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 80021a0:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80021a4:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8002438 <IVK+0x390>
 80021a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021ac:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 80021b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021b4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 80021b8:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80021bc:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80021c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021c4:	ed87 7b06 	vstr	d7, [r7, #24]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	ed93 7b00 	vldr	d7, [r3]
 80021ce:	eeb0 0b47 	vmov.f64	d0, d7
 80021d2:	f013 fce9 	bl	8015ba8 <sin>
 80021d6:	eeb0 7b40 	vmov.f64	d7, d0
 80021da:	eeb1 8b47 	vneg.f64	d8, d7
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3308      	adds	r3, #8
 80021e2:	ed93 6b00 	vldr	d6, [r3]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	3310      	adds	r3, #16
 80021ea:	ed93 7b00 	vldr	d7, [r3]
 80021ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80021f2:	eeb0 0b47 	vmov.f64	d0, d7
 80021f6:	f013 fcd7 	bl	8015ba8 <sin>
 80021fa:	eeb0 7b40 	vmov.f64	d7, d0
 80021fe:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8002430 <IVK+0x388>
 8002202:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3308      	adds	r3, #8
 800220a:	ed93 7b00 	vldr	d7, [r3]
 800220e:	eeb0 0b47 	vmov.f64	d0, d7
 8002212:	f013 fc7d 	bl	8015b10 <cos>
 8002216:	eeb0 7b40 	vmov.f64	d7, d0
 800221a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002430 <IVK+0x388>
 800221e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002222:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002226:	ee28 7b07 	vmul.f64	d7, d8, d7
 800222a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3308      	adds	r3, #8
 8002232:	ed93 6b00 	vldr	d6, [r3]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3310      	adds	r3, #16
 800223a:	ed93 7b00 	vldr	d7, [r3]
 800223e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002242:	eeb0 0b47 	vmov.f64	d0, d7
 8002246:	f013 fcaf 	bl	8015ba8 <sin>
 800224a:	eeb0 7b40 	vmov.f64	d7, d0
 800224e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8002438 <IVK+0x390>
 8002252:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002256:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800225a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800225e:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
  Jv4[2] = 0.0;
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 800226e:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 8002272:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002276:	ee36 7b47 	vsub.f64	d7, d6, d7
 800227a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[8] = qvbar_idx_1;
 800227e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002282:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  r1 = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  r2 = 1;
 800228c:	2301      	movs	r3, #1
 800228e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  rtemp = 2;
 8002292:	2302      	movs	r3, #2
 8002294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 8002298:	ed97 7b06 	vldr	d7, [r7, #24]
 800229c:	eeb0 6bc7 	vabs.f64	d6, d7
 80022a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80022a4:	eeb0 7bc7 	vabs.f64	d7, d7
 80022a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80022ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b0:	dd05      	ble.n	80022be <IVK+0x216>
    r1 = 1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    r2 = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  }
  Jv4[r2] /= Jv4[r1];
 80022be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	3398      	adds	r3, #152	; 0x98
 80022c6:	443b      	add	r3, r7
 80022c8:	3b88      	subs	r3, #136	; 0x88
 80022ca:	ed93 5b00 	vldr	d5, [r3]
 80022ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	3398      	adds	r3, #152	; 0x98
 80022d6:	443b      	add	r3, r7
 80022d8:	3b88      	subs	r3, #136	; 0x88
 80022da:	ed93 6b00 	vldr	d6, [r3]
 80022de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80022e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	3398      	adds	r3, #152	; 0x98
 80022ea:	443b      	add	r3, r7
 80022ec:	3b88      	subs	r3, #136	; 0x88
 80022ee:	ed83 7b00 	vstr	d7, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 80022f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	3398      	adds	r3, #152	; 0x98
 80022fa:	443b      	add	r3, r7
 80022fc:	3b88      	subs	r3, #136	; 0x88
 80022fe:	ed93 6b00 	vldr	d6, [r3]
 8002302:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8002440 <IVK+0x398>
 8002306:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800230a:	ed87 7b08 	vstr	d7, [r7, #32]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 800230e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002312:	3303      	adds	r3, #3
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	3398      	adds	r3, #152	; 0x98
 8002318:	443b      	add	r3, r7
 800231a:	3b88      	subs	r3, #136	; 0x88
 800231c:	ed93 6b00 	vldr	d6, [r3]
 8002320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	3398      	adds	r3, #152	; 0x98
 8002328:	443b      	add	r3, r7
 800232a:	3b88      	subs	r3, #136	; 0x88
 800232c:	ed93 5b00 	vldr	d5, [r3]
 8002330:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002334:	3303      	adds	r3, #3
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	3398      	adds	r3, #152	; 0x98
 800233a:	443b      	add	r3, r7
 800233c:	3b88      	subs	r3, #136	; 0x88
 800233e:	ed93 7b00 	vldr	d7, [r3]
 8002342:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800234a:	3303      	adds	r3, #3
 800234c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	3398      	adds	r3, #152	; 0x98
 8002354:	443b      	add	r3, r7
 8002356:	3b88      	subs	r3, #136	; 0x88
 8002358:	ed83 7b00 	vstr	d7, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 800235c:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8002360:	ed97 5b08 	vldr	d5, [r7, #32]
 8002364:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002368:	3303      	adds	r3, #3
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	3398      	adds	r3, #152	; 0x98
 800236e:	443b      	add	r3, r7
 8002370:	3b88      	subs	r3, #136	; 0x88
 8002372:	ed93 7b00 	vldr	d7, [r3]
 8002376:	ee25 7b07 	vmul.f64	d7, d5, d7
 800237a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800237e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 8002382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002386:	3306      	adds	r3, #6
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	3398      	adds	r3, #152	; 0x98
 800238c:	443b      	add	r3, r7
 800238e:	3b88      	subs	r3, #136	; 0x88
 8002390:	ed93 6b00 	vldr	d6, [r3]
 8002394:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	3398      	adds	r3, #152	; 0x98
 800239c:	443b      	add	r3, r7
 800239e:	3b88      	subs	r3, #136	; 0x88
 80023a0:	ed93 5b00 	vldr	d5, [r3]
 80023a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023a8:	3306      	adds	r3, #6
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	3398      	adds	r3, #152	; 0x98
 80023ae:	443b      	add	r3, r7
 80023b0:	3b88      	subs	r3, #136	; 0x88
 80023b2:	ed93 7b00 	vldr	d7, [r3]
 80023b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023be:	3306      	adds	r3, #6
 80023c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	3398      	adds	r3, #152	; 0x98
 80023c8:	443b      	add	r3, r7
 80023ca:	3b88      	subs	r3, #136	; 0x88
 80023cc:	ed83 7b00 	vstr	d7, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 80023d0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80023d4:	ed97 5b08 	vldr	d5, [r7, #32]
 80023d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023dc:	3306      	adds	r3, #6
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	3398      	adds	r3, #152	; 0x98
 80023e2:	443b      	add	r3, r7
 80023e4:	3b88      	subs	r3, #136	; 0x88
 80023e6:	ed93 7b00 	vldr	d7, [r3]
 80023ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023f2:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 80023f6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80023fa:	eeb0 6bc7 	vabs.f64	d6, d7
 80023fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002402:	3303      	adds	r3, #3
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	3398      	adds	r3, #152	; 0x98
 8002408:	443b      	add	r3, r7
 800240a:	3b88      	subs	r3, #136	; 0x88
 800240c:	ed93 7b00 	vldr	d7, [r3]
 8002410:	eeb0 7bc7 	vabs.f64	d7, d7
 8002414:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241c:	dd14      	ble.n	8002448 <IVK+0x3a0>
    rtemp = r2;
 800241e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    r2 = 2;
 8002426:	2302      	movs	r3, #2
 8002428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800242c:	e00c      	b.n	8002448 <IVK+0x3a0>
 800242e:	bf00      	nop
 8002430:	00000000 	.word	0x00000000
 8002434:	4077c000 	.word	0x4077c000
 8002438:	00000000 	.word	0x00000000
 800243c:	c077c000 	.word	0xc077c000
	...
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 8002448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800244c:	3303      	adds	r3, #3
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	3398      	adds	r3, #152	; 0x98
 8002452:	443b      	add	r3, r7
 8002454:	3b88      	subs	r3, #136	; 0x88
 8002456:	ed93 5b00 	vldr	d5, [r3]
 800245a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800245e:	3303      	adds	r3, #3
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	3398      	adds	r3, #152	; 0x98
 8002464:	443b      	add	r3, r7
 8002466:	3b88      	subs	r3, #136	; 0x88
 8002468:	ed93 6b00 	vldr	d6, [r3]
 800246c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002470:	3303      	adds	r3, #3
 8002472:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	3398      	adds	r3, #152	; 0x98
 800247a:	443b      	add	r3, r7
 800247c:	3b88      	subs	r3, #136	; 0x88
 800247e:	ed83 7b00 	vstr	d7, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 8002482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002486:	3306      	adds	r3, #6
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	3398      	adds	r3, #152	; 0x98
 800248c:	443b      	add	r3, r7
 800248e:	3b88      	subs	r3, #136	; 0x88
 8002490:	ed93 6b00 	vldr	d6, [r3]
 8002494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002498:	3303      	adds	r3, #3
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	3398      	adds	r3, #152	; 0x98
 800249e:	443b      	add	r3, r7
 80024a0:	3b88      	subs	r3, #136	; 0x88
 80024a2:	ed93 5b00 	vldr	d5, [r3]
 80024a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024aa:	3306      	adds	r3, #6
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	3398      	adds	r3, #152	; 0x98
 80024b0:	443b      	add	r3, r7
 80024b2:	3b88      	subs	r3, #136	; 0x88
 80024b4:	ed93 7b00 	vldr	d7, [r3]
 80024b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c0:	3306      	adds	r3, #6
 80024c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	3398      	adds	r3, #152	; 0x98
 80024ca:	443b      	add	r3, r7
 80024cc:	3b88      	subs	r3, #136	; 0x88
 80024ce:	ed83 7b00 	vstr	d7, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 80024d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	4413      	add	r3, r2
 80024dc:	ed93 6b00 	vldr	d6, [r3]
 80024e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4413      	add	r3, r2
 80024ea:	ed93 5b00 	vldr	d5, [r3]
 80024ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	3398      	adds	r3, #152	; 0x98
 80024f6:	443b      	add	r3, r7
 80024f8:	3b88      	subs	r3, #136	; 0x88
 80024fa:	ed93 7b00 	vldr	d7, [r3]
 80024fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002502:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002506:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 800250a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	68ba      	ldr	r2, [r7, #8]
 8002512:	4413      	add	r3, r2
 8002514:	ed93 6b00 	vldr	d6, [r3]
 8002518:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	4413      	add	r3, r2
 8002522:	ed93 5b00 	vldr	d5, [r3]
 8002526:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	3398      	adds	r3, #152	; 0x98
 800252e:	443b      	add	r3, r7
 8002530:	3b88      	subs	r3, #136	; 0x88
 8002532:	ed93 7b00 	vldr	d7, [r3]
 8002536:	ee25 7b07 	vmul.f64	d7, d5, d7
 800253a:	ee36 6b47 	vsub.f64	d6, d6, d7
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 800253e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002542:	3303      	adds	r3, #3
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	3398      	adds	r3, #152	; 0x98
 8002548:	443b      	add	r3, r7
 800254a:	3b88      	subs	r3, #136	; 0x88
 800254c:	ed93 5b00 	vldr	d5, [r3]
 8002550:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8002554:	ee25 7b07 	vmul.f64	d7, d5, d7
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002558:	ee36 5b47 	vsub.f64	d5, d6, d7
                Jv4[rtemp + 6];
 800255c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002560:	3306      	adds	r3, #6
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3398      	adds	r3, #152	; 0x98
 8002566:	443b      	add	r3, r7
 8002568:	3b88      	subs	r3, #136	; 0x88
 800256a:	ed93 6b00 	vldr	d6, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 800256e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002572:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 8002576:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800257a:	3306      	adds	r3, #6
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	3398      	adds	r3, #152	; 0x98
 8002580:	443b      	add	r3, r7
 8002582:	3b88      	subs	r3, #136	; 0x88
 8002584:	ed93 6b00 	vldr	d6, [r3]
 8002588:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800258c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002590:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 8002594:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002598:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_1 /= Jv4[r2 + 3];
 800259c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025a0:	3303      	adds	r3, #3
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	3398      	adds	r3, #152	; 0x98
 80025a6:	443b      	add	r3, r7
 80025a8:	3b88      	subs	r3, #136	; 0x88
 80025aa:	ed93 6b00 	vldr	d6, [r3]
 80025ae:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 80025b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025b6:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 80025ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	4413      	add	r3, r2
 80025c4:	ed93 6b00 	vldr	d6, [r3]
 80025c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025cc:	3306      	adds	r3, #6
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	3398      	adds	r3, #152	; 0x98
 80025d2:	443b      	add	r3, r7
 80025d4:	3b88      	subs	r3, #136	; 0x88
 80025d6:	ed93 5b00 	vldr	d5, [r3]
 80025da:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80025de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80025e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80025e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025ea:	3303      	adds	r3, #3
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	3398      	adds	r3, #152	; 0x98
 80025f0:	443b      	add	r3, r7
 80025f2:	3b88      	subs	r3, #136	; 0x88
 80025f4:	ed93 5b00 	vldr	d5, [r3]
 80025f8:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80025fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002600:	ee36 5b47 	vsub.f64	d5, d6, d7
      Jv4[r1];
 8002604:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	3398      	adds	r3, #152	; 0x98
 800260c:	443b      	add	r3, r7
 800260e:	3b88      	subs	r3, #136	; 0x88
 8002610:	ed93 6b00 	vldr	d6, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002614:	ee85 7b06 	vdiv.f64	d7, d5, d6
  qv[0] =
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	ed83 7b00 	vstr	d7, [r3]
  qv[1] = qvbar_idx_1;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f103 0108 	add.w	r1, r3, #8
 8002624:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002628:	e9c1 2300 	strd	r2, r3, [r1]
  qv[2] = qvbar_idx_2;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f103 0110 	add.w	r1, r3, #16
 8002632:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8002636:	e9c1 2300 	strd	r2, r3, [r1]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 800263a:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800263e:	eeb1 6b47 	vneg.f64	d6, d7
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3318      	adds	r3, #24
 8002646:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800264a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800264e:	ed83 7b00 	vstr	d7, [r3]
  return Kinematics_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3798      	adds	r7, #152	; 0x98
 8002658:	46bd      	mov	sp, r7
 800265a:	ecbd 8b04 	vpop	{d8-d9}
 800265e:	bd80      	pop	{r7, pc}

08002660 <FPK>:
 * Arguments    : const double q[5]
 *                double l3
 *                double Pne[3]
 * Return Type  : void
 */
void FPK(double q[5], double l3, double Pne[3]) {
 8002660:	b580      	push	{r7, lr}
 8002662:	ed2d 8b08 	vpush	{d8-d11}
 8002666:	b094      	sub	sp, #80	; 0x50
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	ed87 0b00 	vstr	d0, [r7]
 8002670:	60b9      	str	r1, [r7, #8]
	double e_Pne_tmp;
	double f_Pne_tmp;
	double g_Pne_tmp;
	double h_Pne_tmp;
	/* offset */
	Pne_tmp = cos(q[0]);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	ed93 7b00 	vldr	d7, [r3]
 8002678:	eeb0 0b47 	vmov.f64	d0, d7
 800267c:	f013 fa48 	bl	8015b10 <cos>
 8002680:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	b_Pne_tmp = sin(q[2]);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	3310      	adds	r3, #16
 8002688:	ed93 7b00 	vldr	d7, [r3]
 800268c:	eeb0 0b47 	vmov.f64	d0, d7
 8002690:	f013 fa8a 	bl	8015ba8 <sin>
 8002694:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	c_Pne_tmp = cos(q[2]);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	3310      	adds	r3, #16
 800269c:	ed93 7b00 	vldr	d7, [r3]
 80026a0:	eeb0 0b47 	vmov.f64	d0, d7
 80026a4:	f013 fa34 	bl	8015b10 <cos>
 80026a8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	d_Pne_tmp = sin(q[1]);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	3308      	adds	r3, #8
 80026b0:	ed93 7b00 	vldr	d7, [r3]
 80026b4:	eeb0 0b47 	vmov.f64	d0, d7
 80026b8:	f013 fa76 	bl	8015ba8 <sin>
 80026bc:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	e_Pne_tmp = cos(q[1]);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3308      	adds	r3, #8
 80026c4:	ed93 7b00 	vldr	d7, [r3]
 80026c8:	eeb0 0b47 	vmov.f64	d0, d7
 80026cc:	f013 fa20 	bl	8015b10 <cos>
 80026d0:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	f_Pne_tmp = sin(q[0]);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	ed93 7b00 	vldr	d7, [r3]
 80026da:	eeb0 0b47 	vmov.f64	d0, d7
 80026de:	f013 fa63 	bl	8015ba8 <sin>
 80026e2:	ed87 0b08 	vstr	d0, [r7, #32]
	g_Pne_tmp = cos(q[3]);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3318      	adds	r3, #24
 80026ea:	ed93 7b00 	vldr	d7, [r3]
 80026ee:	eeb0 0b47 	vmov.f64	d0, d7
 80026f2:	f013 fa0d 	bl	8015b10 <cos>
 80026f6:	ed87 0b06 	vstr	d0, [r7, #24]
	h_Pne_tmp = sin(q[3]);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	3318      	adds	r3, #24
 80026fe:	ed93 7b00 	vldr	d7, [r3]
 8002702:	eeb0 0b47 	vmov.f64	d0, d7
 8002706:	f013 fa4f 	bl	8015ba8 <sin>
 800270a:	ed87 0b04 	vstr	d0, [r7, #16]
	Pne[0] =
			((380.0
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 800270e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8002712:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002716:	ee26 6b07 	vmul.f64	d6, d6, d7
 800271a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800271e:	ee26 6b07 	vmul.f64	d6, d6, d7
							- Pne_tmp * d_Pne_tmp * b_Pne_tmp)
 8002722:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8002726:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800272a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800272e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002732:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002736:	ee36 7b47 	vsub.f64	d7, d6, d7
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 800273a:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8002aa8 <FPK+0x448>
 800273e:	ee27 8b06 	vmul.f64	d8, d7, d6
					+ l3
							* (g_Pne_tmp
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	ed93 7b00 	vldr	d7, [r3]
 8002748:	eeb0 0b47 	vmov.f64	d0, d7
 800274c:	f013 f9e0 	bl	8015b10 <cos>
 8002750:	eeb0 9b40 	vmov.f64	d9, d0
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	3308      	adds	r3, #8
 8002758:	ed93 7b00 	vldr	d7, [r3]
 800275c:	eeb0 0b47 	vmov.f64	d0, d7
 8002760:	f013 f9d6 	bl	8015b10 <cos>
 8002764:	eeb0 7b40 	vmov.f64	d7, d0
 8002768:	ee29 6b07 	vmul.f64	d6, d9, d7
 800276c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002770:	ee26 6b07 	vmul.f64	d6, d6, d7
											+ Pne_tmp * c_Pne_tmp * d_Pne_tmp)
 8002774:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8002778:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800277c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002780:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002784:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002788:	ee36 6b07 	vadd.f64	d6, d6, d7
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 800278c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002790:	ee26 9b07 	vmul.f64	d9, d6, d7
									+ h_Pne_tmp
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	ed93 7b00 	vldr	d7, [r3]
 800279a:	eeb0 0b47 	vmov.f64	d0, d7
 800279e:	f013 f9b7 	bl	8015b10 <cos>
 80027a2:	eeb0 ab40 	vmov.f64	d10, d0
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	3308      	adds	r3, #8
 80027aa:	ed93 7b00 	vldr	d7, [r3]
 80027ae:	eeb0 0b47 	vmov.f64	d0, d7
 80027b2:	f013 f9ad 	bl	8015b10 <cos>
 80027b6:	eeb0 7b40 	vmov.f64	d7, d0
 80027ba:	ee2a ab07 	vmul.f64	d10, d10, d7
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	3310      	adds	r3, #16
 80027c2:	ed93 7b00 	vldr	d7, [r3]
 80027c6:	eeb0 0b47 	vmov.f64	d0, d7
 80027ca:	f013 f9a1 	bl	8015b10 <cos>
 80027ce:	eeb0 7b40 	vmov.f64	d7, d0
 80027d2:	ee2a ab07 	vmul.f64	d10, d10, d7
													- cos(q[0]) * sin(q[1])
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	ed93 7b00 	vldr	d7, [r3]
 80027dc:	eeb0 0b47 	vmov.f64	d0, d7
 80027e0:	f013 f996 	bl	8015b10 <cos>
 80027e4:	eeb0 bb40 	vmov.f64	d11, d0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	3308      	adds	r3, #8
 80027ec:	ed93 7b00 	vldr	d7, [r3]
 80027f0:	eeb0 0b47 	vmov.f64	d0, d7
 80027f4:	f013 f9d8 	bl	8015ba8 <sin>
 80027f8:	eeb0 7b40 	vmov.f64	d7, d0
 80027fc:	ee2b bb07 	vmul.f64	d11, d11, d7
															* sin(q[2]))))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	3310      	adds	r3, #16
 8002804:	ed93 7b00 	vldr	d7, [r3]
 8002808:	eeb0 0b47 	vmov.f64	d0, d7
 800280c:	f013 f9cc 	bl	8015ba8 <sin>
 8002810:	eeb0 7b40 	vmov.f64	d7, d0
 8002814:	ee2b 7b07 	vmul.f64	d7, d11, d7
													- cos(q[0]) * sin(q[1])
 8002818:	ee3a 6b47 	vsub.f64	d6, d10, d7
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 800281c:	ed97 7b04 	vldr	d7, [r7, #16]
 8002820:	ee26 7b07 	vmul.f64	d7, d6, d7
									+ h_Pne_tmp
 8002824:	ee39 6b07 	vadd.f64	d6, d9, d7
							* (g_Pne_tmp
 8002828:	ed97 7b00 	vldr	d7, [r7]
 800282c:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ l3
 8002830:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ 20.0 * Pne_tmp) - 380.0 * Pne_tmp * d_Pne_tmp;
 8002834:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002838:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 800283c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002840:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002844:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002848:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8002aa8 <FPK+0x448>
 800284c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002850:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002854:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002858:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[0] =
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	ed83 7b00 	vstr	d7, [r3]
	Pne[1] = ((l3
			* (g_Pne_tmp
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 8002862:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002866:	ed97 7b08 	vldr	d7, [r7, #32]
 800286a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800286e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002872:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ c_Pne_tmp * f_Pne_tmp * d_Pne_tmp)
 8002876:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 800287a:	ed97 7b08 	vldr	d7, [r7, #32]
 800287e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002882:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002886:	ee25 7b07 	vmul.f64	d7, d5, d7
 800288a:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 800288e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002892:	ee26 6b07 	vmul.f64	d6, d6, d7
					- h_Pne_tmp
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002896:	ed97 5b08 	vldr	d5, [r7, #32]
 800289a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800289e:	ee25 5b07 	vmul.f64	d5, d5, d7
 80028a2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80028a6:	ee25 5b07 	vmul.f64	d5, d5, d7
									- e_Pne_tmp * c_Pne_tmp * f_Pne_tmp))
 80028aa:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 80028ae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80028b2:	ee24 4b07 	vmul.f64	d4, d4, d7
 80028b6:	ed97 7b08 	vldr	d7, [r7, #32]
 80028ba:	ee24 7b07 	vmul.f64	d7, d4, d7
 80028be:	ee35 5b47 	vsub.f64	d5, d5, d7
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 80028c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80028c6:	ee25 7b07 	vmul.f64	d7, d5, d7
					- h_Pne_tmp
 80028ca:	ee36 6b47 	vsub.f64	d6, d6, d7
			* (g_Pne_tmp
 80028ce:	ed97 7b00 	vldr	d7, [r7]
 80028d2:	ee26 8b07 	vmul.f64	d8, d6, d7
			- 380.0
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	ed93 7b00 	vldr	d7, [r3]
 80028dc:	eeb0 0b47 	vmov.f64	d0, d7
 80028e0:	f013 f962 	bl	8015ba8 <sin>
 80028e4:	eeb0 9b40 	vmov.f64	d9, d0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	3308      	adds	r3, #8
 80028ec:	ed93 7b00 	vldr	d7, [r3]
 80028f0:	eeb0 0b47 	vmov.f64	d0, d7
 80028f4:	f013 f958 	bl	8015ba8 <sin>
 80028f8:	eeb0 7b40 	vmov.f64	d7, d0
 80028fc:	ee29 9b07 	vmul.f64	d9, d9, d7
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3310      	adds	r3, #16
 8002904:	ed93 7b00 	vldr	d7, [r3]
 8002908:	eeb0 0b47 	vmov.f64	d0, d7
 800290c:	f013 f94c 	bl	8015ba8 <sin>
 8002910:	eeb0 7b40 	vmov.f64	d7, d0
 8002914:	ee29 9b07 	vmul.f64	d9, d9, d7
							- cos(q[1]) * cos(q[2]) * sin(q[0])))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3308      	adds	r3, #8
 800291c:	ed93 7b00 	vldr	d7, [r3]
 8002920:	eeb0 0b47 	vmov.f64	d0, d7
 8002924:	f013 f8f4 	bl	8015b10 <cos>
 8002928:	eeb0 ab40 	vmov.f64	d10, d0
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3310      	adds	r3, #16
 8002930:	ed93 7b00 	vldr	d7, [r3]
 8002934:	eeb0 0b47 	vmov.f64	d0, d7
 8002938:	f013 f8ea 	bl	8015b10 <cos>
 800293c:	eeb0 7b40 	vmov.f64	d7, d0
 8002940:	ee2a ab07 	vmul.f64	d10, d10, d7
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	ed93 7b00 	vldr	d7, [r3]
 800294a:	eeb0 0b47 	vmov.f64	d0, d7
 800294e:	f013 f92b 	bl	8015ba8 <sin>
 8002952:	eeb0 7b40 	vmov.f64	d7, d0
 8002956:	ee2a 7b07 	vmul.f64	d7, d10, d7
 800295a:	ee39 7b47 	vsub.f64	d7, d9, d7
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 800295e:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8002aa8 <FPK+0x448>
 8002962:	ee27 7b06 	vmul.f64	d7, d7, d6
			- 380.0
 8002966:	ee38 6b47 	vsub.f64	d6, d8, d7
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 800296a:	ed97 7b08 	vldr	d7, [r7, #32]
 800296e:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002972:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002976:	ee36 6b07 	vadd.f64	d6, d6, d7
 800297a:	ed97 7b08 	vldr	d7, [r7, #32]
 800297e:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8002aa8 <FPK+0x448>
 8002982:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002986:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800298a:	ee25 7b07 	vmul.f64	d7, d5, d7
	Pne[1] = ((l3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	3308      	adds	r3, #8
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 8002992:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[1] = ((l3
 8002996:	ed83 7b00 	vstr	d7, [r3]
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 800299a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 800299e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80029a2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80029a6:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 80029aa:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80029ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80029b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029b6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002aa8 <FPK+0x448>
 80029ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029be:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002ab0 <FPK+0x450>
 80029c2:	ee37 6b06 	vadd.f64	d6, d7, d6
			+ 380.0 * e_Pne_tmp)
 80029c6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80029ca:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8002aa8 <FPK+0x448>
 80029ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 80029d2:	ee36 8b07 	vadd.f64	d8, d6, d7
			- l3
					* (g_Pne_tmp
							* (cos(q[1]) * cos(q[2]) - d_Pne_tmp * b_Pne_tmp)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3308      	adds	r3, #8
 80029da:	ed93 7b00 	vldr	d7, [r3]
 80029de:	eeb0 0b47 	vmov.f64	d0, d7
 80029e2:	f013 f895 	bl	8015b10 <cos>
 80029e6:	eeb0 9b40 	vmov.f64	d9, d0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	3310      	adds	r3, #16
 80029ee:	ed93 7b00 	vldr	d7, [r3]
 80029f2:	eeb0 0b47 	vmov.f64	d0, d7
 80029f6:	f013 f88b 	bl	8015b10 <cos>
 80029fa:	eeb0 7b40 	vmov.f64	d7, d0
 80029fe:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002a02:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8002a06:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002a0a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a0e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002a12:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a16:	ee26 9b07 	vmul.f64	d9, d6, d7
							- h_Pne_tmp
									* (cos(q[1]) * sin(q[2])
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3308      	adds	r3, #8
 8002a1e:	ed93 7b00 	vldr	d7, [r3]
 8002a22:	eeb0 0b47 	vmov.f64	d0, d7
 8002a26:	f013 f873 	bl	8015b10 <cos>
 8002a2a:	eeb0 ab40 	vmov.f64	d10, d0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3310      	adds	r3, #16
 8002a32:	ed93 7b00 	vldr	d7, [r3]
 8002a36:	eeb0 0b47 	vmov.f64	d0, d7
 8002a3a:	f013 f8b5 	bl	8015ba8 <sin>
 8002a3e:	eeb0 7b40 	vmov.f64	d7, d0
 8002a42:	ee2a ab07 	vmul.f64	d10, d10, d7
											+ cos(q[2]) * sin(q[1])));
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3310      	adds	r3, #16
 8002a4a:	ed93 7b00 	vldr	d7, [r3]
 8002a4e:	eeb0 0b47 	vmov.f64	d0, d7
 8002a52:	f013 f85d 	bl	8015b10 <cos>
 8002a56:	eeb0 bb40 	vmov.f64	d11, d0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3308      	adds	r3, #8
 8002a5e:	ed93 7b00 	vldr	d7, [r3]
 8002a62:	eeb0 0b47 	vmov.f64	d0, d7
 8002a66:	f013 f89f 	bl	8015ba8 <sin>
 8002a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8002a6e:	ee2b 7b07 	vmul.f64	d7, d11, d7
 8002a72:	ee3a 6b07 	vadd.f64	d6, d10, d7
									* (cos(q[1]) * sin(q[2])
 8002a76:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a7a:	ee26 7b07 	vmul.f64	d7, d6, d7
							- h_Pne_tmp
 8002a7e:	ee39 6b47 	vsub.f64	d6, d9, d7
					* (g_Pne_tmp
 8002a82:	ed97 7b00 	vldr	d7, [r7]
 8002a86:	ee26 7b07 	vmul.f64	d7, d6, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	3310      	adds	r3, #16
			- l3
 8002a8e:	ee38 7b47 	vsub.f64	d7, d8, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002a92:	ed83 7b00 	vstr	d7, [r3]
}
 8002a96:	bf00      	nop
 8002a98:	3750      	adds	r7, #80	; 0x50
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	ecbd 8b08 	vpop	{d8-d11}
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	f3af 8000 	nop.w
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	4077c000 	.word	0x4077c000
 8002ab0:	70a3d70a 	.word	0x70a3d70a
 8002ab4:	40727e3d 	.word	0x40727e3d

08002ab8 <ChessPose>:
	twist_tmp = l3 * sin((q[1] + q[2]) + q[3]);
	twist[2] = (qd[1] * ((twist_tmp_tmp - twist_tmp_tmp_tmp) + twist_tmp)
			+ qd[2] * (twist_tmp_tmp + twist_tmp)) + g_twist_tmp * d_twist_tmp;
}

void ChessPose(uint8_t Chess_Index, double Chess_Theta, double ChessPosition[2]) {
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b096      	sub	sp, #88	; 0x58
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	ed87 0b00 	vstr	d0, [r7]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	73fb      	strb	r3, [r7, #15]
	/*
	 *
	 */
	uint8_t X = (Chess_Index%8) + 1;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t N = (Chess_Index/8) + 1;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	double l = 260;
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	4b45      	ldr	r3, [pc, #276]	; (8002bfc <ChessPose+0x144>)
 8002ae8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double L = 400;
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <ChessPose+0x148>)
 8002af2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double YOffset = 10;
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <ChessPose+0x14c>)
 8002afc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double b_positionx_tmp;
	double c_positionx_tmp;
	double d_positionx_tmp;
	double e_positionx_tmp;
	double positionx_tmp;
	positionx_tmp = cos(Chess_Theta);
 8002b00:	ed97 0b00 	vldr	d0, [r7]
 8002b04:	f013 f804 	bl	8015b10 <cos>
 8002b08:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	b_positionx_tmp = sin(Chess_Theta);
 8002b0c:	ed97 0b00 	vldr	d0, [r7]
 8002b10:	f013 f84a 	bl	8015ba8 <sin>
 8002b14:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	c_positionx_tmp = 9.0 * L / 16.0;
 8002b18:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b1c:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002b20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b24:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8002b28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b2c:	ed87 7b08 	vstr	d7, [r7, #32]
	d_positionx_tmp = X * L / 8.0 - c_positionx_tmp;
 8002b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002b3c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b40:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002b44:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002b48:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b4c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b50:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002b54:	ed87 7b06 	vstr	d7, [r7, #24]
	e_positionx_tmp = N * L / 8.0;
 8002b58:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002b64:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b6c:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002b70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b74:	ed87 7b04 	vstr	d7, [r7, #16]
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002b78:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002b7c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002b80:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp * positionx_tmp)) + l)
 8002b84:	ed97 5b08 	vldr	d5, [r7, #32]
 8002b88:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b90:	ed97 5b04 	vldr	d5, [r7, #16]
 8002b94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002b98:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b9c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002ba0:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ L / 2.0;
 8002ba4:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 8002ba8:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002bac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002bb0:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	ed83 7b00 	vstr	d7, [r3]
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002bba:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002bbe:	eeb1 6b47 	vneg.f64	d6, d7
 8002bc2:	ed97 7b06 	vldr	d7, [r7, #24]
 8002bc6:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002bca:	ed97 5b04 	vldr	d5, [r7, #16]
 8002bce:	ed97 7b08 	vldr	d7, [r7, #32]
 8002bd2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8002bd6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002bda:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002bde:	ee36 6b07 	vadd.f64	d6, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	3308      	adds	r3, #8
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002be6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002bea:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002bee:	ed83 7b00 	vstr	d7, [r3]
}
 8002bf2:	bf00      	nop
 8002bf4:	3758      	adds	r7, #88	; 0x58
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40704000 	.word	0x40704000
 8002c00:	40790000 	.word	0x40790000
 8002c04:	40240000 	.word	0x40240000

08002c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b096      	sub	sp, #88	; 0x58
 8002c0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c0e:	f003 ffb9 	bl	8006b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c12:	f000 fb5f 	bl	80032d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c16:	f000 fbd5 	bl	80033c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c1a:	f7fe ff2f 	bl	8001a7c <MX_GPIO_Init>
  MX_DMA_Init();
 8002c1e:	f7fe fefd 	bl	8001a1c <MX_DMA_Init>
  MX_ADC3_Init();
 8002c22:	f7fd ffc5 	bl	8000bb0 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002c26:	f002 fc31 	bl	800548c <MX_TIM1_Init>
  MX_TIM3_Init();
 8002c2a:	f002 fd13 	bl	8005654 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002c2e:	f002 fd97 	bl	8005760 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002c32:	f002 fdeb 	bl	800580c <MX_TIM5_Init>
  MX_TIM8_Init();
 8002c36:	f002 fea5 	bl	8005984 <MX_TIM8_Init>
  MX_TIM13_Init();
 8002c3a:	f002 fefd 	bl	8005a38 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002c3e:	f002 ff4b 	bl	8005ad8 <MX_TIM14_Init>
  MX_TIM15_Init();
 8002c42:	f002 ff99 	bl	8005b78 <MX_TIM15_Init>
  MX_TIM16_Init();
 8002c46:	f003 f81f 	bl	8005c88 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002c4a:	f003 f899 	bl	8005d80 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002c4e:	f003 fda5 	bl	800679c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002c52:	f003 fdf1 	bl	8006838 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002c56:	f002 f9a5 	bl	8004fa4 <MX_SPI3_Init>
  MX_SPI4_Init();
 8002c5a:	f002 f9fb 	bl	8005054 <MX_SPI4_Init>
  MX_I2C2_Init();
 8002c5e:	f7ff f847 	bl	8001cf0 <MX_I2C2_Init>
  MX_CRC_Init();
 8002c62:	f7fe fe8d 	bl	8001980 <MX_CRC_Init>
  MX_TIM24_Init();
 8002c66:	f003 f957 	bl	8005f18 <MX_TIM24_Init>
  MX_TIM23_Init();
 8002c6a:	f003 f905 	bl	8005e78 <MX_TIM23_Init>
  MX_TIM6_Init();
 8002c6e:	f002 fe51 	bl	8005914 <MX_TIM6_Init>
  MX_UART5_Init();
 8002c72:	f003 fd41 	bl	80066f8 <MX_UART5_Init>
  MX_ADC1_Init();
 8002c76:	f7fd febf 	bl	80009f8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002c7a:	f7fd ff39 	bl	8000af0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002c7e:	f002 fc95 	bl	80055ac <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  	MX_DMA_Init();
 8002c82:	f7fe fecb 	bl	8001a1c <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 8002c86:	2201      	movs	r2, #1
 8002c88:	2140      	movs	r1, #64	; 0x40
 8002c8a:	48c9      	ldr	r0, [pc, #804]	; (8002fb0 <main+0x3a8>)
 8002c8c:	f009 f866 	bl	800bd5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 8002c90:	2201      	movs	r2, #1
 8002c92:	2140      	movs	r1, #64	; 0x40
 8002c94:	48c7      	ldr	r0, [pc, #796]	; (8002fb4 <main+0x3ac>)
 8002c96:	f009 f861 	bl	800bd5c <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 8002c9a:	4bc7      	ldr	r3, [pc, #796]	; (8002fb8 <main+0x3b0>)
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4bc6      	ldr	r3, [pc, #792]	; (8002fbc <main+0x3b4>)
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002cae:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8002f48 <main+0x340>
 8002cb2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002cb6:	4bc2      	ldr	r3, [pc, #776]	; (8002fc0 <main+0x3b8>)
 8002cb8:	ed83 7b00 	vstr	d7, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002cbc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	48c0      	ldr	r0, [pc, #768]	; (8002fc4 <main+0x3bc>)
 8002cc4:	f005 ffea 	bl	8008c9c <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0,6500);
 8002cc8:	2301      	movs	r3, #1
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8002f50 <main+0x348>
 8002cd0:	4bbd      	ldr	r3, [pc, #756]	; (8002fc8 <main+0x3c0>)
 8002cd2:	4ab7      	ldr	r2, [pc, #732]	; (8002fb0 <main+0x3a8>)
 8002cd4:	49bd      	ldr	r1, [pc, #756]	; (8002fcc <main+0x3c4>)
 8002cd6:	48be      	ldr	r0, [pc, #760]	; (8002fd0 <main+0x3c8>)
 8002cd8:	f7fd fcc2 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1,10100);
 8002cdc:	2302      	movs	r3, #2
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8002f58 <main+0x350>
 8002ce4:	4bb8      	ldr	r3, [pc, #736]	; (8002fc8 <main+0x3c0>)
 8002ce6:	4ab2      	ldr	r2, [pc, #712]	; (8002fb0 <main+0x3a8>)
 8002ce8:	49b8      	ldr	r1, [pc, #736]	; (8002fcc <main+0x3c4>)
 8002cea:	48ba      	ldr	r0, [pc, #744]	; (8002fd4 <main+0x3cc>)
 8002cec:	f7fd fcb8 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2,3165);
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8002f60 <main+0x358>
 8002cf8:	4bb3      	ldr	r3, [pc, #716]	; (8002fc8 <main+0x3c0>)
 8002cfa:	4aad      	ldr	r2, [pc, #692]	; (8002fb0 <main+0x3a8>)
 8002cfc:	49b3      	ldr	r1, [pc, #716]	; (8002fcc <main+0x3c4>)
 8002cfe:	48b6      	ldr	r0, [pc, #728]	; (8002fd8 <main+0x3d0>)
 8002d00:	f7fd fcae 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3,6970);
 8002d04:	2308      	movs	r3, #8
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	ed9f 0b97 	vldr	d0, [pc, #604]	; 8002f68 <main+0x360>
 8002d0c:	4bae      	ldr	r3, [pc, #696]	; (8002fc8 <main+0x3c0>)
 8002d0e:	4aa8      	ldr	r2, [pc, #672]	; (8002fb0 <main+0x3a8>)
 8002d10:	49ae      	ldr	r1, [pc, #696]	; (8002fcc <main+0x3c4>)
 8002d12:	48b2      	ldr	r0, [pc, #712]	; (8002fdc <main+0x3d4>)
 8002d14:	f7fd fca4 	bl	8000660 <AS5047U_init>

	HAL_Delay(50);
 8002d18:	2032      	movs	r0, #50	; 0x32
 8002d1a:	f003 ffc5 	bl	8006ca8 <HAL_Delay>
//	AS5047U_Write(&Encoder[0], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[1], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[2], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[3], 0x0019, 0b00100000);

	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	211a      	movs	r1, #26
 8002d22:	48ab      	ldr	r0, [pc, #684]	; (8002fd0 <main+0x3c8>)
 8002d24:	f7fd fce8 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 8002d28:	2240      	movs	r2, #64	; 0x40
 8002d2a:	211a      	movs	r1, #26
 8002d2c:	48a9      	ldr	r0, [pc, #676]	; (8002fd4 <main+0x3cc>)
 8002d2e:	f7fd fce3 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	211a      	movs	r1, #26
 8002d36:	48a8      	ldr	r0, [pc, #672]	; (8002fd8 <main+0x3d0>)
 8002d38:	f7fd fcde 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 8002d3c:	2240      	movs	r2, #64	; 0x40
 8002d3e:	211a      	movs	r1, #26
 8002d40:	48a6      	ldr	r0, [pc, #664]	; (8002fdc <main+0x3d4>)
 8002d42:	f7fd fcd9 	bl	80006f8 <AS5047U_Write>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 5000, 0.001);
 8002d46:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8002f70 <main+0x368>
 8002d4a:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8002f78 <main+0x370>
 8002d4e:	48a4      	ldr	r0, [pc, #656]	; (8002fe0 <main+0x3d8>)
 8002d50:	f7fe fac6 	bl	80012e0 <Kalman_init>
	Kalman_init(&Kalman[1], 5000, 0.001);
 8002d54:	ed9f 1b86 	vldr	d1, [pc, #536]	; 8002f70 <main+0x368>
 8002d58:	ed9f 0b87 	vldr	d0, [pc, #540]	; 8002f78 <main+0x370>
 8002d5c:	48a1      	ldr	r0, [pc, #644]	; (8002fe4 <main+0x3dc>)
 8002d5e:	f7fe fabf 	bl	80012e0 <Kalman_init>
	Kalman_init(&Kalman[2], 5000, 0.001);
 8002d62:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8002f70 <main+0x368>
 8002d66:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8002f78 <main+0x370>
 8002d6a:	489f      	ldr	r0, [pc, #636]	; (8002fe8 <main+0x3e0>)
 8002d6c:	f7fe fab8 	bl	80012e0 <Kalman_init>
	Kalman_init(&Kalman[3], 5000, 0.001);
 8002d70:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8002f70 <main+0x368>
 8002d74:	ed9f 0b80 	vldr	d0, [pc, #512]	; 8002f78 <main+0x370>
 8002d78:	489c      	ldr	r0, [pc, #624]	; (8002fec <main+0x3e4>)
 8002d7a:	f7fe fab1 	bl	80012e0 <Kalman_init>
	Kalman_init(&Kalman[5], 5000, 0.001);
 8002d7e:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 8002f70 <main+0x368>
 8002d82:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 8002f78 <main+0x370>
 8002d86:	489a      	ldr	r0, [pc, #616]	; (8002ff0 <main+0x3e8>)
 8002d88:	f7fe faaa 	bl	80012e0 <Kalman_init>
//	CascadeControl_init(&Control[0], 0.6, 0, 0, 15, 0.5, 10, 400);
//	CascadeControl_init(&Control[1], 0.7, 0, 0.3, 10, 0, 10, 410);
//	CascadeControl_init(&Control[2], 0.82, 0, 0.2, 10, 0, 30, 400);
//	CascadeControl_init(&Control[3], 0.7, 0.001, 0, 9, 0.1, 3, 500);

	CascadeControl_init(&Control[0], 0.75, 0, 0, 15, 0.5, 10, 400);
 8002d8c:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8002f80 <main+0x378>
 8002d90:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002d94:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002d98:	eeb2 3b0e 	vmov.f64	d3, #46	; 0x41700000  15.0
 8002d9c:	ed9f 2b7a 	vldr	d2, [pc, #488]	; 8002f88 <main+0x380>
 8002da0:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8002f88 <main+0x380>
 8002da4:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002da8:	4892      	ldr	r0, [pc, #584]	; (8002ff4 <main+0x3ec>)
 8002daa:	f7fe fd4c 	bl	8001846 <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.5, 0, 0.5, 10, 0, 30, 410);
 8002dae:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8002f90 <main+0x388>
 8002db2:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002db6:	ed9f 4b74 	vldr	d4, [pc, #464]	; 8002f88 <main+0x380>
 8002dba:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002dbe:	eeb6 2b00 	vmov.f64	d2, #96	; 0x3f000000  0.5
 8002dc2:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8002f88 <main+0x380>
 8002dc6:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002dca:	488b      	ldr	r0, [pc, #556]	; (8002ff8 <main+0x3f0>)
 8002dcc:	f7fe fd3b 	bl	8001846 <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.5, 0, 0.3, 25, 0, 30, 800);
 8002dd0:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8002f98 <main+0x390>
 8002dd4:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002dd8:	ed9f 4b6b 	vldr	d4, [pc, #428]	; 8002f88 <main+0x380>
 8002ddc:	eeb3 3b09 	vmov.f64	d3, #57	; 0x41c80000  25.0
 8002de0:	ed9f 2b6f 	vldr	d2, [pc, #444]	; 8002fa0 <main+0x398>
 8002de4:	ed9f 1b68 	vldr	d1, [pc, #416]	; 8002f88 <main+0x380>
 8002de8:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002dec:	4883      	ldr	r0, [pc, #524]	; (8002ffc <main+0x3f4>)
 8002dee:	f7fe fd2a 	bl	8001846 <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.75, 0, 0.3, 9, 0, 3, 420);
 8002df2:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002fa8 <main+0x3a0>
 8002df6:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002dfa:	ed9f 4b63 	vldr	d4, [pc, #396]	; 8002f88 <main+0x380>
 8002dfe:	eeb2 3b02 	vmov.f64	d3, #34	; 0x41100000  9.0
 8002e02:	ed9f 2b67 	vldr	d2, [pc, #412]	; 8002fa0 <main+0x398>
 8002e06:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8002f88 <main+0x380>
 8002e0a:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002e0e:	487c      	ldr	r0, [pc, #496]	; (8003000 <main+0x3f8>)
 8002e10:	f7fe fd19 	bl	8001846 <CascadeControl_init>

	/*  Power Supply Temperature Sensor */
//	TPM75_init(&TempSensor, &hi2c2, 0, 0, 1);
	Tmp75_Init(&hi2c2);
 8002e14:	487b      	ldr	r0, [pc, #492]	; (8003004 <main+0x3fc>)
 8002e16:	f7fd fd6f 	bl	80008f8 <Tmp75_Init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	486c      	ldr	r0, [pc, #432]	; (8002fd0 <main+0x3c8>)
 8002e1e:	f7fd fbf9 	bl	8000614 <EncPulse2Rad_Read>
 8002e22:	eeb0 7b40 	vmov.f64	d7, d0
 8002e26:	4b78      	ldr	r3, [pc, #480]	; (8003008 <main+0x400>)
 8002e28:	ed83 7b00 	vstr	d7, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4869      	ldr	r0, [pc, #420]	; (8002fd4 <main+0x3cc>)
 8002e30:	f7fd fbf0 	bl	8000614 <EncPulse2Rad_Read>
 8002e34:	eeb0 7b40 	vmov.f64	d7, d0
 8002e38:	4b73      	ldr	r3, [pc, #460]	; (8003008 <main+0x400>)
 8002e3a:	ed83 7b02 	vstr	d7, [r3, #8]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4865      	ldr	r0, [pc, #404]	; (8002fd8 <main+0x3d0>)
 8002e42:	f7fd fbe7 	bl	8000614 <EncPulse2Rad_Read>
 8002e46:	eeb0 7b40 	vmov.f64	d7, d0
 8002e4a:	4b6f      	ldr	r3, [pc, #444]	; (8003008 <main+0x400>)
 8002e4c:	ed83 7b04 	vstr	d7, [r3, #16]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 8002e50:	2100      	movs	r1, #0
 8002e52:	4862      	ldr	r0, [pc, #392]	; (8002fdc <main+0x3d4>)
 8002e54:	f7fd fbde 	bl	8000614 <EncPulse2Rad_Read>
 8002e58:	eeb0 7b40 	vmov.f64	d7, d0
 8002e5c:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <main+0x400>)
 8002e5e:	ed83 7b06 	vstr	d7, [r3, #24]
	SetPoint_Velocity[0] = 0;
 8002e62:	496a      	ldr	r1, [pc, #424]	; (800300c <main+0x404>)
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9c1 2300 	strd	r2, r3, [r1]
	SetPoint_Velocity[1] = 0;
 8002e70:	4966      	ldr	r1, [pc, #408]	; (800300c <main+0x404>)
 8002e72:	f04f 0200 	mov.w	r2, #0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	SetPoint_Velocity[2] = 0;
 8002e7e:	4963      	ldr	r1, [pc, #396]	; (800300c <main+0x404>)
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e9c1 2304 	strd	r2, r3, [r1, #16]
	SetPoint_Velocity[3] = 0;
 8002e8c:	495f      	ldr	r1, [pc, #380]	; (800300c <main+0x404>)
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	9302      	str	r3, [sp, #8]
 8002e9e:	4b5c      	ldr	r3, [pc, #368]	; (8003010 <main+0x408>)
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <main+0x3ac>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	495a      	ldr	r1, [pc, #360]	; (8003014 <main+0x40c>)
 8002eac:	485a      	ldr	r0, [pc, #360]	; (8003018 <main+0x410>)
 8002eae:	f7fd ff9d 	bl	8000dec <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	9302      	str	r3, [sp, #8]
 8002eb6:	4b56      	ldr	r3, [pc, #344]	; (8003010 <main+0x408>)
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	2302      	movs	r3, #2
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <main+0x3ac>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4956      	ldr	r1, [pc, #344]	; (800301c <main+0x414>)
 8002ec4:	4856      	ldr	r0, [pc, #344]	; (8003020 <main+0x418>)
 8002ec6:	f7fd ff91 	bl	8000dec <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 1);
 8002eca:	2301      	movs	r3, #1
 8002ecc:	9302      	str	r3, [sp, #8]
 8002ece:	4b50      	ldr	r3, [pc, #320]	; (8003010 <main+0x408>)
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	4b37      	ldr	r3, [pc, #220]	; (8002fb4 <main+0x3ac>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4952      	ldr	r1, [pc, #328]	; (8003024 <main+0x41c>)
 8002edc:	4852      	ldr	r0, [pc, #328]	; (8003028 <main+0x420>)
 8002ede:	f7fd ff85 	bl	8000dec <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 1);
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	9302      	str	r3, [sp, #8]
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <main+0x408>)
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	2308      	movs	r3, #8
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	4b31      	ldr	r3, [pc, #196]	; (8002fb4 <main+0x3ac>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	494e      	ldr	r1, [pc, #312]	; (800302c <main+0x424>)
 8002ef4:	484e      	ldr	r0, [pc, #312]	; (8003030 <main+0x428>)
 8002ef6:	f7fd ff79 	bl	8000dec <Step_Driver_init>

	/*         	  Servo             */
	Servo_init(&Servo[0], &htim3, TIM_CHANNEL_1);
 8002efa:	2200      	movs	r2, #0
 8002efc:	494d      	ldr	r1, [pc, #308]	; (8003034 <main+0x42c>)
 8002efe:	484e      	ldr	r0, [pc, #312]	; (8003038 <main+0x430>)
 8002f00:	f7fe f81f 	bl	8000f42 <Servo_init>
	Servo_init(&Servo[1], &htim3, TIM_CHANNEL_2);
 8002f04:	2204      	movs	r2, #4
 8002f06:	494b      	ldr	r1, [pc, #300]	; (8003034 <main+0x42c>)
 8002f08:	484c      	ldr	r0, [pc, #304]	; (800303c <main+0x434>)
 8002f0a:	f7fe f81a 	bl	8000f42 <Servo_init>
	Servo_Drive(&Servo[0], 90);
 8002f0e:	215a      	movs	r1, #90	; 0x5a
 8002f10:	4849      	ldr	r0, [pc, #292]	; (8003038 <main+0x430>)
 8002f12:	f7fe f86b 	bl	8000fec <Servo_Drive>
	Servo_Drive(&Servo[1], 90);
 8002f16:	215a      	movs	r1, #90	; 0x5a
 8002f18:	4848      	ldr	r0, [pc, #288]	; (800303c <main+0x434>)
 8002f1a:	f7fe f867 	bl	8000fec <Servo_Drive>

	/*			Trajectory			*/
	Test_traj_Val[0] = 0;
 8002f1e:	4948      	ldr	r1, [pc, #288]	; (8003040 <main+0x438>)
 8002f20:	f04f 0200 	mov.w	r2, #0
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	e9c1 2300 	strd	r2, r3, [r1]
	Test_traj_Val[1] = 0;
 8002f2c:	4944      	ldr	r1, [pc, #272]	; (8003040 <main+0x438>)
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Test_traj_Val[2] = 0;
 8002f3a:	4941      	ldr	r1, [pc, #260]	; (8003040 <main+0x438>)
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e07e      	b.n	8003044 <main+0x43c>
 8002f46:	bf00      	nop
 8002f48:	00000000 	.word	0x00000000
 8002f4c:	40540000 	.word	0x40540000
 8002f50:	00000000 	.word	0x00000000
 8002f54:	40b96400 	.word	0x40b96400
 8002f58:	00000000 	.word	0x00000000
 8002f5c:	40c3ba00 	.word	0x40c3ba00
 8002f60:	00000000 	.word	0x00000000
 8002f64:	40a8ba00 	.word	0x40a8ba00
 8002f68:	00000000 	.word	0x00000000
 8002f6c:	40bb3a00 	.word	0x40bb3a00
 8002f70:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f74:	3f50624d 	.word	0x3f50624d
 8002f78:	00000000 	.word	0x00000000
 8002f7c:	40b38800 	.word	0x40b38800
 8002f80:	00000000 	.word	0x00000000
 8002f84:	40790000 	.word	0x40790000
	...
 8002f94:	4079a000 	.word	0x4079a000
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	40890000 	.word	0x40890000
 8002fa0:	33333333 	.word	0x33333333
 8002fa4:	3fd33333 	.word	0x3fd33333
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	407a4000 	.word	0x407a4000
 8002fb0:	58020c00 	.word	0x58020c00
 8002fb4:	58021000 	.word	0x58021000
 8002fb8:	1ff1e840 	.word	0x1ff1e840
 8002fbc:	1ff1e820 	.word	0x1ff1e820
 8002fc0:	200002b0 	.word	0x200002b0
 8002fc4:	200001c4 	.word	0x200001c4
 8002fc8:	20000238 	.word	0x20000238
 8002fcc:	20000c24 	.word	0x20000c24
 8002fd0:	200002b8 	.word	0x200002b8
 8002fd4:	200002e0 	.word	0x200002e0
 8002fd8:	20000308 	.word	0x20000308
 8002fdc:	20000330 	.word	0x20000330
 8002fe0:	20000358 	.word	0x20000358
 8002fe4:	20000398 	.word	0x20000398
 8002fe8:	200003d8 	.word	0x200003d8
 8002fec:	20000418 	.word	0x20000418
 8002ff0:	20000498 	.word	0x20000498
 8002ff4:	20000498 	.word	0x20000498
 8002ff8:	20000570 	.word	0x20000570
 8002ffc:	20000648 	.word	0x20000648
 8003000:	20000720 	.word	0x20000720
 8003004:	2000025c 	.word	0x2000025c
 8003008:	20000b60 	.word	0x20000b60
 800300c:	20000b88 	.word	0x20000b88
 8003010:	0007a120 	.word	0x0007a120
 8003014:	20000f48 	.word	0x20000f48
 8003018:	200007f8 	.word	0x200007f8
 800301c:	20000f94 	.word	0x20000f94
 8003020:	2000080c 	.word	0x2000080c
 8003024:	20000fe0 	.word	0x20000fe0
 8003028:	20000820 	.word	0x20000820
 800302c:	2000102c 	.word	0x2000102c
 8003030:	20000834 	.word	0x20000834
 8003034:	20000dcc 	.word	0x20000dcc
 8003038:	20000848 	.word	0x20000848
 800303c:	20000850 	.word	0x20000850
 8003040:	20000be8 	.word	0x20000be8
 8003044:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Test_traj_Val[3] = 0;
 8003048:	498b      	ldr	r1, [pc, #556]	; (8003278 <main+0x670>)
 800304a:	f04f 0200 	mov.w	r2, #0
 800304e:	f04f 0300 	mov.w	r3, #0
 8003052:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj_Flag = 0;
 8003056:	4b89      	ldr	r3, [pc, #548]	; (800327c <main+0x674>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
	t = 0;
 800305c:	4988      	ldr	r1, [pc, #544]	; (8003280 <main+0x678>)
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	e9c1 2300 	strd	r2, r3, [r1]

	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 800306a:	4886      	ldr	r0, [pc, #536]	; (8003284 <main+0x67c>)
 800306c:	f00e fa80 	bl	8011570 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8003070:	220e      	movs	r2, #14
 8003072:	4985      	ldr	r1, [pc, #532]	; (8003288 <main+0x680>)
 8003074:	4885      	ldr	r0, [pc, #532]	; (800328c <main+0x684>)
 8003076:	f00f ffef 	bl	8013058 <HAL_UART_Receive_IT>

	ChessMoveStates = Chess_idle;
 800307a:	4b85      	ldr	r3, [pc, #532]	; (8003290 <main+0x688>)
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
//		Servo_Drive(&Servo[0], Servo_Griper[0]);
//		Servo_Drive(&Servo[1], Servo_Griper[1]);

		if (Test_traj) {
 8003080:	4b84      	ldr	r3, [pc, #528]	; (8003294 <main+0x68c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <main+0x496>
			Test_traj = 0;
 8003088:	4b82      	ldr	r3, [pc, #520]	; (8003294 <main+0x68c>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
			JMoveTaskSpace(TaskSpace_Live_Ex1, Time_Live_Ex1);
 800308e:	4b82      	ldr	r3, [pc, #520]	; (8003298 <main+0x690>)
 8003090:	ed93 7b00 	vldr	d7, [r3]
 8003094:	eeb0 0b47 	vmov.f64	d0, d7
 8003098:	4880      	ldr	r0, [pc, #512]	; (800329c <main+0x694>)
 800309a:	f001 fbbd 	bl	8004818 <JMoveTaskSpace>
		}
		if (Test_traj2) {
 800309e:	4b80      	ldr	r3, [pc, #512]	; (80032a0 <main+0x698>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01f      	beq.n	80030e6 <main+0x4de>
			Test_traj2 = 0;
 80030a6:	4b7e      	ldr	r3, [pc, #504]	; (80032a0 <main+0x698>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
			double TaskSpace_Live_Ex1_ChangeZ[3];
			TaskSpace_Live_Ex1_ChangeZ[0] = TaskSpace_Live_Ex1[0];
 80030ac:	4b7b      	ldr	r3, [pc, #492]	; (800329c <main+0x694>)
 80030ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
			TaskSpace_Live_Ex1_ChangeZ[1] = TaskSpace_Live_Ex1[1];
 80030b6:	4b79      	ldr	r3, [pc, #484]	; (800329c <main+0x694>)
 80030b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			TaskSpace_Live_Ex1_ChangeZ[2] = TaskSpace_Live_Ex1[2] - 100;
 80030c0:	4b76      	ldr	r3, [pc, #472]	; (800329c <main+0x694>)
 80030c2:	ed93 7b04 	vldr	d7, [r3, #16]
 80030c6:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003268 <main+0x660>
 80030ca:	ee37 7b46 	vsub.f64	d7, d7, d6
 80030ce:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			JMoveTaskSpace(TaskSpace_Live_Ex1_ChangeZ, Time_Live_Ex1);
 80030d2:	4b71      	ldr	r3, [pc, #452]	; (8003298 <main+0x690>)
 80030d4:	ed93 7b00 	vldr	d7, [r3]
 80030d8:	f107 0320 	add.w	r3, r7, #32
 80030dc:	eeb0 0b47 	vmov.f64	d0, d7
 80030e0:	4618      	mov	r0, r3
 80030e2:	f001 fb99 	bl	8004818 <JMoveTaskSpace>
		}

	   uint8_t tune_joint = 3;
 80030e6:	2303      	movs	r3, #3
 80030e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	   if (tune_PID[0] != tune_PID[1]){
 80030ec:	4b6d      	ldr	r3, [pc, #436]	; (80032a4 <main+0x69c>)
 80030ee:	ed93 6b00 	vldr	d6, [r3]
 80030f2:	4b6c      	ldr	r3, [pc, #432]	; (80032a4 <main+0x69c>)
 80030f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80030f8:	eeb4 6b47 	vcmp.f64	d6, d7
 80030fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003100:	d070      	beq.n	80031e4 <main+0x5dc>
		   	tune_PID[1] = tune_PID[0];
 8003102:	4b68      	ldr	r3, [pc, #416]	; (80032a4 <main+0x69c>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	4966      	ldr	r1, [pc, #408]	; (80032a4 <main+0x69c>)
 800310a:	e9c1 2302 	strd	r2, r3, [r1, #8]
			t = 0;
 800310e:	495c      	ldr	r1, [pc, #368]	; (8003280 <main+0x678>)
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	e9c1 2300 	strd	r2, r3, [r1]
			double Joint[4] = {0,0,0,0};
 800311c:	463b      	mov	r3, r7
 800311e:	2220      	movs	r2, #32
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f012 fcea 	bl	8015afc <memset>
			for (int i = 0; i < 4; i++) {
 8003128:	2300      	movs	r3, #0
 800312a:	647b      	str	r3, [r7, #68]	; 0x44
 800312c:	e012      	b.n	8003154 <main+0x54c>
				Joint[i] = Control[i].PositionFeedback;
 800312e:	4a5e      	ldr	r2, [pc, #376]	; (80032a8 <main+0x6a0>)
 8003130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003132:	21d8      	movs	r1, #216	; 0xd8
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3350      	adds	r3, #80	; 0x50
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003142:	00c9      	lsls	r1, r1, #3
 8003144:	3148      	adds	r1, #72	; 0x48
 8003146:	4439      	add	r1, r7
 8003148:	3948      	subs	r1, #72	; 0x48
 800314a:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 800314e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003150:	3301      	adds	r3, #1
 8003152:	647b      	str	r3, [r7, #68]	; 0x44
 8003154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003156:	2b03      	cmp	r3, #3
 8003158:	dde9      	ble.n	800312e <main+0x526>
			}
			Joint[tune_joint] = tune_PID[0];
 800315a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800315e:	4b51      	ldr	r3, [pc, #324]	; (80032a4 <main+0x69c>)
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	00c9      	lsls	r1, r1, #3
 8003166:	3148      	adds	r1, #72	; 0x48
 8003168:	4439      	add	r1, r7
 800316a:	3948      	subs	r1, #72	; 0x48
 800316c:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 8003170:	2300      	movs	r3, #0
 8003172:	643b      	str	r3, [r7, #64]	; 0x40
 8003174:	e030      	b.n	80031d8 <main+0x5d0>
				Traj_Coeff_Cal(&Traj[i], T_tune_PID, Joint[i], Control[i].PositionFeedback,0, Control[i].VelocityFeedback);
 8003176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4a4a      	ldr	r2, [pc, #296]	; (80032ac <main+0x6a4>)
 8003182:	441a      	add	r2, r3
 8003184:	4b4a      	ldr	r3, [pc, #296]	; (80032b0 <main+0x6a8>)
 8003186:	ed93 7b00 	vldr	d7, [r3]
 800318a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	3348      	adds	r3, #72	; 0x48
 8003190:	443b      	add	r3, r7
 8003192:	3b48      	subs	r3, #72	; 0x48
 8003194:	ed93 6b00 	vldr	d6, [r3]
 8003198:	4943      	ldr	r1, [pc, #268]	; (80032a8 <main+0x6a0>)
 800319a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800319c:	20d8      	movs	r0, #216	; 0xd8
 800319e:	fb00 f303 	mul.w	r3, r0, r3
 80031a2:	440b      	add	r3, r1
 80031a4:	3350      	adds	r3, #80	; 0x50
 80031a6:	ed93 5b00 	vldr	d5, [r3]
 80031aa:	493f      	ldr	r1, [pc, #252]	; (80032a8 <main+0x6a0>)
 80031ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031ae:	20d8      	movs	r0, #216	; 0xd8
 80031b0:	fb00 f303 	mul.w	r3, r0, r3
 80031b4:	440b      	add	r3, r1
 80031b6:	33b8      	adds	r3, #184	; 0xb8
 80031b8:	ed93 4b00 	vldr	d4, [r3]
 80031bc:	ed9f 3b2c 	vldr	d3, [pc, #176]	; 8003270 <main+0x668>
 80031c0:	eeb0 2b45 	vmov.f64	d2, d5
 80031c4:	eeb0 1b46 	vmov.f64	d1, d6
 80031c8:	eeb0 0b47 	vmov.f64	d0, d7
 80031cc:	4610      	mov	r0, r2
 80031ce:	f7fd ff67 	bl	80010a0 <Traj_Coeff_Cal>
			for (int i = 0; i < 4; i++) {
 80031d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d4:	3301      	adds	r3, #1
 80031d6:	643b      	str	r3, [r7, #64]	; 0x40
 80031d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031da:	2b03      	cmp	r3, #3
 80031dc:	ddcb      	ble.n	8003176 <main+0x56e>
			}
			Traj_Flag = 0x0F;
 80031de:	4b27      	ldr	r3, [pc, #156]	; (800327c <main+0x674>)
 80031e0:	220f      	movs	r2, #15
 80031e2:	701a      	strb	r2, [r3, #0]
	   }

		if (Contorl_Flag) {
 80031e4:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <main+0x6ac>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <main+0x5ee>
			Control_Function();
 80031ec:	f001 f8f8 	bl	80043e0 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 80031f0:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <main+0x6ac>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 80031f6:	4b30      	ldr	r3, [pc, #192]	; (80032b8 <main+0x6b0>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d004      	beq.n	8003208 <main+0x600>
			Narwhal_Protocol();
 80031fe:	f000 f9c7 	bl	8003590 <Narwhal_Protocol>
			Protocol_Flag = 0;
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <main+0x6b0>)
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10) {
 8003208:	f003 fd42 	bl	8006c90 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <main+0x6b4>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b09      	cmp	r3, #9
 8003216:	d910      	bls.n	800323a <main+0x632>
			Software_Timer_100ms = HAL_GetTick();
 8003218:	f003 fd3a 	bl	8006c90 <HAL_GetTick>
 800321c:	4603      	mov	r3, r0
 800321e:	4a27      	ldr	r2, [pc, #156]	; (80032bc <main+0x6b4>)
 8003220:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 				//	read temperature sensor
 8003222:	4827      	ldr	r0, [pc, #156]	; (80032c0 <main+0x6b8>)
 8003224:	f004 fa42 	bl	80076ac <HAL_ADC_Start_IT>
			One_ShotTemp(&hi2c2);
 8003228:	4826      	ldr	r0, [pc, #152]	; (80032c4 <main+0x6bc>)
 800322a:	f7fd fbae 	bl	800098a <One_ShotTemp>
			Read_TempCelsius(&TPM75_Temp,&hi2c2);
 800322e:	4925      	ldr	r1, [pc, #148]	; (80032c4 <main+0x6bc>)
 8003230:	4825      	ldr	r0, [pc, #148]	; (80032c8 <main+0x6c0>)
 8003232:	f7fd fbb9 	bl	80009a8 <Read_TempCelsius>
			ChessMoveStateMachine();
 8003236:	f001 fc8b 	bl	8004b50 <ChessMoveStateMachine>
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 800323a:	f003 fd29 	bl	8006c90 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	4b22      	ldr	r3, [pc, #136]	; (80032cc <main+0x6c4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800324a:	f4ff af19 	bcc.w	8003080 <main+0x478>
			Software_Timer_1s = HAL_GetTick();
 800324e:	f003 fd1f 	bl	8006c90 <HAL_GetTick>
 8003252:	4603      	mov	r3, r0
 8003254:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <main+0x6c4>)
 8003256:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8003258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800325c:	481c      	ldr	r0, [pc, #112]	; (80032d0 <main+0x6c8>)
 800325e:	f008 fd96 	bl	800bd8e <HAL_GPIO_TogglePin>
  {
 8003262:	e70d      	b.n	8003080 <main+0x478>
 8003264:	f3af 8000 	nop.w
 8003268:	00000000 	.word	0x00000000
 800326c:	40590000 	.word	0x40590000
	...
 8003278:	20000be8 	.word	0x20000be8
 800327c:	20000bb9 	.word	0x20000bb9
 8003280:	20000bb0 	.word	0x20000bb0
 8003284:	200010c4 	.word	0x200010c4
 8003288:	20000094 	.word	0x20000094
 800328c:	200011d4 	.word	0x200011d4
 8003290:	20000bcd 	.word	0x20000bcd
 8003294:	20000be0 	.word	0x20000be0
 8003298:	20000018 	.word	0x20000018
 800329c:	20000c08 	.word	0x20000c08
 80032a0:	20000be1 	.word	0x20000be1
 80032a4:	20000bd0 	.word	0x20000bd0
 80032a8:	20000498 	.word	0x20000498
 80032ac:	200009d0 	.word	0x200009d0
 80032b0:	20000010 	.word	0x20000010
 80032b4:	20000bb8 	.word	0x20000bb8
 80032b8:	20000bba 	.word	0x20000bba
 80032bc:	20000bc0 	.word	0x20000bc0
 80032c0:	200001c4 	.word	0x200001c4
 80032c4:	2000025c 	.word	0x2000025c
 80032c8:	20000b58 	.word	0x20000b58
 80032cc:	20000bbc 	.word	0x20000bbc
 80032d0:	58020800 	.word	0x58020800

080032d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b09c      	sub	sp, #112	; 0x70
 80032d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032de:	224c      	movs	r2, #76	; 0x4c
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f012 fc0a 	bl	8015afc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	2220      	movs	r2, #32
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f012 fc04 	bl	8015afc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80032f4:	2002      	movs	r0, #2
 80032f6:	f00a f937 	bl	800d568 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <SystemClock_Config+0xe8>)
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <SystemClock_Config+0xe8>)
 8003304:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003308:	6193      	str	r3, [r2, #24]
 800330a:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <SystemClock_Config+0xe8>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003316:	bf00      	nop
 8003318:	4b28      	ldr	r3, [pc, #160]	; (80033bc <SystemClock_Config+0xe8>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003324:	d1f8      	bne.n	8003318 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003326:	4b26      	ldr	r3, [pc, #152]	; (80033c0 <SystemClock_Config+0xec>)
 8003328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332a:	f023 0303 	bic.w	r3, r3, #3
 800332e:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <SystemClock_Config+0xec>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003336:	2301      	movs	r3, #1
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800333a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800333e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003340:	2302      	movs	r3, #2
 8003342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003344:	2302      	movs	r3, #2
 8003346:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003348:	2302      	movs	r3, #2
 800334a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800334c:	232c      	movs	r3, #44	; 0x2c
 800334e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8003350:	2301      	movs	r3, #1
 8003352:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003354:	2302      	movs	r3, #2
 8003356:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003358:	2302      	movs	r3, #2
 800335a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800335c:	230c      	movs	r3, #12
 800335e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003360:	2300      	movs	r3, #0
 8003362:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336c:	4618      	mov	r0, r3
 800336e:	f00a f935 	bl	800d5dc <HAL_RCC_OscConfig>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003378:	f001 fe0e 	bl	8004f98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800337c:	233f      	movs	r3, #63	; 0x3f
 800337e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003380:	2303      	movs	r3, #3
 8003382:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003388:	2308      	movs	r3, #8
 800338a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800338c:	2340      	movs	r3, #64	; 0x40
 800338e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003390:	2340      	movs	r3, #64	; 0x40
 8003392:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003398:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800339a:	2340      	movs	r3, #64	; 0x40
 800339c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	2103      	movs	r1, #3
 80033a2:	4618      	mov	r0, r3
 80033a4:	f00a fcc8 	bl	800dd38 <HAL_RCC_ClockConfig>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80033ae:	f001 fdf3 	bl	8004f98 <Error_Handler>
  }
}
 80033b2:	bf00      	nop
 80033b4:	3770      	adds	r7, #112	; 0x70
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	58024800 	.word	0x58024800
 80033c0:	58024400 	.word	0x58024400

080033c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b0ae      	sub	sp, #184	; 0xb8
 80033c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	22b4      	movs	r2, #180	; 0xb4
 80033ce:	2100      	movs	r1, #0
 80033d0:	4618      	mov	r0, r3
 80033d2:	f012 fb93 	bl	8015afc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <PeriphCommonClock_Config+0x64>)
 80033d8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80033da:	2302      	movs	r3, #2
 80033dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 80033de:	2310      	movs	r3, #16
 80033e0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80033e2:	2302      	movs	r3, #2
 80033e4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80033e6:	2302      	movs	r3, #2
 80033e8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80033ea:	2302      	movs	r3, #2
 80033ec:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80033ee:	23c0      	movs	r3, #192	; 0xc0
 80033f0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80033fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033fe:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8003400:	2301      	movs	r3, #1
 8003402:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8003404:	2308      	movs	r3, #8
 8003406:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800340e:	1d3b      	adds	r3, r7, #4
 8003410:	4618      	mov	r0, r3
 8003412:	f00b f81d 	bl	800e450 <HAL_RCCEx_PeriphCLKConfig>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800341c:	f001 fdbc 	bl	8004f98 <Error_Handler>
  }
}
 8003420:	bf00      	nop
 8003422:	37b8      	adds	r7, #184	; 0xb8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	00082003 	.word	0x00082003

0800342c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800342c:	b480      	push	{r7}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a06      	ldr	r2, [pc, #24]	; (8003450 <HAL_UART_RxCpltCallback+0x24>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d102      	bne.n	8003442 <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <HAL_UART_RxCpltCallback+0x28>)
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]
	}
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	200011d4 	.word	0x200011d4
 8003454:	20000bba 	.word	0x20000bba

08003458 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(Neopixel.htim, TIM_CHANNEL_1);
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8003462:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003466:	2100      	movs	r1, #0
 8003468:	4618      	mov	r0, r3
 800346a:	f00e fa7b 	bl	8011964 <HAL_TIM_PWM_Stop_DMA>
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000858 	.word	0x20000858

0800347c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_ADC_ConvCpltCallback+0x6c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d129      	bne.n	80034e0 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 800348c:	4816      	ldr	r0, [pc, #88]	; (80034e8 <HAL_ADC_ConvCpltCallback+0x6c>)
 800348e:	f004 fa4d 	bl	800792c <HAL_ADC_GetValue>
 8003492:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 19)
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <HAL_ADC_ConvCpltCallback+0x70>)
 8003496:	ed93 7b00 	vldr	d7, [r3]
 800349a:	eeb3 6b03 	vmov.f64	d6, #51	; 0x41980000  19.0
 800349e:	ee27 6b06 	vmul.f64	d6, d7, d6
				+ (Temp_Calibration
						* (double) ((double) ADC_Output
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	ee07 3a90 	vmov	s15, r3
 80034a8:	eeb8 5b67 	vcvt.f64.u32	d5, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80034ac:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_ADC_ConvCpltCallback+0x74>)
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	ee07 3a90 	vmov	s15, r3
						* (double) ((double) ADC_Output
 80034b4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80034b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80034bc:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <HAL_ADC_ConvCpltCallback+0x78>)
 80034be:	ed93 7b00 	vldr	d7, [r3]
 80034c2:	ee25 7b07 	vmul.f64	d7, d5, d7
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80034c6:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 80034ca:	ee37 7b05 	vadd.f64	d7, d7, d5
				+ (Temp_Calibration
 80034ce:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ 20;
 80034d2:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80034d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
		Temperature = ((Temperature * 19)
 80034da:	4b04      	ldr	r3, [pc, #16]	; (80034ec <HAL_ADC_ConvCpltCallback+0x70>)
 80034dc:	ed83 7b00 	vstr	d7, [r3]
	}
}
 80034e0:	bf00      	nop
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	200001c4 	.word	0x200001c4
 80034ec:	200002a8 	.word	0x200002a8
 80034f0:	1ff1e820 	.word	0x1ff1e820
 80034f4:	200002b0 	.word	0x200002b0

080034f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a06      	ldr	r2, [pc, #24]	; (800351c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d102      	bne.n	800350e <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800350a:	2201      	movs	r2, #1
 800350c:	701a      	strb	r2, [r3, #0]
	}
}
 800350e:	bf00      	nop
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	200010c4 	.word	0x200010c4
 8003520:	20000bb8 	.word	0x20000bb8

08003524 <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	461a      	mov	r2, r3
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4805      	ldr	r0, [pc, #20]	; (800354c <CRC8+0x28>)
 8003538:	f005 fe9c 	bl	8009274 <HAL_CRC_Calculate>
 800353c:	4603      	mov	r3, r0
 800353e:	b2db      	uxtb	r3, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	b2db      	uxtb	r3, r3
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	20000238 	.word	0x20000238

08003550 <SentData>:
inline void SentData(uint8_t range){
 8003550:	b590      	push	{r4, r7, lr}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 800355a:	79fc      	ldrb	r4, [r7, #7]
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	4619      	mov	r1, r3
 8003560:	4809      	ldr	r0, [pc, #36]	; (8003588 <SentData+0x38>)
 8003562:	f7ff ffdf 	bl	8003524 <CRC8>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	4b07      	ldr	r3, [pc, #28]	; (8003588 <SentData+0x38>)
 800356c:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	b29b      	uxth	r3, r3
 8003572:	3301      	adds	r3, #1
 8003574:	b29b      	uxth	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	4903      	ldr	r1, [pc, #12]	; (8003588 <SentData+0x38>)
 800357a:	4804      	ldr	r0, [pc, #16]	; (800358c <SentData+0x3c>)
 800357c:	f00f fcc4 	bl	8012f08 <HAL_UART_Transmit_IT>
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	bd90      	pop	{r4, r7, pc}
 8003588:	200000a4 	.word	0x200000a4
 800358c:	200011d4 	.word	0x200011d4

08003590 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 8003590:	b5b0      	push	{r4, r5, r7, lr}
 8003592:	b0d2      	sub	sp, #328	; 0x148
 8003594:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 8003596:	4bc6      	ldr	r3, [pc, #792]	; (80038b0 <Narwhal_Protocol+0x320>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2bff      	cmp	r3, #255	; 0xff
 800359c:	f040 86f7 	bne.w	800438e <Narwhal_Protocol+0xdfe>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 80035a0:	210d      	movs	r1, #13
 80035a2:	48c3      	ldr	r0, [pc, #780]	; (80038b0 <Narwhal_Protocol+0x320>)
 80035a4:	f7ff ffbe 	bl	8003524 <CRC8>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
		if (CRC_Cal == UART5_rxBuffer[13]) {
 80035ae:	4bc0      	ldr	r3, [pc, #768]	; (80038b0 <Narwhal_Protocol+0x320>)
 80035b0:	7b5b      	ldrb	r3, [r3, #13]
 80035b2:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
 80035b6:	429a      	cmp	r2, r3
 80035b8:	f040 86e2 	bne.w	8004380 <Narwhal_Protocol+0xdf0>
			UART5_txBuffer[0] = 0xFF;
 80035bc:	4bbd      	ldr	r3, [pc, #756]	; (80038b4 <Narwhal_Protocol+0x324>)
 80035be:	22ff      	movs	r2, #255	; 0xff
 80035c0:	701a      	strb	r2, [r3, #0]
			double q_Feed[4];
			double dq[4];
			double d_Task[3];
			double q_in[5] = {0,0,0,0,0};
 80035c2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80035c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035ca:	4618      	mov	r0, r3
 80035cc:	2328      	movs	r3, #40	; 0x28
 80035ce:	461a      	mov	r2, r3
 80035d0:	2100      	movs	r1, #0
 80035d2:	f012 fa93 	bl	8015afc <memset>
			double task[3] = { -500, 300, 50 };
 80035d6:	4bb8      	ldr	r3, [pc, #736]	; (80038b8 <Narwhal_Protocol+0x328>)
 80035d8:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80035dc:	461d      	mov	r5, r3
 80035de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80035e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80035e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80035e6:	e884 0003 	stmia.w	r4, {r0, r1}
			uint16_t Temperature_Protocol = Temperature * 1000;
 80035ea:	4bb4      	ldr	r3, [pc, #720]	; (80038bc <Narwhal_Protocol+0x32c>)
 80035ec:	ed93 7b00 	vldr	d7, [r3]
 80035f0:	ed9f 6bab 	vldr	d6, [pc, #684]	; 80038a0 <Narwhal_Protocol+0x310>
 80035f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035f8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80035fc:	ee17 3a90 	vmov	r3, s15
 8003600:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
			uint16_t Temperature_Protocol2 = TPM75_Temp * 1000;
 8003604:	4bae      	ldr	r3, [pc, #696]	; (80038c0 <Narwhal_Protocol+0x330>)
 8003606:	ed93 7b00 	vldr	d7, [r3]
 800360a:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80038a0 <Narwhal_Protocol+0x310>
 800360e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003612:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003616:	ee17 3a90 	vmov	r3, s15
 800361a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 800361e:	4ba4      	ldr	r3, [pc, #656]	; (80038b0 <Narwhal_Protocol+0x320>)
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	3ba0      	subs	r3, #160	; 0xa0
 8003624:	2b5f      	cmp	r3, #95	; 0x5f
 8003626:	f200 86a4 	bhi.w	8004372 <Narwhal_Protocol+0xde2>
 800362a:	a201      	add	r2, pc, #4	; (adr r2, 8003630 <Narwhal_Protocol+0xa0>)
 800362c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003630:	08003f2f 	.word	0x08003f2f
 8003634:	08003f55 	.word	0x08003f55
 8003638:	08003f7b 	.word	0x08003f7b
 800363c:	08004373 	.word	0x08004373
 8003640:	08004373 	.word	0x08004373
 8003644:	08004373 	.word	0x08004373
 8003648:	08004373 	.word	0x08004373
 800364c:	08004373 	.word	0x08004373
 8003650:	08004373 	.word	0x08004373
 8003654:	08004373 	.word	0x08004373
 8003658:	08003feb 	.word	0x08003feb
 800365c:	0800406f 	.word	0x0800406f
 8003660:	08004373 	.word	0x08004373
 8003664:	08004373 	.word	0x08004373
 8003668:	08004373 	.word	0x08004373
 800366c:	0800413b 	.word	0x0800413b
 8003670:	08004373 	.word	0x08004373
 8003674:	08004373 	.word	0x08004373
 8003678:	08004373 	.word	0x08004373
 800367c:	08004373 	.word	0x08004373
 8003680:	08004373 	.word	0x08004373
 8003684:	08004373 	.word	0x08004373
 8003688:	08004373 	.word	0x08004373
 800368c:	08004373 	.word	0x08004373
 8003690:	08004373 	.word	0x08004373
 8003694:	08004373 	.word	0x08004373
 8003698:	08004373 	.word	0x08004373
 800369c:	08004373 	.word	0x08004373
 80036a0:	08004373 	.word	0x08004373
 80036a4:	08004373 	.word	0x08004373
 80036a8:	08004373 	.word	0x08004373
 80036ac:	08004373 	.word	0x08004373
 80036b0:	08004373 	.word	0x08004373
 80036b4:	08004373 	.word	0x08004373
 80036b8:	08004373 	.word	0x08004373
 80036bc:	08004373 	.word	0x08004373
 80036c0:	08004373 	.word	0x08004373
 80036c4:	08004373 	.word	0x08004373
 80036c8:	08004373 	.word	0x08004373
 80036cc:	08004373 	.word	0x08004373
 80036d0:	08004373 	.word	0x08004373
 80036d4:	08004373 	.word	0x08004373
 80036d8:	08004373 	.word	0x08004373
 80036dc:	08004373 	.word	0x08004373
 80036e0:	08004373 	.word	0x08004373
 80036e4:	08004373 	.word	0x08004373
 80036e8:	08004373 	.word	0x08004373
 80036ec:	08004373 	.word	0x08004373
 80036f0:	08004373 	.word	0x08004373
 80036f4:	08004373 	.word	0x08004373
 80036f8:	08004373 	.word	0x08004373
 80036fc:	08004373 	.word	0x08004373
 8003700:	08004373 	.word	0x08004373
 8003704:	08004373 	.word	0x08004373
 8003708:	08004373 	.word	0x08004373
 800370c:	08004373 	.word	0x08004373
 8003710:	08004373 	.word	0x08004373
 8003714:	08004373 	.word	0x08004373
 8003718:	08004373 	.word	0x08004373
 800371c:	08004373 	.word	0x08004373
 8003720:	08004373 	.word	0x08004373
 8003724:	08004373 	.word	0x08004373
 8003728:	08004373 	.word	0x08004373
 800372c:	08004373 	.word	0x08004373
 8003730:	08004373 	.word	0x08004373
 8003734:	08004373 	.word	0x08004373
 8003738:	08004373 	.word	0x08004373
 800373c:	08004373 	.word	0x08004373
 8003740:	08004373 	.word	0x08004373
 8003744:	08004373 	.word	0x08004373
 8003748:	08004373 	.word	0x08004373
 800374c:	08004373 	.word	0x08004373
 8003750:	08004373 	.word	0x08004373
 8003754:	08004373 	.word	0x08004373
 8003758:	08004373 	.word	0x08004373
 800375c:	08004373 	.word	0x08004373
 8003760:	08004373 	.word	0x08004373
 8003764:	08004373 	.word	0x08004373
 8003768:	08004373 	.word	0x08004373
 800376c:	08004373 	.word	0x08004373
 8003770:	080037b1 	.word	0x080037b1
 8003774:	080037c7 	.word	0x080037c7
 8003778:	08004373 	.word	0x08004373
 800377c:	08004373 	.word	0x08004373
 8003780:	08004373 	.word	0x08004373
 8003784:	080037dd 	.word	0x080037dd
 8003788:	08004373 	.word	0x08004373
 800378c:	08004373 	.word	0x08004373
 8003790:	08004373 	.word	0x08004373
 8003794:	08004373 	.word	0x08004373
 8003798:	08003889 	.word	0x08003889
 800379c:	080039b1 	.word	0x080039b1
 80037a0:	08004373 	.word	0x08004373
 80037a4:	08003b33 	.word	0x08003b33
 80037a8:	08003ce7 	.word	0x08003ce7
 80037ac:	08003e57 	.word	0x08003e57
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 80037b0:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <Narwhal_Protocol+0x324>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80037b6:	4b3f      	ldr	r3, [pc, #252]	; (80038b4 <Narwhal_Protocol+0x324>)
 80037b8:	22ff      	movs	r2, #255	; 0xff
 80037ba:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80037bc:	2003      	movs	r0, #3
 80037be:	f7ff fec7 	bl	8003550 <SentData>
				break;
 80037c2:	f000 bdea 	b.w	800439a <Narwhal_Protocol+0xe0a>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 80037c6:	4b3b      	ldr	r3, [pc, #236]	; (80038b4 <Narwhal_Protocol+0x324>)
 80037c8:	2201      	movs	r2, #1
 80037ca:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80037cc:	4b39      	ldr	r3, [pc, #228]	; (80038b4 <Narwhal_Protocol+0x324>)
 80037ce:	22ff      	movs	r2, #255	; 0xff
 80037d0:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80037d2:	2003      	movs	r0, #3
 80037d4:	f7ff febc 	bl	8003550 <SentData>
				break;
 80037d8:	f000 bddf 	b.w	800439a <Narwhal_Protocol+0xe0a>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {;
 80037dc:	4b39      	ldr	r3, [pc, #228]	; (80038c4 <Narwhal_Protocol+0x334>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d146      	bne.n	8003872 <Narwhal_Protocol+0x2e2>
					t = 0;
 80037e4:	4938      	ldr	r1, [pc, #224]	; (80038c8 <Narwhal_Protocol+0x338>)
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80037f8:	e02d      	b.n	8003856 <Narwhal_Protocol+0x2c6>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 80037fa:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80037fe:	4613      	mov	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4a31      	ldr	r2, [pc, #196]	; (80038cc <Narwhal_Protocol+0x33c>)
 8003808:	441a      	add	r2, r3
 800380a:	4931      	ldr	r1, [pc, #196]	; (80038d0 <Narwhal_Protocol+0x340>)
 800380c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003810:	20d8      	movs	r0, #216	; 0xd8
 8003812:	fb00 f303 	mul.w	r3, r0, r3
 8003816:	440b      	add	r3, r1
 8003818:	3350      	adds	r3, #80	; 0x50
 800381a:	ed93 7b00 	vldr	d7, [r3]
 800381e:	492c      	ldr	r1, [pc, #176]	; (80038d0 <Narwhal_Protocol+0x340>)
 8003820:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003824:	20d8      	movs	r0, #216	; 0xd8
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	440b      	add	r3, r1
 800382c:	33b8      	adds	r3, #184	; 0xb8
 800382e:	ed93 6b00 	vldr	d6, [r3]
 8003832:	eeb0 4b46 	vmov.f64	d4, d6
 8003836:	ed9f 3b1c 	vldr	d3, [pc, #112]	; 80038a8 <Narwhal_Protocol+0x318>
 800383a:	eeb0 2b47 	vmov.f64	d2, d7
 800383e:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80038a8 <Narwhal_Protocol+0x318>
 8003842:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8003846:	4610      	mov	r0, r2
 8003848:	f7fd fc2a 	bl	80010a0 <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 800384c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8003850:	3301      	adds	r3, #1
 8003852:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003856:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800385a:	2b03      	cmp	r3, #3
 800385c:	ddcd      	ble.n	80037fa <Narwhal_Protocol+0x26a>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 800385e:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <Narwhal_Protocol+0x334>)
 8003860:	220f      	movs	r2, #15
 8003862:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 8003864:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <Narwhal_Protocol+0x344>)
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 800386a:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <Narwhal_Protocol+0x324>)
 800386c:	2200      	movs	r2, #0
 800386e:	709a      	strb	r2, [r3, #2]
 8003870:	e002      	b.n	8003878 <Narwhal_Protocol+0x2e8>
				} else {
					UART5_txBuffer[2] = 0x01;
 8003872:	4b10      	ldr	r3, [pc, #64]	; (80038b4 <Narwhal_Protocol+0x324>)
 8003874:	2201      	movs	r2, #1
 8003876:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <Narwhal_Protocol+0x324>)
 800387a:	22ff      	movs	r2, #255	; 0xff
 800387c:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800387e:	2003      	movs	r0, #3
 8003880:	f7ff fe66 	bl	8003550 <SentData>
				break;
 8003884:	f000 bd89 	b.w	800439a <Narwhal_Protocol+0xe0a>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 8003888:	490f      	ldr	r1, [pc, #60]	; (80038c8 <Narwhal_Protocol+0x338>)
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800389c:	e073      	b.n	8003986 <Narwhal_Protocol+0x3f6>
 800389e:	bf00      	nop
 80038a0:	00000000 	.word	0x00000000
 80038a4:	408f4000 	.word	0x408f4000
	...
 80038b0:	20000094 	.word	0x20000094
 80038b4:	200000a4 	.word	0x200000a4
 80038b8:	08016b80 	.word	0x08016b80
 80038bc:	200002a8 	.word	0x200002a8
 80038c0:	20000b58 	.word	0x20000b58
 80038c4:	20000bb9 	.word	0x20000bb9
 80038c8:	20000bb0 	.word	0x20000bb0
 80038cc:	200009d0 	.word	0x200009d0
 80038d0:	20000498 	.word	0x20000498
 80038d4:	20000bbb 	.word	0x20000bbb
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80038d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80038dc:	3301      	adds	r3, #1
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4aa5      	ldr	r2, [pc, #660]	; (8003b78 <Narwhal_Protocol+0x5e8>)
 80038e2:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80038e4:	021b      	lsls	r3, r3, #8
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80038e6:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80038e8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	3303      	adds	r3, #3
 80038f0:	49a1      	ldr	r1, [pc, #644]	; (8003b78 <Narwhal_Protocol+0x5e8>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	b21b      	sxth	r3, r3
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80038f6:	4313      	orrs	r3, r2
 80038f8:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80038fa:	ee07 3a90 	vmov	s15, r3
 80038fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003902:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8003b60 <Narwhal_Protocol+0x5d0>
 8003906:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800390a:	ed87 7b36 	vstr	d7, [r7, #216]	; 0xd8
					Traj_Coeff_Cal(&Traj[i], 0.5,
 800390e:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	4a98      	ldr	r2, [pc, #608]	; (8003b7c <Narwhal_Protocol+0x5ec>)
 800391c:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 800391e:	4998      	ldr	r1, [pc, #608]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 8003920:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003924:	20d8      	movs	r0, #216	; 0xd8
 8003926:	fb00 f303 	mul.w	r3, r0, r3
 800392a:	440b      	add	r3, r1
 800392c:	3350      	adds	r3, #80	; 0x50
 800392e:	ed93 6b00 	vldr	d6, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003932:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8003936:	ee36 7b07 	vadd.f64	d7, d6, d7
 800393a:	4991      	ldr	r1, [pc, #580]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 800393c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003940:	20d8      	movs	r0, #216	; 0xd8
 8003942:	fb00 f303 	mul.w	r3, r0, r3
 8003946:	440b      	add	r3, r1
 8003948:	3350      	adds	r3, #80	; 0x50
 800394a:	ed93 6b00 	vldr	d6, [r3]
 800394e:	498c      	ldr	r1, [pc, #560]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 8003950:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003954:	20d8      	movs	r0, #216	; 0xd8
 8003956:	fb00 f303 	mul.w	r3, r0, r3
 800395a:	440b      	add	r3, r1
 800395c:	33b8      	adds	r3, #184	; 0xb8
 800395e:	ed93 5b00 	vldr	d5, [r3]
 8003962:	eeb0 4b45 	vmov.f64	d4, d5
 8003966:	ed9f 3b80 	vldr	d3, [pc, #512]	; 8003b68 <Narwhal_Protocol+0x5d8>
 800396a:	eeb0 2b46 	vmov.f64	d2, d6
 800396e:	eeb0 1b47 	vmov.f64	d1, d7
 8003972:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003976:	4610      	mov	r0, r2
 8003978:	f7fd fb92 	bl	80010a0 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 800397c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003980:	3301      	adds	r3, #1
 8003982:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8003986:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800398a:	2b03      	cmp	r3, #3
 800398c:	dda4      	ble.n	80038d8 <Narwhal_Protocol+0x348>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 800398e:	4b7d      	ldr	r3, [pc, #500]	; (8003b84 <Narwhal_Protocol+0x5f4>)
 8003990:	220f      	movs	r2, #15
 8003992:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003994:	4b7c      	ldr	r3, [pc, #496]	; (8003b88 <Narwhal_Protocol+0x5f8>)
 8003996:	2200      	movs	r2, #0
 8003998:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 800399a:	4b7c      	ldr	r3, [pc, #496]	; (8003b8c <Narwhal_Protocol+0x5fc>)
 800399c:	2200      	movs	r2, #0
 800399e:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80039a0:	4b7a      	ldr	r3, [pc, #488]	; (8003b8c <Narwhal_Protocol+0x5fc>)
 80039a2:	22ff      	movs	r2, #255	; 0xff
 80039a4:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80039a6:	2003      	movs	r0, #3
 80039a8:	f7ff fdd2 	bl	8003550 <SentData>
				break;
 80039ac:	f000 bcf5 	b.w	800439a <Narwhal_Protocol+0xe0a>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 80039b0:	4b73      	ldr	r3, [pc, #460]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 80039b2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80039b6:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80039ba:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 80039be:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 80039c2:	4b6f      	ldr	r3, [pc, #444]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 80039c4:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 80039c8:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80039cc:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 80039d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 80039d4:	4b6a      	ldr	r3, [pc, #424]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 80039d6:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 80039da:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80039de:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 80039e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 80039e6:	4b66      	ldr	r3, [pc, #408]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 80039e8:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 80039ec:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 80039f0:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
 80039f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
				for (int i = 0; i < 3; i++) {
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80039fe:	e026      	b.n	8003a4e <Narwhal_Protocol+0x4be>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003a00:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003a04:	3301      	adds	r3, #1
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	4a5b      	ldr	r2, [pc, #364]	; (8003b78 <Narwhal_Protocol+0x5e8>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	021b      	lsls	r3, r3, #8
 8003a0e:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003a10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	3303      	adds	r3, #3
 8003a18:	4957      	ldr	r1, [pc, #348]	; (8003b78 <Narwhal_Protocol+0x5e8>)
 8003a1a:	5ccb      	ldrb	r3, [r1, r3]
 8003a1c:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003a2a:	ed9f 5b51 	vldr	d5, [pc, #324]	; 8003b70 <Narwhal_Protocol+0x5e0>
 8003a2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003a32:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003a3c:	443b      	add	r3, r7
 8003a3e:	3b98      	subs	r3, #152	; 0x98
 8003a40:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 8003a44:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003a48:	3301      	adds	r3, #1
 8003a4a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8003a4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	ddd4      	ble.n	8003a00 <Narwhal_Protocol+0x470>
				}
				IVK(q_Feed, d_Task, dq);
 8003a56:	f107 0220 	add.w	r2, r7, #32
 8003a5a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8003a5e:	463b      	mov	r3, r7
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fb21 	bl	80020a8 <IVK>
				t = 0;
 8003a66:	494a      	ldr	r1, [pc, #296]	; (8003b90 <Narwhal_Protocol+0x600>)
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003a7a:	e045      	b.n	8003b08 <Narwhal_Protocol+0x578>
					double Setpoint = Control[i].PositionFeedback + dq[i];
 8003a7c:	4a40      	ldr	r2, [pc, #256]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 8003a7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a82:	21d8      	movs	r1, #216	; 0xd8
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3350      	adds	r3, #80	; 0x50
 8003a8c:	ed93 6b00 	vldr	d6, [r3]
 8003a90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003a94:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8003a98:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	ed93 7b00 	vldr	d7, [r3]
 8003aa4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003aa8:	ed87 7b38 	vstr	d7, [r7, #224]	; 0xe0
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 8003aac:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	4a30      	ldr	r2, [pc, #192]	; (8003b7c <Narwhal_Protocol+0x5ec>)
 8003aba:	441a      	add	r2, r3
 8003abc:	4930      	ldr	r1, [pc, #192]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 8003abe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ac2:	20d8      	movs	r0, #216	; 0xd8
 8003ac4:	fb00 f303 	mul.w	r3, r0, r3
 8003ac8:	440b      	add	r3, r1
 8003aca:	3350      	adds	r3, #80	; 0x50
 8003acc:	ed93 7b00 	vldr	d7, [r3]
 8003ad0:	492b      	ldr	r1, [pc, #172]	; (8003b80 <Narwhal_Protocol+0x5f0>)
 8003ad2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ad6:	20d8      	movs	r0, #216	; 0xd8
 8003ad8:	fb00 f303 	mul.w	r3, r0, r3
 8003adc:	440b      	add	r3, r1
 8003ade:	33b8      	adds	r3, #184	; 0xb8
 8003ae0:	ed93 6b00 	vldr	d6, [r3]
 8003ae4:	eeb0 4b46 	vmov.f64	d4, d6
 8003ae8:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 8003b68 <Narwhal_Protocol+0x5d8>
 8003aec:	eeb0 2b47 	vmov.f64	d2, d7
 8003af0:	ed97 1b38 	vldr	d1, [r7, #224]	; 0xe0
 8003af4:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7fd fad1 	bl	80010a0 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003afe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003b02:	3301      	adds	r3, #1
 8003b04:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003b08:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	ddb5      	ble.n	8003a7c <Narwhal_Protocol+0x4ec>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003b10:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <Narwhal_Protocol+0x5f4>)
 8003b12:	220f      	movs	r2, #15
 8003b14:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003b16:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <Narwhal_Protocol+0x5f8>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003b1c:	4b1b      	ldr	r3, [pc, #108]	; (8003b8c <Narwhal_Protocol+0x5fc>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <Narwhal_Protocol+0x5fc>)
 8003b24:	22ff      	movs	r2, #255	; 0xff
 8003b26:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003b28:	2003      	movs	r0, #3
 8003b2a:	f7ff fd11 	bl	8003550 <SentData>
				break;
 8003b2e:	f000 bc34 	b.w	800439a <Narwhal_Protocol+0xe0a>
			case 0xFD:
				/* Joint Set */
				t = 0;
 8003b32:	4917      	ldr	r1, [pc, #92]	; (8003b90 <Narwhal_Protocol+0x600>)
 8003b34:	f04f 0200 	mov.w	r2, #0
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	e9c1 2300 	strd	r2, r3, [r1]
				double Joint[4];
				double T = 1;
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <Narwhal_Protocol+0x604>)
 8003b46:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
				double Distance = -1;
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <Narwhal_Protocol+0x608>)
 8003b50:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
				for (int i = 0; i < 4; i++) {
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003b5a:	e064      	b.n	8003c26 <Narwhal_Protocol+0x696>
 8003b5c:	f3af 8000 	nop.w
 8003b60:	00000000 	.word	0x00000000
 8003b64:	408f4000 	.word	0x408f4000
	...
 8003b74:	40490000 	.word	0x40490000
 8003b78:	20000094 	.word	0x20000094
 8003b7c:	200009d0 	.word	0x200009d0
 8003b80:	20000498 	.word	0x20000498
 8003b84:	20000bb9 	.word	0x20000bb9
 8003b88:	20000bbb 	.word	0x20000bbb
 8003b8c:	200000a4 	.word	0x200000a4
 8003b90:	20000bb0 	.word	0x20000bb0
 8003b94:	3ff00000 	.word	0x3ff00000
 8003b98:	bff00000 	.word	0xbff00000
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4abc      	ldr	r2, [pc, #752]	; (8003e98 <Narwhal_Protocol+0x908>)
 8003ba6:	5cd3      	ldrb	r3, [r2, r3]
 8003ba8:	021b      	lsls	r3, r3, #8
 8003baa:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	3303      	adds	r3, #3
 8003bb4:	49b8      	ldr	r1, [pc, #736]	; (8003e98 <Narwhal_Protocol+0x908>)
 8003bb6:	5ccb      	ldrb	r3, [r1, r3]
 8003bb8:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003bc6:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8003e60 <Narwhal_Protocol+0x8d0>
 8003bca:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003bce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003bd2:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8003bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	ed83 7b00 	vstr	d7, [r3]
					if (Joint[i] > Distance){
 8003be2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003be6:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8003bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	ed93 7b00 	vldr	d7, [r3]
 8003bf6:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8003bfa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c02:	d50b      	bpl.n	8003c1c <Narwhal_Protocol+0x68c>
						Distance = Joint[i];
 8003c04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003c08:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8003c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4413      	add	r3, r2
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130
				for (int i = 0; i < 4; i++) {
 8003c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c20:	3301      	adds	r3, #1
 8003c22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003c2a:	2b03      	cmp	r3, #3
 8003c2c:	ddb6      	ble.n	8003b9c <Narwhal_Protocol+0x60c>
					}
				}
				T += (Distance * 0.8);
 8003c2e:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8003c32:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8003e68 <Narwhal_Protocol+0x8d8>
 8003c36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003c3a:	ed97 6b3a 	vldr	d6, [r7, #232]	; 0xe8
 8003c3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c42:	ed87 7b3a 	vstr	d7, [r7, #232]	; 0xe8
				for (int i = 0; i < 4; i++) {
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003c4c:	e037      	b.n	8003cbe <Narwhal_Protocol+0x72e>
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 8003c4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4a90      	ldr	r2, [pc, #576]	; (8003e9c <Narwhal_Protocol+0x90c>)
 8003c5c:	1899      	adds	r1, r3, r2
 8003c5e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003c62:	f5a3 7294 	sub.w	r2, r3, #296	; 0x128
 8003c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	ed93 7b00 	vldr	d7, [r3]
 8003c72:	4a8b      	ldr	r2, [pc, #556]	; (8003ea0 <Narwhal_Protocol+0x910>)
 8003c74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c78:	20d8      	movs	r0, #216	; 0xd8
 8003c7a:	fb00 f303 	mul.w	r3, r0, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3350      	adds	r3, #80	; 0x50
 8003c82:	ed93 6b00 	vldr	d6, [r3]
 8003c86:	4a86      	ldr	r2, [pc, #536]	; (8003ea0 <Narwhal_Protocol+0x910>)
 8003c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c8c:	20d8      	movs	r0, #216	; 0xd8
 8003c8e:	fb00 f303 	mul.w	r3, r0, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	33b8      	adds	r3, #184	; 0xb8
 8003c96:	ed93 5b00 	vldr	d5, [r3]
 8003c9a:	eeb0 4b45 	vmov.f64	d4, d5
 8003c9e:	ed9f 3b74 	vldr	d3, [pc, #464]	; 8003e70 <Narwhal_Protocol+0x8e0>
 8003ca2:	eeb0 2b46 	vmov.f64	d2, d6
 8003ca6:	eeb0 1b47 	vmov.f64	d1, d7
 8003caa:	ed97 0b3a 	vldr	d0, [r7, #232]	; 0xe8
 8003cae:	4608      	mov	r0, r1
 8003cb0:	f7fd f9f6 	bl	80010a0 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003cbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	ddc3      	ble.n	8003c4e <Narwhal_Protocol+0x6be>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003cc6:	4b77      	ldr	r3, [pc, #476]	; (8003ea4 <Narwhal_Protocol+0x914>)
 8003cc8:	220f      	movs	r2, #15
 8003cca:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003ccc:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <Narwhal_Protocol+0x918>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8003cd2:	4b76      	ldr	r3, [pc, #472]	; (8003eac <Narwhal_Protocol+0x91c>)
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003cd8:	4b74      	ldr	r3, [pc, #464]	; (8003eac <Narwhal_Protocol+0x91c>)
 8003cda:	22ff      	movs	r2, #255	; 0xff
 8003cdc:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003cde:	2003      	movs	r0, #3
 8003ce0:	f7ff fc36 	bl	8003550 <SentData>
				break;
 8003ce4:	e359      	b.n	800439a <Narwhal_Protocol+0xe0a>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 8003ce6:	4972      	ldr	r1, [pc, #456]	; (8003eb0 <Narwhal_Protocol+0x920>)
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	f04f 0300 	mov.w	r3, #0
 8003cf0:	e9c1 2300 	strd	r2, r3, [r1]
				double Task[3];
				for (int i = 0; i < 3; i++) {
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003cfa:	e026      	b.n	8003d4a <Narwhal_Protocol+0x7ba>
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003cfc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d00:	3301      	adds	r3, #1
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4a64      	ldr	r2, [pc, #400]	; (8003e98 <Narwhal_Protocol+0x908>)
 8003d06:	5cd3      	ldrb	r3, [r2, r3]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003d0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	3303      	adds	r3, #3
 8003d14:	4960      	ldr	r1, [pc, #384]	; (8003e98 <Narwhal_Protocol+0x908>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	b21b      	sxth	r3, r3
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d26:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8003e78 <Narwhal_Protocol+0x8e8>
 8003d2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003d2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003d38:	443b      	add	r3, r7
 8003d3a:	3bc8      	subs	r3, #200	; 0xc8
 8003d3c:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 8003d40:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d44:	3301      	adds	r3, #1
 8003d46:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003d4a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	ddd4      	ble.n	8003cfc <Narwhal_Protocol+0x76c>
				}
				double q_Feed[4];
				double Pne[3];
				q_Feed[0] = Control[0].PositionFeedback;
 8003d52:	4b53      	ldr	r3, [pc, #332]	; (8003ea0 <Narwhal_Protocol+0x910>)
 8003d54:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003d58:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003d5c:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 8003d60:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 8003d64:	4b4e      	ldr	r3, [pc, #312]	; (8003ea0 <Narwhal_Protocol+0x910>)
 8003d66:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8003d6a:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003d6e:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 8003d72:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 8003d76:	4b4a      	ldr	r3, [pc, #296]	; (8003ea0 <Narwhal_Protocol+0x910>)
 8003d78:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8003d7c:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003d80:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 8003d84:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 8003d88:	4b45      	ldr	r3, [pc, #276]	; (8003ea0 <Narwhal_Protocol+0x910>)
 8003d8a:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8003d8e:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003d92:	f5a1 7194 	sub.w	r1, r1, #296	; 0x128
 8003d96:	e9c1 2306 	strd	r2, r3, [r1, #24]

				FPK(q_Feed, 269.0f, Pne);
 8003d9a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d9e:	f107 0320 	add.w	r3, r7, #32
 8003da2:	4611      	mov	r1, r2
 8003da4:	ed9f 0b36 	vldr	d0, [pc, #216]	; 8003e80 <Narwhal_Protocol+0x8f0>
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe fc59 	bl	8002660 <FPK>
				double Time2MoveDynamic = 1.3;
 8003dae:	a336      	add	r3, pc, #216	; (adr r3, 8003e88 <Narwhal_Protocol+0x8f8>)
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
				Time2MoveDynamic += (sqrt(
						((Task[0] - Pne[0]) * (Task[0] - Pne[0]))
 8003db8:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 8003dbc:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8003dc0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003dc4:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8003dc8:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8003dcc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003dd0:	ee26 6b07 	vmul.f64	d6, d6, d7
								+ ((Task[1] - Pne[1]) * (Task[1] - Pne[1]))
 8003dd4:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8003dd8:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8003ddc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8003de0:	ed97 4b22 	vldr	d4, [r7, #136]	; 0x88
 8003de4:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8003de8:	ee34 7b47 	vsub.f64	d7, d4, d7
 8003dec:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003df0:	ee36 6b07 	vadd.f64	d6, d6, d7
								+ ((Task[2] - Pne[2]) * (Task[2] - Pne[2]))))
 8003df4:	ed97 5b24 	vldr	d5, [r7, #144]	; 0x90
 8003df8:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8003dfc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8003e00:	ed97 4b24 	vldr	d4, [r7, #144]	; 0x90
 8003e04:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8003e08:	ee34 7b47 	vsub.f64	d7, d4, d7
 8003e0c:	ee25 7b07 	vmul.f64	d7, d5, d7
				Time2MoveDynamic += (sqrt(
 8003e10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e14:	eeb0 0b47 	vmov.f64	d0, d7
 8003e18:	f011 ff16 	bl	8015c48 <sqrt>
 8003e1c:	eeb0 7b40 	vmov.f64	d7, d0
						* 0.0075;
 8003e20:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8003e90 <Narwhal_Protocol+0x900>
 8003e24:	ee27 7b06 	vmul.f64	d7, d7, d6
				Time2MoveDynamic += (sqrt(
 8003e28:	ed97 6b3c 	vldr	d6, [r7, #240]	; 0xf0
 8003e2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e30:	ed87 7b3c 	vstr	d7, [r7, #240]	; 0xf0

				JMoveTaskSpace(Task, Time2MoveDynamic);
 8003e34:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003e38:	ed97 0b3c 	vldr	d0, [r7, #240]	; 0xf0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fceb 	bl	8004818 <JMoveTaskSpace>
				UART5_txBuffer[2] = 0x00;
 8003e42:	4b1a      	ldr	r3, [pc, #104]	; (8003eac <Narwhal_Protocol+0x91c>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003e48:	4b18      	ldr	r3, [pc, #96]	; (8003eac <Narwhal_Protocol+0x91c>)
 8003e4a:	22ff      	movs	r2, #255	; 0xff
 8003e4c:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003e4e:	2003      	movs	r0, #3
 8003e50:	f7ff fb7e 	bl	8003550 <SentData>
				break;
 8003e54:	e2a1      	b.n	800439a <Narwhal_Protocol+0xe0a>
			case 0xFF:
				/* Chess Move */
//				uint8_t ChessIndex[2];
				for (int i = 0; i < 2; i++) {
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003e5c:	e03a      	b.n	8003ed4 <Narwhal_Protocol+0x944>
 8003e5e:	bf00      	nop
 8003e60:	00000000 	.word	0x00000000
 8003e64:	408f4000 	.word	0x408f4000
 8003e68:	9999999a 	.word	0x9999999a
 8003e6c:	3fe99999 	.word	0x3fe99999
	...
 8003e7c:	40490000 	.word	0x40490000
 8003e80:	00000000 	.word	0x00000000
 8003e84:	4070d000 	.word	0x4070d000
 8003e88:	cccccccd 	.word	0xcccccccd
 8003e8c:	3ff4cccc 	.word	0x3ff4cccc
 8003e90:	eb851eb8 	.word	0xeb851eb8
 8003e94:	3f7eb851 	.word	0x3f7eb851
 8003e98:	20000094 	.word	0x20000094
 8003e9c:	200009d0 	.word	0x200009d0
 8003ea0:	20000498 	.word	0x20000498
 8003ea4:	20000bb9 	.word	0x20000bb9
 8003ea8:	20000bbb 	.word	0x20000bbb
 8003eac:	200000a4 	.word	0x200000a4
 8003eb0:	20000bb0 	.word	0x20000bb0
					ChessIndex[i] = (uint8_t) (UART5_rxBuffer[2 + i]);
 8003eb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003eb8:	3302      	adds	r3, #2
 8003eba:	4aa7      	ldr	r2, [pc, #668]	; (8004158 <Narwhal_Protocol+0xbc8>)
 8003ebc:	5cd1      	ldrb	r1, [r2, r3]
 8003ebe:	4aa7      	ldr	r2, [pc, #668]	; (800415c <Narwhal_Protocol+0xbcc>)
 8003ec0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ec4:	4413      	add	r3, r2
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 2; i++) {
 8003eca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ece:	3301      	adds	r3, #1
 8003ed0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ed4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	ddeb      	ble.n	8003eb4 <Narwhal_Protocol+0x924>
				}
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8003edc:	4b9e      	ldr	r3, [pc, #632]	; (8004158 <Narwhal_Protocol+0xbc8>)
 8003ede:	791b      	ldrb	r3, [r3, #4]
 8003ee0:	021b      	lsls	r3, r3, #8
						| (UART5_rxBuffer[5])) / 100.0f;
 8003ee2:	4a9d      	ldr	r2, [pc, #628]	; (8004158 <Narwhal_Protocol+0xbc8>)
 8003ee4:	7952      	ldrb	r2, [r2, #5]
 8003ee6:	4313      	orrs	r3, r2
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						| (UART5_rxBuffer[5])) / 100.0f;
 8003ef0:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8004160 <Narwhal_Protocol+0xbd0>
 8003ef4:	eec7 7a26 	vdiv.f32	s15, s14, s13
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8003ef8:	4b9a      	ldr	r3, [pc, #616]	; (8004164 <Narwhal_Protocol+0xbd4>)
 8003efa:	edc3 7a00 	vstr	s15, [r3]

				if (ChessIndex[0] == 65 || ChessIndex[1] == 65){
 8003efe:	4b97      	ldr	r3, [pc, #604]	; (800415c <Narwhal_Protocol+0xbcc>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b41      	cmp	r3, #65	; 0x41
 8003f04:	d003      	beq.n	8003f0e <Narwhal_Protocol+0x97e>
 8003f06:	4b95      	ldr	r3, [pc, #596]	; (800415c <Narwhal_Protocol+0xbcc>)
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	2b41      	cmp	r3, #65	; 0x41
 8003f0c:	d102      	bne.n	8003f14 <Narwhal_Protocol+0x984>
					ChessMoveStates = ChessMove_Finish;
 8003f0e:	4b96      	ldr	r3, [pc, #600]	; (8004168 <Narwhal_Protocol+0xbd8>)
 8003f10:	2209      	movs	r2, #9
 8003f12:	701a      	strb	r2, [r3, #0]
				}

				Chess_Move_Start_Flag = 1;
 8003f14:	4b95      	ldr	r3, [pc, #596]	; (800416c <Narwhal_Protocol+0xbdc>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x05;
 8003f1a:	4b95      	ldr	r3, [pc, #596]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003f1c:	2205      	movs	r2, #5
 8003f1e:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003f20:	4b93      	ldr	r3, [pc, #588]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003f22:	22ff      	movs	r2, #255	; 0xff
 8003f24:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003f26:	2003      	movs	r0, #3
 8003f28:	f7ff fb12 	bl	8003550 <SentData>
				break;
 8003f2c:	e235      	b.n	800439a <Narwhal_Protocol+0xe0a>
				/* 		Data to MCU End	*/

				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 8003f2e:	4b90      	ldr	r3, [pc, #576]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003f30:	22ee      	movs	r2, #238	; 0xee
 8003f32:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8003f34:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4b8c      	ldr	r3, [pc, #560]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003f40:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 8003f42:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 8003f46:	b2da      	uxtb	r2, r3
 8003f48:	4b89      	ldr	r3, [pc, #548]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003f4a:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8003f4c:	2004      	movs	r0, #4
 8003f4e:	f7ff faff 	bl	8003550 <SentData>
				break;
 8003f52:	e222      	b.n	800439a <Narwhal_Protocol+0xe0a>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8003f54:	4b86      	ldr	r3, [pc, #536]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003f56:	22ee      	movs	r2, #238	; 0xee
 8003f58:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 8003f5a:	4b86      	ldr	r3, [pc, #536]	; (8004174 <Narwhal_Protocol+0xbe4>)
 8003f5c:	89db      	ldrh	r3, [r3, #14]
 8003f5e:	0a1b      	lsrs	r3, r3, #8
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	b2da      	uxtb	r2, r3
 8003f64:	4b82      	ldr	r3, [pc, #520]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003f66:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 8003f68:	4b82      	ldr	r3, [pc, #520]	; (8004174 <Narwhal_Protocol+0xbe4>)
 8003f6a:	89db      	ldrh	r3, [r3, #14]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b80      	ldr	r3, [pc, #512]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003f70:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8003f72:	2004      	movs	r0, #4
 8003f74:	f7ff faec 	bl	8003550 <SentData>
				break;
 8003f78:	e20f      	b.n	800439a <Narwhal_Protocol+0xe0a>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8003f7a:	4b7d      	ldr	r3, [pc, #500]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003f7c:	22ee      	movs	r2, #238	; 0xee
 8003f7e:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003f86:	e028      	b.n	8003fda <Narwhal_Protocol+0xa4a>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 8003f88:	497a      	ldr	r1, [pc, #488]	; (8004174 <Narwhal_Protocol+0xbe4>)
 8003f8a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	330e      	adds	r3, #14
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	b2d1      	uxtb	r1, r2
 8003faa:	4a71      	ldr	r2, [pc, #452]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003fac:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 8003fae:	4971      	ldr	r1, [pc, #452]	; (8004174 <Narwhal_Protocol+0xbe4>)
 8003fb0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	330e      	adds	r3, #14
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	3303      	adds	r3, #3
 8003fca:	b2d1      	uxtb	r1, r2
 8003fcc:	4a68      	ldr	r2, [pc, #416]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003fce:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	ddd2      	ble.n	8003f88 <Narwhal_Protocol+0x9f8>
				}
				SentData(12);
 8003fe2:	200c      	movs	r0, #12
 8003fe4:	f7ff fab4 	bl	8003550 <SentData>
				break;
 8003fe8:	e1d7      	b.n	800439a <Narwhal_Protocol+0xe0a>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 8003fea:	4b61      	ldr	r3, [pc, #388]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8003fec:	22ee      	movs	r2, #238	; 0xee
 8003fee:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003ff6:	e02c      	b.n	8004052 <Narwhal_Protocol+0xac2>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003ff8:	4a5f      	ldr	r2, [pc, #380]	; (8004178 <Narwhal_Protocol+0xbe8>)
 8003ffa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003ffe:	21d8      	movs	r1, #216	; 0xd8
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	3350      	adds	r3, #80	; 0x50
 8004008:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 800400c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8004148 <Narwhal_Protocol+0xbb8>
 8004010:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8004014:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004018:	ee17 3a90 	vmov	r3, s15
 800401c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8004020:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 8004024:	121b      	asrs	r3, r3, #8
 8004026:	b21a      	sxth	r2, r3
 8004028:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800402c:	3301      	adds	r3, #1
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	b2d1      	uxtb	r1, r2
 8004032:	4a4f      	ldr	r2, [pc, #316]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8004034:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004036:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	3303      	adds	r3, #3
 800403e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8004042:	b2d1      	uxtb	r1, r2
 8004044:	4a4a      	ldr	r2, [pc, #296]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8004046:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004048:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800404c:	3301      	adds	r3, #1
 800404e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004052:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004056:	2b03      	cmp	r3, #3
 8004058:	ddce      	ble.n	8003ff8 <Narwhal_Protocol+0xa68>
				}
				UART5_txBuffer[10] = 0;
 800405a:	4b45      	ldr	r3, [pc, #276]	; (8004170 <Narwhal_Protocol+0xbe0>)
 800405c:	2200      	movs	r2, #0
 800405e:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 8004060:	4b43      	ldr	r3, [pc, #268]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8004062:	2200      	movs	r2, #0
 8004064:	72da      	strb	r2, [r3, #11]
				SentData(12);
 8004066:	200c      	movs	r0, #12
 8004068:	f7ff fa72 	bl	8003550 <SentData>
				break;
 800406c:	e195      	b.n	800439a <Narwhal_Protocol+0xe0a>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 800406e:	4b40      	ldr	r3, [pc, #256]	; (8004170 <Narwhal_Protocol+0xbe0>)
 8004070:	22ee      	movs	r2, #238	; 0xee
 8004072:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */

				for (int i = 0; i < 4; i++) {
 8004074:	2300      	movs	r3, #0
 8004076:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800407a:	e018      	b.n	80040ae <Narwhal_Protocol+0xb1e>
					q_in[i] = Control[i].PositionFeedback;
 800407c:	4a3e      	ldr	r2, [pc, #248]	; (8004178 <Narwhal_Protocol+0xbe8>)
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004082:	21d8      	movs	r1, #216	; 0xd8
 8004084:	fb01 f303 	mul.w	r3, r1, r3
 8004088:	4413      	add	r3, r2
 800408a:	3350      	adds	r3, #80	; 0x50
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8004094:	f5a1 7084 	sub.w	r0, r1, #264	; 0x108
 8004098:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800409c:	00c9      	lsls	r1, r1, #3
 800409e:	4401      	add	r1, r0
 80040a0:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 80040a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040a8:	3301      	adds	r3, #1
 80040aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	dde2      	ble.n	800407c <Narwhal_Protocol+0xaec>
				}
				FPK(q_in, 269.0f, task);
 80040b6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80040ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040be:	4611      	mov	r1, r2
 80040c0:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8004150 <Narwhal_Protocol+0xbc0>
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe facb 	bl	8002660 <FPK>

				for (int i = 0; i < 3; i++) {
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80040d0:	e02b      	b.n	800412a <Narwhal_Protocol+0xb9a>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 80040d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80040dc:	443b      	add	r3, r7
 80040de:	3bb0      	subs	r3, #176	; 0xb0
 80040e0:	ed93 7b00 	vldr	d7, [r3]
 80040e4:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80040e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80040ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80040f0:	ee17 3a90 	vmov	r3, s15
 80040f4:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80040f8:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80040fc:	121b      	asrs	r3, r3, #8
 80040fe:	b21a      	sxth	r2, r3
 8004100:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004104:	3301      	adds	r3, #1
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	b2d1      	uxtb	r1, r2
 800410a:	4a19      	ldr	r2, [pc, #100]	; (8004170 <Narwhal_Protocol+0xbe0>)
 800410c:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 800410e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	3303      	adds	r3, #3
 8004116:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 800411a:	b2d1      	uxtb	r1, r2
 800411c:	4a14      	ldr	r2, [pc, #80]	; (8004170 <Narwhal_Protocol+0xbe0>)
 800411e:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8004120:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004124:	3301      	adds	r3, #1
 8004126:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800412a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800412e:	2b02      	cmp	r3, #2
 8004130:	ddcf      	ble.n	80040d2 <Narwhal_Protocol+0xb42>
				}
				SentData(8);
 8004132:	2008      	movs	r0, #8
 8004134:	f7ff fa0c 	bl	8003550 <SentData>
				break;
 8004138:	e12f      	b.n	800439a <Narwhal_Protocol+0xe0a>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <Narwhal_Protocol+0xbe0>)
 800413c:	22ee      	movs	r2, #238	; 0xee
 800413e:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
				for (int i = 0; i < 4; i++) {
 8004140:	2300      	movs	r3, #0
 8004142:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004146:	e032      	b.n	80041ae <Narwhal_Protocol+0xc1e>
 8004148:	00000000 	.word	0x00000000
 800414c:	408f4000 	.word	0x408f4000
 8004150:	00000000 	.word	0x00000000
 8004154:	4070d000 	.word	0x4070d000
 8004158:	20000094 	.word	0x20000094
 800415c:	20000bc4 	.word	0x20000bc4
 8004160:	42c80000 	.word	0x42c80000
 8004164:	20000bc8 	.word	0x20000bc8
 8004168:	20000bcd 	.word	0x20000bcd
 800416c:	20000bcc 	.word	0x20000bcc
 8004170:	200000a4 	.word	0x200000a4
 8004174:	200002b8 	.word	0x200002b8
 8004178:	20000498 	.word	0x20000498
					q_in[i] = Control[i].PositionFeedback;
 800417c:	4a90      	ldr	r2, [pc, #576]	; (80043c0 <Narwhal_Protocol+0xe30>)
 800417e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004182:	21d8      	movs	r1, #216	; 0xd8
 8004184:	fb01 f303 	mul.w	r3, r1, r3
 8004188:	4413      	add	r3, r2
 800418a:	3350      	adds	r3, #80	; 0x50
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8004194:	f5a1 7084 	sub.w	r0, r1, #264	; 0x108
 8004198:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800419c:	00c9      	lsls	r1, r1, #3
 800419e:	4401      	add	r1, r0
 80041a0:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 80041a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041a8:	3301      	adds	r3, #1
 80041aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80041ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	dde2      	ble.n	800417c <Narwhal_Protocol+0xbec>
				}
				FPK(q_in, 269.0f, task);
 80041b6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80041ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041be:	4611      	mov	r1, r2
 80041c0:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 80043b0 <Narwhal_Protocol+0xe20>
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe fa4b 	bl	8002660 <FPK>

				/* Station Encoder */
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 80041ca:	4b7e      	ldr	r3, [pc, #504]	; (80043c4 <Narwhal_Protocol+0xe34>)
 80041cc:	89db      	ldrh	r3, [r3, #14]
 80041ce:	0a1b      	lsrs	r3, r3, #8
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	4b7c      	ldr	r3, [pc, #496]	; (80043c8 <Narwhal_Protocol+0xe38>)
 80041d6:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 80041d8:	4b7a      	ldr	r3, [pc, #488]	; (80043c4 <Narwhal_Protocol+0xe34>)
 80041da:	89db      	ldrh	r3, [r3, #14]
 80041dc:	b2da      	uxtb	r2, r3
 80041de:	4b7a      	ldr	r3, [pc, #488]	; (80043c8 <Narwhal_Protocol+0xe38>)
 80041e0:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 80041e2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80041e6:	0a1b      	lsrs	r3, r3, #8
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	4b76      	ldr	r3, [pc, #472]	; (80043c8 <Narwhal_Protocol+0xe38>)
 80041ee:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 80041f0:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	4b74      	ldr	r3, [pc, #464]	; (80043c8 <Narwhal_Protocol+0xe38>)
 80041f8:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol2 >> 8) & 0xFF);
 80041fa:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	b29b      	uxth	r3, r3
 8004202:	b2da      	uxtb	r2, r3
 8004204:	4b70      	ldr	r3, [pc, #448]	; (80043c8 <Narwhal_Protocol+0xe38>)
 8004206:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol2 & 0xFF);
 8004208:	f8b7 30fa 	ldrh.w	r3, [r7, #250]	; 0xfa
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4b6e      	ldr	r3, [pc, #440]	; (80043c8 <Narwhal_Protocol+0xe38>)
 8004210:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 8004212:	2300      	movs	r3, #0
 8004214:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004218:	e02c      	b.n	8004274 <Narwhal_Protocol+0xce4>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 800421a:	4a69      	ldr	r2, [pc, #420]	; (80043c0 <Narwhal_Protocol+0xe30>)
 800421c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004220:	21d8      	movs	r1, #216	; 0xd8
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	3350      	adds	r3, #80	; 0x50
 800422a:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 800422e:	ed9f 6b62 	vldr	d6, [pc, #392]	; 80043b8 <Narwhal_Protocol+0xe28>
 8004232:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8004236:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800423a:	ee17 3a90 	vmov	r3, s15
 800423e:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8004242:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8004246:	121b      	asrs	r3, r3, #8
 8004248:	b21a      	sxth	r2, r3
 800424a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800424e:	3304      	adds	r3, #4
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	b2d1      	uxtb	r1, r2
 8004254:	4a5c      	ldr	r2, [pc, #368]	; (80043c8 <Narwhal_Protocol+0xe38>)
 8004256:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004258:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800425c:	005b      	lsls	r3, r3, #1
 800425e:	3309      	adds	r3, #9
 8004260:	f8b7 20d2 	ldrh.w	r2, [r7, #210]	; 0xd2
 8004264:	b2d1      	uxtb	r1, r2
 8004266:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <Narwhal_Protocol+0xe38>)
 8004268:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 800426a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800426e:	3301      	adds	r3, #1
 8004270:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004274:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004278:	2b03      	cmp	r3, #3
 800427a:	ddce      	ble.n	800421a <Narwhal_Protocol+0xc8a>
				}
				UART5_txBuffer[16] = 0;
 800427c:	4b52      	ldr	r3, [pc, #328]	; (80043c8 <Narwhal_Protocol+0xe38>)
 800427e:	2200      	movs	r2, #0
 8004280:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 8004282:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <Narwhal_Protocol+0xe38>)
 8004284:	2200      	movs	r2, #0
 8004286:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800428e:	e029      	b.n	80042e4 <Narwhal_Protocol+0xd54>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 8004290:	4a4e      	ldr	r2, [pc, #312]	; (80043cc <Narwhal_Protocol+0xe3c>)
 8004292:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	ed93 7b00 	vldr	d7, [r3]
 800429e:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80043b8 <Narwhal_Protocol+0xe28>
 80042a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80042a6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80042aa:	ee17 3a90 	vmov	r3, s15
 80042ae:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80042b2:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	; 0xd4
 80042b6:	121b      	asrs	r3, r3, #8
 80042b8:	b21a      	sxth	r2, r3
 80042ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042be:	3309      	adds	r3, #9
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	b2d1      	uxtb	r1, r2
 80042c4:	4a40      	ldr	r2, [pc, #256]	; (80043c8 <Narwhal_Protocol+0xe38>)
 80042c6:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80042c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	3313      	adds	r3, #19
 80042d0:	f8b7 20d4 	ldrh.w	r2, [r7, #212]	; 0xd4
 80042d4:	b2d1      	uxtb	r1, r2
 80042d6:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <Narwhal_Protocol+0xe38>)
 80042d8:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80042da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042de:	3301      	adds	r3, #1
 80042e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80042e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	ddd1      	ble.n	8004290 <Narwhal_Protocol+0xd00>
				}
				UART5_txBuffer[26] = 0;
 80042ec:	4b36      	ldr	r3, [pc, #216]	; (80043c8 <Narwhal_Protocol+0xe38>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 80042f2:	4b35      	ldr	r3, [pc, #212]	; (80043c8 <Narwhal_Protocol+0xe38>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80042fe:	e02b      	b.n	8004358 <Narwhal_Protocol+0xdc8>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8004300:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800430a:	443b      	add	r3, r7
 800430c:	3bb0      	subs	r3, #176	; 0xb0
 800430e:	ed93 7b00 	vldr	d7, [r3]
 8004312:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004316:	ee27 7b06 	vmul.f64	d7, d7, d6
 800431a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800431e:	ee17 3a90 	vmov	r3, s15
 8004322:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8004326:	f9b7 30d6 	ldrsh.w	r3, [r7, #214]	; 0xd6
 800432a:	121b      	asrs	r3, r3, #8
 800432c:	b21a      	sxth	r2, r3
 800432e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004332:	330e      	adds	r3, #14
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	b2d1      	uxtb	r1, r2
 8004338:	4a23      	ldr	r2, [pc, #140]	; (80043c8 <Narwhal_Protocol+0xe38>)
 800433a:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 800433c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	331d      	adds	r3, #29
 8004344:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8004348:	b2d1      	uxtb	r1, r2
 800434a:	4a1f      	ldr	r2, [pc, #124]	; (80043c8 <Narwhal_Protocol+0xe38>)
 800434c:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 800434e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004352:	3301      	adds	r3, #1
 8004354:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004358:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800435c:	2b02      	cmp	r3, #2
 800435e:	ddcf      	ble.n	8004300 <Narwhal_Protocol+0xd70>
				}
				UART5_txBuffer[34] = Chess_Move_Start_Flag;
 8004360:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <Narwhal_Protocol+0xe40>)
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	4b18      	ldr	r3, [pc, #96]	; (80043c8 <Narwhal_Protocol+0xe38>)
 8004366:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				SentData(35);
 800436a:	2023      	movs	r0, #35	; 0x23
 800436c:	f7ff f8f0 	bl	8003550 <SentData>
				break;
 8004370:	e013      	b.n	800439a <Narwhal_Protocol+0xe0a>
			default:
				UART5_txBuffer[2] = 0xFF;
 8004372:	4b15      	ldr	r3, [pc, #84]	; (80043c8 <Narwhal_Protocol+0xe38>)
 8004374:	22ff      	movs	r2, #255	; 0xff
 8004376:	709a      	strb	r2, [r3, #2]
				SentData(3);
 8004378:	2003      	movs	r0, #3
 800437a:	f7ff f8e9 	bl	8003550 <SentData>
 800437e:	e00c      	b.n	800439a <Narwhal_Protocol+0xe0a>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 8004380:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <Narwhal_Protocol+0xe38>)
 8004382:	22cc      	movs	r2, #204	; 0xcc
 8004384:	705a      	strb	r2, [r3, #1]
			SentData(3);
 8004386:	2003      	movs	r0, #3
 8004388:	f7ff f8e2 	bl	8003550 <SentData>
 800438c:	e005      	b.n	800439a <Narwhal_Protocol+0xe0a>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <Narwhal_Protocol+0xe38>)
 8004390:	22aa      	movs	r2, #170	; 0xaa
 8004392:	705a      	strb	r2, [r3, #1]
		SentData(3);
 8004394:	2003      	movs	r0, #3
 8004396:	f7ff f8db 	bl	8003550 <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 800439a:	220e      	movs	r2, #14
 800439c:	490d      	ldr	r1, [pc, #52]	; (80043d4 <Narwhal_Protocol+0xe44>)
 800439e:	480e      	ldr	r0, [pc, #56]	; (80043d8 <Narwhal_Protocol+0xe48>)
 80043a0:	f00e fe5a 	bl	8013058 <HAL_UART_Receive_IT>
}
 80043a4:	bf00      	nop
 80043a6:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bdb0      	pop	{r4, r5, r7, pc}
 80043ae:	bf00      	nop
 80043b0:	00000000 	.word	0x00000000
 80043b4:	4070d000 	.word	0x4070d000
 80043b8:	00000000 	.word	0x00000000
 80043bc:	408f4000 	.word	0x408f4000
 80043c0:	20000498 	.word	0x20000498
 80043c4:	200002b8 	.word	0x200002b8
 80043c8:	200000a4 	.word	0x200000a4
 80043cc:	20000b60 	.word	0x20000b60
 80043d0:	20000bcc 	.word	0x20000bcc
 80043d4:	20000094 	.word	0x20000094
 80043d8:	200011d4 	.word	0x200011d4
 80043dc:	00000000 	.word	0x00000000

080043e0 <Control_Function>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 0;
}

inline void Control_Function() {
 80043e0:	b5b0      	push	{r4, r5, r7, lr}
 80043e2:	b0b8      	sub	sp, #224	; 0xe0
 80043e4:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	double J1, J2, J3, J4;
	J1 = EncPulse2Rad_Read(&Encoder[0], 1);
 80043e6:	2101      	movs	r1, #1
 80043e8:	48a5      	ldr	r0, [pc, #660]	; (8004680 <Control_Function+0x2a0>)
 80043ea:	f7fc f913 	bl	8000614 <EncPulse2Rad_Read>
 80043ee:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
	J2 = EncPulse2Rad_Read(&Encoder[1], 0);
 80043f2:	2100      	movs	r1, #0
 80043f4:	48a3      	ldr	r0, [pc, #652]	; (8004684 <Control_Function+0x2a4>)
 80043f6:	f7fc f90d 	bl	8000614 <EncPulse2Rad_Read>
 80043fa:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
	J3 = EncPulse2Rad_Read(&Encoder[2], 0);
 80043fe:	2100      	movs	r1, #0
 8004400:	48a1      	ldr	r0, [pc, #644]	; (8004688 <Control_Function+0x2a8>)
 8004402:	f7fc f907 	bl	8000614 <EncPulse2Rad_Read>
 8004406:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
	J4 = EncPulse2Rad_Read(&Encoder[3], 0);
 800440a:	2100      	movs	r1, #0
 800440c:	489f      	ldr	r0, [pc, #636]	; (800468c <Control_Function+0x2ac>)
 800440e:	f7fc f901 	bl	8000614 <EncPulse2Rad_Read>
 8004412:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0

	/***** Joint Space SetPoint Gen *****/
	if (Chessmove_State == 0) {
 8004416:	4b9e      	ldr	r3, [pc, #632]	; (8004690 <Control_Function+0x2b0>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	f040 808d 	bne.w	800453a <Control_Function+0x15a>
		if (Traj_Flag & 0x0F) {
 8004420:	4b9c      	ldr	r3, [pc, #624]	; (8004694 <Control_Function+0x2b4>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 816a 	beq.w	8004702 <Control_Function+0x322>
			double traj_t_set[5];
			traj_t_set[0] = t;
 800442e:	4b9a      	ldr	r3, [pc, #616]	; (8004698 <Control_Function+0x2b8>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 8004438:	4b97      	ldr	r3, [pc, #604]	; (8004698 <Control_Function+0x2b8>)
 800443a:	ed93 6b00 	vldr	d6, [r3]
 800443e:	4b96      	ldr	r3, [pc, #600]	; (8004698 <Control_Function+0x2b8>)
 8004440:	ed93 7b00 	vldr	d7, [r3]
 8004444:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004448:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 800444c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8004450:	4b91      	ldr	r3, [pc, #580]	; (8004698 <Control_Function+0x2b8>)
 8004452:	ed93 7b00 	vldr	d7, [r3]
 8004456:	ee26 7b07 	vmul.f64	d7, d6, d7
 800445a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 800445e:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004462:	4b8d      	ldr	r3, [pc, #564]	; (8004698 <Control_Function+0x2b8>)
 8004464:	ed93 7b00 	vldr	d7, [r3]
 8004468:	ee26 7b07 	vmul.f64	d7, d6, d7
 800446c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 8004470:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8004474:	4b88      	ldr	r3, [pc, #544]	; (8004698 <Control_Function+0x2b8>)
 8004476:	ed93 7b00 	vldr	d7, [r3]
 800447a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800447e:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 0; i < 4; i++) {
 8004482:	2300      	movs	r3, #0
 8004484:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004488:	e048      	b.n	800451c <Control_Function+0x13c>
				if (Traj_Flag & (0x01 << i)) {
 800448a:	4b82      	ldr	r3, [pc, #520]	; (8004694 <Control_Function+0x2b4>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004494:	fa42 f303 	asr.w	r3, r2, r3
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d038      	beq.n	8004512 <Control_Function+0x132>
					TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 80044a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044a4:	4613      	mov	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	1a9b      	subs	r3, r3, r2
 80044aa:	00db      	lsls	r3, r3, #3
 80044ac:	4a7b      	ldr	r2, [pc, #492]	; (800469c <Control_Function+0x2bc>)
 80044ae:	1898      	adds	r0, r3, r2
 80044b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4a7a      	ldr	r2, [pc, #488]	; (80046a0 <Control_Function+0x2c0>)
 80044b8:	441a      	add	r2, r3
 80044ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	4978      	ldr	r1, [pc, #480]	; (80046a4 <Control_Function+0x2c4>)
 80044c2:	440b      	add	r3, r1
 80044c4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80044c8:	f7fc fe98 	bl	80011fc <TrajFollow>
							&SetPoint_Velocity[i]);
					if (t >= Traj[i].T) {
 80044cc:	4973      	ldr	r1, [pc, #460]	; (800469c <Control_Function+0x2bc>)
 80044ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044d2:	4613      	mov	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	440b      	add	r3, r1
 80044dc:	3330      	adds	r3, #48	; 0x30
 80044de:	ed93 6b00 	vldr	d6, [r3]
 80044e2:	4b6d      	ldr	r3, [pc, #436]	; (8004698 <Control_Function+0x2b8>)
 80044e4:	ed93 7b00 	vldr	d7, [r3]
 80044e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80044ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f0:	d80f      	bhi.n	8004512 <Control_Function+0x132>
						Traj_Flag &= ((0x01 << i) ^ 0xFF);
 80044f2:	2201      	movs	r2, #1
 80044f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	b25b      	sxtb	r3, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	b25a      	sxtb	r2, r3
 8004502:	4b64      	ldr	r3, [pc, #400]	; (8004694 <Control_Function+0x2b4>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b25b      	sxtb	r3, r3
 8004508:	4013      	ands	r3, r2
 800450a:	b25b      	sxtb	r3, r3
 800450c:	b2da      	uxtb	r2, r3
 800450e:	4b61      	ldr	r3, [pc, #388]	; (8004694 <Control_Function+0x2b4>)
 8004510:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8004512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004516:	3301      	adds	r3, #1
 8004518:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800451c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004520:	2b03      	cmp	r3, #3
 8004522:	ddb2      	ble.n	800448a <Control_Function+0xaa>
					}
				}
			}
			t += delta_t;
 8004524:	4b5c      	ldr	r3, [pc, #368]	; (8004698 <Control_Function+0x2b8>)
 8004526:	ed93 7b00 	vldr	d7, [r3]
 800452a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8004678 <Control_Function+0x298>
 800452e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004532:	4b59      	ldr	r3, [pc, #356]	; (8004698 <Control_Function+0x2b8>)
 8004534:	ed83 7b00 	vstr	d7, [r3]
 8004538:	e0e3      	b.n	8004702 <Control_Function+0x322>
		}
	}

	else if (Chessmove_State == 1) {
 800453a:	4b55      	ldr	r3, [pc, #340]	; (8004690 <Control_Function+0x2b0>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	f040 80df 	bne.w	8004702 <Control_Function+0x322>
		if (Traj_Flag & 0x0F) {
 8004544:	4b53      	ldr	r3, [pc, #332]	; (8004694 <Control_Function+0x2b4>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	f003 030f 	and.w	r3, r3, #15
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80d8 	beq.w	8004702 <Control_Function+0x322>
			double gamma[3] = { 1, 1, -1 };
 8004552:	4b55      	ldr	r3, [pc, #340]	; (80046a8 <Control_Function+0x2c8>)
 8004554:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8004558:	461d      	mov	r5, r3
 800455a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800455c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800455e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004562:	e884 0003 	stmia.w	r4, {r0, r1}
			//*********** Chi Output ************//
			double SetPointPosition[4];
			double SetPointVelocity[4];

			double traj_t_set[5];
			traj_t_set[0] = t;
 8004566:	4b4c      	ldr	r3, [pc, #304]	; (8004698 <Control_Function+0x2b8>)
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 8004570:	4b49      	ldr	r3, [pc, #292]	; (8004698 <Control_Function+0x2b8>)
 8004572:	ed93 6b00 	vldr	d6, [r3]
 8004576:	4b48      	ldr	r3, [pc, #288]	; (8004698 <Control_Function+0x2b8>)
 8004578:	ed93 7b00 	vldr	d7, [r3]
 800457c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004580:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 8004584:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8004588:	4b43      	ldr	r3, [pc, #268]	; (8004698 <Control_Function+0x2b8>)
 800458a:	ed93 7b00 	vldr	d7, [r3]
 800458e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004592:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 8004596:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800459a:	4b3f      	ldr	r3, [pc, #252]	; (8004698 <Control_Function+0x2b8>)
 800459c:	ed93 7b00 	vldr	d7, [r3]
 80045a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80045a4:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 80045a8:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80045ac:	4b3a      	ldr	r3, [pc, #232]	; (8004698 <Control_Function+0x2b8>)
 80045ae:	ed93 7b00 	vldr	d7, [r3]
 80045b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80045b6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 4; i < 7; i++) {
 80045ba:	2304      	movs	r3, #4
 80045bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80045c0:	e040      	b.n	8004644 <Control_Function+0x264>
				TrajFollow(&Traj[i], traj_t_set, &Chi_t[i], &ChiDot_t[i]);
 80045c2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80045c6:	4613      	mov	r3, r2
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	00db      	lsls	r3, r3, #3
 80045ce:	4a33      	ldr	r2, [pc, #204]	; (800469c <Control_Function+0x2bc>)
 80045d0:	1898      	adds	r0, r3, r2
 80045d2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80045d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	18d4      	adds	r4, r2, r3
 80045de:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80045e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4413      	add	r3, r2
 80045ea:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80045ee:	4622      	mov	r2, r4
 80045f0:	f7fc fe04 	bl	80011fc <TrajFollow>
				if (t >= Traj[i].T) {
 80045f4:	4929      	ldr	r1, [pc, #164]	; (800469c <Control_Function+0x2bc>)
 80045f6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	440b      	add	r3, r1
 8004604:	3330      	adds	r3, #48	; 0x30
 8004606:	ed93 6b00 	vldr	d6, [r3]
 800460a:	4b23      	ldr	r3, [pc, #140]	; (8004698 <Control_Function+0x2b8>)
 800460c:	ed93 7b00 	vldr	d7, [r3]
 8004610:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004618:	d80f      	bhi.n	800463a <Control_Function+0x25a>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 800461a:	2201      	movs	r2, #1
 800461c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	b25b      	sxtb	r3, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	b25a      	sxtb	r2, r3
 800462a:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <Control_Function+0x2b4>)
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	b25b      	sxtb	r3, r3
 8004630:	4013      	ands	r3, r2
 8004632:	b25b      	sxtb	r3, r3
 8004634:	b2da      	uxtb	r2, r3
 8004636:	4b17      	ldr	r3, [pc, #92]	; (8004694 <Control_Function+0x2b4>)
 8004638:	701a      	strb	r2, [r3, #0]
			for (int i = 4; i < 7; i++) {
 800463a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800463e:	3301      	adds	r3, #1
 8004640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004648:	2b06      	cmp	r3, #6
 800464a:	ddba      	ble.n	80045c2 <Control_Function+0x1e2>
				}
			}
			IPK(gamma, Chi_t, SetPointPosition);
 800464c:	463a      	mov	r2, r7
 800464e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004652:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004656:	4618      	mov	r0, r3
 8004658:	f7fd fbfa 	bl	8001e50 <IPK>
			IVK(SetPointPosition, ChiDot_t, SetPointVelocity);
 800465c:	f107 0220 	add.w	r2, r7, #32
 8004660:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004664:	463b      	mov	r3, r7
 8004666:	4618      	mov	r0, r3
 8004668:	f7fd fd1e 	bl	80020a8 <IVK>
			for (int i = 0; i < 4; i++) {
 800466c:	2300      	movs	r3, #0
 800466e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004672:	e038      	b.n	80046e6 <Control_Function+0x306>
 8004674:	f3af 8000 	nop.w
 8004678:	d2f1a9fc 	.word	0xd2f1a9fc
 800467c:	3f50624d 	.word	0x3f50624d
 8004680:	200002b8 	.word	0x200002b8
 8004684:	200002e0 	.word	0x200002e0
 8004688:	20000308 	.word	0x20000308
 800468c:	20000330 	.word	0x20000330
 8004690:	20000bbb 	.word	0x20000bbb
 8004694:	20000bb9 	.word	0x20000bb9
 8004698:	20000bb0 	.word	0x20000bb0
 800469c:	200009d0 	.word	0x200009d0
 80046a0:	20000b60 	.word	0x20000b60
 80046a4:	20000b88 	.word	0x20000b88
 80046a8:	08016b98 	.word	0x08016b98
				TrajFollow(&Traj[i], traj_t_set, &SetPointPosition[i],
 80046ac:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	4a47      	ldr	r2, [pc, #284]	; (80047d8 <Control_Function+0x3f8>)
 80046ba:	1898      	adds	r0, r3, r2
 80046bc:	463a      	mov	r2, r7
 80046be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	18d4      	adds	r4, r2, r3
 80046c6:	f107 0220 	add.w	r2, r7, #32
 80046ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80046d6:	4622      	mov	r2, r4
 80046d8:	f7fc fd90 	bl	80011fc <TrajFollow>
			for (int i = 0; i < 4; i++) {
 80046dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046e0:	3301      	adds	r3, #1
 80046e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80046e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ea:	2b03      	cmp	r3, #3
 80046ec:	ddde      	ble.n	80046ac <Control_Function+0x2cc>
						&SetPointVelocity[i]);
			}
			t += delta_t;
 80046ee:	4b3b      	ldr	r3, [pc, #236]	; (80047dc <Control_Function+0x3fc>)
 80046f0:	ed93 7b00 	vldr	d7, [r3]
 80046f4:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80047d0 <Control_Function+0x3f0>
 80046f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046fc:	4b37      	ldr	r3, [pc, #220]	; (80047dc <Control_Function+0x3fc>)
 80046fe:	ed83 7b00 	vstr	d7, [r3]
		}
	}

	CascadeControl(&Control[0], &Kalman[0], J1, SetPoint_Position[0], SetPoint_Velocity[0]);
 8004702:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <Control_Function+0x400>)
 8004704:	ed93 7b00 	vldr	d7, [r3]
 8004708:	4b36      	ldr	r3, [pc, #216]	; (80047e4 <Control_Function+0x404>)
 800470a:	ed93 6b00 	vldr	d6, [r3]
 800470e:	eeb0 2b46 	vmov.f64	d2, d6
 8004712:	eeb0 1b47 	vmov.f64	d1, d7
 8004716:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 800471a:	4933      	ldr	r1, [pc, #204]	; (80047e8 <Control_Function+0x408>)
 800471c:	4833      	ldr	r0, [pc, #204]	; (80047ec <Control_Function+0x40c>)
 800471e:	f7fd f8c2 	bl	80018a6 <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2, SetPoint_Position[1], SetPoint_Velocity[1]);
 8004722:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <Control_Function+0x400>)
 8004724:	ed93 7b02 	vldr	d7, [r3, #8]
 8004728:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <Control_Function+0x404>)
 800472a:	ed93 6b02 	vldr	d6, [r3, #8]
 800472e:	eeb0 2b46 	vmov.f64	d2, d6
 8004732:	eeb0 1b47 	vmov.f64	d1, d7
 8004736:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 800473a:	492d      	ldr	r1, [pc, #180]	; (80047f0 <Control_Function+0x410>)
 800473c:	482d      	ldr	r0, [pc, #180]	; (80047f4 <Control_Function+0x414>)
 800473e:	f7fd f8b2 	bl	80018a6 <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3, SetPoint_Position[2], SetPoint_Velocity[2]);
 8004742:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <Control_Function+0x400>)
 8004744:	ed93 7b04 	vldr	d7, [r3, #16]
 8004748:	4b26      	ldr	r3, [pc, #152]	; (80047e4 <Control_Function+0x404>)
 800474a:	ed93 6b04 	vldr	d6, [r3, #16]
 800474e:	eeb0 2b46 	vmov.f64	d2, d6
 8004752:	eeb0 1b47 	vmov.f64	d1, d7
 8004756:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 800475a:	4927      	ldr	r1, [pc, #156]	; (80047f8 <Control_Function+0x418>)
 800475c:	4827      	ldr	r0, [pc, #156]	; (80047fc <Control_Function+0x41c>)
 800475e:	f7fd f8a2 	bl	80018a6 <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4, SetPoint_Position[3], SetPoint_Velocity[3]);
 8004762:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <Control_Function+0x400>)
 8004764:	ed93 7b06 	vldr	d7, [r3, #24]
 8004768:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <Control_Function+0x404>)
 800476a:	ed93 6b06 	vldr	d6, [r3, #24]
 800476e:	eeb0 2b46 	vmov.f64	d2, d6
 8004772:	eeb0 1b47 	vmov.f64	d1, d7
 8004776:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 800477a:	4921      	ldr	r1, [pc, #132]	; (8004800 <Control_Function+0x420>)
 800477c:	4821      	ldr	r0, [pc, #132]	; (8004804 <Control_Function+0x424>)
 800477e:	f7fd f892 	bl	80018a6 <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 8004782:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <Control_Function+0x40c>)
 8004784:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004788:	eeb0 0b47 	vmov.f64	d0, d7
 800478c:	481e      	ldr	r0, [pc, #120]	; (8004808 <Control_Function+0x428>)
 800478e:	f7fc fb5f 	bl	8000e50 <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 8004792:	4b16      	ldr	r3, [pc, #88]	; (80047ec <Control_Function+0x40c>)
 8004794:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8004798:	eeb0 0b47 	vmov.f64	d0, d7
 800479c:	481b      	ldr	r0, [pc, #108]	; (800480c <Control_Function+0x42c>)
 800479e:	f7fc fb57 	bl	8000e50 <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <Control_Function+0x40c>)
 80047a4:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 80047a8:	eeb0 0b47 	vmov.f64	d0, d7
 80047ac:	4818      	ldr	r0, [pc, #96]	; (8004810 <Control_Function+0x430>)
 80047ae:	f7fc fb4f 	bl	8000e50 <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <Control_Function+0x40c>)
 80047b4:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 80047b8:	eeb0 0b47 	vmov.f64	d0, d7
 80047bc:	4815      	ldr	r0, [pc, #84]	; (8004814 <Control_Function+0x434>)
 80047be:	f7fc fb47 	bl	8000e50 <Step_Driver>
}
 80047c2:	bf00      	nop
 80047c4:	37e0      	adds	r7, #224	; 0xe0
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ca:	bf00      	nop
 80047cc:	f3af 8000 	nop.w
 80047d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80047d4:	3f50624d 	.word	0x3f50624d
 80047d8:	200009d0 	.word	0x200009d0
 80047dc:	20000bb0 	.word	0x20000bb0
 80047e0:	20000b60 	.word	0x20000b60
 80047e4:	20000b88 	.word	0x20000b88
 80047e8:	20000358 	.word	0x20000358
 80047ec:	20000498 	.word	0x20000498
 80047f0:	20000398 	.word	0x20000398
 80047f4:	20000570 	.word	0x20000570
 80047f8:	200003d8 	.word	0x200003d8
 80047fc:	20000648 	.word	0x20000648
 8004800:	20000418 	.word	0x20000418
 8004804:	20000720 	.word	0x20000720
 8004808:	200007f8 	.word	0x200007f8
 800480c:	2000080c 	.word	0x2000080c
 8004810:	20000820 	.word	0x20000820
 8004814:	20000834 	.word	0x20000834

08004818 <JMoveTaskSpace>:

inline void JMoveTaskSpace(double Task2Go[3], double Time2Move){
 8004818:	b5b0      	push	{r4, r5, r7, lr}
 800481a:	b094      	sub	sp, #80	; 0x50
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	ed87 0b00 	vstr	d0, [r7]
	double gamma[3] = { 1, 1, -1 };
 8004824:	4b2e      	ldr	r3, [pc, #184]	; (80048e0 <JMoveTaskSpace+0xc8>)
 8004826:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800482a:	461d      	mov	r5, r3
 800482c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800482e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004830:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004834:	e884 0003 	stmia.w	r4, {r0, r1}
	double q_inv[4];
	IPK(gamma, Task2Go, q_inv);
 8004838:	f107 0210 	add.w	r2, r7, #16
 800483c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004840:	68f9      	ldr	r1, [r7, #12]
 8004842:	4618      	mov	r0, r3
 8004844:	f7fd fb04 	bl	8001e50 <IPK>
	t = 0;
 8004848:	4926      	ldr	r1, [pc, #152]	; (80048e4 <JMoveTaskSpace+0xcc>)
 800484a:	f04f 0200 	mov.w	r2, #0
 800484e:	f04f 0300 	mov.w	r3, #0
 8004852:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 4; i++) {
 8004856:	2300      	movs	r3, #0
 8004858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800485a:	e02f      	b.n	80048bc <JMoveTaskSpace+0xa4>
		Traj_Coeff_Cal(&Traj[i], Time2Move, q_inv[i], Control[i].PositionFeedback, 0,
 800485c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800485e:	4613      	mov	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	4a20      	ldr	r2, [pc, #128]	; (80048e8 <JMoveTaskSpace+0xd0>)
 8004868:	441a      	add	r2, r3
 800486a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	3350      	adds	r3, #80	; 0x50
 8004870:	443b      	add	r3, r7
 8004872:	3b40      	subs	r3, #64	; 0x40
 8004874:	ed93 7b00 	vldr	d7, [r3]
 8004878:	491c      	ldr	r1, [pc, #112]	; (80048ec <JMoveTaskSpace+0xd4>)
 800487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487c:	20d8      	movs	r0, #216	; 0xd8
 800487e:	fb00 f303 	mul.w	r3, r0, r3
 8004882:	440b      	add	r3, r1
 8004884:	3350      	adds	r3, #80	; 0x50
 8004886:	ed93 6b00 	vldr	d6, [r3]
 800488a:	4918      	ldr	r1, [pc, #96]	; (80048ec <JMoveTaskSpace+0xd4>)
 800488c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488e:	20d8      	movs	r0, #216	; 0xd8
 8004890:	fb00 f303 	mul.w	r3, r0, r3
 8004894:	440b      	add	r3, r1
 8004896:	33b8      	adds	r3, #184	; 0xb8
 8004898:	ed93 5b00 	vldr	d5, [r3]
 800489c:	eeb0 4b45 	vmov.f64	d4, d5
 80048a0:	ed9f 3b0d 	vldr	d3, [pc, #52]	; 80048d8 <JMoveTaskSpace+0xc0>
 80048a4:	eeb0 2b46 	vmov.f64	d2, d6
 80048a8:	eeb0 1b47 	vmov.f64	d1, d7
 80048ac:	ed97 0b00 	vldr	d0, [r7]
 80048b0:	4610      	mov	r0, r2
 80048b2:	f7fc fbf5 	bl	80010a0 <Traj_Coeff_Cal>
	for (int i = 0; i < 4; i++) {
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	3301      	adds	r3, #1
 80048ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048be:	2b03      	cmp	r3, #3
 80048c0:	ddcc      	ble.n	800485c <JMoveTaskSpace+0x44>
				Control[i].VelocityFeedback);
	}
	Traj_Flag = 0x0F;
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <JMoveTaskSpace+0xd8>)
 80048c4:	220f      	movs	r2, #15
 80048c6:	701a      	strb	r2, [r3, #0]
	Chessmove_State = 0;
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <JMoveTaskSpace+0xdc>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3750      	adds	r7, #80	; 0x50
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bdb0      	pop	{r4, r5, r7, pc}
 80048d6:	bf00      	nop
	...
 80048e0:	08016b98 	.word	0x08016b98
 80048e4:	20000bb0 	.word	0x20000bb0
 80048e8:	200009d0 	.word	0x200009d0
 80048ec:	20000498 	.word	0x20000498
 80048f0:	20000bb9 	.word	0x20000bb9
 80048f4:	20000bbb 	.word	0x20000bbb

080048f8 <ChessNotMovePathWay>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 1; // Change to TaskSpace Traj
}

inline void ChessNotMovePathWay(uint8_t Index2Move, double Z_Offset, uint8_t IsJMove) {
 80048f8:	b5b0      	push	{r4, r5, r7, lr}
 80048fa:	b0a8      	sub	sp, #160	; 0xa0
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	ed87 0b00 	vstr	d0, [r7]
 8004904:	460a      	mov	r2, r1
 8004906:	73fb      	strb	r3, [r7, #15]
 8004908:	4613      	mov	r3, r2
 800490a:	73bb      	strb	r3, [r7, #14]
	/***** Encoder Read *****/
	double BaseEnc;
	double PositionXY[2];
	double SafePose[3] = {250, -270, 350};
 800490c:	4b8c      	ldr	r3, [pc, #560]	; (8004b40 <ChessNotMovePathWay+0x248>)
 800490e:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8004912:	461d      	mov	r5, r3
 8004914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004918:	e895 0003 	ldmia.w	r5, {r0, r1}
 800491c:	e884 0003 	stmia.w	r4, {r0, r1}

	/***** Base Encoder Read *****/
//	BaseEnc = BaseENCRead();   //?????????????????????????????????????????????????????????
	BaseEnc = 0;
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	ChessPose(Index2Move, BaseEnc, PositionXY);
 800492c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	4611      	mov	r1, r2
 8004934:	ed97 0b24 	vldr	d0, [r7, #144]	; 0x90
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe f8bd 	bl	8002ab8 <ChessPose>
	double q_Feed[4];
	double Pne[3];
	q_Feed[0] = Control[0].PositionFeedback;
 800493e:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <ChessNotMovePathWay+0x24c>)
 8004940:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004944:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	q_Feed[1] = Control[1].PositionFeedback;
 8004948:	4b7e      	ldr	r3, [pc, #504]	; (8004b44 <ChessNotMovePathWay+0x24c>)
 800494a:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 800494e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	q_Feed[2] = Control[2].PositionFeedback;
 8004952:	4b7c      	ldr	r3, [pc, #496]	; (8004b44 <ChessNotMovePathWay+0x24c>)
 8004954:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8004958:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	q_Feed[3] = Control[3].PositionFeedback;
 800495c:	4b79      	ldr	r3, [pc, #484]	; (8004b44 <ChessNotMovePathWay+0x24c>)
 800495e:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8004962:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	FPK(q_Feed, 269.0f, Pne);
 8004966:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800496a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800496e:	4611      	mov	r1, r2
 8004970:	ed9f 0b65 	vldr	d0, [pc, #404]	; 8004b08 <ChessNotMovePathWay+0x210>
 8004974:	4618      	mov	r0, r3
 8004976:	f7fd fe73 	bl	8002660 <FPK>
	double Time2MoveDynamic = 1.2;
 800497a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800497e:	4b72      	ldr	r3, [pc, #456]	; (8004b48 <ChessNotMovePathWay+0x250>)
 8004980:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	Time2MoveDynamic += (sqrt(
			((PositionXY[0] - Pne[0]) * (PositionXY[0] - Pne[0]))
 8004984:	ed97 6b1e 	vldr	d6, [r7, #120]	; 0x78
 8004988:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800498c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004990:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8004994:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004998:	ee35 7b47 	vsub.f64	d7, d5, d7
 800499c:	ee26 6b07 	vmul.f64	d6, d6, d7
					+ ((PositionXY[1] - Pne[1]) * (PositionXY[1] - Pne[1])))) * 0.01;
 80049a0:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 80049a4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80049a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80049ac:	ed97 4b20 	vldr	d4, [r7, #128]	; 0x80
 80049b0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80049b4:	ee34 7b47 	vsub.f64	d7, d4, d7
 80049b8:	ee25 7b07 	vmul.f64	d7, d5, d7
	Time2MoveDynamic += (sqrt(
 80049bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049c0:	eeb0 0b47 	vmov.f64	d0, d7
 80049c4:	f011 f940 	bl	8015c48 <sqrt>
 80049c8:	eeb0 7b40 	vmov.f64	d7, d0
					+ ((PositionXY[1] - Pne[1]) * (PositionXY[1] - Pne[1])))) * 0.01;
 80049cc:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8004b10 <ChessNotMovePathWay+0x218>
 80049d0:	ee27 7b06 	vmul.f64	d7, d7, d6
	Time2MoveDynamic += (sqrt(
 80049d4:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 80049d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049dc:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88

	double TaskSpace2Go[3];
	if (Index2Move == 64){
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	2b40      	cmp	r3, #64	; 0x40
 80049e4:	d11e      	bne.n	8004a24 <ChessNotMovePathWay+0x12c>
		TaskSpace2Go[0] = SafePose[0];
 80049e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80049ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TaskSpace2Go[1] = SafePose[1];
 80049ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80049f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		TaskSpace2Go[0] = SafePose[2];
 80049f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80049fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if (IsJMove) {
 80049fe:	7bbb      	ldrb	r3, [r7, #14]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <ChessNotMovePathWay+0x11c>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004a04:	f107 0310 	add.w	r3, r7, #16
 8004a08:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff ff03 	bl	8004818 <JMoveTaskSpace>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
		} else {
			JMoveTaskSpace(TaskSpace2Go, 2);
		}
	}
}
 8004a12:	e073      	b.n	8004afc <ChessNotMovePathWay+0x204>
			JMoveTaskSpace(TaskSpace2Go, 4);
 8004a14:	f107 0310 	add.w	r3, r7, #16
 8004a18:	eeb1 0b00 	vmov.f64	d0, #16	; 0x40800000  4.0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fefb 	bl	8004818 <JMoveTaskSpace>
}
 8004a22:	e06b      	b.n	8004afc <ChessNotMovePathWay+0x204>
		if (PositionXY[0] > 250 && PositionXY[0] < 450) {
 8004a24:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004a28:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8004b18 <ChessNotMovePathWay+0x220>
 8004a2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a34:	dd17      	ble.n	8004a66 <ChessNotMovePathWay+0x16e>
 8004a36:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004a3a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8004b20 <ChessNotMovePathWay+0x228>
 8004a3e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a46:	d50e      	bpl.n	8004a66 <ChessNotMovePathWay+0x16e>
			Z_Board_Offset = (PositionXY[0] - 250) * 0.05f;
 8004a48:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004a4c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8004b18 <ChessNotMovePathWay+0x220>
 8004a50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a54:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8004b28 <ChessNotMovePathWay+0x230>
 8004a58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a5c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004a60:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
 8004a64:	e01f      	b.n	8004aa6 <ChessNotMovePathWay+0x1ae>
		} else if (PositionXY[0] > 450 && PositionXY[0] < 700) {
 8004a66:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004a6a:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8004b20 <ChessNotMovePathWay+0x228>
 8004a6e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a76:	dd16      	ble.n	8004aa6 <ChessNotMovePathWay+0x1ae>
 8004a78:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004a7c:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8004b30 <ChessNotMovePathWay+0x238>
 8004a80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a88:	d50d      	bpl.n	8004aa6 <ChessNotMovePathWay+0x1ae>
			Z_Board_Offset = (PositionXY[0] - 450) * 0.1f;
 8004a8a:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8004a8e:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8004b20 <ChessNotMovePathWay+0x228>
 8004a92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a96:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8004b38 <ChessNotMovePathWay+0x240>
 8004a9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004aa2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
		TaskSpace2Go[0] = PositionXY[0];
 8004aa6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004aaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TaskSpace2Go[1] = PositionXY[1];
 8004aae:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004ab2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		TaskSpace2Go[2] = Z_Offset + ChessHight + Z_Board_Offset;
 8004ab6:	4b25      	ldr	r3, [pc, #148]	; (8004b4c <ChessNotMovePathWay+0x254>)
 8004ab8:	edd3 7a00 	vldr	s15, [r3]
 8004abc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004ac0:	ed97 7b00 	vldr	d7, [r7]
 8004ac4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004ac8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004ad0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ad4:	ed87 7b08 	vstr	d7, [r7, #32]
		if (IsJMove) {
 8004ad8:	7bbb      	ldrb	r3, [r7, #14]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d007      	beq.n	8004aee <ChessNotMovePathWay+0x1f6>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004ade:	f107 0310 	add.w	r3, r7, #16
 8004ae2:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff fe96 	bl	8004818 <JMoveTaskSpace>
}
 8004aec:	e006      	b.n	8004afc <ChessNotMovePathWay+0x204>
			JMoveTaskSpace(TaskSpace2Go, 2);
 8004aee:	f107 0310 	add.w	r3, r7, #16
 8004af2:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fe8e 	bl	8004818 <JMoveTaskSpace>
}
 8004afc:	bf00      	nop
 8004afe:	37a0      	adds	r7, #160	; 0xa0
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bdb0      	pop	{r4, r5, r7, pc}
 8004b04:	f3af 8000 	nop.w
 8004b08:	00000000 	.word	0x00000000
 8004b0c:	4070d000 	.word	0x4070d000
 8004b10:	47ae147b 	.word	0x47ae147b
 8004b14:	3f847ae1 	.word	0x3f847ae1
 8004b18:	00000000 	.word	0x00000000
 8004b1c:	406f4000 	.word	0x406f4000
 8004b20:	00000000 	.word	0x00000000
 8004b24:	407c2000 	.word	0x407c2000
 8004b28:	a0000000 	.word	0xa0000000
 8004b2c:	3fa99999 	.word	0x3fa99999
 8004b30:	00000000 	.word	0x00000000
 8004b34:	4085e000 	.word	0x4085e000
 8004b38:	a0000000 	.word	0xa0000000
 8004b3c:	3fb99999 	.word	0x3fb99999
 8004b40:	08016bb0 	.word	0x08016bb0
 8004b44:	20000498 	.word	0x20000498
 8004b48:	3ff33333 	.word	0x3ff33333
 8004b4c:	20000bc8 	.word	0x20000bc8

08004b50 <ChessMoveStateMachine>:

void ChessMoveStateMachine() {
 8004b50:	b5b0      	push	{r4, r5, r7, lr}
 8004b52:	b098      	sub	sp, #96	; 0x60
 8004b54:	af00      	add	r7, sp, #0
	static uint8_t ChangeState = 0;
	double Speed_Error = 0.05;
 8004b56:	a3b1      	add	r3, pc, #708	; (adr r3, 8004e1c <ChessMoveStateMachine+0x2cc>)
 8004b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b5c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double SafePose[3] = {250, -250, 150};
 8004b60:	4ba5      	ldr	r3, [pc, #660]	; (8004df8 <ChessMoveStateMachine+0x2a8>)
 8004b62:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8004b66:	461d      	mov	r5, r3
 8004b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b70:	e884 0003 	stmia.w	r4, {r0, r1}
	double Time2MoveDynamic = 1.3;
 8004b74:	a39e      	add	r3, pc, #632	; (adr r3, 8004df0 <ChessMoveStateMachine+0x2a0>)
 8004b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double q_Feed[4];
	double Pne[3];

	switch (ChessMoveStates) {
 8004b7e:	4b9f      	ldr	r3, [pc, #636]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b09      	cmp	r3, #9
 8004b84:	f200 81b7 	bhi.w	8004ef6 <ChessMoveStateMachine+0x3a6>
 8004b88:	a201      	add	r2, pc, #4	; (adr r2, 8004b90 <ChessMoveStateMachine+0x40>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004bb9 	.word	0x08004bb9
 8004b94:	08004bd1 	.word	0x08004bd1
 8004b98:	08004c25 	.word	0x08004c25
 8004b9c:	08004c81 	.word	0x08004c81
 8004ba0:	08004c91 	.word	0x08004c91
 8004ba4:	08004ce5 	.word	0x08004ce5
 8004ba8:	08004d39 	.word	0x08004d39
 8004bac:	08004d8d 	.word	0x08004d8d
 8004bb0:	08004d9d 	.word	0x08004d9d
 8004bb4:	08004e25 	.word	0x08004e25
	case Chess_idle:
		if (Chess_Move_Start_Flag) {
 8004bb8:	4b91      	ldr	r3, [pc, #580]	; (8004e00 <ChessMoveStateMachine+0x2b0>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 819c 	beq.w	8004efa <ChessMoveStateMachine+0x3aa>
			ChessMoveStates = Move_2_Start_Top_Point;
 8004bc2:	4b8e      	ldr	r3, [pc, #568]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
			ChangeState = 1;
 8004bc8:	4b8e      	ldr	r3, [pc, #568]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004bce:	e194      	b.n	8004efa <ChessMoveStateMachine+0x3aa>
	case Move_2_Start_Top_Point:
		if (ChangeState) {
 8004bd0:	4b8c      	ldr	r3, [pc, #560]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00d      	beq.n	8004bf4 <ChessMoveStateMachine+0xa4>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 1);
 8004bd8:	4b8b      	ldr	r3, [pc, #556]	; (8004e08 <ChessMoveStateMachine+0x2b8>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	4a8b      	ldr	r2, [pc, #556]	; (8004e0c <ChessMoveStateMachine+0x2bc>)
 8004bde:	ed92 7b00 	vldr	d7, [r2]
 8004be2:	2101      	movs	r1, #1
 8004be4:	eeb0 0b47 	vmov.f64	d0, d7
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fe85 	bl	80048f8 <ChessNotMovePathWay>
			ChangeState = 0;
 8004bee:	4b85      	ldr	r3, [pc, #532]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004bf4:	4b86      	ldr	r3, [pc, #536]	; (8004e10 <ChessMoveStateMachine+0x2c0>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f040 8180 	bne.w	8004efe <ChessMoveStateMachine+0x3ae>
			if(All_Joint_Speed_Avg() <= Speed_Error){
 8004bfe:	f000 f99d 	bl	8004f3c <All_Joint_Speed_Avg>
 8004c02:	eeb0 6b40 	vmov.f64	d6, d0
 8004c06:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004c0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c12:	da00      	bge.n	8004c16 <ChessMoveStateMachine+0xc6>
				ChessMoveStates = Move_2_Start_Grip_Point;
				ChangeState = 1;
			}
		}
		break;
 8004c14:	e173      	b.n	8004efe <ChessMoveStateMachine+0x3ae>
				ChessMoveStates = Move_2_Start_Grip_Point;
 8004c16:	4b79      	ldr	r3, [pc, #484]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004c18:	2202      	movs	r2, #2
 8004c1a:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8004c1c:	4b79      	ldr	r3, [pc, #484]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004c1e:	2201      	movs	r2, #1
 8004c20:	701a      	strb	r2, [r3, #0]
		break;
 8004c22:	e16c      	b.n	8004efe <ChessMoveStateMachine+0x3ae>
	case Move_2_Start_Grip_Point:
		if (ChangeState) {
 8004c24:	4b77      	ldr	r3, [pc, #476]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <ChessMoveStateMachine+0xf8>
			ChessNotMovePathWay(ChessIndex[0], Z_2GripOffset, 0);
 8004c2c:	4b76      	ldr	r3, [pc, #472]	; (8004e08 <ChessMoveStateMachine+0x2b8>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	4a78      	ldr	r2, [pc, #480]	; (8004e14 <ChessMoveStateMachine+0x2c4>)
 8004c32:	ed92 7b00 	vldr	d7, [r2]
 8004c36:	2100      	movs	r1, #0
 8004c38:	eeb0 0b47 	vmov.f64	d0, d7
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff fe5b 	bl	80048f8 <ChessNotMovePathWay>
			ChangeState = 0;
 8004c42:	4b70      	ldr	r3, [pc, #448]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004c48:	4b71      	ldr	r3, [pc, #452]	; (8004e10 <ChessMoveStateMachine+0x2c0>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f040 8158 	bne.w	8004f02 <ChessMoveStateMachine+0x3b2>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004c52:	f000 f973 	bl	8004f3c <All_Joint_Speed_Avg>
 8004c56:	eeb0 6b40 	vmov.f64	d6, d0
 8004c5a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004c5e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c66:	da00      	bge.n	8004c6a <ChessMoveStateMachine+0x11a>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
				Servo_Drive(&Servo[0], 110); //Ungrip
				ChangeState = 1;
			}
		}
		break;
 8004c68:	e14b      	b.n	8004f02 <ChessMoveStateMachine+0x3b2>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
 8004c6a:	4b64      	ldr	r3, [pc, #400]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004c6c:	2203      	movs	r2, #3
 8004c6e:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[0], 110); //Ungrip
 8004c70:	216e      	movs	r1, #110	; 0x6e
 8004c72:	4869      	ldr	r0, [pc, #420]	; (8004e18 <ChessMoveStateMachine+0x2c8>)
 8004c74:	f7fc f9ba 	bl	8000fec <Servo_Drive>
				ChangeState = 1;
 8004c78:	4b62      	ldr	r3, [pc, #392]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	701a      	strb	r2, [r3, #0]
		break;
 8004c7e:	e140      	b.n	8004f02 <ChessMoveStateMachine+0x3b2>
	case Move_2_Start_Point_and_Griping:
		// Grip Chess
		Servo_Drive(&Servo[0], 0); //Grip
 8004c80:	2100      	movs	r1, #0
 8004c82:	4865      	ldr	r0, [pc, #404]	; (8004e18 <ChessMoveStateMachine+0x2c8>)
 8004c84:	f7fc f9b2 	bl	8000fec <Servo_Drive>

		ChessMoveStates = Back_2_Start_Top_Point;
 8004c88:	4b5c      	ldr	r3, [pc, #368]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004c8a:	2204      	movs	r2, #4
 8004c8c:	701a      	strb	r2, [r3, #0]
		break;
 8004c8e:	e141      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
	case Back_2_Start_Top_Point:
		if (ChangeState) {
 8004c90:	4b5c      	ldr	r3, [pc, #368]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <ChessMoveStateMachine+0x164>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 0);
 8004c98:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <ChessMoveStateMachine+0x2b8>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	4a5b      	ldr	r2, [pc, #364]	; (8004e0c <ChessMoveStateMachine+0x2bc>)
 8004c9e:	ed92 7b00 	vldr	d7, [r2]
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	eeb0 0b47 	vmov.f64	d0, d7
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fe25 	bl	80048f8 <ChessNotMovePathWay>
			ChangeState = 0;
 8004cae:	4b55      	ldr	r3, [pc, #340]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004cb4:	4b56      	ldr	r3, [pc, #344]	; (8004e10 <ChessMoveStateMachine+0x2c0>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f040 8124 	bne.w	8004f06 <ChessMoveStateMachine+0x3b6>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004cbe:	f000 f93d 	bl	8004f3c <All_Joint_Speed_Avg>
 8004cc2:	eeb0 6b40 	vmov.f64	d6, d0
 8004cc6:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004cca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd2:	da00      	bge.n	8004cd6 <ChessMoveStateMachine+0x186>
				ChessMoveStates = Move_2_End_Top_Point;
				ChangeState = 1;
			}
		}
		break;
 8004cd4:	e117      	b.n	8004f06 <ChessMoveStateMachine+0x3b6>
				ChessMoveStates = Move_2_End_Top_Point;
 8004cd6:	4b49      	ldr	r3, [pc, #292]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004cd8:	2205      	movs	r2, #5
 8004cda:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8004cdc:	4b49      	ldr	r3, [pc, #292]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
		break;
 8004ce2:	e110      	b.n	8004f06 <ChessMoveStateMachine+0x3b6>

		// Finish To Grip Chess

	case Move_2_End_Top_Point:
		if (ChangeState) {
 8004ce4:	4b47      	ldr	r3, [pc, #284]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00d      	beq.n	8004d08 <ChessMoveStateMachine+0x1b8>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 1);
 8004cec:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <ChessMoveStateMachine+0x2b8>)
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	4a46      	ldr	r2, [pc, #280]	; (8004e0c <ChessMoveStateMachine+0x2bc>)
 8004cf2:	ed92 7b00 	vldr	d7, [r2]
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	eeb0 0b47 	vmov.f64	d0, d7
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff fdfb 	bl	80048f8 <ChessNotMovePathWay>
			ChangeState = 0;
 8004d02:	4b40      	ldr	r3, [pc, #256]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004d08:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <ChessMoveStateMachine+0x2c0>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f040 80fc 	bne.w	8004f0a <ChessMoveStateMachine+0x3ba>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004d12:	f000 f913 	bl	8004f3c <All_Joint_Speed_Avg>
 8004d16:	eeb0 6b40 	vmov.f64	d6, d0
 8004d1a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004d1e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d26:	da00      	bge.n	8004d2a <ChessMoveStateMachine+0x1da>
				ChessMoveStates = Move_2_End_Ungrip_Point;
				ChangeState = 1;
			}
		}
		break;
 8004d28:	e0ef      	b.n	8004f0a <ChessMoveStateMachine+0x3ba>
				ChessMoveStates = Move_2_End_Ungrip_Point;
 8004d2a:	4b34      	ldr	r3, [pc, #208]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004d2c:	2206      	movs	r2, #6
 8004d2e:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8004d30:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
		break;
 8004d36:	e0e8      	b.n	8004f0a <ChessMoveStateMachine+0x3ba>
	case Move_2_End_Ungrip_Point:
		if (ChangeState) {
 8004d38:	4b32      	ldr	r3, [pc, #200]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <ChessMoveStateMachine+0x20c>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0);
 8004d40:	4b31      	ldr	r3, [pc, #196]	; (8004e08 <ChessMoveStateMachine+0x2b8>)
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	4a33      	ldr	r2, [pc, #204]	; (8004e14 <ChessMoveStateMachine+0x2c4>)
 8004d46:	ed92 7b00 	vldr	d7, [r2]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	eeb0 0b47 	vmov.f64	d0, d7
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7ff fdd1 	bl	80048f8 <ChessNotMovePathWay>
			ChangeState = 0;
 8004d56:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004d5c:	4b2c      	ldr	r3, [pc, #176]	; (8004e10 <ChessMoveStateMachine+0x2c0>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 80d4 	bne.w	8004f0e <ChessMoveStateMachine+0x3be>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004d66:	f000 f8e9 	bl	8004f3c <All_Joint_Speed_Avg>
 8004d6a:	eeb0 6b40 	vmov.f64	d6, d0
 8004d6e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004d72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d7a:	da00      	bge.n	8004d7e <ChessMoveStateMachine+0x22e>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
				ChangeState = 1;
			}
		}
		break;
 8004d7c:	e0c7      	b.n	8004f0e <ChessMoveStateMachine+0x3be>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004d80:	2207      	movs	r2, #7
 8004d82:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8004d84:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
		break;
 8004d8a:	e0c0      	b.n	8004f0e <ChessMoveStateMachine+0x3be>
	case Move_2_End_Point_and_Ungriping:
		// Grip Chess
		Servo_Drive(&Servo[0], 110); //Ungrip
 8004d8c:	216e      	movs	r1, #110	; 0x6e
 8004d8e:	4822      	ldr	r0, [pc, #136]	; (8004e18 <ChessMoveStateMachine+0x2c8>)
 8004d90:	f7fc f92c 	bl	8000fec <Servo_Drive>
		ChessMoveStates = Back_2_End_Top_Point;
 8004d94:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004d96:	2208      	movs	r2, #8
 8004d98:	701a      	strb	r2, [r3, #0]
		break;
 8004d9a:	e0bb      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
	case Back_2_End_Top_Point:
		if (ChangeState) {
 8004d9c:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00d      	beq.n	8004dc0 <ChessMoveStateMachine+0x270>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 0);
 8004da4:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <ChessMoveStateMachine+0x2b8>)
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <ChessMoveStateMachine+0x2bc>)
 8004daa:	ed92 7b00 	vldr	d7, [r2]
 8004dae:	2100      	movs	r1, #0
 8004db0:	eeb0 0b47 	vmov.f64	d0, d7
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fd9f 	bl	80048f8 <ChessNotMovePathWay>
			ChangeState = 0;
 8004dba:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8004dc0:	4b13      	ldr	r3, [pc, #76]	; (8004e10 <ChessMoveStateMachine+0x2c0>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f040 80a4 	bne.w	8004f12 <ChessMoveStateMachine+0x3c2>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8004dca:	f000 f8b7 	bl	8004f3c <All_Joint_Speed_Avg>
 8004dce:	eeb0 6b40 	vmov.f64	d6, d0
 8004dd2:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004dd6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dde:	da00      	bge.n	8004de2 <ChessMoveStateMachine+0x292>
				ChessMoveStates = ChessMove_Finish;
				ChangeState = 1;
			}
		}
		break;
 8004de0:	e097      	b.n	8004f12 <ChessMoveStateMachine+0x3c2>
				ChessMoveStates = ChessMove_Finish;
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <ChessMoveStateMachine+0x2ac>)
 8004de4:	2209      	movs	r2, #9
 8004de6:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <ChessMoveStateMachine+0x2b4>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
		break;
 8004dee:	e090      	b.n	8004f12 <ChessMoveStateMachine+0x3c2>
 8004df0:	cccccccd 	.word	0xcccccccd
 8004df4:	3ff4cccc 	.word	0x3ff4cccc
 8004df8:	08016bc8 	.word	0x08016bc8
 8004dfc:	20000bcd 	.word	0x20000bcd
 8004e00:	20000bcc 	.word	0x20000bcc
 8004e04:	20000c20 	.word	0x20000c20
 8004e08:	20000bc4 	.word	0x20000bc4
 8004e0c:	20000000 	.word	0x20000000
 8004e10:	20000bb9 	.word	0x20000bb9
 8004e14:	20000008 	.word	0x20000008
 8004e18:	20000848 	.word	0x20000848
 8004e1c:	9999999a 	.word	0x9999999a
 8004e20:	3fa99999 	.word	0x3fa99999
	case ChessMove_Finish:
		q_Feed[0] = Control[0].PositionFeedback;
 8004e24:	4b42      	ldr	r3, [pc, #264]	; (8004f30 <ChessMoveStateMachine+0x3e0>)
 8004e26:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004e2a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		q_Feed[1] = Control[1].PositionFeedback;
 8004e2e:	4b40      	ldr	r3, [pc, #256]	; (8004f30 <ChessMoveStateMachine+0x3e0>)
 8004e30:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8004e34:	e9c7 2308 	strd	r2, r3, [r7, #32]
		q_Feed[2] = Control[2].PositionFeedback;
 8004e38:	4b3d      	ldr	r3, [pc, #244]	; (8004f30 <ChessMoveStateMachine+0x3e0>)
 8004e3a:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8004e3e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		q_Feed[3] = Control[3].PositionFeedback;
 8004e42:	4b3b      	ldr	r3, [pc, #236]	; (8004f30 <ChessMoveStateMachine+0x3e0>)
 8004e44:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8004e48:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		FPK(q_Feed, 269.0f, Pne);
 8004e4c:	463a      	mov	r2, r7
 8004e4e:	f107 0318 	add.w	r3, r7, #24
 8004e52:	4611      	mov	r1, r2
 8004e54:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8004f20 <ChessMoveStateMachine+0x3d0>
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fd fc01 	bl	8002660 <FPK>
		Time2MoveDynamic += (sqrt(
				((SafePose[0] - Pne[0]) * (SafePose[0] - Pne[0]))
 8004e5e:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8004e62:	ed97 7b00 	vldr	d7, [r7]
 8004e66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e6a:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8004e6e:	ed97 7b00 	vldr	d7, [r7]
 8004e72:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004e76:	ee26 6b07 	vmul.f64	d6, d6, d7
						+ ((SafePose[1] - Pne[1]) * (SafePose[1] - Pne[1]))
 8004e7a:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 8004e7e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e82:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004e86:	ed97 4b10 	vldr	d4, [r7, #64]	; 0x40
 8004e8a:	ed97 7b02 	vldr	d7, [r7, #8]
 8004e8e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004e92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8004e96:	ee36 6b07 	vadd.f64	d6, d6, d7
						+ ((SafePose[2] - Pne[2]) * (SafePose[2] - Pne[2]))))
 8004e9a:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8004e9e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004ea2:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004ea6:	ed97 4b12 	vldr	d4, [r7, #72]	; 0x48
 8004eaa:	ed97 7b04 	vldr	d7, [r7, #16]
 8004eae:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004eb2:	ee25 7b07 	vmul.f64	d7, d5, d7
		Time2MoveDynamic += (sqrt(
 8004eb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004eba:	eeb0 0b47 	vmov.f64	d0, d7
 8004ebe:	f010 fec3 	bl	8015c48 <sqrt>
 8004ec2:	eeb0 7b40 	vmov.f64	d7, d0
				* 0.0075;
 8004ec6:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8004f28 <ChessMoveStateMachine+0x3d8>
 8004eca:	ee27 7b06 	vmul.f64	d7, d7, d6
		Time2MoveDynamic += (sqrt(
 8004ece:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004ed2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ed6:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

		JMoveTaskSpace(SafePose, Time2MoveDynamic);
 8004eda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ede:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fc98 	bl	8004818 <JMoveTaskSpace>
		Chess_Move_Start_Flag = 0;
 8004ee8:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <ChessMoveStateMachine+0x3e4>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]
		ChessMoveStates = Chess_idle;
 8004eee:	4b12      	ldr	r3, [pc, #72]	; (8004f38 <ChessMoveStateMachine+0x3e8>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
		break;
 8004ef4:	e00e      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
	default:
		break;
 8004ef6:	bf00      	nop
 8004ef8:	e00c      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
		break;
 8004efa:	bf00      	nop
 8004efc:	e00a      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
		break;
 8004efe:	bf00      	nop
 8004f00:	e008      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
		break;
 8004f02:	bf00      	nop
 8004f04:	e006      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
		break;
 8004f06:	bf00      	nop
 8004f08:	e004      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
		break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
		break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <ChessMoveStateMachine+0x3c4>
		break;
 8004f12:	bf00      	nop
	}
}
 8004f14:	bf00      	nop
 8004f16:	3760      	adds	r7, #96	; 0x60
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1c:	f3af 8000 	nop.w
 8004f20:	00000000 	.word	0x00000000
 8004f24:	4070d000 	.word	0x4070d000
 8004f28:	eb851eb8 	.word	0xeb851eb8
 8004f2c:	3f7eb851 	.word	0x3f7eb851
 8004f30:	20000498 	.word	0x20000498
 8004f34:	20000bcc 	.word	0x20000bcc
 8004f38:	20000bcd 	.word	0x20000bcd

08004f3c <All_Joint_Speed_Avg>:

double All_Joint_Speed_Avg(){
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
	double Buf;
	for (int i=4;i<4;i++){
 8004f42:	2304      	movs	r3, #4
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	e013      	b.n	8004f70 <All_Joint_Speed_Avg+0x34>
		Buf += fabs(Control[i].VelocityFeedback);
 8004f48:	4a12      	ldr	r2, [pc, #72]	; (8004f94 <All_Joint_Speed_Avg+0x58>)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	21d8      	movs	r1, #216	; 0xd8
 8004f4e:	fb01 f303 	mul.w	r3, r1, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	33b8      	adds	r3, #184	; 0xb8
 8004f56:	ed93 7b00 	vldr	d7, [r3]
 8004f5a:	eeb0 7bc7 	vabs.f64	d7, d7
 8004f5e:	ed97 6b02 	vldr	d6, [r7, #8]
 8004f62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f66:	ed87 7b02 	vstr	d7, [r7, #8]
	for (int i=4;i<4;i++){
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	607b      	str	r3, [r7, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	dde8      	ble.n	8004f48 <All_Joint_Speed_Avg+0xc>
	}
	return Buf/4.0f;
 8004f76:	ed97 7b02 	vldr	d7, [r7, #8]
 8004f7a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004f7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004f82:	eeb0 7b45 	vmov.f64	d7, d5
}
 8004f86:	eeb0 0b47 	vmov.f64	d0, d7
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	20000498 	.word	0x20000498

08004f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f9c:	b672      	cpsid	i
}
 8004f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004fa0:	e7fe      	b.n	8004fa0 <Error_Handler+0x8>
	...

08004fa4 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004fa8:	4b28      	ldr	r3, [pc, #160]	; (800504c <MX_SPI3_Init+0xa8>)
 8004faa:	4a29      	ldr	r2, [pc, #164]	; (8005050 <MX_SPI3_Init+0xac>)
 8004fac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004fae:	4b27      	ldr	r3, [pc, #156]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004fb4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004fb6:	4b25      	ldr	r3, [pc, #148]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fbc:	4b23      	ldr	r3, [pc, #140]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fbe:	2207      	movs	r2, #7
 8004fc0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc2:	4b22      	ldr	r3, [pc, #136]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004fc8:	4b20      	ldr	r3, [pc, #128]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004fd0:	4b1e      	ldr	r3, [pc, #120]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fd2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004fd6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8004fd8:	4b1c      	ldr	r3, [pc, #112]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fda:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8004fde:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fe0:	4b1a      	ldr	r3, [pc, #104]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fe6:	4b19      	ldr	r3, [pc, #100]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fec:	4b17      	ldr	r3, [pc, #92]	; (800504c <MX_SPI3_Init+0xa8>)
 8004fee:	2200      	movs	r2, #0
 8004ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8004ff2:	4b16      	ldr	r3, [pc, #88]	; (800504c <MX_SPI3_Init+0xa8>)
 8004ff4:	221d      	movs	r2, #29
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004ff8:	4b14      	ldr	r3, [pc, #80]	; (800504c <MX_SPI3_Init+0xa8>)
 8004ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004ffe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8005000:	4b12      	ldr	r3, [pc, #72]	; (800504c <MX_SPI3_Init+0xa8>)
 8005002:	2200      	movs	r2, #0
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8005006:	4b11      	ldr	r3, [pc, #68]	; (800504c <MX_SPI3_Init+0xa8>)
 8005008:	2200      	movs	r2, #0
 800500a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800500c:	4b0f      	ldr	r3, [pc, #60]	; (800504c <MX_SPI3_Init+0xa8>)
 800500e:	2200      	movs	r2, #0
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005012:	4b0e      	ldr	r3, [pc, #56]	; (800504c <MX_SPI3_Init+0xa8>)
 8005014:	2200      	movs	r2, #0
 8005016:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005018:	4b0c      	ldr	r3, [pc, #48]	; (800504c <MX_SPI3_Init+0xa8>)
 800501a:	2200      	movs	r2, #0
 800501c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <MX_SPI3_Init+0xa8>)
 8005020:	2200      	movs	r2, #0
 8005022:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005024:	4b09      	ldr	r3, [pc, #36]	; (800504c <MX_SPI3_Init+0xa8>)
 8005026:	2200      	movs	r2, #0
 8005028:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800502a:	4b08      	ldr	r3, [pc, #32]	; (800504c <MX_SPI3_Init+0xa8>)
 800502c:	2200      	movs	r2, #0
 800502e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005030:	4b06      	ldr	r3, [pc, #24]	; (800504c <MX_SPI3_Init+0xa8>)
 8005032:	2200      	movs	r2, #0
 8005034:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005036:	4805      	ldr	r0, [pc, #20]	; (800504c <MX_SPI3_Init+0xa8>)
 8005038:	f00b fa9e 	bl	8010578 <HAL_SPI_Init>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8005042:	f7ff ffa9 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000c24 	.word	0x20000c24
 8005050:	40003c00 	.word	0x40003c00

08005054 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8005058:	4b27      	ldr	r3, [pc, #156]	; (80050f8 <MX_SPI4_Init+0xa4>)
 800505a:	4a28      	ldr	r2, [pc, #160]	; (80050fc <MX_SPI4_Init+0xa8>)
 800505c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800505e:	4b26      	ldr	r3, [pc, #152]	; (80050f8 <MX_SPI4_Init+0xa4>)
 8005060:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005064:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8005066:	4b24      	ldr	r3, [pc, #144]	; (80050f8 <MX_SPI4_Init+0xa4>)
 8005068:	2200      	movs	r2, #0
 800506a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 800506c:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <MX_SPI4_Init+0xa4>)
 800506e:	220f      	movs	r2, #15
 8005070:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005072:	4b21      	ldr	r3, [pc, #132]	; (80050f8 <MX_SPI4_Init+0xa4>)
 8005074:	2200      	movs	r2, #0
 8005076:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005078:	4b1f      	ldr	r3, [pc, #124]	; (80050f8 <MX_SPI4_Init+0xa4>)
 800507a:	2200      	movs	r2, #0
 800507c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800507e:	4b1e      	ldr	r3, [pc, #120]	; (80050f8 <MX_SPI4_Init+0xa4>)
 8005080:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005084:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005086:	4b1c      	ldr	r3, [pc, #112]	; (80050f8 <MX_SPI4_Init+0xa4>)
 8005088:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800508c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800508e:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <MX_SPI4_Init+0xa4>)
 8005090:	2200      	movs	r2, #0
 8005092:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8005094:	4b18      	ldr	r3, [pc, #96]	; (80050f8 <MX_SPI4_Init+0xa4>)
 8005096:	2200      	movs	r2, #0
 8005098:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800509a:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <MX_SPI4_Init+0xa4>)
 800509c:	2200      	movs	r2, #0
 800509e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80050a0:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80050a6:	4b14      	ldr	r3, [pc, #80]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050ac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80050b4:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80050ba:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050bc:	2200      	movs	r2, #0
 80050be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80050c0:	4b0d      	ldr	r3, [pc, #52]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050da:	2200      	movs	r2, #0
 80050dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80050e4:	4804      	ldr	r0, [pc, #16]	; (80050f8 <MX_SPI4_Init+0xa4>)
 80050e6:	f00b fa47 	bl	8010578 <HAL_SPI_Init>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80050f0:	f7ff ff52 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80050f4:	bf00      	nop
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	20000cac 	.word	0x20000cac
 80050fc:	40013400 	.word	0x40013400

08005100 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b0b8      	sub	sp, #224	; 0xe0
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005108:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005118:	f107 0318 	add.w	r3, r7, #24
 800511c:	22b4      	movs	r2, #180	; 0xb4
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f010 fceb 	bl	8015afc <memset>
  if(spiHandle->Instance==SPI3)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a4b      	ldr	r2, [pc, #300]	; (8005258 <HAL_SPI_MspInit+0x158>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d156      	bne.n	80051de <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8005130:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005134:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 8005136:	2319      	movs	r3, #25
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 800513a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800513e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8005140:	2302      	movs	r3, #2
 8005142:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8005144:	2302      	movs	r3, #2
 8005146:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8005148:	2302      	movs	r3, #2
 800514a:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800514c:	2300      	movs	r3, #0
 800514e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8005150:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005154:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800515a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800515e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005160:	f107 0318 	add.w	r3, r7, #24
 8005164:	4618      	mov	r0, r3
 8005166:	f009 f973 	bl	800e450 <HAL_RCCEx_PeriphCLKConfig>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d001      	beq.n	8005174 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8005170:	f7ff ff12 	bl	8004f98 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005174:	4b39      	ldr	r3, [pc, #228]	; (800525c <HAL_SPI_MspInit+0x15c>)
 8005176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800517a:	4a38      	ldr	r2, [pc, #224]	; (800525c <HAL_SPI_MspInit+0x15c>)
 800517c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005180:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005184:	4b35      	ldr	r3, [pc, #212]	; (800525c <HAL_SPI_MspInit+0x15c>)
 8005186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800518a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800518e:	617b      	str	r3, [r7, #20]
 8005190:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005192:	4b32      	ldr	r3, [pc, #200]	; (800525c <HAL_SPI_MspInit+0x15c>)
 8005194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005198:	4a30      	ldr	r2, [pc, #192]	; (800525c <HAL_SPI_MspInit+0x15c>)
 800519a:	f043 0304 	orr.w	r3, r3, #4
 800519e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051a2:	4b2e      	ldr	r3, [pc, #184]	; (800525c <HAL_SPI_MspInit+0x15c>)
 80051a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80051b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80051b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b8:	2302      	movs	r3, #2
 80051ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051c4:	2300      	movs	r3, #0
 80051c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80051ca:	2306      	movs	r3, #6
 80051cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80051d4:	4619      	mov	r1, r3
 80051d6:	4822      	ldr	r0, [pc, #136]	; (8005260 <HAL_SPI_MspInit+0x160>)
 80051d8:	f006 fc18 	bl	800ba0c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80051dc:	e038      	b.n	8005250 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a20      	ldr	r2, [pc, #128]	; (8005264 <HAL_SPI_MspInit+0x164>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d133      	bne.n	8005250 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80051e8:	4b1c      	ldr	r3, [pc, #112]	; (800525c <HAL_SPI_MspInit+0x15c>)
 80051ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051ee:	4a1b      	ldr	r2, [pc, #108]	; (800525c <HAL_SPI_MspInit+0x15c>)
 80051f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051f8:	4b18      	ldr	r3, [pc, #96]	; (800525c <HAL_SPI_MspInit+0x15c>)
 80051fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005206:	4b15      	ldr	r3, [pc, #84]	; (800525c <HAL_SPI_MspInit+0x15c>)
 8005208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800520c:	4a13      	ldr	r2, [pc, #76]	; (800525c <HAL_SPI_MspInit+0x15c>)
 800520e:	f043 0310 	orr.w	r3, r3, #16
 8005212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005216:	4b11      	ldr	r3, [pc, #68]	; (800525c <HAL_SPI_MspInit+0x15c>)
 8005218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	60bb      	str	r3, [r7, #8]
 8005222:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8005224:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8005228:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800522c:	2302      	movs	r3, #2
 800522e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005232:	2300      	movs	r3, #0
 8005234:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005238:	2300      	movs	r3, #0
 800523a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800523e:	2305      	movs	r3, #5
 8005240:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005244:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005248:	4619      	mov	r1, r3
 800524a:	4807      	ldr	r0, [pc, #28]	; (8005268 <HAL_SPI_MspInit+0x168>)
 800524c:	f006 fbde 	bl	800ba0c <HAL_GPIO_Init>
}
 8005250:	bf00      	nop
 8005252:	37e0      	adds	r7, #224	; 0xe0
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40003c00 	.word	0x40003c00
 800525c:	58024400 	.word	0x58024400
 8005260:	58020800 	.word	0x58020800
 8005264:	40013400 	.word	0x40013400
 8005268:	58021000 	.word	0x58021000

0800526c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005272:	4b0a      	ldr	r3, [pc, #40]	; (800529c <HAL_MspInit+0x30>)
 8005274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005278:	4a08      	ldr	r2, [pc, #32]	; (800529c <HAL_MspInit+0x30>)
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_MspInit+0x30>)
 8005284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	607b      	str	r3, [r7, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	58024400 	.word	0x58024400

080052a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052a4:	e7fe      	b.n	80052a4 <NMI_Handler+0x4>

080052a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052aa:	e7fe      	b.n	80052aa <HardFault_Handler+0x4>

080052ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052b0:	e7fe      	b.n	80052b0 <MemManage_Handler+0x4>

080052b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052b2:	b480      	push	{r7}
 80052b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052b6:	e7fe      	b.n	80052b6 <BusFault_Handler+0x4>

080052b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052bc:	e7fe      	b.n	80052bc <UsageFault_Handler+0x4>

080052be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052be:	b480      	push	{r7}
 80052c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052c2:	bf00      	nop
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052de:	bf00      	nop
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052ec:	f001 fcbc 	bl	8006c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052f0:	bf00      	nop
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80052f8:	4802      	ldr	r0, [pc, #8]	; (8005304 <DMA1_Stream0_IRQHandler+0x10>)
 80052fa:	f005 fa13 	bl	800a724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80052fe:	bf00      	nop
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20001384 	.word	0x20001384

08005308 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 800530c:	4802      	ldr	r0, [pc, #8]	; (8005318 <DMA1_Stream1_IRQHandler+0x10>)
 800530e:	f005 fa09 	bl	800a724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005312:	bf00      	nop
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	200013fc 	.word	0x200013fc

0800531c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8005320:	4802      	ldr	r0, [pc, #8]	; (800532c <DMA1_Stream2_IRQHandler+0x10>)
 8005322:	f005 f9ff 	bl	800a724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	2000115c 	.word	0x2000115c

08005330 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005334:	4802      	ldr	r0, [pc, #8]	; (8005340 <I2C2_ER_IRQHandler+0x10>)
 8005336:	f006 ffbf 	bl	800c2b8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	2000025c 	.word	0x2000025c

08005344 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005348:	4802      	ldr	r0, [pc, #8]	; (8005354 <USART3_IRQHandler+0x10>)
 800534a:	f00d fedb 	bl	8013104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	200012f4 	.word	0x200012f4

08005358 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800535c:	4802      	ldr	r0, [pc, #8]	; (8005368 <UART5_IRQHandler+0x10>)
 800535e:	f00d fed1 	bl	8013104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	200011d4 	.word	0x200011d4

0800536c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8005370:	4802      	ldr	r0, [pc, #8]	; (800537c <ADC3_IRQHandler+0x10>)
 8005372:	f002 fae9 	bl	8007948 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	200001c4 	.word	0x200001c4

08005380 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8005384:	4802      	ldr	r0, [pc, #8]	; (8005390 <TIM23_IRQHandler+0x10>)
 8005386:	f00c fc8b 	bl	8011ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	200010c4 	.word	0x200010c4

08005394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005398:	4b34      	ldr	r3, [pc, #208]	; (800546c <SystemInit+0xd8>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	4a33      	ldr	r2, [pc, #204]	; (800546c <SystemInit+0xd8>)
 80053a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80053a8:	4b31      	ldr	r3, [pc, #196]	; (8005470 <SystemInit+0xdc>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	2b06      	cmp	r3, #6
 80053b2:	d807      	bhi.n	80053c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80053b4:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <SystemInit+0xdc>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f023 030f 	bic.w	r3, r3, #15
 80053bc:	4a2c      	ldr	r2, [pc, #176]	; (8005470 <SystemInit+0xdc>)
 80053be:	f043 0307 	orr.w	r3, r3, #7
 80053c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80053c4:	4b2b      	ldr	r3, [pc, #172]	; (8005474 <SystemInit+0xe0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a2a      	ldr	r2, [pc, #168]	; (8005474 <SystemInit+0xe0>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80053d0:	4b28      	ldr	r3, [pc, #160]	; (8005474 <SystemInit+0xe0>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80053d6:	4b27      	ldr	r3, [pc, #156]	; (8005474 <SystemInit+0xe0>)
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4926      	ldr	r1, [pc, #152]	; (8005474 <SystemInit+0xe0>)
 80053dc:	4b26      	ldr	r3, [pc, #152]	; (8005478 <SystemInit+0xe4>)
 80053de:	4013      	ands	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80053e2:	4b23      	ldr	r3, [pc, #140]	; (8005470 <SystemInit+0xdc>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0308 	and.w	r3, r3, #8
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80053ee:	4b20      	ldr	r3, [pc, #128]	; (8005470 <SystemInit+0xdc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f023 030f 	bic.w	r3, r3, #15
 80053f6:	4a1e      	ldr	r2, [pc, #120]	; (8005470 <SystemInit+0xdc>)
 80053f8:	f043 0307 	orr.w	r3, r3, #7
 80053fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80053fe:	4b1d      	ldr	r3, [pc, #116]	; (8005474 <SystemInit+0xe0>)
 8005400:	2200      	movs	r2, #0
 8005402:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005404:	4b1b      	ldr	r3, [pc, #108]	; (8005474 <SystemInit+0xe0>)
 8005406:	2200      	movs	r2, #0
 8005408:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800540a:	4b1a      	ldr	r3, [pc, #104]	; (8005474 <SystemInit+0xe0>)
 800540c:	2200      	movs	r2, #0
 800540e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005410:	4b18      	ldr	r3, [pc, #96]	; (8005474 <SystemInit+0xe0>)
 8005412:	4a1a      	ldr	r2, [pc, #104]	; (800547c <SystemInit+0xe8>)
 8005414:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005416:	4b17      	ldr	r3, [pc, #92]	; (8005474 <SystemInit+0xe0>)
 8005418:	4a19      	ldr	r2, [pc, #100]	; (8005480 <SystemInit+0xec>)
 800541a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800541c:	4b15      	ldr	r3, [pc, #84]	; (8005474 <SystemInit+0xe0>)
 800541e:	4a19      	ldr	r2, [pc, #100]	; (8005484 <SystemInit+0xf0>)
 8005420:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005422:	4b14      	ldr	r3, [pc, #80]	; (8005474 <SystemInit+0xe0>)
 8005424:	2200      	movs	r2, #0
 8005426:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005428:	4b12      	ldr	r3, [pc, #72]	; (8005474 <SystemInit+0xe0>)
 800542a:	4a16      	ldr	r2, [pc, #88]	; (8005484 <SystemInit+0xf0>)
 800542c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800542e:	4b11      	ldr	r3, [pc, #68]	; (8005474 <SystemInit+0xe0>)
 8005430:	2200      	movs	r2, #0
 8005432:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005434:	4b0f      	ldr	r3, [pc, #60]	; (8005474 <SystemInit+0xe0>)
 8005436:	4a13      	ldr	r2, [pc, #76]	; (8005484 <SystemInit+0xf0>)
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800543a:	4b0e      	ldr	r3, [pc, #56]	; (8005474 <SystemInit+0xe0>)
 800543c:	2200      	movs	r2, #0
 800543e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005440:	4b0c      	ldr	r3, [pc, #48]	; (8005474 <SystemInit+0xe0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a0b      	ldr	r2, [pc, #44]	; (8005474 <SystemInit+0xe0>)
 8005446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800544a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800544c:	4b09      	ldr	r3, [pc, #36]	; (8005474 <SystemInit+0xe0>)
 800544e:	2200      	movs	r2, #0
 8005450:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005452:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <SystemInit+0xf4>)
 8005454:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005458:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800545a:	4b04      	ldr	r3, [pc, #16]	; (800546c <SystemInit+0xd8>)
 800545c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005460:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005462:	bf00      	nop
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	e000ed00 	.word	0xe000ed00
 8005470:	52002000 	.word	0x52002000
 8005474:	58024400 	.word	0x58024400
 8005478:	eaf6ed7f 	.word	0xeaf6ed7f
 800547c:	02020200 	.word	0x02020200
 8005480:	01ff0000 	.word	0x01ff0000
 8005484:	01010280 	.word	0x01010280
 8005488:	52004000 	.word	0x52004000

0800548c <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b098      	sub	sp, #96	; 0x60
 8005490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005492:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800549e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	605a      	str	r2, [r3, #4]
 80054a8:	609a      	str	r2, [r3, #8]
 80054aa:	60da      	str	r2, [r3, #12]
 80054ac:	611a      	str	r2, [r3, #16]
 80054ae:	615a      	str	r2, [r3, #20]
 80054b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80054b2:	1d3b      	adds	r3, r7, #4
 80054b4:	2234      	movs	r2, #52	; 0x34
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f010 fb1f 	bl	8015afc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80054be:	4b39      	ldr	r3, [pc, #228]	; (80055a4 <MX_TIM1_Init+0x118>)
 80054c0:	4a39      	ldr	r2, [pc, #228]	; (80055a8 <MX_TIM1_Init+0x11c>)
 80054c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80054c4:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <MX_TIM1_Init+0x118>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054ca:	4b36      	ldr	r3, [pc, #216]	; (80055a4 <MX_TIM1_Init+0x118>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 80054d0:	4b34      	ldr	r3, [pc, #208]	; (80055a4 <MX_TIM1_Init+0x118>)
 80054d2:	f240 1257 	movw	r2, #343	; 0x157
 80054d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054d8:	4b32      	ldr	r3, [pc, #200]	; (80055a4 <MX_TIM1_Init+0x118>)
 80054da:	2200      	movs	r2, #0
 80054dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80054de:	4b31      	ldr	r3, [pc, #196]	; (80055a4 <MX_TIM1_Init+0x118>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80054e4:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <MX_TIM1_Init+0x118>)
 80054e6:	2280      	movs	r2, #128	; 0x80
 80054e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80054ea:	482e      	ldr	r0, [pc, #184]	; (80055a4 <MX_TIM1_Init+0x118>)
 80054ec:	f00c f8c6 	bl	801167c <HAL_TIM_PWM_Init>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80054f6:	f7ff fd4f 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054fa:	2300      	movs	r3, #0
 80054fc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80054fe:	2300      	movs	r3, #0
 8005500:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005502:	2300      	movs	r3, #0
 8005504:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005506:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800550a:	4619      	mov	r1, r3
 800550c:	4825      	ldr	r0, [pc, #148]	; (80055a4 <MX_TIM1_Init+0x118>)
 800550e:	f00d fb51 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005518:	f7ff fd3e 	bl	8004f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800551c:	2360      	movs	r3, #96	; 0x60
 800551e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005524:	2300      	movs	r3, #0
 8005526:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005528:	2300      	movs	r3, #0
 800552a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800552c:	2304      	movs	r3, #4
 800552e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005530:	2300      	movs	r3, #0
 8005532:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005534:	2300      	movs	r3, #0
 8005536:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005538:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800553c:	2200      	movs	r2, #0
 800553e:	4619      	mov	r1, r3
 8005540:	4818      	ldr	r0, [pc, #96]	; (80055a4 <MX_TIM1_Init+0x118>)
 8005542:	f00c fccd 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800554c:	f7ff fd24 	bl	8004f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005550:	2300      	movs	r3, #0
 8005552:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005568:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800556e:	2300      	movs	r3, #0
 8005570:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800557c:	2300      	movs	r3, #0
 800557e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005580:	1d3b      	adds	r3, r7, #4
 8005582:	4619      	mov	r1, r3
 8005584:	4807      	ldr	r0, [pc, #28]	; (80055a4 <MX_TIM1_Init+0x118>)
 8005586:	f00d fbb1 	bl	8012cec <HAL_TIMEx_ConfigBreakDeadTime>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8005590:	f7ff fd02 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005594:	4803      	ldr	r0, [pc, #12]	; (80055a4 <MX_TIM1_Init+0x118>)
 8005596:	f000 ff5d 	bl	8006454 <HAL_TIM_MspPostInit>

}
 800559a:	bf00      	nop
 800559c:	3760      	adds	r7, #96	; 0x60
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000d34 	.word	0x20000d34
 80055a8:	40010000 	.word	0x40010000

080055ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08c      	sub	sp, #48	; 0x30
 80055b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80055b2:	f107 030c 	add.w	r3, r7, #12
 80055b6:	2224      	movs	r2, #36	; 0x24
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f010 fa9e 	bl	8015afc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055c0:	463b      	mov	r3, r7
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
 80055c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80055ca:	4b21      	ldr	r3, [pc, #132]	; (8005650 <MX_TIM2_Init+0xa4>)
 80055cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80055d2:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <MX_TIM2_Init+0xa4>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055d8:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <MX_TIM2_Init+0xa4>)
 80055da:	2200      	movs	r2, #0
 80055dc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80055de:	4b1c      	ldr	r3, [pc, #112]	; (8005650 <MX_TIM2_Init+0xa4>)
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295
 80055e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055e6:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <MX_TIM2_Init+0xa4>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055ec:	4b18      	ldr	r3, [pc, #96]	; (8005650 <MX_TIM2_Init+0xa4>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80055f2:	2301      	movs	r3, #1
 80055f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80055f6:	2300      	movs	r3, #0
 80055f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80055fa:	2301      	movs	r3, #1
 80055fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005606:	2300      	movs	r3, #0
 8005608:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800560a:	2301      	movs	r3, #1
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800560e:	2300      	movs	r3, #0
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005616:	f107 030c 	add.w	r3, r7, #12
 800561a:	4619      	mov	r1, r3
 800561c:	480c      	ldr	r0, [pc, #48]	; (8005650 <MX_TIM2_Init+0xa4>)
 800561e:	f00c fa99 	bl	8011b54 <HAL_TIM_Encoder_Init>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005628:	f7ff fcb6 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800562c:	2300      	movs	r3, #0
 800562e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005630:	2300      	movs	r3, #0
 8005632:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005634:	463b      	mov	r3, r7
 8005636:	4619      	mov	r1, r3
 8005638:	4805      	ldr	r0, [pc, #20]	; (8005650 <MX_TIM2_Init+0xa4>)
 800563a:	f00d fabb 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005644:	f7ff fca8 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005648:	bf00      	nop
 800564a:	3730      	adds	r7, #48	; 0x30
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	20000d80 	.word	0x20000d80

08005654 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08e      	sub	sp, #56	; 0x38
 8005658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800565a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	609a      	str	r2, [r3, #8]
 8005666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005668:	f107 031c 	add.w	r3, r7, #28
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005674:	463b      	mov	r3, r7
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	609a      	str	r2, [r3, #8]
 800567e:	60da      	str	r2, [r3, #12]
 8005680:	611a      	str	r2, [r3, #16]
 8005682:	615a      	str	r2, [r3, #20]
 8005684:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005686:	4b34      	ldr	r3, [pc, #208]	; (8005758 <MX_TIM3_Init+0x104>)
 8005688:	4a34      	ldr	r2, [pc, #208]	; (800575c <MX_TIM3_Init+0x108>)
 800568a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 275-1;
 800568c:	4b32      	ldr	r3, [pc, #200]	; (8005758 <MX_TIM3_Init+0x104>)
 800568e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005692:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005694:	4b30      	ldr	r3, [pc, #192]	; (8005758 <MX_TIM3_Init+0x104>)
 8005696:	2200      	movs	r2, #0
 8005698:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800569a:	4b2f      	ldr	r3, [pc, #188]	; (8005758 <MX_TIM3_Init+0x104>)
 800569c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80056a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056a2:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <MX_TIM3_Init+0x104>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056a8:	4b2b      	ldr	r3, [pc, #172]	; (8005758 <MX_TIM3_Init+0x104>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80056ae:	482a      	ldr	r0, [pc, #168]	; (8005758 <MX_TIM3_Init+0x104>)
 80056b0:	f00b ff07 	bl	80114c2 <HAL_TIM_Base_Init>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80056ba:	f7ff fc6d 	bl	8004f98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80056c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056c8:	4619      	mov	r1, r3
 80056ca:	4823      	ldr	r0, [pc, #140]	; (8005758 <MX_TIM3_Init+0x104>)
 80056cc:	f00c fd1c 	bl	8012108 <HAL_TIM_ConfigClockSource>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80056d6:	f7ff fc5f 	bl	8004f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80056da:	481f      	ldr	r0, [pc, #124]	; (8005758 <MX_TIM3_Init+0x104>)
 80056dc:	f00b ffce 	bl	801167c <HAL_TIM_PWM_Init>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80056e6:	f7ff fc57 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056f2:	f107 031c 	add.w	r3, r7, #28
 80056f6:	4619      	mov	r1, r3
 80056f8:	4817      	ldr	r0, [pc, #92]	; (8005758 <MX_TIM3_Init+0x104>)
 80056fa:	f00d fa5b 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005704:	f7ff fc48 	bl	8004f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005708:	2360      	movs	r3, #96	; 0x60
 800570a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1999;
 800570c:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8005710:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005712:	2300      	movs	r3, #0
 8005714:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005716:	2300      	movs	r3, #0
 8005718:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800571a:	463b      	mov	r3, r7
 800571c:	2200      	movs	r2, #0
 800571e:	4619      	mov	r1, r3
 8005720:	480d      	ldr	r0, [pc, #52]	; (8005758 <MX_TIM3_Init+0x104>)
 8005722:	f00c fbdd 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 800572c:	f7ff fc34 	bl	8004f98 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005734:	463b      	mov	r3, r7
 8005736:	2204      	movs	r2, #4
 8005738:	4619      	mov	r1, r3
 800573a:	4807      	ldr	r0, [pc, #28]	; (8005758 <MX_TIM3_Init+0x104>)
 800573c:	f00c fbd0 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8005746:	f7ff fc27 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800574a:	4803      	ldr	r0, [pc, #12]	; (8005758 <MX_TIM3_Init+0x104>)
 800574c:	f000 fe82 	bl	8006454 <HAL_TIM_MspPostInit>

}
 8005750:	bf00      	nop
 8005752:	3738      	adds	r7, #56	; 0x38
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	20000dcc 	.word	0x20000dcc
 800575c:	40000400 	.word	0x40000400

08005760 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005766:	f107 030c 	add.w	r3, r7, #12
 800576a:	2224      	movs	r2, #36	; 0x24
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f010 f9c4 	bl	8015afc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005774:	463b      	mov	r3, r7
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800577e:	4b21      	ldr	r3, [pc, #132]	; (8005804 <MX_TIM4_Init+0xa4>)
 8005780:	4a21      	ldr	r2, [pc, #132]	; (8005808 <MX_TIM4_Init+0xa8>)
 8005782:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005784:	4b1f      	ldr	r3, [pc, #124]	; (8005804 <MX_TIM4_Init+0xa4>)
 8005786:	2200      	movs	r2, #0
 8005788:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800578a:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <MX_TIM4_Init+0xa4>)
 800578c:	2200      	movs	r2, #0
 800578e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8005790:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <MX_TIM4_Init+0xa4>)
 8005792:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8005796:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <MX_TIM4_Init+0xa4>)
 800579a:	2200      	movs	r2, #0
 800579c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800579e:	4b19      	ldr	r3, [pc, #100]	; (8005804 <MX_TIM4_Init+0xa4>)
 80057a0:	2280      	movs	r2, #128	; 0x80
 80057a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80057a4:	2303      	movs	r3, #3
 80057a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80057ac:	2301      	movs	r3, #1
 80057ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80057b8:	2300      	movs	r3, #0
 80057ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80057bc:	2301      	movs	r3, #1
 80057be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80057c0:	2300      	movs	r3, #0
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80057c8:	f107 030c 	add.w	r3, r7, #12
 80057cc:	4619      	mov	r1, r3
 80057ce:	480d      	ldr	r0, [pc, #52]	; (8005804 <MX_TIM4_Init+0xa4>)
 80057d0:	f00c f9c0 	bl	8011b54 <HAL_TIM_Encoder_Init>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80057da:	f7ff fbdd 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057de:	2300      	movs	r3, #0
 80057e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057e2:	2300      	movs	r3, #0
 80057e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80057e6:	463b      	mov	r3, r7
 80057e8:	4619      	mov	r1, r3
 80057ea:	4806      	ldr	r0, [pc, #24]	; (8005804 <MX_TIM4_Init+0xa4>)
 80057ec:	f00d f9e2 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80057f6:	f7ff fbcf 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80057fa:	bf00      	nop
 80057fc:	3730      	adds	r7, #48	; 0x30
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	20000e18 	.word	0x20000e18
 8005808:	40000800 	.word	0x40000800

0800580c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08e      	sub	sp, #56	; 0x38
 8005810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	605a      	str	r2, [r3, #4]
 800581c:	609a      	str	r2, [r3, #8]
 800581e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005820:	f107 031c 	add.w	r3, r7, #28
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	605a      	str	r2, [r3, #4]
 800582a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800582c:	463b      	mov	r3, r7
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	605a      	str	r2, [r3, #4]
 8005834:	609a      	str	r2, [r3, #8]
 8005836:	60da      	str	r2, [r3, #12]
 8005838:	611a      	str	r2, [r3, #16]
 800583a:	615a      	str	r2, [r3, #20]
 800583c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800583e:	4b33      	ldr	r3, [pc, #204]	; (800590c <MX_TIM5_Init+0x100>)
 8005840:	4a33      	ldr	r2, [pc, #204]	; (8005910 <MX_TIM5_Init+0x104>)
 8005842:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8005844:	4b31      	ldr	r3, [pc, #196]	; (800590c <MX_TIM5_Init+0x100>)
 8005846:	f44f 7289 	mov.w	r2, #274	; 0x112
 800584a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800584c:	4b2f      	ldr	r3, [pc, #188]	; (800590c <MX_TIM5_Init+0x100>)
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8005852:	4b2e      	ldr	r3, [pc, #184]	; (800590c <MX_TIM5_Init+0x100>)
 8005854:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005858:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800585a:	4b2c      	ldr	r3, [pc, #176]	; (800590c <MX_TIM5_Init+0x100>)
 800585c:	2200      	movs	r2, #0
 800585e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005860:	4b2a      	ldr	r3, [pc, #168]	; (800590c <MX_TIM5_Init+0x100>)
 8005862:	2200      	movs	r2, #0
 8005864:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005866:	4829      	ldr	r0, [pc, #164]	; (800590c <MX_TIM5_Init+0x100>)
 8005868:	f00b fe2b 	bl	80114c2 <HAL_TIM_Base_Init>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8005872:	f7ff fb91 	bl	8004f98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800587c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005880:	4619      	mov	r1, r3
 8005882:	4822      	ldr	r0, [pc, #136]	; (800590c <MX_TIM5_Init+0x100>)
 8005884:	f00c fc40 	bl	8012108 <HAL_TIM_ConfigClockSource>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 800588e:	f7ff fb83 	bl	8004f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005892:	481e      	ldr	r0, [pc, #120]	; (800590c <MX_TIM5_Init+0x100>)
 8005894:	f00b fef2 	bl	801167c <HAL_TIM_PWM_Init>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800589e:	f7ff fb7b 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058a6:	2300      	movs	r3, #0
 80058a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80058aa:	f107 031c 	add.w	r3, r7, #28
 80058ae:	4619      	mov	r1, r3
 80058b0:	4816      	ldr	r0, [pc, #88]	; (800590c <MX_TIM5_Init+0x100>)
 80058b2:	f00d f97f 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80058bc:	f7ff fb6c 	bl	8004f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80058c0:	2360      	movs	r3, #96	; 0x60
 80058c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 80058c4:	f240 53db 	movw	r3, #1499	; 0x5db
 80058c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80058ce:	2300      	movs	r3, #0
 80058d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80058d2:	463b      	mov	r3, r7
 80058d4:	2200      	movs	r2, #0
 80058d6:	4619      	mov	r1, r3
 80058d8:	480c      	ldr	r0, [pc, #48]	; (800590c <MX_TIM5_Init+0x100>)
 80058da:	f00c fb01 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 80058e4:	f7ff fb58 	bl	8004f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80058e8:	463b      	mov	r3, r7
 80058ea:	2204      	movs	r2, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4807      	ldr	r0, [pc, #28]	; (800590c <MX_TIM5_Init+0x100>)
 80058f0:	f00c faf6 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 80058fa:	f7ff fb4d 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80058fe:	4803      	ldr	r0, [pc, #12]	; (800590c <MX_TIM5_Init+0x100>)
 8005900:	f000 fda8 	bl	8006454 <HAL_TIM_MspPostInit>

}
 8005904:	bf00      	nop
 8005906:	3738      	adds	r7, #56	; 0x38
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000e64 	.word	0x20000e64
 8005910:	40000c00 	.word	0x40000c00

08005914 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800591a:	1d3b      	adds	r3, r7, #4
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
 8005920:	605a      	str	r2, [r3, #4]
 8005922:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005924:	4b15      	ldr	r3, [pc, #84]	; (800597c <MX_TIM6_Init+0x68>)
 8005926:	4a16      	ldr	r2, [pc, #88]	; (8005980 <MX_TIM6_Init+0x6c>)
 8005928:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 800592a:	4b14      	ldr	r3, [pc, #80]	; (800597c <MX_TIM6_Init+0x68>)
 800592c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005930:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005932:	4b12      	ldr	r3, [pc, #72]	; (800597c <MX_TIM6_Init+0x68>)
 8005934:	2200      	movs	r2, #0
 8005936:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8005938:	4b10      	ldr	r3, [pc, #64]	; (800597c <MX_TIM6_Init+0x68>)
 800593a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800593e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005940:	4b0e      	ldr	r3, [pc, #56]	; (800597c <MX_TIM6_Init+0x68>)
 8005942:	2200      	movs	r2, #0
 8005944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005946:	480d      	ldr	r0, [pc, #52]	; (800597c <MX_TIM6_Init+0x68>)
 8005948:	f00b fdbb 	bl	80114c2 <HAL_TIM_Base_Init>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005952:	f7ff fb21 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005956:	2300      	movs	r3, #0
 8005958:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800595e:	1d3b      	adds	r3, r7, #4
 8005960:	4619      	mov	r1, r3
 8005962:	4806      	ldr	r0, [pc, #24]	; (800597c <MX_TIM6_Init+0x68>)
 8005964:	f00d f926 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800596e:	f7ff fb13 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000eb0 	.word	0x20000eb0
 8005980:	40001000 	.word	0x40001000

08005984 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b08c      	sub	sp, #48	; 0x30
 8005988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800598a:	f107 030c 	add.w	r3, r7, #12
 800598e:	2224      	movs	r2, #36	; 0x24
 8005990:	2100      	movs	r1, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f010 f8b2 	bl	8015afc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005998:	463b      	mov	r3, r7
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	605a      	str	r2, [r3, #4]
 80059a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80059a2:	4b23      	ldr	r3, [pc, #140]	; (8005a30 <MX_TIM8_Init+0xac>)
 80059a4:	4a23      	ldr	r2, [pc, #140]	; (8005a34 <MX_TIM8_Init+0xb0>)
 80059a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80059a8:	4b21      	ldr	r3, [pc, #132]	; (8005a30 <MX_TIM8_Init+0xac>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <MX_TIM8_Init+0xac>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 80059b4:	4b1e      	ldr	r3, [pc, #120]	; (8005a30 <MX_TIM8_Init+0xac>)
 80059b6:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80059ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059bc:	4b1c      	ldr	r3, [pc, #112]	; (8005a30 <MX_TIM8_Init+0xac>)
 80059be:	2200      	movs	r2, #0
 80059c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80059c2:	4b1b      	ldr	r3, [pc, #108]	; (8005a30 <MX_TIM8_Init+0xac>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80059c8:	4b19      	ldr	r3, [pc, #100]	; (8005a30 <MX_TIM8_Init+0xac>)
 80059ca:	2280      	movs	r2, #128	; 0x80
 80059cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80059ce:	2303      	movs	r3, #3
 80059d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80059d2:	2300      	movs	r3, #0
 80059d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80059d6:	2301      	movs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80059e2:	2300      	movs	r3, #0
 80059e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80059e6:	2301      	movs	r3, #1
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80059ea:	2300      	movs	r3, #0
 80059ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80059f2:	f107 030c 	add.w	r3, r7, #12
 80059f6:	4619      	mov	r1, r3
 80059f8:	480d      	ldr	r0, [pc, #52]	; (8005a30 <MX_TIM8_Init+0xac>)
 80059fa:	f00c f8ab 	bl	8011b54 <HAL_TIM_Encoder_Init>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8005a04:	f7ff fac8 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005a14:	463b      	mov	r3, r7
 8005a16:	4619      	mov	r1, r3
 8005a18:	4805      	ldr	r0, [pc, #20]	; (8005a30 <MX_TIM8_Init+0xac>)
 8005a1a:	f00d f8cb 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005a24:	f7ff fab8 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005a28:	bf00      	nop
 8005a2a:	3730      	adds	r7, #48	; 0x30
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20000efc 	.word	0x20000efc
 8005a34:	40010400 	.word	0x40010400

08005a38 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a3e:	1d3b      	adds	r3, r7, #4
 8005a40:	2200      	movs	r2, #0
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	605a      	str	r2, [r3, #4]
 8005a46:	609a      	str	r2, [r3, #8]
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	611a      	str	r2, [r3, #16]
 8005a4c:	615a      	str	r2, [r3, #20]
 8005a4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005a50:	4b1f      	ldr	r3, [pc, #124]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005a52:	4a20      	ldr	r2, [pc, #128]	; (8005ad4 <MX_TIM13_Init+0x9c>)
 8005a54:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 8005a56:	4b1e      	ldr	r3, [pc, #120]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005a58:	f240 2225 	movw	r2, #549	; 0x225
 8005a5c:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8005a64:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005a66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a6a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a6c:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005a72:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005a74:	2280      	movs	r2, #128	; 0x80
 8005a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005a78:	4815      	ldr	r0, [pc, #84]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005a7a:	f00b fd22 	bl	80114c2 <HAL_TIM_Base_Init>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8005a84:	f7ff fa88 	bl	8004f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8005a88:	4811      	ldr	r0, [pc, #68]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005a8a:	f00b fdf7 	bl	801167c <HAL_TIM_PWM_Init>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8005a94:	f7ff fa80 	bl	8004f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a98:	2360      	movs	r3, #96	; 0x60
 8005a9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8005a9c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005aa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005aaa:	1d3b      	adds	r3, r7, #4
 8005aac:	2200      	movs	r2, #0
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4807      	ldr	r0, [pc, #28]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005ab2:	f00c fa15 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8005abc:	f7ff fa6c 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8005ac0:	4803      	ldr	r0, [pc, #12]	; (8005ad0 <MX_TIM13_Init+0x98>)
 8005ac2:	f000 fcc7 	bl	8006454 <HAL_TIM_MspPostInit>

}
 8005ac6:	bf00      	nop
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000f48 	.word	0x20000f48
 8005ad4:	40001c00 	.word	0x40001c00

08005ad8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	611a      	str	r2, [r3, #16]
 8005aec:	615a      	str	r2, [r3, #20]
 8005aee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005af0:	4b1f      	ldr	r3, [pc, #124]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005af2:	4a20      	ldr	r2, [pc, #128]	; (8005b74 <MX_TIM14_Init+0x9c>)
 8005af4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8005af6:	4b1e      	ldr	r3, [pc, #120]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005af8:	f240 2225 	movw	r2, #549	; 0x225
 8005afc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8005b04:	4b1a      	ldr	r3, [pc, #104]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005b06:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b0a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b0c:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b12:	4b17      	ldr	r3, [pc, #92]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005b14:	2280      	movs	r2, #128	; 0x80
 8005b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005b18:	4815      	ldr	r0, [pc, #84]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005b1a:	f00b fcd2 	bl	80114c2 <HAL_TIM_Base_Init>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d001      	beq.n	8005b28 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8005b24:	f7ff fa38 	bl	8004f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005b28:	4811      	ldr	r0, [pc, #68]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005b2a:	f00b fda7 	bl	801167c <HAL_TIM_PWM_Init>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8005b34:	f7ff fa30 	bl	8004f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b38:	2360      	movs	r3, #96	; 0x60
 8005b3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8005b3c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005b40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b42:	2300      	movs	r3, #0
 8005b44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005b4a:	1d3b      	adds	r3, r7, #4
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4807      	ldr	r0, [pc, #28]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005b52:	f00c f9c5 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8005b5c:	f7ff fa1c 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8005b60:	4803      	ldr	r0, [pc, #12]	; (8005b70 <MX_TIM14_Init+0x98>)
 8005b62:	f000 fc77 	bl	8006454 <HAL_TIM_MspPostInit>

}
 8005b66:	bf00      	nop
 8005b68:	3720      	adds	r7, #32
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000f94 	.word	0x20000f94
 8005b74:	40002000 	.word	0x40002000

08005b78 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b098      	sub	sp, #96	; 0x60
 8005b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005b82:	2200      	movs	r2, #0
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	605a      	str	r2, [r3, #4]
 8005b88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005b8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	605a      	str	r2, [r3, #4]
 8005b94:	609a      	str	r2, [r3, #8]
 8005b96:	60da      	str	r2, [r3, #12]
 8005b98:	611a      	str	r2, [r3, #16]
 8005b9a:	615a      	str	r2, [r3, #20]
 8005b9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005b9e:	1d3b      	adds	r3, r7, #4
 8005ba0:	2234      	movs	r2, #52	; 0x34
 8005ba2:	2100      	movs	r1, #0
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f00f ffa9 	bl	8015afc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005baa:	4b35      	ldr	r3, [pc, #212]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005bac:	4a35      	ldr	r2, [pc, #212]	; (8005c84 <MX_TIM15_Init+0x10c>)
 8005bae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8005bb0:	4b33      	ldr	r3, [pc, #204]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005bb2:	f240 2225 	movw	r2, #549	; 0x225
 8005bb6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bb8:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8005bbe:	4b30      	ldr	r3, [pc, #192]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005bc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005bc4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bc6:	4b2e      	ldr	r3, [pc, #184]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005bcc:	4b2c      	ldr	r3, [pc, #176]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bd2:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005bd4:	2280      	movs	r2, #128	; 0x80
 8005bd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8005bd8:	4829      	ldr	r0, [pc, #164]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005bda:	f00b fd4f 	bl	801167c <HAL_TIM_PWM_Init>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d001      	beq.n	8005be8 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8005be4:	f7ff f9d8 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005be8:	2300      	movs	r3, #0
 8005bea:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005bf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4822      	ldr	r0, [pc, #136]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005bf8:	f00c ffdc 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8005c02:	f7ff f9c9 	bl	8004f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005c06:	2360      	movs	r3, #96	; 0x60
 8005c08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 8005c0a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005c10:	2300      	movs	r3, #0
 8005c12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005c14:	2300      	movs	r3, #0
 8005c16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005c20:	2300      	movs	r3, #0
 8005c22:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005c24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	4814      	ldr	r0, [pc, #80]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005c2e:	f00c f957 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 8005c38:	f7ff f9ae 	bl	8004f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005c56:	2300      	movs	r3, #0
 8005c58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	4619      	mov	r1, r3
 8005c62:	4807      	ldr	r0, [pc, #28]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005c64:	f00d f842 	bl	8012cec <HAL_TIMEx_ConfigBreakDeadTime>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8005c6e:	f7ff f993 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8005c72:	4803      	ldr	r0, [pc, #12]	; (8005c80 <MX_TIM15_Init+0x108>)
 8005c74:	f000 fbee 	bl	8006454 <HAL_TIM_MspPostInit>

}
 8005c78:	bf00      	nop
 8005c7a:	3760      	adds	r7, #96	; 0x60
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20000fe0 	.word	0x20000fe0
 8005c84:	40014000 	.word	0x40014000

08005c88 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b094      	sub	sp, #80	; 0x50
 8005c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005c8e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005c92:	2200      	movs	r2, #0
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	605a      	str	r2, [r3, #4]
 8005c98:	609a      	str	r2, [r3, #8]
 8005c9a:	60da      	str	r2, [r3, #12]
 8005c9c:	611a      	str	r2, [r3, #16]
 8005c9e:	615a      	str	r2, [r3, #20]
 8005ca0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005ca2:	463b      	mov	r3, r7
 8005ca4:	2234      	movs	r2, #52	; 0x34
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f00f ff27 	bl	8015afc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005cae:	4b32      	ldr	r3, [pc, #200]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005cb0:	4a32      	ldr	r2, [pc, #200]	; (8005d7c <MX_TIM16_Init+0xf4>)
 8005cb2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8005cb4:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005cb6:	f240 2225 	movw	r2, #549	; 0x225
 8005cba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cbc:	4b2e      	ldr	r3, [pc, #184]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005cc2:	4b2d      	ldr	r3, [pc, #180]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005cc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005cc8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cca:	4b2b      	ldr	r3, [pc, #172]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005cd0:	4b29      	ldr	r3, [pc, #164]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005cd6:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005cd8:	2280      	movs	r2, #128	; 0x80
 8005cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005cdc:	4826      	ldr	r0, [pc, #152]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005cde:	f00b fbf0 	bl	80114c2 <HAL_TIM_Base_Init>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8005ce8:	f7ff f956 	bl	8004f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8005cec:	4822      	ldr	r0, [pc, #136]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005cee:	f00b fcc5 	bl	801167c <HAL_TIM_PWM_Init>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8005cf8:	f7ff f94e 	bl	8004f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005cfc:	2360      	movs	r3, #96	; 0x60
 8005cfe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8005d00:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005d04:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d06:	2300      	movs	r3, #0
 8005d08:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005d12:	2300      	movs	r3, #0
 8005d14:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005d16:	2300      	movs	r3, #0
 8005d18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d1e:	2200      	movs	r2, #0
 8005d20:	4619      	mov	r1, r3
 8005d22:	4815      	ldr	r0, [pc, #84]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005d24:	f00c f8dc 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8005d2e:	f7ff f933 	bl	8004f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005d4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005d50:	2300      	movs	r3, #0
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8005d54:	463b      	mov	r3, r7
 8005d56:	4619      	mov	r1, r3
 8005d58:	4807      	ldr	r0, [pc, #28]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005d5a:	f00c ffc7 	bl	8012cec <HAL_TIMEx_ConfigBreakDeadTime>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8005d64:	f7ff f918 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8005d68:	4803      	ldr	r0, [pc, #12]	; (8005d78 <MX_TIM16_Init+0xf0>)
 8005d6a:	f000 fb73 	bl	8006454 <HAL_TIM_MspPostInit>

}
 8005d6e:	bf00      	nop
 8005d70:	3750      	adds	r7, #80	; 0x50
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	2000102c 	.word	0x2000102c
 8005d7c:	40014400 	.word	0x40014400

08005d80 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b094      	sub	sp, #80	; 0x50
 8005d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	605a      	str	r2, [r3, #4]
 8005d90:	609a      	str	r2, [r3, #8]
 8005d92:	60da      	str	r2, [r3, #12]
 8005d94:	611a      	str	r2, [r3, #16]
 8005d96:	615a      	str	r2, [r3, #20]
 8005d98:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	2234      	movs	r2, #52	; 0x34
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4618      	mov	r0, r3
 8005da2:	f00f feab 	bl	8015afc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005da6:	4b32      	ldr	r3, [pc, #200]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005da8:	4a32      	ldr	r2, [pc, #200]	; (8005e74 <MX_TIM17_Init+0xf4>)
 8005daa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8005dac:	4b30      	ldr	r3, [pc, #192]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005dae:	f240 2225 	movw	r2, #549	; 0x225
 8005db2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005db4:	4b2e      	ldr	r3, [pc, #184]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8005dba:	4b2d      	ldr	r3, [pc, #180]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005dbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005dc0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005dc2:	4b2b      	ldr	r3, [pc, #172]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005dc8:	4b29      	ldr	r3, [pc, #164]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005dce:	4b28      	ldr	r3, [pc, #160]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005dd0:	2280      	movs	r2, #128	; 0x80
 8005dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005dd4:	4826      	ldr	r0, [pc, #152]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005dd6:	f00b fb74 	bl	80114c2 <HAL_TIM_Base_Init>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8005de0:	f7ff f8da 	bl	8004f98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8005de4:	4822      	ldr	r0, [pc, #136]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005de6:	f00b fc49 	bl	801167c <HAL_TIM_PWM_Init>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8005df0:	f7ff f8d2 	bl	8004f98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005df4:	2360      	movs	r3, #96	; 0x60
 8005df6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8005df8:	f240 13f3 	movw	r3, #499	; 0x1f3
 8005dfc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005e02:	2300      	movs	r3, #0
 8005e04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005e12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e16:	2200      	movs	r2, #0
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4815      	ldr	r0, [pc, #84]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005e1c:	f00c f860 	bl	8011ee0 <HAL_TIM_PWM_ConfigChannel>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8005e26:	f7ff f8b7 	bl	8004f98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4807      	ldr	r0, [pc, #28]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005e52:	f00c ff4b 	bl	8012cec <HAL_TIMEx_ConfigBreakDeadTime>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8005e5c:	f7ff f89c 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8005e60:	4803      	ldr	r0, [pc, #12]	; (8005e70 <MX_TIM17_Init+0xf0>)
 8005e62:	f000 faf7 	bl	8006454 <HAL_TIM_MspPostInit>

}
 8005e66:	bf00      	nop
 8005e68:	3750      	adds	r7, #80	; 0x50
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20001078 	.word	0x20001078
 8005e74:	40014800 	.word	0x40014800

08005e78 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b088      	sub	sp, #32
 8005e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e7e:	f107 0310 	add.w	r3, r7, #16
 8005e82:	2200      	movs	r2, #0
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	605a      	str	r2, [r3, #4]
 8005e88:	609a      	str	r2, [r3, #8]
 8005e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e8c:	1d3b      	adds	r3, r7, #4
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	605a      	str	r2, [r3, #4]
 8005e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8005e96:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <MX_TIM23_Init+0x98>)
 8005e98:	4a1e      	ldr	r2, [pc, #120]	; (8005f14 <MX_TIM23_Init+0x9c>)
 8005e9a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8005e9c:	4b1c      	ldr	r3, [pc, #112]	; (8005f10 <MX_TIM23_Init+0x98>)
 8005e9e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005ea2:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	; (8005f10 <MX_TIM23_Init+0x98>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1000-1;
 8005eaa:	4b19      	ldr	r3, [pc, #100]	; (8005f10 <MX_TIM23_Init+0x98>)
 8005eac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005eb0:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005eb2:	4b17      	ldr	r3, [pc, #92]	; (8005f10 <MX_TIM23_Init+0x98>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005eb8:	4b15      	ldr	r3, [pc, #84]	; (8005f10 <MX_TIM23_Init+0x98>)
 8005eba:	2280      	movs	r2, #128	; 0x80
 8005ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8005ebe:	4814      	ldr	r0, [pc, #80]	; (8005f10 <MX_TIM23_Init+0x98>)
 8005ec0:	f00b faff 	bl	80114c2 <HAL_TIM_Base_Init>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d001      	beq.n	8005ece <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8005eca:	f7ff f865 	bl	8004f98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8005ed4:	f107 0310 	add.w	r3, r7, #16
 8005ed8:	4619      	mov	r1, r3
 8005eda:	480d      	ldr	r0, [pc, #52]	; (8005f10 <MX_TIM23_Init+0x98>)
 8005edc:	f00c f914 	bl	8012108 <HAL_TIM_ConfigClockSource>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8005ee6:	f7ff f857 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005eea:	2300      	movs	r3, #0
 8005eec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8005ef2:	1d3b      	adds	r3, r7, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4806      	ldr	r0, [pc, #24]	; (8005f10 <MX_TIM23_Init+0x98>)
 8005ef8:	f00c fe5c 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8005f02:	f7ff f849 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8005f06:	bf00      	nop
 8005f08:	3720      	adds	r7, #32
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	200010c4 	.word	0x200010c4
 8005f14:	4000e000 	.word	0x4000e000

08005f18 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f1e:	f107 0310 	add.w	r3, r7, #16
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	605a      	str	r2, [r3, #4]
 8005f28:	609a      	str	r2, [r3, #8]
 8005f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f2c:	1d3b      	adds	r3, r7, #4
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	605a      	str	r2, [r3, #4]
 8005f34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8005f36:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <MX_TIM24_Init+0x98>)
 8005f38:	4a1e      	ldr	r2, [pc, #120]	; (8005fb4 <MX_TIM24_Init+0x9c>)
 8005f3a:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8005f3c:	4b1c      	ldr	r3, [pc, #112]	; (8005fb0 <MX_TIM24_Init+0x98>)
 8005f3e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005f42:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f44:	4b1a      	ldr	r3, [pc, #104]	; (8005fb0 <MX_TIM24_Init+0x98>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8005f4a:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <MX_TIM24_Init+0x98>)
 8005f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f50:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f52:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <MX_TIM24_Init+0x98>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f58:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <MX_TIM24_Init+0x98>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8005f5e:	4814      	ldr	r0, [pc, #80]	; (8005fb0 <MX_TIM24_Init+0x98>)
 8005f60:	f00b faaf 	bl	80114c2 <HAL_TIM_Base_Init>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8005f6a:	f7ff f815 	bl	8004f98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8005f74:	f107 0310 	add.w	r3, r7, #16
 8005f78:	4619      	mov	r1, r3
 8005f7a:	480d      	ldr	r0, [pc, #52]	; (8005fb0 <MX_TIM24_Init+0x98>)
 8005f7c:	f00c f8c4 	bl	8012108 <HAL_TIM_ConfigClockSource>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8005f86:	f7ff f807 	bl	8004f98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8005f92:	1d3b      	adds	r3, r7, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4806      	ldr	r0, [pc, #24]	; (8005fb0 <MX_TIM24_Init+0x98>)
 8005f98:	f00c fe0c 	bl	8012bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d001      	beq.n	8005fa6 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8005fa2:	f7fe fff9 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8005fa6:	bf00      	nop
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	20001110 	.word	0x20001110
 8005fb4:	4000e400 	.word	0x4000e400

08005fb8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fc0:	f107 0314 	add.w	r3, r7, #20
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	605a      	str	r2, [r3, #4]
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <HAL_TIM_PWM_MspInit+0x110>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d15e      	bne.n	8006098 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fda:	4b3c      	ldr	r3, [pc, #240]	; (80060cc <HAL_TIM_PWM_MspInit+0x114>)
 8005fdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fe0:	4a3a      	ldr	r2, [pc, #232]	; (80060cc <HAL_TIM_PWM_MspInit+0x114>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005fea:	4b38      	ldr	r3, [pc, #224]	; (80060cc <HAL_TIM_PWM_MspInit+0x114>)
 8005fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	613b      	str	r3, [r7, #16]
 8005ff6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ff8:	4b34      	ldr	r3, [pc, #208]	; (80060cc <HAL_TIM_PWM_MspInit+0x114>)
 8005ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ffe:	4a33      	ldr	r2, [pc, #204]	; (80060cc <HAL_TIM_PWM_MspInit+0x114>)
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006008:	4b30      	ldr	r3, [pc, #192]	; (80060cc <HAL_TIM_PWM_MspInit+0x114>)
 800600a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 8006016:	f44f 7300 	mov.w	r3, #512	; 0x200
 800601a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601c:	2302      	movs	r3, #2
 800601e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006020:	2300      	movs	r3, #0
 8006022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006024:	2300      	movs	r3, #0
 8006026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006028:	2301      	movs	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 800602c:	f107 0314 	add.w	r3, r7, #20
 8006030:	4619      	mov	r1, r3
 8006032:	4827      	ldr	r0, [pc, #156]	; (80060d0 <HAL_TIM_PWM_MspInit+0x118>)
 8006034:	f005 fcea 	bl	800ba0c <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream2;
 8006038:	4b26      	ldr	r3, [pc, #152]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 800603a:	4a27      	ldr	r2, [pc, #156]	; (80060d8 <HAL_TIM_PWM_MspInit+0x120>)
 800603c:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 800603e:	4b25      	ldr	r3, [pc, #148]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 8006040:	220b      	movs	r2, #11
 8006042:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006044:	4b23      	ldr	r3, [pc, #140]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 8006046:	2240      	movs	r2, #64	; 0x40
 8006048:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800604a:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 800604c:	2200      	movs	r2, #0
 800604e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006050:	4b20      	ldr	r3, [pc, #128]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 8006052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006056:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006058:	4b1e      	ldr	r3, [pc, #120]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 800605a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800605e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006060:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 8006062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006066:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8006068:	4b1a      	ldr	r3, [pc, #104]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 800606a:	2200      	movs	r2, #0
 800606c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800606e:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 8006070:	2200      	movs	r2, #0
 8006072:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006074:	4b17      	ldr	r3, [pc, #92]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 8006076:	2200      	movs	r2, #0
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800607a:	4816      	ldr	r0, [pc, #88]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 800607c:	f003 fa94 	bl	80095a8 <HAL_DMA_Init>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 8006086:	f7fe ff87 	bl	8004f98 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a11      	ldr	r2, [pc, #68]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 800608e:	625a      	str	r2, [r3, #36]	; 0x24
 8006090:	4a10      	ldr	r2, [pc, #64]	; (80060d4 <HAL_TIM_PWM_MspInit+0x11c>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8006096:	e013      	b.n	80060c0 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <HAL_TIM_PWM_MspInit+0x124>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80060a2:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <HAL_TIM_PWM_MspInit+0x114>)
 80060a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060a8:	4a08      	ldr	r2, [pc, #32]	; (80060cc <HAL_TIM_PWM_MspInit+0x114>)
 80060aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80060b2:	4b06      	ldr	r3, [pc, #24]	; (80060cc <HAL_TIM_PWM_MspInit+0x114>)
 80060b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	68bb      	ldr	r3, [r7, #8]
}
 80060c0:	bf00      	nop
 80060c2:	3728      	adds	r7, #40	; 0x28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40010000 	.word	0x40010000
 80060cc:	58024400 	.word	0x58024400
 80060d0:	58020000 	.word	0x58020000
 80060d4:	2000115c 	.word	0x2000115c
 80060d8:	40020040 	.word	0x40020040
 80060dc:	40014000 	.word	0x40014000

080060e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08e      	sub	sp, #56	; 0x38
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060ec:	2200      	movs	r2, #0
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	605a      	str	r2, [r3, #4]
 80060f2:	609a      	str	r2, [r3, #8]
 80060f4:	60da      	str	r2, [r3, #12]
 80060f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d14e      	bne.n	80061a0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006102:	4b5d      	ldr	r3, [pc, #372]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006108:	4a5b      	ldr	r2, [pc, #364]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006112:	4b59      	ldr	r3, [pc, #356]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006118:	f003 0301 	and.w	r3, r3, #1
 800611c:	623b      	str	r3, [r7, #32]
 800611e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006120:	4b55      	ldr	r3, [pc, #340]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006126:	4a54      	ldr	r2, [pc, #336]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006130:	4b51      	ldr	r3, [pc, #324]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	61fb      	str	r3, [r7, #28]
 800613c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800613e:	4b4e      	ldr	r3, [pc, #312]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006144:	4a4c      	ldr	r2, [pc, #304]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006146:	f043 0302 	orr.w	r3, r3, #2
 800614a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800614e:	4b4a      	ldr	r3, [pc, #296]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006154:	f003 0302 	and.w	r3, r3, #2
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 800615c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006162:	2302      	movs	r3, #2
 8006164:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006166:	2300      	movs	r3, #0
 8006168:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800616a:	2300      	movs	r3, #0
 800616c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800616e:	2301      	movs	r3, #1
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8006172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006176:	4619      	mov	r1, r3
 8006178:	4840      	ldr	r0, [pc, #256]	; (800627c <HAL_TIM_Encoder_MspInit+0x19c>)
 800617a:	f005 fc47 	bl	800ba0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 800617e:	2308      	movs	r3, #8
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006182:	2302      	movs	r3, #2
 8006184:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006186:	2300      	movs	r3, #0
 8006188:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800618a:	2300      	movs	r3, #0
 800618c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800618e:	2301      	movs	r3, #1
 8006190:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8006192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006196:	4619      	mov	r1, r3
 8006198:	4839      	ldr	r0, [pc, #228]	; (8006280 <HAL_TIM_Encoder_MspInit+0x1a0>)
 800619a:	f005 fc37 	bl	800ba0c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800619e:	e067      	b.n	8006270 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM4)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a37      	ldr	r2, [pc, #220]	; (8006284 <HAL_TIM_Encoder_MspInit+0x1a4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d12f      	bne.n	800620a <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80061aa:	4b33      	ldr	r3, [pc, #204]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 80061ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061b0:	4a31      	ldr	r2, [pc, #196]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 80061b2:	f043 0304 	orr.w	r3, r3, #4
 80061b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061ba:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 80061bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061c0:	f003 0304 	and.w	r3, r3, #4
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061c8:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 80061ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ce:	4a2a      	ldr	r2, [pc, #168]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 80061d0:	f043 0308 	orr.w	r3, r3, #8
 80061d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061d8:	4b27      	ldr	r3, [pc, #156]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 80061da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061de:	f003 0308 	and.w	r3, r3, #8
 80061e2:	613b      	str	r3, [r7, #16]
 80061e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 80061e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ec:	2302      	movs	r3, #2
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f4:	2300      	movs	r3, #0
 80061f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80061f8:	2302      	movs	r3, #2
 80061fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006200:	4619      	mov	r1, r3
 8006202:	4821      	ldr	r0, [pc, #132]	; (8006288 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8006204:	f005 fc02 	bl	800ba0c <HAL_GPIO_Init>
}
 8006208:	e032      	b.n	8006270 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM8)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1f      	ldr	r2, [pc, #124]	; (800628c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d12d      	bne.n	8006270 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006214:	4b18      	ldr	r3, [pc, #96]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800621a:	4a17      	ldr	r2, [pc, #92]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 800621c:	f043 0302 	orr.w	r3, r3, #2
 8006220:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006238:	4a0f      	ldr	r2, [pc, #60]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 800623a:	f043 0304 	orr.w	r3, r3, #4
 800623e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <HAL_TIM_Encoder_MspInit+0x198>)
 8006244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	60bb      	str	r3, [r7, #8]
 800624e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8006250:	23c0      	movs	r3, #192	; 0xc0
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006254:	2302      	movs	r3, #2
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006258:	2300      	movs	r3, #0
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625c:	2300      	movs	r3, #0
 800625e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006260:	2303      	movs	r3, #3
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006268:	4619      	mov	r1, r3
 800626a:	4809      	ldr	r0, [pc, #36]	; (8006290 <HAL_TIM_Encoder_MspInit+0x1b0>)
 800626c:	f005 fbce 	bl	800ba0c <HAL_GPIO_Init>
}
 8006270:	bf00      	nop
 8006272:	3738      	adds	r7, #56	; 0x38
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	58024400 	.word	0x58024400
 800627c:	58020000 	.word	0x58020000
 8006280:	58020400 	.word	0x58020400
 8006284:	40000800 	.word	0x40000800
 8006288:	58020c00 	.word	0x58020c00
 800628c:	40010400 	.word	0x40010400
 8006290:	58020800 	.word	0x58020800

08006294 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08c      	sub	sp, #48	; 0x30
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a62      	ldr	r2, [pc, #392]	; (800642c <HAL_TIM_Base_MspInit+0x198>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d10f      	bne.n	80062c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80062a6:	4b62      	ldr	r3, [pc, #392]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80062a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062ac:	4a60      	ldr	r2, [pc, #384]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80062ae:	f043 0302 	orr.w	r3, r3, #2
 80062b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062b6:	4b5e      	ldr	r3, [pc, #376]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80062b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 80062c4:	e0ae      	b.n	8006424 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM5)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a5a      	ldr	r2, [pc, #360]	; (8006434 <HAL_TIM_Base_MspInit+0x1a0>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10f      	bne.n	80062f0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80062d0:	4b57      	ldr	r3, [pc, #348]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80062d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062d6:	4a56      	ldr	r2, [pc, #344]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80062d8:	f043 0308 	orr.w	r3, r3, #8
 80062dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062e0:	4b53      	ldr	r3, [pc, #332]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80062e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80062ee:	e099      	b.n	8006424 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM6)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a50      	ldr	r2, [pc, #320]	; (8006438 <HAL_TIM_Base_MspInit+0x1a4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d10f      	bne.n	800631a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80062fa:	4b4d      	ldr	r3, [pc, #308]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80062fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006300:	4a4b      	ldr	r2, [pc, #300]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 8006302:	f043 0310 	orr.w	r3, r3, #16
 8006306:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800630a:	4b49      	ldr	r3, [pc, #292]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 800630c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
 8006316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006318:	e084      	b.n	8006424 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM13)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a47      	ldr	r2, [pc, #284]	; (800643c <HAL_TIM_Base_MspInit+0x1a8>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d10f      	bne.n	8006344 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006324:	4b42      	ldr	r3, [pc, #264]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 8006326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800632a:	4a41      	ldr	r2, [pc, #260]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 800632c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006330:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006334:	4b3e      	ldr	r3, [pc, #248]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 8006336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	6a3b      	ldr	r3, [r7, #32]
}
 8006342:	e06f      	b.n	8006424 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM14)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a3d      	ldr	r2, [pc, #244]	; (8006440 <HAL_TIM_Base_MspInit+0x1ac>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d10f      	bne.n	800636e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800634e:	4b38      	ldr	r3, [pc, #224]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 8006350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006354:	4a36      	ldr	r2, [pc, #216]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 8006356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800635a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800635e:	4b34      	ldr	r3, [pc, #208]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 8006360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006368:	61fb      	str	r3, [r7, #28]
 800636a:	69fb      	ldr	r3, [r7, #28]
}
 800636c:	e05a      	b.n	8006424 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM16)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a34      	ldr	r2, [pc, #208]	; (8006444 <HAL_TIM_Base_MspInit+0x1b0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d10f      	bne.n	8006398 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006378:	4b2d      	ldr	r3, [pc, #180]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 800637a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800637e:	4a2c      	ldr	r2, [pc, #176]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 8006380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006384:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006388:	4b29      	ldr	r3, [pc, #164]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 800638a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	69bb      	ldr	r3, [r7, #24]
}
 8006396:	e045      	b.n	8006424 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM17)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <HAL_TIM_Base_MspInit+0x1b4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d10f      	bne.n	80063c2 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80063a2:	4b23      	ldr	r3, [pc, #140]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80063a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063a8:	4a21      	ldr	r2, [pc, #132]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80063aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80063b2:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80063b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063bc:	617b      	str	r3, [r7, #20]
 80063be:	697b      	ldr	r3, [r7, #20]
}
 80063c0:	e030      	b.n	8006424 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM23)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a21      	ldr	r2, [pc, #132]	; (800644c <HAL_TIM_Base_MspInit+0x1b8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d117      	bne.n	80063fc <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80063cc:	4b18      	ldr	r3, [pc, #96]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80063ce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80063d2:	4a17      	ldr	r2, [pc, #92]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80063d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063d8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80063dc:	4b14      	ldr	r3, [pc, #80]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 80063de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80063e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 80063ea:	2200      	movs	r2, #0
 80063ec:	2100      	movs	r1, #0
 80063ee:	20a1      	movs	r0, #161	; 0xa1
 80063f0:	f002 fea7 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 80063f4:	20a1      	movs	r0, #161	; 0xa1
 80063f6:	f002 febe 	bl	8009176 <HAL_NVIC_EnableIRQ>
}
 80063fa:	e013      	b.n	8006424 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM24)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a13      	ldr	r2, [pc, #76]	; (8006450 <HAL_TIM_Base_MspInit+0x1bc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d10e      	bne.n	8006424 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8006406:	4b0a      	ldr	r3, [pc, #40]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 8006408:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800640c:	4a08      	ldr	r2, [pc, #32]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 800640e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006412:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <HAL_TIM_Base_MspInit+0x19c>)
 8006418:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800641c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	68fb      	ldr	r3, [r7, #12]
}
 8006424:	bf00      	nop
 8006426:	3730      	adds	r7, #48	; 0x30
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	40000400 	.word	0x40000400
 8006430:	58024400 	.word	0x58024400
 8006434:	40000c00 	.word	0x40000c00
 8006438:	40001000 	.word	0x40001000
 800643c:	40001c00 	.word	0x40001c00
 8006440:	40002000 	.word	0x40002000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800
 800644c:	4000e000 	.word	0x4000e000
 8006450:	4000e400 	.word	0x4000e400

08006454 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b090      	sub	sp, #64	; 0x40
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800645c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	609a      	str	r2, [r3, #8]
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a95      	ldr	r2, [pc, #596]	; (80066c8 <HAL_TIM_MspPostInit+0x274>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d120      	bne.n	80064b8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006476:	4b95      	ldr	r3, [pc, #596]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800647c:	4a93      	ldr	r2, [pc, #588]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 800647e:	f043 0301 	orr.w	r3, r3, #1
 8006482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006486:	4b91      	ldr	r3, [pc, #580]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8006494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649a:	2302      	movs	r3, #2
 800649c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a2:	2300      	movs	r3, #0
 80064a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80064a6:	2301      	movs	r3, #1
 80064a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 80064aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064ae:	4619      	mov	r1, r3
 80064b0:	4887      	ldr	r0, [pc, #540]	; (80066d0 <HAL_TIM_MspPostInit+0x27c>)
 80064b2:	f005 faab 	bl	800ba0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80064b6:	e103      	b.n	80066c0 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a85      	ldr	r2, [pc, #532]	; (80066d4 <HAL_TIM_MspPostInit+0x280>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d11f      	bne.n	8006502 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064c2:	4b82      	ldr	r3, [pc, #520]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 80064c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064c8:	4a80      	ldr	r2, [pc, #512]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 80064ca:	f043 0302 	orr.w	r3, r3, #2
 80064ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064d2:	4b7e      	ldr	r3, [pc, #504]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 80064d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	627b      	str	r3, [r7, #36]	; 0x24
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_GriperA_Pin|ENC5B_GriperB_Pin;
 80064e0:	2330      	movs	r3, #48	; 0x30
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064e4:	2302      	movs	r3, #2
 80064e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064e8:	2300      	movs	r3, #0
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064ec:	2300      	movs	r3, #0
 80064ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80064f0:	2302      	movs	r3, #2
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064f8:	4619      	mov	r1, r3
 80064fa:	4877      	ldr	r0, [pc, #476]	; (80066d8 <HAL_TIM_MspPostInit+0x284>)
 80064fc:	f005 fa86 	bl	800ba0c <HAL_GPIO_Init>
}
 8006500:	e0de      	b.n	80066c0 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a75      	ldr	r2, [pc, #468]	; (80066dc <HAL_TIM_MspPostInit+0x288>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d11f      	bne.n	800654c <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800650c:	4b6f      	ldr	r3, [pc, #444]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 800650e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006512:	4a6e      	ldr	r2, [pc, #440]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006514:	f043 0301 	orr.w	r3, r3, #1
 8006518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800651c:	4b6b      	ldr	r3, [pc, #428]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 800651e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	623b      	str	r3, [r7, #32]
 8006528:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800652a:	2303      	movs	r3, #3
 800652c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800652e:	2302      	movs	r3, #2
 8006530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006532:	2300      	movs	r3, #0
 8006534:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006536:	2300      	movs	r3, #0
 8006538:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800653a:	2302      	movs	r3, #2
 800653c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800653e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006542:	4619      	mov	r1, r3
 8006544:	4862      	ldr	r0, [pc, #392]	; (80066d0 <HAL_TIM_MspPostInit+0x27c>)
 8006546:	f005 fa61 	bl	800ba0c <HAL_GPIO_Init>
}
 800654a:	e0b9      	b.n	80066c0 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a63      	ldr	r2, [pc, #396]	; (80066e0 <HAL_TIM_MspPostInit+0x28c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d11f      	bne.n	8006596 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006556:	4b5d      	ldr	r3, [pc, #372]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800655c:	4a5b      	ldr	r2, [pc, #364]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006566:	4b59      	ldr	r3, [pc, #356]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8006574:	2340      	movs	r3, #64	; 0x40
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006578:	2302      	movs	r3, #2
 800657a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657c:	2300      	movs	r3, #0
 800657e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006580:	2300      	movs	r3, #0
 8006582:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006584:	2309      	movs	r3, #9
 8006586:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8006588:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800658c:	4619      	mov	r1, r3
 800658e:	4850      	ldr	r0, [pc, #320]	; (80066d0 <HAL_TIM_MspPostInit+0x27c>)
 8006590:	f005 fa3c 	bl	800ba0c <HAL_GPIO_Init>
}
 8006594:	e094      	b.n	80066c0 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a52      	ldr	r2, [pc, #328]	; (80066e4 <HAL_TIM_MspPostInit+0x290>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d11f      	bne.n	80065e0 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065a0:	4b4a      	ldr	r3, [pc, #296]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 80065a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065a6:	4a49      	ldr	r2, [pc, #292]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 80065a8:	f043 0301 	orr.w	r3, r3, #1
 80065ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065b0:	4b46      	ldr	r3, [pc, #280]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 80065b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	61bb      	str	r3, [r7, #24]
 80065bc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 80065be:	2380      	movs	r3, #128	; 0x80
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065c2:	2302      	movs	r3, #2
 80065c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c6:	2300      	movs	r3, #0
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ca:	2300      	movs	r3, #0
 80065cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80065ce:	2309      	movs	r3, #9
 80065d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 80065d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80065d6:	4619      	mov	r1, r3
 80065d8:	483d      	ldr	r0, [pc, #244]	; (80066d0 <HAL_TIM_MspPostInit+0x27c>)
 80065da:	f005 fa17 	bl	800ba0c <HAL_GPIO_Init>
}
 80065de:	e06f      	b.n	80066c0 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a40      	ldr	r2, [pc, #256]	; (80066e8 <HAL_TIM_MspPostInit+0x294>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d11f      	bne.n	800662a <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80065ea:	4b38      	ldr	r3, [pc, #224]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 80065ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065f0:	4a36      	ldr	r2, [pc, #216]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 80065f2:	f043 0310 	orr.w	r3, r3, #16
 80065f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065fa:	4b34      	ldr	r3, [pc, #208]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 80065fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006600:	f003 0310 	and.w	r3, r3, #16
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006608:	2320      	movs	r3, #32
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800660c:	2302      	movs	r3, #2
 800660e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006610:	2300      	movs	r3, #0
 8006612:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006614:	2300      	movs	r3, #0
 8006616:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006618:	2304      	movs	r3, #4
 800661a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800661c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006620:	4619      	mov	r1, r3
 8006622:	4832      	ldr	r0, [pc, #200]	; (80066ec <HAL_TIM_MspPostInit+0x298>)
 8006624:	f005 f9f2 	bl	800ba0c <HAL_GPIO_Init>
}
 8006628:	e04a      	b.n	80066c0 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a30      	ldr	r2, [pc, #192]	; (80066f0 <HAL_TIM_MspPostInit+0x29c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d120      	bne.n	8006676 <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006634:	4b25      	ldr	r3, [pc, #148]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800663a:	4a24      	ldr	r2, [pc, #144]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 800663c:	f043 0302 	orr.w	r3, r3, #2
 8006640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006644:	4b21      	ldr	r3, [pc, #132]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8006652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006658:	2302      	movs	r3, #2
 800665a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665c:	2300      	movs	r3, #0
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006660:	2300      	movs	r3, #0
 8006662:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8006664:	2301      	movs	r3, #1
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8006668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800666c:	4619      	mov	r1, r3
 800666e:	481a      	ldr	r0, [pc, #104]	; (80066d8 <HAL_TIM_MspPostInit+0x284>)
 8006670:	f005 f9cc 	bl	800ba0c <HAL_GPIO_Init>
}
 8006674:	e024      	b.n	80066c0 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a1e      	ldr	r2, [pc, #120]	; (80066f4 <HAL_TIM_MspPostInit+0x2a0>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d11f      	bne.n	80066c0 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006680:	4b12      	ldr	r3, [pc, #72]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006686:	4a11      	ldr	r2, [pc, #68]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006688:	f043 0302 	orr.w	r3, r3, #2
 800668c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006690:	4b0e      	ldr	r3, [pc, #56]	; (80066cc <HAL_TIM_MspPostInit+0x278>)
 8006692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 800669e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a4:	2302      	movs	r3, #2
 80066a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ac:	2300      	movs	r3, #0
 80066ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80066b0:	2301      	movs	r3, #1
 80066b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 80066b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066b8:	4619      	mov	r1, r3
 80066ba:	4807      	ldr	r0, [pc, #28]	; (80066d8 <HAL_TIM_MspPostInit+0x284>)
 80066bc:	f005 f9a6 	bl	800ba0c <HAL_GPIO_Init>
}
 80066c0:	bf00      	nop
 80066c2:	3740      	adds	r7, #64	; 0x40
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	40010000 	.word	0x40010000
 80066cc:	58024400 	.word	0x58024400
 80066d0:	58020000 	.word	0x58020000
 80066d4:	40000400 	.word	0x40000400
 80066d8:	58020400 	.word	0x58020400
 80066dc:	40000c00 	.word	0x40000c00
 80066e0:	40001c00 	.word	0x40001c00
 80066e4:	40002000 	.word	0x40002000
 80066e8:	40014000 	.word	0x40014000
 80066ec:	58021000 	.word	0x58021000
 80066f0:	40014400 	.word	0x40014400
 80066f4:	40014800 	.word	0x40014800

080066f8 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80066fc:	4b24      	ldr	r3, [pc, #144]	; (8006790 <MX_UART5_Init+0x98>)
 80066fe:	4a25      	ldr	r2, [pc, #148]	; (8006794 <MX_UART5_Init+0x9c>)
 8006700:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8006702:	4b23      	ldr	r3, [pc, #140]	; (8006790 <MX_UART5_Init+0x98>)
 8006704:	4a24      	ldr	r2, [pc, #144]	; (8006798 <MX_UART5_Init+0xa0>)
 8006706:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006708:	4b21      	ldr	r3, [pc, #132]	; (8006790 <MX_UART5_Init+0x98>)
 800670a:	2200      	movs	r2, #0
 800670c:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800670e:	4b20      	ldr	r3, [pc, #128]	; (8006790 <MX_UART5_Init+0x98>)
 8006710:	2200      	movs	r2, #0
 8006712:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006714:	4b1e      	ldr	r3, [pc, #120]	; (8006790 <MX_UART5_Init+0x98>)
 8006716:	2200      	movs	r2, #0
 8006718:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800671a:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <MX_UART5_Init+0x98>)
 800671c:	220c      	movs	r2, #12
 800671e:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006720:	4b1b      	ldr	r3, [pc, #108]	; (8006790 <MX_UART5_Init+0x98>)
 8006722:	2200      	movs	r2, #0
 8006724:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006726:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <MX_UART5_Init+0x98>)
 8006728:	2200      	movs	r2, #0
 800672a:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800672c:	4b18      	ldr	r3, [pc, #96]	; (8006790 <MX_UART5_Init+0x98>)
 800672e:	2200      	movs	r2, #0
 8006730:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006732:	4b17      	ldr	r3, [pc, #92]	; (8006790 <MX_UART5_Init+0x98>)
 8006734:	2200      	movs	r2, #0
 8006736:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8006738:	4b15      	ldr	r3, [pc, #84]	; (8006790 <MX_UART5_Init+0x98>)
 800673a:	2208      	movs	r2, #8
 800673c:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800673e:	4b14      	ldr	r3, [pc, #80]	; (8006790 <MX_UART5_Init+0x98>)
 8006740:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006744:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006746:	4812      	ldr	r0, [pc, #72]	; (8006790 <MX_UART5_Init+0x98>)
 8006748:	f00c fb8e 	bl	8012e68 <HAL_UART_Init>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d001      	beq.n	8006756 <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 8006752:	f7fe fc21 	bl	8004f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006756:	2100      	movs	r1, #0
 8006758:	480d      	ldr	r0, [pc, #52]	; (8006790 <MX_UART5_Init+0x98>)
 800675a:	f00f f8da 	bl	8015912 <HAL_UARTEx_SetTxFifoThreshold>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 8006764:	f7fe fc18 	bl	8004f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006768:	2100      	movs	r1, #0
 800676a:	4809      	ldr	r0, [pc, #36]	; (8006790 <MX_UART5_Init+0x98>)
 800676c:	f00f f90f 	bl	801598e <HAL_UARTEx_SetRxFifoThreshold>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <MX_UART5_Init+0x82>
  {
    Error_Handler();
 8006776:	f7fe fc0f 	bl	8004f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800677a:	4805      	ldr	r0, [pc, #20]	; (8006790 <MX_UART5_Init+0x98>)
 800677c:	f00f f890 	bl	80158a0 <HAL_UARTEx_DisableFifoMode>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <MX_UART5_Init+0x92>
  {
    Error_Handler();
 8006786:	f7fe fc07 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800678a:	bf00      	nop
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	200011d4 	.word	0x200011d4
 8006794:	40005000 	.word	0x40005000
 8006798:	000f4240 	.word	0x000f4240

0800679c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80067a0:	4b22      	ldr	r3, [pc, #136]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067a2:	4a23      	ldr	r2, [pc, #140]	; (8006830 <MX_USART1_UART_Init+0x94>)
 80067a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 80067a6:	4b21      	ldr	r3, [pc, #132]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067a8:	4a22      	ldr	r2, [pc, #136]	; (8006834 <MX_USART1_UART_Init+0x98>)
 80067aa:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80067ac:	4b1f      	ldr	r3, [pc, #124]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80067b2:	4b1e      	ldr	r3, [pc, #120]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80067b8:	4b1c      	ldr	r3, [pc, #112]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80067be:	4b1b      	ldr	r3, [pc, #108]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067c0:	220c      	movs	r2, #12
 80067c2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067c4:	4b19      	ldr	r3, [pc, #100]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80067ca:	4b18      	ldr	r3, [pc, #96]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067d0:	4b16      	ldr	r3, [pc, #88]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067d8:	2200      	movs	r2, #0
 80067da:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067dc:	4b13      	ldr	r3, [pc, #76]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067de:	2200      	movs	r2, #0
 80067e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80067e2:	4812      	ldr	r0, [pc, #72]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067e4:	f00c fb40 	bl	8012e68 <HAL_UART_Init>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80067ee:	f7fe fbd3 	bl	8004f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80067f2:	2100      	movs	r1, #0
 80067f4:	480d      	ldr	r0, [pc, #52]	; (800682c <MX_USART1_UART_Init+0x90>)
 80067f6:	f00f f88c 	bl	8015912 <HAL_UARTEx_SetTxFifoThreshold>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8006800:	f7fe fbca 	bl	8004f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006804:	2100      	movs	r1, #0
 8006806:	4809      	ldr	r0, [pc, #36]	; (800682c <MX_USART1_UART_Init+0x90>)
 8006808:	f00f f8c1 	bl	801598e <HAL_UARTEx_SetRxFifoThreshold>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8006812:	f7fe fbc1 	bl	8004f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006816:	4805      	ldr	r0, [pc, #20]	; (800682c <MX_USART1_UART_Init+0x90>)
 8006818:	f00f f842 	bl	80158a0 <HAL_UARTEx_DisableFifoMode>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8006822:	f7fe fbb9 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006826:	bf00      	nop
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20001264 	.word	0x20001264
 8006830:	40011000 	.word	0x40011000
 8006834:	001e8480 	.word	0x001e8480

08006838 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800683c:	4b22      	ldr	r3, [pc, #136]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 800683e:	4a23      	ldr	r2, [pc, #140]	; (80068cc <MX_USART3_UART_Init+0x94>)
 8006840:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006842:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 8006844:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006848:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800684a:	4b1f      	ldr	r3, [pc, #124]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 800684c:	2200      	movs	r2, #0
 800684e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006850:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 8006852:	2200      	movs	r2, #0
 8006854:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006856:	4b1c      	ldr	r3, [pc, #112]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 8006858:	2200      	movs	r2, #0
 800685a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800685c:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 800685e:	220c      	movs	r2, #12
 8006860:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006862:	4b19      	ldr	r3, [pc, #100]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 8006864:	2200      	movs	r2, #0
 8006866:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006868:	4b17      	ldr	r3, [pc, #92]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 800686a:	2200      	movs	r2, #0
 800686c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800686e:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 8006870:	2200      	movs	r2, #0
 8006872:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006874:	4b14      	ldr	r3, [pc, #80]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 8006876:	2200      	movs	r2, #0
 8006878:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800687a:	4b13      	ldr	r3, [pc, #76]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 800687c:	2200      	movs	r2, #0
 800687e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006880:	4811      	ldr	r0, [pc, #68]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 8006882:	f00c faf1 	bl	8012e68 <HAL_UART_Init>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800688c:	f7fe fb84 	bl	8004f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006890:	2100      	movs	r1, #0
 8006892:	480d      	ldr	r0, [pc, #52]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 8006894:	f00f f83d 	bl	8015912 <HAL_UARTEx_SetTxFifoThreshold>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800689e:	f7fe fb7b 	bl	8004f98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80068a2:	2100      	movs	r1, #0
 80068a4:	4808      	ldr	r0, [pc, #32]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 80068a6:	f00f f872 	bl	801598e <HAL_UARTEx_SetRxFifoThreshold>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80068b0:	f7fe fb72 	bl	8004f98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80068b4:	4804      	ldr	r0, [pc, #16]	; (80068c8 <MX_USART3_UART_Init+0x90>)
 80068b6:	f00e fff3 	bl	80158a0 <HAL_UARTEx_DisableFifoMode>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80068c0:	f7fe fb6a 	bl	8004f98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80068c4:	bf00      	nop
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	200012f4 	.word	0x200012f4
 80068cc:	40004800 	.word	0x40004800

080068d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b08e      	sub	sp, #56	; 0x38
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	609a      	str	r2, [r3, #8]
 80068e4:	60da      	str	r2, [r3, #12]
 80068e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a86      	ldr	r2, [pc, #536]	; (8006b08 <HAL_UART_MspInit+0x238>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	f040 8094 	bne.w	8006a1c <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80068f4:	4b85      	ldr	r3, [pc, #532]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 80068f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068fa:	4a84      	ldr	r2, [pc, #528]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 80068fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006900:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006904:	4b81      	ldr	r3, [pc, #516]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800690a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800690e:	623b      	str	r3, [r7, #32]
 8006910:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006912:	4b7e      	ldr	r3, [pc, #504]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006918:	4a7c      	ldr	r2, [pc, #496]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 800691a:	f043 0302 	orr.w	r3, r3, #2
 800691e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006922:	4b7a      	ldr	r3, [pc, #488]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	61fb      	str	r3, [r7, #28]
 800692e:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006930:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006936:	2302      	movs	r3, #2
 8006938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800693a:	2300      	movs	r3, #0
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800693e:	2300      	movs	r3, #0
 8006940:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8006942:	230e      	movs	r3, #14
 8006944:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800694a:	4619      	mov	r1, r3
 800694c:	4870      	ldr	r0, [pc, #448]	; (8006b10 <HAL_UART_MspInit+0x240>)
 800694e:	f005 f85d 	bl	800ba0c <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006952:	4b70      	ldr	r3, [pc, #448]	; (8006b14 <HAL_UART_MspInit+0x244>)
 8006954:	4a70      	ldr	r2, [pc, #448]	; (8006b18 <HAL_UART_MspInit+0x248>)
 8006956:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8006958:	4b6e      	ldr	r3, [pc, #440]	; (8006b14 <HAL_UART_MspInit+0x244>)
 800695a:	2241      	movs	r2, #65	; 0x41
 800695c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800695e:	4b6d      	ldr	r3, [pc, #436]	; (8006b14 <HAL_UART_MspInit+0x244>)
 8006960:	2200      	movs	r2, #0
 8006962:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006964:	4b6b      	ldr	r3, [pc, #428]	; (8006b14 <HAL_UART_MspInit+0x244>)
 8006966:	2200      	movs	r2, #0
 8006968:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800696a:	4b6a      	ldr	r3, [pc, #424]	; (8006b14 <HAL_UART_MspInit+0x244>)
 800696c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006970:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006972:	4b68      	ldr	r3, [pc, #416]	; (8006b14 <HAL_UART_MspInit+0x244>)
 8006974:	2200      	movs	r2, #0
 8006976:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006978:	4b66      	ldr	r3, [pc, #408]	; (8006b14 <HAL_UART_MspInit+0x244>)
 800697a:	2200      	movs	r2, #0
 800697c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800697e:	4b65      	ldr	r3, [pc, #404]	; (8006b14 <HAL_UART_MspInit+0x244>)
 8006980:	2200      	movs	r2, #0
 8006982:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006984:	4b63      	ldr	r3, [pc, #396]	; (8006b14 <HAL_UART_MspInit+0x244>)
 8006986:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800698a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800698c:	4b61      	ldr	r3, [pc, #388]	; (8006b14 <HAL_UART_MspInit+0x244>)
 800698e:	2200      	movs	r2, #0
 8006990:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006992:	4860      	ldr	r0, [pc, #384]	; (8006b14 <HAL_UART_MspInit+0x244>)
 8006994:	f002 fe08 	bl	80095a8 <HAL_DMA_Init>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800699e:	f7fe fafb 	bl	8004f98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a5b      	ldr	r2, [pc, #364]	; (8006b14 <HAL_UART_MspInit+0x244>)
 80069a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80069a8:	4a5a      	ldr	r2, [pc, #360]	; (8006b14 <HAL_UART_MspInit+0x244>)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 80069ae:	4b5b      	ldr	r3, [pc, #364]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069b0:	4a5b      	ldr	r2, [pc, #364]	; (8006b20 <HAL_UART_MspInit+0x250>)
 80069b2:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 80069b4:	4b59      	ldr	r3, [pc, #356]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069b6:	2242      	movs	r2, #66	; 0x42
 80069b8:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069ba:	4b58      	ldr	r3, [pc, #352]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069bc:	2240      	movs	r2, #64	; 0x40
 80069be:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069c0:	4b56      	ldr	r3, [pc, #344]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069c6:	4b55      	ldr	r3, [pc, #340]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069cc:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80069ce:	4b53      	ldr	r3, [pc, #332]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80069d4:	4b51      	ldr	r3, [pc, #324]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80069da:	4b50      	ldr	r3, [pc, #320]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069dc:	2200      	movs	r2, #0
 80069de:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80069e0:	4b4e      	ldr	r3, [pc, #312]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069e6:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069e8:	4b4c      	ldr	r3, [pc, #304]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80069ee:	484b      	ldr	r0, [pc, #300]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 80069f0:	f002 fdda 	bl	80095a8 <HAL_DMA_Init>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80069fa:	f7fe facd 	bl	8004f98 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a46      	ldr	r2, [pc, #280]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 8006a02:	679a      	str	r2, [r3, #120]	; 0x78
 8006a04:	4a45      	ldr	r2, [pc, #276]	; (8006b1c <HAL_UART_MspInit+0x24c>)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	2035      	movs	r0, #53	; 0x35
 8006a10:	f002 fb97 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006a14:	2035      	movs	r0, #53	; 0x35
 8006a16:	f002 fbae 	bl	8009176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006a1a:	e070      	b.n	8006afe <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a40      	ldr	r2, [pc, #256]	; (8006b24 <HAL_UART_MspInit+0x254>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d12f      	bne.n	8006a86 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a26:	4b39      	ldr	r3, [pc, #228]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a2c:	4a37      	ldr	r2, [pc, #220]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006a2e:	f043 0310 	orr.w	r3, r3, #16
 8006a32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006a36:	4b35      	ldr	r3, [pc, #212]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006a38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a3c:	f003 0310 	and.w	r3, r3, #16
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a44:	4b31      	ldr	r3, [pc, #196]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a4a:	4a30      	ldr	r2, [pc, #192]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006a4c:	f043 0302 	orr.w	r3, r3, #2
 8006a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a54:	4b2d      	ldr	r3, [pc, #180]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006a62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a68:	2302      	movs	r3, #2
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a70:	2300      	movs	r3, #0
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8006a74:	2304      	movs	r3, #4
 8006a76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4824      	ldr	r0, [pc, #144]	; (8006b10 <HAL_UART_MspInit+0x240>)
 8006a80:	f004 ffc4 	bl	800ba0c <HAL_GPIO_Init>
}
 8006a84:	e03b      	b.n	8006afe <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a27      	ldr	r2, [pc, #156]	; (8006b28 <HAL_UART_MspInit+0x258>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d136      	bne.n	8006afe <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006a90:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006a92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a96:	4a1d      	ldr	r2, [pc, #116]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a9c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006aa0:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006aa2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006aae:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ab4:	4a15      	ldr	r2, [pc, #84]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006ab6:	f043 0308 	orr.w	r3, r3, #8
 8006aba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006abe:	4b13      	ldr	r3, [pc, #76]	; (8006b0c <HAL_UART_MspInit+0x23c>)
 8006ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006acc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ada:	2300      	movs	r3, #0
 8006adc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006ade:	2307      	movs	r3, #7
 8006ae0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	4810      	ldr	r0, [pc, #64]	; (8006b2c <HAL_UART_MspInit+0x25c>)
 8006aea:	f004 ff8f 	bl	800ba0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006aee:	2200      	movs	r2, #0
 8006af0:	2100      	movs	r1, #0
 8006af2:	2027      	movs	r0, #39	; 0x27
 8006af4:	f002 fb25 	bl	8009142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006af8:	2027      	movs	r0, #39	; 0x27
 8006afa:	f002 fb3c 	bl	8009176 <HAL_NVIC_EnableIRQ>
}
 8006afe:	bf00      	nop
 8006b00:	3738      	adds	r7, #56	; 0x38
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40005000 	.word	0x40005000
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	58020400 	.word	0x58020400
 8006b14:	20001384 	.word	0x20001384
 8006b18:	40020010 	.word	0x40020010
 8006b1c:	200013fc 	.word	0x200013fc
 8006b20:	40020028 	.word	0x40020028
 8006b24:	40011000 	.word	0x40011000
 8006b28:	40004800 	.word	0x40004800
 8006b2c:	58020c00 	.word	0x58020c00

08006b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b68 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006b34:	f7fe fc2e 	bl	8005394 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006b38:	480c      	ldr	r0, [pc, #48]	; (8006b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006b3a:	490d      	ldr	r1, [pc, #52]	; (8006b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006b3c:	4a0d      	ldr	r2, [pc, #52]	; (8006b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b40:	e002      	b.n	8006b48 <LoopCopyDataInit>

08006b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b46:	3304      	adds	r3, #4

08006b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b4c:	d3f9      	bcc.n	8006b42 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b4e:	4a0a      	ldr	r2, [pc, #40]	; (8006b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006b50:	4c0a      	ldr	r4, [pc, #40]	; (8006b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b54:	e001      	b.n	8006b5a <LoopFillZerobss>

08006b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b58:	3204      	adds	r2, #4

08006b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b5c:	d3fb      	bcc.n	8006b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b5e:	f00e ffa9 	bl	8015ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b62:	f7fc f851 	bl	8002c08 <main>
  bx  lr
 8006b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006b70:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8006b74:	08016e78 	.word	0x08016e78
  ldr r2, =_sbss
 8006b78:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8006b7c:	20001478 	.word	0x20001478

08006b80 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006b80:	e7fe      	b.n	8006b80 <ADC_IRQHandler>
	...

08006b84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b8a:	2003      	movs	r0, #3
 8006b8c:	f002 face 	bl	800912c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006b90:	f007 fa88 	bl	800e0a4 <HAL_RCC_GetSysClockFreq>
 8006b94:	4602      	mov	r2, r0
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <HAL_Init+0x68>)
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	4913      	ldr	r1, [pc, #76]	; (8006bf0 <HAL_Init+0x6c>)
 8006ba2:	5ccb      	ldrb	r3, [r1, r3]
 8006ba4:	f003 031f 	and.w	r3, r3, #31
 8006ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bae:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <HAL_Init+0x68>)
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	4a0e      	ldr	r2, [pc, #56]	; (8006bf0 <HAL_Init+0x6c>)
 8006bb8:	5cd3      	ldrb	r3, [r2, r3]
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc4:	4a0b      	ldr	r2, [pc, #44]	; (8006bf4 <HAL_Init+0x70>)
 8006bc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bc8:	4a0b      	ldr	r2, [pc, #44]	; (8006bf8 <HAL_Init+0x74>)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006bce:	2000      	movs	r0, #0
 8006bd0:	f000 f814 	bl	8006bfc <HAL_InitTick>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e002      	b.n	8006be4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006bde:	f7fe fb45 	bl	800526c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	08016be0 	.word	0x08016be0
 8006bf4:	20000024 	.word	0x20000024
 8006bf8:	20000020 	.word	0x20000020

08006bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006c04:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <HAL_InitTick+0x60>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e021      	b.n	8006c54 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006c10:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <HAL_InitTick+0x64>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <HAL_InitTick+0x60>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	4619      	mov	r1, r3
 8006c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c26:	4618      	mov	r0, r3
 8006c28:	f002 fab3 	bl	8009192 <HAL_SYSTICK_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e00e      	b.n	8006c54 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2b0f      	cmp	r3, #15
 8006c3a:	d80a      	bhi.n	8006c52 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	6879      	ldr	r1, [r7, #4]
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	f002 fa7d 	bl	8009142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006c48:	4a06      	ldr	r2, [pc, #24]	; (8006c64 <HAL_InitTick+0x68>)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e000      	b.n	8006c54 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	2000002c 	.word	0x2000002c
 8006c60:	20000020 	.word	0x20000020
 8006c64:	20000028 	.word	0x20000028

08006c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <HAL_IncTick+0x20>)
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	461a      	mov	r2, r3
 8006c72:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <HAL_IncTick+0x24>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4413      	add	r3, r2
 8006c78:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <HAL_IncTick+0x24>)
 8006c7a:	6013      	str	r3, [r2, #0]
}
 8006c7c:	bf00      	nop
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	2000002c 	.word	0x2000002c
 8006c8c:	20001474 	.word	0x20001474

08006c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  return uwTick;
 8006c94:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <HAL_GetTick+0x14>)
 8006c96:	681b      	ldr	r3, [r3, #0]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20001474 	.word	0x20001474

08006ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006cb0:	f7ff ffee 	bl	8006c90 <HAL_GetTick>
 8006cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc0:	d005      	beq.n	8006cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <HAL_Delay+0x44>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4413      	add	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006cce:	bf00      	nop
 8006cd0:	f7ff ffde 	bl	8006c90 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d8f7      	bhi.n	8006cd0 <HAL_Delay+0x28>
  {
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	3710      	adds	r7, #16
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	2000002c 	.word	0x2000002c

08006cf0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	431a      	orrs	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	609a      	str	r2, [r3, #8]
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	609a      	str	r2, [r3, #8]
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
 8006d64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3360      	adds	r3, #96	; 0x60
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <LL_ADC_SetOffset+0x60>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d10b      	bne.n	8006d94 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006d92:	e00b      	b.n	8006dac <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	430b      	orrs	r3, r1
 8006da6:	431a      	orrs	r2, r3
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	601a      	str	r2, [r3, #0]
}
 8006dac:	bf00      	nop
 8006dae:	371c      	adds	r7, #28
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	58026000 	.word	0x58026000

08006dbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3360      	adds	r3, #96	; 0x60
 8006dca:	461a      	mov	r2, r3
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f003 031f 	and.w	r3, r3, #31
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	fa01 f303 	lsl.w	r3, r1, r3
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	611a      	str	r2, [r3, #16]
}
 8006e0e:	bf00      	nop
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
	...

08006e1c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00e      	beq.n	8006e4e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3360      	adds	r3, #96	; 0x60
 8006e34:	461a      	mov	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	601a      	str	r2, [r3, #0]
  }
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	58026000 	.word	0x58026000

08006e60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4a0c      	ldr	r2, [pc, #48]	; (8006ea0 <LL_ADC_SetOffsetSaturation+0x40>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d10e      	bne.n	8006e92 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3360      	adds	r3, #96	; 0x60
 8006e78:	461a      	mov	r2, r3
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4413      	add	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	431a      	orrs	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	58026000 	.word	0x58026000

08006ea4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	4a0c      	ldr	r2, [pc, #48]	; (8006ee4 <LL_ADC_SetOffsetSign+0x40>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d10e      	bne.n	8006ed6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	3360      	adds	r3, #96	; 0x60
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	4413      	add	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	431a      	orrs	r2, r3
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	371c      	adds	r7, #28
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	58026000 	.word	0x58026000

08006ee8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3360      	adds	r3, #96	; 0x60
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	4413      	add	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4a0c      	ldr	r2, [pc, #48]	; (8006f38 <LL_ADC_SetOffsetState+0x50>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d108      	bne.n	8006f1c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	431a      	orrs	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8006f1a:	e007      	b.n	8006f2c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	601a      	str	r2, [r3, #0]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	58026000 	.word	0x58026000

08006f3c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006f54:	2300      	movs	r3, #0
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b087      	sub	sp, #28
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3330      	adds	r3, #48	; 0x30
 8006f72:	461a      	mov	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	f003 030c 	and.w	r3, r3, #12
 8006f7e:	4413      	add	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	f003 031f 	and.w	r3, r3, #31
 8006f8c:	211f      	movs	r1, #31
 8006f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f92:	43db      	mvns	r3, r3
 8006f94:	401a      	ands	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	0e9b      	lsrs	r3, r3, #26
 8006f9a:	f003 011f 	and.w	r1, r3, #31
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f003 031f 	and.w	r3, r3, #31
 8006fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006fae:	bf00      	nop
 8006fb0:	371c      	adds	r7, #28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d101      	bne.n	8006fd2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e000      	b.n	8006fd4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3314      	adds	r3, #20
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	0e5b      	lsrs	r3, r3, #25
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	4413      	add	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	0d1b      	lsrs	r3, r3, #20
 8007008:	f003 031f 	and.w	r3, r3, #31
 800700c:	2107      	movs	r1, #7
 800700e:	fa01 f303 	lsl.w	r3, r1, r3
 8007012:	43db      	mvns	r3, r3
 8007014:	401a      	ands	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	0d1b      	lsrs	r3, r3, #20
 800701a:	f003 031f 	and.w	r3, r3, #31
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	fa01 f303 	lsl.w	r3, r1, r3
 8007024:	431a      	orrs	r2, r3
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800702a:	bf00      	nop
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
	...

08007038 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a1a      	ldr	r2, [pc, #104]	; (80070b0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d115      	bne.n	8007078 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007058:	43db      	mvns	r3, r3
 800705a:	401a      	ands	r2, r3
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f003 0318 	and.w	r3, r3, #24
 8007062:	4914      	ldr	r1, [pc, #80]	; (80070b4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007064:	40d9      	lsrs	r1, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	400b      	ands	r3, r1
 800706a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800706e:	431a      	orrs	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8007076:	e014      	b.n	80070a2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007084:	43db      	mvns	r3, r3
 8007086:	401a      	ands	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f003 0318 	and.w	r3, r3, #24
 800708e:	4909      	ldr	r1, [pc, #36]	; (80070b4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007090:	40d9      	lsrs	r1, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	400b      	ands	r3, r1
 8007096:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800709a:	431a      	orrs	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80070a2:	bf00      	nop
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	58026000 	.word	0x58026000
 80070b4:	000fffff 	.word	0x000fffff

080070b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 031f 	and.w	r3, r3, #31
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <LL_ADC_DisableDeepPowerDown+0x20>)
 80070fe:	4013      	ands	r3, r2
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6093      	str	r3, [r2, #8]
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	5fffffc0 	.word	0x5fffffc0

08007114 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007124:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007128:	d101      	bne.n	800712e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800712a:	2301      	movs	r3, #1
 800712c:	e000      	b.n	8007130 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <LL_ADC_EnableInternalRegulator+0x24>)
 800714a:	4013      	ands	r3, r2
 800714c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr
 8007160:	6fffffc0 	.word	0x6fffffc0

08007164 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007178:	d101      	bne.n	800717e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	4b05      	ldr	r3, [pc, #20]	; (80071b0 <LL_ADC_Enable+0x24>)
 800719a:	4013      	ands	r3, r2
 800719c:	f043 0201 	orr.w	r2, r3, #1
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	7fffffc0 	.word	0x7fffffc0

080071b4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	4b05      	ldr	r3, [pc, #20]	; (80071d8 <LL_ADC_Disable+0x24>)
 80071c2:	4013      	ands	r3, r2
 80071c4:	f043 0202 	orr.w	r2, r3, #2
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	7fffffc0 	.word	0x7fffffc0

080071dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <LL_ADC_IsEnabled+0x18>
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <LL_ADC_IsEnabled+0x1a>
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b02      	cmp	r3, #2
 8007214:	d101      	bne.n	800721a <LL_ADC_IsDisableOngoing+0x18>
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <LL_ADC_IsDisableOngoing+0x1a>
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <LL_ADC_REG_StartConversion+0x24>)
 8007236:	4013      	ands	r3, r2
 8007238:	f043 0204 	orr.w	r2, r3, #4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	7fffffc0 	.word	0x7fffffc0

08007250 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b04      	cmp	r3, #4
 8007262:	d101      	bne.n	8007268 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007264:	2301      	movs	r3, #1
 8007266:	e000      	b.n	800726a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b08      	cmp	r3, #8
 8007288:	d101      	bne.n	800728e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800729c:	b590      	push	{r4, r7, lr}
 800729e:	b089      	sub	sp, #36	; 0x24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e1ee      	b.n	8007694 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7f9 fce7 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7ff ff19 	bl	8007114 <LL_ADC_IsDeepPowerDownEnabled>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d004      	beq.n	80072f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7ff feff 	bl	80070f0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff ff34 	bl	8007164 <LL_ADC_IsInternalRegulatorEnabled>
 80072fc:	4603      	mov	r3, r0
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d114      	bne.n	800732c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff ff18 	bl	800713c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800730c:	4b8e      	ldr	r3, [pc, #568]	; (8007548 <HAL_ADC_Init+0x2ac>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	099b      	lsrs	r3, r3, #6
 8007312:	4a8e      	ldr	r2, [pc, #568]	; (800754c <HAL_ADC_Init+0x2b0>)
 8007314:	fba2 2303 	umull	r2, r3, r2, r3
 8007318:	099b      	lsrs	r3, r3, #6
 800731a:	3301      	adds	r3, #1
 800731c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800731e:	e002      	b.n	8007326 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	3b01      	subs	r3, #1
 8007324:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1f9      	bne.n	8007320 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff ff17 	bl	8007164 <LL_ADC_IsInternalRegulatorEnabled>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10d      	bne.n	8007358 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007340:	f043 0210 	orr.w	r2, r3, #16
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800734c:	f043 0201 	orr.w	r2, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4618      	mov	r0, r3
 800735e:	f7ff ff77 	bl	8007250 <LL_ADC_REG_IsConversionOngoing>
 8007362:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007368:	f003 0310 	and.w	r3, r3, #16
 800736c:	2b00      	cmp	r3, #0
 800736e:	f040 8188 	bne.w	8007682 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 8184 	bne.w	8007682 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007382:	f043 0202 	orr.w	r2, r3, #2
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff ff24 	bl	80071dc <LL_ADC_IsEnabled>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d136      	bne.n	8007408 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a6c      	ldr	r2, [pc, #432]	; (8007550 <HAL_ADC_Init+0x2b4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_ADC_Init+0x112>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a6a      	ldr	r2, [pc, #424]	; (8007554 <HAL_ADC_Init+0x2b8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d10e      	bne.n	80073cc <HAL_ADC_Init+0x130>
 80073ae:	4868      	ldr	r0, [pc, #416]	; (8007550 <HAL_ADC_Init+0x2b4>)
 80073b0:	f7ff ff14 	bl	80071dc <LL_ADC_IsEnabled>
 80073b4:	4604      	mov	r4, r0
 80073b6:	4867      	ldr	r0, [pc, #412]	; (8007554 <HAL_ADC_Init+0x2b8>)
 80073b8:	f7ff ff10 	bl	80071dc <LL_ADC_IsEnabled>
 80073bc:	4603      	mov	r3, r0
 80073be:	4323      	orrs	r3, r4
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	bf0c      	ite	eq
 80073c4:	2301      	moveq	r3, #1
 80073c6:	2300      	movne	r3, #0
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	e008      	b.n	80073de <HAL_ADC_Init+0x142>
 80073cc:	4862      	ldr	r0, [pc, #392]	; (8007558 <HAL_ADC_Init+0x2bc>)
 80073ce:	f7ff ff05 	bl	80071dc <LL_ADC_IsEnabled>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bf0c      	ite	eq
 80073d8:	2301      	moveq	r3, #1
 80073da:	2300      	movne	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d012      	beq.n	8007408 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a5a      	ldr	r2, [pc, #360]	; (8007550 <HAL_ADC_Init+0x2b4>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d004      	beq.n	80073f6 <HAL_ADC_Init+0x15a>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a58      	ldr	r2, [pc, #352]	; (8007554 <HAL_ADC_Init+0x2b8>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d101      	bne.n	80073fa <HAL_ADC_Init+0x15e>
 80073f6:	4a59      	ldr	r2, [pc, #356]	; (800755c <HAL_ADC_Init+0x2c0>)
 80073f8:	e000      	b.n	80073fc <HAL_ADC_Init+0x160>
 80073fa:	4a59      	ldr	r2, [pc, #356]	; (8007560 <HAL_ADC_Init+0x2c4>)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	4619      	mov	r1, r3
 8007402:	4610      	mov	r0, r2
 8007404:	f7ff fc74 	bl	8006cf0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a52      	ldr	r2, [pc, #328]	; (8007558 <HAL_ADC_Init+0x2bc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d129      	bne.n	8007466 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	7e5b      	ldrb	r3, [r3, #25]
 8007416:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800741c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007422:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d013      	beq.n	8007454 <HAL_ADC_Init+0x1b8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b0c      	cmp	r3, #12
 8007432:	d00d      	beq.n	8007450 <HAL_ADC_Init+0x1b4>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	2b1c      	cmp	r3, #28
 800743a:	d007      	beq.n	800744c <HAL_ADC_Init+0x1b0>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	2b18      	cmp	r3, #24
 8007442:	d101      	bne.n	8007448 <HAL_ADC_Init+0x1ac>
 8007444:	2318      	movs	r3, #24
 8007446:	e006      	b.n	8007456 <HAL_ADC_Init+0x1ba>
 8007448:	2300      	movs	r3, #0
 800744a:	e004      	b.n	8007456 <HAL_ADC_Init+0x1ba>
 800744c:	2310      	movs	r3, #16
 800744e:	e002      	b.n	8007456 <HAL_ADC_Init+0x1ba>
 8007450:	2308      	movs	r3, #8
 8007452:	e000      	b.n	8007456 <HAL_ADC_Init+0x1ba>
 8007454:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007456:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800745e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007460:	4313      	orrs	r3, r2
 8007462:	61bb      	str	r3, [r7, #24]
 8007464:	e00e      	b.n	8007484 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	7e5b      	ldrb	r3, [r3, #25]
 800746a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007470:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007476:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800747e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007480:	4313      	orrs	r3, r2
 8007482:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d106      	bne.n	800749c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	3b01      	subs	r3, #1
 8007494:	045b      	lsls	r3, r3, #17
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	4313      	orrs	r3, r2
 800749a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d009      	beq.n	80074b8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a26      	ldr	r2, [pc, #152]	; (8007558 <HAL_ADC_Init+0x2bc>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d115      	bne.n	80074ee <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	4b26      	ldr	r3, [pc, #152]	; (8007564 <HAL_ADC_Init+0x2c8>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6812      	ldr	r2, [r2, #0]
 80074d0:	69b9      	ldr	r1, [r7, #24]
 80074d2:	430b      	orrs	r3, r1
 80074d4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	611a      	str	r2, [r3, #16]
 80074ec:	e009      	b.n	8007502 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	4b1c      	ldr	r3, [pc, #112]	; (8007568 <HAL_ADC_Init+0x2cc>)
 80074f6:	4013      	ands	r3, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	69b9      	ldr	r1, [r7, #24]
 80074fe:	430b      	orrs	r3, r1
 8007500:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fea2 	bl	8007250 <LL_ADC_REG_IsConversionOngoing>
 800750c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff feaf 	bl	8007276 <LL_ADC_INJ_IsConversionOngoing>
 8007518:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f040 808e 	bne.w	800763e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f040 808a 	bne.w	800763e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <HAL_ADC_Init+0x2bc>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d11b      	bne.n	800756c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7e1b      	ldrb	r3, [r3, #24]
 8007538:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007540:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007542:	4313      	orrs	r3, r2
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	e018      	b.n	800757a <HAL_ADC_Init+0x2de>
 8007548:	20000020 	.word	0x20000020
 800754c:	053e2d63 	.word	0x053e2d63
 8007550:	40022000 	.word	0x40022000
 8007554:	40022100 	.word	0x40022100
 8007558:	58026000 	.word	0x58026000
 800755c:	40022300 	.word	0x40022300
 8007560:	58026300 	.word	0x58026300
 8007564:	fff04007 	.word	0xfff04007
 8007568:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	7e1b      	ldrb	r3, [r3, #24]
 8007570:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8007576:	4313      	orrs	r3, r2
 8007578:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	4b46      	ldr	r3, [pc, #280]	; (800769c <HAL_ADC_Init+0x400>)
 8007582:	4013      	ands	r3, r2
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	6812      	ldr	r2, [r2, #0]
 8007588:	69b9      	ldr	r1, [r7, #24]
 800758a:	430b      	orrs	r3, r1
 800758c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007594:	2b01      	cmp	r3, #1
 8007596:	d137      	bne.n	8007608 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a3f      	ldr	r2, [pc, #252]	; (80076a0 <HAL_ADC_Init+0x404>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d116      	bne.n	80075d6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	4b3d      	ldr	r3, [pc, #244]	; (80076a4 <HAL_ADC_Init+0x408>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80075ba:	4311      	orrs	r1, r2
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075c0:	4311      	orrs	r1, r2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80075c6:	430a      	orrs	r2, r1
 80075c8:	431a      	orrs	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	611a      	str	r2, [r3, #16]
 80075d4:	e020      	b.n	8007618 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	4b32      	ldr	r3, [pc, #200]	; (80076a8 <HAL_ADC_Init+0x40c>)
 80075de:	4013      	ands	r3, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075e4:	3a01      	subs	r2, #1
 80075e6:	0411      	lsls	r1, r2, #16
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80075ec:	4311      	orrs	r1, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075f2:	4311      	orrs	r1, r2
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80075f8:	430a      	orrs	r2, r1
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f042 0201 	orr.w	r2, r2, #1
 8007604:	611a      	str	r2, [r3, #16]
 8007606:	e007      	b.n	8007618 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	691a      	ldr	r2, [r3, #16]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f022 0201 	bic.w	r2, r2, #1
 8007616:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1b      	ldr	r2, [pc, #108]	; (80076a0 <HAL_ADC_Init+0x404>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d002      	beq.n	800763e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 f9e9 	bl	8008a10 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d10c      	bne.n	8007660 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	f023 010f 	bic.w	r1, r3, #15
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	1e5a      	subs	r2, r3, #1
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
 800765e:	e007      	b.n	8007670 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 020f 	bic.w	r2, r2, #15
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	f043 0201 	orr.w	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	661a      	str	r2, [r3, #96]	; 0x60
 8007680:	e007      	b.n	8007692 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007686:	f043 0210 	orr.w	r2, r3, #16
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007692:	7ffb      	ldrb	r3, [r7, #31]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3724      	adds	r7, #36	; 0x24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd90      	pop	{r4, r7, pc}
 800769c:	ffffbffc 	.word	0xffffbffc
 80076a0:	58026000 	.word	0x58026000
 80076a4:	fc00f81f 	.word	0xfc00f81f
 80076a8:	fc00f81e 	.word	0xfc00f81e

080076ac <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a90      	ldr	r2, [pc, #576]	; (80078fc <HAL_ADC_Start_IT+0x250>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d004      	beq.n	80076c8 <HAL_ADC_Start_IT+0x1c>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a8f      	ldr	r2, [pc, #572]	; (8007900 <HAL_ADC_Start_IT+0x254>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d101      	bne.n	80076cc <HAL_ADC_Start_IT+0x20>
 80076c8:	4b8e      	ldr	r3, [pc, #568]	; (8007904 <HAL_ADC_Start_IT+0x258>)
 80076ca:	e000      	b.n	80076ce <HAL_ADC_Start_IT+0x22>
 80076cc:	4b8e      	ldr	r3, [pc, #568]	; (8007908 <HAL_ADC_Start_IT+0x25c>)
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fcf2 	bl	80070b8 <LL_ADC_GetMultimode>
 80076d4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff fdb8 	bl	8007250 <LL_ADC_REG_IsConversionOngoing>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f040 8119 	bne.w	800791a <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d101      	bne.n	80076f6 <HAL_ADC_Start_IT+0x4a>
 80076f2:	2302      	movs	r3, #2
 80076f4:	e116      	b.n	8007924 <HAL_ADC_Start_IT+0x278>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 f89c 	bl	800883c <ADC_Enable>
 8007704:	4603      	mov	r3, r0
 8007706:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007708:	7dfb      	ldrb	r3, [r7, #23]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f040 8100 	bne.w	8007910 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007714:	4b7d      	ldr	r3, [pc, #500]	; (800790c <HAL_ADC_Start_IT+0x260>)
 8007716:	4013      	ands	r3, r2
 8007718:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a76      	ldr	r2, [pc, #472]	; (8007900 <HAL_ADC_Start_IT+0x254>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d002      	beq.n	8007730 <HAL_ADC_Start_IT+0x84>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	e000      	b.n	8007732 <HAL_ADC_Start_IT+0x86>
 8007730:	4b72      	ldr	r3, [pc, #456]	; (80078fc <HAL_ADC_Start_IT+0x250>)
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	6812      	ldr	r2, [r2, #0]
 8007736:	4293      	cmp	r3, r2
 8007738:	d002      	beq.n	8007740 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d105      	bne.n	800774c <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007744:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d006      	beq.n	8007766 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800775c:	f023 0206 	bic.w	r2, r3, #6
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	665a      	str	r2, [r3, #100]	; 0x64
 8007764:	e002      	b.n	800776c <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	221c      	movs	r2, #28
 8007772:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 021c 	bic.w	r2, r2, #28
 800778a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	2b08      	cmp	r3, #8
 8007792:	d108      	bne.n	80077a6 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f042 0208 	orr.w	r2, r2, #8
 80077a2:	605a      	str	r2, [r3, #4]
          break;
 80077a4:	e008      	b.n	80077b8 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f042 0204 	orr.w	r2, r2, #4
 80077b4:	605a      	str	r2, [r3, #4]
          break;
 80077b6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d107      	bne.n	80077d0 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0210 	orr.w	r2, r2, #16
 80077ce:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a4a      	ldr	r2, [pc, #296]	; (8007900 <HAL_ADC_Start_IT+0x254>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d002      	beq.n	80077e0 <HAL_ADC_Start_IT+0x134>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	e000      	b.n	80077e2 <HAL_ADC_Start_IT+0x136>
 80077e0:	4b46      	ldr	r3, [pc, #280]	; (80078fc <HAL_ADC_Start_IT+0x250>)
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	6812      	ldr	r2, [r2, #0]
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d008      	beq.n	80077fc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b05      	cmp	r3, #5
 80077f4:	d002      	beq.n	80077fc <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	2b09      	cmp	r3, #9
 80077fa:	d13b      	bne.n	8007874 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007806:	2b00      	cmp	r3, #0
 8007808:	d02d      	beq.n	8007866 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800780e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007812:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	695b      	ldr	r3, [r3, #20]
 800781e:	2b08      	cmp	r3, #8
 8007820:	d110      	bne.n	8007844 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0220 	bic.w	r2, r2, #32
 8007830:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007840:	605a      	str	r2, [r3, #4]
              break;
 8007842:	e011      	b.n	8007868 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007852:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0220 	orr.w	r2, r2, #32
 8007862:	605a      	str	r2, [r3, #4]
              break;
 8007864:	e000      	b.n	8007868 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8007866:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4618      	mov	r0, r3
 800786e:	f7ff fcdb 	bl	8007228 <LL_ADC_REG_StartConversion>
 8007872:	e056      	b.n	8007922 <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007878:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <HAL_ADC_Start_IT+0x254>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d002      	beq.n	8007890 <HAL_ADC_Start_IT+0x1e4>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	e000      	b.n	8007892 <HAL_ADC_Start_IT+0x1e6>
 8007890:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <HAL_ADC_Start_IT+0x250>)
 8007892:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d03f      	beq.n	8007920 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d110      	bne.n	80078da <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f022 0220 	bic.w	r2, r2, #32
 80078c6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d6:	605a      	str	r2, [r3, #4]
              break;
 80078d8:	e023      	b.n	8007922 <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078e8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0220 	orr.w	r2, r2, #32
 80078f8:	605a      	str	r2, [r3, #4]
              break;
 80078fa:	e012      	b.n	8007922 <HAL_ADC_Start_IT+0x276>
 80078fc:	40022000 	.word	0x40022000
 8007900:	40022100 	.word	0x40022100
 8007904:	40022300 	.word	0x40022300
 8007908:	58026300 	.word	0x58026300
 800790c:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8007918:	e003      	b.n	8007922 <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800791a:	2302      	movs	r3, #2
 800791c:	75fb      	strb	r3, [r7, #23]
 800791e:	e000      	b.n	8007922 <HAL_ADC_Start_IT+0x276>
        }
 8007920:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800793a:	4618      	mov	r0, r3
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
	...

08007948 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08a      	sub	sp, #40	; 0x28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007950:	2300      	movs	r3, #0
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a87      	ldr	r2, [pc, #540]	; (8007b88 <HAL_ADC_IRQHandler+0x240>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d004      	beq.n	8007978 <HAL_ADC_IRQHandler+0x30>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a86      	ldr	r2, [pc, #536]	; (8007b8c <HAL_ADC_IRQHandler+0x244>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d101      	bne.n	800797c <HAL_ADC_IRQHandler+0x34>
 8007978:	4b85      	ldr	r3, [pc, #532]	; (8007b90 <HAL_ADC_IRQHandler+0x248>)
 800797a:	e000      	b.n	800797e <HAL_ADC_IRQHandler+0x36>
 800797c:	4b85      	ldr	r3, [pc, #532]	; (8007b94 <HAL_ADC_IRQHandler+0x24c>)
 800797e:	4618      	mov	r0, r3
 8007980:	f7ff fb9a 	bl	80070b8 <LL_ADC_GetMultimode>
 8007984:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	f003 0302 	and.w	r3, r3, #2
 800798c:	2b00      	cmp	r3, #0
 800798e:	d017      	beq.n	80079c0 <HAL_ADC_IRQHandler+0x78>
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d012      	beq.n	80079c0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800799e:	f003 0310 	and.w	r3, r3, #16
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d105      	bne.n	80079b2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079aa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f001 f9fe 	bl	8008db4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2202      	movs	r2, #2
 80079be:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f003 0304 	and.w	r3, r3, #4
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d004      	beq.n	80079d4 <HAL_ADC_IRQHandler+0x8c>
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 8083 	beq.w	8007ae6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d07d      	beq.n	8007ae6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d105      	bne.n	8007a02 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fa98 	bl	8006f3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d062      	beq.n	8007ad8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a5d      	ldr	r2, [pc, #372]	; (8007b8c <HAL_ADC_IRQHandler+0x244>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d002      	beq.n	8007a22 <HAL_ADC_IRQHandler+0xda>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	e000      	b.n	8007a24 <HAL_ADC_IRQHandler+0xdc>
 8007a22:	4b59      	ldr	r3, [pc, #356]	; (8007b88 <HAL_ADC_IRQHandler+0x240>)
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6812      	ldr	r2, [r2, #0]
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d008      	beq.n	8007a3e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d005      	beq.n	8007a3e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	2b05      	cmp	r3, #5
 8007a36:	d002      	beq.n	8007a3e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b09      	cmp	r3, #9
 8007a3c:	d104      	bne.n	8007a48 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	623b      	str	r3, [r7, #32]
 8007a46:	e00c      	b.n	8007a62 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a4f      	ldr	r2, [pc, #316]	; (8007b8c <HAL_ADC_IRQHandler+0x244>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d002      	beq.n	8007a58 <HAL_ADC_IRQHandler+0x110>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	e000      	b.n	8007a5a <HAL_ADC_IRQHandler+0x112>
 8007a58:	4b4b      	ldr	r3, [pc, #300]	; (8007b88 <HAL_ADC_IRQHandler+0x240>)
 8007a5a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d135      	bne.n	8007ad8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0308 	and.w	r3, r3, #8
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	d12e      	bne.n	8007ad8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fbe6 	bl	8007250 <LL_ADC_REG_IsConversionOngoing>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d11a      	bne.n	8007ac0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 020c 	bic.w	r2, r2, #12
 8007a98:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d112      	bne.n	8007ad8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab6:	f043 0201 	orr.w	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	661a      	str	r2, [r3, #96]	; 0x60
 8007abe:	e00b      	b.n	8007ad8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ac4:	f043 0210 	orr.w	r2, r3, #16
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad0:	f043 0201 	orr.w	r2, r3, #1
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f7fb fccf 	bl	800347c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	220c      	movs	r2, #12
 8007ae4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d004      	beq.n	8007afa <HAL_ADC_IRQHandler+0x1b2>
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d10b      	bne.n	8007b12 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 80a0 	beq.w	8007c46 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 809a 	beq.w	8007c46 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b16:	f003 0310 	and.w	r3, r3, #16
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d105      	bne.n	8007b2a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b22:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff fa43 	bl	8006fba <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007b34:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff f9fe 	bl	8006f3c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007b40:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a11      	ldr	r2, [pc, #68]	; (8007b8c <HAL_ADC_IRQHandler+0x244>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d002      	beq.n	8007b52 <HAL_ADC_IRQHandler+0x20a>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	e000      	b.n	8007b54 <HAL_ADC_IRQHandler+0x20c>
 8007b52:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <HAL_ADC_IRQHandler+0x240>)
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	6812      	ldr	r2, [r2, #0]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d008      	beq.n	8007b6e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b06      	cmp	r3, #6
 8007b66:	d002      	beq.n	8007b6e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b07      	cmp	r3, #7
 8007b6c:	d104      	bne.n	8007b78 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	623b      	str	r3, [r7, #32]
 8007b76:	e014      	b.n	8007ba2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a03      	ldr	r2, [pc, #12]	; (8007b8c <HAL_ADC_IRQHandler+0x244>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00a      	beq.n	8007b98 <HAL_ADC_IRQHandler+0x250>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	e008      	b.n	8007b9a <HAL_ADC_IRQHandler+0x252>
 8007b88:	40022000 	.word	0x40022000
 8007b8c:	40022100 	.word	0x40022100
 8007b90:	40022300 	.word	0x40022300
 8007b94:	58026300 	.word	0x58026300
 8007b98:	4b84      	ldr	r3, [pc, #528]	; (8007dac <HAL_ADC_IRQHandler+0x464>)
 8007b9a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d047      	beq.n	8007c38 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d007      	beq.n	8007bc2 <HAL_ADC_IRQHandler+0x27a>
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d03f      	beq.n	8007c38 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d13a      	bne.n	8007c38 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bcc:	2b40      	cmp	r3, #64	; 0x40
 8007bce:	d133      	bne.n	8007c38 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d12e      	bne.n	8007c38 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7ff fb49 	bl	8007276 <LL_ADC_INJ_IsConversionOngoing>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d11a      	bne.n	8007c20 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007bf8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d112      	bne.n	8007c38 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c16:	f043 0201 	orr.w	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	661a      	str	r2, [r3, #96]	; 0x60
 8007c1e:	e00b      	b.n	8007c38 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c24:	f043 0210 	orr.w	r2, r3, #16
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c30:	f043 0201 	orr.w	r2, r3, #1
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 f893 	bl	8008d64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2260      	movs	r2, #96	; 0x60
 8007c44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d011      	beq.n	8007c74 <HAL_ADC_IRQHandler+0x32c>
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00c      	beq.n	8007c74 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f8a8 	bl	8007dbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2280      	movs	r2, #128	; 0x80
 8007c72:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d012      	beq.n	8007ca4 <HAL_ADC_IRQHandler+0x35c>
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00d      	beq.n	8007ca4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 f879 	bl	8008d8c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ca2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d012      	beq.n	8007cd4 <HAL_ADC_IRQHandler+0x38c>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00d      	beq.n	8007cd4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cbc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f001 f86b 	bl	8008da0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f003 0310 	and.w	r3, r3, #16
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d043      	beq.n	8007d66 <HAL_ADC_IRQHandler+0x41e>
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f003 0310 	and.w	r3, r3, #16
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d03e      	beq.n	8007d66 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d102      	bne.n	8007cf6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8007cf4:	e021      	b.n	8007d3a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d015      	beq.n	8007d28 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a2a      	ldr	r2, [pc, #168]	; (8007dac <HAL_ADC_IRQHandler+0x464>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d004      	beq.n	8007d10 <HAL_ADC_IRQHandler+0x3c8>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a29      	ldr	r2, [pc, #164]	; (8007db0 <HAL_ADC_IRQHandler+0x468>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d101      	bne.n	8007d14 <HAL_ADC_IRQHandler+0x3cc>
 8007d10:	4b28      	ldr	r3, [pc, #160]	; (8007db4 <HAL_ADC_IRQHandler+0x46c>)
 8007d12:	e000      	b.n	8007d16 <HAL_ADC_IRQHandler+0x3ce>
 8007d14:	4b28      	ldr	r3, [pc, #160]	; (8007db8 <HAL_ADC_IRQHandler+0x470>)
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7ff f9dc 	bl	80070d4 <LL_ADC_GetMultiDMATransfer>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00b      	beq.n	8007d3a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8007d22:	2301      	movs	r3, #1
 8007d24:	627b      	str	r3, [r7, #36]	; 0x24
 8007d26:	e008      	b.n	8007d3a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	f003 0303 	and.w	r3, r3, #3
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8007d36:	2301      	movs	r3, #1
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10e      	bne.n	8007d5e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d50:	f043 0202 	orr.w	r2, r3, #2
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 f839 	bl	8007dd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2210      	movs	r2, #16
 8007d64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d018      	beq.n	8007da2 <HAL_ADC_IRQHandler+0x45a>
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d013      	beq.n	8007da2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d8a:	f043 0208 	orr.w	r2, r3, #8
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d9a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 ffeb 	bl	8008d78 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007da2:	bf00      	nop
 8007da4:	3728      	adds	r7, #40	; 0x28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	40022000 	.word	0x40022000
 8007db0:	40022100 	.word	0x40022100
 8007db4:	40022300 	.word	0x40022300
 8007db8:	58026300 	.word	0x58026300

08007dbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007de4:	b590      	push	{r4, r7, lr}
 8007de6:	b0b9      	sub	sp, #228	; 0xe4
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dee:	2300      	movs	r3, #0
 8007df0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007df4:	2300      	movs	r3, #0
 8007df6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dfe:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	4aa9      	ldr	r2, [pc, #676]	; (80080ac <HAL_ADC_ConfigChannel+0x2c8>)
 8007e06:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d102      	bne.n	8007e18 <HAL_ADC_ConfigChannel+0x34>
 8007e12:	2302      	movs	r3, #2
 8007e14:	f000 bcfa 	b.w	800880c <HAL_ADC_ConfigChannel+0xa28>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff fa13 	bl	8007250 <LL_ADC_REG_IsConversionOngoing>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	f040 84de 	bne.w	80087ee <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a9e      	ldr	r2, [pc, #632]	; (80080b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d033      	beq.n	8007ea4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d108      	bne.n	8007e5a <HAL_ADC_ConfigChannel+0x76>
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	0e9b      	lsrs	r3, r3, #26
 8007e4e:	f003 031f 	and.w	r3, r3, #31
 8007e52:	2201      	movs	r2, #1
 8007e54:	fa02 f303 	lsl.w	r3, r2, r3
 8007e58:	e01d      	b.n	8007e96 <HAL_ADC_ConfigChannel+0xb2>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e66:	fa93 f3a3 	rbit	r3, r3
 8007e6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007e6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007e76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8007e7e:	2320      	movs	r3, #32
 8007e80:	e004      	b.n	8007e8c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8007e82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e86:	fab3 f383 	clz	r3, r3
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 031f 	and.w	r3, r3, #31
 8007e90:	2201      	movs	r2, #1
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	6812      	ldr	r2, [r2, #0]
 8007e9a:	69d1      	ldr	r1, [r2, #28]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6812      	ldr	r2, [r2, #0]
 8007ea0:	430b      	orrs	r3, r1
 8007ea2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	6859      	ldr	r1, [r3, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f7ff f856 	bl	8006f62 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f7ff f9c8 	bl	8007250 <LL_ADC_REG_IsConversionOngoing>
 8007ec0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff f9d4 	bl	8007276 <LL_ADC_INJ_IsConversionOngoing>
 8007ece:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007ed2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f040 8270 	bne.w	80083bc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007edc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f040 826b 	bne.w	80083bc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	6819      	ldr	r1, [r3, #0]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f7ff f874 	bl	8006fe0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a6c      	ldr	r2, [pc, #432]	; (80080b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d10d      	bne.n	8007f1e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	695a      	ldr	r2, [r3, #20]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	08db      	lsrs	r3, r3, #3
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	005b      	lsls	r3, r3, #1
 8007f14:	fa02 f303 	lsl.w	r3, r2, r3
 8007f18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007f1c:	e032      	b.n	8007f84 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007f1e:	4b65      	ldr	r3, [pc, #404]	; (80080b4 <HAL_ADC_ConfigChannel+0x2d0>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007f26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f2a:	d10b      	bne.n	8007f44 <HAL_ADC_ConfigChannel+0x160>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	695a      	ldr	r2, [r3, #20]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	089b      	lsrs	r3, r3, #2
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	005b      	lsls	r3, r3, #1
 8007f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f42:	e01d      	b.n	8007f80 <HAL_ADC_ConfigChannel+0x19c>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	f003 0310 	and.w	r3, r3, #16
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10b      	bne.n	8007f6a <HAL_ADC_ConfigChannel+0x186>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	695a      	ldr	r2, [r3, #20]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	089b      	lsrs	r3, r3, #2
 8007f5e:	f003 0307 	and.w	r3, r3, #7
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	e00a      	b.n	8007f80 <HAL_ADC_ConfigChannel+0x19c>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695a      	ldr	r2, [r3, #20]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	089b      	lsrs	r3, r3, #2
 8007f76:	f003 0304 	and.w	r3, r3, #4
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	2b04      	cmp	r3, #4
 8007f8a:	d048      	beq.n	800801e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6818      	ldr	r0, [r3, #0]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	6919      	ldr	r1, [r3, #16]
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f9c:	f7fe fedc 	bl	8006d58 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a42      	ldr	r2, [pc, #264]	; (80080b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d119      	bne.n	8007fde <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6919      	ldr	r1, [r3, #16]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f7fe ff74 	bl	8006ea4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	6919      	ldr	r1, [r3, #16]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d102      	bne.n	8007fd4 <HAL_ADC_ConfigChannel+0x1f0>
 8007fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007fd2:	e000      	b.n	8007fd6 <HAL_ADC_ConfigChannel+0x1f2>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	f7fe ff42 	bl	8006e60 <LL_ADC_SetOffsetSaturation>
 8007fdc:	e1ee      	b.n	80083bc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6818      	ldr	r0, [r3, #0]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	6919      	ldr	r1, [r3, #16]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d102      	bne.n	8007ff6 <HAL_ADC_ConfigChannel+0x212>
 8007ff0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ff4:	e000      	b.n	8007ff8 <HAL_ADC_ConfigChannel+0x214>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	f7fe ff0f 	bl	8006e1c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6919      	ldr	r1, [r3, #16]
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	7e1b      	ldrb	r3, [r3, #24]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d102      	bne.n	8008014 <HAL_ADC_ConfigChannel+0x230>
 800800e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008012:	e000      	b.n	8008016 <HAL_ADC_ConfigChannel+0x232>
 8008014:	2300      	movs	r3, #0
 8008016:	461a      	mov	r2, r3
 8008018:	f7fe fee6 	bl	8006de8 <LL_ADC_SetDataRightShift>
 800801c:	e1ce      	b.n	80083bc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a23      	ldr	r2, [pc, #140]	; (80080b0 <HAL_ADC_ConfigChannel+0x2cc>)
 8008024:	4293      	cmp	r3, r2
 8008026:	f040 8181 	bne.w	800832c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f7fe fec3 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 8008036:	4603      	mov	r3, r0
 8008038:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10a      	bne.n	8008056 <HAL_ADC_ConfigChannel+0x272>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2100      	movs	r1, #0
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe feb8 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 800804c:	4603      	mov	r3, r0
 800804e:	0e9b      	lsrs	r3, r3, #26
 8008050:	f003 021f 	and.w	r2, r3, #31
 8008054:	e01e      	b.n	8008094 <HAL_ADC_ConfigChannel+0x2b0>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f7fe fead 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 8008062:	4603      	mov	r3, r0
 8008064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008068:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800806c:	fa93 f3a3 	rbit	r3, r3
 8008070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8008074:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800807c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8008084:	2320      	movs	r3, #32
 8008086:	e004      	b.n	8008092 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8008088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800808c:	fab3 f383 	clz	r3, r3
 8008090:	b2db      	uxtb	r3, r3
 8008092:	461a      	mov	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800809c:	2b00      	cmp	r3, #0
 800809e:	d10b      	bne.n	80080b8 <HAL_ADC_ConfigChannel+0x2d4>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	0e9b      	lsrs	r3, r3, #26
 80080a6:	f003 031f 	and.w	r3, r3, #31
 80080aa:	e01e      	b.n	80080ea <HAL_ADC_ConfigChannel+0x306>
 80080ac:	47ff0000 	.word	0x47ff0000
 80080b0:	58026000 	.word	0x58026000
 80080b4:	5c001000 	.word	0x5c001000
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080c4:	fa93 f3a3 	rbit	r3, r3
 80080c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80080cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80080d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80080d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80080dc:	2320      	movs	r3, #32
 80080de:	e004      	b.n	80080ea <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80080e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80080e4:	fab3 f383 	clz	r3, r3
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d106      	bne.n	80080fc <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2200      	movs	r2, #0
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fef6 	bl	8006ee8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2101      	movs	r1, #1
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fe5a 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 8008108:	4603      	mov	r3, r0
 800810a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <HAL_ADC_ConfigChannel+0x344>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2101      	movs	r1, #1
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe fe4f 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 800811e:	4603      	mov	r3, r0
 8008120:	0e9b      	lsrs	r3, r3, #26
 8008122:	f003 021f 	and.w	r2, r3, #31
 8008126:	e01e      	b.n	8008166 <HAL_ADC_ConfigChannel+0x382>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2101      	movs	r1, #1
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fe44 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 8008134:	4603      	mov	r3, r0
 8008136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800813a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800813e:	fa93 f3a3 	rbit	r3, r3
 8008142:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8008146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800814a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800814e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8008156:	2320      	movs	r3, #32
 8008158:	e004      	b.n	8008164 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800815a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800815e:	fab3 f383 	clz	r3, r3
 8008162:	b2db      	uxtb	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800816e:	2b00      	cmp	r3, #0
 8008170:	d105      	bne.n	800817e <HAL_ADC_ConfigChannel+0x39a>
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	0e9b      	lsrs	r3, r3, #26
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	e018      	b.n	80081b0 <HAL_ADC_ConfigChannel+0x3cc>
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800818a:	fa93 f3a3 	rbit	r3, r3
 800818e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8008192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008196:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800819a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d101      	bne.n	80081a6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80081a2:	2320      	movs	r3, #32
 80081a4:	e004      	b.n	80081b0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80081a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80081aa:	fab3 f383 	clz	r3, r3
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d106      	bne.n	80081c2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2200      	movs	r2, #0
 80081ba:	2101      	movs	r1, #1
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fe fe93 	bl	8006ee8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2102      	movs	r1, #2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fe fdf7 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 80081ce:	4603      	mov	r3, r0
 80081d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <HAL_ADC_ConfigChannel+0x40a>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2102      	movs	r1, #2
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe fdec 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 80081e4:	4603      	mov	r3, r0
 80081e6:	0e9b      	lsrs	r3, r3, #26
 80081e8:	f003 021f 	and.w	r2, r3, #31
 80081ec:	e01e      	b.n	800822c <HAL_ADC_ConfigChannel+0x448>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2102      	movs	r1, #2
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe fde1 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008200:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008204:	fa93 f3a3 	rbit	r3, r3
 8008208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800820c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008210:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8008214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800821c:	2320      	movs	r3, #32
 800821e:	e004      	b.n	800822a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8008220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008224:	fab3 f383 	clz	r3, r3
 8008228:	b2db      	uxtb	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008234:	2b00      	cmp	r3, #0
 8008236:	d105      	bne.n	8008244 <HAL_ADC_ConfigChannel+0x460>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	0e9b      	lsrs	r3, r3, #26
 800823e:	f003 031f 	and.w	r3, r3, #31
 8008242:	e014      	b.n	800826e <HAL_ADC_ConfigChannel+0x48a>
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800824a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800824c:	fa93 f3a3 	rbit	r3, r3
 8008250:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8008258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8008260:	2320      	movs	r3, #32
 8008262:	e004      	b.n	800826e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8008264:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008268:	fab3 f383 	clz	r3, r3
 800826c:	b2db      	uxtb	r3, r3
 800826e:	429a      	cmp	r2, r3
 8008270:	d106      	bne.n	8008280 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	2102      	movs	r1, #2
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe fe34 	bl	8006ee8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	2103      	movs	r1, #3
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fd98 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 800828c:	4603      	mov	r3, r0
 800828e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10a      	bne.n	80082ac <HAL_ADC_ConfigChannel+0x4c8>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2103      	movs	r1, #3
 800829c:	4618      	mov	r0, r3
 800829e:	f7fe fd8d 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 80082a2:	4603      	mov	r3, r0
 80082a4:	0e9b      	lsrs	r3, r3, #26
 80082a6:	f003 021f 	and.w	r2, r3, #31
 80082aa:	e017      	b.n	80082dc <HAL_ADC_ConfigChannel+0x4f8>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2103      	movs	r1, #3
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe fd82 	bl	8006dbc <LL_ADC_GetOffsetChannel>
 80082b8:	4603      	mov	r3, r0
 80082ba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082be:	fa93 f3a3 	rbit	r3, r3
 80082c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80082c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80082c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80082ce:	2320      	movs	r3, #32
 80082d0:	e003      	b.n	80082da <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80082d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082d4:	fab3 f383 	clz	r3, r3
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d105      	bne.n	80082f4 <HAL_ADC_ConfigChannel+0x510>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	0e9b      	lsrs	r3, r3, #26
 80082ee:	f003 031f 	and.w	r3, r3, #31
 80082f2:	e011      	b.n	8008318 <HAL_ADC_ConfigChannel+0x534>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fc:	fa93 f3a3 	rbit	r3, r3
 8008300:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008304:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8008306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800830c:	2320      	movs	r3, #32
 800830e:	e003      	b.n	8008318 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8008310:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008312:	fab3 f383 	clz	r3, r3
 8008316:	b2db      	uxtb	r3, r3
 8008318:	429a      	cmp	r2, r3
 800831a:	d14f      	bne.n	80083bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2200      	movs	r2, #0
 8008322:	2103      	movs	r1, #3
 8008324:	4618      	mov	r0, r3
 8008326:	f7fe fddf 	bl	8006ee8 <LL_ADC_SetOffsetState>
 800832a:	e047      	b.n	80083bc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008332:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	069b      	lsls	r3, r3, #26
 800833c:	429a      	cmp	r2, r3
 800833e:	d107      	bne.n	8008350 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800834e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	069b      	lsls	r3, r3, #26
 8008360:	429a      	cmp	r2, r3
 8008362:	d107      	bne.n	8008374 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008372:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800837a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	069b      	lsls	r3, r3, #26
 8008384:	429a      	cmp	r2, r3
 8008386:	d107      	bne.n	8008398 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008396:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800839e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	069b      	lsls	r3, r3, #26
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d107      	bne.n	80083bc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80083ba:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7fe ff0b 	bl	80071dc <LL_ADC_IsEnabled>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	f040 8219 	bne.w	8008800 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	6819      	ldr	r1, [r3, #0]
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	461a      	mov	r2, r3
 80083dc:	f7fe fe2c 	bl	8007038 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	4aa1      	ldr	r2, [pc, #644]	; (800866c <HAL_ADC_ConfigChannel+0x888>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	f040 812e 	bne.w	8008648 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10b      	bne.n	8008414 <HAL_ADC_ConfigChannel+0x630>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	0e9b      	lsrs	r3, r3, #26
 8008402:	3301      	adds	r3, #1
 8008404:	f003 031f 	and.w	r3, r3, #31
 8008408:	2b09      	cmp	r3, #9
 800840a:	bf94      	ite	ls
 800840c:	2301      	movls	r3, #1
 800840e:	2300      	movhi	r3, #0
 8008410:	b2db      	uxtb	r3, r3
 8008412:	e019      	b.n	8008448 <HAL_ADC_ConfigChannel+0x664>
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800841a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800841c:	fa93 f3a3 	rbit	r3, r3
 8008420:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008424:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8008426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d101      	bne.n	8008430 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800842c:	2320      	movs	r3, #32
 800842e:	e003      	b.n	8008438 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8008430:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008432:	fab3 f383 	clz	r3, r3
 8008436:	b2db      	uxtb	r3, r3
 8008438:	3301      	adds	r3, #1
 800843a:	f003 031f 	and.w	r3, r3, #31
 800843e:	2b09      	cmp	r3, #9
 8008440:	bf94      	ite	ls
 8008442:	2301      	movls	r3, #1
 8008444:	2300      	movhi	r3, #0
 8008446:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008448:	2b00      	cmp	r3, #0
 800844a:	d079      	beq.n	8008540 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008454:	2b00      	cmp	r3, #0
 8008456:	d107      	bne.n	8008468 <HAL_ADC_ConfigChannel+0x684>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	0e9b      	lsrs	r3, r3, #26
 800845e:	3301      	adds	r3, #1
 8008460:	069b      	lsls	r3, r3, #26
 8008462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008466:	e015      	b.n	8008494 <HAL_ADC_ConfigChannel+0x6b0>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800846e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008470:	fa93 f3a3 	rbit	r3, r3
 8008474:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8008476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008478:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800847a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8008480:	2320      	movs	r3, #32
 8008482:	e003      	b.n	800848c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8008484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008486:	fab3 f383 	clz	r3, r3
 800848a:	b2db      	uxtb	r3, r3
 800848c:	3301      	adds	r3, #1
 800848e:	069b      	lsls	r3, r3, #26
 8008490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800849c:	2b00      	cmp	r3, #0
 800849e:	d109      	bne.n	80084b4 <HAL_ADC_ConfigChannel+0x6d0>
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	0e9b      	lsrs	r3, r3, #26
 80084a6:	3301      	adds	r3, #1
 80084a8:	f003 031f 	and.w	r3, r3, #31
 80084ac:	2101      	movs	r1, #1
 80084ae:	fa01 f303 	lsl.w	r3, r1, r3
 80084b2:	e017      	b.n	80084e4 <HAL_ADC_ConfigChannel+0x700>
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084bc:	fa93 f3a3 	rbit	r3, r3
 80084c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80084c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80084c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80084cc:	2320      	movs	r3, #32
 80084ce:	e003      	b.n	80084d8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80084d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d2:	fab3 f383 	clz	r3, r3
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	3301      	adds	r3, #1
 80084da:	f003 031f 	and.w	r3, r3, #31
 80084de:	2101      	movs	r1, #1
 80084e0:	fa01 f303 	lsl.w	r3, r1, r3
 80084e4:	ea42 0103 	orr.w	r1, r2, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d10a      	bne.n	800850a <HAL_ADC_ConfigChannel+0x726>
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	0e9b      	lsrs	r3, r3, #26
 80084fa:	3301      	adds	r3, #1
 80084fc:	f003 021f 	and.w	r2, r3, #31
 8008500:	4613      	mov	r3, r2
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	4413      	add	r3, r2
 8008506:	051b      	lsls	r3, r3, #20
 8008508:	e018      	b.n	800853c <HAL_ADC_ConfigChannel+0x758>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	fa93 f3a3 	rbit	r3, r3
 8008516:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8008522:	2320      	movs	r3, #32
 8008524:	e003      	b.n	800852e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	fab3 f383 	clz	r3, r3
 800852c:	b2db      	uxtb	r3, r3
 800852e:	3301      	adds	r3, #1
 8008530:	f003 021f 	and.w	r2, r3, #31
 8008534:	4613      	mov	r3, r2
 8008536:	005b      	lsls	r3, r3, #1
 8008538:	4413      	add	r3, r2
 800853a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800853c:	430b      	orrs	r3, r1
 800853e:	e07e      	b.n	800863e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008548:	2b00      	cmp	r3, #0
 800854a:	d107      	bne.n	800855c <HAL_ADC_ConfigChannel+0x778>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	0e9b      	lsrs	r3, r3, #26
 8008552:	3301      	adds	r3, #1
 8008554:	069b      	lsls	r3, r3, #26
 8008556:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800855a:	e015      	b.n	8008588 <HAL_ADC_ConfigChannel+0x7a4>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	fa93 f3a3 	rbit	r3, r3
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8008574:	2320      	movs	r3, #32
 8008576:	e003      	b.n	8008580 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8008578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857a:	fab3 f383 	clz	r3, r3
 800857e:	b2db      	uxtb	r3, r3
 8008580:	3301      	adds	r3, #1
 8008582:	069b      	lsls	r3, r3, #26
 8008584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008590:	2b00      	cmp	r3, #0
 8008592:	d109      	bne.n	80085a8 <HAL_ADC_ConfigChannel+0x7c4>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	0e9b      	lsrs	r3, r3, #26
 800859a:	3301      	adds	r3, #1
 800859c:	f003 031f 	and.w	r3, r3, #31
 80085a0:	2101      	movs	r1, #1
 80085a2:	fa01 f303 	lsl.w	r3, r1, r3
 80085a6:	e017      	b.n	80085d8 <HAL_ADC_ConfigChannel+0x7f4>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	fa93 f3a3 	rbit	r3, r3
 80085b4:	61bb      	str	r3, [r7, #24]
  return result;
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d101      	bne.n	80085c4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80085c0:	2320      	movs	r3, #32
 80085c2:	e003      	b.n	80085cc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	fab3 f383 	clz	r3, r3
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	3301      	adds	r3, #1
 80085ce:	f003 031f 	and.w	r3, r3, #31
 80085d2:	2101      	movs	r1, #1
 80085d4:	fa01 f303 	lsl.w	r3, r1, r3
 80085d8:	ea42 0103 	orr.w	r1, r2, r3
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10d      	bne.n	8008604 <HAL_ADC_ConfigChannel+0x820>
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	0e9b      	lsrs	r3, r3, #26
 80085ee:	3301      	adds	r3, #1
 80085f0:	f003 021f 	and.w	r2, r3, #31
 80085f4:	4613      	mov	r3, r2
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	4413      	add	r3, r2
 80085fa:	3b1e      	subs	r3, #30
 80085fc:	051b      	lsls	r3, r3, #20
 80085fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008602:	e01b      	b.n	800863c <HAL_ADC_ConfigChannel+0x858>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	fa93 f3a3 	rbit	r3, r3
 8008610:	60fb      	str	r3, [r7, #12]
  return result;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800861c:	2320      	movs	r3, #32
 800861e:	e003      	b.n	8008628 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	fab3 f383 	clz	r3, r3
 8008626:	b2db      	uxtb	r3, r3
 8008628:	3301      	adds	r3, #1
 800862a:	f003 021f 	and.w	r2, r3, #31
 800862e:	4613      	mov	r3, r2
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	4413      	add	r3, r2
 8008634:	3b1e      	subs	r3, #30
 8008636:	051b      	lsls	r3, r3, #20
 8008638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800863c:	430b      	orrs	r3, r1
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	6892      	ldr	r2, [r2, #8]
 8008642:	4619      	mov	r1, r3
 8008644:	f7fe fccc 	bl	8006fe0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	f280 80d7 	bge.w	8008800 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a06      	ldr	r2, [pc, #24]	; (8008670 <HAL_ADC_ConfigChannel+0x88c>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d004      	beq.n	8008666 <HAL_ADC_ConfigChannel+0x882>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a04      	ldr	r2, [pc, #16]	; (8008674 <HAL_ADC_ConfigChannel+0x890>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d10a      	bne.n	800867c <HAL_ADC_ConfigChannel+0x898>
 8008666:	4b04      	ldr	r3, [pc, #16]	; (8008678 <HAL_ADC_ConfigChannel+0x894>)
 8008668:	e009      	b.n	800867e <HAL_ADC_ConfigChannel+0x89a>
 800866a:	bf00      	nop
 800866c:	47ff0000 	.word	0x47ff0000
 8008670:	40022000 	.word	0x40022000
 8008674:	40022100 	.word	0x40022100
 8008678:	40022300 	.word	0x40022300
 800867c:	4b65      	ldr	r3, [pc, #404]	; (8008814 <HAL_ADC_ConfigChannel+0xa30>)
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe fb5c 	bl	8006d3c <LL_ADC_GetCommonPathInternalCh>
 8008684:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a62      	ldr	r2, [pc, #392]	; (8008818 <HAL_ADC_ConfigChannel+0xa34>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d004      	beq.n	800869c <HAL_ADC_ConfigChannel+0x8b8>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a61      	ldr	r2, [pc, #388]	; (800881c <HAL_ADC_ConfigChannel+0xa38>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d10e      	bne.n	80086ba <HAL_ADC_ConfigChannel+0x8d6>
 800869c:	485e      	ldr	r0, [pc, #376]	; (8008818 <HAL_ADC_ConfigChannel+0xa34>)
 800869e:	f7fe fd9d 	bl	80071dc <LL_ADC_IsEnabled>
 80086a2:	4604      	mov	r4, r0
 80086a4:	485d      	ldr	r0, [pc, #372]	; (800881c <HAL_ADC_ConfigChannel+0xa38>)
 80086a6:	f7fe fd99 	bl	80071dc <LL_ADC_IsEnabled>
 80086aa:	4603      	mov	r3, r0
 80086ac:	4323      	orrs	r3, r4
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	bf0c      	ite	eq
 80086b2:	2301      	moveq	r3, #1
 80086b4:	2300      	movne	r3, #0
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	e008      	b.n	80086cc <HAL_ADC_ConfigChannel+0x8e8>
 80086ba:	4859      	ldr	r0, [pc, #356]	; (8008820 <HAL_ADC_ConfigChannel+0xa3c>)
 80086bc:	f7fe fd8e 	bl	80071dc <LL_ADC_IsEnabled>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bf0c      	ite	eq
 80086c6:	2301      	moveq	r3, #1
 80086c8:	2300      	movne	r3, #0
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8084 	beq.w	80087da <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a53      	ldr	r2, [pc, #332]	; (8008824 <HAL_ADC_ConfigChannel+0xa40>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d132      	bne.n	8008742 <HAL_ADC_ConfigChannel+0x95e>
 80086dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80086e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d12c      	bne.n	8008742 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a4c      	ldr	r2, [pc, #304]	; (8008820 <HAL_ADC_ConfigChannel+0xa3c>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	f040 8086 	bne.w	8008800 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a47      	ldr	r2, [pc, #284]	; (8008818 <HAL_ADC_ConfigChannel+0xa34>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d004      	beq.n	8008708 <HAL_ADC_ConfigChannel+0x924>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a46      	ldr	r2, [pc, #280]	; (800881c <HAL_ADC_ConfigChannel+0xa38>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d101      	bne.n	800870c <HAL_ADC_ConfigChannel+0x928>
 8008708:	4a47      	ldr	r2, [pc, #284]	; (8008828 <HAL_ADC_ConfigChannel+0xa44>)
 800870a:	e000      	b.n	800870e <HAL_ADC_ConfigChannel+0x92a>
 800870c:	4a41      	ldr	r2, [pc, #260]	; (8008814 <HAL_ADC_ConfigChannel+0xa30>)
 800870e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008712:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f7fe fafc 	bl	8006d16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800871e:	4b43      	ldr	r3, [pc, #268]	; (800882c <HAL_ADC_ConfigChannel+0xa48>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	099b      	lsrs	r3, r3, #6
 8008724:	4a42      	ldr	r2, [pc, #264]	; (8008830 <HAL_ADC_ConfigChannel+0xa4c>)
 8008726:	fba2 2303 	umull	r2, r3, r2, r3
 800872a:	099b      	lsrs	r3, r3, #6
 800872c:	3301      	adds	r3, #1
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008732:	e002      	b.n	800873a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	3b01      	subs	r3, #1
 8008738:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1f9      	bne.n	8008734 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008740:	e05e      	b.n	8008800 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a3b      	ldr	r2, [pc, #236]	; (8008834 <HAL_ADC_ConfigChannel+0xa50>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d120      	bne.n	800878e <HAL_ADC_ConfigChannel+0x9aa>
 800874c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d11a      	bne.n	800878e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a30      	ldr	r2, [pc, #192]	; (8008820 <HAL_ADC_ConfigChannel+0xa3c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d14e      	bne.n	8008800 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a2c      	ldr	r2, [pc, #176]	; (8008818 <HAL_ADC_ConfigChannel+0xa34>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d004      	beq.n	8008776 <HAL_ADC_ConfigChannel+0x992>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a2a      	ldr	r2, [pc, #168]	; (800881c <HAL_ADC_ConfigChannel+0xa38>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d101      	bne.n	800877a <HAL_ADC_ConfigChannel+0x996>
 8008776:	4a2c      	ldr	r2, [pc, #176]	; (8008828 <HAL_ADC_ConfigChannel+0xa44>)
 8008778:	e000      	b.n	800877c <HAL_ADC_ConfigChannel+0x998>
 800877a:	4a26      	ldr	r2, [pc, #152]	; (8008814 <HAL_ADC_ConfigChannel+0xa30>)
 800877c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008780:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	f7fe fac5 	bl	8006d16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800878c:	e038      	b.n	8008800 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a29      	ldr	r2, [pc, #164]	; (8008838 <HAL_ADC_ConfigChannel+0xa54>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d133      	bne.n	8008800 <HAL_ADC_ConfigChannel+0xa1c>
 8008798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800879c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d12d      	bne.n	8008800 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1d      	ldr	r2, [pc, #116]	; (8008820 <HAL_ADC_ConfigChannel+0xa3c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d128      	bne.n	8008800 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a19      	ldr	r2, [pc, #100]	; (8008818 <HAL_ADC_ConfigChannel+0xa34>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d004      	beq.n	80087c2 <HAL_ADC_ConfigChannel+0x9de>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a17      	ldr	r2, [pc, #92]	; (800881c <HAL_ADC_ConfigChannel+0xa38>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d101      	bne.n	80087c6 <HAL_ADC_ConfigChannel+0x9e2>
 80087c2:	4a19      	ldr	r2, [pc, #100]	; (8008828 <HAL_ADC_ConfigChannel+0xa44>)
 80087c4:	e000      	b.n	80087c8 <HAL_ADC_ConfigChannel+0x9e4>
 80087c6:	4a13      	ldr	r2, [pc, #76]	; (8008814 <HAL_ADC_ConfigChannel+0xa30>)
 80087c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80087cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087d0:	4619      	mov	r1, r3
 80087d2:	4610      	mov	r0, r2
 80087d4:	f7fe fa9f 	bl	8006d16 <LL_ADC_SetCommonPathInternalCh>
 80087d8:	e012      	b.n	8008800 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087de:	f043 0220 	orr.w	r2, r3, #32
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80087ec:	e008      	b.n	8008800 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087f2:	f043 0220 	orr.w	r2, r3, #32
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008808:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800880c:	4618      	mov	r0, r3
 800880e:	37e4      	adds	r7, #228	; 0xe4
 8008810:	46bd      	mov	sp, r7
 8008812:	bd90      	pop	{r4, r7, pc}
 8008814:	58026300 	.word	0x58026300
 8008818:	40022000 	.word	0x40022000
 800881c:	40022100 	.word	0x40022100
 8008820:	58026000 	.word	0x58026000
 8008824:	c7520000 	.word	0xc7520000
 8008828:	40022300 	.word	0x40022300
 800882c:	20000020 	.word	0x20000020
 8008830:	053e2d63 	.word	0x053e2d63
 8008834:	c3210000 	.word	0xc3210000
 8008838:	cb840000 	.word	0xcb840000

0800883c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fcc7 	bl	80071dc <LL_ADC_IsEnabled>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d16e      	bne.n	8008932 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	689a      	ldr	r2, [r3, #8]
 800885a:	4b38      	ldr	r3, [pc, #224]	; (800893c <ADC_Enable+0x100>)
 800885c:	4013      	ands	r3, r2
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00d      	beq.n	800887e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008866:	f043 0210 	orr.w	r2, r3, #16
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008872:	f043 0201 	orr.w	r2, r3, #1
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e05a      	b.n	8008934 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe fc82 	bl	800718c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008888:	f7fe fa02 	bl	8006c90 <HAL_GetTick>
 800888c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a2b      	ldr	r2, [pc, #172]	; (8008940 <ADC_Enable+0x104>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d004      	beq.n	80088a2 <ADC_Enable+0x66>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a29      	ldr	r2, [pc, #164]	; (8008944 <ADC_Enable+0x108>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d101      	bne.n	80088a6 <ADC_Enable+0x6a>
 80088a2:	4b29      	ldr	r3, [pc, #164]	; (8008948 <ADC_Enable+0x10c>)
 80088a4:	e000      	b.n	80088a8 <ADC_Enable+0x6c>
 80088a6:	4b29      	ldr	r3, [pc, #164]	; (800894c <ADC_Enable+0x110>)
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fe fc05 	bl	80070b8 <LL_ADC_GetMultimode>
 80088ae:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a23      	ldr	r2, [pc, #140]	; (8008944 <ADC_Enable+0x108>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d002      	beq.n	80088c0 <ADC_Enable+0x84>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	e000      	b.n	80088c2 <ADC_Enable+0x86>
 80088c0:	4b1f      	ldr	r3, [pc, #124]	; (8008940 <ADC_Enable+0x104>)
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	6812      	ldr	r2, [r2, #0]
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d02c      	beq.n	8008924 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d130      	bne.n	8008932 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088d0:	e028      	b.n	8008924 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7fe fc80 	bl	80071dc <LL_ADC_IsEnabled>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d104      	bne.n	80088ec <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe fc50 	bl	800718c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80088ec:	f7fe f9d0 	bl	8006c90 <HAL_GetTick>
 80088f0:	4602      	mov	r2, r0
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d914      	bls.n	8008924 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b01      	cmp	r3, #1
 8008906:	d00d      	beq.n	8008924 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800890c:	f043 0210 	orr.w	r2, r3, #16
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008918:	f043 0201 	orr.w	r2, r3, #1
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e007      	b.n	8008934 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b01      	cmp	r3, #1
 8008930:	d1cf      	bne.n	80088d2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}
 800893c:	8000003f 	.word	0x8000003f
 8008940:	40022000 	.word	0x40022000
 8008944:	40022100 	.word	0x40022100
 8008948:	40022300 	.word	0x40022300
 800894c:	58026300 	.word	0x58026300

08008950 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f7fe fc50 	bl	8007202 <LL_ADC_IsDisableOngoing>
 8008962:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fc37 	bl	80071dc <LL_ADC_IsEnabled>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d047      	beq.n	8008a04 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d144      	bne.n	8008a04 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f003 030d 	and.w	r3, r3, #13
 8008984:	2b01      	cmp	r3, #1
 8008986:	d10c      	bne.n	80089a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4618      	mov	r0, r3
 800898e:	f7fe fc11 	bl	80071b4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2203      	movs	r2, #3
 8008998:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800899a:	f7fe f979 	bl	8006c90 <HAL_GetTick>
 800899e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80089a0:	e029      	b.n	80089f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089a6:	f043 0210 	orr.w	r2, r3, #16
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089b2:	f043 0201 	orr.w	r2, r3, #1
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e023      	b.n	8008a06 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80089be:	f7fe f967 	bl	8006c90 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b02      	cmp	r3, #2
 80089ca:	d914      	bls.n	80089f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00d      	beq.n	80089f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089de:	f043 0210 	orr.w	r2, r3, #16
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ea:	f043 0201 	orr.w	r2, r3, #1
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e007      	b.n	8008a06 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 0301 	and.w	r3, r3, #1
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1dc      	bne.n	80089be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a6b      	ldr	r2, [pc, #428]	; (8008bcc <ADC_ConfigureBoostMode+0x1bc>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d004      	beq.n	8008a2c <ADC_ConfigureBoostMode+0x1c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a6a      	ldr	r2, [pc, #424]	; (8008bd0 <ADC_ConfigureBoostMode+0x1c0>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d109      	bne.n	8008a40 <ADC_ConfigureBoostMode+0x30>
 8008a2c:	4b69      	ldr	r3, [pc, #420]	; (8008bd4 <ADC_ConfigureBoostMode+0x1c4>)
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	bf14      	ite	ne
 8008a38:	2301      	movne	r3, #1
 8008a3a:	2300      	moveq	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	e008      	b.n	8008a52 <ADC_ConfigureBoostMode+0x42>
 8008a40:	4b65      	ldr	r3, [pc, #404]	; (8008bd8 <ADC_ConfigureBoostMode+0x1c8>)
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bf14      	ite	ne
 8008a4c:	2301      	movne	r3, #1
 8008a4e:	2300      	moveq	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d01c      	beq.n	8008a90 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008a56:	f005 fc9f 	bl	800e398 <HAL_RCC_GetHCLKFreq>
 8008a5a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a64:	d010      	beq.n	8008a88 <ADC_ConfigureBoostMode+0x78>
 8008a66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a6a:	d871      	bhi.n	8008b50 <ADC_ConfigureBoostMode+0x140>
 8008a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a70:	d002      	beq.n	8008a78 <ADC_ConfigureBoostMode+0x68>
 8008a72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a76:	d16b      	bne.n	8008b50 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	0c1b      	lsrs	r3, r3, #16
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a84:	60fb      	str	r3, [r7, #12]
        break;
 8008a86:	e066      	b.n	8008b56 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	089b      	lsrs	r3, r3, #2
 8008a8c:	60fb      	str	r3, [r7, #12]
        break;
 8008a8e:	e062      	b.n	8008b56 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008a90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008a94:	f006 fbd6 	bl	800f244 <HAL_RCCEx_GetPeriphCLKFreq>
 8008a98:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008aa2:	d051      	beq.n	8008b48 <ADC_ConfigureBoostMode+0x138>
 8008aa4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008aa8:	d854      	bhi.n	8008b54 <ADC_ConfigureBoostMode+0x144>
 8008aaa:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008aae:	d047      	beq.n	8008b40 <ADC_ConfigureBoostMode+0x130>
 8008ab0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008ab4:	d84e      	bhi.n	8008b54 <ADC_ConfigureBoostMode+0x144>
 8008ab6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008aba:	d03d      	beq.n	8008b38 <ADC_ConfigureBoostMode+0x128>
 8008abc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008ac0:	d848      	bhi.n	8008b54 <ADC_ConfigureBoostMode+0x144>
 8008ac2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ac6:	d033      	beq.n	8008b30 <ADC_ConfigureBoostMode+0x120>
 8008ac8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008acc:	d842      	bhi.n	8008b54 <ADC_ConfigureBoostMode+0x144>
 8008ace:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008ad2:	d029      	beq.n	8008b28 <ADC_ConfigureBoostMode+0x118>
 8008ad4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008ad8:	d83c      	bhi.n	8008b54 <ADC_ConfigureBoostMode+0x144>
 8008ada:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008ade:	d01a      	beq.n	8008b16 <ADC_ConfigureBoostMode+0x106>
 8008ae0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008ae4:	d836      	bhi.n	8008b54 <ADC_ConfigureBoostMode+0x144>
 8008ae6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008aea:	d014      	beq.n	8008b16 <ADC_ConfigureBoostMode+0x106>
 8008aec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008af0:	d830      	bhi.n	8008b54 <ADC_ConfigureBoostMode+0x144>
 8008af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008af6:	d00e      	beq.n	8008b16 <ADC_ConfigureBoostMode+0x106>
 8008af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008afc:	d82a      	bhi.n	8008b54 <ADC_ConfigureBoostMode+0x144>
 8008afe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b02:	d008      	beq.n	8008b16 <ADC_ConfigureBoostMode+0x106>
 8008b04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b08:	d824      	bhi.n	8008b54 <ADC_ConfigureBoostMode+0x144>
 8008b0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b0e:	d002      	beq.n	8008b16 <ADC_ConfigureBoostMode+0x106>
 8008b10:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b14:	d11e      	bne.n	8008b54 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	0c9b      	lsrs	r3, r3, #18
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b24:	60fb      	str	r3, [r7, #12]
        break;
 8008b26:	e016      	b.n	8008b56 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	091b      	lsrs	r3, r3, #4
 8008b2c:	60fb      	str	r3, [r7, #12]
        break;
 8008b2e:	e012      	b.n	8008b56 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	60fb      	str	r3, [r7, #12]
        break;
 8008b36:	e00e      	b.n	8008b56 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	099b      	lsrs	r3, r3, #6
 8008b3c:	60fb      	str	r3, [r7, #12]
        break;
 8008b3e:	e00a      	b.n	8008b56 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	09db      	lsrs	r3, r3, #7
 8008b44:	60fb      	str	r3, [r7, #12]
        break;
 8008b46:	e006      	b.n	8008b56 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	0a1b      	lsrs	r3, r3, #8
 8008b4c:	60fb      	str	r3, [r7, #12]
        break;
 8008b4e:	e002      	b.n	8008b56 <ADC_ConfigureBoostMode+0x146>
        break;
 8008b50:	bf00      	nop
 8008b52:	e000      	b.n	8008b56 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8008b54:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	085b      	lsrs	r3, r3, #1
 8008b5a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4a1f      	ldr	r2, [pc, #124]	; (8008bdc <ADC_ConfigureBoostMode+0x1cc>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d808      	bhi.n	8008b76 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	689a      	ldr	r2, [r3, #8]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008b72:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008b74:	e025      	b.n	8008bc2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4a19      	ldr	r2, [pc, #100]	; (8008be0 <ADC_ConfigureBoostMode+0x1d0>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d80a      	bhi.n	8008b94 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689b      	ldr	r3, [r3, #8]
 8008b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b90:	609a      	str	r2, [r3, #8]
}
 8008b92:	e016      	b.n	8008bc2 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4a13      	ldr	r2, [pc, #76]	; (8008be4 <ADC_ConfigureBoostMode+0x1d4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d80a      	bhi.n	8008bb2 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bae:	609a      	str	r2, [r3, #8]
}
 8008bb0:	e007      	b.n	8008bc2 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008bc0:	609a      	str	r2, [r3, #8]
}
 8008bc2:	bf00      	nop
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	40022000 	.word	0x40022000
 8008bd0:	40022100 	.word	0x40022100
 8008bd4:	40022300 	.word	0x40022300
 8008bd8:	58026300 	.word	0x58026300
 8008bdc:	005f5e10 	.word	0x005f5e10
 8008be0:	00bebc20 	.word	0x00bebc20
 8008be4:	017d7840 	.word	0x017d7840

08008be8 <LL_ADC_IsEnabled>:
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f003 0301 	and.w	r3, r3, #1
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <LL_ADC_IsEnabled+0x18>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <LL_ADC_IsEnabled+0x1a>
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <LL_ADC_StartCalibration>:
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <LL_ADC_StartCalibration+0x38>)
 8008c22:	4013      	ands	r3, r2
 8008c24:	68ba      	ldr	r2, [r7, #8]
 8008c26:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008c30:	430a      	orrs	r2, r1
 8008c32:	4313      	orrs	r3, r2
 8008c34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	609a      	str	r2, [r3, #8]
}
 8008c3c:	bf00      	nop
 8008c3e:	3714      	adds	r7, #20
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	3ffeffc0 	.word	0x3ffeffc0

08008c4c <LL_ADC_IsCalibrationOnGoing>:
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c60:	d101      	bne.n	8008c66 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <LL_ADC_REG_IsConversionOngoing>:
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	d101      	bne.n	8008c8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e000      	b.n	8008c8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
	...

08008c9c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d101      	bne.n	8008cba <HAL_ADCEx_Calibration_Start+0x1e>
 8008cb6:	2302      	movs	r3, #2
 8008cb8:	e04c      	b.n	8008d54 <HAL_ADCEx_Calibration_Start+0xb8>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff fe44 	bl	8008950 <ADC_Disable>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d135      	bne.n	8008d3e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008cd6:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <HAL_ADCEx_Calibration_Start+0xc0>)
 8008cd8:	4013      	ands	r3, r2
 8008cda:	f043 0202 	orr.w	r2, r3, #2
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	68b9      	ldr	r1, [r7, #8]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff ff90 	bl	8008c10 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008cf0:	e014      	b.n	8008d1c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	4a19      	ldr	r2, [pc, #100]	; (8008d60 <HAL_ADCEx_Calibration_Start+0xc4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d30d      	bcc.n	8008d1c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d04:	f023 0312 	bic.w	r3, r3, #18
 8008d08:	f043 0210 	orr.w	r2, r3, #16
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e01b      	b.n	8008d54 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7ff ff93 	bl	8008c4c <LL_ADC_IsCalibrationOnGoing>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e2      	bne.n	8008cf2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d30:	f023 0303 	bic.w	r3, r3, #3
 8008d34:	f043 0201 	orr.w	r2, r3, #1
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	661a      	str	r2, [r3, #96]	; 0x60
 8008d3c:	e005      	b.n	8008d4a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d42:	f043 0210 	orr.w	r2, r3, #16
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008d52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	ffffeefd 	.word	0xffffeefd
 8008d60:	25c3f800 	.word	0x25c3f800

08008d64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b0a3      	sub	sp, #140	; 0x8c
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008de2:	2302      	movs	r3, #2
 8008de4:	e0c1      	b.n	8008f6a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008dee:	2300      	movs	r3, #0
 8008df0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a5e      	ldr	r2, [pc, #376]	; (8008f74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d102      	bne.n	8008e06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008e00:	4b5d      	ldr	r3, [pc, #372]	; (8008f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008e02:	60fb      	str	r3, [r7, #12]
 8008e04:	e001      	b.n	8008e0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d10b      	bne.n	8008e28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e14:	f043 0220 	orr.w	r2, r3, #32
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e0a0      	b.n	8008f6a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff ff22 	bl	8008c74 <LL_ADC_REG_IsConversionOngoing>
 8008e30:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff ff1b 	bl	8008c74 <LL_ADC_REG_IsConversionOngoing>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f040 8081 	bne.w	8008f48 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d17c      	bne.n	8008f48 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a48      	ldr	r2, [pc, #288]	; (8008f74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d004      	beq.n	8008e62 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a46      	ldr	r2, [pc, #280]	; (8008f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d101      	bne.n	8008e66 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8008e62:	4b46      	ldr	r3, [pc, #280]	; (8008f7c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008e64:	e000      	b.n	8008e68 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008e66:	4b46      	ldr	r3, [pc, #280]	; (8008f80 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008e68:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d039      	beq.n	8008ee6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008e72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008e82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a3a      	ldr	r2, [pc, #232]	; (8008f74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d004      	beq.n	8008e98 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a39      	ldr	r2, [pc, #228]	; (8008f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d10e      	bne.n	8008eb6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8008e98:	4836      	ldr	r0, [pc, #216]	; (8008f74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008e9a:	f7ff fea5 	bl	8008be8 <LL_ADC_IsEnabled>
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	4835      	ldr	r0, [pc, #212]	; (8008f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008ea2:	f7ff fea1 	bl	8008be8 <LL_ADC_IsEnabled>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4323      	orrs	r3, r4
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	bf0c      	ite	eq
 8008eae:	2301      	moveq	r3, #1
 8008eb0:	2300      	movne	r3, #0
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	e008      	b.n	8008ec8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8008eb6:	4833      	ldr	r0, [pc, #204]	; (8008f84 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008eb8:	f7ff fe96 	bl	8008be8 <LL_ADC_IsEnabled>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	bf0c      	ite	eq
 8008ec2:	2301      	moveq	r3, #1
 8008ec4:	2300      	movne	r3, #0
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d047      	beq.n	8008f5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008ecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	4b2d      	ldr	r3, [pc, #180]	; (8008f88 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	6811      	ldr	r1, [r2, #0]
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	6892      	ldr	r2, [r2, #8]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ee2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ee4:	e03a      	b.n	8008f5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008ee6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008eee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008ef0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a1f      	ldr	r2, [pc, #124]	; (8008f74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d004      	beq.n	8008f06 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a1d      	ldr	r2, [pc, #116]	; (8008f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d10e      	bne.n	8008f24 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8008f06:	481b      	ldr	r0, [pc, #108]	; (8008f74 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008f08:	f7ff fe6e 	bl	8008be8 <LL_ADC_IsEnabled>
 8008f0c:	4604      	mov	r4, r0
 8008f0e:	481a      	ldr	r0, [pc, #104]	; (8008f78 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008f10:	f7ff fe6a 	bl	8008be8 <LL_ADC_IsEnabled>
 8008f14:	4603      	mov	r3, r0
 8008f16:	4323      	orrs	r3, r4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bf0c      	ite	eq
 8008f1c:	2301      	moveq	r3, #1
 8008f1e:	2300      	movne	r3, #0
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	e008      	b.n	8008f36 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8008f24:	4817      	ldr	r0, [pc, #92]	; (8008f84 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8008f26:	f7ff fe5f 	bl	8008be8 <LL_ADC_IsEnabled>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	bf0c      	ite	eq
 8008f30:	2301      	moveq	r3, #1
 8008f32:	2300      	movne	r3, #0
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d010      	beq.n	8008f5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008f3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f3c:	689a      	ldr	r2, [r3, #8]
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8008f40:	4013      	ands	r3, r2
 8008f42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f44:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f46:	e009      	b.n	8008f5c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f4c:	f043 0220 	orr.w	r2, r3, #32
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8008f5a:	e000      	b.n	8008f5e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008f5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8008f66:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	378c      	adds	r7, #140	; 0x8c
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd90      	pop	{r4, r7, pc}
 8008f72:	bf00      	nop
 8008f74:	40022000 	.word	0x40022000
 8008f78:	40022100 	.word	0x40022100
 8008f7c:	40022300 	.word	0x40022300
 8008f80:	58026300 	.word	0x58026300
 8008f84:	58026000 	.word	0x58026000
 8008f88:	fffff0e0 	.word	0xfffff0e0

08008f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f003 0307 	and.w	r3, r3, #7
 8008f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f9c:	4b0b      	ldr	r3, [pc, #44]	; (8008fcc <__NVIC_SetPriorityGrouping+0x40>)
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fa2:	68ba      	ldr	r2, [r7, #8]
 8008fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008fa8:	4013      	ands	r3, r2
 8008faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008fb4:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008fba:	4a04      	ldr	r2, [pc, #16]	; (8008fcc <__NVIC_SetPriorityGrouping+0x40>)
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	60d3      	str	r3, [r2, #12]
}
 8008fc0:	bf00      	nop
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	e000ed00 	.word	0xe000ed00
 8008fd0:	05fa0000 	.word	0x05fa0000

08008fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <__NVIC_GetPriorityGrouping+0x18>)
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	0a1b      	lsrs	r3, r3, #8
 8008fde:	f003 0307 	and.w	r3, r3, #7
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr
 8008fec:	e000ed00 	.word	0xe000ed00

08008ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	db0b      	blt.n	800901a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009002:	88fb      	ldrh	r3, [r7, #6]
 8009004:	f003 021f 	and.w	r2, r3, #31
 8009008:	4907      	ldr	r1, [pc, #28]	; (8009028 <__NVIC_EnableIRQ+0x38>)
 800900a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800900e:	095b      	lsrs	r3, r3, #5
 8009010:	2001      	movs	r0, #1
 8009012:	fa00 f202 	lsl.w	r2, r0, r2
 8009016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	e000e100 	.word	0xe000e100

0800902c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	4603      	mov	r3, r0
 8009034:	6039      	str	r1, [r7, #0]
 8009036:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800903c:	2b00      	cmp	r3, #0
 800903e:	db0a      	blt.n	8009056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	b2da      	uxtb	r2, r3
 8009044:	490c      	ldr	r1, [pc, #48]	; (8009078 <__NVIC_SetPriority+0x4c>)
 8009046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800904a:	0112      	lsls	r2, r2, #4
 800904c:	b2d2      	uxtb	r2, r2
 800904e:	440b      	add	r3, r1
 8009050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009054:	e00a      	b.n	800906c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	b2da      	uxtb	r2, r3
 800905a:	4908      	ldr	r1, [pc, #32]	; (800907c <__NVIC_SetPriority+0x50>)
 800905c:	88fb      	ldrh	r3, [r7, #6]
 800905e:	f003 030f 	and.w	r3, r3, #15
 8009062:	3b04      	subs	r3, #4
 8009064:	0112      	lsls	r2, r2, #4
 8009066:	b2d2      	uxtb	r2, r2
 8009068:	440b      	add	r3, r1
 800906a:	761a      	strb	r2, [r3, #24]
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	e000e100 	.word	0xe000e100
 800907c:	e000ed00 	.word	0xe000ed00

08009080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009080:	b480      	push	{r7}
 8009082:	b089      	sub	sp, #36	; 0x24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	f1c3 0307 	rsb	r3, r3, #7
 800909a:	2b04      	cmp	r3, #4
 800909c:	bf28      	it	cs
 800909e:	2304      	movcs	r3, #4
 80090a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	3304      	adds	r3, #4
 80090a6:	2b06      	cmp	r3, #6
 80090a8:	d902      	bls.n	80090b0 <NVIC_EncodePriority+0x30>
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	3b03      	subs	r3, #3
 80090ae:	e000      	b.n	80090b2 <NVIC_EncodePriority+0x32>
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090b4:	f04f 32ff 	mov.w	r2, #4294967295
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	fa02 f303 	lsl.w	r3, r2, r3
 80090be:	43da      	mvns	r2, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	401a      	ands	r2, r3
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090c8:	f04f 31ff 	mov.w	r1, #4294967295
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	fa01 f303 	lsl.w	r3, r1, r3
 80090d2:	43d9      	mvns	r1, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090d8:	4313      	orrs	r3, r2
         );
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3724      	adds	r7, #36	; 0x24
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090f8:	d301      	bcc.n	80090fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090fa:	2301      	movs	r3, #1
 80090fc:	e00f      	b.n	800911e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090fe:	4a0a      	ldr	r2, [pc, #40]	; (8009128 <SysTick_Config+0x40>)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	3b01      	subs	r3, #1
 8009104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009106:	210f      	movs	r1, #15
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	f7ff ff8e 	bl	800902c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009110:	4b05      	ldr	r3, [pc, #20]	; (8009128 <SysTick_Config+0x40>)
 8009112:	2200      	movs	r2, #0
 8009114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009116:	4b04      	ldr	r3, [pc, #16]	; (8009128 <SysTick_Config+0x40>)
 8009118:	2207      	movs	r2, #7
 800911a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800911c:	2300      	movs	r3, #0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	e000e010 	.word	0xe000e010

0800912c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff ff29 	bl	8008f8c <__NVIC_SetPriorityGrouping>
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b086      	sub	sp, #24
 8009146:	af00      	add	r7, sp, #0
 8009148:	4603      	mov	r3, r0
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
 800914e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009150:	f7ff ff40 	bl	8008fd4 <__NVIC_GetPriorityGrouping>
 8009154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	6978      	ldr	r0, [r7, #20]
 800915c:	f7ff ff90 	bl	8009080 <NVIC_EncodePriority>
 8009160:	4602      	mov	r2, r0
 8009162:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009166:	4611      	mov	r1, r2
 8009168:	4618      	mov	r0, r3
 800916a:	f7ff ff5f 	bl	800902c <__NVIC_SetPriority>
}
 800916e:	bf00      	nop
 8009170:	3718      	adds	r7, #24
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	4603      	mov	r3, r0
 800917e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff ff33 	bl	8008ff0 <__NVIC_EnableIRQ>
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b082      	sub	sp, #8
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff ffa4 	bl	80090e8 <SysTick_Config>
 80091a0:	4603      	mov	r3, r0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d101      	bne.n	80091be <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e054      	b.n	8009268 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	7f5b      	ldrb	r3, [r3, #29]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d105      	bne.n	80091d4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7f8 fc02 	bl	80019d8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2202      	movs	r2, #2
 80091d8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	791b      	ldrb	r3, [r3, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d10c      	bne.n	80091fc <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a22      	ldr	r2, [pc, #136]	; (8009270 <HAL_CRC_Init+0xc4>)
 80091e8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689a      	ldr	r2, [r3, #8]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f022 0218 	bic.w	r2, r2, #24
 80091f8:	609a      	str	r2, [r3, #8]
 80091fa:	e00c      	b.n	8009216 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6899      	ldr	r1, [r3, #8]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	461a      	mov	r2, r3
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f948 	bl	800949c <HAL_CRCEx_Polynomial_Set>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d001      	beq.n	8009216 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e028      	b.n	8009268 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	795b      	ldrb	r3, [r3, #5]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d105      	bne.n	800922a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f04f 32ff 	mov.w	r2, #4294967295
 8009226:	611a      	str	r2, [r3, #16]
 8009228:	e004      	b.n	8009234 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6912      	ldr	r2, [r2, #16]
 8009232:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	695a      	ldr	r2, [r3, #20]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	430a      	orrs	r2, r1
 8009248:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	699a      	ldr	r2, [r3, #24]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	430a      	orrs	r2, r1
 800925e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3708      	adds	r7, #8
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	04c11db7 	.word	0x04c11db7

08009274 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8009280:	2300      	movs	r3, #0
 8009282:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2202      	movs	r2, #2
 8009288:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f042 0201 	orr.w	r2, r2, #1
 8009298:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6a1b      	ldr	r3, [r3, #32]
 800929e:	2b03      	cmp	r3, #3
 80092a0:	d006      	beq.n	80092b0 <HAL_CRC_Calculate+0x3c>
 80092a2:	2b03      	cmp	r3, #3
 80092a4:	d829      	bhi.n	80092fa <HAL_CRC_Calculate+0x86>
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d019      	beq.n	80092de <HAL_CRC_Calculate+0x6a>
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d01e      	beq.n	80092ec <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80092ae:	e024      	b.n	80092fa <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80092b0:	2300      	movs	r3, #0
 80092b2:	617b      	str	r3, [r7, #20]
 80092b4:	e00a      	b.n	80092cc <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	441a      	add	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6812      	ldr	r2, [r2, #0]
 80092c4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	3301      	adds	r3, #1
 80092ca:	617b      	str	r3, [r7, #20]
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d3f0      	bcc.n	80092b6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	613b      	str	r3, [r7, #16]
      break;
 80092dc:	e00e      	b.n	80092fc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	68b9      	ldr	r1, [r7, #8]
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	f000 f812 	bl	800930c <CRC_Handle_8>
 80092e8:	6138      	str	r0, [r7, #16]
      break;
 80092ea:	e007      	b.n	80092fc <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 f899 	bl	8009428 <CRC_Handle_16>
 80092f6:	6138      	str	r0, [r7, #16]
      break;
 80092f8:	e000      	b.n	80092fc <HAL_CRC_Calculate+0x88>
      break;
 80092fa:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2201      	movs	r2, #1
 8009300:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8009302:	693b      	ldr	r3, [r7, #16]
}
 8009304:	4618      	mov	r0, r3
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800930c:	b480      	push	{r7}
 800930e:	b089      	sub	sp, #36	; 0x24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009318:	2300      	movs	r3, #0
 800931a:	61fb      	str	r3, [r7, #28]
 800931c:	e023      	b.n	8009366 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	4413      	add	r3, r2
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	3301      	adds	r3, #1
 8009330:	68b9      	ldr	r1, [r7, #8]
 8009332:	440b      	add	r3, r1
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009338:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	3302      	adds	r3, #2
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	440b      	add	r3, r1
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009348:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800934a:	69fb      	ldr	r3, [r7, #28]
 800934c:	009b      	lsls	r3, r3, #2
 800934e:	3303      	adds	r3, #3
 8009350:	68b9      	ldr	r1, [r7, #8]
 8009352:	440b      	add	r3, r1
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800935c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800935e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	3301      	adds	r3, #1
 8009364:	61fb      	str	r3, [r7, #28]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	089b      	lsrs	r3, r3, #2
 800936a:	69fa      	ldr	r2, [r7, #28]
 800936c:	429a      	cmp	r2, r3
 800936e:	d3d6      	bcc.n	800931e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f003 0303 	and.w	r3, r3, #3
 8009376:	2b00      	cmp	r3, #0
 8009378:	d04d      	beq.n	8009416 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f003 0303 	and.w	r3, r3, #3
 8009380:	2b01      	cmp	r3, #1
 8009382:	d107      	bne.n	8009394 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	4413      	add	r3, r2
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	6812      	ldr	r2, [r2, #0]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f003 0303 	and.w	r3, r3, #3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d116      	bne.n	80093cc <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4413      	add	r3, r2
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	021b      	lsls	r3, r3, #8
 80093aa:	b21a      	sxth	r2, r3
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	3301      	adds	r3, #1
 80093b2:	68b9      	ldr	r1, [r7, #8]
 80093b4:	440b      	add	r3, r1
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	b21b      	sxth	r3, r3
 80093ba:	4313      	orrs	r3, r2
 80093bc:	b21b      	sxth	r3, r3
 80093be:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	8b7a      	ldrh	r2, [r7, #26]
 80093ca:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f003 0303 	and.w	r3, r3, #3
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d11f      	bne.n	8009416 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4413      	add	r3, r2
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	021b      	lsls	r3, r3, #8
 80093e2:	b21a      	sxth	r2, r3
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	3301      	adds	r3, #1
 80093ea:	68b9      	ldr	r1, [r7, #8]
 80093ec:	440b      	add	r3, r1
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	b21b      	sxth	r3, r3
 80093f2:	4313      	orrs	r3, r2
 80093f4:	b21b      	sxth	r3, r3
 80093f6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	8b7a      	ldrh	r2, [r7, #26]
 8009402:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	3302      	adds	r3, #2
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	6812      	ldr	r2, [r2, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
}
 800941c:	4618      	mov	r0, r3
 800941e:	3724      	adds	r7, #36	; 0x24
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009434:	2300      	movs	r3, #0
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	e013      	b.n	8009462 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	68ba      	ldr	r2, [r7, #8]
 8009440:	4413      	add	r3, r2
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	041a      	lsls	r2, r3, #16
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	3302      	adds	r3, #2
 800944c:	68b9      	ldr	r1, [r7, #8]
 800944e:	440b      	add	r3, r1
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	4619      	mov	r1, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	430a      	orrs	r2, r1
 800945a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	3301      	adds	r3, #1
 8009460:	617b      	str	r3, [r7, #20]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	085b      	lsrs	r3, r3, #1
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	429a      	cmp	r2, r3
 800946a:	d3e6      	bcc.n	800943a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d009      	beq.n	800948a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	4413      	add	r3, r2
 8009484:	881a      	ldrh	r2, [r3, #0]
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681b      	ldr	r3, [r3, #0]
}
 8009490:	4618      	mov	r0, r3
 8009492:	371c      	adds	r7, #28
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80094ac:	231f      	movs	r3, #31
 80094ae:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80094b0:	bf00      	nop
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	1e5a      	subs	r2, r3, #1
 80094b6:	613a      	str	r2, [r7, #16]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d009      	beq.n	80094d0 <HAL_CRCEx_Polynomial_Set+0x34>
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f003 031f 	and.w	r3, r3, #31
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	fa22 f303 	lsr.w	r3, r2, r3
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0f0      	beq.n	80094b2 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b18      	cmp	r3, #24
 80094d4:	d846      	bhi.n	8009564 <HAL_CRCEx_Polynomial_Set+0xc8>
 80094d6:	a201      	add	r2, pc, #4	; (adr r2, 80094dc <HAL_CRCEx_Polynomial_Set+0x40>)
 80094d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094dc:	0800956b 	.word	0x0800956b
 80094e0:	08009565 	.word	0x08009565
 80094e4:	08009565 	.word	0x08009565
 80094e8:	08009565 	.word	0x08009565
 80094ec:	08009565 	.word	0x08009565
 80094f0:	08009565 	.word	0x08009565
 80094f4:	08009565 	.word	0x08009565
 80094f8:	08009565 	.word	0x08009565
 80094fc:	08009559 	.word	0x08009559
 8009500:	08009565 	.word	0x08009565
 8009504:	08009565 	.word	0x08009565
 8009508:	08009565 	.word	0x08009565
 800950c:	08009565 	.word	0x08009565
 8009510:	08009565 	.word	0x08009565
 8009514:	08009565 	.word	0x08009565
 8009518:	08009565 	.word	0x08009565
 800951c:	0800954d 	.word	0x0800954d
 8009520:	08009565 	.word	0x08009565
 8009524:	08009565 	.word	0x08009565
 8009528:	08009565 	.word	0x08009565
 800952c:	08009565 	.word	0x08009565
 8009530:	08009565 	.word	0x08009565
 8009534:	08009565 	.word	0x08009565
 8009538:	08009565 	.word	0x08009565
 800953c:	08009541 	.word	0x08009541
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2b06      	cmp	r3, #6
 8009544:	d913      	bls.n	800956e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800954a:	e010      	b.n	800956e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	2b07      	cmp	r3, #7
 8009550:	d90f      	bls.n	8009572 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009556:	e00c      	b.n	8009572 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2b0f      	cmp	r3, #15
 800955c:	d90b      	bls.n	8009576 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009562:	e008      	b.n	8009576 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	75fb      	strb	r3, [r7, #23]
      break;
 8009568:	e006      	b.n	8009578 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800956a:	bf00      	nop
 800956c:	e004      	b.n	8009578 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800956e:	bf00      	nop
 8009570:	e002      	b.n	8009578 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009572:	bf00      	nop
 8009574:	e000      	b.n	8009578 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009576:	bf00      	nop
  }
  if (status == HAL_OK)
 8009578:	7dfb      	ldrb	r3, [r7, #23]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10d      	bne.n	800959a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68ba      	ldr	r2, [r7, #8]
 8009584:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	f023 0118 	bic.w	r1, r3, #24
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	430a      	orrs	r2, r1
 8009598:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800959a:	7dfb      	ldrb	r3, [r7, #23]
}
 800959c:	4618      	mov	r0, r3
 800959e:	371c      	adds	r7, #28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80095b0:	f7fd fb6e 	bl	8006c90 <HAL_GetTick>
 80095b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d101      	bne.n	80095c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e314      	b.n	8009bea <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a66      	ldr	r2, [pc, #408]	; (8009760 <HAL_DMA_Init+0x1b8>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d04a      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a65      	ldr	r2, [pc, #404]	; (8009764 <HAL_DMA_Init+0x1bc>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d045      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a63      	ldr	r2, [pc, #396]	; (8009768 <HAL_DMA_Init+0x1c0>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d040      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a62      	ldr	r2, [pc, #392]	; (800976c <HAL_DMA_Init+0x1c4>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d03b      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a60      	ldr	r2, [pc, #384]	; (8009770 <HAL_DMA_Init+0x1c8>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d036      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a5f      	ldr	r2, [pc, #380]	; (8009774 <HAL_DMA_Init+0x1cc>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d031      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a5d      	ldr	r2, [pc, #372]	; (8009778 <HAL_DMA_Init+0x1d0>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d02c      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a5c      	ldr	r2, [pc, #368]	; (800977c <HAL_DMA_Init+0x1d4>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d027      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a5a      	ldr	r2, [pc, #360]	; (8009780 <HAL_DMA_Init+0x1d8>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d022      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a59      	ldr	r2, [pc, #356]	; (8009784 <HAL_DMA_Init+0x1dc>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d01d      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a57      	ldr	r2, [pc, #348]	; (8009788 <HAL_DMA_Init+0x1e0>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d018      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a56      	ldr	r2, [pc, #344]	; (800978c <HAL_DMA_Init+0x1e4>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d013      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a54      	ldr	r2, [pc, #336]	; (8009790 <HAL_DMA_Init+0x1e8>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00e      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a53      	ldr	r2, [pc, #332]	; (8009794 <HAL_DMA_Init+0x1ec>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d009      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a51      	ldr	r2, [pc, #324]	; (8009798 <HAL_DMA_Init+0x1f0>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d004      	beq.n	8009660 <HAL_DMA_Init+0xb8>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a50      	ldr	r2, [pc, #320]	; (800979c <HAL_DMA_Init+0x1f4>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d101      	bne.n	8009664 <HAL_DMA_Init+0xbc>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <HAL_DMA_Init+0xbe>
 8009664:	2300      	movs	r3, #0
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 813c 	beq.w	80098e4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2202      	movs	r2, #2
 8009670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a37      	ldr	r2, [pc, #220]	; (8009760 <HAL_DMA_Init+0x1b8>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d04a      	beq.n	800971c <HAL_DMA_Init+0x174>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a36      	ldr	r2, [pc, #216]	; (8009764 <HAL_DMA_Init+0x1bc>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d045      	beq.n	800971c <HAL_DMA_Init+0x174>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a34      	ldr	r2, [pc, #208]	; (8009768 <HAL_DMA_Init+0x1c0>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d040      	beq.n	800971c <HAL_DMA_Init+0x174>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a33      	ldr	r2, [pc, #204]	; (800976c <HAL_DMA_Init+0x1c4>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d03b      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a31      	ldr	r2, [pc, #196]	; (8009770 <HAL_DMA_Init+0x1c8>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d036      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a30      	ldr	r2, [pc, #192]	; (8009774 <HAL_DMA_Init+0x1cc>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d031      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a2e      	ldr	r2, [pc, #184]	; (8009778 <HAL_DMA_Init+0x1d0>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d02c      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a2d      	ldr	r2, [pc, #180]	; (800977c <HAL_DMA_Init+0x1d4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d027      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a2b      	ldr	r2, [pc, #172]	; (8009780 <HAL_DMA_Init+0x1d8>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d022      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a2a      	ldr	r2, [pc, #168]	; (8009784 <HAL_DMA_Init+0x1dc>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d01d      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a28      	ldr	r2, [pc, #160]	; (8009788 <HAL_DMA_Init+0x1e0>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d018      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a27      	ldr	r2, [pc, #156]	; (800978c <HAL_DMA_Init+0x1e4>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d013      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a25      	ldr	r2, [pc, #148]	; (8009790 <HAL_DMA_Init+0x1e8>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d00e      	beq.n	800971c <HAL_DMA_Init+0x174>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a24      	ldr	r2, [pc, #144]	; (8009794 <HAL_DMA_Init+0x1ec>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d009      	beq.n	800971c <HAL_DMA_Init+0x174>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a22      	ldr	r2, [pc, #136]	; (8009798 <HAL_DMA_Init+0x1f0>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d004      	beq.n	800971c <HAL_DMA_Init+0x174>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a21      	ldr	r2, [pc, #132]	; (800979c <HAL_DMA_Init+0x1f4>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d108      	bne.n	800972e <HAL_DMA_Init+0x186>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 0201 	bic.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]
 800972c:	e007      	b.n	800973e <HAL_DMA_Init+0x196>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f022 0201 	bic.w	r2, r2, #1
 800973c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800973e:	e02f      	b.n	80097a0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009740:	f7fd faa6 	bl	8006c90 <HAL_GetTick>
 8009744:	4602      	mov	r2, r0
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	1ad3      	subs	r3, r2, r3
 800974a:	2b05      	cmp	r3, #5
 800974c:	d928      	bls.n	80097a0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2220      	movs	r2, #32
 8009752:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2203      	movs	r2, #3
 8009758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e244      	b.n	8009bea <HAL_DMA_Init+0x642>
 8009760:	40020010 	.word	0x40020010
 8009764:	40020028 	.word	0x40020028
 8009768:	40020040 	.word	0x40020040
 800976c:	40020058 	.word	0x40020058
 8009770:	40020070 	.word	0x40020070
 8009774:	40020088 	.word	0x40020088
 8009778:	400200a0 	.word	0x400200a0
 800977c:	400200b8 	.word	0x400200b8
 8009780:	40020410 	.word	0x40020410
 8009784:	40020428 	.word	0x40020428
 8009788:	40020440 	.word	0x40020440
 800978c:	40020458 	.word	0x40020458
 8009790:	40020470 	.word	0x40020470
 8009794:	40020488 	.word	0x40020488
 8009798:	400204a0 	.word	0x400204a0
 800979c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0301 	and.w	r3, r3, #1
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1c8      	bne.n	8009740 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	4b84      	ldr	r3, [pc, #528]	; (80099cc <HAL_DMA_Init+0x424>)
 80097ba:	4013      	ands	r3, r2
 80097bc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80097c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80097d2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	699b      	ldr	r3, [r3, #24]
 80097d8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80097de:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f0:	2b04      	cmp	r3, #4
 80097f2:	d107      	bne.n	8009804 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097fc:	4313      	orrs	r3, r2
 80097fe:	697a      	ldr	r2, [r7, #20]
 8009800:	4313      	orrs	r3, r2
 8009802:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	2b28      	cmp	r3, #40	; 0x28
 800980a:	d903      	bls.n	8009814 <HAL_DMA_Init+0x26c>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	2b2e      	cmp	r3, #46	; 0x2e
 8009812:	d91f      	bls.n	8009854 <HAL_DMA_Init+0x2ac>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	2b3e      	cmp	r3, #62	; 0x3e
 800981a:	d903      	bls.n	8009824 <HAL_DMA_Init+0x27c>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	2b42      	cmp	r3, #66	; 0x42
 8009822:	d917      	bls.n	8009854 <HAL_DMA_Init+0x2ac>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2b46      	cmp	r3, #70	; 0x46
 800982a:	d903      	bls.n	8009834 <HAL_DMA_Init+0x28c>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b48      	cmp	r3, #72	; 0x48
 8009832:	d90f      	bls.n	8009854 <HAL_DMA_Init+0x2ac>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	2b4e      	cmp	r3, #78	; 0x4e
 800983a:	d903      	bls.n	8009844 <HAL_DMA_Init+0x29c>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	2b52      	cmp	r3, #82	; 0x52
 8009842:	d907      	bls.n	8009854 <HAL_DMA_Init+0x2ac>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	2b73      	cmp	r3, #115	; 0x73
 800984a:	d905      	bls.n	8009858 <HAL_DMA_Init+0x2b0>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	2b77      	cmp	r3, #119	; 0x77
 8009852:	d801      	bhi.n	8009858 <HAL_DMA_Init+0x2b0>
 8009854:	2301      	movs	r3, #1
 8009856:	e000      	b.n	800985a <HAL_DMA_Init+0x2b2>
 8009858:	2300      	movs	r3, #0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009864:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	695b      	ldr	r3, [r3, #20]
 8009874:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f023 0307 	bic.w	r3, r3, #7
 800987c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	4313      	orrs	r3, r2
 8009886:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	2b04      	cmp	r3, #4
 800988e:	d117      	bne.n	80098c0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00e      	beq.n	80098c0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f001 ff28 	bl	800b6f8 <DMA_CheckFifoParam>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d008      	beq.n	80098c0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2240      	movs	r2, #64	; 0x40
 80098b2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e194      	b.n	8009bea <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f001 fe63 	bl	800b594 <DMA_CalcBaseAndBitshift>
 80098ce:	4603      	mov	r3, r0
 80098d0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d6:	f003 031f 	and.w	r3, r3, #31
 80098da:	223f      	movs	r2, #63	; 0x3f
 80098dc:	409a      	lsls	r2, r3
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	609a      	str	r2, [r3, #8]
 80098e2:	e0ca      	b.n	8009a7a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a39      	ldr	r2, [pc, #228]	; (80099d0 <HAL_DMA_Init+0x428>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d022      	beq.n	8009934 <HAL_DMA_Init+0x38c>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a38      	ldr	r2, [pc, #224]	; (80099d4 <HAL_DMA_Init+0x42c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d01d      	beq.n	8009934 <HAL_DMA_Init+0x38c>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a36      	ldr	r2, [pc, #216]	; (80099d8 <HAL_DMA_Init+0x430>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d018      	beq.n	8009934 <HAL_DMA_Init+0x38c>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a35      	ldr	r2, [pc, #212]	; (80099dc <HAL_DMA_Init+0x434>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d013      	beq.n	8009934 <HAL_DMA_Init+0x38c>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a33      	ldr	r2, [pc, #204]	; (80099e0 <HAL_DMA_Init+0x438>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d00e      	beq.n	8009934 <HAL_DMA_Init+0x38c>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a32      	ldr	r2, [pc, #200]	; (80099e4 <HAL_DMA_Init+0x43c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d009      	beq.n	8009934 <HAL_DMA_Init+0x38c>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a30      	ldr	r2, [pc, #192]	; (80099e8 <HAL_DMA_Init+0x440>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d004      	beq.n	8009934 <HAL_DMA_Init+0x38c>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a2f      	ldr	r2, [pc, #188]	; (80099ec <HAL_DMA_Init+0x444>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d101      	bne.n	8009938 <HAL_DMA_Init+0x390>
 8009934:	2301      	movs	r3, #1
 8009936:	e000      	b.n	800993a <HAL_DMA_Init+0x392>
 8009938:	2300      	movs	r3, #0
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 8094 	beq.w	8009a68 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a22      	ldr	r2, [pc, #136]	; (80099d0 <HAL_DMA_Init+0x428>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d021      	beq.n	800998e <HAL_DMA_Init+0x3e6>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a21      	ldr	r2, [pc, #132]	; (80099d4 <HAL_DMA_Init+0x42c>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d01c      	beq.n	800998e <HAL_DMA_Init+0x3e6>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a1f      	ldr	r2, [pc, #124]	; (80099d8 <HAL_DMA_Init+0x430>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d017      	beq.n	800998e <HAL_DMA_Init+0x3e6>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a1e      	ldr	r2, [pc, #120]	; (80099dc <HAL_DMA_Init+0x434>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d012      	beq.n	800998e <HAL_DMA_Init+0x3e6>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a1c      	ldr	r2, [pc, #112]	; (80099e0 <HAL_DMA_Init+0x438>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d00d      	beq.n	800998e <HAL_DMA_Init+0x3e6>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a1b      	ldr	r2, [pc, #108]	; (80099e4 <HAL_DMA_Init+0x43c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d008      	beq.n	800998e <HAL_DMA_Init+0x3e6>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a19      	ldr	r2, [pc, #100]	; (80099e8 <HAL_DMA_Init+0x440>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d003      	beq.n	800998e <HAL_DMA_Init+0x3e6>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a18      	ldr	r2, [pc, #96]	; (80099ec <HAL_DMA_Init+0x444>)
 800998c:	4293      	cmp	r3, r2
 800998e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	4b11      	ldr	r3, [pc, #68]	; (80099f0 <HAL_DMA_Init+0x448>)
 80099ac:	4013      	ands	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	2b40      	cmp	r3, #64	; 0x40
 80099b6:	d01d      	beq.n	80099f4 <HAL_DMA_Init+0x44c>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	2b80      	cmp	r3, #128	; 0x80
 80099be:	d102      	bne.n	80099c6 <HAL_DMA_Init+0x41e>
 80099c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099c4:	e017      	b.n	80099f6 <HAL_DMA_Init+0x44e>
 80099c6:	2300      	movs	r3, #0
 80099c8:	e015      	b.n	80099f6 <HAL_DMA_Init+0x44e>
 80099ca:	bf00      	nop
 80099cc:	fe10803f 	.word	0xfe10803f
 80099d0:	58025408 	.word	0x58025408
 80099d4:	5802541c 	.word	0x5802541c
 80099d8:	58025430 	.word	0x58025430
 80099dc:	58025444 	.word	0x58025444
 80099e0:	58025458 	.word	0x58025458
 80099e4:	5802546c 	.word	0x5802546c
 80099e8:	58025480 	.word	0x58025480
 80099ec:	58025494 	.word	0x58025494
 80099f0:	fffe000f 	.word	0xfffe000f
 80099f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	68d2      	ldr	r2, [r2, #12]
 80099fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80099fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009a04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009a0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009a14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	69db      	ldr	r3, [r3, #28]
 8009a1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009a1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009a24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	4b6e      	ldr	r3, [pc, #440]	; (8009bf4 <HAL_DMA_Init+0x64c>)
 8009a3c:	4413      	add	r3, r2
 8009a3e:	4a6e      	ldr	r2, [pc, #440]	; (8009bf8 <HAL_DMA_Init+0x650>)
 8009a40:	fba2 2303 	umull	r2, r3, r2, r3
 8009a44:	091b      	lsrs	r3, r3, #4
 8009a46:	009a      	lsls	r2, r3, #2
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 fda1 	bl	800b594 <DMA_CalcBaseAndBitshift>
 8009a52:	4603      	mov	r3, r0
 8009a54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a5a:	f003 031f 	and.w	r3, r3, #31
 8009a5e:	2201      	movs	r2, #1
 8009a60:	409a      	lsls	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	605a      	str	r2, [r3, #4]
 8009a66:	e008      	b.n	8009a7a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2240      	movs	r2, #64	; 0x40
 8009a6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2203      	movs	r2, #3
 8009a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e0b7      	b.n	8009bea <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a5f      	ldr	r2, [pc, #380]	; (8009bfc <HAL_DMA_Init+0x654>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d072      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a5d      	ldr	r2, [pc, #372]	; (8009c00 <HAL_DMA_Init+0x658>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d06d      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a5c      	ldr	r2, [pc, #368]	; (8009c04 <HAL_DMA_Init+0x65c>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d068      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a5a      	ldr	r2, [pc, #360]	; (8009c08 <HAL_DMA_Init+0x660>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d063      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a59      	ldr	r2, [pc, #356]	; (8009c0c <HAL_DMA_Init+0x664>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d05e      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a57      	ldr	r2, [pc, #348]	; (8009c10 <HAL_DMA_Init+0x668>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d059      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a56      	ldr	r2, [pc, #344]	; (8009c14 <HAL_DMA_Init+0x66c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d054      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a54      	ldr	r2, [pc, #336]	; (8009c18 <HAL_DMA_Init+0x670>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d04f      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a53      	ldr	r2, [pc, #332]	; (8009c1c <HAL_DMA_Init+0x674>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d04a      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a51      	ldr	r2, [pc, #324]	; (8009c20 <HAL_DMA_Init+0x678>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d045      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a50      	ldr	r2, [pc, #320]	; (8009c24 <HAL_DMA_Init+0x67c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d040      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a4e      	ldr	r2, [pc, #312]	; (8009c28 <HAL_DMA_Init+0x680>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d03b      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a4d      	ldr	r2, [pc, #308]	; (8009c2c <HAL_DMA_Init+0x684>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d036      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a4b      	ldr	r2, [pc, #300]	; (8009c30 <HAL_DMA_Init+0x688>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d031      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a4a      	ldr	r2, [pc, #296]	; (8009c34 <HAL_DMA_Init+0x68c>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d02c      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a48      	ldr	r2, [pc, #288]	; (8009c38 <HAL_DMA_Init+0x690>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d027      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a47      	ldr	r2, [pc, #284]	; (8009c3c <HAL_DMA_Init+0x694>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d022      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a45      	ldr	r2, [pc, #276]	; (8009c40 <HAL_DMA_Init+0x698>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01d      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a44      	ldr	r2, [pc, #272]	; (8009c44 <HAL_DMA_Init+0x69c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d018      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a42      	ldr	r2, [pc, #264]	; (8009c48 <HAL_DMA_Init+0x6a0>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d013      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a41      	ldr	r2, [pc, #260]	; (8009c4c <HAL_DMA_Init+0x6a4>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d00e      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a3f      	ldr	r2, [pc, #252]	; (8009c50 <HAL_DMA_Init+0x6a8>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d009      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a3e      	ldr	r2, [pc, #248]	; (8009c54 <HAL_DMA_Init+0x6ac>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d004      	beq.n	8009b6a <HAL_DMA_Init+0x5c2>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a3c      	ldr	r2, [pc, #240]	; (8009c58 <HAL_DMA_Init+0x6b0>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d101      	bne.n	8009b6e <HAL_DMA_Init+0x5c6>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <HAL_DMA_Init+0x5c8>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d032      	beq.n	8009bda <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f001 fe3b 	bl	800b7f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	2b80      	cmp	r3, #128	; 0x80
 8009b80:	d102      	bne.n	8009b88 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b90:	b2d2      	uxtb	r2, r2
 8009b92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009b9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d010      	beq.n	8009bc8 <HAL_DMA_Init+0x620>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d80c      	bhi.n	8009bc8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f001 feb8 	bl	800b924 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009bc4:	605a      	str	r2, [r3, #4]
 8009bc6:	e008      	b.n	8009bda <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	a7fdabf8 	.word	0xa7fdabf8
 8009bf8:	cccccccd 	.word	0xcccccccd
 8009bfc:	40020010 	.word	0x40020010
 8009c00:	40020028 	.word	0x40020028
 8009c04:	40020040 	.word	0x40020040
 8009c08:	40020058 	.word	0x40020058
 8009c0c:	40020070 	.word	0x40020070
 8009c10:	40020088 	.word	0x40020088
 8009c14:	400200a0 	.word	0x400200a0
 8009c18:	400200b8 	.word	0x400200b8
 8009c1c:	40020410 	.word	0x40020410
 8009c20:	40020428 	.word	0x40020428
 8009c24:	40020440 	.word	0x40020440
 8009c28:	40020458 	.word	0x40020458
 8009c2c:	40020470 	.word	0x40020470
 8009c30:	40020488 	.word	0x40020488
 8009c34:	400204a0 	.word	0x400204a0
 8009c38:	400204b8 	.word	0x400204b8
 8009c3c:	58025408 	.word	0x58025408
 8009c40:	5802541c 	.word	0x5802541c
 8009c44:	58025430 	.word	0x58025430
 8009c48:	58025444 	.word	0x58025444
 8009c4c:	58025458 	.word	0x58025458
 8009c50:	5802546c 	.word	0x5802546c
 8009c54:	58025480 	.word	0x58025480
 8009c58:	58025494 	.word	0x58025494

08009c5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009c64:	f7fd f814 	bl	8006c90 <HAL_GetTick>
 8009c68:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d101      	bne.n	8009c74 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e2dc      	b.n	800a22e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d008      	beq.n	8009c92 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2280      	movs	r2, #128	; 0x80
 8009c84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	e2cd      	b.n	800a22e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a76      	ldr	r2, [pc, #472]	; (8009e70 <HAL_DMA_Abort+0x214>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d04a      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a74      	ldr	r2, [pc, #464]	; (8009e74 <HAL_DMA_Abort+0x218>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d045      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a73      	ldr	r2, [pc, #460]	; (8009e78 <HAL_DMA_Abort+0x21c>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d040      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a71      	ldr	r2, [pc, #452]	; (8009e7c <HAL_DMA_Abort+0x220>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d03b      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a70      	ldr	r2, [pc, #448]	; (8009e80 <HAL_DMA_Abort+0x224>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d036      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a6e      	ldr	r2, [pc, #440]	; (8009e84 <HAL_DMA_Abort+0x228>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d031      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a6d      	ldr	r2, [pc, #436]	; (8009e88 <HAL_DMA_Abort+0x22c>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d02c      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a6b      	ldr	r2, [pc, #428]	; (8009e8c <HAL_DMA_Abort+0x230>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d027      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a6a      	ldr	r2, [pc, #424]	; (8009e90 <HAL_DMA_Abort+0x234>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d022      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a68      	ldr	r2, [pc, #416]	; (8009e94 <HAL_DMA_Abort+0x238>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d01d      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a67      	ldr	r2, [pc, #412]	; (8009e98 <HAL_DMA_Abort+0x23c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d018      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a65      	ldr	r2, [pc, #404]	; (8009e9c <HAL_DMA_Abort+0x240>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d013      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a64      	ldr	r2, [pc, #400]	; (8009ea0 <HAL_DMA_Abort+0x244>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00e      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a62      	ldr	r2, [pc, #392]	; (8009ea4 <HAL_DMA_Abort+0x248>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d009      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a61      	ldr	r2, [pc, #388]	; (8009ea8 <HAL_DMA_Abort+0x24c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d004      	beq.n	8009d32 <HAL_DMA_Abort+0xd6>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a5f      	ldr	r2, [pc, #380]	; (8009eac <HAL_DMA_Abort+0x250>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d101      	bne.n	8009d36 <HAL_DMA_Abort+0xda>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e000      	b.n	8009d38 <HAL_DMA_Abort+0xdc>
 8009d36:	2300      	movs	r3, #0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d013      	beq.n	8009d64 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f022 021e 	bic.w	r2, r2, #30
 8009d4a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	695a      	ldr	r2, [r3, #20]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d5a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	e00a      	b.n	8009d7a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 020e 	bic.w	r2, r2, #14
 8009d72:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a3c      	ldr	r2, [pc, #240]	; (8009e70 <HAL_DMA_Abort+0x214>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d072      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a3a      	ldr	r2, [pc, #232]	; (8009e74 <HAL_DMA_Abort+0x218>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d06d      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a39      	ldr	r2, [pc, #228]	; (8009e78 <HAL_DMA_Abort+0x21c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d068      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a37      	ldr	r2, [pc, #220]	; (8009e7c <HAL_DMA_Abort+0x220>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d063      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a36      	ldr	r2, [pc, #216]	; (8009e80 <HAL_DMA_Abort+0x224>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d05e      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a34      	ldr	r2, [pc, #208]	; (8009e84 <HAL_DMA_Abort+0x228>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d059      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a33      	ldr	r2, [pc, #204]	; (8009e88 <HAL_DMA_Abort+0x22c>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d054      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a31      	ldr	r2, [pc, #196]	; (8009e8c <HAL_DMA_Abort+0x230>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d04f      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a30      	ldr	r2, [pc, #192]	; (8009e90 <HAL_DMA_Abort+0x234>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d04a      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a2e      	ldr	r2, [pc, #184]	; (8009e94 <HAL_DMA_Abort+0x238>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d045      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a2d      	ldr	r2, [pc, #180]	; (8009e98 <HAL_DMA_Abort+0x23c>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d040      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a2b      	ldr	r2, [pc, #172]	; (8009e9c <HAL_DMA_Abort+0x240>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d03b      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a2a      	ldr	r2, [pc, #168]	; (8009ea0 <HAL_DMA_Abort+0x244>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d036      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a28      	ldr	r2, [pc, #160]	; (8009ea4 <HAL_DMA_Abort+0x248>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d031      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a27      	ldr	r2, [pc, #156]	; (8009ea8 <HAL_DMA_Abort+0x24c>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d02c      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a25      	ldr	r2, [pc, #148]	; (8009eac <HAL_DMA_Abort+0x250>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d027      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a24      	ldr	r2, [pc, #144]	; (8009eb0 <HAL_DMA_Abort+0x254>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d022      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a22      	ldr	r2, [pc, #136]	; (8009eb4 <HAL_DMA_Abort+0x258>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d01d      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a21      	ldr	r2, [pc, #132]	; (8009eb8 <HAL_DMA_Abort+0x25c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d018      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a1f      	ldr	r2, [pc, #124]	; (8009ebc <HAL_DMA_Abort+0x260>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d013      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a1e      	ldr	r2, [pc, #120]	; (8009ec0 <HAL_DMA_Abort+0x264>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d00e      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a1c      	ldr	r2, [pc, #112]	; (8009ec4 <HAL_DMA_Abort+0x268>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d009      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a1b      	ldr	r2, [pc, #108]	; (8009ec8 <HAL_DMA_Abort+0x26c>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d004      	beq.n	8009e6a <HAL_DMA_Abort+0x20e>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a19      	ldr	r2, [pc, #100]	; (8009ecc <HAL_DMA_Abort+0x270>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d132      	bne.n	8009ed0 <HAL_DMA_Abort+0x274>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e031      	b.n	8009ed2 <HAL_DMA_Abort+0x276>
 8009e6e:	bf00      	nop
 8009e70:	40020010 	.word	0x40020010
 8009e74:	40020028 	.word	0x40020028
 8009e78:	40020040 	.word	0x40020040
 8009e7c:	40020058 	.word	0x40020058
 8009e80:	40020070 	.word	0x40020070
 8009e84:	40020088 	.word	0x40020088
 8009e88:	400200a0 	.word	0x400200a0
 8009e8c:	400200b8 	.word	0x400200b8
 8009e90:	40020410 	.word	0x40020410
 8009e94:	40020428 	.word	0x40020428
 8009e98:	40020440 	.word	0x40020440
 8009e9c:	40020458 	.word	0x40020458
 8009ea0:	40020470 	.word	0x40020470
 8009ea4:	40020488 	.word	0x40020488
 8009ea8:	400204a0 	.word	0x400204a0
 8009eac:	400204b8 	.word	0x400204b8
 8009eb0:	58025408 	.word	0x58025408
 8009eb4:	5802541c 	.word	0x5802541c
 8009eb8:	58025430 	.word	0x58025430
 8009ebc:	58025444 	.word	0x58025444
 8009ec0:	58025458 	.word	0x58025458
 8009ec4:	5802546c 	.word	0x5802546c
 8009ec8:	58025480 	.word	0x58025480
 8009ecc:	58025494 	.word	0x58025494
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d007      	beq.n	8009ee6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ee4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a6d      	ldr	r2, [pc, #436]	; (800a0a0 <HAL_DMA_Abort+0x444>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d04a      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a6b      	ldr	r2, [pc, #428]	; (800a0a4 <HAL_DMA_Abort+0x448>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d045      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a6a      	ldr	r2, [pc, #424]	; (800a0a8 <HAL_DMA_Abort+0x44c>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d040      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a68      	ldr	r2, [pc, #416]	; (800a0ac <HAL_DMA_Abort+0x450>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d03b      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a67      	ldr	r2, [pc, #412]	; (800a0b0 <HAL_DMA_Abort+0x454>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d036      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a65      	ldr	r2, [pc, #404]	; (800a0b4 <HAL_DMA_Abort+0x458>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d031      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a64      	ldr	r2, [pc, #400]	; (800a0b8 <HAL_DMA_Abort+0x45c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d02c      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a62      	ldr	r2, [pc, #392]	; (800a0bc <HAL_DMA_Abort+0x460>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d027      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a61      	ldr	r2, [pc, #388]	; (800a0c0 <HAL_DMA_Abort+0x464>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d022      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a5f      	ldr	r2, [pc, #380]	; (800a0c4 <HAL_DMA_Abort+0x468>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d01d      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a5e      	ldr	r2, [pc, #376]	; (800a0c8 <HAL_DMA_Abort+0x46c>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d018      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a5c      	ldr	r2, [pc, #368]	; (800a0cc <HAL_DMA_Abort+0x470>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d013      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a5b      	ldr	r2, [pc, #364]	; (800a0d0 <HAL_DMA_Abort+0x474>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d00e      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a59      	ldr	r2, [pc, #356]	; (800a0d4 <HAL_DMA_Abort+0x478>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d009      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a58      	ldr	r2, [pc, #352]	; (800a0d8 <HAL_DMA_Abort+0x47c>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d004      	beq.n	8009f86 <HAL_DMA_Abort+0x32a>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a56      	ldr	r2, [pc, #344]	; (800a0dc <HAL_DMA_Abort+0x480>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d108      	bne.n	8009f98 <HAL_DMA_Abort+0x33c>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f022 0201 	bic.w	r2, r2, #1
 8009f94:	601a      	str	r2, [r3, #0]
 8009f96:	e007      	b.n	8009fa8 <HAL_DMA_Abort+0x34c>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0201 	bic.w	r2, r2, #1
 8009fa6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009fa8:	e013      	b.n	8009fd2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009faa:	f7fc fe71 	bl	8006c90 <HAL_GetTick>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	1ad3      	subs	r3, r2, r3
 8009fb4:	2b05      	cmp	r3, #5
 8009fb6:	d90c      	bls.n	8009fd2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2220      	movs	r2, #32
 8009fbc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e12d      	b.n	800a22e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0301 	and.w	r3, r3, #1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1e5      	bne.n	8009faa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a2f      	ldr	r2, [pc, #188]	; (800a0a0 <HAL_DMA_Abort+0x444>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d04a      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a2d      	ldr	r2, [pc, #180]	; (800a0a4 <HAL_DMA_Abort+0x448>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d045      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a2c      	ldr	r2, [pc, #176]	; (800a0a8 <HAL_DMA_Abort+0x44c>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d040      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a2a      	ldr	r2, [pc, #168]	; (800a0ac <HAL_DMA_Abort+0x450>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d03b      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a29      	ldr	r2, [pc, #164]	; (800a0b0 <HAL_DMA_Abort+0x454>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d036      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a27      	ldr	r2, [pc, #156]	; (800a0b4 <HAL_DMA_Abort+0x458>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d031      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a26      	ldr	r2, [pc, #152]	; (800a0b8 <HAL_DMA_Abort+0x45c>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d02c      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a24      	ldr	r2, [pc, #144]	; (800a0bc <HAL_DMA_Abort+0x460>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d027      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a23      	ldr	r2, [pc, #140]	; (800a0c0 <HAL_DMA_Abort+0x464>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d022      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a21      	ldr	r2, [pc, #132]	; (800a0c4 <HAL_DMA_Abort+0x468>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d01d      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a20      	ldr	r2, [pc, #128]	; (800a0c8 <HAL_DMA_Abort+0x46c>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d018      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a1e      	ldr	r2, [pc, #120]	; (800a0cc <HAL_DMA_Abort+0x470>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d013      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a1d      	ldr	r2, [pc, #116]	; (800a0d0 <HAL_DMA_Abort+0x474>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d00e      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a1b      	ldr	r2, [pc, #108]	; (800a0d4 <HAL_DMA_Abort+0x478>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d009      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a1a      	ldr	r2, [pc, #104]	; (800a0d8 <HAL_DMA_Abort+0x47c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d004      	beq.n	800a07e <HAL_DMA_Abort+0x422>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a18      	ldr	r2, [pc, #96]	; (800a0dc <HAL_DMA_Abort+0x480>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d101      	bne.n	800a082 <HAL_DMA_Abort+0x426>
 800a07e:	2301      	movs	r3, #1
 800a080:	e000      	b.n	800a084 <HAL_DMA_Abort+0x428>
 800a082:	2300      	movs	r3, #0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d02b      	beq.n	800a0e0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a092:	f003 031f 	and.w	r3, r3, #31
 800a096:	223f      	movs	r2, #63	; 0x3f
 800a098:	409a      	lsls	r2, r3
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	609a      	str	r2, [r3, #8]
 800a09e:	e02a      	b.n	800a0f6 <HAL_DMA_Abort+0x49a>
 800a0a0:	40020010 	.word	0x40020010
 800a0a4:	40020028 	.word	0x40020028
 800a0a8:	40020040 	.word	0x40020040
 800a0ac:	40020058 	.word	0x40020058
 800a0b0:	40020070 	.word	0x40020070
 800a0b4:	40020088 	.word	0x40020088
 800a0b8:	400200a0 	.word	0x400200a0
 800a0bc:	400200b8 	.word	0x400200b8
 800a0c0:	40020410 	.word	0x40020410
 800a0c4:	40020428 	.word	0x40020428
 800a0c8:	40020440 	.word	0x40020440
 800a0cc:	40020458 	.word	0x40020458
 800a0d0:	40020470 	.word	0x40020470
 800a0d4:	40020488 	.word	0x40020488
 800a0d8:	400204a0 	.word	0x400204a0
 800a0dc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0e4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ea:	f003 031f 	and.w	r3, r3, #31
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	409a      	lsls	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a4f      	ldr	r2, [pc, #316]	; (800a238 <HAL_DMA_Abort+0x5dc>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d072      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a4d      	ldr	r2, [pc, #308]	; (800a23c <HAL_DMA_Abort+0x5e0>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d06d      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a4c      	ldr	r2, [pc, #304]	; (800a240 <HAL_DMA_Abort+0x5e4>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d068      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	4a4a      	ldr	r2, [pc, #296]	; (800a244 <HAL_DMA_Abort+0x5e8>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d063      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a49      	ldr	r2, [pc, #292]	; (800a248 <HAL_DMA_Abort+0x5ec>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d05e      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a47      	ldr	r2, [pc, #284]	; (800a24c <HAL_DMA_Abort+0x5f0>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d059      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a46      	ldr	r2, [pc, #280]	; (800a250 <HAL_DMA_Abort+0x5f4>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d054      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a44      	ldr	r2, [pc, #272]	; (800a254 <HAL_DMA_Abort+0x5f8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d04f      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a43      	ldr	r2, [pc, #268]	; (800a258 <HAL_DMA_Abort+0x5fc>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d04a      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a41      	ldr	r2, [pc, #260]	; (800a25c <HAL_DMA_Abort+0x600>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d045      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a40      	ldr	r2, [pc, #256]	; (800a260 <HAL_DMA_Abort+0x604>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d040      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a3e      	ldr	r2, [pc, #248]	; (800a264 <HAL_DMA_Abort+0x608>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d03b      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a3d      	ldr	r2, [pc, #244]	; (800a268 <HAL_DMA_Abort+0x60c>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d036      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a3b      	ldr	r2, [pc, #236]	; (800a26c <HAL_DMA_Abort+0x610>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d031      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a3a      	ldr	r2, [pc, #232]	; (800a270 <HAL_DMA_Abort+0x614>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d02c      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a38      	ldr	r2, [pc, #224]	; (800a274 <HAL_DMA_Abort+0x618>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d027      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a37      	ldr	r2, [pc, #220]	; (800a278 <HAL_DMA_Abort+0x61c>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d022      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a35      	ldr	r2, [pc, #212]	; (800a27c <HAL_DMA_Abort+0x620>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d01d      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a34      	ldr	r2, [pc, #208]	; (800a280 <HAL_DMA_Abort+0x624>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d018      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a32      	ldr	r2, [pc, #200]	; (800a284 <HAL_DMA_Abort+0x628>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d013      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a31      	ldr	r2, [pc, #196]	; (800a288 <HAL_DMA_Abort+0x62c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d00e      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a2f      	ldr	r2, [pc, #188]	; (800a28c <HAL_DMA_Abort+0x630>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d009      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a2e      	ldr	r2, [pc, #184]	; (800a290 <HAL_DMA_Abort+0x634>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d004      	beq.n	800a1e6 <HAL_DMA_Abort+0x58a>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a2c      	ldr	r2, [pc, #176]	; (800a294 <HAL_DMA_Abort+0x638>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d101      	bne.n	800a1ea <HAL_DMA_Abort+0x58e>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e000      	b.n	800a1ec <HAL_DMA_Abort+0x590>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d015      	beq.n	800a21c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a1f8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00c      	beq.n	800a21c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a20c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a210:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a21a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	40020010 	.word	0x40020010
 800a23c:	40020028 	.word	0x40020028
 800a240:	40020040 	.word	0x40020040
 800a244:	40020058 	.word	0x40020058
 800a248:	40020070 	.word	0x40020070
 800a24c:	40020088 	.word	0x40020088
 800a250:	400200a0 	.word	0x400200a0
 800a254:	400200b8 	.word	0x400200b8
 800a258:	40020410 	.word	0x40020410
 800a25c:	40020428 	.word	0x40020428
 800a260:	40020440 	.word	0x40020440
 800a264:	40020458 	.word	0x40020458
 800a268:	40020470 	.word	0x40020470
 800a26c:	40020488 	.word	0x40020488
 800a270:	400204a0 	.word	0x400204a0
 800a274:	400204b8 	.word	0x400204b8
 800a278:	58025408 	.word	0x58025408
 800a27c:	5802541c 	.word	0x5802541c
 800a280:	58025430 	.word	0x58025430
 800a284:	58025444 	.word	0x58025444
 800a288:	58025458 	.word	0x58025458
 800a28c:	5802546c 	.word	0x5802546c
 800a290:	58025480 	.word	0x58025480
 800a294:	58025494 	.word	0x58025494

0800a298 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e237      	b.n	800a71a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d004      	beq.n	800a2c0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2280      	movs	r2, #128	; 0x80
 800a2ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e22c      	b.n	800a71a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a5c      	ldr	r2, [pc, #368]	; (800a438 <HAL_DMA_Abort_IT+0x1a0>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d04a      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a5b      	ldr	r2, [pc, #364]	; (800a43c <HAL_DMA_Abort_IT+0x1a4>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d045      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a59      	ldr	r2, [pc, #356]	; (800a440 <HAL_DMA_Abort_IT+0x1a8>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d040      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a58      	ldr	r2, [pc, #352]	; (800a444 <HAL_DMA_Abort_IT+0x1ac>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d03b      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a56      	ldr	r2, [pc, #344]	; (800a448 <HAL_DMA_Abort_IT+0x1b0>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d036      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a55      	ldr	r2, [pc, #340]	; (800a44c <HAL_DMA_Abort_IT+0x1b4>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d031      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a53      	ldr	r2, [pc, #332]	; (800a450 <HAL_DMA_Abort_IT+0x1b8>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d02c      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a52      	ldr	r2, [pc, #328]	; (800a454 <HAL_DMA_Abort_IT+0x1bc>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d027      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a50      	ldr	r2, [pc, #320]	; (800a458 <HAL_DMA_Abort_IT+0x1c0>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d022      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a4f      	ldr	r2, [pc, #316]	; (800a45c <HAL_DMA_Abort_IT+0x1c4>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d01d      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a4d      	ldr	r2, [pc, #308]	; (800a460 <HAL_DMA_Abort_IT+0x1c8>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d018      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a4c      	ldr	r2, [pc, #304]	; (800a464 <HAL_DMA_Abort_IT+0x1cc>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d013      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a4a      	ldr	r2, [pc, #296]	; (800a468 <HAL_DMA_Abort_IT+0x1d0>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d00e      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a49      	ldr	r2, [pc, #292]	; (800a46c <HAL_DMA_Abort_IT+0x1d4>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d009      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a47      	ldr	r2, [pc, #284]	; (800a470 <HAL_DMA_Abort_IT+0x1d8>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d004      	beq.n	800a360 <HAL_DMA_Abort_IT+0xc8>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a46      	ldr	r2, [pc, #280]	; (800a474 <HAL_DMA_Abort_IT+0x1dc>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d101      	bne.n	800a364 <HAL_DMA_Abort_IT+0xcc>
 800a360:	2301      	movs	r3, #1
 800a362:	e000      	b.n	800a366 <HAL_DMA_Abort_IT+0xce>
 800a364:	2300      	movs	r3, #0
 800a366:	2b00      	cmp	r3, #0
 800a368:	f000 8086 	beq.w	800a478 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2204      	movs	r2, #4
 800a370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a2f      	ldr	r2, [pc, #188]	; (800a438 <HAL_DMA_Abort_IT+0x1a0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d04a      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a2e      	ldr	r2, [pc, #184]	; (800a43c <HAL_DMA_Abort_IT+0x1a4>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d045      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a2c      	ldr	r2, [pc, #176]	; (800a440 <HAL_DMA_Abort_IT+0x1a8>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d040      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a2b      	ldr	r2, [pc, #172]	; (800a444 <HAL_DMA_Abort_IT+0x1ac>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d03b      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a29      	ldr	r2, [pc, #164]	; (800a448 <HAL_DMA_Abort_IT+0x1b0>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d036      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a28      	ldr	r2, [pc, #160]	; (800a44c <HAL_DMA_Abort_IT+0x1b4>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d031      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a26      	ldr	r2, [pc, #152]	; (800a450 <HAL_DMA_Abort_IT+0x1b8>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d02c      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a25      	ldr	r2, [pc, #148]	; (800a454 <HAL_DMA_Abort_IT+0x1bc>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d027      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a23      	ldr	r2, [pc, #140]	; (800a458 <HAL_DMA_Abort_IT+0x1c0>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d022      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a22      	ldr	r2, [pc, #136]	; (800a45c <HAL_DMA_Abort_IT+0x1c4>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d01d      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a20      	ldr	r2, [pc, #128]	; (800a460 <HAL_DMA_Abort_IT+0x1c8>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d018      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a1f      	ldr	r2, [pc, #124]	; (800a464 <HAL_DMA_Abort_IT+0x1cc>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d013      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a1d      	ldr	r2, [pc, #116]	; (800a468 <HAL_DMA_Abort_IT+0x1d0>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d00e      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a1c      	ldr	r2, [pc, #112]	; (800a46c <HAL_DMA_Abort_IT+0x1d4>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d009      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a1a      	ldr	r2, [pc, #104]	; (800a470 <HAL_DMA_Abort_IT+0x1d8>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d004      	beq.n	800a414 <HAL_DMA_Abort_IT+0x17c>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a19      	ldr	r2, [pc, #100]	; (800a474 <HAL_DMA_Abort_IT+0x1dc>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d108      	bne.n	800a426 <HAL_DMA_Abort_IT+0x18e>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f022 0201 	bic.w	r2, r2, #1
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e178      	b.n	800a718 <HAL_DMA_Abort_IT+0x480>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f022 0201 	bic.w	r2, r2, #1
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	e16f      	b.n	800a718 <HAL_DMA_Abort_IT+0x480>
 800a438:	40020010 	.word	0x40020010
 800a43c:	40020028 	.word	0x40020028
 800a440:	40020040 	.word	0x40020040
 800a444:	40020058 	.word	0x40020058
 800a448:	40020070 	.word	0x40020070
 800a44c:	40020088 	.word	0x40020088
 800a450:	400200a0 	.word	0x400200a0
 800a454:	400200b8 	.word	0x400200b8
 800a458:	40020410 	.word	0x40020410
 800a45c:	40020428 	.word	0x40020428
 800a460:	40020440 	.word	0x40020440
 800a464:	40020458 	.word	0x40020458
 800a468:	40020470 	.word	0x40020470
 800a46c:	40020488 	.word	0x40020488
 800a470:	400204a0 	.word	0x400204a0
 800a474:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f022 020e 	bic.w	r2, r2, #14
 800a486:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a6c      	ldr	r2, [pc, #432]	; (800a640 <HAL_DMA_Abort_IT+0x3a8>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d04a      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a6b      	ldr	r2, [pc, #428]	; (800a644 <HAL_DMA_Abort_IT+0x3ac>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d045      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a69      	ldr	r2, [pc, #420]	; (800a648 <HAL_DMA_Abort_IT+0x3b0>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d040      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a68      	ldr	r2, [pc, #416]	; (800a64c <HAL_DMA_Abort_IT+0x3b4>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d03b      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a66      	ldr	r2, [pc, #408]	; (800a650 <HAL_DMA_Abort_IT+0x3b8>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d036      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a65      	ldr	r2, [pc, #404]	; (800a654 <HAL_DMA_Abort_IT+0x3bc>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d031      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a63      	ldr	r2, [pc, #396]	; (800a658 <HAL_DMA_Abort_IT+0x3c0>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d02c      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a62      	ldr	r2, [pc, #392]	; (800a65c <HAL_DMA_Abort_IT+0x3c4>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d027      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a60      	ldr	r2, [pc, #384]	; (800a660 <HAL_DMA_Abort_IT+0x3c8>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d022      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a5f      	ldr	r2, [pc, #380]	; (800a664 <HAL_DMA_Abort_IT+0x3cc>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d01d      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a5d      	ldr	r2, [pc, #372]	; (800a668 <HAL_DMA_Abort_IT+0x3d0>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d018      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a5c      	ldr	r2, [pc, #368]	; (800a66c <HAL_DMA_Abort_IT+0x3d4>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d013      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a5a      	ldr	r2, [pc, #360]	; (800a670 <HAL_DMA_Abort_IT+0x3d8>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00e      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a59      	ldr	r2, [pc, #356]	; (800a674 <HAL_DMA_Abort_IT+0x3dc>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d009      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a57      	ldr	r2, [pc, #348]	; (800a678 <HAL_DMA_Abort_IT+0x3e0>)
 800a51a:	4293      	cmp	r3, r2
 800a51c:	d004      	beq.n	800a528 <HAL_DMA_Abort_IT+0x290>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a56      	ldr	r2, [pc, #344]	; (800a67c <HAL_DMA_Abort_IT+0x3e4>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d108      	bne.n	800a53a <HAL_DMA_Abort_IT+0x2a2>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	681a      	ldr	r2, [r3, #0]
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f022 0201 	bic.w	r2, r2, #1
 800a536:	601a      	str	r2, [r3, #0]
 800a538:	e007      	b.n	800a54a <HAL_DMA_Abort_IT+0x2b2>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f022 0201 	bic.w	r2, r2, #1
 800a548:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a3c      	ldr	r2, [pc, #240]	; (800a640 <HAL_DMA_Abort_IT+0x3a8>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d072      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a3a      	ldr	r2, [pc, #232]	; (800a644 <HAL_DMA_Abort_IT+0x3ac>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d06d      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a39      	ldr	r2, [pc, #228]	; (800a648 <HAL_DMA_Abort_IT+0x3b0>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d068      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a37      	ldr	r2, [pc, #220]	; (800a64c <HAL_DMA_Abort_IT+0x3b4>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d063      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a36      	ldr	r2, [pc, #216]	; (800a650 <HAL_DMA_Abort_IT+0x3b8>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d05e      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a34      	ldr	r2, [pc, #208]	; (800a654 <HAL_DMA_Abort_IT+0x3bc>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d059      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a33      	ldr	r2, [pc, #204]	; (800a658 <HAL_DMA_Abort_IT+0x3c0>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d054      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a31      	ldr	r2, [pc, #196]	; (800a65c <HAL_DMA_Abort_IT+0x3c4>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d04f      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a30      	ldr	r2, [pc, #192]	; (800a660 <HAL_DMA_Abort_IT+0x3c8>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d04a      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a2e      	ldr	r2, [pc, #184]	; (800a664 <HAL_DMA_Abort_IT+0x3cc>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d045      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a2d      	ldr	r2, [pc, #180]	; (800a668 <HAL_DMA_Abort_IT+0x3d0>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d040      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a2b      	ldr	r2, [pc, #172]	; (800a66c <HAL_DMA_Abort_IT+0x3d4>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d03b      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a2a      	ldr	r2, [pc, #168]	; (800a670 <HAL_DMA_Abort_IT+0x3d8>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d036      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a28      	ldr	r2, [pc, #160]	; (800a674 <HAL_DMA_Abort_IT+0x3dc>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d031      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a27      	ldr	r2, [pc, #156]	; (800a678 <HAL_DMA_Abort_IT+0x3e0>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d02c      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a25      	ldr	r2, [pc, #148]	; (800a67c <HAL_DMA_Abort_IT+0x3e4>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d027      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a24      	ldr	r2, [pc, #144]	; (800a680 <HAL_DMA_Abort_IT+0x3e8>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d022      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a22      	ldr	r2, [pc, #136]	; (800a684 <HAL_DMA_Abort_IT+0x3ec>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d01d      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	4a21      	ldr	r2, [pc, #132]	; (800a688 <HAL_DMA_Abort_IT+0x3f0>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d018      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a1f      	ldr	r2, [pc, #124]	; (800a68c <HAL_DMA_Abort_IT+0x3f4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d013      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a1e      	ldr	r2, [pc, #120]	; (800a690 <HAL_DMA_Abort_IT+0x3f8>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00e      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a1c      	ldr	r2, [pc, #112]	; (800a694 <HAL_DMA_Abort_IT+0x3fc>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d009      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4a1b      	ldr	r2, [pc, #108]	; (800a698 <HAL_DMA_Abort_IT+0x400>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d004      	beq.n	800a63a <HAL_DMA_Abort_IT+0x3a2>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a19      	ldr	r2, [pc, #100]	; (800a69c <HAL_DMA_Abort_IT+0x404>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d132      	bne.n	800a6a0 <HAL_DMA_Abort_IT+0x408>
 800a63a:	2301      	movs	r3, #1
 800a63c:	e031      	b.n	800a6a2 <HAL_DMA_Abort_IT+0x40a>
 800a63e:	bf00      	nop
 800a640:	40020010 	.word	0x40020010
 800a644:	40020028 	.word	0x40020028
 800a648:	40020040 	.word	0x40020040
 800a64c:	40020058 	.word	0x40020058
 800a650:	40020070 	.word	0x40020070
 800a654:	40020088 	.word	0x40020088
 800a658:	400200a0 	.word	0x400200a0
 800a65c:	400200b8 	.word	0x400200b8
 800a660:	40020410 	.word	0x40020410
 800a664:	40020428 	.word	0x40020428
 800a668:	40020440 	.word	0x40020440
 800a66c:	40020458 	.word	0x40020458
 800a670:	40020470 	.word	0x40020470
 800a674:	40020488 	.word	0x40020488
 800a678:	400204a0 	.word	0x400204a0
 800a67c:	400204b8 	.word	0x400204b8
 800a680:	58025408 	.word	0x58025408
 800a684:	5802541c 	.word	0x5802541c
 800a688:	58025430 	.word	0x58025430
 800a68c:	58025444 	.word	0x58025444
 800a690:	58025458 	.word	0x58025458
 800a694:	5802546c 	.word	0x5802546c
 800a698:	58025480 	.word	0x58025480
 800a69c:	58025494 	.word	0x58025494
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d028      	beq.n	800a6f8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6b4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ba:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6c0:	f003 031f 	and.w	r3, r3, #31
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	409a      	lsls	r2, r3
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a6d4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00c      	beq.n	800a6f8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6ec:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a6f6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d003      	beq.n	800a718 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop

0800a724 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b08a      	sub	sp, #40	; 0x28
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a730:	4b67      	ldr	r3, [pc, #412]	; (800a8d0 <HAL_DMA_IRQHandler+0x1ac>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a67      	ldr	r2, [pc, #412]	; (800a8d4 <HAL_DMA_IRQHandler+0x1b0>)
 800a736:	fba2 2303 	umull	r2, r3, r2, r3
 800a73a:	0a9b      	lsrs	r3, r3, #10
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a742:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a748:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a74a:	6a3b      	ldr	r3, [r7, #32]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a5f      	ldr	r2, [pc, #380]	; (800a8d8 <HAL_DMA_IRQHandler+0x1b4>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d04a      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a5d      	ldr	r2, [pc, #372]	; (800a8dc <HAL_DMA_IRQHandler+0x1b8>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d045      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a5c      	ldr	r2, [pc, #368]	; (800a8e0 <HAL_DMA_IRQHandler+0x1bc>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d040      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a5a      	ldr	r2, [pc, #360]	; (800a8e4 <HAL_DMA_IRQHandler+0x1c0>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d03b      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a59      	ldr	r2, [pc, #356]	; (800a8e8 <HAL_DMA_IRQHandler+0x1c4>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d036      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a57      	ldr	r2, [pc, #348]	; (800a8ec <HAL_DMA_IRQHandler+0x1c8>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d031      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a56      	ldr	r2, [pc, #344]	; (800a8f0 <HAL_DMA_IRQHandler+0x1cc>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d02c      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a54      	ldr	r2, [pc, #336]	; (800a8f4 <HAL_DMA_IRQHandler+0x1d0>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d027      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a53      	ldr	r2, [pc, #332]	; (800a8f8 <HAL_DMA_IRQHandler+0x1d4>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d022      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a51      	ldr	r2, [pc, #324]	; (800a8fc <HAL_DMA_IRQHandler+0x1d8>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d01d      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a50      	ldr	r2, [pc, #320]	; (800a900 <HAL_DMA_IRQHandler+0x1dc>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d018      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a4e      	ldr	r2, [pc, #312]	; (800a904 <HAL_DMA_IRQHandler+0x1e0>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d013      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a4d      	ldr	r2, [pc, #308]	; (800a908 <HAL_DMA_IRQHandler+0x1e4>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00e      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a4b      	ldr	r2, [pc, #300]	; (800a90c <HAL_DMA_IRQHandler+0x1e8>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d009      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a4a      	ldr	r2, [pc, #296]	; (800a910 <HAL_DMA_IRQHandler+0x1ec>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d004      	beq.n	800a7f6 <HAL_DMA_IRQHandler+0xd2>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a48      	ldr	r2, [pc, #288]	; (800a914 <HAL_DMA_IRQHandler+0x1f0>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d101      	bne.n	800a7fa <HAL_DMA_IRQHandler+0xd6>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e000      	b.n	800a7fc <HAL_DMA_IRQHandler+0xd8>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f000 842b 	beq.w	800b058 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a806:	f003 031f 	and.w	r3, r3, #31
 800a80a:	2208      	movs	r2, #8
 800a80c:	409a      	lsls	r2, r3
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	4013      	ands	r3, r2
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 80a2 	beq.w	800a95c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a2e      	ldr	r2, [pc, #184]	; (800a8d8 <HAL_DMA_IRQHandler+0x1b4>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d04a      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a2d      	ldr	r2, [pc, #180]	; (800a8dc <HAL_DMA_IRQHandler+0x1b8>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d045      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a2b      	ldr	r2, [pc, #172]	; (800a8e0 <HAL_DMA_IRQHandler+0x1bc>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d040      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a2a      	ldr	r2, [pc, #168]	; (800a8e4 <HAL_DMA_IRQHandler+0x1c0>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d03b      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a28      	ldr	r2, [pc, #160]	; (800a8e8 <HAL_DMA_IRQHandler+0x1c4>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d036      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a27      	ldr	r2, [pc, #156]	; (800a8ec <HAL_DMA_IRQHandler+0x1c8>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d031      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a25      	ldr	r2, [pc, #148]	; (800a8f0 <HAL_DMA_IRQHandler+0x1cc>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d02c      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a24      	ldr	r2, [pc, #144]	; (800a8f4 <HAL_DMA_IRQHandler+0x1d0>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d027      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a22      	ldr	r2, [pc, #136]	; (800a8f8 <HAL_DMA_IRQHandler+0x1d4>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d022      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a21      	ldr	r2, [pc, #132]	; (800a8fc <HAL_DMA_IRQHandler+0x1d8>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d01d      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a1f      	ldr	r2, [pc, #124]	; (800a900 <HAL_DMA_IRQHandler+0x1dc>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d018      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a1e      	ldr	r2, [pc, #120]	; (800a904 <HAL_DMA_IRQHandler+0x1e0>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d013      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a1c      	ldr	r2, [pc, #112]	; (800a908 <HAL_DMA_IRQHandler+0x1e4>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d00e      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a1b      	ldr	r2, [pc, #108]	; (800a90c <HAL_DMA_IRQHandler+0x1e8>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d009      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a19      	ldr	r2, [pc, #100]	; (800a910 <HAL_DMA_IRQHandler+0x1ec>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d004      	beq.n	800a8b8 <HAL_DMA_IRQHandler+0x194>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a18      	ldr	r2, [pc, #96]	; (800a914 <HAL_DMA_IRQHandler+0x1f0>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d12f      	bne.n	800a918 <HAL_DMA_IRQHandler+0x1f4>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 0304 	and.w	r3, r3, #4
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	bf14      	ite	ne
 800a8c6:	2301      	movne	r3, #1
 800a8c8:	2300      	moveq	r3, #0
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	e02e      	b.n	800a92c <HAL_DMA_IRQHandler+0x208>
 800a8ce:	bf00      	nop
 800a8d0:	20000020 	.word	0x20000020
 800a8d4:	1b4e81b5 	.word	0x1b4e81b5
 800a8d8:	40020010 	.word	0x40020010
 800a8dc:	40020028 	.word	0x40020028
 800a8e0:	40020040 	.word	0x40020040
 800a8e4:	40020058 	.word	0x40020058
 800a8e8:	40020070 	.word	0x40020070
 800a8ec:	40020088 	.word	0x40020088
 800a8f0:	400200a0 	.word	0x400200a0
 800a8f4:	400200b8 	.word	0x400200b8
 800a8f8:	40020410 	.word	0x40020410
 800a8fc:	40020428 	.word	0x40020428
 800a900:	40020440 	.word	0x40020440
 800a904:	40020458 	.word	0x40020458
 800a908:	40020470 	.word	0x40020470
 800a90c:	40020488 	.word	0x40020488
 800a910:	400204a0 	.word	0x400204a0
 800a914:	400204b8 	.word	0x400204b8
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f003 0308 	and.w	r3, r3, #8
 800a922:	2b00      	cmp	r3, #0
 800a924:	bf14      	ite	ne
 800a926:	2301      	movne	r3, #1
 800a928:	2300      	moveq	r3, #0
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d015      	beq.n	800a95c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f022 0204 	bic.w	r2, r2, #4
 800a93e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a944:	f003 031f 	and.w	r3, r3, #31
 800a948:	2208      	movs	r2, #8
 800a94a:	409a      	lsls	r2, r3
 800a94c:	6a3b      	ldr	r3, [r7, #32]
 800a94e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a954:	f043 0201 	orr.w	r2, r3, #1
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a960:	f003 031f 	and.w	r3, r3, #31
 800a964:	69ba      	ldr	r2, [r7, #24]
 800a966:	fa22 f303 	lsr.w	r3, r2, r3
 800a96a:	f003 0301 	and.w	r3, r3, #1
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d06e      	beq.n	800aa50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a69      	ldr	r2, [pc, #420]	; (800ab1c <HAL_DMA_IRQHandler+0x3f8>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d04a      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a67      	ldr	r2, [pc, #412]	; (800ab20 <HAL_DMA_IRQHandler+0x3fc>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d045      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a66      	ldr	r2, [pc, #408]	; (800ab24 <HAL_DMA_IRQHandler+0x400>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d040      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a64      	ldr	r2, [pc, #400]	; (800ab28 <HAL_DMA_IRQHandler+0x404>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d03b      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a63      	ldr	r2, [pc, #396]	; (800ab2c <HAL_DMA_IRQHandler+0x408>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d036      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a61      	ldr	r2, [pc, #388]	; (800ab30 <HAL_DMA_IRQHandler+0x40c>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d031      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	4a60      	ldr	r2, [pc, #384]	; (800ab34 <HAL_DMA_IRQHandler+0x410>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d02c      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a5e      	ldr	r2, [pc, #376]	; (800ab38 <HAL_DMA_IRQHandler+0x414>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d027      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a5d      	ldr	r2, [pc, #372]	; (800ab3c <HAL_DMA_IRQHandler+0x418>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d022      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a5b      	ldr	r2, [pc, #364]	; (800ab40 <HAL_DMA_IRQHandler+0x41c>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d01d      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a5a      	ldr	r2, [pc, #360]	; (800ab44 <HAL_DMA_IRQHandler+0x420>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d018      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a58      	ldr	r2, [pc, #352]	; (800ab48 <HAL_DMA_IRQHandler+0x424>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d013      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a57      	ldr	r2, [pc, #348]	; (800ab4c <HAL_DMA_IRQHandler+0x428>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d00e      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a55      	ldr	r2, [pc, #340]	; (800ab50 <HAL_DMA_IRQHandler+0x42c>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d009      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4a54      	ldr	r2, [pc, #336]	; (800ab54 <HAL_DMA_IRQHandler+0x430>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d004      	beq.n	800aa12 <HAL_DMA_IRQHandler+0x2ee>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a52      	ldr	r2, [pc, #328]	; (800ab58 <HAL_DMA_IRQHandler+0x434>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d10a      	bne.n	800aa28 <HAL_DMA_IRQHandler+0x304>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	695b      	ldr	r3, [r3, #20]
 800aa18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	bf14      	ite	ne
 800aa20:	2301      	movne	r3, #1
 800aa22:	2300      	moveq	r3, #0
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	e003      	b.n	800aa30 <HAL_DMA_IRQHandler+0x30c>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2300      	movs	r3, #0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00d      	beq.n	800aa50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa38:	f003 031f 	and.w	r3, r3, #31
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	409a      	lsls	r2, r3
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa48:	f043 0202 	orr.w	r2, r3, #2
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa54:	f003 031f 	and.w	r3, r3, #31
 800aa58:	2204      	movs	r2, #4
 800aa5a:	409a      	lsls	r2, r3
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	4013      	ands	r3, r2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f000 808f 	beq.w	800ab84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a2c      	ldr	r2, [pc, #176]	; (800ab1c <HAL_DMA_IRQHandler+0x3f8>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d04a      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a2a      	ldr	r2, [pc, #168]	; (800ab20 <HAL_DMA_IRQHandler+0x3fc>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d045      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a29      	ldr	r2, [pc, #164]	; (800ab24 <HAL_DMA_IRQHandler+0x400>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d040      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a27      	ldr	r2, [pc, #156]	; (800ab28 <HAL_DMA_IRQHandler+0x404>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d03b      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a26      	ldr	r2, [pc, #152]	; (800ab2c <HAL_DMA_IRQHandler+0x408>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d036      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a24      	ldr	r2, [pc, #144]	; (800ab30 <HAL_DMA_IRQHandler+0x40c>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d031      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a23      	ldr	r2, [pc, #140]	; (800ab34 <HAL_DMA_IRQHandler+0x410>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d02c      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a21      	ldr	r2, [pc, #132]	; (800ab38 <HAL_DMA_IRQHandler+0x414>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d027      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a20      	ldr	r2, [pc, #128]	; (800ab3c <HAL_DMA_IRQHandler+0x418>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d022      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a1e      	ldr	r2, [pc, #120]	; (800ab40 <HAL_DMA_IRQHandler+0x41c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d01d      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a1d      	ldr	r2, [pc, #116]	; (800ab44 <HAL_DMA_IRQHandler+0x420>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d018      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a1b      	ldr	r2, [pc, #108]	; (800ab48 <HAL_DMA_IRQHandler+0x424>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d013      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a1a      	ldr	r2, [pc, #104]	; (800ab4c <HAL_DMA_IRQHandler+0x428>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d00e      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a18      	ldr	r2, [pc, #96]	; (800ab50 <HAL_DMA_IRQHandler+0x42c>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d009      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a17      	ldr	r2, [pc, #92]	; (800ab54 <HAL_DMA_IRQHandler+0x430>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d004      	beq.n	800ab06 <HAL_DMA_IRQHandler+0x3e2>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a15      	ldr	r2, [pc, #84]	; (800ab58 <HAL_DMA_IRQHandler+0x434>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d12a      	bne.n	800ab5c <HAL_DMA_IRQHandler+0x438>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0302 	and.w	r3, r3, #2
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	bf14      	ite	ne
 800ab14:	2301      	movne	r3, #1
 800ab16:	2300      	moveq	r3, #0
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	e023      	b.n	800ab64 <HAL_DMA_IRQHandler+0x440>
 800ab1c:	40020010 	.word	0x40020010
 800ab20:	40020028 	.word	0x40020028
 800ab24:	40020040 	.word	0x40020040
 800ab28:	40020058 	.word	0x40020058
 800ab2c:	40020070 	.word	0x40020070
 800ab30:	40020088 	.word	0x40020088
 800ab34:	400200a0 	.word	0x400200a0
 800ab38:	400200b8 	.word	0x400200b8
 800ab3c:	40020410 	.word	0x40020410
 800ab40:	40020428 	.word	0x40020428
 800ab44:	40020440 	.word	0x40020440
 800ab48:	40020458 	.word	0x40020458
 800ab4c:	40020470 	.word	0x40020470
 800ab50:	40020488 	.word	0x40020488
 800ab54:	400204a0 	.word	0x400204a0
 800ab58:	400204b8 	.word	0x400204b8
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2300      	movs	r3, #0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d00d      	beq.n	800ab84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab6c:	f003 031f 	and.w	r3, r3, #31
 800ab70:	2204      	movs	r2, #4
 800ab72:	409a      	lsls	r2, r3
 800ab74:	6a3b      	ldr	r3, [r7, #32]
 800ab76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab7c:	f043 0204 	orr.w	r2, r3, #4
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab88:	f003 031f 	and.w	r3, r3, #31
 800ab8c:	2210      	movs	r2, #16
 800ab8e:	409a      	lsls	r2, r3
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	4013      	ands	r3, r2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f000 80a6 	beq.w	800ace6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a85      	ldr	r2, [pc, #532]	; (800adb4 <HAL_DMA_IRQHandler+0x690>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d04a      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a83      	ldr	r2, [pc, #524]	; (800adb8 <HAL_DMA_IRQHandler+0x694>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d045      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a82      	ldr	r2, [pc, #520]	; (800adbc <HAL_DMA_IRQHandler+0x698>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d040      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a80      	ldr	r2, [pc, #512]	; (800adc0 <HAL_DMA_IRQHandler+0x69c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d03b      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a7f      	ldr	r2, [pc, #508]	; (800adc4 <HAL_DMA_IRQHandler+0x6a0>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d036      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a7d      	ldr	r2, [pc, #500]	; (800adc8 <HAL_DMA_IRQHandler+0x6a4>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d031      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a7c      	ldr	r2, [pc, #496]	; (800adcc <HAL_DMA_IRQHandler+0x6a8>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d02c      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a7a      	ldr	r2, [pc, #488]	; (800add0 <HAL_DMA_IRQHandler+0x6ac>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d027      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a79      	ldr	r2, [pc, #484]	; (800add4 <HAL_DMA_IRQHandler+0x6b0>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d022      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a77      	ldr	r2, [pc, #476]	; (800add8 <HAL_DMA_IRQHandler+0x6b4>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d01d      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a76      	ldr	r2, [pc, #472]	; (800addc <HAL_DMA_IRQHandler+0x6b8>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d018      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a74      	ldr	r2, [pc, #464]	; (800ade0 <HAL_DMA_IRQHandler+0x6bc>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d013      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a73      	ldr	r2, [pc, #460]	; (800ade4 <HAL_DMA_IRQHandler+0x6c0>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d00e      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a71      	ldr	r2, [pc, #452]	; (800ade8 <HAL_DMA_IRQHandler+0x6c4>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d009      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a70      	ldr	r2, [pc, #448]	; (800adec <HAL_DMA_IRQHandler+0x6c8>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d004      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x516>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a6e      	ldr	r2, [pc, #440]	; (800adf0 <HAL_DMA_IRQHandler+0x6cc>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d10a      	bne.n	800ac50 <HAL_DMA_IRQHandler+0x52c>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0308 	and.w	r3, r3, #8
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	bf14      	ite	ne
 800ac48:	2301      	movne	r3, #1
 800ac4a:	2300      	moveq	r3, #0
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	e009      	b.n	800ac64 <HAL_DMA_IRQHandler+0x540>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f003 0304 	and.w	r3, r3, #4
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	bf14      	ite	ne
 800ac5e:	2301      	movne	r3, #1
 800ac60:	2300      	moveq	r3, #0
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d03e      	beq.n	800ace6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac6c:	f003 031f 	and.w	r3, r3, #31
 800ac70:	2210      	movs	r2, #16
 800ac72:	409a      	lsls	r2, r3
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d018      	beq.n	800acb8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d108      	bne.n	800aca6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d024      	beq.n	800ace6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	4798      	blx	r3
 800aca4:	e01f      	b.n	800ace6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d01b      	beq.n	800ace6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
 800acb6:	e016      	b.n	800ace6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d107      	bne.n	800acd6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f022 0208 	bic.w	r2, r2, #8
 800acd4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acea:	f003 031f 	and.w	r3, r3, #31
 800acee:	2220      	movs	r2, #32
 800acf0:	409a      	lsls	r2, r3
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	4013      	ands	r3, r2
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 8110 	beq.w	800af1c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a2c      	ldr	r2, [pc, #176]	; (800adb4 <HAL_DMA_IRQHandler+0x690>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d04a      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	4a2b      	ldr	r2, [pc, #172]	; (800adb8 <HAL_DMA_IRQHandler+0x694>)
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	d045      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a29      	ldr	r2, [pc, #164]	; (800adbc <HAL_DMA_IRQHandler+0x698>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d040      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a28      	ldr	r2, [pc, #160]	; (800adc0 <HAL_DMA_IRQHandler+0x69c>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d03b      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a26      	ldr	r2, [pc, #152]	; (800adc4 <HAL_DMA_IRQHandler+0x6a0>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d036      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a25      	ldr	r2, [pc, #148]	; (800adc8 <HAL_DMA_IRQHandler+0x6a4>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d031      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	4a23      	ldr	r2, [pc, #140]	; (800adcc <HAL_DMA_IRQHandler+0x6a8>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d02c      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a22      	ldr	r2, [pc, #136]	; (800add0 <HAL_DMA_IRQHandler+0x6ac>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d027      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a20      	ldr	r2, [pc, #128]	; (800add4 <HAL_DMA_IRQHandler+0x6b0>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d022      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a1f      	ldr	r2, [pc, #124]	; (800add8 <HAL_DMA_IRQHandler+0x6b4>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d01d      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a1d      	ldr	r2, [pc, #116]	; (800addc <HAL_DMA_IRQHandler+0x6b8>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d018      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a1c      	ldr	r2, [pc, #112]	; (800ade0 <HAL_DMA_IRQHandler+0x6bc>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d013      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a1a      	ldr	r2, [pc, #104]	; (800ade4 <HAL_DMA_IRQHandler+0x6c0>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d00e      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a19      	ldr	r2, [pc, #100]	; (800ade8 <HAL_DMA_IRQHandler+0x6c4>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d009      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a17      	ldr	r2, [pc, #92]	; (800adec <HAL_DMA_IRQHandler+0x6c8>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d004      	beq.n	800ad9c <HAL_DMA_IRQHandler+0x678>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a16      	ldr	r2, [pc, #88]	; (800adf0 <HAL_DMA_IRQHandler+0x6cc>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d12b      	bne.n	800adf4 <HAL_DMA_IRQHandler+0x6d0>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 0310 	and.w	r3, r3, #16
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	bf14      	ite	ne
 800adaa:	2301      	movne	r3, #1
 800adac:	2300      	moveq	r3, #0
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	e02a      	b.n	800ae08 <HAL_DMA_IRQHandler+0x6e4>
 800adb2:	bf00      	nop
 800adb4:	40020010 	.word	0x40020010
 800adb8:	40020028 	.word	0x40020028
 800adbc:	40020040 	.word	0x40020040
 800adc0:	40020058 	.word	0x40020058
 800adc4:	40020070 	.word	0x40020070
 800adc8:	40020088 	.word	0x40020088
 800adcc:	400200a0 	.word	0x400200a0
 800add0:	400200b8 	.word	0x400200b8
 800add4:	40020410 	.word	0x40020410
 800add8:	40020428 	.word	0x40020428
 800addc:	40020440 	.word	0x40020440
 800ade0:	40020458 	.word	0x40020458
 800ade4:	40020470 	.word	0x40020470
 800ade8:	40020488 	.word	0x40020488
 800adec:	400204a0 	.word	0x400204a0
 800adf0:	400204b8 	.word	0x400204b8
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 0302 	and.w	r3, r3, #2
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	bf14      	ite	ne
 800ae02:	2301      	movne	r3, #1
 800ae04:	2300      	moveq	r3, #0
 800ae06:	b2db      	uxtb	r3, r3
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8087 	beq.w	800af1c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae12:	f003 031f 	and.w	r3, r3, #31
 800ae16:	2220      	movs	r2, #32
 800ae18:	409a      	lsls	r2, r3
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b04      	cmp	r3, #4
 800ae28:	d139      	bne.n	800ae9e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f022 0216 	bic.w	r2, r2, #22
 800ae38:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	695a      	ldr	r2, [r3, #20]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae48:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d103      	bne.n	800ae5a <HAL_DMA_IRQHandler+0x736>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d007      	beq.n	800ae6a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0208 	bic.w	r2, r2, #8
 800ae68:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae6e:	f003 031f 	and.w	r3, r3, #31
 800ae72:	223f      	movs	r2, #63	; 0x3f
 800ae74:	409a      	lsls	r2, r3
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 834a 	beq.w	800b528 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	4798      	blx	r3
          }
          return;
 800ae9c:	e344      	b.n	800b528 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d018      	beq.n	800aede <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d108      	bne.n	800aecc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d02c      	beq.n	800af1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	4798      	blx	r3
 800aeca:	e027      	b.n	800af1c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d023      	beq.n	800af1c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	4798      	blx	r3
 800aedc:	e01e      	b.n	800af1c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10f      	bne.n	800af0c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f022 0210 	bic.w	r2, r2, #16
 800aefa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af10:	2b00      	cmp	r3, #0
 800af12:	d003      	beq.n	800af1c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 8306 	beq.w	800b532 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 8088 	beq.w	800b044 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2204      	movs	r2, #4
 800af38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a7a      	ldr	r2, [pc, #488]	; (800b12c <HAL_DMA_IRQHandler+0xa08>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d04a      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a79      	ldr	r2, [pc, #484]	; (800b130 <HAL_DMA_IRQHandler+0xa0c>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d045      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a77      	ldr	r2, [pc, #476]	; (800b134 <HAL_DMA_IRQHandler+0xa10>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d040      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a76      	ldr	r2, [pc, #472]	; (800b138 <HAL_DMA_IRQHandler+0xa14>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d03b      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a74      	ldr	r2, [pc, #464]	; (800b13c <HAL_DMA_IRQHandler+0xa18>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d036      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a73      	ldr	r2, [pc, #460]	; (800b140 <HAL_DMA_IRQHandler+0xa1c>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d031      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a71      	ldr	r2, [pc, #452]	; (800b144 <HAL_DMA_IRQHandler+0xa20>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d02c      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a70      	ldr	r2, [pc, #448]	; (800b148 <HAL_DMA_IRQHandler+0xa24>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d027      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a6e      	ldr	r2, [pc, #440]	; (800b14c <HAL_DMA_IRQHandler+0xa28>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d022      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a6d      	ldr	r2, [pc, #436]	; (800b150 <HAL_DMA_IRQHandler+0xa2c>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d01d      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a6b      	ldr	r2, [pc, #428]	; (800b154 <HAL_DMA_IRQHandler+0xa30>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d018      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4a6a      	ldr	r2, [pc, #424]	; (800b158 <HAL_DMA_IRQHandler+0xa34>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d013      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a68      	ldr	r2, [pc, #416]	; (800b15c <HAL_DMA_IRQHandler+0xa38>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d00e      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a67      	ldr	r2, [pc, #412]	; (800b160 <HAL_DMA_IRQHandler+0xa3c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d009      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a65      	ldr	r2, [pc, #404]	; (800b164 <HAL_DMA_IRQHandler+0xa40>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d004      	beq.n	800afdc <HAL_DMA_IRQHandler+0x8b8>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a64      	ldr	r2, [pc, #400]	; (800b168 <HAL_DMA_IRQHandler+0xa44>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d108      	bne.n	800afee <HAL_DMA_IRQHandler+0x8ca>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 0201 	bic.w	r2, r2, #1
 800afea:	601a      	str	r2, [r3, #0]
 800afec:	e007      	b.n	800affe <HAL_DMA_IRQHandler+0x8da>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f022 0201 	bic.w	r2, r2, #1
 800affc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	3301      	adds	r3, #1
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b006:	429a      	cmp	r2, r3
 800b008:	d307      	bcc.n	800b01a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1f2      	bne.n	800affe <HAL_DMA_IRQHandler+0x8da>
 800b018:	e000      	b.n	800b01c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b01a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0301 	and.w	r3, r3, #1
 800b026:	2b00      	cmp	r3, #0
 800b028:	d004      	beq.n	800b034 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2203      	movs	r2, #3
 800b02e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b032:	e003      	b.n	800b03c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f000 8272 	beq.w	800b532 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	4798      	blx	r3
 800b056:	e26c      	b.n	800b532 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a43      	ldr	r2, [pc, #268]	; (800b16c <HAL_DMA_IRQHandler+0xa48>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d022      	beq.n	800b0a8 <HAL_DMA_IRQHandler+0x984>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a42      	ldr	r2, [pc, #264]	; (800b170 <HAL_DMA_IRQHandler+0xa4c>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d01d      	beq.n	800b0a8 <HAL_DMA_IRQHandler+0x984>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a40      	ldr	r2, [pc, #256]	; (800b174 <HAL_DMA_IRQHandler+0xa50>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d018      	beq.n	800b0a8 <HAL_DMA_IRQHandler+0x984>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a3f      	ldr	r2, [pc, #252]	; (800b178 <HAL_DMA_IRQHandler+0xa54>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d013      	beq.n	800b0a8 <HAL_DMA_IRQHandler+0x984>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a3d      	ldr	r2, [pc, #244]	; (800b17c <HAL_DMA_IRQHandler+0xa58>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d00e      	beq.n	800b0a8 <HAL_DMA_IRQHandler+0x984>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a3c      	ldr	r2, [pc, #240]	; (800b180 <HAL_DMA_IRQHandler+0xa5c>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d009      	beq.n	800b0a8 <HAL_DMA_IRQHandler+0x984>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a3a      	ldr	r2, [pc, #232]	; (800b184 <HAL_DMA_IRQHandler+0xa60>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d004      	beq.n	800b0a8 <HAL_DMA_IRQHandler+0x984>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a39      	ldr	r2, [pc, #228]	; (800b188 <HAL_DMA_IRQHandler+0xa64>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d101      	bne.n	800b0ac <HAL_DMA_IRQHandler+0x988>
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e000      	b.n	800b0ae <HAL_DMA_IRQHandler+0x98a>
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	f000 823f 	beq.w	800b532 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0c0:	f003 031f 	and.w	r3, r3, #31
 800b0c4:	2204      	movs	r2, #4
 800b0c6:	409a      	lsls	r2, r3
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	4013      	ands	r3, r2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 80cd 	beq.w	800b26c <HAL_DMA_IRQHandler+0xb48>
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	f003 0304 	and.w	r3, r3, #4
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 80c7 	beq.w	800b26c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0e2:	f003 031f 	and.w	r3, r3, #31
 800b0e6:	2204      	movs	r2, #4
 800b0e8:	409a      	lsls	r2, r3
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d049      	beq.n	800b18c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d109      	bne.n	800b116 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 8210 	beq.w	800b52c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b114:	e20a      	b.n	800b52c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	f000 8206 	beq.w	800b52c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b128:	e200      	b.n	800b52c <HAL_DMA_IRQHandler+0xe08>
 800b12a:	bf00      	nop
 800b12c:	40020010 	.word	0x40020010
 800b130:	40020028 	.word	0x40020028
 800b134:	40020040 	.word	0x40020040
 800b138:	40020058 	.word	0x40020058
 800b13c:	40020070 	.word	0x40020070
 800b140:	40020088 	.word	0x40020088
 800b144:	400200a0 	.word	0x400200a0
 800b148:	400200b8 	.word	0x400200b8
 800b14c:	40020410 	.word	0x40020410
 800b150:	40020428 	.word	0x40020428
 800b154:	40020440 	.word	0x40020440
 800b158:	40020458 	.word	0x40020458
 800b15c:	40020470 	.word	0x40020470
 800b160:	40020488 	.word	0x40020488
 800b164:	400204a0 	.word	0x400204a0
 800b168:	400204b8 	.word	0x400204b8
 800b16c:	58025408 	.word	0x58025408
 800b170:	5802541c 	.word	0x5802541c
 800b174:	58025430 	.word	0x58025430
 800b178:	58025444 	.word	0x58025444
 800b17c:	58025458 	.word	0x58025458
 800b180:	5802546c 	.word	0x5802546c
 800b184:	58025480 	.word	0x58025480
 800b188:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	f003 0320 	and.w	r3, r3, #32
 800b192:	2b00      	cmp	r3, #0
 800b194:	d160      	bne.n	800b258 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a7f      	ldr	r2, [pc, #508]	; (800b398 <HAL_DMA_IRQHandler+0xc74>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d04a      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a7d      	ldr	r2, [pc, #500]	; (800b39c <HAL_DMA_IRQHandler+0xc78>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d045      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4a7c      	ldr	r2, [pc, #496]	; (800b3a0 <HAL_DMA_IRQHandler+0xc7c>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d040      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a7a      	ldr	r2, [pc, #488]	; (800b3a4 <HAL_DMA_IRQHandler+0xc80>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d03b      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a79      	ldr	r2, [pc, #484]	; (800b3a8 <HAL_DMA_IRQHandler+0xc84>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d036      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a77      	ldr	r2, [pc, #476]	; (800b3ac <HAL_DMA_IRQHandler+0xc88>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d031      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a76      	ldr	r2, [pc, #472]	; (800b3b0 <HAL_DMA_IRQHandler+0xc8c>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d02c      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a74      	ldr	r2, [pc, #464]	; (800b3b4 <HAL_DMA_IRQHandler+0xc90>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d027      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a73      	ldr	r2, [pc, #460]	; (800b3b8 <HAL_DMA_IRQHandler+0xc94>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d022      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a71      	ldr	r2, [pc, #452]	; (800b3bc <HAL_DMA_IRQHandler+0xc98>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d01d      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a70      	ldr	r2, [pc, #448]	; (800b3c0 <HAL_DMA_IRQHandler+0xc9c>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d018      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a6e      	ldr	r2, [pc, #440]	; (800b3c4 <HAL_DMA_IRQHandler+0xca0>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d013      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a6d      	ldr	r2, [pc, #436]	; (800b3c8 <HAL_DMA_IRQHandler+0xca4>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d00e      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4a6b      	ldr	r2, [pc, #428]	; (800b3cc <HAL_DMA_IRQHandler+0xca8>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d009      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a6a      	ldr	r2, [pc, #424]	; (800b3d0 <HAL_DMA_IRQHandler+0xcac>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d004      	beq.n	800b236 <HAL_DMA_IRQHandler+0xb12>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a68      	ldr	r2, [pc, #416]	; (800b3d4 <HAL_DMA_IRQHandler+0xcb0>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d108      	bne.n	800b248 <HAL_DMA_IRQHandler+0xb24>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f022 0208 	bic.w	r2, r2, #8
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	e007      	b.n	800b258 <HAL_DMA_IRQHandler+0xb34>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f022 0204 	bic.w	r2, r2, #4
 800b256:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	f000 8165 	beq.w	800b52c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b26a:	e15f      	b.n	800b52c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b270:	f003 031f 	and.w	r3, r3, #31
 800b274:	2202      	movs	r2, #2
 800b276:	409a      	lsls	r2, r3
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	4013      	ands	r3, r2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f000 80c5 	beq.w	800b40c <HAL_DMA_IRQHandler+0xce8>
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	f003 0302 	and.w	r3, r3, #2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	f000 80bf 	beq.w	800b40c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b292:	f003 031f 	and.w	r3, r3, #31
 800b296:	2202      	movs	r2, #2
 800b298:	409a      	lsls	r2, r3
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d018      	beq.n	800b2da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d109      	bne.n	800b2c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f000 813a 	beq.w	800b530 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2c4:	e134      	b.n	800b530 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 8130 	beq.w	800b530 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2d8:	e12a      	b.n	800b530 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	f003 0320 	and.w	r3, r3, #32
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f040 8089 	bne.w	800b3f8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a2b      	ldr	r2, [pc, #172]	; (800b398 <HAL_DMA_IRQHandler+0xc74>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d04a      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a29      	ldr	r2, [pc, #164]	; (800b39c <HAL_DMA_IRQHandler+0xc78>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d045      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a28      	ldr	r2, [pc, #160]	; (800b3a0 <HAL_DMA_IRQHandler+0xc7c>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d040      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a26      	ldr	r2, [pc, #152]	; (800b3a4 <HAL_DMA_IRQHandler+0xc80>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d03b      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a25      	ldr	r2, [pc, #148]	; (800b3a8 <HAL_DMA_IRQHandler+0xc84>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d036      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a23      	ldr	r2, [pc, #140]	; (800b3ac <HAL_DMA_IRQHandler+0xc88>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d031      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a22      	ldr	r2, [pc, #136]	; (800b3b0 <HAL_DMA_IRQHandler+0xc8c>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d02c      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a20      	ldr	r2, [pc, #128]	; (800b3b4 <HAL_DMA_IRQHandler+0xc90>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d027      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a1f      	ldr	r2, [pc, #124]	; (800b3b8 <HAL_DMA_IRQHandler+0xc94>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d022      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a1d      	ldr	r2, [pc, #116]	; (800b3bc <HAL_DMA_IRQHandler+0xc98>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d01d      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a1c      	ldr	r2, [pc, #112]	; (800b3c0 <HAL_DMA_IRQHandler+0xc9c>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d018      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a1a      	ldr	r2, [pc, #104]	; (800b3c4 <HAL_DMA_IRQHandler+0xca0>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d013      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a19      	ldr	r2, [pc, #100]	; (800b3c8 <HAL_DMA_IRQHandler+0xca4>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d00e      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a17      	ldr	r2, [pc, #92]	; (800b3cc <HAL_DMA_IRQHandler+0xca8>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d009      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a16      	ldr	r2, [pc, #88]	; (800b3d0 <HAL_DMA_IRQHandler+0xcac>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d004      	beq.n	800b386 <HAL_DMA_IRQHandler+0xc62>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a14      	ldr	r2, [pc, #80]	; (800b3d4 <HAL_DMA_IRQHandler+0xcb0>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d128      	bne.n	800b3d8 <HAL_DMA_IRQHandler+0xcb4>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f022 0214 	bic.w	r2, r2, #20
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	e027      	b.n	800b3e8 <HAL_DMA_IRQHandler+0xcc4>
 800b398:	40020010 	.word	0x40020010
 800b39c:	40020028 	.word	0x40020028
 800b3a0:	40020040 	.word	0x40020040
 800b3a4:	40020058 	.word	0x40020058
 800b3a8:	40020070 	.word	0x40020070
 800b3ac:	40020088 	.word	0x40020088
 800b3b0:	400200a0 	.word	0x400200a0
 800b3b4:	400200b8 	.word	0x400200b8
 800b3b8:	40020410 	.word	0x40020410
 800b3bc:	40020428 	.word	0x40020428
 800b3c0:	40020440 	.word	0x40020440
 800b3c4:	40020458 	.word	0x40020458
 800b3c8:	40020470 	.word	0x40020470
 800b3cc:	40020488 	.word	0x40020488
 800b3d0:	400204a0 	.word	0x400204a0
 800b3d4:	400204b8 	.word	0x400204b8
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f022 020a 	bic.w	r2, r2, #10
 800b3e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 8097 	beq.w	800b530 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b40a:	e091      	b.n	800b530 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b410:	f003 031f 	and.w	r3, r3, #31
 800b414:	2208      	movs	r2, #8
 800b416:	409a      	lsls	r2, r3
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	4013      	ands	r3, r2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f000 8088 	beq.w	800b532 <HAL_DMA_IRQHandler+0xe0e>
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	f003 0308 	and.w	r3, r3, #8
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f000 8082 	beq.w	800b532 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4a41      	ldr	r2, [pc, #260]	; (800b538 <HAL_DMA_IRQHandler+0xe14>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d04a      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	4a3f      	ldr	r2, [pc, #252]	; (800b53c <HAL_DMA_IRQHandler+0xe18>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d045      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a3e      	ldr	r2, [pc, #248]	; (800b540 <HAL_DMA_IRQHandler+0xe1c>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d040      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	4a3c      	ldr	r2, [pc, #240]	; (800b544 <HAL_DMA_IRQHandler+0xe20>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d03b      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a3b      	ldr	r2, [pc, #236]	; (800b548 <HAL_DMA_IRQHandler+0xe24>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d036      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a39      	ldr	r2, [pc, #228]	; (800b54c <HAL_DMA_IRQHandler+0xe28>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d031      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a38      	ldr	r2, [pc, #224]	; (800b550 <HAL_DMA_IRQHandler+0xe2c>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d02c      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a36      	ldr	r2, [pc, #216]	; (800b554 <HAL_DMA_IRQHandler+0xe30>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d027      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a35      	ldr	r2, [pc, #212]	; (800b558 <HAL_DMA_IRQHandler+0xe34>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d022      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a33      	ldr	r2, [pc, #204]	; (800b55c <HAL_DMA_IRQHandler+0xe38>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d01d      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a32      	ldr	r2, [pc, #200]	; (800b560 <HAL_DMA_IRQHandler+0xe3c>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d018      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a30      	ldr	r2, [pc, #192]	; (800b564 <HAL_DMA_IRQHandler+0xe40>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d013      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a2f      	ldr	r2, [pc, #188]	; (800b568 <HAL_DMA_IRQHandler+0xe44>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d00e      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a2d      	ldr	r2, [pc, #180]	; (800b56c <HAL_DMA_IRQHandler+0xe48>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d009      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a2c      	ldr	r2, [pc, #176]	; (800b570 <HAL_DMA_IRQHandler+0xe4c>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d004      	beq.n	800b4ce <HAL_DMA_IRQHandler+0xdaa>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a2a      	ldr	r2, [pc, #168]	; (800b574 <HAL_DMA_IRQHandler+0xe50>)
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	d108      	bne.n	800b4e0 <HAL_DMA_IRQHandler+0xdbc>
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f022 021c 	bic.w	r2, r2, #28
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	e007      	b.n	800b4f0 <HAL_DMA_IRQHandler+0xdcc>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f022 020e 	bic.w	r2, r2, #14
 800b4ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4f4:	f003 031f 	and.w	r3, r3, #31
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	409a      	lsls	r2, r3
 800b4fc:	69fb      	ldr	r3, [r7, #28]
 800b4fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d009      	beq.n	800b532 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	4798      	blx	r3
 800b526:	e004      	b.n	800b532 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b528:	bf00      	nop
 800b52a:	e002      	b.n	800b532 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b52c:	bf00      	nop
 800b52e:	e000      	b.n	800b532 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b530:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b532:	3728      	adds	r7, #40	; 0x28
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}
 800b538:	40020010 	.word	0x40020010
 800b53c:	40020028 	.word	0x40020028
 800b540:	40020040 	.word	0x40020040
 800b544:	40020058 	.word	0x40020058
 800b548:	40020070 	.word	0x40020070
 800b54c:	40020088 	.word	0x40020088
 800b550:	400200a0 	.word	0x400200a0
 800b554:	400200b8 	.word	0x400200b8
 800b558:	40020410 	.word	0x40020410
 800b55c:	40020428 	.word	0x40020428
 800b560:	40020440 	.word	0x40020440
 800b564:	40020458 	.word	0x40020458
 800b568:	40020470 	.word	0x40020470
 800b56c:	40020488 	.word	0x40020488
 800b570:	400204a0 	.word	0x400204a0
 800b574:	400204b8 	.word	0x400204b8

0800b578 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b586:	b2db      	uxtb	r3, r3
}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b594:	b480      	push	{r7}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a42      	ldr	r2, [pc, #264]	; (800b6ac <DMA_CalcBaseAndBitshift+0x118>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d04a      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a41      	ldr	r2, [pc, #260]	; (800b6b0 <DMA_CalcBaseAndBitshift+0x11c>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d045      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a3f      	ldr	r2, [pc, #252]	; (800b6b4 <DMA_CalcBaseAndBitshift+0x120>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d040      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a3e      	ldr	r2, [pc, #248]	; (800b6b8 <DMA_CalcBaseAndBitshift+0x124>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d03b      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a3c      	ldr	r2, [pc, #240]	; (800b6bc <DMA_CalcBaseAndBitshift+0x128>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d036      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a3b      	ldr	r2, [pc, #236]	; (800b6c0 <DMA_CalcBaseAndBitshift+0x12c>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d031      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a39      	ldr	r2, [pc, #228]	; (800b6c4 <DMA_CalcBaseAndBitshift+0x130>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d02c      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a38      	ldr	r2, [pc, #224]	; (800b6c8 <DMA_CalcBaseAndBitshift+0x134>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d027      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a36      	ldr	r2, [pc, #216]	; (800b6cc <DMA_CalcBaseAndBitshift+0x138>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d022      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a35      	ldr	r2, [pc, #212]	; (800b6d0 <DMA_CalcBaseAndBitshift+0x13c>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d01d      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a33      	ldr	r2, [pc, #204]	; (800b6d4 <DMA_CalcBaseAndBitshift+0x140>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d018      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a32      	ldr	r2, [pc, #200]	; (800b6d8 <DMA_CalcBaseAndBitshift+0x144>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d013      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a30      	ldr	r2, [pc, #192]	; (800b6dc <DMA_CalcBaseAndBitshift+0x148>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d00e      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a2f      	ldr	r2, [pc, #188]	; (800b6e0 <DMA_CalcBaseAndBitshift+0x14c>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d009      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a2d      	ldr	r2, [pc, #180]	; (800b6e4 <DMA_CalcBaseAndBitshift+0x150>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d004      	beq.n	800b63c <DMA_CalcBaseAndBitshift+0xa8>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a2c      	ldr	r2, [pc, #176]	; (800b6e8 <DMA_CalcBaseAndBitshift+0x154>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d101      	bne.n	800b640 <DMA_CalcBaseAndBitshift+0xac>
 800b63c:	2301      	movs	r3, #1
 800b63e:	e000      	b.n	800b642 <DMA_CalcBaseAndBitshift+0xae>
 800b640:	2300      	movs	r3, #0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d024      	beq.n	800b690 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	3b10      	subs	r3, #16
 800b64e:	4a27      	ldr	r2, [pc, #156]	; (800b6ec <DMA_CalcBaseAndBitshift+0x158>)
 800b650:	fba2 2303 	umull	r2, r3, r2, r3
 800b654:	091b      	lsrs	r3, r3, #4
 800b656:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f003 0307 	and.w	r3, r3, #7
 800b65e:	4a24      	ldr	r2, [pc, #144]	; (800b6f0 <DMA_CalcBaseAndBitshift+0x15c>)
 800b660:	5cd3      	ldrb	r3, [r2, r3]
 800b662:	461a      	mov	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2b03      	cmp	r3, #3
 800b66c:	d908      	bls.n	800b680 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	461a      	mov	r2, r3
 800b674:	4b1f      	ldr	r3, [pc, #124]	; (800b6f4 <DMA_CalcBaseAndBitshift+0x160>)
 800b676:	4013      	ands	r3, r2
 800b678:	1d1a      	adds	r2, r3, #4
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	659a      	str	r2, [r3, #88]	; 0x58
 800b67e:	e00d      	b.n	800b69c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	461a      	mov	r2, r3
 800b686:	4b1b      	ldr	r3, [pc, #108]	; (800b6f4 <DMA_CalcBaseAndBitshift+0x160>)
 800b688:	4013      	ands	r3, r2
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	6593      	str	r3, [r2, #88]	; 0x58
 800b68e:	e005      	b.n	800b69c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3714      	adds	r7, #20
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	40020010 	.word	0x40020010
 800b6b0:	40020028 	.word	0x40020028
 800b6b4:	40020040 	.word	0x40020040
 800b6b8:	40020058 	.word	0x40020058
 800b6bc:	40020070 	.word	0x40020070
 800b6c0:	40020088 	.word	0x40020088
 800b6c4:	400200a0 	.word	0x400200a0
 800b6c8:	400200b8 	.word	0x400200b8
 800b6cc:	40020410 	.word	0x40020410
 800b6d0:	40020428 	.word	0x40020428
 800b6d4:	40020440 	.word	0x40020440
 800b6d8:	40020458 	.word	0x40020458
 800b6dc:	40020470 	.word	0x40020470
 800b6e0:	40020488 	.word	0x40020488
 800b6e4:	400204a0 	.word	0x400204a0
 800b6e8:	400204b8 	.word	0x400204b8
 800b6ec:	aaaaaaab 	.word	0xaaaaaaab
 800b6f0:	08016bf0 	.word	0x08016bf0
 800b6f4:	fffffc00 	.word	0xfffffc00

0800b6f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b085      	sub	sp, #20
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	699b      	ldr	r3, [r3, #24]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d120      	bne.n	800b74e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b710:	2b03      	cmp	r3, #3
 800b712:	d858      	bhi.n	800b7c6 <DMA_CheckFifoParam+0xce>
 800b714:	a201      	add	r2, pc, #4	; (adr r2, 800b71c <DMA_CheckFifoParam+0x24>)
 800b716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71a:	bf00      	nop
 800b71c:	0800b72d 	.word	0x0800b72d
 800b720:	0800b73f 	.word	0x0800b73f
 800b724:	0800b72d 	.word	0x0800b72d
 800b728:	0800b7c7 	.word	0x0800b7c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b734:	2b00      	cmp	r3, #0
 800b736:	d048      	beq.n	800b7ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b73c:	e045      	b.n	800b7ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b742:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b746:	d142      	bne.n	800b7ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b74c:	e03f      	b.n	800b7ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b756:	d123      	bne.n	800b7a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b75c:	2b03      	cmp	r3, #3
 800b75e:	d838      	bhi.n	800b7d2 <DMA_CheckFifoParam+0xda>
 800b760:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <DMA_CheckFifoParam+0x70>)
 800b762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b766:	bf00      	nop
 800b768:	0800b779 	.word	0x0800b779
 800b76c:	0800b77f 	.word	0x0800b77f
 800b770:	0800b779 	.word	0x0800b779
 800b774:	0800b791 	.word	0x0800b791
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	73fb      	strb	r3, [r7, #15]
        break;
 800b77c:	e030      	b.n	800b7e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b782:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d025      	beq.n	800b7d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b78a:	2301      	movs	r3, #1
 800b78c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b78e:	e022      	b.n	800b7d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b794:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b798:	d11f      	bne.n	800b7da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b79e:	e01c      	b.n	800b7da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d902      	bls.n	800b7ae <DMA_CheckFifoParam+0xb6>
 800b7a8:	2b03      	cmp	r3, #3
 800b7aa:	d003      	beq.n	800b7b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b7ac:	e018      	b.n	800b7e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	73fb      	strb	r3, [r7, #15]
        break;
 800b7b2:	e015      	b.n	800b7e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00e      	beq.n	800b7de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c4:	e00b      	b.n	800b7de <DMA_CheckFifoParam+0xe6>
        break;
 800b7c6:	bf00      	nop
 800b7c8:	e00a      	b.n	800b7e0 <DMA_CheckFifoParam+0xe8>
        break;
 800b7ca:	bf00      	nop
 800b7cc:	e008      	b.n	800b7e0 <DMA_CheckFifoParam+0xe8>
        break;
 800b7ce:	bf00      	nop
 800b7d0:	e006      	b.n	800b7e0 <DMA_CheckFifoParam+0xe8>
        break;
 800b7d2:	bf00      	nop
 800b7d4:	e004      	b.n	800b7e0 <DMA_CheckFifoParam+0xe8>
        break;
 800b7d6:	bf00      	nop
 800b7d8:	e002      	b.n	800b7e0 <DMA_CheckFifoParam+0xe8>
        break;
 800b7da:	bf00      	nop
 800b7dc:	e000      	b.n	800b7e0 <DMA_CheckFifoParam+0xe8>
    break;
 800b7de:	bf00      	nop
    }
  }

  return status;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3714      	adds	r7, #20
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop

0800b7f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4a38      	ldr	r2, [pc, #224]	; (800b8e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d022      	beq.n	800b84e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a36      	ldr	r2, [pc, #216]	; (800b8e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d01d      	beq.n	800b84e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a35      	ldr	r2, [pc, #212]	; (800b8ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d018      	beq.n	800b84e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a33      	ldr	r2, [pc, #204]	; (800b8f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b822:	4293      	cmp	r3, r2
 800b824:	d013      	beq.n	800b84e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	4a32      	ldr	r2, [pc, #200]	; (800b8f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d00e      	beq.n	800b84e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a30      	ldr	r2, [pc, #192]	; (800b8f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d009      	beq.n	800b84e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	4a2f      	ldr	r2, [pc, #188]	; (800b8fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d004      	beq.n	800b84e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a2d      	ldr	r2, [pc, #180]	; (800b900 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d101      	bne.n	800b852 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b84e:	2301      	movs	r3, #1
 800b850:	e000      	b.n	800b854 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b852:	2300      	movs	r3, #0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d01a      	beq.n	800b88e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	3b08      	subs	r3, #8
 800b860:	4a28      	ldr	r2, [pc, #160]	; (800b904 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b862:	fba2 2303 	umull	r2, r3, r2, r3
 800b866:	091b      	lsrs	r3, r3, #4
 800b868:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	4b26      	ldr	r3, [pc, #152]	; (800b908 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b86e:	4413      	add	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	461a      	mov	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	4a24      	ldr	r2, [pc, #144]	; (800b90c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b87c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f003 031f 	and.w	r3, r3, #31
 800b884:	2201      	movs	r2, #1
 800b886:	409a      	lsls	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b88c:	e024      	b.n	800b8d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	b2db      	uxtb	r3, r3
 800b894:	3b10      	subs	r3, #16
 800b896:	4a1e      	ldr	r2, [pc, #120]	; (800b910 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b898:	fba2 2303 	umull	r2, r3, r2, r3
 800b89c:	091b      	lsrs	r3, r3, #4
 800b89e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	4a1c      	ldr	r2, [pc, #112]	; (800b914 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d806      	bhi.n	800b8b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	4a1b      	ldr	r2, [pc, #108]	; (800b918 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d902      	bls.n	800b8b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	4b18      	ldr	r3, [pc, #96]	; (800b91c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b8ba:	4413      	add	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	461a      	mov	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a16      	ldr	r2, [pc, #88]	; (800b920 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b8c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f003 031f 	and.w	r3, r3, #31
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	409a      	lsls	r2, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b8d8:	bf00      	nop
 800b8da:	3714      	adds	r7, #20
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr
 800b8e4:	58025408 	.word	0x58025408
 800b8e8:	5802541c 	.word	0x5802541c
 800b8ec:	58025430 	.word	0x58025430
 800b8f0:	58025444 	.word	0x58025444
 800b8f4:	58025458 	.word	0x58025458
 800b8f8:	5802546c 	.word	0x5802546c
 800b8fc:	58025480 	.word	0x58025480
 800b900:	58025494 	.word	0x58025494
 800b904:	cccccccd 	.word	0xcccccccd
 800b908:	16009600 	.word	0x16009600
 800b90c:	58025880 	.word	0x58025880
 800b910:	aaaaaaab 	.word	0xaaaaaaab
 800b914:	400204b8 	.word	0x400204b8
 800b918:	4002040f 	.word	0x4002040f
 800b91c:	10008200 	.word	0x10008200
 800b920:	40020880 	.word	0x40020880

0800b924 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	b2db      	uxtb	r3, r3
 800b932:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d04a      	beq.n	800b9d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2b08      	cmp	r3, #8
 800b93e:	d847      	bhi.n	800b9d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a25      	ldr	r2, [pc, #148]	; (800b9dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d022      	beq.n	800b990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a24      	ldr	r2, [pc, #144]	; (800b9e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d01d      	beq.n	800b990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a22      	ldr	r2, [pc, #136]	; (800b9e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d018      	beq.n	800b990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a21      	ldr	r2, [pc, #132]	; (800b9e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d013      	beq.n	800b990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a1f      	ldr	r2, [pc, #124]	; (800b9ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00e      	beq.n	800b990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a1e      	ldr	r2, [pc, #120]	; (800b9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d009      	beq.n	800b990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a1c      	ldr	r2, [pc, #112]	; (800b9f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d004      	beq.n	800b990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a1b      	ldr	r2, [pc, #108]	; (800b9f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d101      	bne.n	800b994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b990:	2301      	movs	r3, #1
 800b992:	e000      	b.n	800b996 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b994:	2300      	movs	r3, #0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00a      	beq.n	800b9b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	4b17      	ldr	r3, [pc, #92]	; (800b9fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b99e:	4413      	add	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a15      	ldr	r2, [pc, #84]	; (800ba00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b9ac:	671a      	str	r2, [r3, #112]	; 0x70
 800b9ae:	e009      	b.n	800b9c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	4b14      	ldr	r3, [pc, #80]	; (800ba04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a11      	ldr	r2, [pc, #68]	; (800ba08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b9c2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	409a      	lsls	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b9d0:	bf00      	nop
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr
 800b9dc:	58025408 	.word	0x58025408
 800b9e0:	5802541c 	.word	0x5802541c
 800b9e4:	58025430 	.word	0x58025430
 800b9e8:	58025444 	.word	0x58025444
 800b9ec:	58025458 	.word	0x58025458
 800b9f0:	5802546c 	.word	0x5802546c
 800b9f4:	58025480 	.word	0x58025480
 800b9f8:	58025494 	.word	0x58025494
 800b9fc:	1600963f 	.word	0x1600963f
 800ba00:	58025940 	.word	0x58025940
 800ba04:	1000823f 	.word	0x1000823f
 800ba08:	40020940 	.word	0x40020940

0800ba0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b089      	sub	sp, #36	; 0x24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ba1a:	4b86      	ldr	r3, [pc, #536]	; (800bc34 <HAL_GPIO_Init+0x228>)
 800ba1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ba1e:	e18c      	b.n	800bd3a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	2101      	movs	r1, #1
 800ba26:	69fb      	ldr	r3, [r7, #28]
 800ba28:	fa01 f303 	lsl.w	r3, r1, r3
 800ba2c:	4013      	ands	r3, r2
 800ba2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	f000 817e 	beq.w	800bd34 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	f003 0303 	and.w	r3, r3, #3
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d005      	beq.n	800ba50 <HAL_GPIO_Init+0x44>
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	f003 0303 	and.w	r3, r3, #3
 800ba4c:	2b02      	cmp	r3, #2
 800ba4e:	d130      	bne.n	800bab2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	005b      	lsls	r3, r3, #1
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ba60:	43db      	mvns	r3, r3
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	4013      	ands	r3, r2
 800ba66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	68da      	ldr	r2, [r3, #12]
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	005b      	lsls	r3, r3, #1
 800ba70:	fa02 f303 	lsl.w	r3, r2, r3
 800ba74:	69ba      	ldr	r2, [r7, #24]
 800ba76:	4313      	orrs	r3, r2
 800ba78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	69ba      	ldr	r2, [r7, #24]
 800ba7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ba86:	2201      	movs	r2, #1
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8e:	43db      	mvns	r3, r3
 800ba90:	69ba      	ldr	r2, [r7, #24]
 800ba92:	4013      	ands	r3, r2
 800ba94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	091b      	lsrs	r3, r3, #4
 800ba9c:	f003 0201 	and.w	r2, r3, #1
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	fa02 f303 	lsl.w	r3, r2, r3
 800baa6:	69ba      	ldr	r2, [r7, #24]
 800baa8:	4313      	orrs	r3, r2
 800baaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	69ba      	ldr	r2, [r7, #24]
 800bab0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f003 0303 	and.w	r3, r3, #3
 800baba:	2b03      	cmp	r3, #3
 800babc:	d017      	beq.n	800baee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	2203      	movs	r2, #3
 800baca:	fa02 f303 	lsl.w	r3, r2, r3
 800bace:	43db      	mvns	r3, r3
 800bad0:	69ba      	ldr	r2, [r7, #24]
 800bad2:	4013      	ands	r3, r2
 800bad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	689a      	ldr	r2, [r3, #8]
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	005b      	lsls	r3, r3, #1
 800bade:	fa02 f303 	lsl.w	r3, r2, r3
 800bae2:	69ba      	ldr	r2, [r7, #24]
 800bae4:	4313      	orrs	r3, r2
 800bae6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	69ba      	ldr	r2, [r7, #24]
 800baec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	f003 0303 	and.w	r3, r3, #3
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d123      	bne.n	800bb42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	08da      	lsrs	r2, r3, #3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	3208      	adds	r2, #8
 800bb02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	f003 0307 	and.w	r3, r3, #7
 800bb0e:	009b      	lsls	r3, r3, #2
 800bb10:	220f      	movs	r2, #15
 800bb12:	fa02 f303 	lsl.w	r3, r2, r3
 800bb16:	43db      	mvns	r3, r3
 800bb18:	69ba      	ldr	r2, [r7, #24]
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	691a      	ldr	r2, [r3, #16]
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	f003 0307 	and.w	r3, r3, #7
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	08da      	lsrs	r2, r3, #3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3208      	adds	r2, #8
 800bb3c:	69b9      	ldr	r1, [r7, #24]
 800bb3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	2203      	movs	r2, #3
 800bb4e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb52:	43db      	mvns	r3, r3
 800bb54:	69ba      	ldr	r2, [r7, #24]
 800bb56:	4013      	ands	r3, r2
 800bb58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	f003 0203 	and.w	r2, r3, #3
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	fa02 f303 	lsl.w	r3, r2, r3
 800bb6a:	69ba      	ldr	r2, [r7, #24]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	69ba      	ldr	r2, [r7, #24]
 800bb74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f000 80d8 	beq.w	800bd34 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bb84:	4b2c      	ldr	r3, [pc, #176]	; (800bc38 <HAL_GPIO_Init+0x22c>)
 800bb86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb8a:	4a2b      	ldr	r2, [pc, #172]	; (800bc38 <HAL_GPIO_Init+0x22c>)
 800bb8c:	f043 0302 	orr.w	r3, r3, #2
 800bb90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bb94:	4b28      	ldr	r3, [pc, #160]	; (800bc38 <HAL_GPIO_Init+0x22c>)
 800bb96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb9a:	f003 0302 	and.w	r3, r3, #2
 800bb9e:	60fb      	str	r3, [r7, #12]
 800bba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bba2:	4a26      	ldr	r2, [pc, #152]	; (800bc3c <HAL_GPIO_Init+0x230>)
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	089b      	lsrs	r3, r3, #2
 800bba8:	3302      	adds	r3, #2
 800bbaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	f003 0303 	and.w	r3, r3, #3
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	220f      	movs	r2, #15
 800bbba:	fa02 f303 	lsl.w	r3, r2, r3
 800bbbe:	43db      	mvns	r3, r3
 800bbc0:	69ba      	ldr	r2, [r7, #24]
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	4a1d      	ldr	r2, [pc, #116]	; (800bc40 <HAL_GPIO_Init+0x234>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d04a      	beq.n	800bc64 <HAL_GPIO_Init+0x258>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a1c      	ldr	r2, [pc, #112]	; (800bc44 <HAL_GPIO_Init+0x238>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d02b      	beq.n	800bc2e <HAL_GPIO_Init+0x222>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a1b      	ldr	r2, [pc, #108]	; (800bc48 <HAL_GPIO_Init+0x23c>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d025      	beq.n	800bc2a <HAL_GPIO_Init+0x21e>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a1a      	ldr	r2, [pc, #104]	; (800bc4c <HAL_GPIO_Init+0x240>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d01f      	beq.n	800bc26 <HAL_GPIO_Init+0x21a>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	4a19      	ldr	r2, [pc, #100]	; (800bc50 <HAL_GPIO_Init+0x244>)
 800bbea:	4293      	cmp	r3, r2
 800bbec:	d019      	beq.n	800bc22 <HAL_GPIO_Init+0x216>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	4a18      	ldr	r2, [pc, #96]	; (800bc54 <HAL_GPIO_Init+0x248>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d013      	beq.n	800bc1e <HAL_GPIO_Init+0x212>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4a17      	ldr	r2, [pc, #92]	; (800bc58 <HAL_GPIO_Init+0x24c>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d00d      	beq.n	800bc1a <HAL_GPIO_Init+0x20e>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	4a16      	ldr	r2, [pc, #88]	; (800bc5c <HAL_GPIO_Init+0x250>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d007      	beq.n	800bc16 <HAL_GPIO_Init+0x20a>
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a15      	ldr	r2, [pc, #84]	; (800bc60 <HAL_GPIO_Init+0x254>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d101      	bne.n	800bc12 <HAL_GPIO_Init+0x206>
 800bc0e:	2309      	movs	r3, #9
 800bc10:	e029      	b.n	800bc66 <HAL_GPIO_Init+0x25a>
 800bc12:	230a      	movs	r3, #10
 800bc14:	e027      	b.n	800bc66 <HAL_GPIO_Init+0x25a>
 800bc16:	2307      	movs	r3, #7
 800bc18:	e025      	b.n	800bc66 <HAL_GPIO_Init+0x25a>
 800bc1a:	2306      	movs	r3, #6
 800bc1c:	e023      	b.n	800bc66 <HAL_GPIO_Init+0x25a>
 800bc1e:	2305      	movs	r3, #5
 800bc20:	e021      	b.n	800bc66 <HAL_GPIO_Init+0x25a>
 800bc22:	2304      	movs	r3, #4
 800bc24:	e01f      	b.n	800bc66 <HAL_GPIO_Init+0x25a>
 800bc26:	2303      	movs	r3, #3
 800bc28:	e01d      	b.n	800bc66 <HAL_GPIO_Init+0x25a>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e01b      	b.n	800bc66 <HAL_GPIO_Init+0x25a>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e019      	b.n	800bc66 <HAL_GPIO_Init+0x25a>
 800bc32:	bf00      	nop
 800bc34:	58000080 	.word	0x58000080
 800bc38:	58024400 	.word	0x58024400
 800bc3c:	58000400 	.word	0x58000400
 800bc40:	58020000 	.word	0x58020000
 800bc44:	58020400 	.word	0x58020400
 800bc48:	58020800 	.word	0x58020800
 800bc4c:	58020c00 	.word	0x58020c00
 800bc50:	58021000 	.word	0x58021000
 800bc54:	58021400 	.word	0x58021400
 800bc58:	58021800 	.word	0x58021800
 800bc5c:	58021c00 	.word	0x58021c00
 800bc60:	58022400 	.word	0x58022400
 800bc64:	2300      	movs	r3, #0
 800bc66:	69fa      	ldr	r2, [r7, #28]
 800bc68:	f002 0203 	and.w	r2, r2, #3
 800bc6c:	0092      	lsls	r2, r2, #2
 800bc6e:	4093      	lsls	r3, r2
 800bc70:	69ba      	ldr	r2, [r7, #24]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bc76:	4938      	ldr	r1, [pc, #224]	; (800bd58 <HAL_GPIO_Init+0x34c>)
 800bc78:	69fb      	ldr	r3, [r7, #28]
 800bc7a:	089b      	lsrs	r3, r3, #2
 800bc7c:	3302      	adds	r3, #2
 800bc7e:	69ba      	ldr	r2, [r7, #24]
 800bc80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bc84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	43db      	mvns	r3, r3
 800bc90:	69ba      	ldr	r2, [r7, #24]
 800bc92:	4013      	ands	r3, r2
 800bc94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d003      	beq.n	800bcaa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800bca2:	69ba      	ldr	r2, [r7, #24]
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800bcaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bcb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	43db      	mvns	r3, r3
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d003      	beq.n	800bcd8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800bcd0:	69ba      	ldr	r2, [r7, #24]
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800bcd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	43db      	mvns	r3, r3
 800bcea:	69ba      	ldr	r2, [r7, #24]
 800bcec:	4013      	ands	r3, r2
 800bcee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d003      	beq.n	800bd04 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800bcfc:	69ba      	ldr	r2, [r7, #24]
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	4313      	orrs	r3, r2
 800bd02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	69ba      	ldr	r2, [r7, #24]
 800bd08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	43db      	mvns	r3, r3
 800bd14:	69ba      	ldr	r2, [r7, #24]
 800bd16:	4013      	ands	r3, r2
 800bd18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800bd26:	69ba      	ldr	r2, [r7, #24]
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	69ba      	ldr	r2, [r7, #24]
 800bd32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	3301      	adds	r3, #1
 800bd38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	fa22 f303 	lsr.w	r3, r2, r3
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f47f ae6b 	bne.w	800ba20 <HAL_GPIO_Init+0x14>
  }
}
 800bd4a:	bf00      	nop
 800bd4c:	bf00      	nop
 800bd4e:	3724      	adds	r7, #36	; 0x24
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	58000400 	.word	0x58000400

0800bd5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	460b      	mov	r3, r1
 800bd66:	807b      	strh	r3, [r7, #2]
 800bd68:	4613      	mov	r3, r2
 800bd6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bd6c:	787b      	ldrb	r3, [r7, #1]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d003      	beq.n	800bd7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bd72:	887a      	ldrh	r2, [r7, #2]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800bd78:	e003      	b.n	800bd82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bd7a:	887b      	ldrh	r3, [r7, #2]
 800bd7c:	041a      	lsls	r2, r3, #16
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	619a      	str	r2, [r3, #24]
}
 800bd82:	bf00      	nop
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b085      	sub	sp, #20
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
 800bd96:	460b      	mov	r3, r1
 800bd98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bda0:	887a      	ldrh	r2, [r7, #2]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	4013      	ands	r3, r2
 800bda6:	041a      	lsls	r2, r3, #16
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	43d9      	mvns	r1, r3
 800bdac:	887b      	ldrh	r3, [r7, #2]
 800bdae:	400b      	ands	r3, r1
 800bdb0:	431a      	orrs	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	619a      	str	r2, [r3, #24]
}
 800bdb6:	bf00      	nop
 800bdb8:	3714      	adds	r7, #20
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr
	...

0800bdc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e07f      	b.n	800bed6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d106      	bne.n	800bdf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7f5 ffc0 	bl	8001d70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2224      	movs	r2, #36	; 0x24
 800bdf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	681a      	ldr	r2, [r3, #0]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f022 0201 	bic.w	r2, r2, #1
 800be06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	685a      	ldr	r2, [r3, #4]
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800be14:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	689a      	ldr	r2, [r3, #8]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be24:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	68db      	ldr	r3, [r3, #12]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d107      	bne.n	800be3e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be3a:	609a      	str	r2, [r3, #8]
 800be3c:	e006      	b.n	800be4c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	689a      	ldr	r2, [r3, #8]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800be4a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	2b02      	cmp	r3, #2
 800be52:	d104      	bne.n	800be5e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6859      	ldr	r1, [r3, #4]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	4b1d      	ldr	r3, [pc, #116]	; (800bee0 <HAL_I2C_Init+0x11c>)
 800be6a:	430b      	orrs	r3, r1
 800be6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	68da      	ldr	r2, [r3, #12]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	691a      	ldr	r2, [r3, #16]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	699b      	ldr	r3, [r3, #24]
 800be8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	430a      	orrs	r2, r1
 800be96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	69d9      	ldr	r1, [r3, #28]
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a1a      	ldr	r2, [r3, #32]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	430a      	orrs	r2, r1
 800bea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681a      	ldr	r2, [r3, #0]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f042 0201 	orr.w	r2, r2, #1
 800beb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2220      	movs	r2, #32
 800bec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	02008000 	.word	0x02008000

0800bee4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b088      	sub	sp, #32
 800bee8:	af02      	add	r7, sp, #8
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	607a      	str	r2, [r7, #4]
 800beee:	461a      	mov	r2, r3
 800bef0:	460b      	mov	r3, r1
 800bef2:	817b      	strh	r3, [r7, #10]
 800bef4:	4613      	mov	r3, r2
 800bef6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800befe:	b2db      	uxtb	r3, r3
 800bf00:	2b20      	cmp	r3, #32
 800bf02:	f040 80da 	bne.w	800c0ba <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d101      	bne.n	800bf14 <HAL_I2C_Master_Transmit+0x30>
 800bf10:	2302      	movs	r3, #2
 800bf12:	e0d3      	b.n	800c0bc <HAL_I2C_Master_Transmit+0x1d8>
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2201      	movs	r2, #1
 800bf18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bf1c:	f7fa feb8 	bl	8006c90 <HAL_GetTick>
 800bf20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	2319      	movs	r3, #25
 800bf28:	2201      	movs	r2, #1
 800bf2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f000 ffcf 	bl	800ced2 <I2C_WaitOnFlagUntilTimeout>
 800bf34:	4603      	mov	r3, r0
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d001      	beq.n	800bf3e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e0be      	b.n	800c0bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	2221      	movs	r2, #33	; 0x21
 800bf42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2210      	movs	r2, #16
 800bf4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	2200      	movs	r2, #0
 800bf52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	893a      	ldrh	r2, [r7, #8]
 800bf5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	2bff      	cmp	r3, #255	; 0xff
 800bf6e:	d90e      	bls.n	800bf8e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	22ff      	movs	r2, #255	; 0xff
 800bf74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	8979      	ldrh	r1, [r7, #10]
 800bf7e:	4b51      	ldr	r3, [pc, #324]	; (800c0c4 <HAL_I2C_Master_Transmit+0x1e0>)
 800bf80:	9300      	str	r3, [sp, #0]
 800bf82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f001 f9c6 	bl	800d318 <I2C_TransferConfig>
 800bf8c:	e06c      	b.n	800c068 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	8979      	ldrh	r1, [r7, #10]
 800bfa0:	4b48      	ldr	r3, [pc, #288]	; (800c0c4 <HAL_I2C_Master_Transmit+0x1e0>)
 800bfa2:	9300      	str	r3, [sp, #0]
 800bfa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f001 f9b5 	bl	800d318 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800bfae:	e05b      	b.n	800c068 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfb0:	697a      	ldr	r2, [r7, #20]
 800bfb2:	6a39      	ldr	r1, [r7, #32]
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f000 ffcc 	bl	800cf52 <I2C_WaitOnTXISFlagUntilTimeout>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e07b      	b.n	800c0bc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc8:	781a      	ldrb	r2, [r3, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfd4:	1c5a      	adds	r2, r3, #1
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	3b01      	subs	r3, #1
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfec:	3b01      	subs	r3, #1
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d034      	beq.n	800c068 <HAL_I2C_Master_Transmit+0x184>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c002:	2b00      	cmp	r3, #0
 800c004:	d130      	bne.n	800c068 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	6a3b      	ldr	r3, [r7, #32]
 800c00c:	2200      	movs	r2, #0
 800c00e:	2180      	movs	r1, #128	; 0x80
 800c010:	68f8      	ldr	r0, [r7, #12]
 800c012:	f000 ff5e 	bl	800ced2 <I2C_WaitOnFlagUntilTimeout>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d001      	beq.n	800c020 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800c01c:	2301      	movs	r3, #1
 800c01e:	e04d      	b.n	800c0bc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c024:	b29b      	uxth	r3, r3
 800c026:	2bff      	cmp	r3, #255	; 0xff
 800c028:	d90e      	bls.n	800c048 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	22ff      	movs	r2, #255	; 0xff
 800c02e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c034:	b2da      	uxtb	r2, r3
 800c036:	8979      	ldrh	r1, [r7, #10]
 800c038:	2300      	movs	r3, #0
 800c03a:	9300      	str	r3, [sp, #0]
 800c03c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c040:	68f8      	ldr	r0, [r7, #12]
 800c042:	f001 f969 	bl	800d318 <I2C_TransferConfig>
 800c046:	e00f      	b.n	800c068 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c056:	b2da      	uxtb	r2, r3
 800c058:	8979      	ldrh	r1, [r7, #10]
 800c05a:	2300      	movs	r3, #0
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f001 f958 	bl	800d318 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d19e      	bne.n	800bfb0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	6a39      	ldr	r1, [r7, #32]
 800c076:	68f8      	ldr	r0, [r7, #12]
 800c078:	f000 ffab 	bl	800cfd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d001      	beq.n	800c086 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800c082:	2301      	movs	r3, #1
 800c084:	e01a      	b.n	800c0bc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2220      	movs	r2, #32
 800c08c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6859      	ldr	r1, [r3, #4]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	4b0b      	ldr	r3, [pc, #44]	; (800c0c8 <HAL_I2C_Master_Transmit+0x1e4>)
 800c09a:	400b      	ands	r3, r1
 800c09c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	e000      	b.n	800c0bc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800c0ba:	2302      	movs	r3, #2
  }
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	80002000 	.word	0x80002000
 800c0c8:	fe00e800 	.word	0xfe00e800

0800c0cc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af02      	add	r7, sp, #8
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	607a      	str	r2, [r7, #4]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	460b      	mov	r3, r1
 800c0da:	817b      	strh	r3, [r7, #10]
 800c0dc:	4613      	mov	r3, r2
 800c0de:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	2b20      	cmp	r3, #32
 800c0ea:	f040 80db 	bne.w	800c2a4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0f4:	2b01      	cmp	r3, #1
 800c0f6:	d101      	bne.n	800c0fc <HAL_I2C_Master_Receive+0x30>
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	e0d4      	b.n	800c2a6 <HAL_I2C_Master_Receive+0x1da>
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2201      	movs	r2, #1
 800c100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c104:	f7fa fdc4 	bl	8006c90 <HAL_GetTick>
 800c108:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	2319      	movs	r3, #25
 800c110:	2201      	movs	r2, #1
 800c112:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c116:	68f8      	ldr	r0, [r7, #12]
 800c118:	f000 fedb 	bl	800ced2 <I2C_WaitOnFlagUntilTimeout>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d001      	beq.n	800c126 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800c122:	2301      	movs	r3, #1
 800c124:	e0bf      	b.n	800c2a6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2222      	movs	r2, #34	; 0x22
 800c12a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2210      	movs	r2, #16
 800c132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2200      	movs	r2, #0
 800c13a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	893a      	ldrh	r2, [r7, #8]
 800c146:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2200      	movs	r2, #0
 800c14c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c152:	b29b      	uxth	r3, r3
 800c154:	2bff      	cmp	r3, #255	; 0xff
 800c156:	d90e      	bls.n	800c176 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	22ff      	movs	r2, #255	; 0xff
 800c15c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c162:	b2da      	uxtb	r2, r3
 800c164:	8979      	ldrh	r1, [r7, #10]
 800c166:	4b52      	ldr	r3, [pc, #328]	; (800c2b0 <HAL_I2C_Master_Receive+0x1e4>)
 800c168:	9300      	str	r3, [sp, #0]
 800c16a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f001 f8d2 	bl	800d318 <I2C_TransferConfig>
 800c174:	e06d      	b.n	800c252 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c184:	b2da      	uxtb	r2, r3
 800c186:	8979      	ldrh	r1, [r7, #10]
 800c188:	4b49      	ldr	r3, [pc, #292]	; (800c2b0 <HAL_I2C_Master_Receive+0x1e4>)
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f001 f8c1 	bl	800d318 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800c196:	e05c      	b.n	800c252 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c198:	697a      	ldr	r2, [r7, #20]
 800c19a:	6a39      	ldr	r1, [r7, #32]
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	f000 ff55 	bl	800d04c <I2C_WaitOnRXNEFlagUntilTimeout>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d001      	beq.n	800c1ac <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	e07c      	b.n	800c2a6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b6:	b2d2      	uxtb	r2, r2
 800c1b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1c8:	3b01      	subs	r3, #1
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	b29a      	uxth	r2, r3
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d034      	beq.n	800c252 <HAL_I2C_Master_Receive+0x186>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d130      	bne.n	800c252 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	9300      	str	r3, [sp, #0]
 800c1f4:	6a3b      	ldr	r3, [r7, #32]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	2180      	movs	r1, #128	; 0x80
 800c1fa:	68f8      	ldr	r0, [r7, #12]
 800c1fc:	f000 fe69 	bl	800ced2 <I2C_WaitOnFlagUntilTimeout>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d001      	beq.n	800c20a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800c206:	2301      	movs	r3, #1
 800c208:	e04d      	b.n	800c2a6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c20e:	b29b      	uxth	r3, r3
 800c210:	2bff      	cmp	r3, #255	; 0xff
 800c212:	d90e      	bls.n	800c232 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	22ff      	movs	r2, #255	; 0xff
 800c218:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	8979      	ldrh	r1, [r7, #10]
 800c222:	2300      	movs	r3, #0
 800c224:	9300      	str	r3, [sp, #0]
 800c226:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f001 f874 	bl	800d318 <I2C_TransferConfig>
 800c230:	e00f      	b.n	800c252 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c236:	b29a      	uxth	r2, r3
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c240:	b2da      	uxtb	r2, r3
 800c242:	8979      	ldrh	r1, [r7, #10]
 800c244:	2300      	movs	r3, #0
 800c246:	9300      	str	r3, [sp, #0]
 800c248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f001 f863 	bl	800d318 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c256:	b29b      	uxth	r3, r3
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d19d      	bne.n	800c198 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c25c:	697a      	ldr	r2, [r7, #20]
 800c25e:	6a39      	ldr	r1, [r7, #32]
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f000 feb6 	bl	800cfd2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	e01a      	b.n	800c2a6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	2220      	movs	r2, #32
 800c276:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	6859      	ldr	r1, [r3, #4]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	4b0c      	ldr	r3, [pc, #48]	; (800c2b4 <HAL_I2C_Master_Receive+0x1e8>)
 800c284:	400b      	ands	r3, r1
 800c286:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2220      	movs	r2, #32
 800c28c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	e000      	b.n	800c2a6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800c2a4:	2302      	movs	r3, #2
  }
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	80002400 	.word	0x80002400
 800c2b4:	fe00e800 	.word	0xfe00e800

0800c2b8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	699b      	ldr	r3, [r3, #24]
 800c2c6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	0a1b      	lsrs	r3, r3, #8
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d010      	beq.n	800c2fe <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	09db      	lsrs	r3, r3, #7
 800c2e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00a      	beq.n	800c2fe <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ec:	f043 0201 	orr.w	r2, r3, #1
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c2fc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	0a9b      	lsrs	r3, r3, #10
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	d010      	beq.n	800c32c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	09db      	lsrs	r3, r3, #7
 800c30e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00a      	beq.n	800c32c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c31a:	f043 0208 	orr.w	r2, r3, #8
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c32a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	0a5b      	lsrs	r3, r3, #9
 800c330:	f003 0301 	and.w	r3, r3, #1
 800c334:	2b00      	cmp	r3, #0
 800c336:	d010      	beq.n	800c35a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	09db      	lsrs	r3, r3, #7
 800c33c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00a      	beq.n	800c35a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c348:	f043 0202 	orr.w	r2, r3, #2
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c358:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c35e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f003 030b 	and.w	r3, r3, #11
 800c366:	2b00      	cmp	r3, #0
 800c368:	d003      	beq.n	800c372 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800c36a:	68f9      	ldr	r1, [r7, #12]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fc77 	bl	800cc60 <I2C_ITError>
  }
}
 800c372:	bf00      	nop
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c37a:	b480      	push	{r7}
 800c37c:	b083      	sub	sp, #12
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c382:	bf00      	nop
 800c384:	370c      	adds	r7, #12
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr

0800c38e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c38e:	b480      	push	{r7}
 800c390:	b083      	sub	sp, #12
 800c392:	af00      	add	r7, sp, #0
 800c394:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c396:	bf00      	nop
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b083      	sub	sp, #12
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	70fb      	strb	r3, [r7, #3]
 800c3ae:	4613      	mov	r3, r2
 800c3b0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c3b2:	bf00      	nop
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3be:	b480      	push	{r7}
 800c3c0:	b083      	sub	sp, #12
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c3c6:	bf00      	nop
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b083      	sub	sp, #12
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c3da:	bf00      	nop
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b083      	sub	sp, #12
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c3ee:	bf00      	nop
 800c3f0:	370c      	adds	r7, #12
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f8:	4770      	bx	lr

0800c3fa <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b086      	sub	sp, #24
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	60f8      	str	r0, [r7, #12]
 800c402:	60b9      	str	r1, [r7, #8]
 800c404:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c416:	2b01      	cmp	r3, #1
 800c418:	d101      	bne.n	800c41e <I2C_Slave_ISR_IT+0x24>
 800c41a:	2302      	movs	r3, #2
 800c41c:	e0ec      	b.n	800c5f8 <I2C_Slave_ISR_IT+0x1fe>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	095b      	lsrs	r3, r3, #5
 800c42a:	f003 0301 	and.w	r3, r3, #1
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d009      	beq.n	800c446 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	095b      	lsrs	r3, r3, #5
 800c436:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d003      	beq.n	800c446 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c43e:	6939      	ldr	r1, [r7, #16]
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f000 f9bf 	bl	800c7c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	091b      	lsrs	r3, r3, #4
 800c44a:	f003 0301 	and.w	r3, r3, #1
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d04d      	beq.n	800c4ee <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	091b      	lsrs	r3, r3, #4
 800c456:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d047      	beq.n	800c4ee <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c462:	b29b      	uxth	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d128      	bne.n	800c4ba <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b28      	cmp	r3, #40	; 0x28
 800c472:	d108      	bne.n	800c486 <I2C_Slave_ISR_IT+0x8c>
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c47a:	d104      	bne.n	800c486 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c47c:	6939      	ldr	r1, [r7, #16]
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f000 fb98 	bl	800cbb4 <I2C_ITListenCplt>
 800c484:	e032      	b.n	800c4ec <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	2b29      	cmp	r3, #41	; 0x29
 800c490:	d10e      	bne.n	800c4b0 <I2C_Slave_ISR_IT+0xb6>
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c498:	d00a      	beq.n	800c4b0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2210      	movs	r2, #16
 800c4a0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c4a2:	68f8      	ldr	r0, [r7, #12]
 800c4a4:	f000 fcd3 	bl	800ce4e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c4a8:	68f8      	ldr	r0, [r7, #12]
 800c4aa:	f000 f92d 	bl	800c708 <I2C_ITSlaveSeqCplt>
 800c4ae:	e01d      	b.n	800c4ec <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2210      	movs	r2, #16
 800c4b6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c4b8:	e096      	b.n	800c5e8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2210      	movs	r2, #16
 800c4c0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c6:	f043 0204 	orr.w	r2, r3, #4
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d004      	beq.n	800c4de <I2C_Slave_ISR_IT+0xe4>
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c4da:	f040 8085 	bne.w	800c5e8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f000 fbbb 	bl	800cc60 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c4ea:	e07d      	b.n	800c5e8 <I2C_Slave_ISR_IT+0x1ee>
 800c4ec:	e07c      	b.n	800c5e8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c4ee:	693b      	ldr	r3, [r7, #16]
 800c4f0:	089b      	lsrs	r3, r3, #2
 800c4f2:	f003 0301 	and.w	r3, r3, #1
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d030      	beq.n	800c55c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	089b      	lsrs	r3, r3, #2
 800c4fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800c502:	2b00      	cmp	r3, #0
 800c504:	d02a      	beq.n	800c55c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d018      	beq.n	800c542 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51a:	b2d2      	uxtb	r2, r2
 800c51c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c522:	1c5a      	adds	r2, r3, #1
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c52c:	3b01      	subs	r3, #1
 800c52e:	b29a      	uxth	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c538:	b29b      	uxth	r3, r3
 800c53a:	3b01      	subs	r3, #1
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c546:	b29b      	uxth	r3, r3
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d14f      	bne.n	800c5ec <I2C_Slave_ISR_IT+0x1f2>
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c552:	d04b      	beq.n	800c5ec <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f000 f8d7 	bl	800c708 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c55a:	e047      	b.n	800c5ec <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	08db      	lsrs	r3, r3, #3
 800c560:	f003 0301 	and.w	r3, r3, #1
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00a      	beq.n	800c57e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	08db      	lsrs	r3, r3, #3
 800c56c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800c570:	2b00      	cmp	r3, #0
 800c572:	d004      	beq.n	800c57e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c574:	6939      	ldr	r1, [r7, #16]
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f000 f842 	bl	800c600 <I2C_ITAddrCplt>
 800c57c:	e037      	b.n	800c5ee <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	085b      	lsrs	r3, r3, #1
 800c582:	f003 0301 	and.w	r3, r3, #1
 800c586:	2b00      	cmp	r3, #0
 800c588:	d031      	beq.n	800c5ee <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	085b      	lsrs	r3, r3, #1
 800c58e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800c592:	2b00      	cmp	r3, #0
 800c594:	d02b      	beq.n	800c5ee <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d018      	beq.n	800c5d2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5a4:	781a      	ldrb	r2, [r3, #0]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b0:	1c5a      	adds	r2, r3, #1
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	b29a      	uxth	r2, r3
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	851a      	strh	r2, [r3, #40]	; 0x28
 800c5d0:	e00d      	b.n	800c5ee <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5d8:	d002      	beq.n	800c5e0 <I2C_Slave_ISR_IT+0x1e6>
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d106      	bne.n	800c5ee <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f000 f891 	bl	800c708 <I2C_ITSlaveSeqCplt>
 800c5e6:	e002      	b.n	800c5ee <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800c5e8:	bf00      	nop
 800c5ea:	e000      	b.n	800c5ee <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800c5ec:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3718      	adds	r7, #24
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c610:	b2db      	uxtb	r3, r3
 800c612:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800c616:	2b28      	cmp	r3, #40	; 0x28
 800c618:	d16a      	bne.n	800c6f0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	699b      	ldr	r3, [r3, #24]
 800c620:	0c1b      	lsrs	r3, r3, #16
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 0301 	and.w	r3, r3, #1
 800c628:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	699b      	ldr	r3, [r3, #24]
 800c630:	0c1b      	lsrs	r3, r3, #16
 800c632:	b29b      	uxth	r3, r3
 800c634:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c638:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	b29b      	uxth	r3, r3
 800c642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c646:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	b29b      	uxth	r3, r3
 800c650:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800c654:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d138      	bne.n	800c6d0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800c65e:	897b      	ldrh	r3, [r7, #10]
 800c660:	09db      	lsrs	r3, r3, #7
 800c662:	b29a      	uxth	r2, r3
 800c664:	89bb      	ldrh	r3, [r7, #12]
 800c666:	4053      	eors	r3, r2
 800c668:	b29b      	uxth	r3, r3
 800c66a:	f003 0306 	and.w	r3, r3, #6
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d11c      	bne.n	800c6ac <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800c672:	897b      	ldrh	r3, [r7, #10]
 800c674:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c67a:	1c5a      	adds	r2, r3, #1
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c684:	2b02      	cmp	r3, #2
 800c686:	d13b      	bne.n	800c700 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2200      	movs	r2, #0
 800c68c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2208      	movs	r2, #8
 800c694:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c69e:	89ba      	ldrh	r2, [r7, #12]
 800c6a0:	7bfb      	ldrb	r3, [r7, #15]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff fe7c 	bl	800c3a2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800c6aa:	e029      	b.n	800c700 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800c6ac:	893b      	ldrh	r3, [r7, #8]
 800c6ae:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fe61 	bl	800d37c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6c2:	89ba      	ldrh	r2, [r7, #12]
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff fe6a 	bl	800c3a2 <HAL_I2C_AddrCallback>
}
 800c6ce:	e017      	b.n	800c700 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800c6d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fe51 	bl	800d37c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800c6e2:	89ba      	ldrh	r2, [r7, #12]
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	f7ff fe5a 	bl	800c3a2 <HAL_I2C_AddrCallback>
}
 800c6ee:	e007      	b.n	800c700 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2208      	movs	r2, #8
 800c6f6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800c700:	bf00      	nop
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	0b9b      	lsrs	r3, r3, #14
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d008      	beq.n	800c73e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c73a:	601a      	str	r2, [r3, #0]
 800c73c:	e00d      	b.n	800c75a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	0bdb      	lsrs	r3, r3, #15
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d007      	beq.n	800c75a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c758:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c760:	b2db      	uxtb	r3, r3
 800c762:	2b29      	cmp	r3, #41	; 0x29
 800c764:	d112      	bne.n	800c78c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2228      	movs	r2, #40	; 0x28
 800c76a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2221      	movs	r2, #33	; 0x21
 800c772:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c774:	2101      	movs	r1, #1
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fe00 	bl	800d37c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff fdf8 	bl	800c37a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c78a:	e017      	b.n	800c7bc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c792:	b2db      	uxtb	r3, r3
 800c794:	2b2a      	cmp	r3, #42	; 0x2a
 800c796:	d111      	bne.n	800c7bc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	2228      	movs	r2, #40	; 0x28
 800c79c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2222      	movs	r2, #34	; 0x22
 800c7a4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800c7a6:	2102      	movs	r1, #2
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fde7 	bl	800d37c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f7ff fde9 	bl	800c38e <HAL_I2C_SlaveRxCpltCallback>
}
 800c7bc:	bf00      	nop
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7e0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2220      	movs	r2, #32
 800c7e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800c7ea:	7bfb      	ldrb	r3, [r7, #15]
 800c7ec:	2b21      	cmp	r3, #33	; 0x21
 800c7ee:	d002      	beq.n	800c7f6 <I2C_ITSlaveCplt+0x32>
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
 800c7f2:	2b29      	cmp	r3, #41	; 0x29
 800c7f4:	d108      	bne.n	800c808 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800c7f6:	f248 0101 	movw	r1, #32769	; 0x8001
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fdbe 	bl	800d37c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2221      	movs	r2, #33	; 0x21
 800c804:	631a      	str	r2, [r3, #48]	; 0x30
 800c806:	e00d      	b.n	800c824 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800c808:	7bfb      	ldrb	r3, [r7, #15]
 800c80a:	2b22      	cmp	r3, #34	; 0x22
 800c80c:	d002      	beq.n	800c814 <I2C_ITSlaveCplt+0x50>
 800c80e:	7bfb      	ldrb	r3, [r7, #15]
 800c810:	2b2a      	cmp	r3, #42	; 0x2a
 800c812:	d107      	bne.n	800c824 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800c814:	f248 0102 	movw	r1, #32770	; 0x8002
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fdaf 	bl	800d37c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2222      	movs	r2, #34	; 0x22
 800c822:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c832:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	6859      	ldr	r1, [r3, #4]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	4b80      	ldr	r3, [pc, #512]	; (800ca40 <I2C_ITSlaveCplt+0x27c>)
 800c840:	400b      	ands	r3, r1
 800c842:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fb02 	bl	800ce4e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800c84a:	693b      	ldr	r3, [r7, #16]
 800c84c:	0b9b      	lsrs	r3, r3, #14
 800c84e:	f003 0301 	and.w	r3, r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	d07a      	beq.n	800c94c <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c864:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	f000 8111 	beq.w	800ca92 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a73      	ldr	r2, [pc, #460]	; (800ca44 <I2C_ITSlaveCplt+0x280>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d059      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a71      	ldr	r2, [pc, #452]	; (800ca48 <I2C_ITSlaveCplt+0x284>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d053      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a6f      	ldr	r2, [pc, #444]	; (800ca4c <I2C_ITSlaveCplt+0x288>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d04d      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4a6d      	ldr	r2, [pc, #436]	; (800ca50 <I2C_ITSlaveCplt+0x28c>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d047      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a6b      	ldr	r2, [pc, #428]	; (800ca54 <I2C_ITSlaveCplt+0x290>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d041      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a69      	ldr	r2, [pc, #420]	; (800ca58 <I2C_ITSlaveCplt+0x294>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d03b      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a67      	ldr	r2, [pc, #412]	; (800ca5c <I2C_ITSlaveCplt+0x298>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d035      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a65      	ldr	r2, [pc, #404]	; (800ca60 <I2C_ITSlaveCplt+0x29c>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d02f      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a63      	ldr	r2, [pc, #396]	; (800ca64 <I2C_ITSlaveCplt+0x2a0>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d029      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a61      	ldr	r2, [pc, #388]	; (800ca68 <I2C_ITSlaveCplt+0x2a4>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d023      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a5f      	ldr	r2, [pc, #380]	; (800ca6c <I2C_ITSlaveCplt+0x2a8>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d01d      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a5d      	ldr	r2, [pc, #372]	; (800ca70 <I2C_ITSlaveCplt+0x2ac>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d017      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	4a5b      	ldr	r2, [pc, #364]	; (800ca74 <I2C_ITSlaveCplt+0x2b0>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d011      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	4a59      	ldr	r2, [pc, #356]	; (800ca78 <I2C_ITSlaveCplt+0x2b4>)
 800c914:	4293      	cmp	r3, r2
 800c916:	d00b      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a57      	ldr	r2, [pc, #348]	; (800ca7c <I2C_ITSlaveCplt+0x2b8>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d005      	beq.n	800c930 <I2C_ITSlaveCplt+0x16c>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a55      	ldr	r2, [pc, #340]	; (800ca80 <I2C_ITSlaveCplt+0x2bc>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d105      	bne.n	800c93c <I2C_ITSlaveCplt+0x178>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	685b      	ldr	r3, [r3, #4]
 800c938:	b29b      	uxth	r3, r3
 800c93a:	e004      	b.n	800c946 <I2C_ITSlaveCplt+0x182>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	b29b      	uxth	r3, r3
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	8553      	strh	r3, [r2, #42]	; 0x2a
 800c94a:	e0a2      	b.n	800ca92 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	0bdb      	lsrs	r3, r3, #15
 800c950:	f003 0301 	and.w	r3, r3, #1
 800c954:	2b00      	cmp	r3, #0
 800c956:	f000 809c 	beq.w	800ca92 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	681a      	ldr	r2, [r3, #0]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c968:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 808f 	beq.w	800ca92 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a32      	ldr	r2, [pc, #200]	; (800ca44 <I2C_ITSlaveCplt+0x280>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d059      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a30      	ldr	r2, [pc, #192]	; (800ca48 <I2C_ITSlaveCplt+0x284>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d053      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a2e      	ldr	r2, [pc, #184]	; (800ca4c <I2C_ITSlaveCplt+0x288>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d04d      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a2c      	ldr	r2, [pc, #176]	; (800ca50 <I2C_ITSlaveCplt+0x28c>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d047      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a2a      	ldr	r2, [pc, #168]	; (800ca54 <I2C_ITSlaveCplt+0x290>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d041      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a28      	ldr	r2, [pc, #160]	; (800ca58 <I2C_ITSlaveCplt+0x294>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d03b      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a26      	ldr	r2, [pc, #152]	; (800ca5c <I2C_ITSlaveCplt+0x298>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d035      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a24      	ldr	r2, [pc, #144]	; (800ca60 <I2C_ITSlaveCplt+0x29c>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d02f      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a22      	ldr	r2, [pc, #136]	; (800ca64 <I2C_ITSlaveCplt+0x2a0>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d029      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4a20      	ldr	r2, [pc, #128]	; (800ca68 <I2C_ITSlaveCplt+0x2a4>)
 800c9e8:	4293      	cmp	r3, r2
 800c9ea:	d023      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4a1e      	ldr	r2, [pc, #120]	; (800ca6c <I2C_ITSlaveCplt+0x2a8>)
 800c9f4:	4293      	cmp	r3, r2
 800c9f6:	d01d      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	4a1c      	ldr	r2, [pc, #112]	; (800ca70 <I2C_ITSlaveCplt+0x2ac>)
 800ca00:	4293      	cmp	r3, r2
 800ca02:	d017      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a1a      	ldr	r2, [pc, #104]	; (800ca74 <I2C_ITSlaveCplt+0x2b0>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d011      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a18      	ldr	r2, [pc, #96]	; (800ca78 <I2C_ITSlaveCplt+0x2b4>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d00b      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a16      	ldr	r2, [pc, #88]	; (800ca7c <I2C_ITSlaveCplt+0x2b8>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d005      	beq.n	800ca34 <I2C_ITSlaveCplt+0x270>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a14      	ldr	r2, [pc, #80]	; (800ca80 <I2C_ITSlaveCplt+0x2bc>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d127      	bne.n	800ca84 <I2C_ITSlaveCplt+0x2c0>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	b29b      	uxth	r3, r3
 800ca3e:	e026      	b.n	800ca8e <I2C_ITSlaveCplt+0x2ca>
 800ca40:	fe00e800 	.word	0xfe00e800
 800ca44:	40020010 	.word	0x40020010
 800ca48:	40020028 	.word	0x40020028
 800ca4c:	40020040 	.word	0x40020040
 800ca50:	40020058 	.word	0x40020058
 800ca54:	40020070 	.word	0x40020070
 800ca58:	40020088 	.word	0x40020088
 800ca5c:	400200a0 	.word	0x400200a0
 800ca60:	400200b8 	.word	0x400200b8
 800ca64:	40020410 	.word	0x40020410
 800ca68:	40020428 	.word	0x40020428
 800ca6c:	40020440 	.word	0x40020440
 800ca70:	40020458 	.word	0x40020458
 800ca74:	40020470 	.word	0x40020470
 800ca78:	40020488 	.word	0x40020488
 800ca7c:	400204a0 	.word	0x400204a0
 800ca80:	400204b8 	.word	0x400204b8
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	089b      	lsrs	r3, r3, #2
 800ca96:	f003 0301 	and.w	r3, r3, #1
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d020      	beq.n	800cae0 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f023 0304 	bic.w	r3, r3, #4
 800caa4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab0:	b2d2      	uxtb	r2, r2
 800cab2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	1c5a      	adds	r2, r3, #1
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00c      	beq.n	800cae0 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caca:	3b01      	subs	r3, #1
 800cacc:	b29a      	uxth	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	3b01      	subs	r3, #1
 800cada:	b29a      	uxth	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d005      	beq.n	800caf6 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caee:	f043 0204 	orr.w	r2, r3, #4
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d010      	beq.n	800cb2e <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f000 f8a4 	bl	800cc60 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	2b28      	cmp	r3, #40	; 0x28
 800cb22:	d141      	bne.n	800cba8 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cb24:	6979      	ldr	r1, [r7, #20]
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 f844 	bl	800cbb4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cb2c:	e03c      	b.n	800cba8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cb36:	d014      	beq.n	800cb62 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7ff fde5 	bl	800c708 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a1b      	ldr	r2, [pc, #108]	; (800cbb0 <I2C_ITSlaveCplt+0x3ec>)
 800cb42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2220      	movs	r2, #32
 800cb48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7ff fc2f 	bl	800c3be <HAL_I2C_ListenCpltCallback>
}
 800cb60:	e022      	b.n	800cba8 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	2b22      	cmp	r3, #34	; 0x22
 800cb6c:	d10e      	bne.n	800cb8c <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2220      	movs	r2, #32
 800cb72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2200      	movs	r2, #0
 800cb80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff fc02 	bl	800c38e <HAL_I2C_SlaveRxCpltCallback>
}
 800cb8a:	e00d      	b.n	800cba8 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2220      	movs	r2, #32
 800cb90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff fbe9 	bl	800c37a <HAL_I2C_SlaveTxCpltCallback>
}
 800cba8:	bf00      	nop
 800cbaa:	3718      	adds	r7, #24
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}
 800cbb0:	ffff0000 	.word	0xffff0000

0800cbb4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a26      	ldr	r2, [pc, #152]	; (800cc5c <I2C_ITListenCplt+0xa8>)
 800cbc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2220      	movs	r2, #32
 800cbce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	089b      	lsrs	r3, r3, #2
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d022      	beq.n	800cc32 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf6:	b2d2      	uxtb	r2, r2
 800cbf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbfe:	1c5a      	adds	r2, r3, #1
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d012      	beq.n	800cc32 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc10:	3b01      	subs	r3, #1
 800cc12:	b29a      	uxth	r2, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	b29a      	uxth	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc2a:	f043 0204 	orr.w	r2, r3, #4
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cc32:	f248 0103 	movw	r1, #32771	; 0x8003
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fba0 	bl	800d37c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2210      	movs	r2, #16
 800cc42:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff fbb6 	bl	800c3be <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800cc52:	bf00      	nop
 800cc54:	3708      	adds	r7, #8
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	ffff0000 	.word	0xffff0000

0800cc60 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cc70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4a5d      	ldr	r2, [pc, #372]	; (800cdf4 <I2C_ITError+0x194>)
 800cc7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	431a      	orrs	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	2b28      	cmp	r3, #40	; 0x28
 800cc96:	d005      	beq.n	800cca4 <I2C_ITError+0x44>
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
 800cc9a:	2b29      	cmp	r3, #41	; 0x29
 800cc9c:	d002      	beq.n	800cca4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
 800cca0:	2b2a      	cmp	r3, #42	; 0x2a
 800cca2:	d10b      	bne.n	800ccbc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800cca4:	2103      	movs	r1, #3
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 fb68 	bl	800d37c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2228      	movs	r2, #40	; 0x28
 800ccb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	4a50      	ldr	r2, [pc, #320]	; (800cdf8 <I2C_ITError+0x198>)
 800ccb8:	635a      	str	r2, [r3, #52]	; 0x34
 800ccba:	e011      	b.n	800cce0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ccbc:	f248 0103 	movw	r1, #32771	; 0x8003
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f000 fb5b 	bl	800d37c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	2b60      	cmp	r3, #96	; 0x60
 800ccd0:	d003      	beq.n	800ccda <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2220      	movs	r2, #32
 800ccd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cce4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d039      	beq.n	800cd62 <I2C_ITError+0x102>
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	2b11      	cmp	r3, #17
 800ccf2:	d002      	beq.n	800ccfa <I2C_ITError+0x9a>
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	2b21      	cmp	r3, #33	; 0x21
 800ccf8:	d133      	bne.n	800cd62 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd08:	d107      	bne.n	800cd1a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cd18:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fe fc2a 	bl	800b578 <HAL_DMA_GetState>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d017      	beq.n	800cd5a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2e:	4a33      	ldr	r2, [pc, #204]	; (800cdfc <I2C_ITError+0x19c>)
 800cd30:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3e:	4618      	mov	r0, r3
 800cd40:	f7fd faaa 	bl	800a298 <HAL_DMA_Abort_IT>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d04d      	beq.n	800cde6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd50:	687a      	ldr	r2, [r7, #4]
 800cd52:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cd54:	4610      	mov	r0, r2
 800cd56:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cd58:	e045      	b.n	800cde6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f850 	bl	800ce00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cd60:	e041      	b.n	800cde6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d039      	beq.n	800cdde <I2C_ITError+0x17e>
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b12      	cmp	r3, #18
 800cd6e:	d002      	beq.n	800cd76 <I2C_ITError+0x116>
 800cd70:	68bb      	ldr	r3, [r7, #8]
 800cd72:	2b22      	cmp	r3, #34	; 0x22
 800cd74:	d133      	bne.n	800cdde <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd84:	d107      	bne.n	800cd96 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cd94:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fe fbec 	bl	800b578 <HAL_DMA_GetState>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d017      	beq.n	800cdd6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdaa:	4a14      	ldr	r2, [pc, #80]	; (800cdfc <I2C_ITError+0x19c>)
 800cdac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fd fa6c 	bl	800a298 <HAL_DMA_Abort_IT>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d011      	beq.n	800cdea <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cdd4:	e009      	b.n	800cdea <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f000 f812 	bl	800ce00 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cddc:	e005      	b.n	800cdea <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 f80e 	bl	800ce00 <I2C_TreatErrorCallback>
  }
}
 800cde4:	e002      	b.n	800cdec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800cde6:	bf00      	nop
 800cde8:	e000      	b.n	800cdec <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800cdea:	bf00      	nop
}
 800cdec:	bf00      	nop
 800cdee:	3710      	adds	r7, #16
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	ffff0000 	.word	0xffff0000
 800cdf8:	0800c3fb 	.word	0x0800c3fb
 800cdfc:	0800ce97 	.word	0x0800ce97

0800ce00 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	2b60      	cmp	r3, #96	; 0x60
 800ce12:	d10e      	bne.n	800ce32 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2220      	movs	r2, #32
 800ce18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7ff fadb 	bl	800c3e6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ce30:	e009      	b.n	800ce46 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff fac6 	bl	800c3d2 <HAL_I2C_ErrorCallback>
}
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ce4e:	b480      	push	{r7}
 800ce50:	b083      	sub	sp, #12
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	699b      	ldr	r3, [r3, #24]
 800ce5c:	f003 0302 	and.w	r3, r3, #2
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d103      	bne.n	800ce6c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	2200      	movs	r2, #0
 800ce6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	699b      	ldr	r3, [r3, #24]
 800ce72:	f003 0301 	and.w	r3, r3, #1
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d007      	beq.n	800ce8a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	699a      	ldr	r2, [r3, #24]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f042 0201 	orr.w	r2, r2, #1
 800ce88:	619a      	str	r2, [r3, #24]
  }
}
 800ce8a:	bf00      	nop
 800ce8c:	370c      	adds	r7, #12
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b084      	sub	sp, #16
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d003      	beq.n	800ceb4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d003      	beq.n	800cec4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cec0:	2200      	movs	r2, #0
 800cec2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f7ff ff9b 	bl	800ce00 <I2C_TreatErrorCallback>
}
 800ceca:	bf00      	nop
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b084      	sub	sp, #16
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	60f8      	str	r0, [r7, #12]
 800ceda:	60b9      	str	r1, [r7, #8]
 800cedc:	603b      	str	r3, [r7, #0]
 800cede:	4613      	mov	r3, r2
 800cee0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cee2:	e022      	b.n	800cf2a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceea:	d01e      	beq.n	800cf2a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ceec:	f7f9 fed0 	bl	8006c90 <HAL_GetTick>
 800cef0:	4602      	mov	r2, r0
 800cef2:	69bb      	ldr	r3, [r7, #24]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d302      	bcc.n	800cf02 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d113      	bne.n	800cf2a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf06:	f043 0220 	orr.w	r2, r3, #32
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2220      	movs	r2, #32
 800cf12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2200      	movs	r2, #0
 800cf22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	e00f      	b.n	800cf4a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	699a      	ldr	r2, [r3, #24]
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	4013      	ands	r3, r2
 800cf34:	68ba      	ldr	r2, [r7, #8]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	bf0c      	ite	eq
 800cf3a:	2301      	moveq	r3, #1
 800cf3c:	2300      	movne	r3, #0
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	461a      	mov	r2, r3
 800cf42:	79fb      	ldrb	r3, [r7, #7]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d0cd      	beq.n	800cee4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800cf48:	2300      	movs	r3, #0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	60f8      	str	r0, [r7, #12]
 800cf5a:	60b9      	str	r1, [r7, #8]
 800cf5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cf5e:	e02c      	b.n	800cfba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	68b9      	ldr	r1, [r7, #8]
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f000 f8eb 	bl	800d140 <I2C_IsErrorOccurred>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d001      	beq.n	800cf74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e02a      	b.n	800cfca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf7a:	d01e      	beq.n	800cfba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf7c:	f7f9 fe88 	bl	8006c90 <HAL_GetTick>
 800cf80:	4602      	mov	r2, r0
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	68ba      	ldr	r2, [r7, #8]
 800cf88:	429a      	cmp	r2, r3
 800cf8a:	d302      	bcc.n	800cf92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d113      	bne.n	800cfba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf96:	f043 0220 	orr.w	r2, r3, #32
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2220      	movs	r2, #32
 800cfa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e007      	b.n	800cfca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	699b      	ldr	r3, [r3, #24]
 800cfc0:	f003 0302 	and.w	r3, r3, #2
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d1cb      	bne.n	800cf60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cfc8:	2300      	movs	r3, #0
}
 800cfca:	4618      	mov	r0, r3
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800cfd2:	b580      	push	{r7, lr}
 800cfd4:	b084      	sub	sp, #16
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	60f8      	str	r0, [r7, #12]
 800cfda:	60b9      	str	r1, [r7, #8]
 800cfdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800cfde:	e028      	b.n	800d032 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	68b9      	ldr	r1, [r7, #8]
 800cfe4:	68f8      	ldr	r0, [r7, #12]
 800cfe6:	f000 f8ab 	bl	800d140 <I2C_IsErrorOccurred>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	e026      	b.n	800d042 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cff4:	f7f9 fe4c 	bl	8006c90 <HAL_GetTick>
 800cff8:	4602      	mov	r2, r0
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	68ba      	ldr	r2, [r7, #8]
 800d000:	429a      	cmp	r2, r3
 800d002:	d302      	bcc.n	800d00a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d113      	bne.n	800d032 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d00e:	f043 0220 	orr.w	r2, r3, #32
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2220      	movs	r2, #32
 800d01a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2200      	movs	r2, #0
 800d022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2200      	movs	r2, #0
 800d02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e007      	b.n	800d042 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	699b      	ldr	r3, [r3, #24]
 800d038:	f003 0320 	and.w	r3, r3, #32
 800d03c:	2b20      	cmp	r3, #32
 800d03e:	d1cf      	bne.n	800cfe0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d040:	2300      	movs	r3, #0
}
 800d042:	4618      	mov	r0, r3
 800d044:	3710      	adds	r7, #16
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}
	...

0800d04c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b084      	sub	sp, #16
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d058:	e064      	b.n	800d124 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	68b9      	ldr	r1, [r7, #8]
 800d05e:	68f8      	ldr	r0, [r7, #12]
 800d060:	f000 f86e 	bl	800d140 <I2C_IsErrorOccurred>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e062      	b.n	800d134 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	699b      	ldr	r3, [r3, #24]
 800d074:	f003 0320 	and.w	r3, r3, #32
 800d078:	2b20      	cmp	r3, #32
 800d07a:	d138      	bne.n	800d0ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	f003 0304 	and.w	r3, r3, #4
 800d086:	2b04      	cmp	r3, #4
 800d088:	d105      	bne.n	800d096 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d001      	beq.n	800d096 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	e04e      	b.n	800d134 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	699b      	ldr	r3, [r3, #24]
 800d09c:	f003 0310 	and.w	r3, r3, #16
 800d0a0:	2b10      	cmp	r3, #16
 800d0a2:	d107      	bne.n	800d0b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	2210      	movs	r2, #16
 800d0aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2204      	movs	r2, #4
 800d0b0:	645a      	str	r2, [r3, #68]	; 0x44
 800d0b2:	e002      	b.n	800d0ba <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	2220      	movs	r2, #32
 800d0c0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	6859      	ldr	r1, [r3, #4]
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	4b1b      	ldr	r3, [pc, #108]	; (800d13c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800d0ce:	400b      	ands	r3, r1
 800d0d0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2220      	movs	r2, #32
 800d0d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	e022      	b.n	800d134 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0ee:	f7f9 fdcf 	bl	8006c90 <HAL_GetTick>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	1ad3      	subs	r3, r2, r3
 800d0f8:	68ba      	ldr	r2, [r7, #8]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d302      	bcc.n	800d104 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d10f      	bne.n	800d124 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d108:	f043 0220 	orr.w	r2, r3, #32
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2220      	movs	r2, #32
 800d114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2200      	movs	r2, #0
 800d11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e007      	b.n	800d134 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	699b      	ldr	r3, [r3, #24]
 800d12a:	f003 0304 	and.w	r3, r3, #4
 800d12e:	2b04      	cmp	r3, #4
 800d130:	d193      	bne.n	800d05a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d132:	2300      	movs	r3, #0
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	fe00e800 	.word	0xfe00e800

0800d140 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08a      	sub	sp, #40	; 0x28
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d14c:	2300      	movs	r3, #0
 800d14e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	699b      	ldr	r3, [r3, #24]
 800d158:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800d162:	69bb      	ldr	r3, [r7, #24]
 800d164:	f003 0310 	and.w	r3, r3, #16
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d075      	beq.n	800d258 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2210      	movs	r2, #16
 800d172:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d174:	e056      	b.n	800d224 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d17c:	d052      	beq.n	800d224 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d17e:	f7f9 fd87 	bl	8006c90 <HAL_GetTick>
 800d182:	4602      	mov	r2, r0
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d302      	bcc.n	800d194 <I2C_IsErrorOccurred+0x54>
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d147      	bne.n	800d224 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d19e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d1a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d1b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d1b6:	d12e      	bne.n	800d216 <I2C_IsErrorOccurred+0xd6>
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d1be:	d02a      	beq.n	800d216 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800d1c0:	7cfb      	ldrb	r3, [r7, #19]
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	d027      	beq.n	800d216 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d1d4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800d1d6:	f7f9 fd5b 	bl	8006c90 <HAL_GetTick>
 800d1da:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d1dc:	e01b      	b.n	800d216 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800d1de:	f7f9 fd57 	bl	8006c90 <HAL_GetTick>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	2b19      	cmp	r3, #25
 800d1ea:	d914      	bls.n	800d216 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1f0:	f043 0220 	orr.w	r2, r3, #32
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2220      	movs	r2, #32
 800d1fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	699b      	ldr	r3, [r3, #24]
 800d21c:	f003 0320 	and.w	r3, r3, #32
 800d220:	2b20      	cmp	r3, #32
 800d222:	d1dc      	bne.n	800d1de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	699b      	ldr	r3, [r3, #24]
 800d22a:	f003 0320 	and.w	r3, r3, #32
 800d22e:	2b20      	cmp	r3, #32
 800d230:	d003      	beq.n	800d23a <I2C_IsErrorOccurred+0xfa>
 800d232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d236:	2b00      	cmp	r3, #0
 800d238:	d09d      	beq.n	800d176 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800d23a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d103      	bne.n	800d24a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	2220      	movs	r2, #32
 800d248:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800d24a:	6a3b      	ldr	r3, [r7, #32]
 800d24c:	f043 0304 	orr.w	r3, r3, #4
 800d250:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800d252:	2301      	movs	r3, #1
 800d254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	699b      	ldr	r3, [r3, #24]
 800d25e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800d260:	69bb      	ldr	r3, [r7, #24]
 800d262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00b      	beq.n	800d282 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800d26a:	6a3b      	ldr	r3, [r7, #32]
 800d26c:	f043 0301 	orr.w	r3, r3, #1
 800d270:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d27a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d27c:	2301      	movs	r3, #1
 800d27e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d00b      	beq.n	800d2a4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	f043 0308 	orr.w	r3, r3, #8
 800d292:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d29c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00b      	beq.n	800d2c6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	f043 0302 	orr.w	r3, r3, #2
 800d2b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800d2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d01c      	beq.n	800d308 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d2ce:	68f8      	ldr	r0, [r7, #12]
 800d2d0:	f7ff fdbd 	bl	800ce4e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6859      	ldr	r1, [r3, #4]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	4b0d      	ldr	r3, [pc, #52]	; (800d314 <I2C_IsErrorOccurred+0x1d4>)
 800d2e0:	400b      	ands	r3, r1
 800d2e2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2e8:	6a3b      	ldr	r3, [r7, #32]
 800d2ea:	431a      	orrs	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	2220      	movs	r2, #32
 800d2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	2200      	movs	r2, #0
 800d304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800d308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3728      	adds	r7, #40	; 0x28
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	fe00e800 	.word	0xfe00e800

0800d318 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d318:	b480      	push	{r7}
 800d31a:	b087      	sub	sp, #28
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	60f8      	str	r0, [r7, #12]
 800d320:	607b      	str	r3, [r7, #4]
 800d322:	460b      	mov	r3, r1
 800d324:	817b      	strh	r3, [r7, #10]
 800d326:	4613      	mov	r3, r2
 800d328:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d32a:	897b      	ldrh	r3, [r7, #10]
 800d32c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d330:	7a7b      	ldrb	r3, [r7, #9]
 800d332:	041b      	lsls	r3, r3, #16
 800d334:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d338:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800d33e:	6a3b      	ldr	r3, [r7, #32]
 800d340:	4313      	orrs	r3, r2
 800d342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d346:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	6a3b      	ldr	r3, [r7, #32]
 800d350:	0d5b      	lsrs	r3, r3, #21
 800d352:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d356:	4b08      	ldr	r3, [pc, #32]	; (800d378 <I2C_TransferConfig+0x60>)
 800d358:	430b      	orrs	r3, r1
 800d35a:	43db      	mvns	r3, r3
 800d35c:	ea02 0103 	and.w	r1, r2, r3
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	697a      	ldr	r2, [r7, #20]
 800d366:	430a      	orrs	r2, r1
 800d368:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800d36a:	bf00      	nop
 800d36c:	371c      	adds	r7, #28
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	03ff63ff 	.word	0x03ff63ff

0800d37c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	460b      	mov	r3, r1
 800d386:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d388:	2300      	movs	r3, #0
 800d38a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d38c:	887b      	ldrh	r3, [r7, #2]
 800d38e:	f003 0301 	and.w	r3, r3, #1
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00f      	beq.n	800d3b6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d39c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d3aa:	2b28      	cmp	r3, #40	; 0x28
 800d3ac:	d003      	beq.n	800d3b6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d3b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d3b6:	887b      	ldrh	r3, [r7, #2]
 800d3b8:	f003 0302 	and.w	r3, r3, #2
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00f      	beq.n	800d3e0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d3c6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d3d4:	2b28      	cmp	r3, #40	; 0x28
 800d3d6:	d003      	beq.n	800d3e0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d3de:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d3e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	da03      	bge.n	800d3f0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d3ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800d3f0:	887b      	ldrh	r3, [r7, #2]
 800d3f2:	2b10      	cmp	r3, #16
 800d3f4:	d103      	bne.n	800d3fe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d3fc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800d3fe:	887b      	ldrh	r3, [r7, #2]
 800d400:	2b20      	cmp	r3, #32
 800d402:	d103      	bne.n	800d40c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f043 0320 	orr.w	r3, r3, #32
 800d40a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800d40c:	887b      	ldrh	r3, [r7, #2]
 800d40e:	2b40      	cmp	r3, #64	; 0x40
 800d410:	d103      	bne.n	800d41a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d418:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6819      	ldr	r1, [r3, #0]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	43da      	mvns	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	400a      	ands	r2, r1
 800d42a:	601a      	str	r2, [r3, #0]
}
 800d42c:	bf00      	nop
 800d42e:	3714      	adds	r7, #20
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d448:	b2db      	uxtb	r3, r3
 800d44a:	2b20      	cmp	r3, #32
 800d44c:	d138      	bne.n	800d4c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d454:	2b01      	cmp	r3, #1
 800d456:	d101      	bne.n	800d45c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d458:	2302      	movs	r3, #2
 800d45a:	e032      	b.n	800d4c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2224      	movs	r2, #36	; 0x24
 800d468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f022 0201 	bic.w	r2, r2, #1
 800d47a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	681a      	ldr	r2, [r3, #0]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d48a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6819      	ldr	r1, [r3, #0]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	683a      	ldr	r2, [r7, #0]
 800d498:	430a      	orrs	r2, r1
 800d49a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	681a      	ldr	r2, [r3, #0]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f042 0201 	orr.w	r2, r2, #1
 800d4aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2220      	movs	r2, #32
 800d4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e000      	b.n	800d4c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d4c0:	2302      	movs	r3, #2
  }
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b085      	sub	sp, #20
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d4de:	b2db      	uxtb	r3, r3
 800d4e0:	2b20      	cmp	r3, #32
 800d4e2:	d139      	bne.n	800d558 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d101      	bne.n	800d4f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	e033      	b.n	800d55a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2224      	movs	r2, #36	; 0x24
 800d4fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	681a      	ldr	r2, [r3, #0]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f022 0201 	bic.w	r2, r2, #1
 800d510:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d520:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	021b      	lsls	r3, r3, #8
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	4313      	orrs	r3, r2
 800d52a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	681a      	ldr	r2, [r3, #0]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f042 0201 	orr.w	r2, r2, #1
 800d542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2220      	movs	r2, #32
 800d548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d554:	2300      	movs	r3, #0
 800d556:	e000      	b.n	800d55a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d558:	2302      	movs	r3, #2
  }
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3714      	adds	r7, #20
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr
	...

0800d568 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d570:	4b19      	ldr	r3, [pc, #100]	; (800d5d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	f003 0304 	and.w	r3, r3, #4
 800d578:	2b04      	cmp	r3, #4
 800d57a:	d00a      	beq.n	800d592 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d57c:	4b16      	ldr	r3, [pc, #88]	; (800d5d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f003 0307 	and.w	r3, r3, #7
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	429a      	cmp	r2, r3
 800d588:	d001      	beq.n	800d58e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d58a:	2301      	movs	r3, #1
 800d58c:	e01f      	b.n	800d5ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	e01d      	b.n	800d5ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d592:	4b11      	ldr	r3, [pc, #68]	; (800d5d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	f023 0207 	bic.w	r2, r3, #7
 800d59a:	490f      	ldr	r1, [pc, #60]	; (800d5d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d5a2:	f7f9 fb75 	bl	8006c90 <HAL_GetTick>
 800d5a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d5a8:	e009      	b.n	800d5be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d5aa:	f7f9 fb71 	bl	8006c90 <HAL_GetTick>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d5b8:	d901      	bls.n	800d5be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e007      	b.n	800d5ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d5be:	4b06      	ldr	r3, [pc, #24]	; (800d5d8 <HAL_PWREx_ConfigSupply+0x70>)
 800d5c0:	685b      	ldr	r3, [r3, #4]
 800d5c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d5ca:	d1ee      	bne.n	800d5aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	58024800 	.word	0x58024800

0800d5dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b08c      	sub	sp, #48	; 0x30
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d101      	bne.n	800d5ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e39d      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f000 8087 	beq.w	800d70a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d5fc:	4b88      	ldr	r3, [pc, #544]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d604:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d606:	4b86      	ldr	r3, [pc, #536]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d60a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d60e:	2b10      	cmp	r3, #16
 800d610:	d007      	beq.n	800d622 <HAL_RCC_OscConfig+0x46>
 800d612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d614:	2b18      	cmp	r3, #24
 800d616:	d110      	bne.n	800d63a <HAL_RCC_OscConfig+0x5e>
 800d618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61a:	f003 0303 	and.w	r3, r3, #3
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d10b      	bne.n	800d63a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d622:	4b7f      	ldr	r3, [pc, #508]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d06c      	beq.n	800d708 <HAL_RCC_OscConfig+0x12c>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d168      	bne.n	800d708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d636:	2301      	movs	r3, #1
 800d638:	e377      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d642:	d106      	bne.n	800d652 <HAL_RCC_OscConfig+0x76>
 800d644:	4b76      	ldr	r3, [pc, #472]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	4a75      	ldr	r2, [pc, #468]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d64a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	e02e      	b.n	800d6b0 <HAL_RCC_OscConfig+0xd4>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d10c      	bne.n	800d674 <HAL_RCC_OscConfig+0x98>
 800d65a:	4b71      	ldr	r3, [pc, #452]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a70      	ldr	r2, [pc, #448]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d664:	6013      	str	r3, [r2, #0]
 800d666:	4b6e      	ldr	r3, [pc, #440]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a6d      	ldr	r2, [pc, #436]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d66c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d670:	6013      	str	r3, [r2, #0]
 800d672:	e01d      	b.n	800d6b0 <HAL_RCC_OscConfig+0xd4>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d67c:	d10c      	bne.n	800d698 <HAL_RCC_OscConfig+0xbc>
 800d67e:	4b68      	ldr	r3, [pc, #416]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a67      	ldr	r2, [pc, #412]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d688:	6013      	str	r3, [r2, #0]
 800d68a:	4b65      	ldr	r3, [pc, #404]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	4a64      	ldr	r2, [pc, #400]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d694:	6013      	str	r3, [r2, #0]
 800d696:	e00b      	b.n	800d6b0 <HAL_RCC_OscConfig+0xd4>
 800d698:	4b61      	ldr	r3, [pc, #388]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a60      	ldr	r2, [pc, #384]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d69e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	4b5e      	ldr	r3, [pc, #376]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	4a5d      	ldr	r2, [pc, #372]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d6aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d013      	beq.n	800d6e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6b8:	f7f9 faea 	bl	8006c90 <HAL_GetTick>
 800d6bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d6be:	e008      	b.n	800d6d2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d6c0:	f7f9 fae6 	bl	8006c90 <HAL_GetTick>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	2b64      	cmp	r3, #100	; 0x64
 800d6cc:	d901      	bls.n	800d6d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d6ce:	2303      	movs	r3, #3
 800d6d0:	e32b      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d6d2:	4b53      	ldr	r3, [pc, #332]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d0f0      	beq.n	800d6c0 <HAL_RCC_OscConfig+0xe4>
 800d6de:	e014      	b.n	800d70a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6e0:	f7f9 fad6 	bl	8006c90 <HAL_GetTick>
 800d6e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d6e6:	e008      	b.n	800d6fa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d6e8:	f7f9 fad2 	bl	8006c90 <HAL_GetTick>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	2b64      	cmp	r3, #100	; 0x64
 800d6f4:	d901      	bls.n	800d6fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	e317      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d6fa:	4b49      	ldr	r3, [pc, #292]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1f0      	bne.n	800d6e8 <HAL_RCC_OscConfig+0x10c>
 800d706:	e000      	b.n	800d70a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f003 0302 	and.w	r3, r3, #2
 800d712:	2b00      	cmp	r3, #0
 800d714:	f000 808c 	beq.w	800d830 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d718:	4b41      	ldr	r3, [pc, #260]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d720:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d722:	4b3f      	ldr	r3, [pc, #252]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d726:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d728:	6a3b      	ldr	r3, [r7, #32]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d007      	beq.n	800d73e <HAL_RCC_OscConfig+0x162>
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	2b18      	cmp	r3, #24
 800d732:	d137      	bne.n	800d7a4 <HAL_RCC_OscConfig+0x1c8>
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	f003 0303 	and.w	r3, r3, #3
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d132      	bne.n	800d7a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d73e:	4b38      	ldr	r3, [pc, #224]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f003 0304 	and.w	r3, r3, #4
 800d746:	2b00      	cmp	r3, #0
 800d748:	d005      	beq.n	800d756 <HAL_RCC_OscConfig+0x17a>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d101      	bne.n	800d756 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	e2e9      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d756:	4b32      	ldr	r3, [pc, #200]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f023 0219 	bic.w	r2, r3, #25
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	492f      	ldr	r1, [pc, #188]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d764:	4313      	orrs	r3, r2
 800d766:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d768:	f7f9 fa92 	bl	8006c90 <HAL_GetTick>
 800d76c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d76e:	e008      	b.n	800d782 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d770:	f7f9 fa8e 	bl	8006c90 <HAL_GetTick>
 800d774:	4602      	mov	r2, r0
 800d776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d778:	1ad3      	subs	r3, r2, r3
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d901      	bls.n	800d782 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800d77e:	2303      	movs	r3, #3
 800d780:	e2d3      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d782:	4b27      	ldr	r3, [pc, #156]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f003 0304 	and.w	r3, r3, #4
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d0f0      	beq.n	800d770 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d78e:	4b24      	ldr	r3, [pc, #144]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	691b      	ldr	r3, [r3, #16]
 800d79a:	061b      	lsls	r3, r3, #24
 800d79c:	4920      	ldr	r1, [pc, #128]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d7a2:	e045      	b.n	800d830 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	68db      	ldr	r3, [r3, #12]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d026      	beq.n	800d7fa <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d7ac:	4b1c      	ldr	r3, [pc, #112]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f023 0219 	bic.w	r2, r3, #25
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	68db      	ldr	r3, [r3, #12]
 800d7b8:	4919      	ldr	r1, [pc, #100]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7be:	f7f9 fa67 	bl	8006c90 <HAL_GetTick>
 800d7c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d7c4:	e008      	b.n	800d7d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d7c6:	f7f9 fa63 	bl	8006c90 <HAL_GetTick>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d901      	bls.n	800d7d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	e2a8      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d7d8:	4b11      	ldr	r3, [pc, #68]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f003 0304 	and.w	r3, r3, #4
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d0f0      	beq.n	800d7c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7e4:	4b0e      	ldr	r3, [pc, #56]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	061b      	lsls	r3, r3, #24
 800d7f2:	490b      	ldr	r1, [pc, #44]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d7f4:	4313      	orrs	r3, r2
 800d7f6:	604b      	str	r3, [r1, #4]
 800d7f8:	e01a      	b.n	800d830 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d7fa:	4b09      	ldr	r3, [pc, #36]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4a08      	ldr	r2, [pc, #32]	; (800d820 <HAL_RCC_OscConfig+0x244>)
 800d800:	f023 0301 	bic.w	r3, r3, #1
 800d804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d806:	f7f9 fa43 	bl	8006c90 <HAL_GetTick>
 800d80a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d80c:	e00a      	b.n	800d824 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d80e:	f7f9 fa3f 	bl	8006c90 <HAL_GetTick>
 800d812:	4602      	mov	r2, r0
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	2b02      	cmp	r3, #2
 800d81a:	d903      	bls.n	800d824 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800d81c:	2303      	movs	r3, #3
 800d81e:	e284      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
 800d820:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d824:	4b96      	ldr	r3, [pc, #600]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	f003 0304 	and.w	r3, r3, #4
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d1ee      	bne.n	800d80e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f003 0310 	and.w	r3, r3, #16
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d06a      	beq.n	800d912 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d83c:	4b90      	ldr	r3, [pc, #576]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d83e:	691b      	ldr	r3, [r3, #16]
 800d840:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d844:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d846:	4b8e      	ldr	r3, [pc, #568]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d84a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d84c:	69bb      	ldr	r3, [r7, #24]
 800d84e:	2b08      	cmp	r3, #8
 800d850:	d007      	beq.n	800d862 <HAL_RCC_OscConfig+0x286>
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	2b18      	cmp	r3, #24
 800d856:	d11b      	bne.n	800d890 <HAL_RCC_OscConfig+0x2b4>
 800d858:	697b      	ldr	r3, [r7, #20]
 800d85a:	f003 0303 	and.w	r3, r3, #3
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d116      	bne.n	800d890 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d862:	4b87      	ldr	r3, [pc, #540]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d005      	beq.n	800d87a <HAL_RCC_OscConfig+0x29e>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	69db      	ldr	r3, [r3, #28]
 800d872:	2b80      	cmp	r3, #128	; 0x80
 800d874:	d001      	beq.n	800d87a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800d876:	2301      	movs	r3, #1
 800d878:	e257      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d87a:	4b81      	ldr	r3, [pc, #516]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6a1b      	ldr	r3, [r3, #32]
 800d886:	061b      	lsls	r3, r3, #24
 800d888:	497d      	ldr	r1, [pc, #500]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d88a:	4313      	orrs	r3, r2
 800d88c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d88e:	e040      	b.n	800d912 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	69db      	ldr	r3, [r3, #28]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d023      	beq.n	800d8e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d898:	4b79      	ldr	r3, [pc, #484]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a78      	ldr	r2, [pc, #480]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d89e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8a4:	f7f9 f9f4 	bl	8006c90 <HAL_GetTick>
 800d8a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d8aa:	e008      	b.n	800d8be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d8ac:	f7f9 f9f0 	bl	8006c90 <HAL_GetTick>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	d901      	bls.n	800d8be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800d8ba:	2303      	movs	r3, #3
 800d8bc:	e235      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d8be:	4b70      	ldr	r3, [pc, #448]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d0f0      	beq.n	800d8ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d8ca:	4b6d      	ldr	r3, [pc, #436]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	061b      	lsls	r3, r3, #24
 800d8d8:	4969      	ldr	r1, [pc, #420]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	60cb      	str	r3, [r1, #12]
 800d8de:	e018      	b.n	800d912 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d8e0:	4b67      	ldr	r3, [pc, #412]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a66      	ldr	r2, [pc, #408]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d8e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8ec:	f7f9 f9d0 	bl	8006c90 <HAL_GetTick>
 800d8f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d8f2:	e008      	b.n	800d906 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d8f4:	f7f9 f9cc 	bl	8006c90 <HAL_GetTick>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	1ad3      	subs	r3, r2, r3
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	d901      	bls.n	800d906 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800d902:	2303      	movs	r3, #3
 800d904:	e211      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d906:	4b5e      	ldr	r3, [pc, #376]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1f0      	bne.n	800d8f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	f003 0308 	and.w	r3, r3, #8
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d036      	beq.n	800d98c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	695b      	ldr	r3, [r3, #20]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d019      	beq.n	800d95a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d926:	4b56      	ldr	r3, [pc, #344]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d92a:	4a55      	ldr	r2, [pc, #340]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d92c:	f043 0301 	orr.w	r3, r3, #1
 800d930:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d932:	f7f9 f9ad 	bl	8006c90 <HAL_GetTick>
 800d936:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d938:	e008      	b.n	800d94c <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d93a:	f7f9 f9a9 	bl	8006c90 <HAL_GetTick>
 800d93e:	4602      	mov	r2, r0
 800d940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d942:	1ad3      	subs	r3, r2, r3
 800d944:	2b02      	cmp	r3, #2
 800d946:	d901      	bls.n	800d94c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800d948:	2303      	movs	r3, #3
 800d94a:	e1ee      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d94c:	4b4c      	ldr	r3, [pc, #304]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d94e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d950:	f003 0302 	and.w	r3, r3, #2
 800d954:	2b00      	cmp	r3, #0
 800d956:	d0f0      	beq.n	800d93a <HAL_RCC_OscConfig+0x35e>
 800d958:	e018      	b.n	800d98c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d95a:	4b49      	ldr	r3, [pc, #292]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d95e:	4a48      	ldr	r2, [pc, #288]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d960:	f023 0301 	bic.w	r3, r3, #1
 800d964:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d966:	f7f9 f993 	bl	8006c90 <HAL_GetTick>
 800d96a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d96c:	e008      	b.n	800d980 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d96e:	f7f9 f98f 	bl	8006c90 <HAL_GetTick>
 800d972:	4602      	mov	r2, r0
 800d974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	2b02      	cmp	r3, #2
 800d97a:	d901      	bls.n	800d980 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800d97c:	2303      	movs	r3, #3
 800d97e:	e1d4      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d980:	4b3f      	ldr	r3, [pc, #252]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d984:	f003 0302 	and.w	r3, r3, #2
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d1f0      	bne.n	800d96e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 0320 	and.w	r3, r3, #32
 800d994:	2b00      	cmp	r3, #0
 800d996:	d036      	beq.n	800da06 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	699b      	ldr	r3, [r3, #24]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d019      	beq.n	800d9d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d9a0:	4b37      	ldr	r3, [pc, #220]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a36      	ldr	r2, [pc, #216]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d9a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d9aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d9ac:	f7f9 f970 	bl	8006c90 <HAL_GetTick>
 800d9b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d9b2:	e008      	b.n	800d9c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d9b4:	f7f9 f96c 	bl	8006c90 <HAL_GetTick>
 800d9b8:	4602      	mov	r2, r0
 800d9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	2b02      	cmp	r3, #2
 800d9c0:	d901      	bls.n	800d9c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800d9c2:	2303      	movs	r3, #3
 800d9c4:	e1b1      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d9c6:	4b2e      	ldr	r3, [pc, #184]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d0f0      	beq.n	800d9b4 <HAL_RCC_OscConfig+0x3d8>
 800d9d2:	e018      	b.n	800da06 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d9d4:	4b2a      	ldr	r3, [pc, #168]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a29      	ldr	r2, [pc, #164]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d9da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d9e0:	f7f9 f956 	bl	8006c90 <HAL_GetTick>
 800d9e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d9e6:	e008      	b.n	800d9fa <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d9e8:	f7f9 f952 	bl	8006c90 <HAL_GetTick>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f0:	1ad3      	subs	r3, r2, r3
 800d9f2:	2b02      	cmp	r3, #2
 800d9f4:	d901      	bls.n	800d9fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800d9f6:	2303      	movs	r3, #3
 800d9f8:	e197      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d9fa:	4b21      	ldr	r3, [pc, #132]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1f0      	bne.n	800d9e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f003 0304 	and.w	r3, r3, #4
 800da0e:	2b00      	cmp	r3, #0
 800da10:	f000 8086 	beq.w	800db20 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800da14:	4b1b      	ldr	r3, [pc, #108]	; (800da84 <HAL_RCC_OscConfig+0x4a8>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a1a      	ldr	r2, [pc, #104]	; (800da84 <HAL_RCC_OscConfig+0x4a8>)
 800da1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da1e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800da20:	f7f9 f936 	bl	8006c90 <HAL_GetTick>
 800da24:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800da26:	e008      	b.n	800da3a <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800da28:	f7f9 f932 	bl	8006c90 <HAL_GetTick>
 800da2c:	4602      	mov	r2, r0
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	1ad3      	subs	r3, r2, r3
 800da32:	2b64      	cmp	r3, #100	; 0x64
 800da34:	d901      	bls.n	800da3a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800da36:	2303      	movs	r3, #3
 800da38:	e177      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800da3a:	4b12      	ldr	r3, [pc, #72]	; (800da84 <HAL_RCC_OscConfig+0x4a8>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da42:	2b00      	cmp	r3, #0
 800da44:	d0f0      	beq.n	800da28 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	2b01      	cmp	r3, #1
 800da4c:	d106      	bne.n	800da5c <HAL_RCC_OscConfig+0x480>
 800da4e:	4b0c      	ldr	r3, [pc, #48]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800da50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da52:	4a0b      	ldr	r2, [pc, #44]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800da54:	f043 0301 	orr.w	r3, r3, #1
 800da58:	6713      	str	r3, [r2, #112]	; 0x70
 800da5a:	e032      	b.n	800dac2 <HAL_RCC_OscConfig+0x4e6>
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d111      	bne.n	800da88 <HAL_RCC_OscConfig+0x4ac>
 800da64:	4b06      	ldr	r3, [pc, #24]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800da66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da68:	4a05      	ldr	r2, [pc, #20]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800da6a:	f023 0301 	bic.w	r3, r3, #1
 800da6e:	6713      	str	r3, [r2, #112]	; 0x70
 800da70:	4b03      	ldr	r3, [pc, #12]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800da72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da74:	4a02      	ldr	r2, [pc, #8]	; (800da80 <HAL_RCC_OscConfig+0x4a4>)
 800da76:	f023 0304 	bic.w	r3, r3, #4
 800da7a:	6713      	str	r3, [r2, #112]	; 0x70
 800da7c:	e021      	b.n	800dac2 <HAL_RCC_OscConfig+0x4e6>
 800da7e:	bf00      	nop
 800da80:	58024400 	.word	0x58024400
 800da84:	58024800 	.word	0x58024800
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	2b05      	cmp	r3, #5
 800da8e:	d10c      	bne.n	800daaa <HAL_RCC_OscConfig+0x4ce>
 800da90:	4b83      	ldr	r3, [pc, #524]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800da92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da94:	4a82      	ldr	r2, [pc, #520]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800da96:	f043 0304 	orr.w	r3, r3, #4
 800da9a:	6713      	str	r3, [r2, #112]	; 0x70
 800da9c:	4b80      	ldr	r3, [pc, #512]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800da9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daa0:	4a7f      	ldr	r2, [pc, #508]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800daa2:	f043 0301 	orr.w	r3, r3, #1
 800daa6:	6713      	str	r3, [r2, #112]	; 0x70
 800daa8:	e00b      	b.n	800dac2 <HAL_RCC_OscConfig+0x4e6>
 800daaa:	4b7d      	ldr	r3, [pc, #500]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800daac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daae:	4a7c      	ldr	r2, [pc, #496]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dab0:	f023 0301 	bic.w	r3, r3, #1
 800dab4:	6713      	str	r3, [r2, #112]	; 0x70
 800dab6:	4b7a      	ldr	r3, [pc, #488]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daba:	4a79      	ldr	r2, [pc, #484]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dabc:	f023 0304 	bic.w	r3, r3, #4
 800dac0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d015      	beq.n	800daf6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daca:	f7f9 f8e1 	bl	8006c90 <HAL_GetTick>
 800dace:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dad0:	e00a      	b.n	800dae8 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dad2:	f7f9 f8dd 	bl	8006c90 <HAL_GetTick>
 800dad6:	4602      	mov	r2, r0
 800dad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dada:	1ad3      	subs	r3, r2, r3
 800dadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dae0:	4293      	cmp	r3, r2
 800dae2:	d901      	bls.n	800dae8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800dae4:	2303      	movs	r3, #3
 800dae6:	e120      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800dae8:	4b6d      	ldr	r3, [pc, #436]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800daea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daec:	f003 0302 	and.w	r3, r3, #2
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d0ee      	beq.n	800dad2 <HAL_RCC_OscConfig+0x4f6>
 800daf4:	e014      	b.n	800db20 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daf6:	f7f9 f8cb 	bl	8006c90 <HAL_GetTick>
 800dafa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800dafc:	e00a      	b.n	800db14 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800dafe:	f7f9 f8c7 	bl	8006c90 <HAL_GetTick>
 800db02:	4602      	mov	r2, r0
 800db04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db06:	1ad3      	subs	r3, r2, r3
 800db08:	f241 3288 	movw	r2, #5000	; 0x1388
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d901      	bls.n	800db14 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800db10:	2303      	movs	r3, #3
 800db12:	e10a      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800db14:	4b62      	ldr	r3, [pc, #392]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800db16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db18:	f003 0302 	and.w	r3, r3, #2
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d1ee      	bne.n	800dafe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db24:	2b00      	cmp	r3, #0
 800db26:	f000 80ff 	beq.w	800dd28 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800db2a:	4b5d      	ldr	r3, [pc, #372]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800db2c:	691b      	ldr	r3, [r3, #16]
 800db2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db32:	2b18      	cmp	r3, #24
 800db34:	f000 80ba 	beq.w	800dcac <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3c:	2b02      	cmp	r3, #2
 800db3e:	f040 8095 	bne.w	800dc6c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db42:	4b57      	ldr	r3, [pc, #348]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	4a56      	ldr	r2, [pc, #344]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800db48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db4e:	f7f9 f89f 	bl	8006c90 <HAL_GetTick>
 800db52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800db54:	e008      	b.n	800db68 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800db56:	f7f9 f89b 	bl	8006c90 <HAL_GetTick>
 800db5a:	4602      	mov	r2, r0
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	1ad3      	subs	r3, r2, r3
 800db60:	2b02      	cmp	r3, #2
 800db62:	d901      	bls.n	800db68 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800db64:	2303      	movs	r3, #3
 800db66:	e0e0      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800db68:	4b4d      	ldr	r3, [pc, #308]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db70:	2b00      	cmp	r3, #0
 800db72:	d1f0      	bne.n	800db56 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db74:	4b4a      	ldr	r3, [pc, #296]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800db76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800db78:	4b4a      	ldr	r3, [pc, #296]	; (800dca4 <HAL_RCC_OscConfig+0x6c8>)
 800db7a:	4013      	ands	r3, r2
 800db7c:	687a      	ldr	r2, [r7, #4]
 800db7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800db84:	0112      	lsls	r2, r2, #4
 800db86:	430a      	orrs	r2, r1
 800db88:	4945      	ldr	r1, [pc, #276]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800db8a:	4313      	orrs	r3, r2
 800db8c:	628b      	str	r3, [r1, #40]	; 0x28
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db92:	3b01      	subs	r3, #1
 800db94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db9c:	3b01      	subs	r3, #1
 800db9e:	025b      	lsls	r3, r3, #9
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	431a      	orrs	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba8:	3b01      	subs	r3, #1
 800dbaa:	041b      	lsls	r3, r3, #16
 800dbac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dbb0:	431a      	orrs	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	061b      	lsls	r3, r3, #24
 800dbba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dbbe:	4938      	ldr	r1, [pc, #224]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800dbc4:	4b36      	ldr	r3, [pc, #216]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc8:	4a35      	ldr	r2, [pc, #212]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dbca:	f023 0301 	bic.w	r3, r3, #1
 800dbce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800dbd0:	4b33      	ldr	r3, [pc, #204]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dbd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbd4:	4b34      	ldr	r3, [pc, #208]	; (800dca8 <HAL_RCC_OscConfig+0x6cc>)
 800dbd6:	4013      	ands	r3, r2
 800dbd8:	687a      	ldr	r2, [r7, #4]
 800dbda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dbdc:	00d2      	lsls	r2, r2, #3
 800dbde:	4930      	ldr	r1, [pc, #192]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dbe0:	4313      	orrs	r3, r2
 800dbe2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800dbe4:	4b2e      	ldr	r3, [pc, #184]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe8:	f023 020c 	bic.w	r2, r3, #12
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbf0:	492b      	ldr	r1, [pc, #172]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800dbf6:	4b2a      	ldr	r3, [pc, #168]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfa:	f023 0202 	bic.w	r2, r3, #2
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc02:	4927      	ldr	r1, [pc, #156]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc04:	4313      	orrs	r3, r2
 800dc06:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800dc08:	4b25      	ldr	r3, [pc, #148]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0c:	4a24      	ldr	r2, [pc, #144]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc14:	4b22      	ldr	r3, [pc, #136]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc18:	4a21      	ldr	r2, [pc, #132]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800dc20:	4b1f      	ldr	r3, [pc, #124]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc24:	4a1e      	ldr	r2, [pc, #120]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dc2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800dc2c:	4b1c      	ldr	r3, [pc, #112]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc30:	4a1b      	ldr	r2, [pc, #108]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc32:	f043 0301 	orr.w	r3, r3, #1
 800dc36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dc38:	4b19      	ldr	r3, [pc, #100]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a18      	ldr	r2, [pc, #96]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dc42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc44:	f7f9 f824 	bl	8006c90 <HAL_GetTick>
 800dc48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dc4a:	e008      	b.n	800dc5e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc4c:	f7f9 f820 	bl	8006c90 <HAL_GetTick>
 800dc50:	4602      	mov	r2, r0
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	2b02      	cmp	r3, #2
 800dc58:	d901      	bls.n	800dc5e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800dc5a:	2303      	movs	r3, #3
 800dc5c:	e065      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dc5e:	4b10      	ldr	r3, [pc, #64]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0f0      	beq.n	800dc4c <HAL_RCC_OscConfig+0x670>
 800dc6a:	e05d      	b.n	800dd28 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc6c:	4b0c      	ldr	r3, [pc, #48]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a0b      	ldr	r2, [pc, #44]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800dc76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc78:	f7f9 f80a 	bl	8006c90 <HAL_GetTick>
 800dc7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dc7e:	e008      	b.n	800dc92 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dc80:	f7f9 f806 	bl	8006c90 <HAL_GetTick>
 800dc84:	4602      	mov	r2, r0
 800dc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d901      	bls.n	800dc92 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	e04b      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800dc92:	4b03      	ldr	r3, [pc, #12]	; (800dca0 <HAL_RCC_OscConfig+0x6c4>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1f0      	bne.n	800dc80 <HAL_RCC_OscConfig+0x6a4>
 800dc9e:	e043      	b.n	800dd28 <HAL_RCC_OscConfig+0x74c>
 800dca0:	58024400 	.word	0x58024400
 800dca4:	fffffc0c 	.word	0xfffffc0c
 800dca8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800dcac:	4b21      	ldr	r3, [pc, #132]	; (800dd34 <HAL_RCC_OscConfig+0x758>)
 800dcae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800dcb2:	4b20      	ldr	r3, [pc, #128]	; (800dd34 <HAL_RCC_OscConfig+0x758>)
 800dcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcbc:	2b01      	cmp	r3, #1
 800dcbe:	d031      	beq.n	800dd24 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	f003 0203 	and.w	r2, r3, #3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d12a      	bne.n	800dd24 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	091b      	lsrs	r3, r3, #4
 800dcd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dcda:	429a      	cmp	r2, r3
 800dcdc:	d122      	bne.n	800dd24 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d11a      	bne.n	800dd24 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	0a5b      	lsrs	r3, r3, #9
 800dcf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d111      	bne.n	800dd24 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	0c1b      	lsrs	r3, r3, #16
 800dd04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800dd0e:	429a      	cmp	r2, r3
 800dd10:	d108      	bne.n	800dd24 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	0e1b      	lsrs	r3, r3, #24
 800dd16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd1e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800dd20:	429a      	cmp	r2, r3
 800dd22:	d001      	beq.n	800dd28 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800dd24:	2301      	movs	r3, #1
 800dd26:	e000      	b.n	800dd2a <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3730      	adds	r7, #48	; 0x30
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	58024400 	.word	0x58024400

0800dd38 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b086      	sub	sp, #24
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
 800dd40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dd48:	2301      	movs	r3, #1
 800dd4a:	e19c      	b.n	800e086 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800dd4c:	4b8a      	ldr	r3, [pc, #552]	; (800df78 <HAL_RCC_ClockConfig+0x240>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f003 030f 	and.w	r3, r3, #15
 800dd54:	683a      	ldr	r2, [r7, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d910      	bls.n	800dd7c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dd5a:	4b87      	ldr	r3, [pc, #540]	; (800df78 <HAL_RCC_ClockConfig+0x240>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f023 020f 	bic.w	r2, r3, #15
 800dd62:	4985      	ldr	r1, [pc, #532]	; (800df78 <HAL_RCC_ClockConfig+0x240>)
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dd6a:	4b83      	ldr	r3, [pc, #524]	; (800df78 <HAL_RCC_ClockConfig+0x240>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f003 030f 	and.w	r3, r3, #15
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d001      	beq.n	800dd7c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	e184      	b.n	800e086 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f003 0304 	and.w	r3, r3, #4
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d010      	beq.n	800ddaa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	691a      	ldr	r2, [r3, #16]
 800dd8c:	4b7b      	ldr	r3, [pc, #492]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800dd8e:	699b      	ldr	r3, [r3, #24]
 800dd90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d908      	bls.n	800ddaa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dd98:	4b78      	ldr	r3, [pc, #480]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800dd9a:	699b      	ldr	r3, [r3, #24]
 800dd9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	4975      	ldr	r1, [pc, #468]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800dda6:	4313      	orrs	r3, r2
 800dda8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f003 0308 	and.w	r3, r3, #8
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d010      	beq.n	800ddd8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	695a      	ldr	r2, [r3, #20]
 800ddba:	4b70      	ldr	r3, [pc, #448]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800ddbc:	69db      	ldr	r3, [r3, #28]
 800ddbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d908      	bls.n	800ddd8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ddc6:	4b6d      	ldr	r3, [pc, #436]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800ddc8:	69db      	ldr	r3, [r3, #28]
 800ddca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	695b      	ldr	r3, [r3, #20]
 800ddd2:	496a      	ldr	r1, [pc, #424]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800ddd4:	4313      	orrs	r3, r2
 800ddd6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f003 0310 	and.w	r3, r3, #16
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d010      	beq.n	800de06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	699a      	ldr	r2, [r3, #24]
 800dde8:	4b64      	ldr	r3, [pc, #400]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800ddea:	69db      	ldr	r3, [r3, #28]
 800ddec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d908      	bls.n	800de06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ddf4:	4b61      	ldr	r3, [pc, #388]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800ddf6:	69db      	ldr	r3, [r3, #28]
 800ddf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	699b      	ldr	r3, [r3, #24]
 800de00:	495e      	ldr	r1, [pc, #376]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de02:	4313      	orrs	r3, r2
 800de04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f003 0320 	and.w	r3, r3, #32
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d010      	beq.n	800de34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	69da      	ldr	r2, [r3, #28]
 800de16:	4b59      	ldr	r3, [pc, #356]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800de1e:	429a      	cmp	r2, r3
 800de20:	d908      	bls.n	800de34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800de22:	4b56      	ldr	r3, [pc, #344]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	69db      	ldr	r3, [r3, #28]
 800de2e:	4953      	ldr	r1, [pc, #332]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de30:	4313      	orrs	r3, r2
 800de32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f003 0302 	and.w	r3, r3, #2
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d010      	beq.n	800de62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	68da      	ldr	r2, [r3, #12]
 800de44:	4b4d      	ldr	r3, [pc, #308]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de46:	699b      	ldr	r3, [r3, #24]
 800de48:	f003 030f 	and.w	r3, r3, #15
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d908      	bls.n	800de62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de50:	4b4a      	ldr	r3, [pc, #296]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de52:	699b      	ldr	r3, [r3, #24]
 800de54:	f023 020f 	bic.w	r2, r3, #15
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	4947      	ldr	r1, [pc, #284]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de5e:	4313      	orrs	r3, r2
 800de60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f003 0301 	and.w	r3, r3, #1
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d055      	beq.n	800df1a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800de6e:	4b43      	ldr	r3, [pc, #268]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de70:	699b      	ldr	r3, [r3, #24]
 800de72:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	4940      	ldr	r1, [pc, #256]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de7c:	4313      	orrs	r3, r2
 800de7e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	2b02      	cmp	r3, #2
 800de86:	d107      	bne.n	800de98 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800de88:	4b3c      	ldr	r3, [pc, #240]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800de90:	2b00      	cmp	r3, #0
 800de92:	d121      	bne.n	800ded8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800de94:	2301      	movs	r3, #1
 800de96:	e0f6      	b.n	800e086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d107      	bne.n	800deb0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800dea0:	4b36      	ldr	r3, [pc, #216]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d115      	bne.n	800ded8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800deac:	2301      	movs	r3, #1
 800deae:	e0ea      	b.n	800e086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	2b01      	cmp	r3, #1
 800deb6:	d107      	bne.n	800dec8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800deb8:	4b30      	ldr	r3, [pc, #192]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d109      	bne.n	800ded8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	e0de      	b.n	800e086 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800dec8:	4b2c      	ldr	r3, [pc, #176]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f003 0304 	and.w	r3, r3, #4
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d101      	bne.n	800ded8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	e0d6      	b.n	800e086 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ded8:	4b28      	ldr	r3, [pc, #160]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800deda:	691b      	ldr	r3, [r3, #16]
 800dedc:	f023 0207 	bic.w	r2, r3, #7
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	4925      	ldr	r1, [pc, #148]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800dee6:	4313      	orrs	r3, r2
 800dee8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800deea:	f7f8 fed1 	bl	8006c90 <HAL_GetTick>
 800deee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800def0:	e00a      	b.n	800df08 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800def2:	f7f8 fecd 	bl	8006c90 <HAL_GetTick>
 800def6:	4602      	mov	r2, r0
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	f241 3288 	movw	r2, #5000	; 0x1388
 800df00:	4293      	cmp	r3, r2
 800df02:	d901      	bls.n	800df08 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800df04:	2303      	movs	r3, #3
 800df06:	e0be      	b.n	800e086 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800df08:	4b1c      	ldr	r3, [pc, #112]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800df0a:	691b      	ldr	r3, [r3, #16]
 800df0c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	00db      	lsls	r3, r3, #3
 800df16:	429a      	cmp	r2, r3
 800df18:	d1eb      	bne.n	800def2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	f003 0302 	and.w	r3, r3, #2
 800df22:	2b00      	cmp	r3, #0
 800df24:	d010      	beq.n	800df48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68da      	ldr	r2, [r3, #12]
 800df2a:	4b14      	ldr	r3, [pc, #80]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800df2c:	699b      	ldr	r3, [r3, #24]
 800df2e:	f003 030f 	and.w	r3, r3, #15
 800df32:	429a      	cmp	r2, r3
 800df34:	d208      	bcs.n	800df48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800df36:	4b11      	ldr	r3, [pc, #68]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800df38:	699b      	ldr	r3, [r3, #24]
 800df3a:	f023 020f 	bic.w	r2, r3, #15
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	490e      	ldr	r1, [pc, #56]	; (800df7c <HAL_RCC_ClockConfig+0x244>)
 800df44:	4313      	orrs	r3, r2
 800df46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800df48:	4b0b      	ldr	r3, [pc, #44]	; (800df78 <HAL_RCC_ClockConfig+0x240>)
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f003 030f 	and.w	r3, r3, #15
 800df50:	683a      	ldr	r2, [r7, #0]
 800df52:	429a      	cmp	r2, r3
 800df54:	d214      	bcs.n	800df80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df56:	4b08      	ldr	r3, [pc, #32]	; (800df78 <HAL_RCC_ClockConfig+0x240>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f023 020f 	bic.w	r2, r3, #15
 800df5e:	4906      	ldr	r1, [pc, #24]	; (800df78 <HAL_RCC_ClockConfig+0x240>)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	4313      	orrs	r3, r2
 800df64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800df66:	4b04      	ldr	r3, [pc, #16]	; (800df78 <HAL_RCC_ClockConfig+0x240>)
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f003 030f 	and.w	r3, r3, #15
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	429a      	cmp	r2, r3
 800df72:	d005      	beq.n	800df80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800df74:	2301      	movs	r3, #1
 800df76:	e086      	b.n	800e086 <HAL_RCC_ClockConfig+0x34e>
 800df78:	52002000 	.word	0x52002000
 800df7c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f003 0304 	and.w	r3, r3, #4
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d010      	beq.n	800dfae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	691a      	ldr	r2, [r3, #16]
 800df90:	4b3f      	ldr	r3, [pc, #252]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800df92:	699b      	ldr	r3, [r3, #24]
 800df94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800df98:	429a      	cmp	r2, r3
 800df9a:	d208      	bcs.n	800dfae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800df9c:	4b3c      	ldr	r3, [pc, #240]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800df9e:	699b      	ldr	r3, [r3, #24]
 800dfa0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	4939      	ldr	r1, [pc, #228]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f003 0308 	and.w	r3, r3, #8
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d010      	beq.n	800dfdc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	695a      	ldr	r2, [r3, #20]
 800dfbe:	4b34      	ldr	r3, [pc, #208]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800dfc0:	69db      	ldr	r3, [r3, #28]
 800dfc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d208      	bcs.n	800dfdc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dfca:	4b31      	ldr	r3, [pc, #196]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	695b      	ldr	r3, [r3, #20]
 800dfd6:	492e      	ldr	r1, [pc, #184]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f003 0310 	and.w	r3, r3, #16
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d010      	beq.n	800e00a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	699a      	ldr	r2, [r3, #24]
 800dfec:	4b28      	ldr	r3, [pc, #160]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800dfee:	69db      	ldr	r3, [r3, #28]
 800dff0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d208      	bcs.n	800e00a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dff8:	4b25      	ldr	r3, [pc, #148]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800dffa:	69db      	ldr	r3, [r3, #28]
 800dffc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	699b      	ldr	r3, [r3, #24]
 800e004:	4922      	ldr	r1, [pc, #136]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800e006:	4313      	orrs	r3, r2
 800e008:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f003 0320 	and.w	r3, r3, #32
 800e012:	2b00      	cmp	r3, #0
 800e014:	d010      	beq.n	800e038 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	69da      	ldr	r2, [r3, #28]
 800e01a:	4b1d      	ldr	r3, [pc, #116]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800e022:	429a      	cmp	r2, r3
 800e024:	d208      	bcs.n	800e038 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800e026:	4b1a      	ldr	r3, [pc, #104]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800e028:	6a1b      	ldr	r3, [r3, #32]
 800e02a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	69db      	ldr	r3, [r3, #28]
 800e032:	4917      	ldr	r1, [pc, #92]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800e034:	4313      	orrs	r3, r2
 800e036:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800e038:	f000 f834 	bl	800e0a4 <HAL_RCC_GetSysClockFreq>
 800e03c:	4602      	mov	r2, r0
 800e03e:	4b14      	ldr	r3, [pc, #80]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800e040:	699b      	ldr	r3, [r3, #24]
 800e042:	0a1b      	lsrs	r3, r3, #8
 800e044:	f003 030f 	and.w	r3, r3, #15
 800e048:	4912      	ldr	r1, [pc, #72]	; (800e094 <HAL_RCC_ClockConfig+0x35c>)
 800e04a:	5ccb      	ldrb	r3, [r1, r3]
 800e04c:	f003 031f 	and.w	r3, r3, #31
 800e050:	fa22 f303 	lsr.w	r3, r2, r3
 800e054:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e056:	4b0e      	ldr	r3, [pc, #56]	; (800e090 <HAL_RCC_ClockConfig+0x358>)
 800e058:	699b      	ldr	r3, [r3, #24]
 800e05a:	f003 030f 	and.w	r3, r3, #15
 800e05e:	4a0d      	ldr	r2, [pc, #52]	; (800e094 <HAL_RCC_ClockConfig+0x35c>)
 800e060:	5cd3      	ldrb	r3, [r2, r3]
 800e062:	f003 031f 	and.w	r3, r3, #31
 800e066:	693a      	ldr	r2, [r7, #16]
 800e068:	fa22 f303 	lsr.w	r3, r2, r3
 800e06c:	4a0a      	ldr	r2, [pc, #40]	; (800e098 <HAL_RCC_ClockConfig+0x360>)
 800e06e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e070:	4a0a      	ldr	r2, [pc, #40]	; (800e09c <HAL_RCC_ClockConfig+0x364>)
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800e076:	4b0a      	ldr	r3, [pc, #40]	; (800e0a0 <HAL_RCC_ClockConfig+0x368>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7f8 fdbe 	bl	8006bfc <HAL_InitTick>
 800e080:	4603      	mov	r3, r0
 800e082:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800e084:	7bfb      	ldrb	r3, [r7, #15]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3718      	adds	r7, #24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	58024400 	.word	0x58024400
 800e094:	08016be0 	.word	0x08016be0
 800e098:	20000024 	.word	0x20000024
 800e09c:	20000020 	.word	0x20000020
 800e0a0:	20000028 	.word	0x20000028

0800e0a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b089      	sub	sp, #36	; 0x24
 800e0a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e0aa:	4bb3      	ldr	r3, [pc, #716]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e0ac:	691b      	ldr	r3, [r3, #16]
 800e0ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e0b2:	2b18      	cmp	r3, #24
 800e0b4:	f200 8155 	bhi.w	800e362 <HAL_RCC_GetSysClockFreq+0x2be>
 800e0b8:	a201      	add	r2, pc, #4	; (adr r2, 800e0c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800e0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0be:	bf00      	nop
 800e0c0:	0800e125 	.word	0x0800e125
 800e0c4:	0800e363 	.word	0x0800e363
 800e0c8:	0800e363 	.word	0x0800e363
 800e0cc:	0800e363 	.word	0x0800e363
 800e0d0:	0800e363 	.word	0x0800e363
 800e0d4:	0800e363 	.word	0x0800e363
 800e0d8:	0800e363 	.word	0x0800e363
 800e0dc:	0800e363 	.word	0x0800e363
 800e0e0:	0800e14b 	.word	0x0800e14b
 800e0e4:	0800e363 	.word	0x0800e363
 800e0e8:	0800e363 	.word	0x0800e363
 800e0ec:	0800e363 	.word	0x0800e363
 800e0f0:	0800e363 	.word	0x0800e363
 800e0f4:	0800e363 	.word	0x0800e363
 800e0f8:	0800e363 	.word	0x0800e363
 800e0fc:	0800e363 	.word	0x0800e363
 800e100:	0800e151 	.word	0x0800e151
 800e104:	0800e363 	.word	0x0800e363
 800e108:	0800e363 	.word	0x0800e363
 800e10c:	0800e363 	.word	0x0800e363
 800e110:	0800e363 	.word	0x0800e363
 800e114:	0800e363 	.word	0x0800e363
 800e118:	0800e363 	.word	0x0800e363
 800e11c:	0800e363 	.word	0x0800e363
 800e120:	0800e157 	.word	0x0800e157
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e124:	4b94      	ldr	r3, [pc, #592]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f003 0320 	and.w	r3, r3, #32
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d009      	beq.n	800e144 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e130:	4b91      	ldr	r3, [pc, #580]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	08db      	lsrs	r3, r3, #3
 800e136:	f003 0303 	and.w	r3, r3, #3
 800e13a:	4a90      	ldr	r2, [pc, #576]	; (800e37c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e13c:	fa22 f303 	lsr.w	r3, r2, r3
 800e140:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800e142:	e111      	b.n	800e368 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800e144:	4b8d      	ldr	r3, [pc, #564]	; (800e37c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e146:	61bb      	str	r3, [r7, #24]
    break;
 800e148:	e10e      	b.n	800e368 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800e14a:	4b8d      	ldr	r3, [pc, #564]	; (800e380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e14c:	61bb      	str	r3, [r7, #24]
    break;
 800e14e:	e10b      	b.n	800e368 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800e150:	4b8c      	ldr	r3, [pc, #560]	; (800e384 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800e152:	61bb      	str	r3, [r7, #24]
    break;
 800e154:	e108      	b.n	800e368 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e156:	4b88      	ldr	r3, [pc, #544]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e15a:	f003 0303 	and.w	r3, r3, #3
 800e15e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800e160:	4b85      	ldr	r3, [pc, #532]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e164:	091b      	lsrs	r3, r3, #4
 800e166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e16a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800e16c:	4b82      	ldr	r3, [pc, #520]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e170:	f003 0301 	and.w	r3, r3, #1
 800e174:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e176:	4b80      	ldr	r3, [pc, #512]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e17a:	08db      	lsrs	r3, r3, #3
 800e17c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e180:	68fa      	ldr	r2, [r7, #12]
 800e182:	fb02 f303 	mul.w	r3, r2, r3
 800e186:	ee07 3a90 	vmov	s15, r3
 800e18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e18e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	f000 80e1 	beq.w	800e35c <HAL_RCC_GetSysClockFreq+0x2b8>
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	2b02      	cmp	r3, #2
 800e19e:	f000 8083 	beq.w	800e2a8 <HAL_RCC_GetSysClockFreq+0x204>
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	2b02      	cmp	r3, #2
 800e1a6:	f200 80a1 	bhi.w	800e2ec <HAL_RCC_GetSysClockFreq+0x248>
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d003      	beq.n	800e1b8 <HAL_RCC_GetSysClockFreq+0x114>
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d056      	beq.n	800e264 <HAL_RCC_GetSysClockFreq+0x1c0>
 800e1b6:	e099      	b.n	800e2ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1b8:	4b6f      	ldr	r3, [pc, #444]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f003 0320 	and.w	r3, r3, #32
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d02d      	beq.n	800e220 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e1c4:	4b6c      	ldr	r3, [pc, #432]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	08db      	lsrs	r3, r3, #3
 800e1ca:	f003 0303 	and.w	r3, r3, #3
 800e1ce:	4a6b      	ldr	r2, [pc, #428]	; (800e37c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800e1d0:	fa22 f303 	lsr.w	r3, r2, r3
 800e1d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	ee07 3a90 	vmov	s15, r3
 800e1dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1e0:	693b      	ldr	r3, [r7, #16]
 800e1e2:	ee07 3a90 	vmov	s15, r3
 800e1e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e1ee:	4b62      	ldr	r3, [pc, #392]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1f6:	ee07 3a90 	vmov	s15, r3
 800e1fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1fe:	ed97 6a02 	vldr	s12, [r7, #8]
 800e202:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e20a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e20e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e21a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800e21e:	e087      	b.n	800e330 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	ee07 3a90 	vmov	s15, r3
 800e226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e22a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e38c <HAL_RCC_GetSysClockFreq+0x2e8>
 800e22e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e232:	4b51      	ldr	r3, [pc, #324]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e23a:	ee07 3a90 	vmov	s15, r3
 800e23e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e242:	ed97 6a02 	vldr	s12, [r7, #8]
 800e246:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e24a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e24e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e25a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e25e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e262:	e065      	b.n	800e330 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	ee07 3a90 	vmov	s15, r3
 800e26a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e26e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e390 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e276:	4b40      	ldr	r3, [pc, #256]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e27e:	ee07 3a90 	vmov	s15, r3
 800e282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e286:	ed97 6a02 	vldr	s12, [r7, #8]
 800e28a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2a6:	e043      	b.n	800e330 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e2a8:	693b      	ldr	r3, [r7, #16]
 800e2aa:	ee07 3a90 	vmov	s15, r3
 800e2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e394 <HAL_RCC_GetSysClockFreq+0x2f0>
 800e2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2ba:	4b2f      	ldr	r3, [pc, #188]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2c2:	ee07 3a90 	vmov	s15, r3
 800e2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800e2ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2ea:	e021      	b.n	800e330 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	ee07 3a90 	vmov	s15, r3
 800e2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e390 <HAL_RCC_GetSysClockFreq+0x2ec>
 800e2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2fe:	4b1e      	ldr	r3, [pc, #120]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e306:	ee07 3a90 	vmov	s15, r3
 800e30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e30e:	ed97 6a02 	vldr	s12, [r7, #8]
 800e312:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e388 <HAL_RCC_GetSysClockFreq+0x2e4>
 800e316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e31e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e32a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e32e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800e330:	4b11      	ldr	r3, [pc, #68]	; (800e378 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800e332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e334:	0a5b      	lsrs	r3, r3, #9
 800e336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e33a:	3301      	adds	r3, #1
 800e33c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800e33e:	683b      	ldr	r3, [r7, #0]
 800e340:	ee07 3a90 	vmov	s15, r3
 800e344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e348:	edd7 6a07 	vldr	s13, [r7, #28]
 800e34c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e354:	ee17 3a90 	vmov	r3, s15
 800e358:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800e35a:	e005      	b.n	800e368 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800e35c:	2300      	movs	r3, #0
 800e35e:	61bb      	str	r3, [r7, #24]
    break;
 800e360:	e002      	b.n	800e368 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800e362:	4b07      	ldr	r3, [pc, #28]	; (800e380 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800e364:	61bb      	str	r3, [r7, #24]
    break;
 800e366:	bf00      	nop
  }

  return sysclockfreq;
 800e368:	69bb      	ldr	r3, [r7, #24]
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3724      	adds	r7, #36	; 0x24
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr
 800e376:	bf00      	nop
 800e378:	58024400 	.word	0x58024400
 800e37c:	03d09000 	.word	0x03d09000
 800e380:	003d0900 	.word	0x003d0900
 800e384:	017d7840 	.word	0x017d7840
 800e388:	46000000 	.word	0x46000000
 800e38c:	4c742400 	.word	0x4c742400
 800e390:	4a742400 	.word	0x4a742400
 800e394:	4bbebc20 	.word	0x4bbebc20

0800e398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e39e:	f7ff fe81 	bl	800e0a4 <HAL_RCC_GetSysClockFreq>
 800e3a2:	4602      	mov	r2, r0
 800e3a4:	4b10      	ldr	r3, [pc, #64]	; (800e3e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800e3a6:	699b      	ldr	r3, [r3, #24]
 800e3a8:	0a1b      	lsrs	r3, r3, #8
 800e3aa:	f003 030f 	and.w	r3, r3, #15
 800e3ae:	490f      	ldr	r1, [pc, #60]	; (800e3ec <HAL_RCC_GetHCLKFreq+0x54>)
 800e3b0:	5ccb      	ldrb	r3, [r1, r3]
 800e3b2:	f003 031f 	and.w	r3, r3, #31
 800e3b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e3ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e3bc:	4b0a      	ldr	r3, [pc, #40]	; (800e3e8 <HAL_RCC_GetHCLKFreq+0x50>)
 800e3be:	699b      	ldr	r3, [r3, #24]
 800e3c0:	f003 030f 	and.w	r3, r3, #15
 800e3c4:	4a09      	ldr	r2, [pc, #36]	; (800e3ec <HAL_RCC_GetHCLKFreq+0x54>)
 800e3c6:	5cd3      	ldrb	r3, [r2, r3]
 800e3c8:	f003 031f 	and.w	r3, r3, #31
 800e3cc:	687a      	ldr	r2, [r7, #4]
 800e3ce:	fa22 f303 	lsr.w	r3, r2, r3
 800e3d2:	4a07      	ldr	r2, [pc, #28]	; (800e3f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800e3d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e3d6:	4a07      	ldr	r2, [pc, #28]	; (800e3f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e3dc:	4b04      	ldr	r3, [pc, #16]	; (800e3f0 <HAL_RCC_GetHCLKFreq+0x58>)
 800e3de:	681b      	ldr	r3, [r3, #0]
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	58024400 	.word	0x58024400
 800e3ec:	08016be0 	.word	0x08016be0
 800e3f0:	20000024 	.word	0x20000024
 800e3f4:	20000020 	.word	0x20000020

0800e3f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e3fc:	f7ff ffcc 	bl	800e398 <HAL_RCC_GetHCLKFreq>
 800e400:	4602      	mov	r2, r0
 800e402:	4b06      	ldr	r3, [pc, #24]	; (800e41c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e404:	69db      	ldr	r3, [r3, #28]
 800e406:	091b      	lsrs	r3, r3, #4
 800e408:	f003 0307 	and.w	r3, r3, #7
 800e40c:	4904      	ldr	r1, [pc, #16]	; (800e420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e40e:	5ccb      	ldrb	r3, [r1, r3]
 800e410:	f003 031f 	and.w	r3, r3, #31
 800e414:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e418:	4618      	mov	r0, r3
 800e41a:	bd80      	pop	{r7, pc}
 800e41c:	58024400 	.word	0x58024400
 800e420:	08016be0 	.word	0x08016be0

0800e424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e428:	f7ff ffb6 	bl	800e398 <HAL_RCC_GetHCLKFreq>
 800e42c:	4602      	mov	r2, r0
 800e42e:	4b06      	ldr	r3, [pc, #24]	; (800e448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e430:	69db      	ldr	r3, [r3, #28]
 800e432:	0a1b      	lsrs	r3, r3, #8
 800e434:	f003 0307 	and.w	r3, r3, #7
 800e438:	4904      	ldr	r1, [pc, #16]	; (800e44c <HAL_RCC_GetPCLK2Freq+0x28>)
 800e43a:	5ccb      	ldrb	r3, [r1, r3]
 800e43c:	f003 031f 	and.w	r3, r3, #31
 800e440:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e444:	4618      	mov	r0, r3
 800e446:	bd80      	pop	{r7, pc}
 800e448:	58024400 	.word	0x58024400
 800e44c:	08016be0 	.word	0x08016be0

0800e450 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b086      	sub	sp, #24
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e458:	2300      	movs	r3, #0
 800e45a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e45c:	2300      	movs	r3, #0
 800e45e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d03f      	beq.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e470:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e474:	d02a      	beq.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800e476:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e47a:	d824      	bhi.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e47c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e480:	d018      	beq.n	800e4b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e482:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e486:	d81e      	bhi.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800e48c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e490:	d007      	beq.n	800e4a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800e492:	e018      	b.n	800e4c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e494:	4ba4      	ldr	r3, [pc, #656]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e498:	4aa3      	ldr	r2, [pc, #652]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e49a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e49e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e4a0:	e015      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	3304      	adds	r3, #4
 800e4a6:	2102      	movs	r1, #2
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f001 ff01 	bl	80102b0 <RCCEx_PLL2_Config>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e4b2:	e00c      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	3324      	adds	r3, #36	; 0x24
 800e4b8:	2102      	movs	r1, #2
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f001 ffaa 	bl	8010414 <RCCEx_PLL3_Config>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e4c4:	e003      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	75fb      	strb	r3, [r7, #23]
      break;
 800e4ca:	e000      	b.n	800e4ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800e4cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e4ce:	7dfb      	ldrb	r3, [r7, #23]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d109      	bne.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e4d4:	4b94      	ldr	r3, [pc, #592]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e4e0:	4991      	ldr	r1, [pc, #580]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e4e2:	4313      	orrs	r3, r2
 800e4e4:	650b      	str	r3, [r1, #80]	; 0x50
 800e4e6:	e001      	b.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4e8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d03d      	beq.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4fc:	2b04      	cmp	r3, #4
 800e4fe:	d826      	bhi.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e500:	a201      	add	r2, pc, #4	; (adr r2, 800e508 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800e502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e506:	bf00      	nop
 800e508:	0800e51d 	.word	0x0800e51d
 800e50c:	0800e52b 	.word	0x0800e52b
 800e510:	0800e53d 	.word	0x0800e53d
 800e514:	0800e555 	.word	0x0800e555
 800e518:	0800e555 	.word	0x0800e555
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e51c:	4b82      	ldr	r3, [pc, #520]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e520:	4a81      	ldr	r2, [pc, #516]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e528:	e015      	b.n	800e556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	3304      	adds	r3, #4
 800e52e:	2100      	movs	r1, #0
 800e530:	4618      	mov	r0, r3
 800e532:	f001 febd 	bl	80102b0 <RCCEx_PLL2_Config>
 800e536:	4603      	mov	r3, r0
 800e538:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e53a:	e00c      	b.n	800e556 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	3324      	adds	r3, #36	; 0x24
 800e540:	2100      	movs	r1, #0
 800e542:	4618      	mov	r0, r3
 800e544:	f001 ff66 	bl	8010414 <RCCEx_PLL3_Config>
 800e548:	4603      	mov	r3, r0
 800e54a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e54c:	e003      	b.n	800e556 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	75fb      	strb	r3, [r7, #23]
      break;
 800e552:	e000      	b.n	800e556 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800e554:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e556:	7dfb      	ldrb	r3, [r7, #23]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d109      	bne.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e55c:	4b72      	ldr	r3, [pc, #456]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e55e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e560:	f023 0207 	bic.w	r2, r3, #7
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e568:	496f      	ldr	r1, [pc, #444]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e56a:	4313      	orrs	r3, r2
 800e56c:	650b      	str	r3, [r1, #80]	; 0x50
 800e56e:	e001      	b.n	800e574 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e570:	7dfb      	ldrb	r3, [r7, #23]
 800e572:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d051      	beq.n	800e624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e586:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e58a:	d036      	beq.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e58c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e590:	d830      	bhi.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e596:	d032      	beq.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e59c:	d82a      	bhi.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e59e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e5a2:	d02e      	beq.n	800e602 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800e5a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e5a8:	d824      	bhi.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e5aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5ae:	d018      	beq.n	800e5e2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800e5b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e5b4:	d81e      	bhi.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d003      	beq.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800e5ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e5be:	d007      	beq.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800e5c0:	e018      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e5c2:	4b59      	ldr	r3, [pc, #356]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c6:	4a58      	ldr	r2, [pc, #352]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e5c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e5ce:	e019      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	3304      	adds	r3, #4
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f001 fe6a 	bl	80102b0 <RCCEx_PLL2_Config>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e5e0:	e010      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	3324      	adds	r3, #36	; 0x24
 800e5e6:	2100      	movs	r1, #0
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f001 ff13 	bl	8010414 <RCCEx_PLL3_Config>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e5f2:	e007      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	75fb      	strb	r3, [r7, #23]
      break;
 800e5f8:	e004      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e5fa:	bf00      	nop
 800e5fc:	e002      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e5fe:	bf00      	nop
 800e600:	e000      	b.n	800e604 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e602:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e604:	7dfb      	ldrb	r3, [r7, #23]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d10a      	bne.n	800e620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e60a:	4b47      	ldr	r3, [pc, #284]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e60c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e60e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e618:	4943      	ldr	r1, [pc, #268]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e61a:	4313      	orrs	r3, r2
 800e61c:	658b      	str	r3, [r1, #88]	; 0x58
 800e61e:	e001      	b.n	800e624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e620:	7dfb      	ldrb	r3, [r7, #23]
 800e622:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d051      	beq.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e636:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e63a:	d036      	beq.n	800e6aa <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e63c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e640:	d830      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e646:	d032      	beq.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800e648:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e64c:	d82a      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e64e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e652:	d02e      	beq.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800e654:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e658:	d824      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e65a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e65e:	d018      	beq.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800e660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e664:	d81e      	bhi.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e666:	2b00      	cmp	r3, #0
 800e668:	d003      	beq.n	800e672 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800e66a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e66e:	d007      	beq.n	800e680 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800e670:	e018      	b.n	800e6a4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e672:	4b2d      	ldr	r3, [pc, #180]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e676:	4a2c      	ldr	r2, [pc, #176]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e67c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e67e:	e019      	b.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	3304      	adds	r3, #4
 800e684:	2100      	movs	r1, #0
 800e686:	4618      	mov	r0, r3
 800e688:	f001 fe12 	bl	80102b0 <RCCEx_PLL2_Config>
 800e68c:	4603      	mov	r3, r0
 800e68e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e690:	e010      	b.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3324      	adds	r3, #36	; 0x24
 800e696:	2100      	movs	r1, #0
 800e698:	4618      	mov	r0, r3
 800e69a:	f001 febb 	bl	8010414 <RCCEx_PLL3_Config>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e6a2:	e007      	b.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	75fb      	strb	r3, [r7, #23]
      break;
 800e6a8:	e004      	b.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e6aa:	bf00      	nop
 800e6ac:	e002      	b.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e6ae:	bf00      	nop
 800e6b0:	e000      	b.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e6b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e6b4:	7dfb      	ldrb	r3, [r7, #23]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10a      	bne.n	800e6d0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e6ba:	4b1b      	ldr	r3, [pc, #108]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e6bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6be:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e6c8:	4917      	ldr	r1, [pc, #92]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e6ca:	4313      	orrs	r3, r2
 800e6cc:	658b      	str	r3, [r1, #88]	; 0x58
 800e6ce:	e001      	b.n	800e6d4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6d0:	7dfb      	ldrb	r3, [r7, #23]
 800e6d2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d035      	beq.n	800e74c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e4:	2b30      	cmp	r3, #48	; 0x30
 800e6e6:	d01c      	beq.n	800e722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e6e8:	2b30      	cmp	r3, #48	; 0x30
 800e6ea:	d817      	bhi.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e6ec:	2b20      	cmp	r3, #32
 800e6ee:	d00c      	beq.n	800e70a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800e6f0:	2b20      	cmp	r3, #32
 800e6f2:	d813      	bhi.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d019      	beq.n	800e72c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800e6f8:	2b10      	cmp	r3, #16
 800e6fa:	d10f      	bne.n	800e71c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e6fc:	4b0a      	ldr	r3, [pc, #40]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e700:	4a09      	ldr	r2, [pc, #36]	; (800e728 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800e702:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e706:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e708:	e011      	b.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	3304      	adds	r3, #4
 800e70e:	2102      	movs	r1, #2
 800e710:	4618      	mov	r0, r3
 800e712:	f001 fdcd 	bl	80102b0 <RCCEx_PLL2_Config>
 800e716:	4603      	mov	r3, r0
 800e718:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e71a:	e008      	b.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e71c:	2301      	movs	r3, #1
 800e71e:	75fb      	strb	r3, [r7, #23]
      break;
 800e720:	e005      	b.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800e722:	bf00      	nop
 800e724:	e003      	b.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800e726:	bf00      	nop
 800e728:	58024400 	.word	0x58024400
      break;
 800e72c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e72e:	7dfb      	ldrb	r3, [r7, #23]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d109      	bne.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e734:	4ba3      	ldr	r3, [pc, #652]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e738:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e740:	49a0      	ldr	r1, [pc, #640]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e742:	4313      	orrs	r3, r2
 800e744:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e746:	e001      	b.n	800e74c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e748:	7dfb      	ldrb	r3, [r7, #23]
 800e74a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e754:	2b00      	cmp	r3, #0
 800e756:	d047      	beq.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e75c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e760:	d030      	beq.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800e762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e766:	d82a      	bhi.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e768:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e76c:	d02c      	beq.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800e76e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e772:	d824      	bhi.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e778:	d018      	beq.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e77a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e77e:	d81e      	bhi.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e780:	2b00      	cmp	r3, #0
 800e782:	d003      	beq.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e788:	d007      	beq.n	800e79a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e78a:	e018      	b.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e78c:	4b8d      	ldr	r3, [pc, #564]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e790:	4a8c      	ldr	r2, [pc, #560]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e798:	e017      	b.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	3304      	adds	r3, #4
 800e79e:	2100      	movs	r1, #0
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 fd85 	bl	80102b0 <RCCEx_PLL2_Config>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e7aa:	e00e      	b.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	3324      	adds	r3, #36	; 0x24
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f001 fe2e 	bl	8010414 <RCCEx_PLL3_Config>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e7bc:	e005      	b.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	75fb      	strb	r3, [r7, #23]
      break;
 800e7c2:	e002      	b.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e7c4:	bf00      	nop
 800e7c6:	e000      	b.n	800e7ca <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e7c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e7ca:	7dfb      	ldrb	r3, [r7, #23]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d109      	bne.n	800e7e4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e7d0:	4b7c      	ldr	r3, [pc, #496]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7dc:	4979      	ldr	r1, [pc, #484]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	650b      	str	r3, [r1, #80]	; 0x50
 800e7e2:	e001      	b.n	800e7e8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7e4:	7dfb      	ldrb	r3, [r7, #23]
 800e7e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d049      	beq.n	800e888 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e7fc:	d02e      	beq.n	800e85c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800e7fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e802:	d828      	bhi.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e804:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e808:	d02a      	beq.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800e80a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e80e:	d822      	bhi.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e810:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e814:	d026      	beq.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e816:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e81a:	d81c      	bhi.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e81c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e820:	d010      	beq.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800e822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e826:	d816      	bhi.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d01d      	beq.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e82c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e830:	d111      	bne.n	800e856 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3304      	adds	r3, #4
 800e836:	2101      	movs	r1, #1
 800e838:	4618      	mov	r0, r3
 800e83a:	f001 fd39 	bl	80102b0 <RCCEx_PLL2_Config>
 800e83e:	4603      	mov	r3, r0
 800e840:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e842:	e012      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	3324      	adds	r3, #36	; 0x24
 800e848:	2101      	movs	r1, #1
 800e84a:	4618      	mov	r0, r3
 800e84c:	f001 fde2 	bl	8010414 <RCCEx_PLL3_Config>
 800e850:	4603      	mov	r3, r0
 800e852:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e854:	e009      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e856:	2301      	movs	r3, #1
 800e858:	75fb      	strb	r3, [r7, #23]
      break;
 800e85a:	e006      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e85c:	bf00      	nop
 800e85e:	e004      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e860:	bf00      	nop
 800e862:	e002      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e864:	bf00      	nop
 800e866:	e000      	b.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e868:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e86a:	7dfb      	ldrb	r3, [r7, #23]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d109      	bne.n	800e884 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e870:	4b54      	ldr	r3, [pc, #336]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e874:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e87c:	4951      	ldr	r1, [pc, #324]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e87e:	4313      	orrs	r3, r2
 800e880:	650b      	str	r3, [r1, #80]	; 0x50
 800e882:	e001      	b.n	800e888 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e884:	7dfb      	ldrb	r3, [r7, #23]
 800e886:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e890:	2b00      	cmp	r3, #0
 800e892:	d04b      	beq.n	800e92c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e89a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e89e:	d02e      	beq.n	800e8fe <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800e8a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e8a4:	d828      	bhi.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8aa:	d02a      	beq.n	800e902 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800e8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e8b0:	d822      	bhi.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e8b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e8b6:	d026      	beq.n	800e906 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800e8b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e8bc:	d81c      	bhi.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e8be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8c2:	d010      	beq.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800e8c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e8c8:	d816      	bhi.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d01d      	beq.n	800e90a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800e8ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e8d2:	d111      	bne.n	800e8f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	3304      	adds	r3, #4
 800e8d8:	2101      	movs	r1, #1
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f001 fce8 	bl	80102b0 <RCCEx_PLL2_Config>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e8e4:	e012      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	3324      	adds	r3, #36	; 0x24
 800e8ea:	2101      	movs	r1, #1
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f001 fd91 	bl	8010414 <RCCEx_PLL3_Config>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e8f6:	e009      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	75fb      	strb	r3, [r7, #23]
      break;
 800e8fc:	e006      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e8fe:	bf00      	nop
 800e900:	e004      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e902:	bf00      	nop
 800e904:	e002      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e906:	bf00      	nop
 800e908:	e000      	b.n	800e90c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e90a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e90c:	7dfb      	ldrb	r3, [r7, #23]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10a      	bne.n	800e928 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e912:	4b2c      	ldr	r3, [pc, #176]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e916:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e920:	4928      	ldr	r1, [pc, #160]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e922:	4313      	orrs	r3, r2
 800e924:	658b      	str	r3, [r1, #88]	; 0x58
 800e926:	e001      	b.n	800e92c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e928:	7dfb      	ldrb	r3, [r7, #23]
 800e92a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e934:	2b00      	cmp	r3, #0
 800e936:	d02f      	beq.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e93c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e940:	d00e      	beq.n	800e960 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800e942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e946:	d814      	bhi.n	800e972 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d015      	beq.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800e94c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e950:	d10f      	bne.n	800e972 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e952:	4b1c      	ldr	r3, [pc, #112]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e956:	4a1b      	ldr	r2, [pc, #108]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e95c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e95e:	e00c      	b.n	800e97a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3304      	adds	r3, #4
 800e964:	2101      	movs	r1, #1
 800e966:	4618      	mov	r0, r3
 800e968:	f001 fca2 	bl	80102b0 <RCCEx_PLL2_Config>
 800e96c:	4603      	mov	r3, r0
 800e96e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e970:	e003      	b.n	800e97a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	75fb      	strb	r3, [r7, #23]
      break;
 800e976:	e000      	b.n	800e97a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800e978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e97a:	7dfb      	ldrb	r3, [r7, #23]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d109      	bne.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e980:	4b10      	ldr	r3, [pc, #64]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e984:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e98c:	490d      	ldr	r1, [pc, #52]	; (800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800e98e:	4313      	orrs	r3, r2
 800e990:	650b      	str	r3, [r1, #80]	; 0x50
 800e992:	e001      	b.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e994:	7dfb      	ldrb	r3, [r7, #23]
 800e996:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d034      	beq.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9a8:	2b03      	cmp	r3, #3
 800e9aa:	d81d      	bhi.n	800e9e8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800e9ac:	a201      	add	r2, pc, #4	; (adr r2, 800e9b4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800e9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9b2:	bf00      	nop
 800e9b4:	0800e9ef 	.word	0x0800e9ef
 800e9b8:	0800e9c9 	.word	0x0800e9c9
 800e9bc:	0800e9d7 	.word	0x0800e9d7
 800e9c0:	0800e9ef 	.word	0x0800e9ef
 800e9c4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e9c8:	4bb1      	ldr	r3, [pc, #708]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9cc:	4ab0      	ldr	r2, [pc, #704]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e9ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e9d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e9d4:	e00c      	b.n	800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	3304      	adds	r3, #4
 800e9da:	2102      	movs	r1, #2
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f001 fc67 	bl	80102b0 <RCCEx_PLL2_Config>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e9e6:	e003      	b.n	800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e9e8:	2301      	movs	r3, #1
 800e9ea:	75fb      	strb	r3, [r7, #23]
      break;
 800e9ec:	e000      	b.n	800e9f0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800e9ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e9f0:	7dfb      	ldrb	r3, [r7, #23]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d109      	bne.n	800ea0a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e9f6:	4ba6      	ldr	r3, [pc, #664]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800e9f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9fa:	f023 0203 	bic.w	r2, r3, #3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea02:	49a3      	ldr	r1, [pc, #652]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea04:	4313      	orrs	r3, r2
 800ea06:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ea08:	e001      	b.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea0a:	7dfb      	ldrb	r3, [r7, #23]
 800ea0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f000 8086 	beq.w	800eb28 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ea1c:	4b9d      	ldr	r3, [pc, #628]	; (800ec94 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	4a9c      	ldr	r2, [pc, #624]	; (800ec94 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ea22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ea26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ea28:	f7f8 f932 	bl	8006c90 <HAL_GetTick>
 800ea2c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ea2e:	e009      	b.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ea30:	f7f8 f92e 	bl	8006c90 <HAL_GetTick>
 800ea34:	4602      	mov	r2, r0
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	2b64      	cmp	r3, #100	; 0x64
 800ea3c:	d902      	bls.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800ea3e:	2303      	movs	r3, #3
 800ea40:	75fb      	strb	r3, [r7, #23]
        break;
 800ea42:	e005      	b.n	800ea50 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ea44:	4b93      	ldr	r3, [pc, #588]	; (800ec94 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d0ef      	beq.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800ea50:	7dfb      	ldrb	r3, [r7, #23]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d166      	bne.n	800eb24 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ea56:	4b8e      	ldr	r3, [pc, #568]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ea60:	4053      	eors	r3, r2
 800ea62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d013      	beq.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ea6a:	4b89      	ldr	r3, [pc, #548]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ea72:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ea74:	4b86      	ldr	r3, [pc, #536]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea78:	4a85      	ldr	r2, [pc, #532]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ea7e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ea80:	4b83      	ldr	r3, [pc, #524]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea84:	4a82      	ldr	r2, [pc, #520]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ea8a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ea8c:	4a80      	ldr	r2, [pc, #512]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ea98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea9c:	d115      	bne.n	800eaca <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ea9e:	f7f8 f8f7 	bl	8006c90 <HAL_GetTick>
 800eaa2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eaa4:	e00b      	b.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800eaa6:	f7f8 f8f3 	bl	8006c90 <HAL_GetTick>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	1ad3      	subs	r3, r2, r3
 800eab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d902      	bls.n	800eabe <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800eab8:	2303      	movs	r3, #3
 800eaba:	75fb      	strb	r3, [r7, #23]
            break;
 800eabc:	e005      	b.n	800eaca <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eabe:	4b74      	ldr	r3, [pc, #464]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eac2:	f003 0302 	and.w	r3, r3, #2
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d0ed      	beq.n	800eaa6 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800eaca:	7dfb      	ldrb	r3, [r7, #23]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d126      	bne.n	800eb1e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ead6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eada:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eade:	d10d      	bne.n	800eafc <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800eae0:	4b6b      	ldr	r3, [pc, #428]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eaee:	0919      	lsrs	r1, r3, #4
 800eaf0:	4b69      	ldr	r3, [pc, #420]	; (800ec98 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800eaf2:	400b      	ands	r3, r1
 800eaf4:	4966      	ldr	r1, [pc, #408]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eaf6:	4313      	orrs	r3, r2
 800eaf8:	610b      	str	r3, [r1, #16]
 800eafa:	e005      	b.n	800eb08 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800eafc:	4b64      	ldr	r3, [pc, #400]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eafe:	691b      	ldr	r3, [r3, #16]
 800eb00:	4a63      	ldr	r2, [pc, #396]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800eb06:	6113      	str	r3, [r2, #16]
 800eb08:	4b61      	ldr	r3, [pc, #388]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800eb16:	495e      	ldr	r1, [pc, #376]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	670b      	str	r3, [r1, #112]	; 0x70
 800eb1c:	e004      	b.n	800eb28 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800eb1e:	7dfb      	ldrb	r3, [r7, #23]
 800eb20:	75bb      	strb	r3, [r7, #22]
 800eb22:	e001      	b.n	800eb28 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb24:	7dfb      	ldrb	r3, [r7, #23]
 800eb26:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f003 0301 	and.w	r3, r3, #1
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d07e      	beq.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb38:	2b28      	cmp	r3, #40	; 0x28
 800eb3a:	d867      	bhi.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800eb3c:	a201      	add	r2, pc, #4	; (adr r2, 800eb44 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800eb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb42:	bf00      	nop
 800eb44:	0800ec13 	.word	0x0800ec13
 800eb48:	0800ec0d 	.word	0x0800ec0d
 800eb4c:	0800ec0d 	.word	0x0800ec0d
 800eb50:	0800ec0d 	.word	0x0800ec0d
 800eb54:	0800ec0d 	.word	0x0800ec0d
 800eb58:	0800ec0d 	.word	0x0800ec0d
 800eb5c:	0800ec0d 	.word	0x0800ec0d
 800eb60:	0800ec0d 	.word	0x0800ec0d
 800eb64:	0800ebe9 	.word	0x0800ebe9
 800eb68:	0800ec0d 	.word	0x0800ec0d
 800eb6c:	0800ec0d 	.word	0x0800ec0d
 800eb70:	0800ec0d 	.word	0x0800ec0d
 800eb74:	0800ec0d 	.word	0x0800ec0d
 800eb78:	0800ec0d 	.word	0x0800ec0d
 800eb7c:	0800ec0d 	.word	0x0800ec0d
 800eb80:	0800ec0d 	.word	0x0800ec0d
 800eb84:	0800ebfb 	.word	0x0800ebfb
 800eb88:	0800ec0d 	.word	0x0800ec0d
 800eb8c:	0800ec0d 	.word	0x0800ec0d
 800eb90:	0800ec0d 	.word	0x0800ec0d
 800eb94:	0800ec0d 	.word	0x0800ec0d
 800eb98:	0800ec0d 	.word	0x0800ec0d
 800eb9c:	0800ec0d 	.word	0x0800ec0d
 800eba0:	0800ec0d 	.word	0x0800ec0d
 800eba4:	0800ec13 	.word	0x0800ec13
 800eba8:	0800ec0d 	.word	0x0800ec0d
 800ebac:	0800ec0d 	.word	0x0800ec0d
 800ebb0:	0800ec0d 	.word	0x0800ec0d
 800ebb4:	0800ec0d 	.word	0x0800ec0d
 800ebb8:	0800ec0d 	.word	0x0800ec0d
 800ebbc:	0800ec0d 	.word	0x0800ec0d
 800ebc0:	0800ec0d 	.word	0x0800ec0d
 800ebc4:	0800ec13 	.word	0x0800ec13
 800ebc8:	0800ec0d 	.word	0x0800ec0d
 800ebcc:	0800ec0d 	.word	0x0800ec0d
 800ebd0:	0800ec0d 	.word	0x0800ec0d
 800ebd4:	0800ec0d 	.word	0x0800ec0d
 800ebd8:	0800ec0d 	.word	0x0800ec0d
 800ebdc:	0800ec0d 	.word	0x0800ec0d
 800ebe0:	0800ec0d 	.word	0x0800ec0d
 800ebe4:	0800ec13 	.word	0x0800ec13
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	3304      	adds	r3, #4
 800ebec:	2101      	movs	r1, #1
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f001 fb5e 	bl	80102b0 <RCCEx_PLL2_Config>
 800ebf4:	4603      	mov	r3, r0
 800ebf6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ebf8:	e00c      	b.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	3324      	adds	r3, #36	; 0x24
 800ebfe:	2101      	movs	r1, #1
 800ec00:	4618      	mov	r0, r3
 800ec02:	f001 fc07 	bl	8010414 <RCCEx_PLL3_Config>
 800ec06:	4603      	mov	r3, r0
 800ec08:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ec0a:	e003      	b.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ec10:	e000      	b.n	800ec14 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800ec12:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ec14:	7dfb      	ldrb	r3, [r7, #23]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d109      	bne.n	800ec2e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ec1a:	4b1d      	ldr	r3, [pc, #116]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ec1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec1e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec26:	491a      	ldr	r1, [pc, #104]	; (800ec90 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	654b      	str	r3, [r1, #84]	; 0x54
 800ec2c:	e001      	b.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec2e:	7dfb      	ldrb	r3, [r7, #23]
 800ec30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f003 0302 	and.w	r3, r3, #2
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d03e      	beq.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec42:	2b05      	cmp	r3, #5
 800ec44:	d820      	bhi.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800ec46:	a201      	add	r2, pc, #4	; (adr r2, 800ec4c <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800ec48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec4c:	0800ec9d 	.word	0x0800ec9d
 800ec50:	0800ec65 	.word	0x0800ec65
 800ec54:	0800ec77 	.word	0x0800ec77
 800ec58:	0800ec9d 	.word	0x0800ec9d
 800ec5c:	0800ec9d 	.word	0x0800ec9d
 800ec60:	0800ec9d 	.word	0x0800ec9d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	3304      	adds	r3, #4
 800ec68:	2101      	movs	r1, #1
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f001 fb20 	bl	80102b0 <RCCEx_PLL2_Config>
 800ec70:	4603      	mov	r3, r0
 800ec72:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ec74:	e013      	b.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	3324      	adds	r3, #36	; 0x24
 800ec7a:	2101      	movs	r1, #1
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f001 fbc9 	bl	8010414 <RCCEx_PLL3_Config>
 800ec82:	4603      	mov	r3, r0
 800ec84:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800ec86:	e00a      	b.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	75fb      	strb	r3, [r7, #23]
      break;
 800ec8c:	e007      	b.n	800ec9e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800ec8e:	bf00      	nop
 800ec90:	58024400 	.word	0x58024400
 800ec94:	58024800 	.word	0x58024800
 800ec98:	00ffffcf 	.word	0x00ffffcf
      break;
 800ec9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d109      	bne.n	800ecb8 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800eca4:	4b9f      	ldr	r3, [pc, #636]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800eca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eca8:	f023 0207 	bic.w	r2, r3, #7
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ecb0:	499c      	ldr	r1, [pc, #624]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	654b      	str	r3, [r1, #84]	; 0x54
 800ecb6:	e001      	b.n	800ecbc <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ecb8:	7dfb      	ldrb	r3, [r7, #23]
 800ecba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f003 0304 	and.w	r3, r3, #4
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d039      	beq.n	800ed3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ecce:	2b05      	cmp	r3, #5
 800ecd0:	d820      	bhi.n	800ed14 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800ecd2:	a201      	add	r2, pc, #4	; (adr r2, 800ecd8 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800ecd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd8:	0800ed1b 	.word	0x0800ed1b
 800ecdc:	0800ecf1 	.word	0x0800ecf1
 800ece0:	0800ed03 	.word	0x0800ed03
 800ece4:	0800ed1b 	.word	0x0800ed1b
 800ece8:	0800ed1b 	.word	0x0800ed1b
 800ecec:	0800ed1b 	.word	0x0800ed1b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	2101      	movs	r1, #1
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f001 fada 	bl	80102b0 <RCCEx_PLL2_Config>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ed00:	e00c      	b.n	800ed1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	3324      	adds	r3, #36	; 0x24
 800ed06:	2101      	movs	r1, #1
 800ed08:	4618      	mov	r0, r3
 800ed0a:	f001 fb83 	bl	8010414 <RCCEx_PLL3_Config>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800ed12:	e003      	b.n	800ed1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ed14:	2301      	movs	r3, #1
 800ed16:	75fb      	strb	r3, [r7, #23]
      break;
 800ed18:	e000      	b.n	800ed1c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800ed1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ed1c:	7dfb      	ldrb	r3, [r7, #23]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d10a      	bne.n	800ed38 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ed22:	4b80      	ldr	r3, [pc, #512]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ed24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed26:	f023 0207 	bic.w	r2, r3, #7
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed30:	497c      	ldr	r1, [pc, #496]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ed32:	4313      	orrs	r3, r2
 800ed34:	658b      	str	r3, [r1, #88]	; 0x58
 800ed36:	e001      	b.n	800ed3c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed38:	7dfb      	ldrb	r3, [r7, #23]
 800ed3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f003 0320 	and.w	r3, r3, #32
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d04b      	beq.n	800ede0 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed52:	d02e      	beq.n	800edb2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800ed54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ed58:	d828      	bhi.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800ed5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed5e:	d02a      	beq.n	800edb6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800ed60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed64:	d822      	bhi.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800ed66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ed6a:	d026      	beq.n	800edba <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800ed6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ed70:	d81c      	bhi.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800ed72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed76:	d010      	beq.n	800ed9a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800ed78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed7c:	d816      	bhi.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d01d      	beq.n	800edbe <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800ed82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed86:	d111      	bne.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	3304      	adds	r3, #4
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f001 fa8e 	bl	80102b0 <RCCEx_PLL2_Config>
 800ed94:	4603      	mov	r3, r0
 800ed96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ed98:	e012      	b.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	3324      	adds	r3, #36	; 0x24
 800ed9e:	2102      	movs	r1, #2
 800eda0:	4618      	mov	r0, r3
 800eda2:	f001 fb37 	bl	8010414 <RCCEx_PLL3_Config>
 800eda6:	4603      	mov	r3, r0
 800eda8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800edaa:	e009      	b.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800edac:	2301      	movs	r3, #1
 800edae:	75fb      	strb	r3, [r7, #23]
      break;
 800edb0:	e006      	b.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800edb2:	bf00      	nop
 800edb4:	e004      	b.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800edb6:	bf00      	nop
 800edb8:	e002      	b.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800edba:	bf00      	nop
 800edbc:	e000      	b.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800edbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800edc0:	7dfb      	ldrb	r3, [r7, #23]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d10a      	bne.n	800eddc <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800edc6:	4b57      	ldr	r3, [pc, #348]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800edc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edca:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edd4:	4953      	ldr	r1, [pc, #332]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800edd6:	4313      	orrs	r3, r2
 800edd8:	654b      	str	r3, [r1, #84]	; 0x54
 800edda:	e001      	b.n	800ede0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eddc:	7dfb      	ldrb	r3, [r7, #23]
 800edde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d04b      	beq.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800edf2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800edf6:	d02e      	beq.n	800ee56 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800edf8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800edfc:	d828      	bhi.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800edfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee02:	d02a      	beq.n	800ee5a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800ee04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee08:	d822      	bhi.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ee0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee0e:	d026      	beq.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800ee10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ee14:	d81c      	bhi.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ee16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee1a:	d010      	beq.n	800ee3e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800ee1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ee20:	d816      	bhi.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d01d      	beq.n	800ee62 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800ee26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee2a:	d111      	bne.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	3304      	adds	r3, #4
 800ee30:	2100      	movs	r1, #0
 800ee32:	4618      	mov	r0, r3
 800ee34:	f001 fa3c 	bl	80102b0 <RCCEx_PLL2_Config>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ee3c:	e012      	b.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	3324      	adds	r3, #36	; 0x24
 800ee42:	2102      	movs	r1, #2
 800ee44:	4618      	mov	r0, r3
 800ee46:	f001 fae5 	bl	8010414 <RCCEx_PLL3_Config>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ee4e:	e009      	b.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ee50:	2301      	movs	r3, #1
 800ee52:	75fb      	strb	r3, [r7, #23]
      break;
 800ee54:	e006      	b.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ee56:	bf00      	nop
 800ee58:	e004      	b.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ee5a:	bf00      	nop
 800ee5c:	e002      	b.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ee5e:	bf00      	nop
 800ee60:	e000      	b.n	800ee64 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ee62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ee64:	7dfb      	ldrb	r3, [r7, #23]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10a      	bne.n	800ee80 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ee6a:	4b2e      	ldr	r3, [pc, #184]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ee6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ee78:	492a      	ldr	r1, [pc, #168]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	658b      	str	r3, [r1, #88]	; 0x58
 800ee7e:	e001      	b.n	800ee84 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee80:	7dfb      	ldrb	r3, [r7, #23]
 800ee82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d04d      	beq.n	800ef2c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ee96:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ee9a:	d02e      	beq.n	800eefa <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800ee9c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800eea0:	d828      	bhi.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800eea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eea6:	d02a      	beq.n	800eefe <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800eea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeac:	d822      	bhi.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800eeae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800eeb2:	d026      	beq.n	800ef02 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800eeb4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800eeb8:	d81c      	bhi.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800eeba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eebe:	d010      	beq.n	800eee2 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800eec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eec4:	d816      	bhi.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d01d      	beq.n	800ef06 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800eeca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eece:	d111      	bne.n	800eef4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	3304      	adds	r3, #4
 800eed4:	2100      	movs	r1, #0
 800eed6:	4618      	mov	r0, r3
 800eed8:	f001 f9ea 	bl	80102b0 <RCCEx_PLL2_Config>
 800eedc:	4603      	mov	r3, r0
 800eede:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800eee0:	e012      	b.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	3324      	adds	r3, #36	; 0x24
 800eee6:	2102      	movs	r1, #2
 800eee8:	4618      	mov	r0, r3
 800eeea:	f001 fa93 	bl	8010414 <RCCEx_PLL3_Config>
 800eeee:	4603      	mov	r3, r0
 800eef0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800eef2:	e009      	b.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eef4:	2301      	movs	r3, #1
 800eef6:	75fb      	strb	r3, [r7, #23]
      break;
 800eef8:	e006      	b.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800eefa:	bf00      	nop
 800eefc:	e004      	b.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800eefe:	bf00      	nop
 800ef00:	e002      	b.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ef02:	bf00      	nop
 800ef04:	e000      	b.n	800ef08 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ef06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ef08:	7dfb      	ldrb	r3, [r7, #23]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d10c      	bne.n	800ef28 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ef0e:	4b05      	ldr	r3, [pc, #20]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ef10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ef1c:	4901      	ldr	r1, [pc, #4]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	658b      	str	r3, [r1, #88]	; 0x58
 800ef22:	e003      	b.n	800ef2c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800ef24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef28:	7dfb      	ldrb	r3, [r7, #23]
 800ef2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f003 0308 	and.w	r3, r3, #8
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d018      	beq.n	800ef6a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef40:	d10a      	bne.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	3324      	adds	r3, #36	; 0x24
 800ef46:	2102      	movs	r1, #2
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f001 fa63 	bl	8010414 <RCCEx_PLL3_Config>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d001      	beq.n	800ef58 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800ef54:	2301      	movs	r3, #1
 800ef56:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ef58:	4b8a      	ldr	r3, [pc, #552]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ef5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef64:	4987      	ldr	r1, [pc, #540]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ef66:	4313      	orrs	r3, r2
 800ef68:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	f003 0310 	and.w	r3, r3, #16
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d01a      	beq.n	800efac <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef80:	d10a      	bne.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	3324      	adds	r3, #36	; 0x24
 800ef86:	2102      	movs	r1, #2
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f001 fa43 	bl	8010414 <RCCEx_PLL3_Config>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d001      	beq.n	800ef98 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800ef94:	2301      	movs	r3, #1
 800ef96:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ef98:	4b7a      	ldr	r3, [pc, #488]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800ef9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efa6:	4977      	ldr	r1, [pc, #476]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800efa8:	4313      	orrs	r3, r2
 800efaa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d034      	beq.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800efbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800efc2:	d01d      	beq.n	800f000 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800efc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800efc8:	d817      	bhi.n	800effa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d003      	beq.n	800efd6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800efce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efd2:	d009      	beq.n	800efe8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800efd4:	e011      	b.n	800effa <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	3304      	adds	r3, #4
 800efda:	2100      	movs	r1, #0
 800efdc:	4618      	mov	r0, r3
 800efde:	f001 f967 	bl	80102b0 <RCCEx_PLL2_Config>
 800efe2:	4603      	mov	r3, r0
 800efe4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800efe6:	e00c      	b.n	800f002 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	3324      	adds	r3, #36	; 0x24
 800efec:	2102      	movs	r1, #2
 800efee:	4618      	mov	r0, r3
 800eff0:	f001 fa10 	bl	8010414 <RCCEx_PLL3_Config>
 800eff4:	4603      	mov	r3, r0
 800eff6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800eff8:	e003      	b.n	800f002 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800effa:	2301      	movs	r3, #1
 800effc:	75fb      	strb	r3, [r7, #23]
      break;
 800effe:	e000      	b.n	800f002 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800f000:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f002:	7dfb      	ldrb	r3, [r7, #23]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d10a      	bne.n	800f01e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800f008:	4b5e      	ldr	r3, [pc, #376]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f00a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f00c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f016:	495b      	ldr	r1, [pc, #364]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f018:	4313      	orrs	r3, r2
 800f01a:	658b      	str	r3, [r1, #88]	; 0x58
 800f01c:	e001      	b.n	800f022 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f01e:	7dfb      	ldrb	r3, [r7, #23]
 800f020:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d033      	beq.n	800f096 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f034:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f038:	d01c      	beq.n	800f074 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800f03a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f03e:	d816      	bhi.n	800f06e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800f040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f044:	d003      	beq.n	800f04e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800f046:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f04a:	d007      	beq.n	800f05c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800f04c:	e00f      	b.n	800f06e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f04e:	4b4d      	ldr	r3, [pc, #308]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f052:	4a4c      	ldr	r2, [pc, #304]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f058:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800f05a:	e00c      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	3324      	adds	r3, #36	; 0x24
 800f060:	2101      	movs	r1, #1
 800f062:	4618      	mov	r0, r3
 800f064:	f001 f9d6 	bl	8010414 <RCCEx_PLL3_Config>
 800f068:	4603      	mov	r3, r0
 800f06a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800f06c:	e003      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f06e:	2301      	movs	r3, #1
 800f070:	75fb      	strb	r3, [r7, #23]
      break;
 800f072:	e000      	b.n	800f076 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800f074:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f076:	7dfb      	ldrb	r3, [r7, #23]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10a      	bne.n	800f092 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f07c:	4b41      	ldr	r3, [pc, #260]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f07e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f080:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f08a:	493e      	ldr	r1, [pc, #248]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f08c:	4313      	orrs	r3, r2
 800f08e:	654b      	str	r3, [r1, #84]	; 0x54
 800f090:	e001      	b.n	800f096 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f092:	7dfb      	ldrb	r3, [r7, #23]
 800f094:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d029      	beq.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d003      	beq.n	800f0b2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800f0aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f0ae:	d007      	beq.n	800f0c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800f0b0:	e00f      	b.n	800f0d2 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f0b2:	4b34      	ldr	r3, [pc, #208]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b6:	4a33      	ldr	r2, [pc, #204]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f0b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800f0be:	e00b      	b.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	3304      	adds	r3, #4
 800f0c4:	2102      	movs	r1, #2
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f001 f8f2 	bl	80102b0 <RCCEx_PLL2_Config>
 800f0cc:	4603      	mov	r3, r0
 800f0ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800f0d0:	e002      	b.n	800f0d8 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	75fb      	strb	r3, [r7, #23]
      break;
 800f0d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f0d8:	7dfb      	ldrb	r3, [r7, #23]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d109      	bne.n	800f0f2 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800f0de:	4b29      	ldr	r3, [pc, #164]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0ea:	4926      	ldr	r1, [pc, #152]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f0ec:	4313      	orrs	r3, r2
 800f0ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f0f0:	e001      	b.n	800f0f6 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f0f2:	7dfb      	ldrb	r3, [r7, #23]
 800f0f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00a      	beq.n	800f118 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	3324      	adds	r3, #36	; 0x24
 800f106:	2102      	movs	r1, #2
 800f108:	4618      	mov	r0, r3
 800f10a:	f001 f983 	bl	8010414 <RCCEx_PLL3_Config>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d001      	beq.n	800f118 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800f114:	2301      	movs	r3, #1
 800f116:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f120:	2b00      	cmp	r3, #0
 800f122:	d033      	beq.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f12c:	d017      	beq.n	800f15e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800f12e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f132:	d811      	bhi.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f138:	d013      	beq.n	800f162 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800f13a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f13e:	d80b      	bhi.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800f140:	2b00      	cmp	r3, #0
 800f142:	d010      	beq.n	800f166 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800f144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f148:	d106      	bne.n	800f158 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f14a:	4b0e      	ldr	r3, [pc, #56]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f14c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f14e:	4a0d      	ldr	r2, [pc, #52]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f154:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800f156:	e007      	b.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f158:	2301      	movs	r3, #1
 800f15a:	75fb      	strb	r3, [r7, #23]
      break;
 800f15c:	e004      	b.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800f15e:	bf00      	nop
 800f160:	e002      	b.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800f162:	bf00      	nop
 800f164:	e000      	b.n	800f168 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800f166:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f168:	7dfb      	ldrb	r3, [r7, #23]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d10c      	bne.n	800f188 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800f16e:	4b05      	ldr	r3, [pc, #20]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f172:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f17a:	4902      	ldr	r1, [pc, #8]	; (800f184 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800f17c:	4313      	orrs	r3, r2
 800f17e:	654b      	str	r3, [r1, #84]	; 0x54
 800f180:	e004      	b.n	800f18c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800f182:	bf00      	nop
 800f184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f188:	7dfb      	ldrb	r3, [r7, #23]
 800f18a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f194:	2b00      	cmp	r3, #0
 800f196:	d008      	beq.n	800f1aa <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800f198:	4b29      	ldr	r3, [pc, #164]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f19c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1a4:	4926      	ldr	r1, [pc, #152]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d008      	beq.n	800f1c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800f1b6:	4b22      	ldr	r3, [pc, #136]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1ba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1c2:	491f      	ldr	r1, [pc, #124]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d00d      	beq.n	800f1f0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800f1d4:	4b1a      	ldr	r3, [pc, #104]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1d6:	691b      	ldr	r3, [r3, #16]
 800f1d8:	4a19      	ldr	r2, [pc, #100]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f1de:	6113      	str	r3, [r2, #16]
 800f1e0:	4b17      	ldr	r3, [pc, #92]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1e2:	691a      	ldr	r2, [r3, #16]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800f1ea:	4915      	ldr	r1, [pc, #84]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	da08      	bge.n	800f20a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800f1f8:	4b11      	ldr	r3, [pc, #68]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f1fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f1fc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f204:	490e      	ldr	r1, [pc, #56]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f206:	4313      	orrs	r3, r2
 800f208:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f212:	2b00      	cmp	r3, #0
 800f214:	d009      	beq.n	800f22a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800f216:	4b0a      	ldr	r3, [pc, #40]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f21a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f224:	4906      	ldr	r1, [pc, #24]	; (800f240 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800f226:	4313      	orrs	r3, r2
 800f228:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800f22a:	7dbb      	ldrb	r3, [r7, #22]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800f230:	2300      	movs	r3, #0
 800f232:	e000      	b.n	800f236 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800f234:	2301      	movs	r3, #1
}
 800f236:	4618      	mov	r0, r3
 800f238:	3718      	adds	r7, #24
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	58024400 	.word	0x58024400

0800f244 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800f244:	b580      	push	{r7, lr}
 800f246:	b090      	sub	sp, #64	; 0x40
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f252:	f040 8089 	bne.w	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800f256:	4b95      	ldr	r3, [pc, #596]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f25a:	f003 0307 	and.w	r3, r3, #7
 800f25e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f262:	2b04      	cmp	r3, #4
 800f264:	d87d      	bhi.n	800f362 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800f266:	a201      	add	r2, pc, #4	; (adr r2, 800f26c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800f268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f26c:	0800f281 	.word	0x0800f281
 800f270:	0800f2a5 	.word	0x0800f2a5
 800f274:	0800f2c9 	.word	0x0800f2c9
 800f278:	0800f35d 	.word	0x0800f35d
 800f27c:	0800f2ed 	.word	0x0800f2ed
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f280:	4b8a      	ldr	r3, [pc, #552]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f28c:	d107      	bne.n	800f29e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f28e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f292:	4618      	mov	r0, r3
 800f294:	f000 feba 	bl	801000c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800f298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f29c:	e3ef      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2a2:	e3ec      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f2a4:	4b81      	ldr	r3, [pc, #516]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f2ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f2b0:	d107      	bne.n	800f2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2b2:	f107 0318 	add.w	r3, r7, #24
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f000 fc00 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f2c0:	e3dd      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2c6:	e3da      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f2c8:	4b78      	ldr	r3, [pc, #480]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2d4:	d107      	bne.n	800f2e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2d6:	f107 030c 	add.w	r3, r7, #12
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f000 fd42 	bl	800fd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f2e4:	e3cb      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2ea:	e3c8      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f2ec:	4b6f      	ldr	r3, [pc, #444]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f2ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f2f4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f2f6:	4b6d      	ldr	r3, [pc, #436]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	f003 0304 	and.w	r3, r3, #4
 800f2fe:	2b04      	cmp	r3, #4
 800f300:	d10c      	bne.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800f302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f304:	2b00      	cmp	r3, #0
 800f306:	d109      	bne.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f308:	4b68      	ldr	r3, [pc, #416]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	08db      	lsrs	r3, r3, #3
 800f30e:	f003 0303 	and.w	r3, r3, #3
 800f312:	4a67      	ldr	r2, [pc, #412]	; (800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800f314:	fa22 f303 	lsr.w	r3, r2, r3
 800f318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f31a:	e01e      	b.n	800f35a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f31c:	4b63      	ldr	r3, [pc, #396]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f328:	d106      	bne.n	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800f32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f330:	d102      	bne.n	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f332:	4b60      	ldr	r3, [pc, #384]	; (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800f334:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f336:	e010      	b.n	800f35a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f338:	4b5c      	ldr	r3, [pc, #368]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f344:	d106      	bne.n	800f354 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800f346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f348:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f34c:	d102      	bne.n	800f354 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f34e:	4b5a      	ldr	r3, [pc, #360]	; (800f4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800f350:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f352:	e002      	b.n	800f35a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f354:	2300      	movs	r3, #0
 800f356:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f358:	e391      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f35a:	e390      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f35c:	4b57      	ldr	r3, [pc, #348]	; (800f4bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800f35e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f360:	e38d      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f366:	e38a      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f36e:	f040 80a7 	bne.w	800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800f372:	4b4e      	ldr	r3, [pc, #312]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f376:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f37a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f382:	d054      	beq.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800f384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f38a:	f200 808b 	bhi.w	800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f390:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f394:	f000 8083 	beq.w	800f49e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f39e:	f200 8081 	bhi.w	800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f3a8:	d02f      	beq.n	800f40a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f3b0:	d878      	bhi.n	800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d004      	beq.n	800f3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800f3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f3be:	d012      	beq.n	800f3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800f3c0:	e070      	b.n	800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f3c2:	4b3a      	ldr	r3, [pc, #232]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3ce:	d107      	bne.n	800f3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f3d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f000 fe19 	bl	801000c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f3de:	e34e      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f3e4:	e34b      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f3e6:	4b31      	ldr	r3, [pc, #196]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3f2:	d107      	bne.n	800f404 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3f4:	f107 0318 	add.w	r3, r7, #24
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f000 fb5f 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f402:	e33c      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f408:	e339      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f40a:	4b28      	ldr	r3, [pc, #160]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f416:	d107      	bne.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f418:	f107 030c 	add.w	r3, r7, #12
 800f41c:	4618      	mov	r0, r3
 800f41e:	f000 fca1 	bl	800fd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f426:	e32a      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f428:	2300      	movs	r3, #0
 800f42a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f42c:	e327      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f42e:	4b1f      	ldr	r3, [pc, #124]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f436:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f438:	4b1c      	ldr	r3, [pc, #112]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	f003 0304 	and.w	r3, r3, #4
 800f440:	2b04      	cmp	r3, #4
 800f442:	d10c      	bne.n	800f45e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800f444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f446:	2b00      	cmp	r3, #0
 800f448:	d109      	bne.n	800f45e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f44a:	4b18      	ldr	r3, [pc, #96]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	08db      	lsrs	r3, r3, #3
 800f450:	f003 0303 	and.w	r3, r3, #3
 800f454:	4a16      	ldr	r2, [pc, #88]	; (800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800f456:	fa22 f303 	lsr.w	r3, r2, r3
 800f45a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f45c:	e01e      	b.n	800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f45e:	4b13      	ldr	r3, [pc, #76]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f46a:	d106      	bne.n	800f47a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800f46c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f46e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f472:	d102      	bne.n	800f47a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f474:	4b0f      	ldr	r3, [pc, #60]	; (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800f476:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f478:	e010      	b.n	800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f47a:	4b0c      	ldr	r3, [pc, #48]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f486:	d106      	bne.n	800f496 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800f488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f48a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f48e:	d102      	bne.n	800f496 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f490:	4b09      	ldr	r3, [pc, #36]	; (800f4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800f492:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f494:	e002      	b.n	800f49c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f496:	2300      	movs	r3, #0
 800f498:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f49a:	e2f0      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f49c:	e2ef      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f49e:	4b07      	ldr	r3, [pc, #28]	; (800f4bc <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800f4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4a2:	e2ec      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4a8:	e2e9      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f4aa:	bf00      	nop
 800f4ac:	58024400 	.word	0x58024400
 800f4b0:	03d09000 	.word	0x03d09000
 800f4b4:	003d0900 	.word	0x003d0900
 800f4b8:	017d7840 	.word	0x017d7840
 800f4bc:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f4c6:	f040 809c 	bne.w	800f602 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800f4ca:	4b9d      	ldr	r3, [pc, #628]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f4d2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f4da:	d054      	beq.n	800f586 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f4e2:	f200 808b 	bhi.w	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f4ec:	f000 8083 	beq.w	800f5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f4f6:	f200 8081 	bhi.w	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f500:	d02f      	beq.n	800f562 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f508:	d878      	bhi.n	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d004      	beq.n	800f51a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f516:	d012      	beq.n	800f53e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f518:	e070      	b.n	800f5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f51a:	4b89      	ldr	r3, [pc, #548]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f526:	d107      	bne.n	800f538 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f52c:	4618      	mov	r0, r3
 800f52e:	f000 fd6d 	bl	801000c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f534:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f536:	e2a2      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f538:	2300      	movs	r3, #0
 800f53a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f53c:	e29f      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f53e:	4b80      	ldr	r3, [pc, #512]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f54a:	d107      	bne.n	800f55c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f54c:	f107 0318 	add.w	r3, r7, #24
 800f550:	4618      	mov	r0, r3
 800f552:	f000 fab3 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f556:	69bb      	ldr	r3, [r7, #24]
 800f558:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800f55a:	e290      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f55c:	2300      	movs	r3, #0
 800f55e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f560:	e28d      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f562:	4b77      	ldr	r3, [pc, #476]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f56a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f56e:	d107      	bne.n	800f580 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f570:	f107 030c 	add.w	r3, r7, #12
 800f574:	4618      	mov	r0, r3
 800f576:	f000 fbf5 	bl	800fd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f57e:	e27e      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f580:	2300      	movs	r3, #0
 800f582:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f584:	e27b      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f586:	4b6e      	ldr	r3, [pc, #440]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f58a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f58e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f590:	4b6b      	ldr	r3, [pc, #428]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f003 0304 	and.w	r3, r3, #4
 800f598:	2b04      	cmp	r3, #4
 800f59a:	d10c      	bne.n	800f5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d109      	bne.n	800f5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f5a2:	4b67      	ldr	r3, [pc, #412]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	08db      	lsrs	r3, r3, #3
 800f5a8:	f003 0303 	and.w	r3, r3, #3
 800f5ac:	4a65      	ldr	r2, [pc, #404]	; (800f744 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f5ae:	fa22 f303 	lsr.w	r3, r2, r3
 800f5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5b4:	e01e      	b.n	800f5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f5b6:	4b62      	ldr	r3, [pc, #392]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5c2:	d106      	bne.n	800f5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800f5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5ca:	d102      	bne.n	800f5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f5cc:	4b5e      	ldr	r3, [pc, #376]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5d0:	e010      	b.n	800f5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f5d2:	4b5b      	ldr	r3, [pc, #364]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5de:	d106      	bne.n	800f5ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800f5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5e6:	d102      	bne.n	800f5ee <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f5e8:	4b58      	ldr	r3, [pc, #352]	; (800f74c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5ec:	e002      	b.n	800f5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f5f2:	e244      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f5f4:	e243      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f5f6:	4b56      	ldr	r3, [pc, #344]	; (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f5fa:	e240      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f600:	e23d      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f608:	f040 80a7 	bne.w	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800f60c:	4b4c      	ldr	r3, [pc, #304]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f60e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f610:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f614:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f61c:	d055      	beq.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800f61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f624:	f200 8096 	bhi.w	800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f62e:	f000 8084 	beq.w	800f73a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800f632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f634:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f638:	f200 808c 	bhi.w	800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f642:	d030      	beq.n	800f6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f64a:	f200 8083 	bhi.w	800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 800f64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f650:	2b00      	cmp	r3, #0
 800f652:	d004      	beq.n	800f65e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 800f654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f65a:	d012      	beq.n	800f682 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 800f65c:	e07a      	b.n	800f754 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f65e:	4b38      	ldr	r3, [pc, #224]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f666:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f66a:	d107      	bne.n	800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f66c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f670:	4618      	mov	r0, r3
 800f672:	f000 fccb 	bl	801000c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f678:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f67a:	e200      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f67c:	2300      	movs	r3, #0
 800f67e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f680:	e1fd      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f682:	4b2f      	ldr	r3, [pc, #188]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f68a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f68e:	d107      	bne.n	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f690:	f107 0318 	add.w	r3, r7, #24
 800f694:	4618      	mov	r0, r3
 800f696:	f000 fa11 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f69a:	69bb      	ldr	r3, [r7, #24]
 800f69c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f69e:	e1ee      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f6a4:	e1eb      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f6a6:	4b26      	ldr	r3, [pc, #152]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f6ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6b2:	d107      	bne.n	800f6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6b4:	f107 030c 	add.w	r3, r7, #12
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f000 fb53 	bl	800fd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f6c2:	e1dc      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f6c8:	e1d9      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f6ca:	4b1d      	ldr	r3, [pc, #116]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f6cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f6ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f6d2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f6d4:	4b1a      	ldr	r3, [pc, #104]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	f003 0304 	and.w	r3, r3, #4
 800f6dc:	2b04      	cmp	r3, #4
 800f6de:	d10c      	bne.n	800f6fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 800f6e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d109      	bne.n	800f6fa <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f6e6:	4b16      	ldr	r3, [pc, #88]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	08db      	lsrs	r3, r3, #3
 800f6ec:	f003 0303 	and.w	r3, r3, #3
 800f6f0:	4a14      	ldr	r2, [pc, #80]	; (800f744 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800f6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f6f8:	e01e      	b.n	800f738 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f6fa:	4b11      	ldr	r3, [pc, #68]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f706:	d106      	bne.n	800f716 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 800f708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f70a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f70e:	d102      	bne.n	800f716 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f710:	4b0d      	ldr	r3, [pc, #52]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f712:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f714:	e010      	b.n	800f738 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f716:	4b0a      	ldr	r3, [pc, #40]	; (800f740 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f71e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f722:	d106      	bne.n	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800f724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f72a:	d102      	bne.n	800f732 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f72c:	4b07      	ldr	r3, [pc, #28]	; (800f74c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f72e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f730:	e002      	b.n	800f738 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f732:	2300      	movs	r3, #0
 800f734:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f736:	e1a2      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f738:	e1a1      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f73a:	4b05      	ldr	r3, [pc, #20]	; (800f750 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f73c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f73e:	e19e      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f740:	58024400 	.word	0x58024400
 800f744:	03d09000 	.word	0x03d09000
 800f748:	003d0900 	.word	0x003d0900
 800f74c:	017d7840 	.word	0x017d7840
 800f750:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 800f754:	2300      	movs	r3, #0
 800f756:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f758:	e191      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f760:	d173      	bne.n	800f84a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800f762:	4b9b      	ldr	r3, [pc, #620]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f766:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f76a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f772:	d02f      	beq.n	800f7d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 800f774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f77a:	d863      	bhi.n	800f844 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 800f77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d004      	beq.n	800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800f782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f788:	d012      	beq.n	800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 800f78a:	e05b      	b.n	800f844 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f78c:	4b90      	ldr	r3, [pc, #576]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f798:	d107      	bne.n	800f7aa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f79a:	f107 0318 	add.w	r3, r7, #24
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f000 f98c 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f7a4:	69bb      	ldr	r3, [r7, #24]
 800f7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f7a8:	e169      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f7ae:	e166      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f7b0:	4b87      	ldr	r3, [pc, #540]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f7b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f7bc:	d107      	bne.n	800f7ce <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7be:	f107 030c 	add.w	r3, r7, #12
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f000 face 	bl	800fd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f7cc:	e157      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f7d2:	e154      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f7d4:	4b7e      	ldr	r3, [pc, #504]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f7d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f7dc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f7de:	4b7c      	ldr	r3, [pc, #496]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f003 0304 	and.w	r3, r3, #4
 800f7e6:	2b04      	cmp	r3, #4
 800f7e8:	d10c      	bne.n	800f804 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800f7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d109      	bne.n	800f804 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f7f0:	4b77      	ldr	r3, [pc, #476]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	08db      	lsrs	r3, r3, #3
 800f7f6:	f003 0303 	and.w	r3, r3, #3
 800f7fa:	4a76      	ldr	r2, [pc, #472]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f7fc:	fa22 f303 	lsr.w	r3, r2, r3
 800f800:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f802:	e01e      	b.n	800f842 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f804:	4b72      	ldr	r3, [pc, #456]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f80c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f810:	d106      	bne.n	800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 800f812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f814:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f818:	d102      	bne.n	800f820 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f81a:	4b6f      	ldr	r3, [pc, #444]	; (800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f81c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f81e:	e010      	b.n	800f842 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f820:	4b6b      	ldr	r3, [pc, #428]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f828:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f82c:	d106      	bne.n	800f83c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800f82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f834:	d102      	bne.n	800f83c <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f836:	4b69      	ldr	r3, [pc, #420]	; (800f9dc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800f838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f83a:	e002      	b.n	800f842 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f83c:	2300      	movs	r3, #0
 800f83e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f840:	e11d      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f842:	e11c      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f844:	2300      	movs	r3, #0
 800f846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f848:	e119      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f850:	d133      	bne.n	800f8ba <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800f852:	4b5f      	ldr	r3, [pc, #380]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f856:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f85a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d004      	beq.n	800f86c <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 800f862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f868:	d012      	beq.n	800f890 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800f86a:	e023      	b.n	800f8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f86c:	4b58      	ldr	r3, [pc, #352]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f874:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f878:	d107      	bne.n	800f88a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f87a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f87e:	4618      	mov	r0, r3
 800f880:	f000 fbc4 	bl	801000c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f886:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f888:	e0f9      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f88a:	2300      	movs	r3, #0
 800f88c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f88e:	e0f6      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f890:	4b4f      	ldr	r3, [pc, #316]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f89c:	d107      	bne.n	800f8ae <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f89e:	f107 0318 	add.w	r3, r7, #24
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f000 f90a 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f8a8:	6a3b      	ldr	r3, [r7, #32]
 800f8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f8ac:	e0e7      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f8b2:	e0e4      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f8b8:	e0e1      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8c0:	f040 808e 	bne.w	800f9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800f8c4:	4b42      	ldr	r3, [pc, #264]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f8c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8c8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f8cc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8d4:	d06b      	beq.n	800f9ae <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 800f8d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8dc:	d874      	bhi.n	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8e4:	d056      	beq.n	800f994 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 800f8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8ec:	d86c      	bhi.n	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f8f4:	d03b      	beq.n	800f96e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 800f8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f8fc:	d864      	bhi.n	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f904:	d021      	beq.n	800f94a <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800f906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f90c:	d85c      	bhi.n	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	2b00      	cmp	r3, #0
 800f912:	d004      	beq.n	800f91e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800f914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f916:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f91a:	d004      	beq.n	800f926 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800f91c:	e054      	b.n	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f91e:	f000 f8b7 	bl	800fa90 <HAL_RCCEx_GetD3PCLK1Freq>
 800f922:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800f924:	e0ab      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f926:	4b2a      	ldr	r3, [pc, #168]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f92e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f932:	d107      	bne.n	800f944 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f934:	f107 0318 	add.w	r3, r7, #24
 800f938:	4618      	mov	r0, r3
 800f93a:	f000 f8bf 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f93e:	69fb      	ldr	r3, [r7, #28]
 800f940:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f942:	e09c      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f944:	2300      	movs	r3, #0
 800f946:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f948:	e099      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f94a:	4b21      	ldr	r3, [pc, #132]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f952:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f956:	d107      	bne.n	800f968 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f958:	f107 030c 	add.w	r3, r7, #12
 800f95c:	4618      	mov	r0, r3
 800f95e:	f000 fa01 	bl	800fd64 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f966:	e08a      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f968:	2300      	movs	r3, #0
 800f96a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f96c:	e087      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f96e:	4b18      	ldr	r3, [pc, #96]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f003 0304 	and.w	r3, r3, #4
 800f976:	2b04      	cmp	r3, #4
 800f978:	d109      	bne.n	800f98e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f97a:	4b15      	ldr	r3, [pc, #84]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	08db      	lsrs	r3, r3, #3
 800f980:	f003 0303 	and.w	r3, r3, #3
 800f984:	4a13      	ldr	r2, [pc, #76]	; (800f9d4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f986:	fa22 f303 	lsr.w	r3, r2, r3
 800f98a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f98c:	e077      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f98e:	2300      	movs	r3, #0
 800f990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f992:	e074      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f994:	4b0e      	ldr	r3, [pc, #56]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f99c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9a0:	d102      	bne.n	800f9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 800f9a2:	4b0d      	ldr	r3, [pc, #52]	; (800f9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f9a6:	e06a      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f9ac:	e067      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f9ae:	4b08      	ldr	r3, [pc, #32]	; (800f9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9ba:	d102      	bne.n	800f9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800f9bc:	4b07      	ldr	r3, [pc, #28]	; (800f9dc <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800f9be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f9c0:	e05d      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f9c6:	e05a      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f9cc:	e057      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f9ce:	bf00      	nop
 800f9d0:	58024400 	.word	0x58024400
 800f9d4:	03d09000 	.word	0x03d09000
 800f9d8:	003d0900 	.word	0x003d0900
 800f9dc:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f9e6:	d148      	bne.n	800fa7a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800f9e8:	4b27      	ldr	r3, [pc, #156]	; (800fa88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f9f0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9f8:	d02a      	beq.n	800fa50 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800f9fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa00:	d838      	bhi.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 800fa02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d004      	beq.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 800fa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa0e:	d00d      	beq.n	800fa2c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800fa10:	e030      	b.n	800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800fa12:	4b1d      	ldr	r3, [pc, #116]	; (800fa88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa1e:	d102      	bne.n	800fa26 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 800fa20:	4b1a      	ldr	r3, [pc, #104]	; (800fa8c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800fa22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fa24:	e02b      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fa26:	2300      	movs	r3, #0
 800fa28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa2a:	e028      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fa2c:	4b16      	ldr	r3, [pc, #88]	; (800fa88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fa38:	d107      	bne.n	800fa4a <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fa3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f000 fae4 	bl	801000c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa46:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fa48:	e019      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa4e:	e016      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa50:	4b0d      	ldr	r3, [pc, #52]	; (800fa88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa5c:	d107      	bne.n	800fa6e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa5e:	f107 0318 	add.w	r3, r7, #24
 800fa62:	4618      	mov	r0, r3
 800fa64:	f000 f82a 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800fa6c:	e007      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa72:	e004      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 800fa74:	2300      	movs	r3, #0
 800fa76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800fa78:	e001      	b.n	800fa7e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800fa7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3740      	adds	r7, #64	; 0x40
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	58024400 	.word	0x58024400
 800fa8c:	017d7840 	.word	0x017d7840

0800fa90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fa94:	f7fe fc80 	bl	800e398 <HAL_RCC_GetHCLKFreq>
 800fa98:	4602      	mov	r2, r0
 800fa9a:	4b06      	ldr	r3, [pc, #24]	; (800fab4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fa9c:	6a1b      	ldr	r3, [r3, #32]
 800fa9e:	091b      	lsrs	r3, r3, #4
 800faa0:	f003 0307 	and.w	r3, r3, #7
 800faa4:	4904      	ldr	r1, [pc, #16]	; (800fab8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800faa6:	5ccb      	ldrb	r3, [r1, r3]
 800faa8:	f003 031f 	and.w	r3, r3, #31
 800faac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	58024400 	.word	0x58024400
 800fab8:	08016be0 	.word	0x08016be0

0800fabc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b089      	sub	sp, #36	; 0x24
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fac4:	4ba1      	ldr	r3, [pc, #644]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fac8:	f003 0303 	and.w	r3, r3, #3
 800facc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800face:	4b9f      	ldr	r3, [pc, #636]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fad2:	0b1b      	lsrs	r3, r3, #12
 800fad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fad8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fada:	4b9c      	ldr	r3, [pc, #624]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fade:	091b      	lsrs	r3, r3, #4
 800fae0:	f003 0301 	and.w	r3, r3, #1
 800fae4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800fae6:	4b99      	ldr	r3, [pc, #612]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800faea:	08db      	lsrs	r3, r3, #3
 800faec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800faf0:	693a      	ldr	r2, [r7, #16]
 800faf2:	fb02 f303 	mul.w	r3, r2, r3
 800faf6:	ee07 3a90 	vmov	s15, r3
 800fafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fafe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	f000 8111 	beq.w	800fd2c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800fb0a:	69bb      	ldr	r3, [r7, #24]
 800fb0c:	2b02      	cmp	r3, #2
 800fb0e:	f000 8083 	beq.w	800fc18 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	2b02      	cmp	r3, #2
 800fb16:	f200 80a1 	bhi.w	800fc5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fb1a:	69bb      	ldr	r3, [r7, #24]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d003      	beq.n	800fb28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fb20:	69bb      	ldr	r3, [r7, #24]
 800fb22:	2b01      	cmp	r3, #1
 800fb24:	d056      	beq.n	800fbd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fb26:	e099      	b.n	800fc5c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb28:	4b88      	ldr	r3, [pc, #544]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f003 0320 	and.w	r3, r3, #32
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d02d      	beq.n	800fb90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fb34:	4b85      	ldr	r3, [pc, #532]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	08db      	lsrs	r3, r3, #3
 800fb3a:	f003 0303 	and.w	r3, r3, #3
 800fb3e:	4a84      	ldr	r2, [pc, #528]	; (800fd50 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fb40:	fa22 f303 	lsr.w	r3, r2, r3
 800fb44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fb46:	68bb      	ldr	r3, [r7, #8]
 800fb48:	ee07 3a90 	vmov	s15, r3
 800fb4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	ee07 3a90 	vmov	s15, r3
 800fb56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb5e:	4b7b      	ldr	r3, [pc, #492]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb66:	ee07 3a90 	vmov	s15, r3
 800fb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb72:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800fb8e:	e087      	b.n	800fca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	ee07 3a90 	vmov	s15, r3
 800fb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fd58 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fba2:	4b6a      	ldr	r3, [pc, #424]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbaa:	ee07 3a90 	vmov	s15, r3
 800fbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fbd2:	e065      	b.n	800fca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	ee07 3a90 	vmov	s15, r3
 800fbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fd5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbe6:	4b59      	ldr	r3, [pc, #356]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbee:	ee07 3a90 	vmov	s15, r3
 800fbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbfa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fc16:	e043      	b.n	800fca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	ee07 3a90 	vmov	s15, r3
 800fc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc22:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fd60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800fc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc2a:	4b48      	ldr	r3, [pc, #288]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc32:	ee07 3a90 	vmov	s15, r3
 800fc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc3e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fc5a:	e021      	b.n	800fca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800fc5c:	697b      	ldr	r3, [r7, #20]
 800fc5e:	ee07 3a90 	vmov	s15, r3
 800fc62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc66:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fd5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fc6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc6e:	4b37      	ldr	r3, [pc, #220]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc76:	ee07 3a90 	vmov	s15, r3
 800fc7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc82:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fd54 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fc86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fc9e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800fca0:	4b2a      	ldr	r3, [pc, #168]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fca4:	0a5b      	lsrs	r3, r3, #9
 800fca6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcaa:	ee07 3a90 	vmov	s15, r3
 800fcae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fcba:	edd7 6a07 	vldr	s13, [r7, #28]
 800fcbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcc6:	ee17 2a90 	vmov	r2, s15
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800fcce:	4b1f      	ldr	r3, [pc, #124]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd2:	0c1b      	lsrs	r3, r3, #16
 800fcd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcd8:	ee07 3a90 	vmov	s15, r3
 800fcdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fce0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fce4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fce8:	edd7 6a07 	vldr	s13, [r7, #28]
 800fcec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcf4:	ee17 2a90 	vmov	r2, s15
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800fcfc:	4b13      	ldr	r3, [pc, #76]	; (800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd00:	0e1b      	lsrs	r3, r3, #24
 800fd02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd06:	ee07 3a90 	vmov	s15, r3
 800fd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd16:	edd7 6a07 	vldr	s13, [r7, #28]
 800fd1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd22:	ee17 2a90 	vmov	r2, s15
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800fd2a:	e008      	b.n	800fd3e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	609a      	str	r2, [r3, #8]
}
 800fd3e:	bf00      	nop
 800fd40:	3724      	adds	r7, #36	; 0x24
 800fd42:	46bd      	mov	sp, r7
 800fd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd48:	4770      	bx	lr
 800fd4a:	bf00      	nop
 800fd4c:	58024400 	.word	0x58024400
 800fd50:	03d09000 	.word	0x03d09000
 800fd54:	46000000 	.word	0x46000000
 800fd58:	4c742400 	.word	0x4c742400
 800fd5c:	4a742400 	.word	0x4a742400
 800fd60:	4bbebc20 	.word	0x4bbebc20

0800fd64 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b089      	sub	sp, #36	; 0x24
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd6c:	4ba1      	ldr	r3, [pc, #644]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd70:	f003 0303 	and.w	r3, r3, #3
 800fd74:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800fd76:	4b9f      	ldr	r3, [pc, #636]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd7a:	0d1b      	lsrs	r3, r3, #20
 800fd7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd80:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fd82:	4b9c      	ldr	r3, [pc, #624]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd86:	0a1b      	lsrs	r3, r3, #8
 800fd88:	f003 0301 	and.w	r3, r3, #1
 800fd8c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800fd8e:	4b99      	ldr	r3, [pc, #612]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd92:	08db      	lsrs	r3, r3, #3
 800fd94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd98:	693a      	ldr	r2, [r7, #16]
 800fd9a:	fb02 f303 	mul.w	r3, r2, r3
 800fd9e:	ee07 3a90 	vmov	s15, r3
 800fda2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fda6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fdaa:	697b      	ldr	r3, [r7, #20]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	f000 8111 	beq.w	800ffd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	f000 8083 	beq.w	800fec0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	2b02      	cmp	r3, #2
 800fdbe:	f200 80a1 	bhi.w	800ff04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d003      	beq.n	800fdd0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fdc8:	69bb      	ldr	r3, [r7, #24]
 800fdca:	2b01      	cmp	r3, #1
 800fdcc:	d056      	beq.n	800fe7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fdce:	e099      	b.n	800ff04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdd0:	4b88      	ldr	r3, [pc, #544]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	f003 0320 	and.w	r3, r3, #32
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d02d      	beq.n	800fe38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fddc:	4b85      	ldr	r3, [pc, #532]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	08db      	lsrs	r3, r3, #3
 800fde2:	f003 0303 	and.w	r3, r3, #3
 800fde6:	4a84      	ldr	r2, [pc, #528]	; (800fff8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fde8:	fa22 f303 	lsr.w	r3, r2, r3
 800fdec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	ee07 3a90 	vmov	s15, r3
 800fdf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	ee07 3a90 	vmov	s15, r3
 800fdfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe06:	4b7b      	ldr	r3, [pc, #492]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe0e:	ee07 3a90 	vmov	s15, r3
 800fe12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe16:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800fe36:	e087      	b.n	800ff48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	ee07 3a90 	vmov	s15, r3
 800fe3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010000 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fe46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe4a:	4b6a      	ldr	r3, [pc, #424]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe52:	ee07 3a90 	vmov	s15, r3
 800fe56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fe7a:	e065      	b.n	800ff48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fe7c:	697b      	ldr	r3, [r7, #20]
 800fe7e:	ee07 3a90 	vmov	s15, r3
 800fe82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fe8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe8e:	4b59      	ldr	r3, [pc, #356]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe96:	ee07 3a90 	vmov	s15, r3
 800fe9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fea2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800febe:	e043      	b.n	800ff48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	ee07 3a90 	vmov	s15, r3
 800fec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010008 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fed2:	4b48      	ldr	r3, [pc, #288]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feda:	ee07 3a90 	vmov	s15, r3
 800fede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fee2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fee6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800feea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fefa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fefe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff02:	e021      	b.n	800ff48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	ee07 3a90 	vmov	s15, r3
 800ff0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010004 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ff12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff16:	4b37      	ldr	r3, [pc, #220]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff1e:	ee07 3a90 	vmov	s15, r3
 800ff22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fffc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ff2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ff46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ff48:	4b2a      	ldr	r3, [pc, #168]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff4c:	0a5b      	lsrs	r3, r3, #9
 800ff4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff52:	ee07 3a90 	vmov	s15, r3
 800ff56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff6e:	ee17 2a90 	vmov	r2, s15
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ff76:	4b1f      	ldr	r3, [pc, #124]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff7a:	0c1b      	lsrs	r3, r3, #16
 800ff7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff80:	ee07 3a90 	vmov	s15, r3
 800ff84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff9c:	ee17 2a90 	vmov	r2, s15
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ffa4:	4b13      	ldr	r3, [pc, #76]	; (800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ffa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffa8:	0e1b      	lsrs	r3, r3, #24
 800ffaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffae:	ee07 3a90 	vmov	s15, r3
 800ffb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ffbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ffc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffca:	ee17 2a90 	vmov	r2, s15
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ffd2:	e008      	b.n	800ffe6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	2200      	movs	r2, #0
 800ffe4:	609a      	str	r2, [r3, #8]
}
 800ffe6:	bf00      	nop
 800ffe8:	3724      	adds	r7, #36	; 0x24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr
 800fff2:	bf00      	nop
 800fff4:	58024400 	.word	0x58024400
 800fff8:	03d09000 	.word	0x03d09000
 800fffc:	46000000 	.word	0x46000000
 8010000:	4c742400 	.word	0x4c742400
 8010004:	4a742400 	.word	0x4a742400
 8010008:	4bbebc20 	.word	0x4bbebc20

0801000c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 801000c:	b480      	push	{r7}
 801000e:	b089      	sub	sp, #36	; 0x24
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010014:	4ba0      	ldr	r3, [pc, #640]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010018:	f003 0303 	and.w	r3, r3, #3
 801001c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 801001e:	4b9e      	ldr	r3, [pc, #632]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010022:	091b      	lsrs	r3, r3, #4
 8010024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010028:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801002a:	4b9b      	ldr	r3, [pc, #620]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801002c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801002e:	f003 0301 	and.w	r3, r3, #1
 8010032:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8010034:	4b98      	ldr	r3, [pc, #608]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010038:	08db      	lsrs	r3, r3, #3
 801003a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801003e:	693a      	ldr	r2, [r7, #16]
 8010040:	fb02 f303 	mul.w	r3, r2, r3
 8010044:	ee07 3a90 	vmov	s15, r3
 8010048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801004c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	2b00      	cmp	r3, #0
 8010054:	f000 8111 	beq.w	801027a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010058:	69bb      	ldr	r3, [r7, #24]
 801005a:	2b02      	cmp	r3, #2
 801005c:	f000 8083 	beq.w	8010166 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	2b02      	cmp	r3, #2
 8010064:	f200 80a1 	bhi.w	80101aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010068:	69bb      	ldr	r3, [r7, #24]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d003      	beq.n	8010076 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d056      	beq.n	8010122 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010074:	e099      	b.n	80101aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010076:	4b88      	ldr	r3, [pc, #544]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f003 0320 	and.w	r3, r3, #32
 801007e:	2b00      	cmp	r3, #0
 8010080:	d02d      	beq.n	80100de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010082:	4b85      	ldr	r3, [pc, #532]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	08db      	lsrs	r3, r3, #3
 8010088:	f003 0303 	and.w	r3, r3, #3
 801008c:	4a83      	ldr	r2, [pc, #524]	; (801029c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801008e:	fa22 f303 	lsr.w	r3, r2, r3
 8010092:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	ee07 3a90 	vmov	s15, r3
 801009a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	ee07 3a90 	vmov	s15, r3
 80100a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100ac:	4b7a      	ldr	r3, [pc, #488]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100b4:	ee07 3a90 	vmov	s15, r3
 80100b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100bc:	ed97 6a03 	vldr	s12, [r7, #12]
 80100c0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80102a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80100c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100d8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80100dc:	e087      	b.n	80101ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	ee07 3a90 	vmov	s15, r3
 80100e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100e8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80102a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80100ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100f0:	4b69      	ldr	r3, [pc, #420]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100f8:	ee07 3a90 	vmov	s15, r3
 80100fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010100:	ed97 6a03 	vldr	s12, [r7, #12]
 8010104:	eddf 5a66 	vldr	s11, [pc, #408]	; 80102a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801010c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010118:	ee67 7a27 	vmul.f32	s15, s14, s15
 801011c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010120:	e065      	b.n	80101ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	ee07 3a90 	vmov	s15, r3
 8010128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801012c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80102a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8010130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010134:	4b58      	ldr	r3, [pc, #352]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801013c:	ee07 3a90 	vmov	s15, r3
 8010140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010144:	ed97 6a03 	vldr	s12, [r7, #12]
 8010148:	eddf 5a55 	vldr	s11, [pc, #340]	; 80102a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801014c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801015c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010160:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010164:	e043      	b.n	80101ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	ee07 3a90 	vmov	s15, r3
 801016c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010170:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80102ac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010178:	4b47      	ldr	r3, [pc, #284]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801017a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801017c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010180:	ee07 3a90 	vmov	s15, r3
 8010184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010188:	ed97 6a03 	vldr	s12, [r7, #12]
 801018c:	eddf 5a44 	vldr	s11, [pc, #272]	; 80102a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801019c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101a4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80101a8:	e021      	b.n	80101ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	ee07 3a90 	vmov	s15, r3
 80101b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101b4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80102a4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80101b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101bc:	4b36      	ldr	r3, [pc, #216]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101c4:	ee07 3a90 	vmov	s15, r3
 80101c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80101d0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80102a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80101d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80101ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80101ee:	4b2a      	ldr	r3, [pc, #168]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101f2:	0a5b      	lsrs	r3, r3, #9
 80101f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101f8:	ee07 3a90 	vmov	s15, r3
 80101fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010200:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010204:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010208:	edd7 6a07 	vldr	s13, [r7, #28]
 801020c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010210:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010214:	ee17 2a90 	vmov	r2, s15
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 801021c:	4b1e      	ldr	r3, [pc, #120]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801021e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010220:	0c1b      	lsrs	r3, r3, #16
 8010222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010226:	ee07 3a90 	vmov	s15, r3
 801022a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801022e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010236:	edd7 6a07 	vldr	s13, [r7, #28]
 801023a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801023e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010242:	ee17 2a90 	vmov	r2, s15
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 801024a:	4b13      	ldr	r3, [pc, #76]	; (8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801024e:	0e1b      	lsrs	r3, r3, #24
 8010250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010254:	ee07 3a90 	vmov	s15, r3
 8010258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801025c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010264:	edd7 6a07 	vldr	s13, [r7, #28]
 8010268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801026c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010270:	ee17 2a90 	vmov	r2, s15
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010278:	e008      	b.n	801028c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2200      	movs	r2, #0
 8010284:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2200      	movs	r2, #0
 801028a:	609a      	str	r2, [r3, #8]
}
 801028c:	bf00      	nop
 801028e:	3724      	adds	r7, #36	; 0x24
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr
 8010298:	58024400 	.word	0x58024400
 801029c:	03d09000 	.word	0x03d09000
 80102a0:	46000000 	.word	0x46000000
 80102a4:	4c742400 	.word	0x4c742400
 80102a8:	4a742400 	.word	0x4a742400
 80102ac:	4bbebc20 	.word	0x4bbebc20

080102b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b084      	sub	sp, #16
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80102ba:	2300      	movs	r3, #0
 80102bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80102be:	4b53      	ldr	r3, [pc, #332]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80102c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102c2:	f003 0303 	and.w	r3, r3, #3
 80102c6:	2b03      	cmp	r3, #3
 80102c8:	d101      	bne.n	80102ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80102ca:	2301      	movs	r3, #1
 80102cc:	e099      	b.n	8010402 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80102ce:	4b4f      	ldr	r3, [pc, #316]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a4e      	ldr	r2, [pc, #312]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80102d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80102d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80102da:	f7f6 fcd9 	bl	8006c90 <HAL_GetTick>
 80102de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80102e0:	e008      	b.n	80102f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80102e2:	f7f6 fcd5 	bl	8006c90 <HAL_GetTick>
 80102e6:	4602      	mov	r2, r0
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	1ad3      	subs	r3, r2, r3
 80102ec:	2b02      	cmp	r3, #2
 80102ee:	d901      	bls.n	80102f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80102f0:	2303      	movs	r3, #3
 80102f2:	e086      	b.n	8010402 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80102f4:	4b45      	ldr	r3, [pc, #276]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d1f0      	bne.n	80102e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010300:	4b42      	ldr	r3, [pc, #264]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 8010302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010304:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	031b      	lsls	r3, r3, #12
 801030e:	493f      	ldr	r1, [pc, #252]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 8010310:	4313      	orrs	r3, r2
 8010312:	628b      	str	r3, [r1, #40]	; 0x28
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	3b01      	subs	r3, #1
 801031a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	689b      	ldr	r3, [r3, #8]
 8010322:	3b01      	subs	r3, #1
 8010324:	025b      	lsls	r3, r3, #9
 8010326:	b29b      	uxth	r3, r3
 8010328:	431a      	orrs	r2, r3
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	3b01      	subs	r3, #1
 8010330:	041b      	lsls	r3, r3, #16
 8010332:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010336:	431a      	orrs	r2, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	691b      	ldr	r3, [r3, #16]
 801033c:	3b01      	subs	r3, #1
 801033e:	061b      	lsls	r3, r3, #24
 8010340:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010344:	4931      	ldr	r1, [pc, #196]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 8010346:	4313      	orrs	r3, r2
 8010348:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801034a:	4b30      	ldr	r3, [pc, #192]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 801034c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	695b      	ldr	r3, [r3, #20]
 8010356:	492d      	ldr	r1, [pc, #180]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 8010358:	4313      	orrs	r3, r2
 801035a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801035c:	4b2b      	ldr	r3, [pc, #172]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 801035e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010360:	f023 0220 	bic.w	r2, r3, #32
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	699b      	ldr	r3, [r3, #24]
 8010368:	4928      	ldr	r1, [pc, #160]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 801036a:	4313      	orrs	r3, r2
 801036c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801036e:	4b27      	ldr	r3, [pc, #156]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 8010370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010372:	4a26      	ldr	r2, [pc, #152]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 8010374:	f023 0310 	bic.w	r3, r3, #16
 8010378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801037a:	4b24      	ldr	r3, [pc, #144]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 801037c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801037e:	4b24      	ldr	r3, [pc, #144]	; (8010410 <RCCEx_PLL2_Config+0x160>)
 8010380:	4013      	ands	r3, r2
 8010382:	687a      	ldr	r2, [r7, #4]
 8010384:	69d2      	ldr	r2, [r2, #28]
 8010386:	00d2      	lsls	r2, r2, #3
 8010388:	4920      	ldr	r1, [pc, #128]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 801038a:	4313      	orrs	r3, r2
 801038c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801038e:	4b1f      	ldr	r3, [pc, #124]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 8010390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010392:	4a1e      	ldr	r2, [pc, #120]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 8010394:	f043 0310 	orr.w	r3, r3, #16
 8010398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d106      	bne.n	80103ae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80103a0:	4b1a      	ldr	r3, [pc, #104]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80103a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a4:	4a19      	ldr	r2, [pc, #100]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80103a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80103ac:	e00f      	b.n	80103ce <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	2b01      	cmp	r3, #1
 80103b2:	d106      	bne.n	80103c2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80103b4:	4b15      	ldr	r3, [pc, #84]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80103b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b8:	4a14      	ldr	r2, [pc, #80]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80103ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80103c0:	e005      	b.n	80103ce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80103c2:	4b12      	ldr	r3, [pc, #72]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80103c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c6:	4a11      	ldr	r2, [pc, #68]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80103c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80103cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80103ce:	4b0f      	ldr	r3, [pc, #60]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	4a0e      	ldr	r2, [pc, #56]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80103d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80103d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80103da:	f7f6 fc59 	bl	8006c90 <HAL_GetTick>
 80103de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80103e0:	e008      	b.n	80103f4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80103e2:	f7f6 fc55 	bl	8006c90 <HAL_GetTick>
 80103e6:	4602      	mov	r2, r0
 80103e8:	68bb      	ldr	r3, [r7, #8]
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	2b02      	cmp	r3, #2
 80103ee:	d901      	bls.n	80103f4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80103f0:	2303      	movs	r3, #3
 80103f2:	e006      	b.n	8010402 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80103f4:	4b05      	ldr	r3, [pc, #20]	; (801040c <RCCEx_PLL2_Config+0x15c>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d0f0      	beq.n	80103e2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010400:	7bfb      	ldrb	r3, [r7, #15]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	bf00      	nop
 801040c:	58024400 	.word	0x58024400
 8010410:	ffff0007 	.word	0xffff0007

08010414 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010414:	b580      	push	{r7, lr}
 8010416:	b084      	sub	sp, #16
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801041e:	2300      	movs	r3, #0
 8010420:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010422:	4b53      	ldr	r3, [pc, #332]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 8010424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010426:	f003 0303 	and.w	r3, r3, #3
 801042a:	2b03      	cmp	r3, #3
 801042c:	d101      	bne.n	8010432 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801042e:	2301      	movs	r3, #1
 8010430:	e099      	b.n	8010566 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010432:	4b4f      	ldr	r3, [pc, #316]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4a4e      	ldr	r2, [pc, #312]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 8010438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801043c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801043e:	f7f6 fc27 	bl	8006c90 <HAL_GetTick>
 8010442:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010444:	e008      	b.n	8010458 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8010446:	f7f6 fc23 	bl	8006c90 <HAL_GetTick>
 801044a:	4602      	mov	r2, r0
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	2b02      	cmp	r3, #2
 8010452:	d901      	bls.n	8010458 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010454:	2303      	movs	r3, #3
 8010456:	e086      	b.n	8010566 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010458:	4b45      	ldr	r3, [pc, #276]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1f0      	bne.n	8010446 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010464:	4b42      	ldr	r3, [pc, #264]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 8010466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010468:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	051b      	lsls	r3, r3, #20
 8010472:	493f      	ldr	r1, [pc, #252]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 8010474:	4313      	orrs	r3, r2
 8010476:	628b      	str	r3, [r1, #40]	; 0x28
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	685b      	ldr	r3, [r3, #4]
 801047c:	3b01      	subs	r3, #1
 801047e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	689b      	ldr	r3, [r3, #8]
 8010486:	3b01      	subs	r3, #1
 8010488:	025b      	lsls	r3, r3, #9
 801048a:	b29b      	uxth	r3, r3
 801048c:	431a      	orrs	r2, r3
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	68db      	ldr	r3, [r3, #12]
 8010492:	3b01      	subs	r3, #1
 8010494:	041b      	lsls	r3, r3, #16
 8010496:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801049a:	431a      	orrs	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	691b      	ldr	r3, [r3, #16]
 80104a0:	3b01      	subs	r3, #1
 80104a2:	061b      	lsls	r3, r3, #24
 80104a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80104a8:	4931      	ldr	r1, [pc, #196]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104aa:	4313      	orrs	r3, r2
 80104ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80104ae:	4b30      	ldr	r3, [pc, #192]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	695b      	ldr	r3, [r3, #20]
 80104ba:	492d      	ldr	r1, [pc, #180]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104bc:	4313      	orrs	r3, r2
 80104be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80104c0:	4b2b      	ldr	r3, [pc, #172]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	699b      	ldr	r3, [r3, #24]
 80104cc:	4928      	ldr	r1, [pc, #160]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104ce:	4313      	orrs	r3, r2
 80104d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80104d2:	4b27      	ldr	r3, [pc, #156]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104d6:	4a26      	ldr	r2, [pc, #152]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80104de:	4b24      	ldr	r3, [pc, #144]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104e2:	4b24      	ldr	r3, [pc, #144]	; (8010574 <RCCEx_PLL3_Config+0x160>)
 80104e4:	4013      	ands	r3, r2
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	69d2      	ldr	r2, [r2, #28]
 80104ea:	00d2      	lsls	r2, r2, #3
 80104ec:	4920      	ldr	r1, [pc, #128]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104ee:	4313      	orrs	r3, r2
 80104f0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80104f2:	4b1f      	ldr	r3, [pc, #124]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f6:	4a1e      	ldr	r2, [pc, #120]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 80104f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80104fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d106      	bne.n	8010512 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010504:	4b1a      	ldr	r3, [pc, #104]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 8010506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010508:	4a19      	ldr	r2, [pc, #100]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 801050a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801050e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010510:	e00f      	b.n	8010532 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	2b01      	cmp	r3, #1
 8010516:	d106      	bne.n	8010526 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010518:	4b15      	ldr	r3, [pc, #84]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 801051a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801051c:	4a14      	ldr	r2, [pc, #80]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 801051e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010522:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010524:	e005      	b.n	8010532 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010526:	4b12      	ldr	r3, [pc, #72]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 8010528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801052a:	4a11      	ldr	r2, [pc, #68]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 801052c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010530:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010532:	4b0f      	ldr	r3, [pc, #60]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a0e      	ldr	r2, [pc, #56]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 8010538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801053c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801053e:	f7f6 fba7 	bl	8006c90 <HAL_GetTick>
 8010542:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010544:	e008      	b.n	8010558 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8010546:	f7f6 fba3 	bl	8006c90 <HAL_GetTick>
 801054a:	4602      	mov	r2, r0
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	1ad3      	subs	r3, r2, r3
 8010550:	2b02      	cmp	r3, #2
 8010552:	d901      	bls.n	8010558 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010554:	2303      	movs	r3, #3
 8010556:	e006      	b.n	8010566 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010558:	4b05      	ldr	r3, [pc, #20]	; (8010570 <RCCEx_PLL3_Config+0x15c>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010560:	2b00      	cmp	r3, #0
 8010562:	d0f0      	beq.n	8010546 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010564:	7bfb      	ldrb	r3, [r7, #15]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3710      	adds	r7, #16
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop
 8010570:	58024400 	.word	0x58024400
 8010574:	ffff0007 	.word	0xffff0007

08010578 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010586:	2301      	movs	r3, #1
 8010588:	e0f1      	b.n	801076e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4a78      	ldr	r2, [pc, #480]	; (8010778 <HAL_SPI_Init+0x200>)
 8010596:	4293      	cmp	r3, r2
 8010598:	d00f      	beq.n	80105ba <HAL_SPI_Init+0x42>
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4a77      	ldr	r2, [pc, #476]	; (801077c <HAL_SPI_Init+0x204>)
 80105a0:	4293      	cmp	r3, r2
 80105a2:	d00a      	beq.n	80105ba <HAL_SPI_Init+0x42>
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4a75      	ldr	r2, [pc, #468]	; (8010780 <HAL_SPI_Init+0x208>)
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d005      	beq.n	80105ba <HAL_SPI_Init+0x42>
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	68db      	ldr	r3, [r3, #12]
 80105b2:	2b0f      	cmp	r3, #15
 80105b4:	d901      	bls.n	80105ba <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80105b6:	2301      	movs	r3, #1
 80105b8:	e0d9      	b.n	801076e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80105ba:	6878      	ldr	r0, [r7, #4]
 80105bc:	f000 ff66 	bl	801148c <SPI_GetPacketSize>
 80105c0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4a6c      	ldr	r2, [pc, #432]	; (8010778 <HAL_SPI_Init+0x200>)
 80105c8:	4293      	cmp	r3, r2
 80105ca:	d00c      	beq.n	80105e6 <HAL_SPI_Init+0x6e>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	4a6a      	ldr	r2, [pc, #424]	; (801077c <HAL_SPI_Init+0x204>)
 80105d2:	4293      	cmp	r3, r2
 80105d4:	d007      	beq.n	80105e6 <HAL_SPI_Init+0x6e>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	4a69      	ldr	r2, [pc, #420]	; (8010780 <HAL_SPI_Init+0x208>)
 80105dc:	4293      	cmp	r3, r2
 80105de:	d002      	beq.n	80105e6 <HAL_SPI_Init+0x6e>
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2b08      	cmp	r3, #8
 80105e4:	d811      	bhi.n	801060a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80105ea:	4a63      	ldr	r2, [pc, #396]	; (8010778 <HAL_SPI_Init+0x200>)
 80105ec:	4293      	cmp	r3, r2
 80105ee:	d009      	beq.n	8010604 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4a61      	ldr	r2, [pc, #388]	; (801077c <HAL_SPI_Init+0x204>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d004      	beq.n	8010604 <HAL_SPI_Init+0x8c>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4a60      	ldr	r2, [pc, #384]	; (8010780 <HAL_SPI_Init+0x208>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d104      	bne.n	801060e <HAL_SPI_Init+0x96>
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	2b10      	cmp	r3, #16
 8010608:	d901      	bls.n	801060e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801060a:	2301      	movs	r3, #1
 801060c:	e0af      	b.n	801076e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010614:	b2db      	uxtb	r3, r3
 8010616:	2b00      	cmp	r3, #0
 8010618:	d106      	bne.n	8010628 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f7f4 fd6c 	bl	8005100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2202      	movs	r2, #2
 801062c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	681a      	ldr	r2, [r3, #0]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f022 0201 	bic.w	r2, r2, #1
 801063e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801064a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	699b      	ldr	r3, [r3, #24]
 8010650:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010654:	d119      	bne.n	801068a <HAL_SPI_Init+0x112>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685b      	ldr	r3, [r3, #4]
 801065a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801065e:	d103      	bne.n	8010668 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010664:	2b00      	cmp	r3, #0
 8010666:	d008      	beq.n	801067a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801066c:	2b00      	cmp	r3, #0
 801066e:	d10c      	bne.n	801068a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010674:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010678:	d107      	bne.n	801068a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010688:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	69da      	ldr	r2, [r3, #28]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010692:	431a      	orrs	r2, r3
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	431a      	orrs	r2, r3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801069c:	ea42 0103 	orr.w	r1, r2, r3
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	68da      	ldr	r2, [r3, #12]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	430a      	orrs	r2, r1
 80106aa:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106b4:	431a      	orrs	r2, r3
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ba:	431a      	orrs	r2, r3
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	699b      	ldr	r3, [r3, #24]
 80106c0:	431a      	orrs	r2, r3
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	691b      	ldr	r3, [r3, #16]
 80106c6:	431a      	orrs	r2, r3
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	695b      	ldr	r3, [r3, #20]
 80106cc:	431a      	orrs	r2, r3
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6a1b      	ldr	r3, [r3, #32]
 80106d2:	431a      	orrs	r2, r3
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	685b      	ldr	r3, [r3, #4]
 80106d8:	431a      	orrs	r2, r3
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106de:	431a      	orrs	r2, r3
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	431a      	orrs	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80106ea:	ea42 0103 	orr.w	r1, r2, r3
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	430a      	orrs	r2, r1
 80106f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d113      	bne.n	801072a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	689b      	ldr	r3, [r3, #8]
 8010708:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010714:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	689b      	ldr	r3, [r3, #8]
 801071c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010728:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f022 0201 	bic.w	r2, r2, #1
 8010738:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010742:	2b00      	cmp	r3, #0
 8010744:	d00a      	beq.n	801075c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	430a      	orrs	r2, r1
 801075a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801076c:	2300      	movs	r3, #0
}
 801076e:	4618      	mov	r0, r3
 8010770:	3710      	adds	r7, #16
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
 8010776:	bf00      	nop
 8010778:	40013000 	.word	0x40013000
 801077c:	40003800 	.word	0x40003800
 8010780:	40003c00 	.word	0x40003c00

08010784 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b08a      	sub	sp, #40	; 0x28
 8010788:	af02      	add	r7, sp, #8
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	603b      	str	r3, [r7, #0]
 8010790:	4613      	mov	r3, r2
 8010792:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	3320      	adds	r3, #32
 801079a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801079c:	2300      	movs	r3, #0
 801079e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	d101      	bne.n	80107ae <HAL_SPI_Transmit+0x2a>
 80107aa:	2302      	movs	r3, #2
 80107ac:	e1d7      	b.n	8010b5e <HAL_SPI_Transmit+0x3da>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2201      	movs	r2, #1
 80107b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80107b6:	f7f6 fa6b 	bl	8006c90 <HAL_GetTick>
 80107ba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80107c2:	b2db      	uxtb	r3, r3
 80107c4:	2b01      	cmp	r3, #1
 80107c6:	d007      	beq.n	80107d8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80107c8:	2302      	movs	r3, #2
 80107ca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2200      	movs	r2, #0
 80107d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80107d4:	7efb      	ldrb	r3, [r7, #27]
 80107d6:	e1c2      	b.n	8010b5e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80107d8:	68bb      	ldr	r3, [r7, #8]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d002      	beq.n	80107e4 <HAL_SPI_Transmit+0x60>
 80107de:	88fb      	ldrh	r3, [r7, #6]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d107      	bne.n	80107f4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80107e4:	2301      	movs	r3, #1
 80107e6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2200      	movs	r2, #0
 80107ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80107f0:	7efb      	ldrb	r3, [r7, #27]
 80107f2:	e1b4      	b.n	8010b5e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2203      	movs	r2, #3
 80107f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	2200      	movs	r2, #0
 8010800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	68ba      	ldr	r2, [r7, #8]
 8010808:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	88fa      	ldrh	r2, [r7, #6]
 801080e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	88fa      	ldrh	r2, [r7, #6]
 8010816:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2200      	movs	r2, #0
 801081e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	2200      	movs	r2, #0
 8010824:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2200      	movs	r2, #0
 801082c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	2200      	movs	r2, #0
 8010834:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	2200      	movs	r2, #0
 801083a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010844:	d107      	bne.n	8010856 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010854:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	685a      	ldr	r2, [r3, #4]
 801085c:	4b96      	ldr	r3, [pc, #600]	; (8010ab8 <HAL_SPI_Transmit+0x334>)
 801085e:	4013      	ands	r3, r2
 8010860:	88f9      	ldrh	r1, [r7, #6]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	6812      	ldr	r2, [r2, #0]
 8010866:	430b      	orrs	r3, r1
 8010868:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	681a      	ldr	r2, [r3, #0]
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f042 0201 	orr.w	r2, r2, #1
 8010878:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010882:	d107      	bne.n	8010894 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	681a      	ldr	r2, [r3, #0]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	2b0f      	cmp	r3, #15
 801089a:	d947      	bls.n	801092c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 801089c:	e03f      	b.n	801091e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	695b      	ldr	r3, [r3, #20]
 80108a4:	f003 0302 	and.w	r3, r3, #2
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d114      	bne.n	80108d6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	6812      	ldr	r2, [r2, #0]
 80108b6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80108bc:	1d1a      	adds	r2, r3, #4
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80108c8:	b29b      	uxth	r3, r3
 80108ca:	3b01      	subs	r3, #1
 80108cc:	b29a      	uxth	r2, r3
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80108d4:	e023      	b.n	801091e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80108d6:	f7f6 f9db 	bl	8006c90 <HAL_GetTick>
 80108da:	4602      	mov	r2, r0
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	1ad3      	subs	r3, r2, r3
 80108e0:	683a      	ldr	r2, [r7, #0]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d803      	bhi.n	80108ee <HAL_SPI_Transmit+0x16a>
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ec:	d102      	bne.n	80108f4 <HAL_SPI_Transmit+0x170>
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d114      	bne.n	801091e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	f000 fcfb 	bl	80112f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2200      	movs	r2, #0
 80108fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010908:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2201      	movs	r2, #1
 8010916:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 801091a:	2303      	movs	r3, #3
 801091c:	e11f      	b.n	8010b5e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010924:	b29b      	uxth	r3, r3
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1b9      	bne.n	801089e <HAL_SPI_Transmit+0x11a>
 801092a:	e0f2      	b.n	8010b12 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	2b07      	cmp	r3, #7
 8010932:	f240 80e7 	bls.w	8010b04 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8010936:	e05d      	b.n	80109f4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	695b      	ldr	r3, [r3, #20]
 801093e:	f003 0302 	and.w	r3, r3, #2
 8010942:	2b02      	cmp	r3, #2
 8010944:	d132      	bne.n	80109ac <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801094c:	b29b      	uxth	r3, r3
 801094e:	2b01      	cmp	r3, #1
 8010950:	d918      	bls.n	8010984 <HAL_SPI_Transmit+0x200>
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010956:	2b00      	cmp	r3, #0
 8010958:	d014      	beq.n	8010984 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	6812      	ldr	r2, [r2, #0]
 8010964:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801096a:	1d1a      	adds	r2, r3, #4
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010976:	b29b      	uxth	r3, r3
 8010978:	3b02      	subs	r3, #2
 801097a:	b29a      	uxth	r2, r3
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010982:	e037      	b.n	80109f4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010988:	881a      	ldrh	r2, [r3, #0]
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010992:	1c9a      	adds	r2, r3, #2
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801099e:	b29b      	uxth	r3, r3
 80109a0:	3b01      	subs	r3, #1
 80109a2:	b29a      	uxth	r2, r3
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80109aa:	e023      	b.n	80109f4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80109ac:	f7f6 f970 	bl	8006c90 <HAL_GetTick>
 80109b0:	4602      	mov	r2, r0
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	1ad3      	subs	r3, r2, r3
 80109b6:	683a      	ldr	r2, [r7, #0]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d803      	bhi.n	80109c4 <HAL_SPI_Transmit+0x240>
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109c2:	d102      	bne.n	80109ca <HAL_SPI_Transmit+0x246>
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d114      	bne.n	80109f4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80109ca:	68f8      	ldr	r0, [r7, #12]
 80109cc:	f000 fc90 	bl	80112f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	2200      	movs	r2, #0
 80109d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80109de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	2201      	movs	r2, #1
 80109ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80109f0:	2303      	movs	r3, #3
 80109f2:	e0b4      	b.n	8010b5e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d19b      	bne.n	8010938 <HAL_SPI_Transmit+0x1b4>
 8010a00:	e087      	b.n	8010b12 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	695b      	ldr	r3, [r3, #20]
 8010a08:	f003 0302 	and.w	r3, r3, #2
 8010a0c:	2b02      	cmp	r3, #2
 8010a0e:	d155      	bne.n	8010abc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	2b03      	cmp	r3, #3
 8010a1a:	d918      	bls.n	8010a4e <HAL_SPI_Transmit+0x2ca>
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a20:	2b40      	cmp	r3, #64	; 0x40
 8010a22:	d914      	bls.n	8010a4e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	6812      	ldr	r2, [r2, #0]
 8010a2e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a34:	1d1a      	adds	r2, r3, #4
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	3b04      	subs	r3, #4
 8010a44:	b29a      	uxth	r2, r3
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010a4c:	e05a      	b.n	8010b04 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d917      	bls.n	8010a8a <HAL_SPI_Transmit+0x306>
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d013      	beq.n	8010a8a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a66:	881a      	ldrh	r2, [r3, #0]
 8010a68:	69fb      	ldr	r3, [r7, #28]
 8010a6a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a70:	1c9a      	adds	r2, r3, #2
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	3b02      	subs	r3, #2
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010a88:	e03c      	b.n	8010b04 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	3320      	adds	r3, #32
 8010a94:	7812      	ldrb	r2, [r2, #0]
 8010a96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010a9c:	1c5a      	adds	r2, r3, #1
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	3b01      	subs	r3, #1
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8010ab4:	e026      	b.n	8010b04 <HAL_SPI_Transmit+0x380>
 8010ab6:	bf00      	nop
 8010ab8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010abc:	f7f6 f8e8 	bl	8006c90 <HAL_GetTick>
 8010ac0:	4602      	mov	r2, r0
 8010ac2:	697b      	ldr	r3, [r7, #20]
 8010ac4:	1ad3      	subs	r3, r2, r3
 8010ac6:	683a      	ldr	r2, [r7, #0]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d803      	bhi.n	8010ad4 <HAL_SPI_Transmit+0x350>
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ad2:	d102      	bne.n	8010ada <HAL_SPI_Transmit+0x356>
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d114      	bne.n	8010b04 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f000 fc08 	bl	80112f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2201      	movs	r2, #1
 8010afc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010b00:	2303      	movs	r3, #3
 8010b02:	e02c      	b.n	8010b5e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b0a:	b29b      	uxth	r3, r3
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	f47f af78 	bne.w	8010a02 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	2108      	movs	r1, #8
 8010b1c:	68f8      	ldr	r0, [r7, #12]
 8010b1e:	f000 fc87 	bl	8011430 <SPI_WaitOnFlagUntilTimeout>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d007      	beq.n	8010b38 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b2e:	f043 0220 	orr.w	r2, r3, #32
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010b38:	68f8      	ldr	r0, [r7, #12]
 8010b3a:	f000 fbd9 	bl	80112f0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010b3e:	68fb      	ldr	r3, [r7, #12]
 8010b40:	2200      	movs	r2, #0
 8010b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2201      	movs	r2, #1
 8010b4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d001      	beq.n	8010b5c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8010b58:	2301      	movs	r3, #1
 8010b5a:	e000      	b.n	8010b5e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8010b5c:	7efb      	ldrb	r3, [r7, #27]
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3720      	adds	r7, #32
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop

08010b68 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b08a      	sub	sp, #40	; 0x28
 8010b6c:	af02      	add	r7, sp, #8
 8010b6e:	60f8      	str	r0, [r7, #12]
 8010b70:	60b9      	str	r1, [r7, #8]
 8010b72:	603b      	str	r3, [r7, #0]
 8010b74:	4613      	mov	r3, r2
 8010b76:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	3330      	adds	r3, #48	; 0x30
 8010b82:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010b8c:	d112      	bne.n	8010bb4 <HAL_SPI_Receive+0x4c>
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	689b      	ldr	r3, [r3, #8]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d10e      	bne.n	8010bb4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2204      	movs	r2, #4
 8010b9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8010b9e:	88fa      	ldrh	r2, [r7, #6]
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	9300      	str	r3, [sp, #0]
 8010ba4:	4613      	mov	r3, r2
 8010ba6:	68ba      	ldr	r2, [r7, #8]
 8010ba8:	68b9      	ldr	r1, [r7, #8]
 8010baa:	68f8      	ldr	r0, [r7, #12]
 8010bac:	f000 f978 	bl	8010ea0 <HAL_SPI_TransmitReceive>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	e16f      	b.n	8010e94 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d101      	bne.n	8010bc2 <HAL_SPI_Receive+0x5a>
 8010bbe:	2302      	movs	r3, #2
 8010bc0:	e168      	b.n	8010e94 <HAL_SPI_Receive+0x32c>
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2201      	movs	r2, #1
 8010bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010bca:	f7f6 f861 	bl	8006c90 <HAL_GetTick>
 8010bce:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	d007      	beq.n	8010bec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8010bdc:	2302      	movs	r3, #2
 8010bde:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	2200      	movs	r2, #0
 8010be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010be8:	7ffb      	ldrb	r3, [r7, #31]
 8010bea:	e153      	b.n	8010e94 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d002      	beq.n	8010bf8 <HAL_SPI_Receive+0x90>
 8010bf2:	88fb      	ldrh	r3, [r7, #6]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d107      	bne.n	8010c08 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010c04:	7ffb      	ldrb	r3, [r7, #31]
 8010c06:	e145      	b.n	8010e94 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2204      	movs	r2, #4
 8010c0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2200      	movs	r2, #0
 8010c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	68ba      	ldr	r2, [r7, #8]
 8010c1c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	88fa      	ldrh	r2, [r7, #6]
 8010c22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	88fa      	ldrh	r2, [r7, #6]
 8010c2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	2200      	movs	r2, #0
 8010c32:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2200      	movs	r2, #0
 8010c40:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2200      	movs	r2, #0
 8010c48:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	689b      	ldr	r3, [r3, #8]
 8010c54:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8010c58:	d107      	bne.n	8010c6a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	681a      	ldr	r2, [r3, #0]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010c68:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	685a      	ldr	r2, [r3, #4]
 8010c70:	4b8a      	ldr	r3, [pc, #552]	; (8010e9c <HAL_SPI_Receive+0x334>)
 8010c72:	4013      	ands	r3, r2
 8010c74:	88f9      	ldrh	r1, [r7, #6]
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	6812      	ldr	r2, [r2, #0]
 8010c7a:	430b      	orrs	r3, r1
 8010c7c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	681a      	ldr	r2, [r3, #0]
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	f042 0201 	orr.w	r2, r2, #1
 8010c8c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	685b      	ldr	r3, [r3, #4]
 8010c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010c96:	d107      	bne.n	8010ca8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	681a      	ldr	r2, [r3, #0]
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010ca6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	2b0f      	cmp	r3, #15
 8010cae:	d948      	bls.n	8010d42 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010cb0:	e040      	b.n	8010d34 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	695a      	ldr	r2, [r3, #20]
 8010cb8:	f248 0308 	movw	r3, #32776	; 0x8008
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d014      	beq.n	8010cec <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681a      	ldr	r2, [r3, #0]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010cca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010ccc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010cd2:	1d1a      	adds	r2, r3, #4
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	3b01      	subs	r3, #1
 8010ce2:	b29a      	uxth	r2, r3
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010cea:	e023      	b.n	8010d34 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010cec:	f7f5 ffd0 	bl	8006c90 <HAL_GetTick>
 8010cf0:	4602      	mov	r2, r0
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	1ad3      	subs	r3, r2, r3
 8010cf6:	683a      	ldr	r2, [r7, #0]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d803      	bhi.n	8010d04 <HAL_SPI_Receive+0x19c>
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d02:	d102      	bne.n	8010d0a <HAL_SPI_Receive+0x1a2>
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d114      	bne.n	8010d34 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010d0a:	68f8      	ldr	r0, [r7, #12]
 8010d0c:	f000 faf0 	bl	80112f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	2200      	movs	r2, #0
 8010d14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010d30:	2303      	movs	r3, #3
 8010d32:	e0af      	b.n	8010e94 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d3a:	b29b      	uxth	r3, r3
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d1b8      	bne.n	8010cb2 <HAL_SPI_Receive+0x14a>
 8010d40:	e095      	b.n	8010e6e <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	68db      	ldr	r3, [r3, #12]
 8010d46:	2b07      	cmp	r3, #7
 8010d48:	f240 808b 	bls.w	8010e62 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8010d4c:	e03f      	b.n	8010dce <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	695b      	ldr	r3, [r3, #20]
 8010d54:	f003 0301 	and.w	r3, r3, #1
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d114      	bne.n	8010d86 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d60:	69ba      	ldr	r2, [r7, #24]
 8010d62:	8812      	ldrh	r2, [r2, #0]
 8010d64:	b292      	uxth	r2, r2
 8010d66:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d6c:	1c9a      	adds	r2, r3, #2
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	3b01      	subs	r3, #1
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010d84:	e023      	b.n	8010dce <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010d86:	f7f5 ff83 	bl	8006c90 <HAL_GetTick>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	697b      	ldr	r3, [r7, #20]
 8010d8e:	1ad3      	subs	r3, r2, r3
 8010d90:	683a      	ldr	r2, [r7, #0]
 8010d92:	429a      	cmp	r2, r3
 8010d94:	d803      	bhi.n	8010d9e <HAL_SPI_Receive+0x236>
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9c:	d102      	bne.n	8010da4 <HAL_SPI_Receive+0x23c>
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d114      	bne.n	8010dce <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f000 faa3 	bl	80112f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2200      	movs	r2, #0
 8010dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010db8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	2201      	movs	r2, #1
 8010dc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010dca:	2303      	movs	r3, #3
 8010dcc:	e062      	b.n	8010e94 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d1b9      	bne.n	8010d4e <HAL_SPI_Receive+0x1e6>
 8010dda:	e048      	b.n	8010e6e <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	695b      	ldr	r3, [r3, #20]
 8010de2:	f003 0301 	and.w	r3, r3, #1
 8010de6:	2b01      	cmp	r3, #1
 8010de8:	d117      	bne.n	8010e1a <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010df6:	7812      	ldrb	r2, [r2, #0]
 8010df8:	b2d2      	uxtb	r2, r2
 8010dfa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010e00:	1c5a      	adds	r2, r3, #1
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e0c:	b29b      	uxth	r3, r3
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	b29a      	uxth	r2, r3
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010e18:	e023      	b.n	8010e62 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8010e1a:	f7f5 ff39 	bl	8006c90 <HAL_GetTick>
 8010e1e:	4602      	mov	r2, r0
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	1ad3      	subs	r3, r2, r3
 8010e24:	683a      	ldr	r2, [r7, #0]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d803      	bhi.n	8010e32 <HAL_SPI_Receive+0x2ca>
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e30:	d102      	bne.n	8010e38 <HAL_SPI_Receive+0x2d0>
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d114      	bne.n	8010e62 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010e38:	68f8      	ldr	r0, [r7, #12]
 8010e3a:	f000 fa59 	bl	80112f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2201      	movs	r2, #1
 8010e5a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010e5e:	2303      	movs	r3, #3
 8010e60:	e018      	b.n	8010e94 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010e68:	b29b      	uxth	r3, r3
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d1b6      	bne.n	8010ddc <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010e6e:	68f8      	ldr	r0, [r7, #12]
 8010e70:	f000 fa3e 	bl	80112f0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2200      	movs	r2, #0
 8010e78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	2201      	movs	r2, #1
 8010e80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d001      	beq.n	8010e92 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8010e8e:	2301      	movs	r3, #1
 8010e90:	e000      	b.n	8010e94 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8010e92:	7ffb      	ldrb	r3, [r7, #31]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	3720      	adds	r7, #32
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bd80      	pop	{r7, pc}
 8010e9c:	ffff0000 	.word	0xffff0000

08010ea0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b08e      	sub	sp, #56	; 0x38
 8010ea4:	af02      	add	r7, sp, #8
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
 8010eac:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8010eae:	2300      	movs	r3, #0
 8010eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	3320      	adds	r3, #32
 8010eba:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	3330      	adds	r3, #48	; 0x30
 8010ec2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010eca:	2b01      	cmp	r3, #1
 8010ecc:	d101      	bne.n	8010ed2 <HAL_SPI_TransmitReceive+0x32>
 8010ece:	2302      	movs	r3, #2
 8010ed0:	e209      	b.n	80112e6 <HAL_SPI_TransmitReceive+0x446>
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2201      	movs	r2, #1
 8010ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8010eda:	f7f5 fed9 	bl	8006c90 <HAL_GetTick>
 8010ede:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8010ee0:	887b      	ldrh	r3, [r7, #2]
 8010ee2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8010ee4:	887b      	ldrh	r3, [r7, #2]
 8010ee6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010eee:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010ef6:	7efb      	ldrb	r3, [r7, #27]
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	d014      	beq.n	8010f26 <HAL_SPI_TransmitReceive+0x86>
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010f02:	d106      	bne.n	8010f12 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d102      	bne.n	8010f12 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8010f0c:	7efb      	ldrb	r3, [r7, #27]
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	d009      	beq.n	8010f26 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8010f12:	2302      	movs	r3, #2
 8010f14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010f20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010f24:	e1df      	b.n	80112e6 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d005      	beq.n	8010f38 <HAL_SPI_TransmitReceive+0x98>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d002      	beq.n	8010f38 <HAL_SPI_TransmitReceive+0x98>
 8010f32:	887b      	ldrh	r3, [r7, #2]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d109      	bne.n	8010f4c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8010f38:	2301      	movs	r3, #1
 8010f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	2200      	movs	r2, #0
 8010f42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8010f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010f4a:	e1cc      	b.n	80112e6 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	2b04      	cmp	r3, #4
 8010f56:	d003      	beq.n	8010f60 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2205      	movs	r2, #5
 8010f5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	2200      	movs	r2, #0
 8010f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	687a      	ldr	r2, [r7, #4]
 8010f6c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	887a      	ldrh	r2, [r7, #2]
 8010f72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	887a      	ldrh	r2, [r7, #2]
 8010f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	68ba      	ldr	r2, [r7, #8]
 8010f82:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	887a      	ldrh	r2, [r7, #2]
 8010f88:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	887a      	ldrh	r2, [r7, #2]
 8010f90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2200      	movs	r2, #0
 8010f98:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	685a      	ldr	r2, [r3, #4]
 8010fa6:	4b82      	ldr	r3, [pc, #520]	; (80111b0 <HAL_SPI_TransmitReceive+0x310>)
 8010fa8:	4013      	ands	r3, r2
 8010faa:	8879      	ldrh	r1, [r7, #2]
 8010fac:	68fa      	ldr	r2, [r7, #12]
 8010fae:	6812      	ldr	r2, [r2, #0]
 8010fb0:	430b      	orrs	r3, r1
 8010fb2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	f042 0201 	orr.w	r2, r2, #1
 8010fc2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	685b      	ldr	r3, [r3, #4]
 8010fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010fcc:	d107      	bne.n	8010fde <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010fdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	2b0f      	cmp	r3, #15
 8010fe4:	d970      	bls.n	80110c8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8010fe6:	e068      	b.n	80110ba <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	695b      	ldr	r3, [r3, #20]
 8010fee:	f003 0302 	and.w	r3, r3, #2
 8010ff2:	2b02      	cmp	r3, #2
 8010ff4:	d11a      	bne.n	801102c <HAL_SPI_TransmitReceive+0x18c>
 8010ff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d017      	beq.n	801102c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	6812      	ldr	r2, [r2, #0]
 8011006:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801100c:	1d1a      	adds	r2, r3, #4
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011018:	b29b      	uxth	r3, r3
 801101a:	3b01      	subs	r3, #1
 801101c:	b29a      	uxth	r2, r3
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801102a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	695a      	ldr	r2, [r3, #20]
 8011032:	f248 0308 	movw	r3, #32776	; 0x8008
 8011036:	4013      	ands	r3, r2
 8011038:	2b00      	cmp	r3, #0
 801103a:	d01a      	beq.n	8011072 <HAL_SPI_TransmitReceive+0x1d2>
 801103c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801103e:	2b00      	cmp	r3, #0
 8011040:	d017      	beq.n	8011072 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681a      	ldr	r2, [r3, #0]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801104a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801104c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011052:	1d1a      	adds	r2, r3, #4
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801105e:	b29b      	uxth	r3, r3
 8011060:	3b01      	subs	r3, #1
 8011062:	b29a      	uxth	r2, r3
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011070:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011072:	f7f5 fe0d 	bl	8006c90 <HAL_GetTick>
 8011076:	4602      	mov	r2, r0
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	1ad3      	subs	r3, r2, r3
 801107c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801107e:	429a      	cmp	r2, r3
 8011080:	d803      	bhi.n	801108a <HAL_SPI_TransmitReceive+0x1ea>
 8011082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011088:	d102      	bne.n	8011090 <HAL_SPI_TransmitReceive+0x1f0>
 801108a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801108c:	2b00      	cmp	r3, #0
 801108e:	d114      	bne.n	80110ba <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8011090:	68f8      	ldr	r0, [r7, #12]
 8011092:	f000 f92d 	bl	80112f0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2200      	movs	r2, #0
 801109a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	2201      	movs	r2, #1
 80110b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 80110b6:	2303      	movs	r3, #3
 80110b8:	e115      	b.n	80112e6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80110ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d193      	bne.n	8010fe8 <HAL_SPI_TransmitReceive+0x148>
 80110c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d190      	bne.n	8010fe8 <HAL_SPI_TransmitReceive+0x148>
 80110c6:	e0e7      	b.n	8011298 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	68db      	ldr	r3, [r3, #12]
 80110cc:	2b07      	cmp	r3, #7
 80110ce:	f240 80dd 	bls.w	801128c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80110d2:	e066      	b.n	80111a2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	695b      	ldr	r3, [r3, #20]
 80110da:	f003 0302 	and.w	r3, r3, #2
 80110de:	2b02      	cmp	r3, #2
 80110e0:	d119      	bne.n	8011116 <HAL_SPI_TransmitReceive+0x276>
 80110e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d016      	beq.n	8011116 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110ec:	881a      	ldrh	r2, [r3, #0]
 80110ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80110f6:	1c9a      	adds	r2, r3, #2
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011102:	b29b      	uxth	r3, r3
 8011104:	3b01      	subs	r3, #1
 8011106:	b29a      	uxth	r2, r3
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011114:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	695b      	ldr	r3, [r3, #20]
 801111c:	f003 0301 	and.w	r3, r3, #1
 8011120:	2b01      	cmp	r3, #1
 8011122:	d11a      	bne.n	801115a <HAL_SPI_TransmitReceive+0x2ba>
 8011124:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011126:	2b00      	cmp	r3, #0
 8011128:	d017      	beq.n	801115a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801112e:	6a3a      	ldr	r2, [r7, #32]
 8011130:	8812      	ldrh	r2, [r2, #0]
 8011132:	b292      	uxth	r2, r2
 8011134:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801113a:	1c9a      	adds	r2, r3, #2
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011146:	b29b      	uxth	r3, r3
 8011148:	3b01      	subs	r3, #1
 801114a:	b29a      	uxth	r2, r3
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011158:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801115a:	f7f5 fd99 	bl	8006c90 <HAL_GetTick>
 801115e:	4602      	mov	r2, r0
 8011160:	69fb      	ldr	r3, [r7, #28]
 8011162:	1ad3      	subs	r3, r2, r3
 8011164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011166:	429a      	cmp	r2, r3
 8011168:	d803      	bhi.n	8011172 <HAL_SPI_TransmitReceive+0x2d2>
 801116a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011170:	d102      	bne.n	8011178 <HAL_SPI_TransmitReceive+0x2d8>
 8011172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011174:	2b00      	cmp	r3, #0
 8011176:	d114      	bne.n	80111a2 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8011178:	68f8      	ldr	r0, [r7, #12]
 801117a:	f000 f8b9 	bl	80112f0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	2200      	movs	r2, #0
 8011182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801118c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	2201      	movs	r2, #1
 801119a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 801119e:	2303      	movs	r3, #3
 80111a0:	e0a1      	b.n	80112e6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80111a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d195      	bne.n	80110d4 <HAL_SPI_TransmitReceive+0x234>
 80111a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d192      	bne.n	80110d4 <HAL_SPI_TransmitReceive+0x234>
 80111ae:	e073      	b.n	8011298 <HAL_SPI_TransmitReceive+0x3f8>
 80111b0:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	695b      	ldr	r3, [r3, #20]
 80111ba:	f003 0302 	and.w	r3, r3, #2
 80111be:	2b02      	cmp	r3, #2
 80111c0:	d11b      	bne.n	80111fa <HAL_SPI_TransmitReceive+0x35a>
 80111c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d018      	beq.n	80111fa <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	3320      	adds	r3, #32
 80111d2:	7812      	ldrb	r2, [r2, #0]
 80111d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80111da:	1c5a      	adds	r2, r3, #1
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	3b01      	subs	r3, #1
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80111f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	695b      	ldr	r3, [r3, #20]
 8011200:	f003 0301 	and.w	r3, r3, #1
 8011204:	2b01      	cmp	r3, #1
 8011206:	d11d      	bne.n	8011244 <HAL_SPI_TransmitReceive+0x3a4>
 8011208:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801120a:	2b00      	cmp	r3, #0
 801120c:	d01a      	beq.n	8011244 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801121a:	7812      	ldrb	r2, [r2, #0]
 801121c:	b2d2      	uxtb	r2, r2
 801121e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011224:	1c5a      	adds	r2, r3, #1
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011230:	b29b      	uxth	r3, r3
 8011232:	3b01      	subs	r3, #1
 8011234:	b29a      	uxth	r2, r3
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011242:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011244:	f7f5 fd24 	bl	8006c90 <HAL_GetTick>
 8011248:	4602      	mov	r2, r0
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	1ad3      	subs	r3, r2, r3
 801124e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011250:	429a      	cmp	r2, r3
 8011252:	d803      	bhi.n	801125c <HAL_SPI_TransmitReceive+0x3bc>
 8011254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011256:	f1b3 3fff 	cmp.w	r3, #4294967295
 801125a:	d102      	bne.n	8011262 <HAL_SPI_TransmitReceive+0x3c2>
 801125c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125e:	2b00      	cmp	r3, #0
 8011260:	d114      	bne.n	801128c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8011262:	68f8      	ldr	r0, [r7, #12]
 8011264:	f000 f844 	bl	80112f0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2200      	movs	r2, #0
 801126c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011276:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	2201      	movs	r2, #1
 8011284:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8011288:	2303      	movs	r3, #3
 801128a:	e02c      	b.n	80112e6 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801128c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801128e:	2b00      	cmp	r3, #0
 8011290:	d190      	bne.n	80111b4 <HAL_SPI_TransmitReceive+0x314>
 8011292:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011294:	2b00      	cmp	r3, #0
 8011296:	d18d      	bne.n	80111b4 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8011298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129a:	9300      	str	r3, [sp, #0]
 801129c:	69fb      	ldr	r3, [r7, #28]
 801129e:	2200      	movs	r2, #0
 80112a0:	2108      	movs	r1, #8
 80112a2:	68f8      	ldr	r0, [r7, #12]
 80112a4:	f000 f8c4 	bl	8011430 <SPI_WaitOnFlagUntilTimeout>
 80112a8:	4603      	mov	r3, r0
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d007      	beq.n	80112be <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112b4:	f043 0220 	orr.w	r2, r3, #32
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f000 f816 	bl	80112f0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2200      	movs	r2, #0
 80112c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2201      	movs	r2, #1
 80112d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d001      	beq.n	80112e2 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80112de:	2301      	movs	r3, #1
 80112e0:	e001      	b.n	80112e6 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80112e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3730      	adds	r7, #48	; 0x30
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}
 80112ee:	bf00      	nop

080112f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b085      	sub	sp, #20
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	695b      	ldr	r3, [r3, #20]
 80112fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	699a      	ldr	r2, [r3, #24]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f042 0208 	orr.w	r2, r2, #8
 801130e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	699a      	ldr	r2, [r3, #24]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f042 0210 	orr.w	r2, r2, #16
 801131e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f022 0201 	bic.w	r2, r2, #1
 801132e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	6919      	ldr	r1, [r3, #16]
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681a      	ldr	r2, [r3, #0]
 801133a:	4b3c      	ldr	r3, [pc, #240]	; (801142c <SPI_CloseTransfer+0x13c>)
 801133c:	400b      	ands	r3, r1
 801133e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	689a      	ldr	r2, [r3, #8]
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801134e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b04      	cmp	r3, #4
 801135a:	d014      	beq.n	8011386 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	f003 0320 	and.w	r3, r3, #32
 8011362:	2b00      	cmp	r3, #0
 8011364:	d00f      	beq.n	8011386 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801136c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	699a      	ldr	r2, [r3, #24]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	f042 0220 	orr.w	r2, r2, #32
 8011384:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801138c:	b2db      	uxtb	r3, r3
 801138e:	2b03      	cmp	r3, #3
 8011390:	d014      	beq.n	80113bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00f      	beq.n	80113bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80113a2:	f043 0204 	orr.w	r2, r3, #4
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	699a      	ldr	r2, [r3, #24]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80113ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d00f      	beq.n	80113e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80113cc:	f043 0201 	orr.w	r2, r3, #1
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	699a      	ldr	r2, [r3, #24]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80113e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00f      	beq.n	8011410 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80113f6:	f043 0208 	orr.w	r2, r3, #8
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	699a      	ldr	r2, [r3, #24]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801140e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2200      	movs	r2, #0
 8011414:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	2200      	movs	r2, #0
 801141c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8011420:	bf00      	nop
 8011422:	3714      	adds	r7, #20
 8011424:	46bd      	mov	sp, r7
 8011426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142a:	4770      	bx	lr
 801142c:	fffffc90 	.word	0xfffffc90

08011430 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	603b      	str	r3, [r7, #0]
 801143c:	4613      	mov	r3, r2
 801143e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011440:	e010      	b.n	8011464 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011442:	f7f5 fc25 	bl	8006c90 <HAL_GetTick>
 8011446:	4602      	mov	r2, r0
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	1ad3      	subs	r3, r2, r3
 801144c:	69ba      	ldr	r2, [r7, #24]
 801144e:	429a      	cmp	r2, r3
 8011450:	d803      	bhi.n	801145a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8011452:	69bb      	ldr	r3, [r7, #24]
 8011454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011458:	d102      	bne.n	8011460 <SPI_WaitOnFlagUntilTimeout+0x30>
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d101      	bne.n	8011464 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8011460:	2303      	movs	r3, #3
 8011462:	e00f      	b.n	8011484 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	695a      	ldr	r2, [r3, #20]
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	4013      	ands	r3, r2
 801146e:	68ba      	ldr	r2, [r7, #8]
 8011470:	429a      	cmp	r2, r3
 8011472:	bf0c      	ite	eq
 8011474:	2301      	moveq	r3, #1
 8011476:	2300      	movne	r3, #0
 8011478:	b2db      	uxtb	r3, r3
 801147a:	461a      	mov	r2, r3
 801147c:	79fb      	ldrb	r3, [r7, #7]
 801147e:	429a      	cmp	r2, r3
 8011480:	d0df      	beq.n	8011442 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8011482:	2300      	movs	r3, #0
}
 8011484:	4618      	mov	r0, r3
 8011486:	3710      	adds	r7, #16
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}

0801148c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 801148c:	b480      	push	{r7}
 801148e:	b085      	sub	sp, #20
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011498:	095b      	lsrs	r3, r3, #5
 801149a:	3301      	adds	r3, #1
 801149c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	68db      	ldr	r3, [r3, #12]
 80114a2:	3301      	adds	r3, #1
 80114a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	3307      	adds	r3, #7
 80114aa:	08db      	lsrs	r3, r3, #3
 80114ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80114ae:	68bb      	ldr	r3, [r7, #8]
 80114b0:	68fa      	ldr	r2, [r7, #12]
 80114b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3714      	adds	r7, #20
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr

080114c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b082      	sub	sp, #8
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d101      	bne.n	80114d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80114d0:	2301      	movs	r3, #1
 80114d2:	e049      	b.n	8011568 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80114da:	b2db      	uxtb	r3, r3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d106      	bne.n	80114ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2200      	movs	r2, #0
 80114e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f7f4 fed3 	bl	8006294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2202      	movs	r2, #2
 80114f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	3304      	adds	r3, #4
 80114fe:	4619      	mov	r1, r3
 8011500:	4610      	mov	r0, r2
 8011502:	f000 ff17 	bl	8012334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2201      	movs	r2, #1
 801150a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2201      	movs	r2, #1
 8011512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2201      	movs	r2, #1
 801151a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	2201      	movs	r2, #1
 8011522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2201      	movs	r2, #1
 801152a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2201      	movs	r2, #1
 8011532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	2201      	movs	r2, #1
 801153a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2201      	movs	r2, #1
 8011542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2201      	movs	r2, #1
 801154a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2201      	movs	r2, #1
 8011552:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2201      	movs	r2, #1
 801155a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	2201      	movs	r2, #1
 8011562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011566:	2300      	movs	r3, #0
}
 8011568:	4618      	mov	r0, r3
 801156a:	3708      	adds	r7, #8
 801156c:	46bd      	mov	sp, r7
 801156e:	bd80      	pop	{r7, pc}

08011570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011570:	b480      	push	{r7}
 8011572:	b085      	sub	sp, #20
 8011574:	af00      	add	r7, sp, #0
 8011576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801157e:	b2db      	uxtb	r3, r3
 8011580:	2b01      	cmp	r3, #1
 8011582:	d001      	beq.n	8011588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011584:	2301      	movs	r3, #1
 8011586:	e05e      	b.n	8011646 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2202      	movs	r2, #2
 801158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	68da      	ldr	r2, [r3, #12]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	f042 0201 	orr.w	r2, r2, #1
 801159e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a2b      	ldr	r2, [pc, #172]	; (8011654 <HAL_TIM_Base_Start_IT+0xe4>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d02c      	beq.n	8011604 <HAL_TIM_Base_Start_IT+0x94>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115b2:	d027      	beq.n	8011604 <HAL_TIM_Base_Start_IT+0x94>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4a27      	ldr	r2, [pc, #156]	; (8011658 <HAL_TIM_Base_Start_IT+0xe8>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d022      	beq.n	8011604 <HAL_TIM_Base_Start_IT+0x94>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	4a26      	ldr	r2, [pc, #152]	; (801165c <HAL_TIM_Base_Start_IT+0xec>)
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d01d      	beq.n	8011604 <HAL_TIM_Base_Start_IT+0x94>
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	4a24      	ldr	r2, [pc, #144]	; (8011660 <HAL_TIM_Base_Start_IT+0xf0>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d018      	beq.n	8011604 <HAL_TIM_Base_Start_IT+0x94>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	4a23      	ldr	r2, [pc, #140]	; (8011664 <HAL_TIM_Base_Start_IT+0xf4>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d013      	beq.n	8011604 <HAL_TIM_Base_Start_IT+0x94>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	4a21      	ldr	r2, [pc, #132]	; (8011668 <HAL_TIM_Base_Start_IT+0xf8>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d00e      	beq.n	8011604 <HAL_TIM_Base_Start_IT+0x94>
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	4a20      	ldr	r2, [pc, #128]	; (801166c <HAL_TIM_Base_Start_IT+0xfc>)
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d009      	beq.n	8011604 <HAL_TIM_Base_Start_IT+0x94>
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	4a1e      	ldr	r2, [pc, #120]	; (8011670 <HAL_TIM_Base_Start_IT+0x100>)
 80115f6:	4293      	cmp	r3, r2
 80115f8:	d004      	beq.n	8011604 <HAL_TIM_Base_Start_IT+0x94>
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	4a1d      	ldr	r2, [pc, #116]	; (8011674 <HAL_TIM_Base_Start_IT+0x104>)
 8011600:	4293      	cmp	r3, r2
 8011602:	d115      	bne.n	8011630 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	689a      	ldr	r2, [r3, #8]
 801160a:	4b1b      	ldr	r3, [pc, #108]	; (8011678 <HAL_TIM_Base_Start_IT+0x108>)
 801160c:	4013      	ands	r3, r2
 801160e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2b06      	cmp	r3, #6
 8011614:	d015      	beq.n	8011642 <HAL_TIM_Base_Start_IT+0xd2>
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801161c:	d011      	beq.n	8011642 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	681a      	ldr	r2, [r3, #0]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f042 0201 	orr.w	r2, r2, #1
 801162c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801162e:	e008      	b.n	8011642 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	f042 0201 	orr.w	r2, r2, #1
 801163e:	601a      	str	r2, [r3, #0]
 8011640:	e000      	b.n	8011644 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011642:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011644:	2300      	movs	r3, #0
}
 8011646:	4618      	mov	r0, r3
 8011648:	3714      	adds	r7, #20
 801164a:	46bd      	mov	sp, r7
 801164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011650:	4770      	bx	lr
 8011652:	bf00      	nop
 8011654:	40010000 	.word	0x40010000
 8011658:	40000400 	.word	0x40000400
 801165c:	40000800 	.word	0x40000800
 8011660:	40000c00 	.word	0x40000c00
 8011664:	40010400 	.word	0x40010400
 8011668:	40001800 	.word	0x40001800
 801166c:	40014000 	.word	0x40014000
 8011670:	4000e000 	.word	0x4000e000
 8011674:	4000e400 	.word	0x4000e400
 8011678:	00010007 	.word	0x00010007

0801167c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b082      	sub	sp, #8
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d101      	bne.n	801168e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801168a:	2301      	movs	r3, #1
 801168c:	e049      	b.n	8011722 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011694:	b2db      	uxtb	r3, r3
 8011696:	2b00      	cmp	r3, #0
 8011698:	d106      	bne.n	80116a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2200      	movs	r2, #0
 801169e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	f7f4 fc88 	bl	8005fb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2202      	movs	r2, #2
 80116ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	3304      	adds	r3, #4
 80116b8:	4619      	mov	r1, r3
 80116ba:	4610      	mov	r0, r2
 80116bc:	f000 fe3a 	bl	8012334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2201      	movs	r2, #1
 80116c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2201      	movs	r2, #1
 80116cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2201      	movs	r2, #1
 80116d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2201      	movs	r2, #1
 80116dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2201      	movs	r2, #1
 80116e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	2201      	movs	r2, #1
 80116ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	2201      	movs	r2, #1
 80116f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2201      	movs	r2, #1
 80116fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2201      	movs	r2, #1
 8011704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2201      	movs	r2, #1
 801170c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2201      	movs	r2, #1
 8011714:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2201      	movs	r2, #1
 801171c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011720:	2300      	movs	r3, #0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
	...

0801172c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b084      	sub	sp, #16
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d109      	bne.n	8011750 <HAL_TIM_PWM_Start+0x24>
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011742:	b2db      	uxtb	r3, r3
 8011744:	2b01      	cmp	r3, #1
 8011746:	bf14      	ite	ne
 8011748:	2301      	movne	r3, #1
 801174a:	2300      	moveq	r3, #0
 801174c:	b2db      	uxtb	r3, r3
 801174e:	e03c      	b.n	80117ca <HAL_TIM_PWM_Start+0x9e>
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	2b04      	cmp	r3, #4
 8011754:	d109      	bne.n	801176a <HAL_TIM_PWM_Start+0x3e>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801175c:	b2db      	uxtb	r3, r3
 801175e:	2b01      	cmp	r3, #1
 8011760:	bf14      	ite	ne
 8011762:	2301      	movne	r3, #1
 8011764:	2300      	moveq	r3, #0
 8011766:	b2db      	uxtb	r3, r3
 8011768:	e02f      	b.n	80117ca <HAL_TIM_PWM_Start+0x9e>
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	2b08      	cmp	r3, #8
 801176e:	d109      	bne.n	8011784 <HAL_TIM_PWM_Start+0x58>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011776:	b2db      	uxtb	r3, r3
 8011778:	2b01      	cmp	r3, #1
 801177a:	bf14      	ite	ne
 801177c:	2301      	movne	r3, #1
 801177e:	2300      	moveq	r3, #0
 8011780:	b2db      	uxtb	r3, r3
 8011782:	e022      	b.n	80117ca <HAL_TIM_PWM_Start+0x9e>
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	2b0c      	cmp	r3, #12
 8011788:	d109      	bne.n	801179e <HAL_TIM_PWM_Start+0x72>
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011790:	b2db      	uxtb	r3, r3
 8011792:	2b01      	cmp	r3, #1
 8011794:	bf14      	ite	ne
 8011796:	2301      	movne	r3, #1
 8011798:	2300      	moveq	r3, #0
 801179a:	b2db      	uxtb	r3, r3
 801179c:	e015      	b.n	80117ca <HAL_TIM_PWM_Start+0x9e>
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	2b10      	cmp	r3, #16
 80117a2:	d109      	bne.n	80117b8 <HAL_TIM_PWM_Start+0x8c>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117aa:	b2db      	uxtb	r3, r3
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	bf14      	ite	ne
 80117b0:	2301      	movne	r3, #1
 80117b2:	2300      	moveq	r3, #0
 80117b4:	b2db      	uxtb	r3, r3
 80117b6:	e008      	b.n	80117ca <HAL_TIM_PWM_Start+0x9e>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80117be:	b2db      	uxtb	r3, r3
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	bf14      	ite	ne
 80117c4:	2301      	movne	r3, #1
 80117c6:	2300      	moveq	r3, #0
 80117c8:	b2db      	uxtb	r3, r3
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d001      	beq.n	80117d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80117ce:	2301      	movs	r3, #1
 80117d0:	e0ab      	b.n	801192a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d104      	bne.n	80117e2 <HAL_TIM_PWM_Start+0xb6>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2202      	movs	r2, #2
 80117dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80117e0:	e023      	b.n	801182a <HAL_TIM_PWM_Start+0xfe>
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	2b04      	cmp	r3, #4
 80117e6:	d104      	bne.n	80117f2 <HAL_TIM_PWM_Start+0xc6>
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2202      	movs	r2, #2
 80117ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80117f0:	e01b      	b.n	801182a <HAL_TIM_PWM_Start+0xfe>
 80117f2:	683b      	ldr	r3, [r7, #0]
 80117f4:	2b08      	cmp	r3, #8
 80117f6:	d104      	bne.n	8011802 <HAL_TIM_PWM_Start+0xd6>
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2202      	movs	r2, #2
 80117fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011800:	e013      	b.n	801182a <HAL_TIM_PWM_Start+0xfe>
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	2b0c      	cmp	r3, #12
 8011806:	d104      	bne.n	8011812 <HAL_TIM_PWM_Start+0xe6>
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	2202      	movs	r2, #2
 801180c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011810:	e00b      	b.n	801182a <HAL_TIM_PWM_Start+0xfe>
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	2b10      	cmp	r3, #16
 8011816:	d104      	bne.n	8011822 <HAL_TIM_PWM_Start+0xf6>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2202      	movs	r2, #2
 801181c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011820:	e003      	b.n	801182a <HAL_TIM_PWM_Start+0xfe>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	2202      	movs	r2, #2
 8011826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	2201      	movs	r2, #1
 8011830:	6839      	ldr	r1, [r7, #0]
 8011832:	4618      	mov	r0, r3
 8011834:	f001 f998 	bl	8012b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4a3d      	ldr	r2, [pc, #244]	; (8011934 <HAL_TIM_PWM_Start+0x208>)
 801183e:	4293      	cmp	r3, r2
 8011840:	d013      	beq.n	801186a <HAL_TIM_PWM_Start+0x13e>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	4a3c      	ldr	r2, [pc, #240]	; (8011938 <HAL_TIM_PWM_Start+0x20c>)
 8011848:	4293      	cmp	r3, r2
 801184a:	d00e      	beq.n	801186a <HAL_TIM_PWM_Start+0x13e>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	4a3a      	ldr	r2, [pc, #232]	; (801193c <HAL_TIM_PWM_Start+0x210>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d009      	beq.n	801186a <HAL_TIM_PWM_Start+0x13e>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	4a39      	ldr	r2, [pc, #228]	; (8011940 <HAL_TIM_PWM_Start+0x214>)
 801185c:	4293      	cmp	r3, r2
 801185e:	d004      	beq.n	801186a <HAL_TIM_PWM_Start+0x13e>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4a37      	ldr	r2, [pc, #220]	; (8011944 <HAL_TIM_PWM_Start+0x218>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d101      	bne.n	801186e <HAL_TIM_PWM_Start+0x142>
 801186a:	2301      	movs	r3, #1
 801186c:	e000      	b.n	8011870 <HAL_TIM_PWM_Start+0x144>
 801186e:	2300      	movs	r3, #0
 8011870:	2b00      	cmp	r3, #0
 8011872:	d007      	beq.n	8011884 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011882:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4a2a      	ldr	r2, [pc, #168]	; (8011934 <HAL_TIM_PWM_Start+0x208>)
 801188a:	4293      	cmp	r3, r2
 801188c:	d02c      	beq.n	80118e8 <HAL_TIM_PWM_Start+0x1bc>
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011896:	d027      	beq.n	80118e8 <HAL_TIM_PWM_Start+0x1bc>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	4a2a      	ldr	r2, [pc, #168]	; (8011948 <HAL_TIM_PWM_Start+0x21c>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d022      	beq.n	80118e8 <HAL_TIM_PWM_Start+0x1bc>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	4a29      	ldr	r2, [pc, #164]	; (801194c <HAL_TIM_PWM_Start+0x220>)
 80118a8:	4293      	cmp	r3, r2
 80118aa:	d01d      	beq.n	80118e8 <HAL_TIM_PWM_Start+0x1bc>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	4a27      	ldr	r2, [pc, #156]	; (8011950 <HAL_TIM_PWM_Start+0x224>)
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d018      	beq.n	80118e8 <HAL_TIM_PWM_Start+0x1bc>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	4a1f      	ldr	r2, [pc, #124]	; (8011938 <HAL_TIM_PWM_Start+0x20c>)
 80118bc:	4293      	cmp	r3, r2
 80118be:	d013      	beq.n	80118e8 <HAL_TIM_PWM_Start+0x1bc>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4a23      	ldr	r2, [pc, #140]	; (8011954 <HAL_TIM_PWM_Start+0x228>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d00e      	beq.n	80118e8 <HAL_TIM_PWM_Start+0x1bc>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	4a1b      	ldr	r2, [pc, #108]	; (801193c <HAL_TIM_PWM_Start+0x210>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d009      	beq.n	80118e8 <HAL_TIM_PWM_Start+0x1bc>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	4a1f      	ldr	r2, [pc, #124]	; (8011958 <HAL_TIM_PWM_Start+0x22c>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d004      	beq.n	80118e8 <HAL_TIM_PWM_Start+0x1bc>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	4a1e      	ldr	r2, [pc, #120]	; (801195c <HAL_TIM_PWM_Start+0x230>)
 80118e4:	4293      	cmp	r3, r2
 80118e6:	d115      	bne.n	8011914 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	689a      	ldr	r2, [r3, #8]
 80118ee:	4b1c      	ldr	r3, [pc, #112]	; (8011960 <HAL_TIM_PWM_Start+0x234>)
 80118f0:	4013      	ands	r3, r2
 80118f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2b06      	cmp	r3, #6
 80118f8:	d015      	beq.n	8011926 <HAL_TIM_PWM_Start+0x1fa>
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011900:	d011      	beq.n	8011926 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	681a      	ldr	r2, [r3, #0]
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	f042 0201 	orr.w	r2, r2, #1
 8011910:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011912:	e008      	b.n	8011926 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f042 0201 	orr.w	r2, r2, #1
 8011922:	601a      	str	r2, [r3, #0]
 8011924:	e000      	b.n	8011928 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011926:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8011928:	2300      	movs	r3, #0
}
 801192a:	4618      	mov	r0, r3
 801192c:	3710      	adds	r7, #16
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	40010000 	.word	0x40010000
 8011938:	40010400 	.word	0x40010400
 801193c:	40014000 	.word	0x40014000
 8011940:	40014400 	.word	0x40014400
 8011944:	40014800 	.word	0x40014800
 8011948:	40000400 	.word	0x40000400
 801194c:	40000800 	.word	0x40000800
 8011950:	40000c00 	.word	0x40000c00
 8011954:	40001800 	.word	0x40001800
 8011958:	4000e000 	.word	0x4000e000
 801195c:	4000e400 	.word	0x4000e400
 8011960:	00010007 	.word	0x00010007

08011964 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801196e:	2300      	movs	r3, #0
 8011970:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8011972:	683b      	ldr	r3, [r7, #0]
 8011974:	2b0c      	cmp	r3, #12
 8011976:	d855      	bhi.n	8011a24 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8011978:	a201      	add	r2, pc, #4	; (adr r2, 8011980 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 801197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801197e:	bf00      	nop
 8011980:	080119b5 	.word	0x080119b5
 8011984:	08011a25 	.word	0x08011a25
 8011988:	08011a25 	.word	0x08011a25
 801198c:	08011a25 	.word	0x08011a25
 8011990:	080119d1 	.word	0x080119d1
 8011994:	08011a25 	.word	0x08011a25
 8011998:	08011a25 	.word	0x08011a25
 801199c:	08011a25 	.word	0x08011a25
 80119a0:	080119ed 	.word	0x080119ed
 80119a4:	08011a25 	.word	0x08011a25
 80119a8:	08011a25 	.word	0x08011a25
 80119ac:	08011a25 	.word	0x08011a25
 80119b0:	08011a09 	.word	0x08011a09
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	68da      	ldr	r2, [r3, #12]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80119c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7f8 fc65 	bl	800a298 <HAL_DMA_Abort_IT>
      break;
 80119ce:	e02c      	b.n	8011a2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	68da      	ldr	r2, [r3, #12]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80119de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7f8 fc57 	bl	800a298 <HAL_DMA_Abort_IT>
      break;
 80119ea:	e01e      	b.n	8011a2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	68da      	ldr	r2, [r3, #12]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80119fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7f8 fc49 	bl	800a298 <HAL_DMA_Abort_IT>
      break;
 8011a06:	e010      	b.n	8011a2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	68da      	ldr	r2, [r3, #12]
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8011a16:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7f8 fc3b 	bl	800a298 <HAL_DMA_Abort_IT>
      break;
 8011a22:	e002      	b.n	8011a2a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8011a24:	2301      	movs	r3, #1
 8011a26:	73fb      	strb	r3, [r7, #15]
      break;
 8011a28:	bf00      	nop
  }

  if (status == HAL_OK)
 8011a2a:	7bfb      	ldrb	r3, [r7, #15]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f040 8081 	bne.w	8011b34 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	2200      	movs	r2, #0
 8011a38:	6839      	ldr	r1, [r7, #0]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f001 f894 	bl	8012b68 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	4a3e      	ldr	r2, [pc, #248]	; (8011b40 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d013      	beq.n	8011a72 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	4a3d      	ldr	r2, [pc, #244]	; (8011b44 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d00e      	beq.n	8011a72 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4a3b      	ldr	r2, [pc, #236]	; (8011b48 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8011a5a:	4293      	cmp	r3, r2
 8011a5c:	d009      	beq.n	8011a72 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	4a3a      	ldr	r2, [pc, #232]	; (8011b4c <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8011a64:	4293      	cmp	r3, r2
 8011a66:	d004      	beq.n	8011a72 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4a38      	ldr	r2, [pc, #224]	; (8011b50 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d101      	bne.n	8011a76 <HAL_TIM_PWM_Stop_DMA+0x112>
 8011a72:	2301      	movs	r3, #1
 8011a74:	e000      	b.n	8011a78 <HAL_TIM_PWM_Stop_DMA+0x114>
 8011a76:	2300      	movs	r3, #0
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d017      	beq.n	8011aac <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	6a1a      	ldr	r2, [r3, #32]
 8011a82:	f241 1311 	movw	r3, #4369	; 0x1111
 8011a86:	4013      	ands	r3, r2
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d10f      	bne.n	8011aac <HAL_TIM_PWM_Stop_DMA+0x148>
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	6a1a      	ldr	r2, [r3, #32]
 8011a92:	f240 4344 	movw	r3, #1092	; 0x444
 8011a96:	4013      	ands	r3, r2
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d107      	bne.n	8011aac <HAL_TIM_PWM_Stop_DMA+0x148>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8011aaa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	6a1a      	ldr	r2, [r3, #32]
 8011ab2:	f241 1311 	movw	r3, #4369	; 0x1111
 8011ab6:	4013      	ands	r3, r2
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d10f      	bne.n	8011adc <HAL_TIM_PWM_Stop_DMA+0x178>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	6a1a      	ldr	r2, [r3, #32]
 8011ac2:	f240 4344 	movw	r3, #1092	; 0x444
 8011ac6:	4013      	ands	r3, r2
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d107      	bne.n	8011adc <HAL_TIM_PWM_Stop_DMA+0x178>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	f022 0201 	bic.w	r2, r2, #1
 8011ada:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d104      	bne.n	8011aec <HAL_TIM_PWM_Stop_DMA+0x188>
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2201      	movs	r2, #1
 8011ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011aea:	e023      	b.n	8011b34 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	2b04      	cmp	r3, #4
 8011af0:	d104      	bne.n	8011afc <HAL_TIM_PWM_Stop_DMA+0x198>
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	2201      	movs	r2, #1
 8011af6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011afa:	e01b      	b.n	8011b34 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	2b08      	cmp	r3, #8
 8011b00:	d104      	bne.n	8011b0c <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2201      	movs	r2, #1
 8011b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011b0a:	e013      	b.n	8011b34 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	2b0c      	cmp	r3, #12
 8011b10:	d104      	bne.n	8011b1c <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2201      	movs	r2, #1
 8011b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8011b1a:	e00b      	b.n	8011b34 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	2b10      	cmp	r3, #16
 8011b20:	d104      	bne.n	8011b2c <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2201      	movs	r2, #1
 8011b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011b2a:	e003      	b.n	8011b34 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2201      	movs	r2, #1
 8011b30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8011b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3710      	adds	r7, #16
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	40010000 	.word	0x40010000
 8011b44:	40010400 	.word	0x40010400
 8011b48:	40014000 	.word	0x40014000
 8011b4c:	40014400 	.word	0x40014400
 8011b50:	40014800 	.word	0x40014800

08011b54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b086      	sub	sp, #24
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d101      	bne.n	8011b68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011b64:	2301      	movs	r3, #1
 8011b66:	e08f      	b.n	8011c88 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011b6e:	b2db      	uxtb	r3, r3
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d106      	bne.n	8011b82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2200      	movs	r2, #0
 8011b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f7f4 faaf 	bl	80060e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2202      	movs	r2, #2
 8011b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	6899      	ldr	r1, [r3, #8]
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681a      	ldr	r2, [r3, #0]
 8011b94:	4b3e      	ldr	r3, [pc, #248]	; (8011c90 <HAL_TIM_Encoder_Init+0x13c>)
 8011b96:	400b      	ands	r3, r1
 8011b98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681a      	ldr	r2, [r3, #0]
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	4610      	mov	r0, r2
 8011ba6:	f000 fbc5 	bl	8012334 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	689b      	ldr	r3, [r3, #8]
 8011bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	699b      	ldr	r3, [r3, #24]
 8011bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	6a1b      	ldr	r3, [r3, #32]
 8011bc0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011bc2:	683b      	ldr	r3, [r7, #0]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	697a      	ldr	r2, [r7, #20]
 8011bc8:	4313      	orrs	r3, r2
 8011bca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011bcc:	693a      	ldr	r2, [r7, #16]
 8011bce:	4b31      	ldr	r3, [pc, #196]	; (8011c94 <HAL_TIM_Encoder_Init+0x140>)
 8011bd0:	4013      	ands	r3, r2
 8011bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	689a      	ldr	r2, [r3, #8]
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	699b      	ldr	r3, [r3, #24]
 8011bdc:	021b      	lsls	r3, r3, #8
 8011bde:	4313      	orrs	r3, r2
 8011be0:	693a      	ldr	r2, [r7, #16]
 8011be2:	4313      	orrs	r3, r2
 8011be4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011be6:	693a      	ldr	r2, [r7, #16]
 8011be8:	4b2b      	ldr	r3, [pc, #172]	; (8011c98 <HAL_TIM_Encoder_Init+0x144>)
 8011bea:	4013      	ands	r3, r2
 8011bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011bee:	693a      	ldr	r2, [r7, #16]
 8011bf0:	4b2a      	ldr	r3, [pc, #168]	; (8011c9c <HAL_TIM_Encoder_Init+0x148>)
 8011bf2:	4013      	ands	r3, r2
 8011bf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	68da      	ldr	r2, [r3, #12]
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	69db      	ldr	r3, [r3, #28]
 8011bfe:	021b      	lsls	r3, r3, #8
 8011c00:	4313      	orrs	r3, r2
 8011c02:	693a      	ldr	r2, [r7, #16]
 8011c04:	4313      	orrs	r3, r2
 8011c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011c08:	683b      	ldr	r3, [r7, #0]
 8011c0a:	691b      	ldr	r3, [r3, #16]
 8011c0c:	011a      	lsls	r2, r3, #4
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	6a1b      	ldr	r3, [r3, #32]
 8011c12:	031b      	lsls	r3, r3, #12
 8011c14:	4313      	orrs	r3, r2
 8011c16:	693a      	ldr	r2, [r7, #16]
 8011c18:	4313      	orrs	r3, r2
 8011c1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011c22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8011c2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	685a      	ldr	r2, [r3, #4]
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	695b      	ldr	r3, [r3, #20]
 8011c34:	011b      	lsls	r3, r3, #4
 8011c36:	4313      	orrs	r3, r2
 8011c38:	68fa      	ldr	r2, [r7, #12]
 8011c3a:	4313      	orrs	r3, r2
 8011c3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	697a      	ldr	r2, [r7, #20]
 8011c44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	693a      	ldr	r2, [r7, #16]
 8011c4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	68fa      	ldr	r2, [r7, #12]
 8011c54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2201      	movs	r2, #1
 8011c5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	2201      	movs	r2, #1
 8011c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	2201      	movs	r2, #1
 8011c6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2201      	movs	r2, #1
 8011c72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	2201      	movs	r2, #1
 8011c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2201      	movs	r2, #1
 8011c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011c86:	2300      	movs	r3, #0
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3718      	adds	r7, #24
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	fffebff8 	.word	0xfffebff8
 8011c94:	fffffcfc 	.word	0xfffffcfc
 8011c98:	fffff3f3 	.word	0xfffff3f3
 8011c9c:	ffff0f0f 	.word	0xffff0f0f

08011ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	691b      	ldr	r3, [r3, #16]
 8011cae:	f003 0302 	and.w	r3, r3, #2
 8011cb2:	2b02      	cmp	r3, #2
 8011cb4:	d122      	bne.n	8011cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	f003 0302 	and.w	r3, r3, #2
 8011cc0:	2b02      	cmp	r3, #2
 8011cc2:	d11b      	bne.n	8011cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	f06f 0202 	mvn.w	r2, #2
 8011ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	2201      	movs	r2, #1
 8011cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	699b      	ldr	r3, [r3, #24]
 8011cda:	f003 0303 	and.w	r3, r3, #3
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d003      	beq.n	8011cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8011ce2:	6878      	ldr	r0, [r7, #4]
 8011ce4:	f000 fb12 	bl	801230c <HAL_TIM_IC_CaptureCallback>
 8011ce8:	e005      	b.n	8011cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f000 fb04 	bl	80122f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7f1 fbb1 	bl	8003458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	691b      	ldr	r3, [r3, #16]
 8011d02:	f003 0304 	and.w	r3, r3, #4
 8011d06:	2b04      	cmp	r3, #4
 8011d08:	d122      	bne.n	8011d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	f003 0304 	and.w	r3, r3, #4
 8011d14:	2b04      	cmp	r3, #4
 8011d16:	d11b      	bne.n	8011d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	f06f 0204 	mvn.w	r2, #4
 8011d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	2202      	movs	r2, #2
 8011d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	699b      	ldr	r3, [r3, #24]
 8011d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d003      	beq.n	8011d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 fae8 	bl	801230c <HAL_TIM_IC_CaptureCallback>
 8011d3c:	e005      	b.n	8011d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f000 fada 	bl	80122f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f7f1 fb87 	bl	8003458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	691b      	ldr	r3, [r3, #16]
 8011d56:	f003 0308 	and.w	r3, r3, #8
 8011d5a:	2b08      	cmp	r3, #8
 8011d5c:	d122      	bne.n	8011da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	68db      	ldr	r3, [r3, #12]
 8011d64:	f003 0308 	and.w	r3, r3, #8
 8011d68:	2b08      	cmp	r3, #8
 8011d6a:	d11b      	bne.n	8011da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	f06f 0208 	mvn.w	r2, #8
 8011d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2204      	movs	r2, #4
 8011d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	69db      	ldr	r3, [r3, #28]
 8011d82:	f003 0303 	and.w	r3, r3, #3
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d003      	beq.n	8011d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f000 fabe 	bl	801230c <HAL_TIM_IC_CaptureCallback>
 8011d90:	e005      	b.n	8011d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f000 fab0 	bl	80122f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011d98:	6878      	ldr	r0, [r7, #4]
 8011d9a:	f7f1 fb5d 	bl	8003458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2200      	movs	r2, #0
 8011da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	691b      	ldr	r3, [r3, #16]
 8011daa:	f003 0310 	and.w	r3, r3, #16
 8011dae:	2b10      	cmp	r3, #16
 8011db0:	d122      	bne.n	8011df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	68db      	ldr	r3, [r3, #12]
 8011db8:	f003 0310 	and.w	r3, r3, #16
 8011dbc:	2b10      	cmp	r3, #16
 8011dbe:	d11b      	bne.n	8011df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f06f 0210 	mvn.w	r2, #16
 8011dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	2208      	movs	r2, #8
 8011dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	69db      	ldr	r3, [r3, #28]
 8011dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d003      	beq.n	8011de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f000 fa94 	bl	801230c <HAL_TIM_IC_CaptureCallback>
 8011de4:	e005      	b.n	8011df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f000 fa86 	bl	80122f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7f1 fb33 	bl	8003458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2200      	movs	r2, #0
 8011df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	691b      	ldr	r3, [r3, #16]
 8011dfe:	f003 0301 	and.w	r3, r3, #1
 8011e02:	2b01      	cmp	r3, #1
 8011e04:	d10e      	bne.n	8011e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	f003 0301 	and.w	r3, r3, #1
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d107      	bne.n	8011e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	f06f 0201 	mvn.w	r2, #1
 8011e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f7f1 fb6a 	bl	80034f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	691b      	ldr	r3, [r3, #16]
 8011e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e2e:	2b80      	cmp	r3, #128	; 0x80
 8011e30:	d10e      	bne.n	8011e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e3c:	2b80      	cmp	r3, #128	; 0x80
 8011e3e:	d107      	bne.n	8011e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f000 fff8 	bl	8012e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	691b      	ldr	r3, [r3, #16]
 8011e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e5e:	d10e      	bne.n	8011e7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e6a:	2b80      	cmp	r3, #128	; 0x80
 8011e6c:	d107      	bne.n	8011e7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f000 ffeb 	bl	8012e54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	691b      	ldr	r3, [r3, #16]
 8011e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e88:	2b40      	cmp	r3, #64	; 0x40
 8011e8a:	d10e      	bne.n	8011eaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	68db      	ldr	r3, [r3, #12]
 8011e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e96:	2b40      	cmp	r3, #64	; 0x40
 8011e98:	d107      	bne.n	8011eaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f000 fa3b 	bl	8012320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	691b      	ldr	r3, [r3, #16]
 8011eb0:	f003 0320 	and.w	r3, r3, #32
 8011eb4:	2b20      	cmp	r3, #32
 8011eb6:	d10e      	bne.n	8011ed6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	68db      	ldr	r3, [r3, #12]
 8011ebe:	f003 0320 	and.w	r3, r3, #32
 8011ec2:	2b20      	cmp	r3, #32
 8011ec4:	d107      	bne.n	8011ed6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	f06f 0220 	mvn.w	r2, #32
 8011ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f000 ffab 	bl	8012e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011ed6:	bf00      	nop
 8011ed8:	3708      	adds	r7, #8
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
	...

08011ee0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b086      	sub	sp, #24
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	60f8      	str	r0, [r7, #12]
 8011ee8:	60b9      	str	r1, [r7, #8]
 8011eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011eec:	2300      	movs	r3, #0
 8011eee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011ef6:	2b01      	cmp	r3, #1
 8011ef8:	d101      	bne.n	8011efe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011efa:	2302      	movs	r3, #2
 8011efc:	e0ff      	b.n	80120fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2201      	movs	r2, #1
 8011f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2b14      	cmp	r3, #20
 8011f0a:	f200 80f0 	bhi.w	80120ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 8011f0e:	a201      	add	r2, pc, #4	; (adr r2, 8011f14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8011f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f14:	08011f69 	.word	0x08011f69
 8011f18:	080120ef 	.word	0x080120ef
 8011f1c:	080120ef 	.word	0x080120ef
 8011f20:	080120ef 	.word	0x080120ef
 8011f24:	08011fa9 	.word	0x08011fa9
 8011f28:	080120ef 	.word	0x080120ef
 8011f2c:	080120ef 	.word	0x080120ef
 8011f30:	080120ef 	.word	0x080120ef
 8011f34:	08011feb 	.word	0x08011feb
 8011f38:	080120ef 	.word	0x080120ef
 8011f3c:	080120ef 	.word	0x080120ef
 8011f40:	080120ef 	.word	0x080120ef
 8011f44:	0801202b 	.word	0x0801202b
 8011f48:	080120ef 	.word	0x080120ef
 8011f4c:	080120ef 	.word	0x080120ef
 8011f50:	080120ef 	.word	0x080120ef
 8011f54:	0801206d 	.word	0x0801206d
 8011f58:	080120ef 	.word	0x080120ef
 8011f5c:	080120ef 	.word	0x080120ef
 8011f60:	080120ef 	.word	0x080120ef
 8011f64:	080120ad 	.word	0x080120ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	68b9      	ldr	r1, [r7, #8]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f000 fa86 	bl	8012480 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	699a      	ldr	r2, [r3, #24]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	f042 0208 	orr.w	r2, r2, #8
 8011f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	699a      	ldr	r2, [r3, #24]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f022 0204 	bic.w	r2, r2, #4
 8011f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	6999      	ldr	r1, [r3, #24]
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	691a      	ldr	r2, [r3, #16]
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	430a      	orrs	r2, r1
 8011fa4:	619a      	str	r2, [r3, #24]
      break;
 8011fa6:	e0a5      	b.n	80120f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	68b9      	ldr	r1, [r7, #8]
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f000 faf6 	bl	80125a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	699a      	ldr	r2, [r3, #24]
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	699a      	ldr	r2, [r3, #24]
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	6999      	ldr	r1, [r3, #24]
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	691b      	ldr	r3, [r3, #16]
 8011fde:	021a      	lsls	r2, r3, #8
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	430a      	orrs	r2, r1
 8011fe6:	619a      	str	r2, [r3, #24]
      break;
 8011fe8:	e084      	b.n	80120f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	68b9      	ldr	r1, [r7, #8]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f000 fb5f 	bl	80126b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	69da      	ldr	r2, [r3, #28]
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	f042 0208 	orr.w	r2, r2, #8
 8012004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	69da      	ldr	r2, [r3, #28]
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f022 0204 	bic.w	r2, r2, #4
 8012014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	69d9      	ldr	r1, [r3, #28]
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	691a      	ldr	r2, [r3, #16]
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	430a      	orrs	r2, r1
 8012026:	61da      	str	r2, [r3, #28]
      break;
 8012028:	e064      	b.n	80120f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	68b9      	ldr	r1, [r7, #8]
 8012030:	4618      	mov	r0, r3
 8012032:	f000 fbc7 	bl	80127c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	69da      	ldr	r2, [r3, #28]
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	69da      	ldr	r2, [r3, #28]
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	69d9      	ldr	r1, [r3, #28]
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	691b      	ldr	r3, [r3, #16]
 8012060:	021a      	lsls	r2, r3, #8
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	430a      	orrs	r2, r1
 8012068:	61da      	str	r2, [r3, #28]
      break;
 801206a:	e043      	b.n	80120f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	68b9      	ldr	r1, [r7, #8]
 8012072:	4618      	mov	r0, r3
 8012074:	f000 fc10 	bl	8012898 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f042 0208 	orr.w	r2, r2, #8
 8012086:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f022 0204 	bic.w	r2, r2, #4
 8012096:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	691a      	ldr	r2, [r3, #16]
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	430a      	orrs	r2, r1
 80120a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80120aa:	e023      	b.n	80120f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	68b9      	ldr	r1, [r7, #8]
 80120b2:	4618      	mov	r0, r3
 80120b4:	f000 fc54 	bl	8012960 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80120c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80120d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	691b      	ldr	r3, [r3, #16]
 80120e2:	021a      	lsls	r2, r3, #8
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	430a      	orrs	r2, r1
 80120ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80120ec:	e002      	b.n	80120f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80120ee:	2301      	movs	r3, #1
 80120f0:	75fb      	strb	r3, [r7, #23]
      break;
 80120f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	2200      	movs	r2, #0
 80120f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80120fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3718      	adds	r7, #24
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop

08012108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b084      	sub	sp, #16
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012112:	2300      	movs	r3, #0
 8012114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801211c:	2b01      	cmp	r3, #1
 801211e:	d101      	bne.n	8012124 <HAL_TIM_ConfigClockSource+0x1c>
 8012120:	2302      	movs	r3, #2
 8012122:	e0dc      	b.n	80122de <HAL_TIM_ConfigClockSource+0x1d6>
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2201      	movs	r2, #1
 8012128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2202      	movs	r2, #2
 8012130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	689b      	ldr	r3, [r3, #8]
 801213a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801213c:	68ba      	ldr	r2, [r7, #8]
 801213e:	4b6a      	ldr	r3, [pc, #424]	; (80122e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8012140:	4013      	ands	r3, r2
 8012142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801214a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	68ba      	ldr	r2, [r7, #8]
 8012152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	4a64      	ldr	r2, [pc, #400]	; (80122ec <HAL_TIM_ConfigClockSource+0x1e4>)
 801215a:	4293      	cmp	r3, r2
 801215c:	f000 80a9 	beq.w	80122b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8012160:	4a62      	ldr	r2, [pc, #392]	; (80122ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8012162:	4293      	cmp	r3, r2
 8012164:	f200 80ae 	bhi.w	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8012168:	4a61      	ldr	r2, [pc, #388]	; (80122f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801216a:	4293      	cmp	r3, r2
 801216c:	f000 80a1 	beq.w	80122b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8012170:	4a5f      	ldr	r2, [pc, #380]	; (80122f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8012172:	4293      	cmp	r3, r2
 8012174:	f200 80a6 	bhi.w	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8012178:	4a5e      	ldr	r2, [pc, #376]	; (80122f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801217a:	4293      	cmp	r3, r2
 801217c:	f000 8099 	beq.w	80122b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8012180:	4a5c      	ldr	r2, [pc, #368]	; (80122f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8012182:	4293      	cmp	r3, r2
 8012184:	f200 809e 	bhi.w	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8012188:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801218c:	f000 8091 	beq.w	80122b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8012190:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8012194:	f200 8096 	bhi.w	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8012198:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801219c:	f000 8089 	beq.w	80122b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80121a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80121a4:	f200 808e 	bhi.w	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80121a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80121ac:	d03e      	beq.n	801222c <HAL_TIM_ConfigClockSource+0x124>
 80121ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80121b2:	f200 8087 	bhi.w	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80121b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121ba:	f000 8086 	beq.w	80122ca <HAL_TIM_ConfigClockSource+0x1c2>
 80121be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121c2:	d87f      	bhi.n	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80121c4:	2b70      	cmp	r3, #112	; 0x70
 80121c6:	d01a      	beq.n	80121fe <HAL_TIM_ConfigClockSource+0xf6>
 80121c8:	2b70      	cmp	r3, #112	; 0x70
 80121ca:	d87b      	bhi.n	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80121cc:	2b60      	cmp	r3, #96	; 0x60
 80121ce:	d050      	beq.n	8012272 <HAL_TIM_ConfigClockSource+0x16a>
 80121d0:	2b60      	cmp	r3, #96	; 0x60
 80121d2:	d877      	bhi.n	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80121d4:	2b50      	cmp	r3, #80	; 0x50
 80121d6:	d03c      	beq.n	8012252 <HAL_TIM_ConfigClockSource+0x14a>
 80121d8:	2b50      	cmp	r3, #80	; 0x50
 80121da:	d873      	bhi.n	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80121dc:	2b40      	cmp	r3, #64	; 0x40
 80121de:	d058      	beq.n	8012292 <HAL_TIM_ConfigClockSource+0x18a>
 80121e0:	2b40      	cmp	r3, #64	; 0x40
 80121e2:	d86f      	bhi.n	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80121e4:	2b30      	cmp	r3, #48	; 0x30
 80121e6:	d064      	beq.n	80122b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80121e8:	2b30      	cmp	r3, #48	; 0x30
 80121ea:	d86b      	bhi.n	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80121ec:	2b20      	cmp	r3, #32
 80121ee:	d060      	beq.n	80122b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80121f0:	2b20      	cmp	r3, #32
 80121f2:	d867      	bhi.n	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d05c      	beq.n	80122b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80121f8:	2b10      	cmp	r3, #16
 80121fa:	d05a      	beq.n	80122b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80121fc:	e062      	b.n	80122c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6818      	ldr	r0, [r3, #0]
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	6899      	ldr	r1, [r3, #8]
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	685a      	ldr	r2, [r3, #4]
 801220a:	683b      	ldr	r3, [r7, #0]
 801220c:	68db      	ldr	r3, [r3, #12]
 801220e:	f000 fc8b 	bl	8012b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	689b      	ldr	r3, [r3, #8]
 8012218:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8012220:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	68ba      	ldr	r2, [r7, #8]
 8012228:	609a      	str	r2, [r3, #8]
      break;
 801222a:	e04f      	b.n	80122cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6818      	ldr	r0, [r3, #0]
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	6899      	ldr	r1, [r3, #8]
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	685a      	ldr	r2, [r3, #4]
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	68db      	ldr	r3, [r3, #12]
 801223c:	f000 fc74 	bl	8012b28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	689a      	ldr	r2, [r3, #8]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801224e:	609a      	str	r2, [r3, #8]
      break;
 8012250:	e03c      	b.n	80122cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	6818      	ldr	r0, [r3, #0]
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	6859      	ldr	r1, [r3, #4]
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	68db      	ldr	r3, [r3, #12]
 801225e:	461a      	mov	r2, r3
 8012260:	f000 fbe4 	bl	8012a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	2150      	movs	r1, #80	; 0x50
 801226a:	4618      	mov	r0, r3
 801226c:	f000 fc3e 	bl	8012aec <TIM_ITRx_SetConfig>
      break;
 8012270:	e02c      	b.n	80122cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6818      	ldr	r0, [r3, #0]
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	6859      	ldr	r1, [r3, #4]
 801227a:	683b      	ldr	r3, [r7, #0]
 801227c:	68db      	ldr	r3, [r3, #12]
 801227e:	461a      	mov	r2, r3
 8012280:	f000 fc03 	bl	8012a8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2160      	movs	r1, #96	; 0x60
 801228a:	4618      	mov	r0, r3
 801228c:	f000 fc2e 	bl	8012aec <TIM_ITRx_SetConfig>
      break;
 8012290:	e01c      	b.n	80122cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6818      	ldr	r0, [r3, #0]
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	6859      	ldr	r1, [r3, #4]
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	68db      	ldr	r3, [r3, #12]
 801229e:	461a      	mov	r2, r3
 80122a0:	f000 fbc4 	bl	8012a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	2140      	movs	r1, #64	; 0x40
 80122aa:	4618      	mov	r0, r3
 80122ac:	f000 fc1e 	bl	8012aec <TIM_ITRx_SetConfig>
      break;
 80122b0:	e00c      	b.n	80122cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	4619      	mov	r1, r3
 80122bc:	4610      	mov	r0, r2
 80122be:	f000 fc15 	bl	8012aec <TIM_ITRx_SetConfig>
      break;
 80122c2:	e003      	b.n	80122cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80122c4:	2301      	movs	r3, #1
 80122c6:	73fb      	strb	r3, [r7, #15]
      break;
 80122c8:	e000      	b.n	80122cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80122ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2201      	movs	r2, #1
 80122d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2200      	movs	r2, #0
 80122d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80122dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3710      	adds	r7, #16
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	ffceff88 	.word	0xffceff88
 80122ec:	00100040 	.word	0x00100040
 80122f0:	00100030 	.word	0x00100030
 80122f4:	00100020 	.word	0x00100020

080122f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b083      	sub	sp, #12
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012300:	bf00      	nop
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr

0801230c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801230c:	b480      	push	{r7}
 801230e:	b083      	sub	sp, #12
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012314:	bf00      	nop
 8012316:	370c      	adds	r7, #12
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012328:	bf00      	nop
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012334:	b480      	push	{r7}
 8012336:	b085      	sub	sp, #20
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	4a44      	ldr	r2, [pc, #272]	; (8012458 <TIM_Base_SetConfig+0x124>)
 8012348:	4293      	cmp	r3, r2
 801234a:	d013      	beq.n	8012374 <TIM_Base_SetConfig+0x40>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012352:	d00f      	beq.n	8012374 <TIM_Base_SetConfig+0x40>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	4a41      	ldr	r2, [pc, #260]	; (801245c <TIM_Base_SetConfig+0x128>)
 8012358:	4293      	cmp	r3, r2
 801235a:	d00b      	beq.n	8012374 <TIM_Base_SetConfig+0x40>
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	4a40      	ldr	r2, [pc, #256]	; (8012460 <TIM_Base_SetConfig+0x12c>)
 8012360:	4293      	cmp	r3, r2
 8012362:	d007      	beq.n	8012374 <TIM_Base_SetConfig+0x40>
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	4a3f      	ldr	r2, [pc, #252]	; (8012464 <TIM_Base_SetConfig+0x130>)
 8012368:	4293      	cmp	r3, r2
 801236a:	d003      	beq.n	8012374 <TIM_Base_SetConfig+0x40>
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	4a3e      	ldr	r2, [pc, #248]	; (8012468 <TIM_Base_SetConfig+0x134>)
 8012370:	4293      	cmp	r3, r2
 8012372:	d108      	bne.n	8012386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801237a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	685b      	ldr	r3, [r3, #4]
 8012380:	68fa      	ldr	r2, [r7, #12]
 8012382:	4313      	orrs	r3, r2
 8012384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4a33      	ldr	r2, [pc, #204]	; (8012458 <TIM_Base_SetConfig+0x124>)
 801238a:	4293      	cmp	r3, r2
 801238c:	d027      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012394:	d023      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	4a30      	ldr	r2, [pc, #192]	; (801245c <TIM_Base_SetConfig+0x128>)
 801239a:	4293      	cmp	r3, r2
 801239c:	d01f      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	4a2f      	ldr	r2, [pc, #188]	; (8012460 <TIM_Base_SetConfig+0x12c>)
 80123a2:	4293      	cmp	r3, r2
 80123a4:	d01b      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	4a2e      	ldr	r2, [pc, #184]	; (8012464 <TIM_Base_SetConfig+0x130>)
 80123aa:	4293      	cmp	r3, r2
 80123ac:	d017      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	4a2d      	ldr	r2, [pc, #180]	; (8012468 <TIM_Base_SetConfig+0x134>)
 80123b2:	4293      	cmp	r3, r2
 80123b4:	d013      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	4a2c      	ldr	r2, [pc, #176]	; (801246c <TIM_Base_SetConfig+0x138>)
 80123ba:	4293      	cmp	r3, r2
 80123bc:	d00f      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	4a2b      	ldr	r2, [pc, #172]	; (8012470 <TIM_Base_SetConfig+0x13c>)
 80123c2:	4293      	cmp	r3, r2
 80123c4:	d00b      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4a2a      	ldr	r2, [pc, #168]	; (8012474 <TIM_Base_SetConfig+0x140>)
 80123ca:	4293      	cmp	r3, r2
 80123cc:	d007      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	4a29      	ldr	r2, [pc, #164]	; (8012478 <TIM_Base_SetConfig+0x144>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d003      	beq.n	80123de <TIM_Base_SetConfig+0xaa>
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	4a28      	ldr	r2, [pc, #160]	; (801247c <TIM_Base_SetConfig+0x148>)
 80123da:	4293      	cmp	r3, r2
 80123dc:	d108      	bne.n	80123f0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	68db      	ldr	r3, [r3, #12]
 80123ea:	68fa      	ldr	r2, [r7, #12]
 80123ec:	4313      	orrs	r3, r2
 80123ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	695b      	ldr	r3, [r3, #20]
 80123fa:	4313      	orrs	r3, r2
 80123fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	68fa      	ldr	r2, [r7, #12]
 8012402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	689a      	ldr	r2, [r3, #8]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	4a10      	ldr	r2, [pc, #64]	; (8012458 <TIM_Base_SetConfig+0x124>)
 8012418:	4293      	cmp	r3, r2
 801241a:	d00f      	beq.n	801243c <TIM_Base_SetConfig+0x108>
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	4a12      	ldr	r2, [pc, #72]	; (8012468 <TIM_Base_SetConfig+0x134>)
 8012420:	4293      	cmp	r3, r2
 8012422:	d00b      	beq.n	801243c <TIM_Base_SetConfig+0x108>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	4a11      	ldr	r2, [pc, #68]	; (801246c <TIM_Base_SetConfig+0x138>)
 8012428:	4293      	cmp	r3, r2
 801242a:	d007      	beq.n	801243c <TIM_Base_SetConfig+0x108>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	4a10      	ldr	r2, [pc, #64]	; (8012470 <TIM_Base_SetConfig+0x13c>)
 8012430:	4293      	cmp	r3, r2
 8012432:	d003      	beq.n	801243c <TIM_Base_SetConfig+0x108>
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	4a0f      	ldr	r2, [pc, #60]	; (8012474 <TIM_Base_SetConfig+0x140>)
 8012438:	4293      	cmp	r3, r2
 801243a:	d103      	bne.n	8012444 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	691a      	ldr	r2, [r3, #16]
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	2201      	movs	r2, #1
 8012448:	615a      	str	r2, [r3, #20]
}
 801244a:	bf00      	nop
 801244c:	3714      	adds	r7, #20
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr
 8012456:	bf00      	nop
 8012458:	40010000 	.word	0x40010000
 801245c:	40000400 	.word	0x40000400
 8012460:	40000800 	.word	0x40000800
 8012464:	40000c00 	.word	0x40000c00
 8012468:	40010400 	.word	0x40010400
 801246c:	40014000 	.word	0x40014000
 8012470:	40014400 	.word	0x40014400
 8012474:	40014800 	.word	0x40014800
 8012478:	4000e000 	.word	0x4000e000
 801247c:	4000e400 	.word	0x4000e400

08012480 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012480:	b480      	push	{r7}
 8012482:	b087      	sub	sp, #28
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
 8012488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6a1b      	ldr	r3, [r3, #32]
 801248e:	f023 0201 	bic.w	r2, r3, #1
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6a1b      	ldr	r3, [r3, #32]
 801249a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	685b      	ldr	r3, [r3, #4]
 80124a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	699b      	ldr	r3, [r3, #24]
 80124a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80124a8:	68fa      	ldr	r2, [r7, #12]
 80124aa:	4b37      	ldr	r3, [pc, #220]	; (8012588 <TIM_OC1_SetConfig+0x108>)
 80124ac:	4013      	ands	r3, r2
 80124ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f023 0303 	bic.w	r3, r3, #3
 80124b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	68fa      	ldr	r2, [r7, #12]
 80124be:	4313      	orrs	r3, r2
 80124c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	f023 0302 	bic.w	r3, r3, #2
 80124c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	689b      	ldr	r3, [r3, #8]
 80124ce:	697a      	ldr	r2, [r7, #20]
 80124d0:	4313      	orrs	r3, r2
 80124d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	4a2d      	ldr	r2, [pc, #180]	; (801258c <TIM_OC1_SetConfig+0x10c>)
 80124d8:	4293      	cmp	r3, r2
 80124da:	d00f      	beq.n	80124fc <TIM_OC1_SetConfig+0x7c>
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	4a2c      	ldr	r2, [pc, #176]	; (8012590 <TIM_OC1_SetConfig+0x110>)
 80124e0:	4293      	cmp	r3, r2
 80124e2:	d00b      	beq.n	80124fc <TIM_OC1_SetConfig+0x7c>
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	4a2b      	ldr	r2, [pc, #172]	; (8012594 <TIM_OC1_SetConfig+0x114>)
 80124e8:	4293      	cmp	r3, r2
 80124ea:	d007      	beq.n	80124fc <TIM_OC1_SetConfig+0x7c>
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	4a2a      	ldr	r2, [pc, #168]	; (8012598 <TIM_OC1_SetConfig+0x118>)
 80124f0:	4293      	cmp	r3, r2
 80124f2:	d003      	beq.n	80124fc <TIM_OC1_SetConfig+0x7c>
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	4a29      	ldr	r2, [pc, #164]	; (801259c <TIM_OC1_SetConfig+0x11c>)
 80124f8:	4293      	cmp	r3, r2
 80124fa:	d10c      	bne.n	8012516 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	f023 0308 	bic.w	r3, r3, #8
 8012502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8012504:	683b      	ldr	r3, [r7, #0]
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	697a      	ldr	r2, [r7, #20]
 801250a:	4313      	orrs	r3, r2
 801250c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801250e:	697b      	ldr	r3, [r7, #20]
 8012510:	f023 0304 	bic.w	r3, r3, #4
 8012514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	4a1c      	ldr	r2, [pc, #112]	; (801258c <TIM_OC1_SetConfig+0x10c>)
 801251a:	4293      	cmp	r3, r2
 801251c:	d00f      	beq.n	801253e <TIM_OC1_SetConfig+0xbe>
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	4a1b      	ldr	r2, [pc, #108]	; (8012590 <TIM_OC1_SetConfig+0x110>)
 8012522:	4293      	cmp	r3, r2
 8012524:	d00b      	beq.n	801253e <TIM_OC1_SetConfig+0xbe>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	4a1a      	ldr	r2, [pc, #104]	; (8012594 <TIM_OC1_SetConfig+0x114>)
 801252a:	4293      	cmp	r3, r2
 801252c:	d007      	beq.n	801253e <TIM_OC1_SetConfig+0xbe>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	4a19      	ldr	r2, [pc, #100]	; (8012598 <TIM_OC1_SetConfig+0x118>)
 8012532:	4293      	cmp	r3, r2
 8012534:	d003      	beq.n	801253e <TIM_OC1_SetConfig+0xbe>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	4a18      	ldr	r2, [pc, #96]	; (801259c <TIM_OC1_SetConfig+0x11c>)
 801253a:	4293      	cmp	r3, r2
 801253c:	d111      	bne.n	8012562 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801253e:	693b      	ldr	r3, [r7, #16]
 8012540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801254c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	695b      	ldr	r3, [r3, #20]
 8012552:	693a      	ldr	r2, [r7, #16]
 8012554:	4313      	orrs	r3, r2
 8012556:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	699b      	ldr	r3, [r3, #24]
 801255c:	693a      	ldr	r2, [r7, #16]
 801255e:	4313      	orrs	r3, r2
 8012560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	693a      	ldr	r2, [r7, #16]
 8012566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	68fa      	ldr	r2, [r7, #12]
 801256c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	685a      	ldr	r2, [r3, #4]
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	697a      	ldr	r2, [r7, #20]
 801257a:	621a      	str	r2, [r3, #32]
}
 801257c:	bf00      	nop
 801257e:	371c      	adds	r7, #28
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr
 8012588:	fffeff8f 	.word	0xfffeff8f
 801258c:	40010000 	.word	0x40010000
 8012590:	40010400 	.word	0x40010400
 8012594:	40014000 	.word	0x40014000
 8012598:	40014400 	.word	0x40014400
 801259c:	40014800 	.word	0x40014800

080125a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80125a0:	b480      	push	{r7}
 80125a2:	b087      	sub	sp, #28
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	6a1b      	ldr	r3, [r3, #32]
 80125ae:	f023 0210 	bic.w	r2, r3, #16
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6a1b      	ldr	r3, [r3, #32]
 80125ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	699b      	ldr	r3, [r3, #24]
 80125c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80125c8:	68fa      	ldr	r2, [r7, #12]
 80125ca:	4b34      	ldr	r3, [pc, #208]	; (801269c <TIM_OC2_SetConfig+0xfc>)
 80125cc:	4013      	ands	r3, r2
 80125ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	021b      	lsls	r3, r3, #8
 80125de:	68fa      	ldr	r2, [r7, #12]
 80125e0:	4313      	orrs	r3, r2
 80125e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	f023 0320 	bic.w	r3, r3, #32
 80125ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	689b      	ldr	r3, [r3, #8]
 80125f0:	011b      	lsls	r3, r3, #4
 80125f2:	697a      	ldr	r2, [r7, #20]
 80125f4:	4313      	orrs	r3, r2
 80125f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4a29      	ldr	r2, [pc, #164]	; (80126a0 <TIM_OC2_SetConfig+0x100>)
 80125fc:	4293      	cmp	r3, r2
 80125fe:	d003      	beq.n	8012608 <TIM_OC2_SetConfig+0x68>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	4a28      	ldr	r2, [pc, #160]	; (80126a4 <TIM_OC2_SetConfig+0x104>)
 8012604:	4293      	cmp	r3, r2
 8012606:	d10d      	bne.n	8012624 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801260e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	68db      	ldr	r3, [r3, #12]
 8012614:	011b      	lsls	r3, r3, #4
 8012616:	697a      	ldr	r2, [r7, #20]
 8012618:	4313      	orrs	r3, r2
 801261a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012622:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	4a1e      	ldr	r2, [pc, #120]	; (80126a0 <TIM_OC2_SetConfig+0x100>)
 8012628:	4293      	cmp	r3, r2
 801262a:	d00f      	beq.n	801264c <TIM_OC2_SetConfig+0xac>
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	4a1d      	ldr	r2, [pc, #116]	; (80126a4 <TIM_OC2_SetConfig+0x104>)
 8012630:	4293      	cmp	r3, r2
 8012632:	d00b      	beq.n	801264c <TIM_OC2_SetConfig+0xac>
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	4a1c      	ldr	r2, [pc, #112]	; (80126a8 <TIM_OC2_SetConfig+0x108>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d007      	beq.n	801264c <TIM_OC2_SetConfig+0xac>
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	4a1b      	ldr	r2, [pc, #108]	; (80126ac <TIM_OC2_SetConfig+0x10c>)
 8012640:	4293      	cmp	r3, r2
 8012642:	d003      	beq.n	801264c <TIM_OC2_SetConfig+0xac>
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	4a1a      	ldr	r2, [pc, #104]	; (80126b0 <TIM_OC2_SetConfig+0x110>)
 8012648:	4293      	cmp	r3, r2
 801264a:	d113      	bne.n	8012674 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012652:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801265a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	695b      	ldr	r3, [r3, #20]
 8012660:	009b      	lsls	r3, r3, #2
 8012662:	693a      	ldr	r2, [r7, #16]
 8012664:	4313      	orrs	r3, r2
 8012666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	699b      	ldr	r3, [r3, #24]
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	693a      	ldr	r2, [r7, #16]
 8012670:	4313      	orrs	r3, r2
 8012672:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	693a      	ldr	r2, [r7, #16]
 8012678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	68fa      	ldr	r2, [r7, #12]
 801267e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	685a      	ldr	r2, [r3, #4]
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	697a      	ldr	r2, [r7, #20]
 801268c:	621a      	str	r2, [r3, #32]
}
 801268e:	bf00      	nop
 8012690:	371c      	adds	r7, #28
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr
 801269a:	bf00      	nop
 801269c:	feff8fff 	.word	0xfeff8fff
 80126a0:	40010000 	.word	0x40010000
 80126a4:	40010400 	.word	0x40010400
 80126a8:	40014000 	.word	0x40014000
 80126ac:	40014400 	.word	0x40014400
 80126b0:	40014800 	.word	0x40014800

080126b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b087      	sub	sp, #28
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6a1b      	ldr	r3, [r3, #32]
 80126c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	6a1b      	ldr	r3, [r3, #32]
 80126ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	685b      	ldr	r3, [r3, #4]
 80126d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	69db      	ldr	r3, [r3, #28]
 80126da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80126dc:	68fa      	ldr	r2, [r7, #12]
 80126de:	4b33      	ldr	r3, [pc, #204]	; (80127ac <TIM_OC3_SetConfig+0xf8>)
 80126e0:	4013      	ands	r3, r2
 80126e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	f023 0303 	bic.w	r3, r3, #3
 80126ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	68fa      	ldr	r2, [r7, #12]
 80126f2:	4313      	orrs	r3, r2
 80126f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80126fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80126fe:	683b      	ldr	r3, [r7, #0]
 8012700:	689b      	ldr	r3, [r3, #8]
 8012702:	021b      	lsls	r3, r3, #8
 8012704:	697a      	ldr	r2, [r7, #20]
 8012706:	4313      	orrs	r3, r2
 8012708:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4a28      	ldr	r2, [pc, #160]	; (80127b0 <TIM_OC3_SetConfig+0xfc>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d003      	beq.n	801271a <TIM_OC3_SetConfig+0x66>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	4a27      	ldr	r2, [pc, #156]	; (80127b4 <TIM_OC3_SetConfig+0x100>)
 8012716:	4293      	cmp	r3, r2
 8012718:	d10d      	bne.n	8012736 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	68db      	ldr	r3, [r3, #12]
 8012726:	021b      	lsls	r3, r3, #8
 8012728:	697a      	ldr	r2, [r7, #20]
 801272a:	4313      	orrs	r3, r2
 801272c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8012734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	4a1d      	ldr	r2, [pc, #116]	; (80127b0 <TIM_OC3_SetConfig+0xfc>)
 801273a:	4293      	cmp	r3, r2
 801273c:	d00f      	beq.n	801275e <TIM_OC3_SetConfig+0xaa>
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	4a1c      	ldr	r2, [pc, #112]	; (80127b4 <TIM_OC3_SetConfig+0x100>)
 8012742:	4293      	cmp	r3, r2
 8012744:	d00b      	beq.n	801275e <TIM_OC3_SetConfig+0xaa>
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	4a1b      	ldr	r2, [pc, #108]	; (80127b8 <TIM_OC3_SetConfig+0x104>)
 801274a:	4293      	cmp	r3, r2
 801274c:	d007      	beq.n	801275e <TIM_OC3_SetConfig+0xaa>
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	4a1a      	ldr	r2, [pc, #104]	; (80127bc <TIM_OC3_SetConfig+0x108>)
 8012752:	4293      	cmp	r3, r2
 8012754:	d003      	beq.n	801275e <TIM_OC3_SetConfig+0xaa>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	4a19      	ldr	r2, [pc, #100]	; (80127c0 <TIM_OC3_SetConfig+0x10c>)
 801275a:	4293      	cmp	r3, r2
 801275c:	d113      	bne.n	8012786 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801276c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	695b      	ldr	r3, [r3, #20]
 8012772:	011b      	lsls	r3, r3, #4
 8012774:	693a      	ldr	r2, [r7, #16]
 8012776:	4313      	orrs	r3, r2
 8012778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801277a:	683b      	ldr	r3, [r7, #0]
 801277c:	699b      	ldr	r3, [r3, #24]
 801277e:	011b      	lsls	r3, r3, #4
 8012780:	693a      	ldr	r2, [r7, #16]
 8012782:	4313      	orrs	r3, r2
 8012784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	693a      	ldr	r2, [r7, #16]
 801278a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	68fa      	ldr	r2, [r7, #12]
 8012790:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	685a      	ldr	r2, [r3, #4]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	697a      	ldr	r2, [r7, #20]
 801279e:	621a      	str	r2, [r3, #32]
}
 80127a0:	bf00      	nop
 80127a2:	371c      	adds	r7, #28
 80127a4:	46bd      	mov	sp, r7
 80127a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127aa:	4770      	bx	lr
 80127ac:	fffeff8f 	.word	0xfffeff8f
 80127b0:	40010000 	.word	0x40010000
 80127b4:	40010400 	.word	0x40010400
 80127b8:	40014000 	.word	0x40014000
 80127bc:	40014400 	.word	0x40014400
 80127c0:	40014800 	.word	0x40014800

080127c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80127c4:	b480      	push	{r7}
 80127c6:	b087      	sub	sp, #28
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	6078      	str	r0, [r7, #4]
 80127cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	6a1b      	ldr	r3, [r3, #32]
 80127d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6a1b      	ldr	r3, [r3, #32]
 80127de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	685b      	ldr	r3, [r3, #4]
 80127e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	69db      	ldr	r3, [r3, #28]
 80127ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80127ec:	68fa      	ldr	r2, [r7, #12]
 80127ee:	4b24      	ldr	r3, [pc, #144]	; (8012880 <TIM_OC4_SetConfig+0xbc>)
 80127f0:	4013      	ands	r3, r2
 80127f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80127fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	021b      	lsls	r3, r3, #8
 8012802:	68fa      	ldr	r2, [r7, #12]
 8012804:	4313      	orrs	r3, r2
 8012806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801280e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	689b      	ldr	r3, [r3, #8]
 8012814:	031b      	lsls	r3, r3, #12
 8012816:	693a      	ldr	r2, [r7, #16]
 8012818:	4313      	orrs	r3, r2
 801281a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	4a19      	ldr	r2, [pc, #100]	; (8012884 <TIM_OC4_SetConfig+0xc0>)
 8012820:	4293      	cmp	r3, r2
 8012822:	d00f      	beq.n	8012844 <TIM_OC4_SetConfig+0x80>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	4a18      	ldr	r2, [pc, #96]	; (8012888 <TIM_OC4_SetConfig+0xc4>)
 8012828:	4293      	cmp	r3, r2
 801282a:	d00b      	beq.n	8012844 <TIM_OC4_SetConfig+0x80>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	4a17      	ldr	r2, [pc, #92]	; (801288c <TIM_OC4_SetConfig+0xc8>)
 8012830:	4293      	cmp	r3, r2
 8012832:	d007      	beq.n	8012844 <TIM_OC4_SetConfig+0x80>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	4a16      	ldr	r2, [pc, #88]	; (8012890 <TIM_OC4_SetConfig+0xcc>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d003      	beq.n	8012844 <TIM_OC4_SetConfig+0x80>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	4a15      	ldr	r2, [pc, #84]	; (8012894 <TIM_OC4_SetConfig+0xd0>)
 8012840:	4293      	cmp	r3, r2
 8012842:	d109      	bne.n	8012858 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801284a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801284c:	683b      	ldr	r3, [r7, #0]
 801284e:	695b      	ldr	r3, [r3, #20]
 8012850:	019b      	lsls	r3, r3, #6
 8012852:	697a      	ldr	r2, [r7, #20]
 8012854:	4313      	orrs	r3, r2
 8012856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	697a      	ldr	r2, [r7, #20]
 801285c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	68fa      	ldr	r2, [r7, #12]
 8012862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	685a      	ldr	r2, [r3, #4]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	693a      	ldr	r2, [r7, #16]
 8012870:	621a      	str	r2, [r3, #32]
}
 8012872:	bf00      	nop
 8012874:	371c      	adds	r7, #28
 8012876:	46bd      	mov	sp, r7
 8012878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287c:	4770      	bx	lr
 801287e:	bf00      	nop
 8012880:	feff8fff 	.word	0xfeff8fff
 8012884:	40010000 	.word	0x40010000
 8012888:	40010400 	.word	0x40010400
 801288c:	40014000 	.word	0x40014000
 8012890:	40014400 	.word	0x40014400
 8012894:	40014800 	.word	0x40014800

08012898 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8012898:	b480      	push	{r7}
 801289a:	b087      	sub	sp, #28
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
 80128a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6a1b      	ldr	r3, [r3, #32]
 80128a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6a1b      	ldr	r3, [r3, #32]
 80128b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80128c0:	68fa      	ldr	r2, [r7, #12]
 80128c2:	4b21      	ldr	r3, [pc, #132]	; (8012948 <TIM_OC5_SetConfig+0xb0>)
 80128c4:	4013      	ands	r3, r2
 80128c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80128c8:	683b      	ldr	r3, [r7, #0]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	68fa      	ldr	r2, [r7, #12]
 80128ce:	4313      	orrs	r3, r2
 80128d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80128d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	689b      	ldr	r3, [r3, #8]
 80128de:	041b      	lsls	r3, r3, #16
 80128e0:	693a      	ldr	r2, [r7, #16]
 80128e2:	4313      	orrs	r3, r2
 80128e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4a18      	ldr	r2, [pc, #96]	; (801294c <TIM_OC5_SetConfig+0xb4>)
 80128ea:	4293      	cmp	r3, r2
 80128ec:	d00f      	beq.n	801290e <TIM_OC5_SetConfig+0x76>
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	4a17      	ldr	r2, [pc, #92]	; (8012950 <TIM_OC5_SetConfig+0xb8>)
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d00b      	beq.n	801290e <TIM_OC5_SetConfig+0x76>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4a16      	ldr	r2, [pc, #88]	; (8012954 <TIM_OC5_SetConfig+0xbc>)
 80128fa:	4293      	cmp	r3, r2
 80128fc:	d007      	beq.n	801290e <TIM_OC5_SetConfig+0x76>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	4a15      	ldr	r2, [pc, #84]	; (8012958 <TIM_OC5_SetConfig+0xc0>)
 8012902:	4293      	cmp	r3, r2
 8012904:	d003      	beq.n	801290e <TIM_OC5_SetConfig+0x76>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	4a14      	ldr	r2, [pc, #80]	; (801295c <TIM_OC5_SetConfig+0xc4>)
 801290a:	4293      	cmp	r3, r2
 801290c:	d109      	bne.n	8012922 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012914:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	695b      	ldr	r3, [r3, #20]
 801291a:	021b      	lsls	r3, r3, #8
 801291c:	697a      	ldr	r2, [r7, #20]
 801291e:	4313      	orrs	r3, r2
 8012920:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	697a      	ldr	r2, [r7, #20]
 8012926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	68fa      	ldr	r2, [r7, #12]
 801292c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801292e:	683b      	ldr	r3, [r7, #0]
 8012930:	685a      	ldr	r2, [r3, #4]
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	693a      	ldr	r2, [r7, #16]
 801293a:	621a      	str	r2, [r3, #32]
}
 801293c:	bf00      	nop
 801293e:	371c      	adds	r7, #28
 8012940:	46bd      	mov	sp, r7
 8012942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012946:	4770      	bx	lr
 8012948:	fffeff8f 	.word	0xfffeff8f
 801294c:	40010000 	.word	0x40010000
 8012950:	40010400 	.word	0x40010400
 8012954:	40014000 	.word	0x40014000
 8012958:	40014400 	.word	0x40014400
 801295c:	40014800 	.word	0x40014800

08012960 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8012960:	b480      	push	{r7}
 8012962:	b087      	sub	sp, #28
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6a1b      	ldr	r3, [r3, #32]
 801296e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6a1b      	ldr	r3, [r3, #32]
 801297a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8012988:	68fa      	ldr	r2, [r7, #12]
 801298a:	4b22      	ldr	r3, [pc, #136]	; (8012a14 <TIM_OC6_SetConfig+0xb4>)
 801298c:	4013      	ands	r3, r2
 801298e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	021b      	lsls	r3, r3, #8
 8012996:	68fa      	ldr	r2, [r7, #12]
 8012998:	4313      	orrs	r3, r2
 801299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80129a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	689b      	ldr	r3, [r3, #8]
 80129a8:	051b      	lsls	r3, r3, #20
 80129aa:	693a      	ldr	r2, [r7, #16]
 80129ac:	4313      	orrs	r3, r2
 80129ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	4a19      	ldr	r2, [pc, #100]	; (8012a18 <TIM_OC6_SetConfig+0xb8>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d00f      	beq.n	80129d8 <TIM_OC6_SetConfig+0x78>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	4a18      	ldr	r2, [pc, #96]	; (8012a1c <TIM_OC6_SetConfig+0xbc>)
 80129bc:	4293      	cmp	r3, r2
 80129be:	d00b      	beq.n	80129d8 <TIM_OC6_SetConfig+0x78>
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	4a17      	ldr	r2, [pc, #92]	; (8012a20 <TIM_OC6_SetConfig+0xc0>)
 80129c4:	4293      	cmp	r3, r2
 80129c6:	d007      	beq.n	80129d8 <TIM_OC6_SetConfig+0x78>
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	4a16      	ldr	r2, [pc, #88]	; (8012a24 <TIM_OC6_SetConfig+0xc4>)
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d003      	beq.n	80129d8 <TIM_OC6_SetConfig+0x78>
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	4a15      	ldr	r2, [pc, #84]	; (8012a28 <TIM_OC6_SetConfig+0xc8>)
 80129d4:	4293      	cmp	r3, r2
 80129d6:	d109      	bne.n	80129ec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80129d8:	697b      	ldr	r3, [r7, #20]
 80129da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80129de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	695b      	ldr	r3, [r3, #20]
 80129e4:	029b      	lsls	r3, r3, #10
 80129e6:	697a      	ldr	r2, [r7, #20]
 80129e8:	4313      	orrs	r3, r2
 80129ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	697a      	ldr	r2, [r7, #20]
 80129f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	68fa      	ldr	r2, [r7, #12]
 80129f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80129f8:	683b      	ldr	r3, [r7, #0]
 80129fa:	685a      	ldr	r2, [r3, #4]
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	693a      	ldr	r2, [r7, #16]
 8012a04:	621a      	str	r2, [r3, #32]
}
 8012a06:	bf00      	nop
 8012a08:	371c      	adds	r7, #28
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr
 8012a12:	bf00      	nop
 8012a14:	feff8fff 	.word	0xfeff8fff
 8012a18:	40010000 	.word	0x40010000
 8012a1c:	40010400 	.word	0x40010400
 8012a20:	40014000 	.word	0x40014000
 8012a24:	40014400 	.word	0x40014400
 8012a28:	40014800 	.word	0x40014800

08012a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	b087      	sub	sp, #28
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	60f8      	str	r0, [r7, #12]
 8012a34:	60b9      	str	r1, [r7, #8]
 8012a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	6a1b      	ldr	r3, [r3, #32]
 8012a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	6a1b      	ldr	r3, [r3, #32]
 8012a42:	f023 0201 	bic.w	r2, r3, #1
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	699b      	ldr	r3, [r3, #24]
 8012a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	011b      	lsls	r3, r3, #4
 8012a5c:	693a      	ldr	r2, [r7, #16]
 8012a5e:	4313      	orrs	r3, r2
 8012a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	f023 030a 	bic.w	r3, r3, #10
 8012a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012a6a:	697a      	ldr	r2, [r7, #20]
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	4313      	orrs	r3, r2
 8012a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	693a      	ldr	r2, [r7, #16]
 8012a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	697a      	ldr	r2, [r7, #20]
 8012a7c:	621a      	str	r2, [r3, #32]
}
 8012a7e:	bf00      	nop
 8012a80:	371c      	adds	r7, #28
 8012a82:	46bd      	mov	sp, r7
 8012a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a88:	4770      	bx	lr

08012a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012a8a:	b480      	push	{r7}
 8012a8c:	b087      	sub	sp, #28
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	60f8      	str	r0, [r7, #12]
 8012a92:	60b9      	str	r1, [r7, #8]
 8012a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6a1b      	ldr	r3, [r3, #32]
 8012a9a:	f023 0210 	bic.w	r2, r3, #16
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	699b      	ldr	r3, [r3, #24]
 8012aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	6a1b      	ldr	r3, [r3, #32]
 8012aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	031b      	lsls	r3, r3, #12
 8012aba:	697a      	ldr	r2, [r7, #20]
 8012abc:	4313      	orrs	r3, r2
 8012abe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012ac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	011b      	lsls	r3, r3, #4
 8012acc:	693a      	ldr	r2, [r7, #16]
 8012ace:	4313      	orrs	r3, r2
 8012ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	697a      	ldr	r2, [r7, #20]
 8012ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	693a      	ldr	r2, [r7, #16]
 8012adc:	621a      	str	r2, [r3, #32]
}
 8012ade:	bf00      	nop
 8012ae0:	371c      	adds	r7, #28
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae8:	4770      	bx	lr
	...

08012aec <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b085      	sub	sp, #20
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	689b      	ldr	r3, [r3, #8]
 8012afa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012afc:	68fa      	ldr	r2, [r7, #12]
 8012afe:	4b09      	ldr	r3, [pc, #36]	; (8012b24 <TIM_ITRx_SetConfig+0x38>)
 8012b00:	4013      	ands	r3, r2
 8012b02:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012b04:	683a      	ldr	r2, [r7, #0]
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	4313      	orrs	r3, r2
 8012b0a:	f043 0307 	orr.w	r3, r3, #7
 8012b0e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	68fa      	ldr	r2, [r7, #12]
 8012b14:	609a      	str	r2, [r3, #8]
}
 8012b16:	bf00      	nop
 8012b18:	3714      	adds	r7, #20
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b20:	4770      	bx	lr
 8012b22:	bf00      	nop
 8012b24:	ffcfff8f 	.word	0xffcfff8f

08012b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012b28:	b480      	push	{r7}
 8012b2a:	b087      	sub	sp, #28
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	607a      	str	r2, [r7, #4]
 8012b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	689b      	ldr	r3, [r3, #8]
 8012b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	021a      	lsls	r2, r3, #8
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	431a      	orrs	r2, r3
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	4313      	orrs	r3, r2
 8012b50:	697a      	ldr	r2, [r7, #20]
 8012b52:	4313      	orrs	r3, r2
 8012b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	697a      	ldr	r2, [r7, #20]
 8012b5a:	609a      	str	r2, [r3, #8]
}
 8012b5c:	bf00      	nop
 8012b5e:	371c      	adds	r7, #28
 8012b60:	46bd      	mov	sp, r7
 8012b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b66:	4770      	bx	lr

08012b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012b68:	b480      	push	{r7}
 8012b6a:	b087      	sub	sp, #28
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	60b9      	str	r1, [r7, #8]
 8012b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	f003 031f 	and.w	r3, r3, #31
 8012b7a:	2201      	movs	r2, #1
 8012b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8012b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	6a1a      	ldr	r2, [r3, #32]
 8012b86:	697b      	ldr	r3, [r7, #20]
 8012b88:	43db      	mvns	r3, r3
 8012b8a:	401a      	ands	r2, r3
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	6a1a      	ldr	r2, [r3, #32]
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	f003 031f 	and.w	r3, r3, #31
 8012b9a:	6879      	ldr	r1, [r7, #4]
 8012b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8012ba0:	431a      	orrs	r2, r3
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	621a      	str	r2, [r3, #32]
}
 8012ba6:	bf00      	nop
 8012ba8:	371c      	adds	r7, #28
 8012baa:	46bd      	mov	sp, r7
 8012bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb0:	4770      	bx	lr
	...

08012bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012bb4:	b480      	push	{r7}
 8012bb6:	b085      	sub	sp, #20
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	6078      	str	r0, [r7, #4]
 8012bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012bc4:	2b01      	cmp	r3, #1
 8012bc6:	d101      	bne.n	8012bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012bc8:	2302      	movs	r3, #2
 8012bca:	e077      	b.n	8012cbc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2201      	movs	r2, #1
 8012bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2202      	movs	r2, #2
 8012bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	685b      	ldr	r3, [r3, #4]
 8012be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	689b      	ldr	r3, [r3, #8]
 8012bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	4a35      	ldr	r2, [pc, #212]	; (8012cc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	d004      	beq.n	8012c00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	4a34      	ldr	r2, [pc, #208]	; (8012ccc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012bfc:	4293      	cmp	r3, r2
 8012bfe:	d108      	bne.n	8012c12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8012c06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	68fa      	ldr	r2, [r7, #12]
 8012c0e:	4313      	orrs	r3, r2
 8012c10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	68fa      	ldr	r2, [r7, #12]
 8012c20:	4313      	orrs	r3, r2
 8012c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	68fa      	ldr	r2, [r7, #12]
 8012c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4a25      	ldr	r2, [pc, #148]	; (8012cc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012c32:	4293      	cmp	r3, r2
 8012c34:	d02c      	beq.n	8012c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012c3e:	d027      	beq.n	8012c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	4a22      	ldr	r2, [pc, #136]	; (8012cd0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d022      	beq.n	8012c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	4a21      	ldr	r2, [pc, #132]	; (8012cd4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8012c50:	4293      	cmp	r3, r2
 8012c52:	d01d      	beq.n	8012c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	4a1f      	ldr	r2, [pc, #124]	; (8012cd8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d018      	beq.n	8012c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	4a1a      	ldr	r2, [pc, #104]	; (8012ccc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012c64:	4293      	cmp	r3, r2
 8012c66:	d013      	beq.n	8012c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	4a1b      	ldr	r2, [pc, #108]	; (8012cdc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8012c6e:	4293      	cmp	r3, r2
 8012c70:	d00e      	beq.n	8012c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	4a1a      	ldr	r2, [pc, #104]	; (8012ce0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8012c78:	4293      	cmp	r3, r2
 8012c7a:	d009      	beq.n	8012c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4a18      	ldr	r2, [pc, #96]	; (8012ce4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8012c82:	4293      	cmp	r3, r2
 8012c84:	d004      	beq.n	8012c90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4a17      	ldr	r2, [pc, #92]	; (8012ce8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d10c      	bne.n	8012caa <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	689b      	ldr	r3, [r3, #8]
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	4313      	orrs	r3, r2
 8012ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	68ba      	ldr	r2, [r7, #8]
 8012ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2201      	movs	r2, #1
 8012cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012cba:	2300      	movs	r3, #0
}
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	3714      	adds	r7, #20
 8012cc0:	46bd      	mov	sp, r7
 8012cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc6:	4770      	bx	lr
 8012cc8:	40010000 	.word	0x40010000
 8012ccc:	40010400 	.word	0x40010400
 8012cd0:	40000400 	.word	0x40000400
 8012cd4:	40000800 	.word	0x40000800
 8012cd8:	40000c00 	.word	0x40000c00
 8012cdc:	40001800 	.word	0x40001800
 8012ce0:	40014000 	.word	0x40014000
 8012ce4:	4000e000 	.word	0x4000e000
 8012ce8:	4000e400 	.word	0x4000e400

08012cec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b085      	sub	sp, #20
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
 8012cf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012d00:	2b01      	cmp	r3, #1
 8012d02:	d101      	bne.n	8012d08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8012d04:	2302      	movs	r3, #2
 8012d06:	e087      	b.n	8012e18 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012d16:	683b      	ldr	r3, [r7, #0]
 8012d18:	68db      	ldr	r3, [r3, #12]
 8012d1a:	4313      	orrs	r3, r2
 8012d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8012d24:	683b      	ldr	r3, [r7, #0]
 8012d26:	689b      	ldr	r3, [r3, #8]
 8012d28:	4313      	orrs	r3, r2
 8012d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8012d32:	683b      	ldr	r3, [r7, #0]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	4313      	orrs	r3, r2
 8012d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	4313      	orrs	r3, r2
 8012d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	691b      	ldr	r3, [r3, #16]
 8012d52:	4313      	orrs	r3, r2
 8012d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	695b      	ldr	r3, [r3, #20]
 8012d60:	4313      	orrs	r3, r2
 8012d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	699b      	ldr	r3, [r3, #24]
 8012d7c:	041b      	lsls	r3, r3, #16
 8012d7e:	4313      	orrs	r3, r2
 8012d80:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	4a27      	ldr	r2, [pc, #156]	; (8012e24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012d88:	4293      	cmp	r3, r2
 8012d8a:	d004      	beq.n	8012d96 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	4a25      	ldr	r2, [pc, #148]	; (8012e28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012d92:	4293      	cmp	r3, r2
 8012d94:	d106      	bne.n	8012da4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	69db      	ldr	r3, [r3, #28]
 8012da0:	4313      	orrs	r3, r2
 8012da2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	4a1e      	ldr	r2, [pc, #120]	; (8012e24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012daa:	4293      	cmp	r3, r2
 8012dac:	d004      	beq.n	8012db8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	4a1d      	ldr	r2, [pc, #116]	; (8012e28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d126      	bne.n	8012e06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dc2:	051b      	lsls	r3, r3, #20
 8012dc4:	4313      	orrs	r3, r2
 8012dc6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	6a1b      	ldr	r3, [r3, #32]
 8012dd2:	4313      	orrs	r3, r2
 8012dd4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012de0:	4313      	orrs	r3, r2
 8012de2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	4a0e      	ldr	r2, [pc, #56]	; (8012e24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d004      	beq.n	8012df8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	4a0d      	ldr	r2, [pc, #52]	; (8012e28 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d106      	bne.n	8012e06 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8012dfe:	683b      	ldr	r3, [r7, #0]
 8012e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e02:	4313      	orrs	r3, r2
 8012e04:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	68fa      	ldr	r2, [r7, #12]
 8012e0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2200      	movs	r2, #0
 8012e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012e16:	2300      	movs	r3, #0
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3714      	adds	r7, #20
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr
 8012e24:	40010000 	.word	0x40010000
 8012e28:	40010400 	.word	0x40010400

08012e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	b083      	sub	sp, #12
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012e34:	bf00      	nop
 8012e36:	370c      	adds	r7, #12
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3e:	4770      	bx	lr

08012e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b083      	sub	sp, #12
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012e48:	bf00      	nop
 8012e4a:	370c      	adds	r7, #12
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e52:	4770      	bx	lr

08012e54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012e54:	b480      	push	{r7}
 8012e56:	b083      	sub	sp, #12
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012e5c:	bf00      	nop
 8012e5e:	370c      	adds	r7, #12
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr

08012e68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b082      	sub	sp, #8
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d101      	bne.n	8012e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012e76:	2301      	movs	r3, #1
 8012e78:	e042      	b.n	8012f00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d106      	bne.n	8012e92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2200      	movs	r2, #0
 8012e88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f7f3 fd1f 	bl	80068d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	2224      	movs	r2, #36	; 0x24
 8012e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	681a      	ldr	r2, [r3, #0]
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f022 0201 	bic.w	r2, r2, #1
 8012ea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f000 fce8 	bl	8013880 <UART_SetConfig>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d101      	bne.n	8012eba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	e022      	b.n	8012f00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d002      	beq.n	8012ec8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012ec2:	6878      	ldr	r0, [r7, #4]
 8012ec4:	f001 fb48 	bl	8014558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	685a      	ldr	r2, [r3, #4]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	689a      	ldr	r2, [r3, #8]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	681a      	ldr	r2, [r3, #0]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f042 0201 	orr.w	r2, r2, #1
 8012ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f001 fbcf 	bl	801469c <UART_CheckIdleState>
 8012efe:	4603      	mov	r3, r0
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}

08012f08 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b091      	sub	sp, #68	; 0x44
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	60f8      	str	r0, [r7, #12]
 8012f10:	60b9      	str	r1, [r7, #8]
 8012f12:	4613      	mov	r3, r2
 8012f14:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f1c:	2b20      	cmp	r3, #32
 8012f1e:	f040 808c 	bne.w	801303a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8012f22:	68bb      	ldr	r3, [r7, #8]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d002      	beq.n	8012f2e <HAL_UART_Transmit_IT+0x26>
 8012f28:	88fb      	ldrh	r3, [r7, #6]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d101      	bne.n	8012f32 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8012f2e:	2301      	movs	r3, #1
 8012f30:	e084      	b.n	801303c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d101      	bne.n	8012f40 <HAL_UART_Transmit_IT+0x38>
 8012f3c:	2302      	movs	r3, #2
 8012f3e:	e07d      	b.n	801303c <HAL_UART_Transmit_IT+0x134>
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	2201      	movs	r2, #1
 8012f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	68ba      	ldr	r2, [r7, #8]
 8012f4c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	88fa      	ldrh	r2, [r7, #6]
 8012f52:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	88fa      	ldrh	r2, [r7, #6]
 8012f5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2200      	movs	r2, #0
 8012f62:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	2200      	movs	r2, #0
 8012f68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2221      	movs	r2, #33	; 0x21
 8012f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012f7c:	d12e      	bne.n	8012fdc <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	689b      	ldr	r3, [r3, #8]
 8012f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f86:	d107      	bne.n	8012f98 <HAL_UART_Transmit_IT+0x90>
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	691b      	ldr	r3, [r3, #16]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d103      	bne.n	8012f98 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	4a2d      	ldr	r2, [pc, #180]	; (8013048 <HAL_UART_Transmit_IT+0x140>)
 8012f94:	675a      	str	r2, [r3, #116]	; 0x74
 8012f96:	e002      	b.n	8012f9e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	4a2c      	ldr	r2, [pc, #176]	; (801304c <HAL_UART_Transmit_IT+0x144>)
 8012f9c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	3308      	adds	r3, #8
 8012fac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb0:	e853 3f00 	ldrex	r3, [r3]
 8012fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012fbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	3308      	adds	r3, #8
 8012fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012fc6:	637a      	str	r2, [r7, #52]	; 0x34
 8012fc8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012fce:	e841 2300 	strex	r3, r2, [r1]
 8012fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d1e5      	bne.n	8012fa6 <HAL_UART_Transmit_IT+0x9e>
 8012fda:	e02c      	b.n	8013036 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	689b      	ldr	r3, [r3, #8]
 8012fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fe4:	d107      	bne.n	8012ff6 <HAL_UART_Transmit_IT+0xee>
 8012fe6:	68fb      	ldr	r3, [r7, #12]
 8012fe8:	691b      	ldr	r3, [r3, #16]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d103      	bne.n	8012ff6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	4a17      	ldr	r2, [pc, #92]	; (8013050 <HAL_UART_Transmit_IT+0x148>)
 8012ff2:	675a      	str	r2, [r3, #116]	; 0x74
 8012ff4:	e002      	b.n	8012ffc <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	4a16      	ldr	r2, [pc, #88]	; (8013054 <HAL_UART_Transmit_IT+0x14c>)
 8012ffa:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	2200      	movs	r2, #0
 8013000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801300a:	697b      	ldr	r3, [r7, #20]
 801300c:	e853 3f00 	ldrex	r3, [r3]
 8013010:	613b      	str	r3, [r7, #16]
   return(result);
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013018:	63fb      	str	r3, [r7, #60]	; 0x3c
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	461a      	mov	r2, r3
 8013020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013022:	623b      	str	r3, [r7, #32]
 8013024:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013026:	69f9      	ldr	r1, [r7, #28]
 8013028:	6a3a      	ldr	r2, [r7, #32]
 801302a:	e841 2300 	strex	r3, r2, [r1]
 801302e:	61bb      	str	r3, [r7, #24]
   return(result);
 8013030:	69bb      	ldr	r3, [r7, #24]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d1e6      	bne.n	8013004 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8013036:	2300      	movs	r3, #0
 8013038:	e000      	b.n	801303c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 801303a:	2302      	movs	r3, #2
  }
}
 801303c:	4618      	mov	r0, r3
 801303e:	3744      	adds	r7, #68	; 0x44
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr
 8013048:	08014e6b 	.word	0x08014e6b
 801304c:	08014d8b 	.word	0x08014d8b
 8013050:	08014cc9 	.word	0x08014cc9
 8013054:	08014c11 	.word	0x08014c11

08013058 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b08a      	sub	sp, #40	; 0x28
 801305c:	af00      	add	r7, sp, #0
 801305e:	60f8      	str	r0, [r7, #12]
 8013060:	60b9      	str	r1, [r7, #8]
 8013062:	4613      	mov	r3, r2
 8013064:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801306c:	2b20      	cmp	r3, #32
 801306e:	d142      	bne.n	80130f6 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d002      	beq.n	801307c <HAL_UART_Receive_IT+0x24>
 8013076:	88fb      	ldrh	r3, [r7, #6]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d101      	bne.n	8013080 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 801307c:	2301      	movs	r3, #1
 801307e:	e03b      	b.n	80130f8 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013086:	2b01      	cmp	r3, #1
 8013088:	d101      	bne.n	801308e <HAL_UART_Receive_IT+0x36>
 801308a:	2302      	movs	r3, #2
 801308c:	e034      	b.n	80130f8 <HAL_UART_Receive_IT+0xa0>
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2201      	movs	r2, #1
 8013092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	2200      	movs	r2, #0
 801309a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	4a17      	ldr	r2, [pc, #92]	; (8013100 <HAL_UART_Receive_IT+0xa8>)
 80130a2:	4293      	cmp	r3, r2
 80130a4:	d01f      	beq.n	80130e6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	685b      	ldr	r3, [r3, #4]
 80130ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d018      	beq.n	80130e6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	e853 3f00 	ldrex	r3, [r3]
 80130c0:	613b      	str	r3, [r7, #16]
   return(result);
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80130c8:	627b      	str	r3, [r7, #36]	; 0x24
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	461a      	mov	r2, r3
 80130d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d2:	623b      	str	r3, [r7, #32]
 80130d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130d6:	69f9      	ldr	r1, [r7, #28]
 80130d8:	6a3a      	ldr	r2, [r7, #32]
 80130da:	e841 2300 	strex	r3, r2, [r1]
 80130de:	61bb      	str	r3, [r7, #24]
   return(result);
 80130e0:	69bb      	ldr	r3, [r7, #24]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d1e6      	bne.n	80130b4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80130e6:	88fb      	ldrh	r3, [r7, #6]
 80130e8:	461a      	mov	r2, r3
 80130ea:	68b9      	ldr	r1, [r7, #8]
 80130ec:	68f8      	ldr	r0, [r7, #12]
 80130ee:	f001 fbe9 	bl	80148c4 <UART_Start_Receive_IT>
 80130f2:	4603      	mov	r3, r0
 80130f4:	e000      	b.n	80130f8 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80130f6:	2302      	movs	r3, #2
  }
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	3728      	adds	r7, #40	; 0x28
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}
 8013100:	58000c00 	.word	0x58000c00

08013104 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b0ba      	sub	sp, #232	; 0xe8
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	69db      	ldr	r3, [r3, #28]
 8013112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	689b      	ldr	r3, [r3, #8]
 8013126:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801312a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801312e:	f640 030f 	movw	r3, #2063	; 0x80f
 8013132:	4013      	ands	r3, r2
 8013134:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8013138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801313c:	2b00      	cmp	r3, #0
 801313e:	d11b      	bne.n	8013178 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8013140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013144:	f003 0320 	and.w	r3, r3, #32
 8013148:	2b00      	cmp	r3, #0
 801314a:	d015      	beq.n	8013178 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801314c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013150:	f003 0320 	and.w	r3, r3, #32
 8013154:	2b00      	cmp	r3, #0
 8013156:	d105      	bne.n	8013164 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8013158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801315c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013160:	2b00      	cmp	r3, #0
 8013162:	d009      	beq.n	8013178 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013168:	2b00      	cmp	r3, #0
 801316a:	f000 835a 	beq.w	8013822 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	4798      	blx	r3
      }
      return;
 8013176:	e354      	b.n	8013822 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013178:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801317c:	2b00      	cmp	r3, #0
 801317e:	f000 811f 	beq.w	80133c0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8013182:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013186:	4b8b      	ldr	r3, [pc, #556]	; (80133b4 <HAL_UART_IRQHandler+0x2b0>)
 8013188:	4013      	ands	r3, r2
 801318a:	2b00      	cmp	r3, #0
 801318c:	d106      	bne.n	801319c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801318e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8013192:	4b89      	ldr	r3, [pc, #548]	; (80133b8 <HAL_UART_IRQHandler+0x2b4>)
 8013194:	4013      	ands	r3, r2
 8013196:	2b00      	cmp	r3, #0
 8013198:	f000 8112 	beq.w	80133c0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801319c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80131a0:	f003 0301 	and.w	r3, r3, #1
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d011      	beq.n	80131cc <HAL_UART_IRQHandler+0xc8>
 80131a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80131ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d00b      	beq.n	80131cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	2201      	movs	r2, #1
 80131ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80131c2:	f043 0201 	orr.w	r2, r3, #1
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80131cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80131d0:	f003 0302 	and.w	r3, r3, #2
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d011      	beq.n	80131fc <HAL_UART_IRQHandler+0xf8>
 80131d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80131dc:	f003 0301 	and.w	r3, r3, #1
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d00b      	beq.n	80131fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	2202      	movs	r2, #2
 80131ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80131f2:	f043 0204 	orr.w	r2, r3, #4
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80131fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013200:	f003 0304 	and.w	r3, r3, #4
 8013204:	2b00      	cmp	r3, #0
 8013206:	d011      	beq.n	801322c <HAL_UART_IRQHandler+0x128>
 8013208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801320c:	f003 0301 	and.w	r3, r3, #1
 8013210:	2b00      	cmp	r3, #0
 8013212:	d00b      	beq.n	801322c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	2204      	movs	r2, #4
 801321a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013222:	f043 0202 	orr.w	r2, r3, #2
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801322c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013230:	f003 0308 	and.w	r3, r3, #8
 8013234:	2b00      	cmp	r3, #0
 8013236:	d017      	beq.n	8013268 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8013238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801323c:	f003 0320 	and.w	r3, r3, #32
 8013240:	2b00      	cmp	r3, #0
 8013242:	d105      	bne.n	8013250 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8013244:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8013248:	4b5a      	ldr	r3, [pc, #360]	; (80133b4 <HAL_UART_IRQHandler+0x2b0>)
 801324a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801324c:	2b00      	cmp	r3, #0
 801324e:	d00b      	beq.n	8013268 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	2208      	movs	r2, #8
 8013256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801325e:	f043 0208 	orr.w	r2, r3, #8
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801326c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013270:	2b00      	cmp	r3, #0
 8013272:	d012      	beq.n	801329a <HAL_UART_IRQHandler+0x196>
 8013274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013278:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801327c:	2b00      	cmp	r3, #0
 801327e:	d00c      	beq.n	801329a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013288:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013290:	f043 0220 	orr.w	r2, r3, #32
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	f000 82c0 	beq.w	8013826 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80132a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80132aa:	f003 0320 	and.w	r3, r3, #32
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d013      	beq.n	80132da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80132b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80132b6:	f003 0320 	and.w	r3, r3, #32
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d105      	bne.n	80132ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80132be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80132c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d007      	beq.n	80132da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d003      	beq.n	80132da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80132e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	689b      	ldr	r3, [r3, #8]
 80132ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132ee:	2b40      	cmp	r3, #64	; 0x40
 80132f0:	d005      	beq.n	80132fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80132f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80132f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d04f      	beq.n	801339e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80132fe:	6878      	ldr	r0, [r7, #4]
 8013300:	f001 fc0a 	bl	8014b18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	689b      	ldr	r3, [r3, #8]
 801330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801330e:	2b40      	cmp	r3, #64	; 0x40
 8013310:	d141      	bne.n	8013396 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	3308      	adds	r3, #8
 8013318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801331c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013320:	e853 3f00 	ldrex	r3, [r3]
 8013324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8013328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801332c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	3308      	adds	r3, #8
 801333a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801333e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8013342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801334a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801334e:	e841 2300 	strex	r3, r2, [r1]
 8013352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8013356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801335a:	2b00      	cmp	r3, #0
 801335c:	d1d9      	bne.n	8013312 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013362:	2b00      	cmp	r3, #0
 8013364:	d013      	beq.n	801338e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801336a:	4a14      	ldr	r2, [pc, #80]	; (80133bc <HAL_UART_IRQHandler+0x2b8>)
 801336c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013372:	4618      	mov	r0, r3
 8013374:	f7f6 ff90 	bl	800a298 <HAL_DMA_Abort_IT>
 8013378:	4603      	mov	r3, r0
 801337a:	2b00      	cmp	r3, #0
 801337c:	d017      	beq.n	80133ae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013384:	687a      	ldr	r2, [r7, #4]
 8013386:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8013388:	4610      	mov	r0, r2
 801338a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801338c:	e00f      	b.n	80133ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 fa60 	bl	8013854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013394:	e00b      	b.n	80133ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f000 fa5c 	bl	8013854 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801339c:	e007      	b.n	80133ae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f000 fa58 	bl	8013854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2200      	movs	r2, #0
 80133a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80133ac:	e23b      	b.n	8013826 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133ae:	bf00      	nop
    return;
 80133b0:	e239      	b.n	8013826 <HAL_UART_IRQHandler+0x722>
 80133b2:	bf00      	nop
 80133b4:	10000001 	.word	0x10000001
 80133b8:	04000120 	.word	0x04000120
 80133bc:	08014be5 	.word	0x08014be5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133c4:	2b01      	cmp	r3, #1
 80133c6:	f040 81ce 	bne.w	8013766 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80133ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80133ce:	f003 0310 	and.w	r3, r3, #16
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	f000 81c7 	beq.w	8013766 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80133d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80133dc:	f003 0310 	and.w	r3, r3, #16
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	f000 81c0 	beq.w	8013766 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	681b      	ldr	r3, [r3, #0]
 80133ea:	2210      	movs	r2, #16
 80133ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	689b      	ldr	r3, [r3, #8]
 80133f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133f8:	2b40      	cmp	r3, #64	; 0x40
 80133fa:	f040 813b 	bne.w	8013674 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4a8b      	ldr	r2, [pc, #556]	; (8013634 <HAL_UART_IRQHandler+0x530>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d059      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	4a89      	ldr	r2, [pc, #548]	; (8013638 <HAL_UART_IRQHandler+0x534>)
 8013412:	4293      	cmp	r3, r2
 8013414:	d053      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	4a87      	ldr	r2, [pc, #540]	; (801363c <HAL_UART_IRQHandler+0x538>)
 801341e:	4293      	cmp	r3, r2
 8013420:	d04d      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	4a85      	ldr	r2, [pc, #532]	; (8013640 <HAL_UART_IRQHandler+0x53c>)
 801342a:	4293      	cmp	r3, r2
 801342c:	d047      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	4a83      	ldr	r2, [pc, #524]	; (8013644 <HAL_UART_IRQHandler+0x540>)
 8013436:	4293      	cmp	r3, r2
 8013438:	d041      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4a81      	ldr	r2, [pc, #516]	; (8013648 <HAL_UART_IRQHandler+0x544>)
 8013442:	4293      	cmp	r3, r2
 8013444:	d03b      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4a7f      	ldr	r2, [pc, #508]	; (801364c <HAL_UART_IRQHandler+0x548>)
 801344e:	4293      	cmp	r3, r2
 8013450:	d035      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	4a7d      	ldr	r2, [pc, #500]	; (8013650 <HAL_UART_IRQHandler+0x54c>)
 801345a:	4293      	cmp	r3, r2
 801345c:	d02f      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	4a7b      	ldr	r2, [pc, #492]	; (8013654 <HAL_UART_IRQHandler+0x550>)
 8013466:	4293      	cmp	r3, r2
 8013468:	d029      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4a79      	ldr	r2, [pc, #484]	; (8013658 <HAL_UART_IRQHandler+0x554>)
 8013472:	4293      	cmp	r3, r2
 8013474:	d023      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	4a77      	ldr	r2, [pc, #476]	; (801365c <HAL_UART_IRQHandler+0x558>)
 801347e:	4293      	cmp	r3, r2
 8013480:	d01d      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	4a75      	ldr	r2, [pc, #468]	; (8013660 <HAL_UART_IRQHandler+0x55c>)
 801348a:	4293      	cmp	r3, r2
 801348c:	d017      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	4a73      	ldr	r2, [pc, #460]	; (8013664 <HAL_UART_IRQHandler+0x560>)
 8013496:	4293      	cmp	r3, r2
 8013498:	d011      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	4a71      	ldr	r2, [pc, #452]	; (8013668 <HAL_UART_IRQHandler+0x564>)
 80134a2:	4293      	cmp	r3, r2
 80134a4:	d00b      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	4a6f      	ldr	r2, [pc, #444]	; (801366c <HAL_UART_IRQHandler+0x568>)
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d005      	beq.n	80134be <HAL_UART_IRQHandler+0x3ba>
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	4a6d      	ldr	r2, [pc, #436]	; (8013670 <HAL_UART_IRQHandler+0x56c>)
 80134ba:	4293      	cmp	r3, r2
 80134bc:	d105      	bne.n	80134ca <HAL_UART_IRQHandler+0x3c6>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	e004      	b.n	80134d4 <HAL_UART_IRQHandler+0x3d0>
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	b29b      	uxth	r3, r3
 80134d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80134d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80134dc:	2b00      	cmp	r3, #0
 80134de:	f000 81a4 	beq.w	801382a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80134e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80134ec:	429a      	cmp	r2, r3
 80134ee:	f080 819c 	bcs.w	801382a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80134f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013500:	69db      	ldr	r3, [r3, #28]
 8013502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013506:	f000 8086 	beq.w	8013616 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013516:	e853 3f00 	ldrex	r3, [r3]
 801351a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801351e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013522:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	461a      	mov	r2, r3
 8013530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013534:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8013538:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801353c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8013540:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8013544:	e841 2300 	strex	r3, r2, [r1]
 8013548:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801354c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013550:	2b00      	cmp	r3, #0
 8013552:	d1da      	bne.n	801350a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	3308      	adds	r3, #8
 801355a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801355c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801355e:	e853 3f00 	ldrex	r3, [r3]
 8013562:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8013564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013566:	f023 0301 	bic.w	r3, r3, #1
 801356a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	3308      	adds	r3, #8
 8013574:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8013578:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801357c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801357e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8013580:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013584:	e841 2300 	strex	r3, r2, [r1]
 8013588:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801358a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801358c:	2b00      	cmp	r3, #0
 801358e:	d1e1      	bne.n	8013554 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	3308      	adds	r3, #8
 8013596:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801359a:	e853 3f00 	ldrex	r3, [r3]
 801359e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80135a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80135a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80135a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	3308      	adds	r3, #8
 80135b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80135b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80135b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135b8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80135ba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80135bc:	e841 2300 	strex	r3, r2, [r1]
 80135c0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80135c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d1e3      	bne.n	8013590 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2220      	movs	r2, #32
 80135cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2200      	movs	r2, #0
 80135d4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135de:	e853 3f00 	ldrex	r3, [r3]
 80135e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80135e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135e6:	f023 0310 	bic.w	r3, r3, #16
 80135ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	461a      	mov	r2, r3
 80135f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80135f8:	65bb      	str	r3, [r7, #88]	; 0x58
 80135fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80135fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013600:	e841 2300 	strex	r3, r2, [r1]
 8013604:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013608:	2b00      	cmp	r3, #0
 801360a:	d1e4      	bne.n	80135d6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013610:	4618      	mov	r0, r3
 8013612:	f7f6 fb23 	bl	8009c5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013622:	b29b      	uxth	r3, r3
 8013624:	1ad3      	subs	r3, r2, r3
 8013626:	b29b      	uxth	r3, r3
 8013628:	4619      	mov	r1, r3
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f000 f91c 	bl	8013868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013630:	e0fb      	b.n	801382a <HAL_UART_IRQHandler+0x726>
 8013632:	bf00      	nop
 8013634:	40020010 	.word	0x40020010
 8013638:	40020028 	.word	0x40020028
 801363c:	40020040 	.word	0x40020040
 8013640:	40020058 	.word	0x40020058
 8013644:	40020070 	.word	0x40020070
 8013648:	40020088 	.word	0x40020088
 801364c:	400200a0 	.word	0x400200a0
 8013650:	400200b8 	.word	0x400200b8
 8013654:	40020410 	.word	0x40020410
 8013658:	40020428 	.word	0x40020428
 801365c:	40020440 	.word	0x40020440
 8013660:	40020458 	.word	0x40020458
 8013664:	40020470 	.word	0x40020470
 8013668:	40020488 	.word	0x40020488
 801366c:	400204a0 	.word	0x400204a0
 8013670:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013680:	b29b      	uxth	r3, r3
 8013682:	1ad3      	subs	r3, r2, r3
 8013684:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801368e:	b29b      	uxth	r3, r3
 8013690:	2b00      	cmp	r3, #0
 8013692:	f000 80cc 	beq.w	801382e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8013696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801369a:	2b00      	cmp	r3, #0
 801369c:	f000 80c7 	beq.w	801382e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136a8:	e853 3f00 	ldrex	r3, [r3]
 80136ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80136ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80136b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	461a      	mov	r2, r3
 80136be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80136c2:	647b      	str	r3, [r7, #68]	; 0x44
 80136c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80136c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136ca:	e841 2300 	strex	r3, r2, [r1]
 80136ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80136d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d1e4      	bne.n	80136a0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	3308      	adds	r3, #8
 80136dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e0:	e853 3f00 	ldrex	r3, [r3]
 80136e4:	623b      	str	r3, [r7, #32]
   return(result);
 80136e6:	6a3a      	ldr	r2, [r7, #32]
 80136e8:	4b54      	ldr	r3, [pc, #336]	; (801383c <HAL_UART_IRQHandler+0x738>)
 80136ea:	4013      	ands	r3, r2
 80136ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	3308      	adds	r3, #8
 80136f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80136fa:	633a      	str	r2, [r7, #48]	; 0x30
 80136fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013702:	e841 2300 	strex	r3, r2, [r1]
 8013706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370a:	2b00      	cmp	r3, #0
 801370c:	d1e3      	bne.n	80136d6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2220      	movs	r2, #32
 8013712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2200      	movs	r2, #0
 801371a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2200      	movs	r2, #0
 8013720:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	e853 3f00 	ldrex	r3, [r3]
 801372e:	60fb      	str	r3, [r7, #12]
   return(result);
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f023 0310 	bic.w	r3, r3, #16
 8013736:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	461a      	mov	r2, r3
 8013740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8013744:	61fb      	str	r3, [r7, #28]
 8013746:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013748:	69b9      	ldr	r1, [r7, #24]
 801374a:	69fa      	ldr	r2, [r7, #28]
 801374c:	e841 2300 	strex	r3, r2, [r1]
 8013750:	617b      	str	r3, [r7, #20]
   return(result);
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d1e4      	bne.n	8013722 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013758:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801375c:	4619      	mov	r1, r3
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	f000 f882 	bl	8013868 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013764:	e063      	b.n	801382e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801376a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801376e:	2b00      	cmp	r3, #0
 8013770:	d00e      	beq.n	8013790 <HAL_UART_IRQHandler+0x68c>
 8013772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801377a:	2b00      	cmp	r3, #0
 801377c:	d008      	beq.n	8013790 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f002 f86b 	bl	8015864 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801378e:	e051      	b.n	8013834 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8013790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013798:	2b00      	cmp	r3, #0
 801379a:	d014      	beq.n	80137c6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801379c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80137a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d105      	bne.n	80137b4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80137a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80137ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d008      	beq.n	80137c6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d03a      	beq.n	8013832 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	4798      	blx	r3
    }
    return;
 80137c4:	e035      	b.n	8013832 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80137c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d009      	beq.n	80137e6 <HAL_UART_IRQHandler+0x6e2>
 80137d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80137d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d003      	beq.n	80137e6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f001 fbb8 	bl	8014f54 <UART_EndTransmit_IT>
    return;
 80137e4:	e026      	b.n	8013834 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80137e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80137ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d009      	beq.n	8013806 <HAL_UART_IRQHandler+0x702>
 80137f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80137f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d003      	beq.n	8013806 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f002 f844 	bl	801588c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013804:	e016      	b.n	8013834 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8013806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801380a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801380e:	2b00      	cmp	r3, #0
 8013810:	d010      	beq.n	8013834 <HAL_UART_IRQHandler+0x730>
 8013812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013816:	2b00      	cmp	r3, #0
 8013818:	da0c      	bge.n	8013834 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801381a:	6878      	ldr	r0, [r7, #4]
 801381c:	f002 f82c 	bl	8015878 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013820:	e008      	b.n	8013834 <HAL_UART_IRQHandler+0x730>
      return;
 8013822:	bf00      	nop
 8013824:	e006      	b.n	8013834 <HAL_UART_IRQHandler+0x730>
    return;
 8013826:	bf00      	nop
 8013828:	e004      	b.n	8013834 <HAL_UART_IRQHandler+0x730>
      return;
 801382a:	bf00      	nop
 801382c:	e002      	b.n	8013834 <HAL_UART_IRQHandler+0x730>
      return;
 801382e:	bf00      	nop
 8013830:	e000      	b.n	8013834 <HAL_UART_IRQHandler+0x730>
    return;
 8013832:	bf00      	nop
  }
}
 8013834:	37e8      	adds	r7, #232	; 0xe8
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}
 801383a:	bf00      	nop
 801383c:	effffffe 	.word	0xeffffffe

08013840 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013840:	b480      	push	{r7}
 8013842:	b083      	sub	sp, #12
 8013844:	af00      	add	r7, sp, #0
 8013846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8013848:	bf00      	nop
 801384a:	370c      	adds	r7, #12
 801384c:	46bd      	mov	sp, r7
 801384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013852:	4770      	bx	lr

08013854 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013854:	b480      	push	{r7}
 8013856:	b083      	sub	sp, #12
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801385c:	bf00      	nop
 801385e:	370c      	adds	r7, #12
 8013860:	46bd      	mov	sp, r7
 8013862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013866:	4770      	bx	lr

08013868 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013868:	b480      	push	{r7}
 801386a:	b083      	sub	sp, #12
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	460b      	mov	r3, r1
 8013872:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013874:	bf00      	nop
 8013876:	370c      	adds	r7, #12
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr

08013880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013884:	b092      	sub	sp, #72	; 0x48
 8013886:	af00      	add	r7, sp, #0
 8013888:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801388a:	2300      	movs	r3, #0
 801388c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	689a      	ldr	r2, [r3, #8]
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	691b      	ldr	r3, [r3, #16]
 8013898:	431a      	orrs	r2, r3
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	695b      	ldr	r3, [r3, #20]
 801389e:	431a      	orrs	r2, r3
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	69db      	ldr	r3, [r3, #28]
 80138a4:	4313      	orrs	r3, r2
 80138a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	681a      	ldr	r2, [r3, #0]
 80138ae:	4bbe      	ldr	r3, [pc, #760]	; (8013ba8 <UART_SetConfig+0x328>)
 80138b0:	4013      	ands	r3, r2
 80138b2:	697a      	ldr	r2, [r7, #20]
 80138b4:	6812      	ldr	r2, [r2, #0]
 80138b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80138b8:	430b      	orrs	r3, r1
 80138ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80138c6:	697b      	ldr	r3, [r7, #20]
 80138c8:	68da      	ldr	r2, [r3, #12]
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	430a      	orrs	r2, r1
 80138d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80138d2:	697b      	ldr	r3, [r7, #20]
 80138d4:	699b      	ldr	r3, [r3, #24]
 80138d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	4ab3      	ldr	r2, [pc, #716]	; (8013bac <UART_SetConfig+0x32c>)
 80138de:	4293      	cmp	r3, r2
 80138e0:	d004      	beq.n	80138ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	6a1b      	ldr	r3, [r3, #32]
 80138e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80138e8:	4313      	orrs	r3, r2
 80138ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	689a      	ldr	r2, [r3, #8]
 80138f2:	4baf      	ldr	r3, [pc, #700]	; (8013bb0 <UART_SetConfig+0x330>)
 80138f4:	4013      	ands	r3, r2
 80138f6:	697a      	ldr	r2, [r7, #20]
 80138f8:	6812      	ldr	r2, [r2, #0]
 80138fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80138fc:	430b      	orrs	r3, r1
 80138fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013906:	f023 010f 	bic.w	r1, r3, #15
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801390e:	697b      	ldr	r3, [r7, #20]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	430a      	orrs	r2, r1
 8013914:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4aa6      	ldr	r2, [pc, #664]	; (8013bb4 <UART_SetConfig+0x334>)
 801391c:	4293      	cmp	r3, r2
 801391e:	d177      	bne.n	8013a10 <UART_SetConfig+0x190>
 8013920:	4ba5      	ldr	r3, [pc, #660]	; (8013bb8 <UART_SetConfig+0x338>)
 8013922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013928:	2b28      	cmp	r3, #40	; 0x28
 801392a:	d86d      	bhi.n	8013a08 <UART_SetConfig+0x188>
 801392c:	a201      	add	r2, pc, #4	; (adr r2, 8013934 <UART_SetConfig+0xb4>)
 801392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013932:	bf00      	nop
 8013934:	080139d9 	.word	0x080139d9
 8013938:	08013a09 	.word	0x08013a09
 801393c:	08013a09 	.word	0x08013a09
 8013940:	08013a09 	.word	0x08013a09
 8013944:	08013a09 	.word	0x08013a09
 8013948:	08013a09 	.word	0x08013a09
 801394c:	08013a09 	.word	0x08013a09
 8013950:	08013a09 	.word	0x08013a09
 8013954:	080139e1 	.word	0x080139e1
 8013958:	08013a09 	.word	0x08013a09
 801395c:	08013a09 	.word	0x08013a09
 8013960:	08013a09 	.word	0x08013a09
 8013964:	08013a09 	.word	0x08013a09
 8013968:	08013a09 	.word	0x08013a09
 801396c:	08013a09 	.word	0x08013a09
 8013970:	08013a09 	.word	0x08013a09
 8013974:	080139e9 	.word	0x080139e9
 8013978:	08013a09 	.word	0x08013a09
 801397c:	08013a09 	.word	0x08013a09
 8013980:	08013a09 	.word	0x08013a09
 8013984:	08013a09 	.word	0x08013a09
 8013988:	08013a09 	.word	0x08013a09
 801398c:	08013a09 	.word	0x08013a09
 8013990:	08013a09 	.word	0x08013a09
 8013994:	080139f1 	.word	0x080139f1
 8013998:	08013a09 	.word	0x08013a09
 801399c:	08013a09 	.word	0x08013a09
 80139a0:	08013a09 	.word	0x08013a09
 80139a4:	08013a09 	.word	0x08013a09
 80139a8:	08013a09 	.word	0x08013a09
 80139ac:	08013a09 	.word	0x08013a09
 80139b0:	08013a09 	.word	0x08013a09
 80139b4:	080139f9 	.word	0x080139f9
 80139b8:	08013a09 	.word	0x08013a09
 80139bc:	08013a09 	.word	0x08013a09
 80139c0:	08013a09 	.word	0x08013a09
 80139c4:	08013a09 	.word	0x08013a09
 80139c8:	08013a09 	.word	0x08013a09
 80139cc:	08013a09 	.word	0x08013a09
 80139d0:	08013a09 	.word	0x08013a09
 80139d4:	08013a01 	.word	0x08013a01
 80139d8:	2301      	movs	r3, #1
 80139da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80139de:	e326      	b.n	801402e <UART_SetConfig+0x7ae>
 80139e0:	2304      	movs	r3, #4
 80139e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80139e6:	e322      	b.n	801402e <UART_SetConfig+0x7ae>
 80139e8:	2308      	movs	r3, #8
 80139ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80139ee:	e31e      	b.n	801402e <UART_SetConfig+0x7ae>
 80139f0:	2310      	movs	r3, #16
 80139f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80139f6:	e31a      	b.n	801402e <UART_SetConfig+0x7ae>
 80139f8:	2320      	movs	r3, #32
 80139fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80139fe:	e316      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a00:	2340      	movs	r3, #64	; 0x40
 8013a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a06:	e312      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a08:	2380      	movs	r3, #128	; 0x80
 8013a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a0e:	e30e      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a10:	697b      	ldr	r3, [r7, #20]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	4a69      	ldr	r2, [pc, #420]	; (8013bbc <UART_SetConfig+0x33c>)
 8013a16:	4293      	cmp	r3, r2
 8013a18:	d130      	bne.n	8013a7c <UART_SetConfig+0x1fc>
 8013a1a:	4b67      	ldr	r3, [pc, #412]	; (8013bb8 <UART_SetConfig+0x338>)
 8013a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a1e:	f003 0307 	and.w	r3, r3, #7
 8013a22:	2b05      	cmp	r3, #5
 8013a24:	d826      	bhi.n	8013a74 <UART_SetConfig+0x1f4>
 8013a26:	a201      	add	r2, pc, #4	; (adr r2, 8013a2c <UART_SetConfig+0x1ac>)
 8013a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a2c:	08013a45 	.word	0x08013a45
 8013a30:	08013a4d 	.word	0x08013a4d
 8013a34:	08013a55 	.word	0x08013a55
 8013a38:	08013a5d 	.word	0x08013a5d
 8013a3c:	08013a65 	.word	0x08013a65
 8013a40:	08013a6d 	.word	0x08013a6d
 8013a44:	2300      	movs	r3, #0
 8013a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a4a:	e2f0      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a4c:	2304      	movs	r3, #4
 8013a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a52:	e2ec      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a54:	2308      	movs	r3, #8
 8013a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a5a:	e2e8      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a5c:	2310      	movs	r3, #16
 8013a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a62:	e2e4      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a64:	2320      	movs	r3, #32
 8013a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a6a:	e2e0      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a6c:	2340      	movs	r3, #64	; 0x40
 8013a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a72:	e2dc      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a74:	2380      	movs	r3, #128	; 0x80
 8013a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013a7a:	e2d8      	b.n	801402e <UART_SetConfig+0x7ae>
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4a4f      	ldr	r2, [pc, #316]	; (8013bc0 <UART_SetConfig+0x340>)
 8013a82:	4293      	cmp	r3, r2
 8013a84:	d130      	bne.n	8013ae8 <UART_SetConfig+0x268>
 8013a86:	4b4c      	ldr	r3, [pc, #304]	; (8013bb8 <UART_SetConfig+0x338>)
 8013a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a8a:	f003 0307 	and.w	r3, r3, #7
 8013a8e:	2b05      	cmp	r3, #5
 8013a90:	d826      	bhi.n	8013ae0 <UART_SetConfig+0x260>
 8013a92:	a201      	add	r2, pc, #4	; (adr r2, 8013a98 <UART_SetConfig+0x218>)
 8013a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a98:	08013ab1 	.word	0x08013ab1
 8013a9c:	08013ab9 	.word	0x08013ab9
 8013aa0:	08013ac1 	.word	0x08013ac1
 8013aa4:	08013ac9 	.word	0x08013ac9
 8013aa8:	08013ad1 	.word	0x08013ad1
 8013aac:	08013ad9 	.word	0x08013ad9
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ab6:	e2ba      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ab8:	2304      	movs	r3, #4
 8013aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013abe:	e2b6      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ac0:	2308      	movs	r3, #8
 8013ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ac6:	e2b2      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ac8:	2310      	movs	r3, #16
 8013aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ace:	e2ae      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ad0:	2320      	movs	r3, #32
 8013ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ad6:	e2aa      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ad8:	2340      	movs	r3, #64	; 0x40
 8013ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ade:	e2a6      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ae0:	2380      	movs	r3, #128	; 0x80
 8013ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ae6:	e2a2      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	4a35      	ldr	r2, [pc, #212]	; (8013bc4 <UART_SetConfig+0x344>)
 8013aee:	4293      	cmp	r3, r2
 8013af0:	d130      	bne.n	8013b54 <UART_SetConfig+0x2d4>
 8013af2:	4b31      	ldr	r3, [pc, #196]	; (8013bb8 <UART_SetConfig+0x338>)
 8013af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013af6:	f003 0307 	and.w	r3, r3, #7
 8013afa:	2b05      	cmp	r3, #5
 8013afc:	d826      	bhi.n	8013b4c <UART_SetConfig+0x2cc>
 8013afe:	a201      	add	r2, pc, #4	; (adr r2, 8013b04 <UART_SetConfig+0x284>)
 8013b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b04:	08013b1d 	.word	0x08013b1d
 8013b08:	08013b25 	.word	0x08013b25
 8013b0c:	08013b2d 	.word	0x08013b2d
 8013b10:	08013b35 	.word	0x08013b35
 8013b14:	08013b3d 	.word	0x08013b3d
 8013b18:	08013b45 	.word	0x08013b45
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b22:	e284      	b.n	801402e <UART_SetConfig+0x7ae>
 8013b24:	2304      	movs	r3, #4
 8013b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b2a:	e280      	b.n	801402e <UART_SetConfig+0x7ae>
 8013b2c:	2308      	movs	r3, #8
 8013b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b32:	e27c      	b.n	801402e <UART_SetConfig+0x7ae>
 8013b34:	2310      	movs	r3, #16
 8013b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b3a:	e278      	b.n	801402e <UART_SetConfig+0x7ae>
 8013b3c:	2320      	movs	r3, #32
 8013b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b42:	e274      	b.n	801402e <UART_SetConfig+0x7ae>
 8013b44:	2340      	movs	r3, #64	; 0x40
 8013b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b4a:	e270      	b.n	801402e <UART_SetConfig+0x7ae>
 8013b4c:	2380      	movs	r3, #128	; 0x80
 8013b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b52:	e26c      	b.n	801402e <UART_SetConfig+0x7ae>
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	4a1b      	ldr	r2, [pc, #108]	; (8013bc8 <UART_SetConfig+0x348>)
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	d142      	bne.n	8013be4 <UART_SetConfig+0x364>
 8013b5e:	4b16      	ldr	r3, [pc, #88]	; (8013bb8 <UART_SetConfig+0x338>)
 8013b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b62:	f003 0307 	and.w	r3, r3, #7
 8013b66:	2b05      	cmp	r3, #5
 8013b68:	d838      	bhi.n	8013bdc <UART_SetConfig+0x35c>
 8013b6a:	a201      	add	r2, pc, #4	; (adr r2, 8013b70 <UART_SetConfig+0x2f0>)
 8013b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b70:	08013b89 	.word	0x08013b89
 8013b74:	08013b91 	.word	0x08013b91
 8013b78:	08013b99 	.word	0x08013b99
 8013b7c:	08013ba1 	.word	0x08013ba1
 8013b80:	08013bcd 	.word	0x08013bcd
 8013b84:	08013bd5 	.word	0x08013bd5
 8013b88:	2300      	movs	r3, #0
 8013b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b8e:	e24e      	b.n	801402e <UART_SetConfig+0x7ae>
 8013b90:	2304      	movs	r3, #4
 8013b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b96:	e24a      	b.n	801402e <UART_SetConfig+0x7ae>
 8013b98:	2308      	movs	r3, #8
 8013b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013b9e:	e246      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ba0:	2310      	movs	r3, #16
 8013ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ba6:	e242      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ba8:	cfff69f3 	.word	0xcfff69f3
 8013bac:	58000c00 	.word	0x58000c00
 8013bb0:	11fff4ff 	.word	0x11fff4ff
 8013bb4:	40011000 	.word	0x40011000
 8013bb8:	58024400 	.word	0x58024400
 8013bbc:	40004400 	.word	0x40004400
 8013bc0:	40004800 	.word	0x40004800
 8013bc4:	40004c00 	.word	0x40004c00
 8013bc8:	40005000 	.word	0x40005000
 8013bcc:	2320      	movs	r3, #32
 8013bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013bd2:	e22c      	b.n	801402e <UART_SetConfig+0x7ae>
 8013bd4:	2340      	movs	r3, #64	; 0x40
 8013bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013bda:	e228      	b.n	801402e <UART_SetConfig+0x7ae>
 8013bdc:	2380      	movs	r3, #128	; 0x80
 8013bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013be2:	e224      	b.n	801402e <UART_SetConfig+0x7ae>
 8013be4:	697b      	ldr	r3, [r7, #20]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	4ab1      	ldr	r2, [pc, #708]	; (8013eb0 <UART_SetConfig+0x630>)
 8013bea:	4293      	cmp	r3, r2
 8013bec:	d176      	bne.n	8013cdc <UART_SetConfig+0x45c>
 8013bee:	4bb1      	ldr	r3, [pc, #708]	; (8013eb4 <UART_SetConfig+0x634>)
 8013bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013bf6:	2b28      	cmp	r3, #40	; 0x28
 8013bf8:	d86c      	bhi.n	8013cd4 <UART_SetConfig+0x454>
 8013bfa:	a201      	add	r2, pc, #4	; (adr r2, 8013c00 <UART_SetConfig+0x380>)
 8013bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c00:	08013ca5 	.word	0x08013ca5
 8013c04:	08013cd5 	.word	0x08013cd5
 8013c08:	08013cd5 	.word	0x08013cd5
 8013c0c:	08013cd5 	.word	0x08013cd5
 8013c10:	08013cd5 	.word	0x08013cd5
 8013c14:	08013cd5 	.word	0x08013cd5
 8013c18:	08013cd5 	.word	0x08013cd5
 8013c1c:	08013cd5 	.word	0x08013cd5
 8013c20:	08013cad 	.word	0x08013cad
 8013c24:	08013cd5 	.word	0x08013cd5
 8013c28:	08013cd5 	.word	0x08013cd5
 8013c2c:	08013cd5 	.word	0x08013cd5
 8013c30:	08013cd5 	.word	0x08013cd5
 8013c34:	08013cd5 	.word	0x08013cd5
 8013c38:	08013cd5 	.word	0x08013cd5
 8013c3c:	08013cd5 	.word	0x08013cd5
 8013c40:	08013cb5 	.word	0x08013cb5
 8013c44:	08013cd5 	.word	0x08013cd5
 8013c48:	08013cd5 	.word	0x08013cd5
 8013c4c:	08013cd5 	.word	0x08013cd5
 8013c50:	08013cd5 	.word	0x08013cd5
 8013c54:	08013cd5 	.word	0x08013cd5
 8013c58:	08013cd5 	.word	0x08013cd5
 8013c5c:	08013cd5 	.word	0x08013cd5
 8013c60:	08013cbd 	.word	0x08013cbd
 8013c64:	08013cd5 	.word	0x08013cd5
 8013c68:	08013cd5 	.word	0x08013cd5
 8013c6c:	08013cd5 	.word	0x08013cd5
 8013c70:	08013cd5 	.word	0x08013cd5
 8013c74:	08013cd5 	.word	0x08013cd5
 8013c78:	08013cd5 	.word	0x08013cd5
 8013c7c:	08013cd5 	.word	0x08013cd5
 8013c80:	08013cc5 	.word	0x08013cc5
 8013c84:	08013cd5 	.word	0x08013cd5
 8013c88:	08013cd5 	.word	0x08013cd5
 8013c8c:	08013cd5 	.word	0x08013cd5
 8013c90:	08013cd5 	.word	0x08013cd5
 8013c94:	08013cd5 	.word	0x08013cd5
 8013c98:	08013cd5 	.word	0x08013cd5
 8013c9c:	08013cd5 	.word	0x08013cd5
 8013ca0:	08013ccd 	.word	0x08013ccd
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013caa:	e1c0      	b.n	801402e <UART_SetConfig+0x7ae>
 8013cac:	2304      	movs	r3, #4
 8013cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013cb2:	e1bc      	b.n	801402e <UART_SetConfig+0x7ae>
 8013cb4:	2308      	movs	r3, #8
 8013cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013cba:	e1b8      	b.n	801402e <UART_SetConfig+0x7ae>
 8013cbc:	2310      	movs	r3, #16
 8013cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013cc2:	e1b4      	b.n	801402e <UART_SetConfig+0x7ae>
 8013cc4:	2320      	movs	r3, #32
 8013cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013cca:	e1b0      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ccc:	2340      	movs	r3, #64	; 0x40
 8013cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013cd2:	e1ac      	b.n	801402e <UART_SetConfig+0x7ae>
 8013cd4:	2380      	movs	r3, #128	; 0x80
 8013cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013cda:	e1a8      	b.n	801402e <UART_SetConfig+0x7ae>
 8013cdc:	697b      	ldr	r3, [r7, #20]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	4a75      	ldr	r2, [pc, #468]	; (8013eb8 <UART_SetConfig+0x638>)
 8013ce2:	4293      	cmp	r3, r2
 8013ce4:	d130      	bne.n	8013d48 <UART_SetConfig+0x4c8>
 8013ce6:	4b73      	ldr	r3, [pc, #460]	; (8013eb4 <UART_SetConfig+0x634>)
 8013ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cea:	f003 0307 	and.w	r3, r3, #7
 8013cee:	2b05      	cmp	r3, #5
 8013cf0:	d826      	bhi.n	8013d40 <UART_SetConfig+0x4c0>
 8013cf2:	a201      	add	r2, pc, #4	; (adr r2, 8013cf8 <UART_SetConfig+0x478>)
 8013cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cf8:	08013d11 	.word	0x08013d11
 8013cfc:	08013d19 	.word	0x08013d19
 8013d00:	08013d21 	.word	0x08013d21
 8013d04:	08013d29 	.word	0x08013d29
 8013d08:	08013d31 	.word	0x08013d31
 8013d0c:	08013d39 	.word	0x08013d39
 8013d10:	2300      	movs	r3, #0
 8013d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d16:	e18a      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d18:	2304      	movs	r3, #4
 8013d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d1e:	e186      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d20:	2308      	movs	r3, #8
 8013d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d26:	e182      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d28:	2310      	movs	r3, #16
 8013d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d2e:	e17e      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d30:	2320      	movs	r3, #32
 8013d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d36:	e17a      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d38:	2340      	movs	r3, #64	; 0x40
 8013d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d3e:	e176      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d40:	2380      	movs	r3, #128	; 0x80
 8013d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d46:	e172      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	4a5b      	ldr	r2, [pc, #364]	; (8013ebc <UART_SetConfig+0x63c>)
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	d130      	bne.n	8013db4 <UART_SetConfig+0x534>
 8013d52:	4b58      	ldr	r3, [pc, #352]	; (8013eb4 <UART_SetConfig+0x634>)
 8013d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d56:	f003 0307 	and.w	r3, r3, #7
 8013d5a:	2b05      	cmp	r3, #5
 8013d5c:	d826      	bhi.n	8013dac <UART_SetConfig+0x52c>
 8013d5e:	a201      	add	r2, pc, #4	; (adr r2, 8013d64 <UART_SetConfig+0x4e4>)
 8013d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d64:	08013d7d 	.word	0x08013d7d
 8013d68:	08013d85 	.word	0x08013d85
 8013d6c:	08013d8d 	.word	0x08013d8d
 8013d70:	08013d95 	.word	0x08013d95
 8013d74:	08013d9d 	.word	0x08013d9d
 8013d78:	08013da5 	.word	0x08013da5
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d82:	e154      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d84:	2304      	movs	r3, #4
 8013d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d8a:	e150      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d8c:	2308      	movs	r3, #8
 8013d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d92:	e14c      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d94:	2310      	movs	r3, #16
 8013d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013d9a:	e148      	b.n	801402e <UART_SetConfig+0x7ae>
 8013d9c:	2320      	movs	r3, #32
 8013d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013da2:	e144      	b.n	801402e <UART_SetConfig+0x7ae>
 8013da4:	2340      	movs	r3, #64	; 0x40
 8013da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013daa:	e140      	b.n	801402e <UART_SetConfig+0x7ae>
 8013dac:	2380      	movs	r3, #128	; 0x80
 8013dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013db2:	e13c      	b.n	801402e <UART_SetConfig+0x7ae>
 8013db4:	697b      	ldr	r3, [r7, #20]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4a41      	ldr	r2, [pc, #260]	; (8013ec0 <UART_SetConfig+0x640>)
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	f040 8082 	bne.w	8013ec4 <UART_SetConfig+0x644>
 8013dc0:	4b3c      	ldr	r3, [pc, #240]	; (8013eb4 <UART_SetConfig+0x634>)
 8013dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013dc8:	2b28      	cmp	r3, #40	; 0x28
 8013dca:	d86d      	bhi.n	8013ea8 <UART_SetConfig+0x628>
 8013dcc:	a201      	add	r2, pc, #4	; (adr r2, 8013dd4 <UART_SetConfig+0x554>)
 8013dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dd2:	bf00      	nop
 8013dd4:	08013e79 	.word	0x08013e79
 8013dd8:	08013ea9 	.word	0x08013ea9
 8013ddc:	08013ea9 	.word	0x08013ea9
 8013de0:	08013ea9 	.word	0x08013ea9
 8013de4:	08013ea9 	.word	0x08013ea9
 8013de8:	08013ea9 	.word	0x08013ea9
 8013dec:	08013ea9 	.word	0x08013ea9
 8013df0:	08013ea9 	.word	0x08013ea9
 8013df4:	08013e81 	.word	0x08013e81
 8013df8:	08013ea9 	.word	0x08013ea9
 8013dfc:	08013ea9 	.word	0x08013ea9
 8013e00:	08013ea9 	.word	0x08013ea9
 8013e04:	08013ea9 	.word	0x08013ea9
 8013e08:	08013ea9 	.word	0x08013ea9
 8013e0c:	08013ea9 	.word	0x08013ea9
 8013e10:	08013ea9 	.word	0x08013ea9
 8013e14:	08013e89 	.word	0x08013e89
 8013e18:	08013ea9 	.word	0x08013ea9
 8013e1c:	08013ea9 	.word	0x08013ea9
 8013e20:	08013ea9 	.word	0x08013ea9
 8013e24:	08013ea9 	.word	0x08013ea9
 8013e28:	08013ea9 	.word	0x08013ea9
 8013e2c:	08013ea9 	.word	0x08013ea9
 8013e30:	08013ea9 	.word	0x08013ea9
 8013e34:	08013e91 	.word	0x08013e91
 8013e38:	08013ea9 	.word	0x08013ea9
 8013e3c:	08013ea9 	.word	0x08013ea9
 8013e40:	08013ea9 	.word	0x08013ea9
 8013e44:	08013ea9 	.word	0x08013ea9
 8013e48:	08013ea9 	.word	0x08013ea9
 8013e4c:	08013ea9 	.word	0x08013ea9
 8013e50:	08013ea9 	.word	0x08013ea9
 8013e54:	08013e99 	.word	0x08013e99
 8013e58:	08013ea9 	.word	0x08013ea9
 8013e5c:	08013ea9 	.word	0x08013ea9
 8013e60:	08013ea9 	.word	0x08013ea9
 8013e64:	08013ea9 	.word	0x08013ea9
 8013e68:	08013ea9 	.word	0x08013ea9
 8013e6c:	08013ea9 	.word	0x08013ea9
 8013e70:	08013ea9 	.word	0x08013ea9
 8013e74:	08013ea1 	.word	0x08013ea1
 8013e78:	2301      	movs	r3, #1
 8013e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e7e:	e0d6      	b.n	801402e <UART_SetConfig+0x7ae>
 8013e80:	2304      	movs	r3, #4
 8013e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e86:	e0d2      	b.n	801402e <UART_SetConfig+0x7ae>
 8013e88:	2308      	movs	r3, #8
 8013e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e8e:	e0ce      	b.n	801402e <UART_SetConfig+0x7ae>
 8013e90:	2310      	movs	r3, #16
 8013e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e96:	e0ca      	b.n	801402e <UART_SetConfig+0x7ae>
 8013e98:	2320      	movs	r3, #32
 8013e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e9e:	e0c6      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ea0:	2340      	movs	r3, #64	; 0x40
 8013ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ea6:	e0c2      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ea8:	2380      	movs	r3, #128	; 0x80
 8013eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eae:	e0be      	b.n	801402e <UART_SetConfig+0x7ae>
 8013eb0:	40011400 	.word	0x40011400
 8013eb4:	58024400 	.word	0x58024400
 8013eb8:	40007800 	.word	0x40007800
 8013ebc:	40007c00 	.word	0x40007c00
 8013ec0:	40011800 	.word	0x40011800
 8013ec4:	697b      	ldr	r3, [r7, #20]
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	4aad      	ldr	r2, [pc, #692]	; (8014180 <UART_SetConfig+0x900>)
 8013eca:	4293      	cmp	r3, r2
 8013ecc:	d176      	bne.n	8013fbc <UART_SetConfig+0x73c>
 8013ece:	4bad      	ldr	r3, [pc, #692]	; (8014184 <UART_SetConfig+0x904>)
 8013ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013ed6:	2b28      	cmp	r3, #40	; 0x28
 8013ed8:	d86c      	bhi.n	8013fb4 <UART_SetConfig+0x734>
 8013eda:	a201      	add	r2, pc, #4	; (adr r2, 8013ee0 <UART_SetConfig+0x660>)
 8013edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ee0:	08013f85 	.word	0x08013f85
 8013ee4:	08013fb5 	.word	0x08013fb5
 8013ee8:	08013fb5 	.word	0x08013fb5
 8013eec:	08013fb5 	.word	0x08013fb5
 8013ef0:	08013fb5 	.word	0x08013fb5
 8013ef4:	08013fb5 	.word	0x08013fb5
 8013ef8:	08013fb5 	.word	0x08013fb5
 8013efc:	08013fb5 	.word	0x08013fb5
 8013f00:	08013f8d 	.word	0x08013f8d
 8013f04:	08013fb5 	.word	0x08013fb5
 8013f08:	08013fb5 	.word	0x08013fb5
 8013f0c:	08013fb5 	.word	0x08013fb5
 8013f10:	08013fb5 	.word	0x08013fb5
 8013f14:	08013fb5 	.word	0x08013fb5
 8013f18:	08013fb5 	.word	0x08013fb5
 8013f1c:	08013fb5 	.word	0x08013fb5
 8013f20:	08013f95 	.word	0x08013f95
 8013f24:	08013fb5 	.word	0x08013fb5
 8013f28:	08013fb5 	.word	0x08013fb5
 8013f2c:	08013fb5 	.word	0x08013fb5
 8013f30:	08013fb5 	.word	0x08013fb5
 8013f34:	08013fb5 	.word	0x08013fb5
 8013f38:	08013fb5 	.word	0x08013fb5
 8013f3c:	08013fb5 	.word	0x08013fb5
 8013f40:	08013f9d 	.word	0x08013f9d
 8013f44:	08013fb5 	.word	0x08013fb5
 8013f48:	08013fb5 	.word	0x08013fb5
 8013f4c:	08013fb5 	.word	0x08013fb5
 8013f50:	08013fb5 	.word	0x08013fb5
 8013f54:	08013fb5 	.word	0x08013fb5
 8013f58:	08013fb5 	.word	0x08013fb5
 8013f5c:	08013fb5 	.word	0x08013fb5
 8013f60:	08013fa5 	.word	0x08013fa5
 8013f64:	08013fb5 	.word	0x08013fb5
 8013f68:	08013fb5 	.word	0x08013fb5
 8013f6c:	08013fb5 	.word	0x08013fb5
 8013f70:	08013fb5 	.word	0x08013fb5
 8013f74:	08013fb5 	.word	0x08013fb5
 8013f78:	08013fb5 	.word	0x08013fb5
 8013f7c:	08013fb5 	.word	0x08013fb5
 8013f80:	08013fad 	.word	0x08013fad
 8013f84:	2301      	movs	r3, #1
 8013f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f8a:	e050      	b.n	801402e <UART_SetConfig+0x7ae>
 8013f8c:	2304      	movs	r3, #4
 8013f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f92:	e04c      	b.n	801402e <UART_SetConfig+0x7ae>
 8013f94:	2308      	movs	r3, #8
 8013f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f9a:	e048      	b.n	801402e <UART_SetConfig+0x7ae>
 8013f9c:	2310      	movs	r3, #16
 8013f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fa2:	e044      	b.n	801402e <UART_SetConfig+0x7ae>
 8013fa4:	2320      	movs	r3, #32
 8013fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013faa:	e040      	b.n	801402e <UART_SetConfig+0x7ae>
 8013fac:	2340      	movs	r3, #64	; 0x40
 8013fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fb2:	e03c      	b.n	801402e <UART_SetConfig+0x7ae>
 8013fb4:	2380      	movs	r3, #128	; 0x80
 8013fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fba:	e038      	b.n	801402e <UART_SetConfig+0x7ae>
 8013fbc:	697b      	ldr	r3, [r7, #20]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4a71      	ldr	r2, [pc, #452]	; (8014188 <UART_SetConfig+0x908>)
 8013fc2:	4293      	cmp	r3, r2
 8013fc4:	d130      	bne.n	8014028 <UART_SetConfig+0x7a8>
 8013fc6:	4b6f      	ldr	r3, [pc, #444]	; (8014184 <UART_SetConfig+0x904>)
 8013fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fca:	f003 0307 	and.w	r3, r3, #7
 8013fce:	2b05      	cmp	r3, #5
 8013fd0:	d826      	bhi.n	8014020 <UART_SetConfig+0x7a0>
 8013fd2:	a201      	add	r2, pc, #4	; (adr r2, 8013fd8 <UART_SetConfig+0x758>)
 8013fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fd8:	08013ff1 	.word	0x08013ff1
 8013fdc:	08013ff9 	.word	0x08013ff9
 8013fe0:	08014001 	.word	0x08014001
 8013fe4:	08014009 	.word	0x08014009
 8013fe8:	08014011 	.word	0x08014011
 8013fec:	08014019 	.word	0x08014019
 8013ff0:	2302      	movs	r3, #2
 8013ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ff6:	e01a      	b.n	801402e <UART_SetConfig+0x7ae>
 8013ff8:	2304      	movs	r3, #4
 8013ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ffe:	e016      	b.n	801402e <UART_SetConfig+0x7ae>
 8014000:	2308      	movs	r3, #8
 8014002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014006:	e012      	b.n	801402e <UART_SetConfig+0x7ae>
 8014008:	2310      	movs	r3, #16
 801400a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801400e:	e00e      	b.n	801402e <UART_SetConfig+0x7ae>
 8014010:	2320      	movs	r3, #32
 8014012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014016:	e00a      	b.n	801402e <UART_SetConfig+0x7ae>
 8014018:	2340      	movs	r3, #64	; 0x40
 801401a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801401e:	e006      	b.n	801402e <UART_SetConfig+0x7ae>
 8014020:	2380      	movs	r3, #128	; 0x80
 8014022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014026:	e002      	b.n	801402e <UART_SetConfig+0x7ae>
 8014028:	2380      	movs	r3, #128	; 0x80
 801402a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	4a55      	ldr	r2, [pc, #340]	; (8014188 <UART_SetConfig+0x908>)
 8014034:	4293      	cmp	r3, r2
 8014036:	f040 80f8 	bne.w	801422a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801403a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801403e:	2b20      	cmp	r3, #32
 8014040:	dc46      	bgt.n	80140d0 <UART_SetConfig+0x850>
 8014042:	2b02      	cmp	r3, #2
 8014044:	db75      	blt.n	8014132 <UART_SetConfig+0x8b2>
 8014046:	3b02      	subs	r3, #2
 8014048:	2b1e      	cmp	r3, #30
 801404a:	d872      	bhi.n	8014132 <UART_SetConfig+0x8b2>
 801404c:	a201      	add	r2, pc, #4	; (adr r2, 8014054 <UART_SetConfig+0x7d4>)
 801404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014052:	bf00      	nop
 8014054:	080140d7 	.word	0x080140d7
 8014058:	08014133 	.word	0x08014133
 801405c:	080140df 	.word	0x080140df
 8014060:	08014133 	.word	0x08014133
 8014064:	08014133 	.word	0x08014133
 8014068:	08014133 	.word	0x08014133
 801406c:	080140ef 	.word	0x080140ef
 8014070:	08014133 	.word	0x08014133
 8014074:	08014133 	.word	0x08014133
 8014078:	08014133 	.word	0x08014133
 801407c:	08014133 	.word	0x08014133
 8014080:	08014133 	.word	0x08014133
 8014084:	08014133 	.word	0x08014133
 8014088:	08014133 	.word	0x08014133
 801408c:	080140ff 	.word	0x080140ff
 8014090:	08014133 	.word	0x08014133
 8014094:	08014133 	.word	0x08014133
 8014098:	08014133 	.word	0x08014133
 801409c:	08014133 	.word	0x08014133
 80140a0:	08014133 	.word	0x08014133
 80140a4:	08014133 	.word	0x08014133
 80140a8:	08014133 	.word	0x08014133
 80140ac:	08014133 	.word	0x08014133
 80140b0:	08014133 	.word	0x08014133
 80140b4:	08014133 	.word	0x08014133
 80140b8:	08014133 	.word	0x08014133
 80140bc:	08014133 	.word	0x08014133
 80140c0:	08014133 	.word	0x08014133
 80140c4:	08014133 	.word	0x08014133
 80140c8:	08014133 	.word	0x08014133
 80140cc:	08014125 	.word	0x08014125
 80140d0:	2b40      	cmp	r3, #64	; 0x40
 80140d2:	d02a      	beq.n	801412a <UART_SetConfig+0x8aa>
 80140d4:	e02d      	b.n	8014132 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80140d6:	f7fb fcdb 	bl	800fa90 <HAL_RCCEx_GetD3PCLK1Freq>
 80140da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80140dc:	e02f      	b.n	801413e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80140de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7fb fcea 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80140e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80140ec:	e027      	b.n	801413e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80140ee:	f107 0318 	add.w	r3, r7, #24
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7fb fe36 	bl	800fd64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80140f8:	69fb      	ldr	r3, [r7, #28]
 80140fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80140fc:	e01f      	b.n	801413e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80140fe:	4b21      	ldr	r3, [pc, #132]	; (8014184 <UART_SetConfig+0x904>)
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	f003 0320 	and.w	r3, r3, #32
 8014106:	2b00      	cmp	r3, #0
 8014108:	d009      	beq.n	801411e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801410a:	4b1e      	ldr	r3, [pc, #120]	; (8014184 <UART_SetConfig+0x904>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	08db      	lsrs	r3, r3, #3
 8014110:	f003 0303 	and.w	r3, r3, #3
 8014114:	4a1d      	ldr	r2, [pc, #116]	; (801418c <UART_SetConfig+0x90c>)
 8014116:	fa22 f303 	lsr.w	r3, r2, r3
 801411a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801411c:	e00f      	b.n	801413e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801411e:	4b1b      	ldr	r3, [pc, #108]	; (801418c <UART_SetConfig+0x90c>)
 8014120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014122:	e00c      	b.n	801413e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014124:	4b1a      	ldr	r3, [pc, #104]	; (8014190 <UART_SetConfig+0x910>)
 8014126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014128:	e009      	b.n	801413e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801412a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801412e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014130:	e005      	b.n	801413e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8014132:	2300      	movs	r3, #0
 8014134:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8014136:	2301      	movs	r3, #1
 8014138:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801413c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801413e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014140:	2b00      	cmp	r3, #0
 8014142:	f000 81ee 	beq.w	8014522 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801414a:	4a12      	ldr	r2, [pc, #72]	; (8014194 <UART_SetConfig+0x914>)
 801414c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014150:	461a      	mov	r2, r3
 8014152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014154:	fbb3 f3f2 	udiv	r3, r3, r2
 8014158:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801415a:	697b      	ldr	r3, [r7, #20]
 801415c:	685a      	ldr	r2, [r3, #4]
 801415e:	4613      	mov	r3, r2
 8014160:	005b      	lsls	r3, r3, #1
 8014162:	4413      	add	r3, r2
 8014164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014166:	429a      	cmp	r2, r3
 8014168:	d305      	bcc.n	8014176 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801416a:	697b      	ldr	r3, [r7, #20]
 801416c:	685b      	ldr	r3, [r3, #4]
 801416e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8014170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014172:	429a      	cmp	r2, r3
 8014174:	d910      	bls.n	8014198 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8014176:	2301      	movs	r3, #1
 8014178:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801417c:	e1d1      	b.n	8014522 <UART_SetConfig+0xca2>
 801417e:	bf00      	nop
 8014180:	40011c00 	.word	0x40011c00
 8014184:	58024400 	.word	0x58024400
 8014188:	58000c00 	.word	0x58000c00
 801418c:	03d09000 	.word	0x03d09000
 8014190:	003d0900 	.word	0x003d0900
 8014194:	08016bf8 	.word	0x08016bf8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801419a:	2200      	movs	r2, #0
 801419c:	60bb      	str	r3, [r7, #8]
 801419e:	60fa      	str	r2, [r7, #12]
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a4:	4ac0      	ldr	r2, [pc, #768]	; (80144a8 <UART_SetConfig+0xc28>)
 80141a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	2200      	movs	r2, #0
 80141ae:	603b      	str	r3, [r7, #0]
 80141b0:	607a      	str	r2, [r7, #4]
 80141b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80141b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80141ba:	f7ec f8a9 	bl	8000310 <__aeabi_uldivmod>
 80141be:	4602      	mov	r2, r0
 80141c0:	460b      	mov	r3, r1
 80141c2:	4610      	mov	r0, r2
 80141c4:	4619      	mov	r1, r3
 80141c6:	f04f 0200 	mov.w	r2, #0
 80141ca:	f04f 0300 	mov.w	r3, #0
 80141ce:	020b      	lsls	r3, r1, #8
 80141d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80141d4:	0202      	lsls	r2, r0, #8
 80141d6:	6979      	ldr	r1, [r7, #20]
 80141d8:	6849      	ldr	r1, [r1, #4]
 80141da:	0849      	lsrs	r1, r1, #1
 80141dc:	2000      	movs	r0, #0
 80141de:	460c      	mov	r4, r1
 80141e0:	4605      	mov	r5, r0
 80141e2:	eb12 0804 	adds.w	r8, r2, r4
 80141e6:	eb43 0905 	adc.w	r9, r3, r5
 80141ea:	697b      	ldr	r3, [r7, #20]
 80141ec:	685b      	ldr	r3, [r3, #4]
 80141ee:	2200      	movs	r2, #0
 80141f0:	469a      	mov	sl, r3
 80141f2:	4693      	mov	fp, r2
 80141f4:	4652      	mov	r2, sl
 80141f6:	465b      	mov	r3, fp
 80141f8:	4640      	mov	r0, r8
 80141fa:	4649      	mov	r1, r9
 80141fc:	f7ec f888 	bl	8000310 <__aeabi_uldivmod>
 8014200:	4602      	mov	r2, r0
 8014202:	460b      	mov	r3, r1
 8014204:	4613      	mov	r3, r2
 8014206:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801420a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801420e:	d308      	bcc.n	8014222 <UART_SetConfig+0x9a2>
 8014210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014216:	d204      	bcs.n	8014222 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801421e:	60da      	str	r2, [r3, #12]
 8014220:	e17f      	b.n	8014522 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8014222:	2301      	movs	r3, #1
 8014224:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014228:	e17b      	b.n	8014522 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	69db      	ldr	r3, [r3, #28]
 801422e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014232:	f040 80bd 	bne.w	80143b0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8014236:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801423a:	2b20      	cmp	r3, #32
 801423c:	dc48      	bgt.n	80142d0 <UART_SetConfig+0xa50>
 801423e:	2b00      	cmp	r3, #0
 8014240:	db7b      	blt.n	801433a <UART_SetConfig+0xaba>
 8014242:	2b20      	cmp	r3, #32
 8014244:	d879      	bhi.n	801433a <UART_SetConfig+0xaba>
 8014246:	a201      	add	r2, pc, #4	; (adr r2, 801424c <UART_SetConfig+0x9cc>)
 8014248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801424c:	080142d7 	.word	0x080142d7
 8014250:	080142df 	.word	0x080142df
 8014254:	0801433b 	.word	0x0801433b
 8014258:	0801433b 	.word	0x0801433b
 801425c:	080142e7 	.word	0x080142e7
 8014260:	0801433b 	.word	0x0801433b
 8014264:	0801433b 	.word	0x0801433b
 8014268:	0801433b 	.word	0x0801433b
 801426c:	080142f7 	.word	0x080142f7
 8014270:	0801433b 	.word	0x0801433b
 8014274:	0801433b 	.word	0x0801433b
 8014278:	0801433b 	.word	0x0801433b
 801427c:	0801433b 	.word	0x0801433b
 8014280:	0801433b 	.word	0x0801433b
 8014284:	0801433b 	.word	0x0801433b
 8014288:	0801433b 	.word	0x0801433b
 801428c:	08014307 	.word	0x08014307
 8014290:	0801433b 	.word	0x0801433b
 8014294:	0801433b 	.word	0x0801433b
 8014298:	0801433b 	.word	0x0801433b
 801429c:	0801433b 	.word	0x0801433b
 80142a0:	0801433b 	.word	0x0801433b
 80142a4:	0801433b 	.word	0x0801433b
 80142a8:	0801433b 	.word	0x0801433b
 80142ac:	0801433b 	.word	0x0801433b
 80142b0:	0801433b 	.word	0x0801433b
 80142b4:	0801433b 	.word	0x0801433b
 80142b8:	0801433b 	.word	0x0801433b
 80142bc:	0801433b 	.word	0x0801433b
 80142c0:	0801433b 	.word	0x0801433b
 80142c4:	0801433b 	.word	0x0801433b
 80142c8:	0801433b 	.word	0x0801433b
 80142cc:	0801432d 	.word	0x0801432d
 80142d0:	2b40      	cmp	r3, #64	; 0x40
 80142d2:	d02e      	beq.n	8014332 <UART_SetConfig+0xab2>
 80142d4:	e031      	b.n	801433a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80142d6:	f7fa f88f 	bl	800e3f8 <HAL_RCC_GetPCLK1Freq>
 80142da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80142dc:	e033      	b.n	8014346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80142de:	f7fa f8a1 	bl	800e424 <HAL_RCC_GetPCLK2Freq>
 80142e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80142e4:	e02f      	b.n	8014346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80142e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80142ea:	4618      	mov	r0, r3
 80142ec:	f7fb fbe6 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80142f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80142f4:	e027      	b.n	8014346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80142f6:	f107 0318 	add.w	r3, r7, #24
 80142fa:	4618      	mov	r0, r3
 80142fc:	f7fb fd32 	bl	800fd64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014300:	69fb      	ldr	r3, [r7, #28]
 8014302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014304:	e01f      	b.n	8014346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014306:	4b69      	ldr	r3, [pc, #420]	; (80144ac <UART_SetConfig+0xc2c>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	f003 0320 	and.w	r3, r3, #32
 801430e:	2b00      	cmp	r3, #0
 8014310:	d009      	beq.n	8014326 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014312:	4b66      	ldr	r3, [pc, #408]	; (80144ac <UART_SetConfig+0xc2c>)
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	08db      	lsrs	r3, r3, #3
 8014318:	f003 0303 	and.w	r3, r3, #3
 801431c:	4a64      	ldr	r2, [pc, #400]	; (80144b0 <UART_SetConfig+0xc30>)
 801431e:	fa22 f303 	lsr.w	r3, r2, r3
 8014322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014324:	e00f      	b.n	8014346 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8014326:	4b62      	ldr	r3, [pc, #392]	; (80144b0 <UART_SetConfig+0xc30>)
 8014328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801432a:	e00c      	b.n	8014346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801432c:	4b61      	ldr	r3, [pc, #388]	; (80144b4 <UART_SetConfig+0xc34>)
 801432e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014330:	e009      	b.n	8014346 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014338:	e005      	b.n	8014346 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801433a:	2300      	movs	r3, #0
 801433c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801433e:	2301      	movs	r3, #1
 8014340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014344:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8014346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014348:	2b00      	cmp	r3, #0
 801434a:	f000 80ea 	beq.w	8014522 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014352:	4a55      	ldr	r2, [pc, #340]	; (80144a8 <UART_SetConfig+0xc28>)
 8014354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014358:	461a      	mov	r2, r3
 801435a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801435c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014360:	005a      	lsls	r2, r3, #1
 8014362:	697b      	ldr	r3, [r7, #20]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	085b      	lsrs	r3, r3, #1
 8014368:	441a      	add	r2, r3
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	685b      	ldr	r3, [r3, #4]
 801436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014372:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014376:	2b0f      	cmp	r3, #15
 8014378:	d916      	bls.n	80143a8 <UART_SetConfig+0xb28>
 801437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014380:	d212      	bcs.n	80143a8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014384:	b29b      	uxth	r3, r3
 8014386:	f023 030f 	bic.w	r3, r3, #15
 801438a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801438c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801438e:	085b      	lsrs	r3, r3, #1
 8014390:	b29b      	uxth	r3, r3
 8014392:	f003 0307 	and.w	r3, r3, #7
 8014396:	b29a      	uxth	r2, r3
 8014398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801439a:	4313      	orrs	r3, r2
 801439c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	681b      	ldr	r3, [r3, #0]
 80143a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80143a4:	60da      	str	r2, [r3, #12]
 80143a6:	e0bc      	b.n	8014522 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80143a8:	2301      	movs	r3, #1
 80143aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80143ae:	e0b8      	b.n	8014522 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80143b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80143b4:	2b20      	cmp	r3, #32
 80143b6:	dc4b      	bgt.n	8014450 <UART_SetConfig+0xbd0>
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	f2c0 8087 	blt.w	80144cc <UART_SetConfig+0xc4c>
 80143be:	2b20      	cmp	r3, #32
 80143c0:	f200 8084 	bhi.w	80144cc <UART_SetConfig+0xc4c>
 80143c4:	a201      	add	r2, pc, #4	; (adr r2, 80143cc <UART_SetConfig+0xb4c>)
 80143c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143ca:	bf00      	nop
 80143cc:	08014457 	.word	0x08014457
 80143d0:	0801445f 	.word	0x0801445f
 80143d4:	080144cd 	.word	0x080144cd
 80143d8:	080144cd 	.word	0x080144cd
 80143dc:	08014467 	.word	0x08014467
 80143e0:	080144cd 	.word	0x080144cd
 80143e4:	080144cd 	.word	0x080144cd
 80143e8:	080144cd 	.word	0x080144cd
 80143ec:	08014477 	.word	0x08014477
 80143f0:	080144cd 	.word	0x080144cd
 80143f4:	080144cd 	.word	0x080144cd
 80143f8:	080144cd 	.word	0x080144cd
 80143fc:	080144cd 	.word	0x080144cd
 8014400:	080144cd 	.word	0x080144cd
 8014404:	080144cd 	.word	0x080144cd
 8014408:	080144cd 	.word	0x080144cd
 801440c:	08014487 	.word	0x08014487
 8014410:	080144cd 	.word	0x080144cd
 8014414:	080144cd 	.word	0x080144cd
 8014418:	080144cd 	.word	0x080144cd
 801441c:	080144cd 	.word	0x080144cd
 8014420:	080144cd 	.word	0x080144cd
 8014424:	080144cd 	.word	0x080144cd
 8014428:	080144cd 	.word	0x080144cd
 801442c:	080144cd 	.word	0x080144cd
 8014430:	080144cd 	.word	0x080144cd
 8014434:	080144cd 	.word	0x080144cd
 8014438:	080144cd 	.word	0x080144cd
 801443c:	080144cd 	.word	0x080144cd
 8014440:	080144cd 	.word	0x080144cd
 8014444:	080144cd 	.word	0x080144cd
 8014448:	080144cd 	.word	0x080144cd
 801444c:	080144bf 	.word	0x080144bf
 8014450:	2b40      	cmp	r3, #64	; 0x40
 8014452:	d037      	beq.n	80144c4 <UART_SetConfig+0xc44>
 8014454:	e03a      	b.n	80144cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014456:	f7f9 ffcf 	bl	800e3f8 <HAL_RCC_GetPCLK1Freq>
 801445a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801445c:	e03c      	b.n	80144d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801445e:	f7f9 ffe1 	bl	800e424 <HAL_RCC_GetPCLK2Freq>
 8014462:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014464:	e038      	b.n	80144d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801446a:	4618      	mov	r0, r3
 801446c:	f7fb fb26 	bl	800fabc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014474:	e030      	b.n	80144d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014476:	f107 0318 	add.w	r3, r7, #24
 801447a:	4618      	mov	r0, r3
 801447c:	f7fb fc72 	bl	800fd64 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014484:	e028      	b.n	80144d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014486:	4b09      	ldr	r3, [pc, #36]	; (80144ac <UART_SetConfig+0xc2c>)
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	f003 0320 	and.w	r3, r3, #32
 801448e:	2b00      	cmp	r3, #0
 8014490:	d012      	beq.n	80144b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014492:	4b06      	ldr	r3, [pc, #24]	; (80144ac <UART_SetConfig+0xc2c>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	08db      	lsrs	r3, r3, #3
 8014498:	f003 0303 	and.w	r3, r3, #3
 801449c:	4a04      	ldr	r2, [pc, #16]	; (80144b0 <UART_SetConfig+0xc30>)
 801449e:	fa22 f303 	lsr.w	r3, r2, r3
 80144a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80144a4:	e018      	b.n	80144d8 <UART_SetConfig+0xc58>
 80144a6:	bf00      	nop
 80144a8:	08016bf8 	.word	0x08016bf8
 80144ac:	58024400 	.word	0x58024400
 80144b0:	03d09000 	.word	0x03d09000
 80144b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80144b8:	4b24      	ldr	r3, [pc, #144]	; (801454c <UART_SetConfig+0xccc>)
 80144ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80144bc:	e00c      	b.n	80144d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80144be:	4b24      	ldr	r3, [pc, #144]	; (8014550 <UART_SetConfig+0xcd0>)
 80144c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80144c2:	e009      	b.n	80144d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80144c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80144c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80144ca:	e005      	b.n	80144d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80144cc:	2300      	movs	r3, #0
 80144ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80144d0:	2301      	movs	r3, #1
 80144d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80144d6:	bf00      	nop
    }

    if (pclk != 0U)
 80144d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d021      	beq.n	8014522 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144e2:	4a1c      	ldr	r2, [pc, #112]	; (8014554 <UART_SetConfig+0xcd4>)
 80144e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144e8:	461a      	mov	r2, r3
 80144ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80144f0:	697b      	ldr	r3, [r7, #20]
 80144f2:	685b      	ldr	r3, [r3, #4]
 80144f4:	085b      	lsrs	r3, r3, #1
 80144f6:	441a      	add	r2, r3
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	685b      	ldr	r3, [r3, #4]
 80144fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8014500:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014504:	2b0f      	cmp	r3, #15
 8014506:	d909      	bls.n	801451c <UART_SetConfig+0xc9c>
 8014508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801450a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801450e:	d205      	bcs.n	801451c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014512:	b29a      	uxth	r2, r3
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	60da      	str	r2, [r3, #12]
 801451a:	e002      	b.n	8014522 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801451c:	2301      	movs	r3, #1
 801451e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	2201      	movs	r2, #1
 8014526:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	2201      	movs	r2, #1
 801452e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	2200      	movs	r2, #0
 8014536:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8014538:	697b      	ldr	r3, [r7, #20]
 801453a:	2200      	movs	r2, #0
 801453c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801453e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8014542:	4618      	mov	r0, r3
 8014544:	3748      	adds	r7, #72	; 0x48
 8014546:	46bd      	mov	sp, r7
 8014548:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801454c:	03d09000 	.word	0x03d09000
 8014550:	003d0900 	.word	0x003d0900
 8014554:	08016bf8 	.word	0x08016bf8

08014558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8014558:	b480      	push	{r7}
 801455a:	b083      	sub	sp, #12
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014564:	f003 0301 	and.w	r3, r3, #1
 8014568:	2b00      	cmp	r3, #0
 801456a:	d00a      	beq.n	8014582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	685b      	ldr	r3, [r3, #4]
 8014572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	430a      	orrs	r2, r1
 8014580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014586:	f003 0302 	and.w	r3, r3, #2
 801458a:	2b00      	cmp	r3, #0
 801458c:	d00a      	beq.n	80145a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	430a      	orrs	r2, r1
 80145a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145a8:	f003 0304 	and.w	r3, r3, #4
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d00a      	beq.n	80145c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	430a      	orrs	r2, r1
 80145c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ca:	f003 0308 	and.w	r3, r3, #8
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d00a      	beq.n	80145e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	430a      	orrs	r2, r1
 80145e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ec:	f003 0310 	and.w	r3, r3, #16
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d00a      	beq.n	801460a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	689b      	ldr	r3, [r3, #8]
 80145fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	430a      	orrs	r2, r1
 8014608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801460e:	f003 0320 	and.w	r3, r3, #32
 8014612:	2b00      	cmp	r3, #0
 8014614:	d00a      	beq.n	801462c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	689b      	ldr	r3, [r3, #8]
 801461c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	430a      	orrs	r2, r1
 801462a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014634:	2b00      	cmp	r3, #0
 8014636:	d01a      	beq.n	801466e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	430a      	orrs	r2, r1
 801464c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014656:	d10a      	bne.n	801466e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	685b      	ldr	r3, [r3, #4]
 801465e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	430a      	orrs	r2, r1
 801466c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014676:	2b00      	cmp	r3, #0
 8014678:	d00a      	beq.n	8014690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	430a      	orrs	r2, r1
 801468e:	605a      	str	r2, [r3, #4]
  }
}
 8014690:	bf00      	nop
 8014692:	370c      	adds	r7, #12
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr

0801469c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b086      	sub	sp, #24
 80146a0:	af02      	add	r7, sp, #8
 80146a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2200      	movs	r2, #0
 80146a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80146ac:	f7f2 faf0 	bl	8006c90 <HAL_GetTick>
 80146b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	f003 0308 	and.w	r3, r3, #8
 80146bc:	2b08      	cmp	r3, #8
 80146be:	d10e      	bne.n	80146de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80146c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80146c4:	9300      	str	r3, [sp, #0]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2200      	movs	r2, #0
 80146ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80146ce:	6878      	ldr	r0, [r7, #4]
 80146d0:	f000 f82f 	bl	8014732 <UART_WaitOnFlagUntilTimeout>
 80146d4:	4603      	mov	r3, r0
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d001      	beq.n	80146de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80146da:	2303      	movs	r3, #3
 80146dc:	e025      	b.n	801472a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	f003 0304 	and.w	r3, r3, #4
 80146e8:	2b04      	cmp	r3, #4
 80146ea:	d10e      	bne.n	801470a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80146ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80146f0:	9300      	str	r3, [sp, #0]
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	2200      	movs	r2, #0
 80146f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 f819 	bl	8014732 <UART_WaitOnFlagUntilTimeout>
 8014700:	4603      	mov	r3, r0
 8014702:	2b00      	cmp	r3, #0
 8014704:	d001      	beq.n	801470a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014706:	2303      	movs	r3, #3
 8014708:	e00f      	b.n	801472a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2220      	movs	r2, #32
 801470e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2220      	movs	r2, #32
 8014716:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2200      	movs	r2, #0
 801471e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2200      	movs	r2, #0
 8014724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014728:	2300      	movs	r3, #0
}
 801472a:	4618      	mov	r0, r3
 801472c:	3710      	adds	r7, #16
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}

08014732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014732:	b580      	push	{r7, lr}
 8014734:	b09c      	sub	sp, #112	; 0x70
 8014736:	af00      	add	r7, sp, #0
 8014738:	60f8      	str	r0, [r7, #12]
 801473a:	60b9      	str	r1, [r7, #8]
 801473c:	603b      	str	r3, [r7, #0]
 801473e:	4613      	mov	r3, r2
 8014740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014742:	e0a9      	b.n	8014898 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801474a:	f000 80a5 	beq.w	8014898 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801474e:	f7f2 fa9f 	bl	8006c90 <HAL_GetTick>
 8014752:	4602      	mov	r2, r0
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	1ad3      	subs	r3, r2, r3
 8014758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801475a:	429a      	cmp	r2, r3
 801475c:	d302      	bcc.n	8014764 <UART_WaitOnFlagUntilTimeout+0x32>
 801475e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014760:	2b00      	cmp	r3, #0
 8014762:	d140      	bne.n	80147e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801476a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801476c:	e853 3f00 	ldrex	r3, [r3]
 8014770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014778:	667b      	str	r3, [r7, #100]	; 0x64
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	461a      	mov	r2, r3
 8014780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014784:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801478a:	e841 2300 	strex	r3, r2, [r1]
 801478e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014792:	2b00      	cmp	r3, #0
 8014794:	d1e6      	bne.n	8014764 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	3308      	adds	r3, #8
 801479c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801479e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147a0:	e853 3f00 	ldrex	r3, [r3]
 80147a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80147a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147a8:	f023 0301 	bic.w	r3, r3, #1
 80147ac:	663b      	str	r3, [r7, #96]	; 0x60
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	3308      	adds	r3, #8
 80147b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80147b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80147b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80147bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147be:	e841 2300 	strex	r3, r2, [r1]
 80147c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80147c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d1e5      	bne.n	8014796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80147ca:	68fb      	ldr	r3, [r7, #12]
 80147cc:	2220      	movs	r2, #32
 80147ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	2220      	movs	r2, #32
 80147d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	2200      	movs	r2, #0
 80147de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80147e2:	2303      	movs	r3, #3
 80147e4:	e069      	b.n	80148ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	f003 0304 	and.w	r3, r3, #4
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d051      	beq.n	8014898 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	69db      	ldr	r3, [r3, #28]
 80147fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80147fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014802:	d149      	bne.n	8014898 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014804:	68fb      	ldr	r3, [r7, #12]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801480c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014816:	e853 3f00 	ldrex	r3, [r3]
 801481a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801481e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8014822:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	461a      	mov	r2, r3
 801482a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801482c:	637b      	str	r3, [r7, #52]	; 0x34
 801482e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014830:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014834:	e841 2300 	strex	r3, r2, [r1]
 8014838:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801483a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801483c:	2b00      	cmp	r3, #0
 801483e:	d1e6      	bne.n	801480e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	3308      	adds	r3, #8
 8014846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	e853 3f00 	ldrex	r3, [r3]
 801484e:	613b      	str	r3, [r7, #16]
   return(result);
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	f023 0301 	bic.w	r3, r3, #1
 8014856:	66bb      	str	r3, [r7, #104]	; 0x68
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	3308      	adds	r3, #8
 801485e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014860:	623a      	str	r2, [r7, #32]
 8014862:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014864:	69f9      	ldr	r1, [r7, #28]
 8014866:	6a3a      	ldr	r2, [r7, #32]
 8014868:	e841 2300 	strex	r3, r2, [r1]
 801486c:	61bb      	str	r3, [r7, #24]
   return(result);
 801486e:	69bb      	ldr	r3, [r7, #24]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d1e5      	bne.n	8014840 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	2220      	movs	r2, #32
 8014878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2220      	movs	r2, #32
 8014880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	2220      	movs	r2, #32
 8014888:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	2200      	movs	r2, #0
 8014890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8014894:	2303      	movs	r3, #3
 8014896:	e010      	b.n	80148ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	69da      	ldr	r2, [r3, #28]
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	4013      	ands	r3, r2
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	429a      	cmp	r2, r3
 80148a6:	bf0c      	ite	eq
 80148a8:	2301      	moveq	r3, #1
 80148aa:	2300      	movne	r3, #0
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	461a      	mov	r2, r3
 80148b0:	79fb      	ldrb	r3, [r7, #7]
 80148b2:	429a      	cmp	r2, r3
 80148b4:	f43f af46 	beq.w	8014744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80148b8:	2300      	movs	r3, #0
}
 80148ba:	4618      	mov	r0, r3
 80148bc:	3770      	adds	r7, #112	; 0x70
 80148be:	46bd      	mov	sp, r7
 80148c0:	bd80      	pop	{r7, pc}
	...

080148c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80148c4:	b480      	push	{r7}
 80148c6:	b0a3      	sub	sp, #140	; 0x8c
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	60f8      	str	r0, [r7, #12]
 80148cc:	60b9      	str	r1, [r7, #8]
 80148ce:	4613      	mov	r3, r2
 80148d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	68ba      	ldr	r2, [r7, #8]
 80148d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	88fa      	ldrh	r2, [r7, #6]
 80148dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	88fa      	ldrh	r2, [r7, #6]
 80148e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	2200      	movs	r2, #0
 80148ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	689b      	ldr	r3, [r3, #8]
 80148f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80148f6:	d10e      	bne.n	8014916 <UART_Start_Receive_IT+0x52>
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	691b      	ldr	r3, [r3, #16]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d105      	bne.n	801490c <UART_Start_Receive_IT+0x48>
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f240 12ff 	movw	r2, #511	; 0x1ff
 8014906:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801490a:	e02d      	b.n	8014968 <UART_Start_Receive_IT+0xa4>
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	22ff      	movs	r2, #255	; 0xff
 8014910:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014914:	e028      	b.n	8014968 <UART_Start_Receive_IT+0xa4>
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d10d      	bne.n	801493a <UART_Start_Receive_IT+0x76>
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	691b      	ldr	r3, [r3, #16]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d104      	bne.n	8014930 <UART_Start_Receive_IT+0x6c>
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	22ff      	movs	r2, #255	; 0xff
 801492a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801492e:	e01b      	b.n	8014968 <UART_Start_Receive_IT+0xa4>
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	227f      	movs	r2, #127	; 0x7f
 8014934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014938:	e016      	b.n	8014968 <UART_Start_Receive_IT+0xa4>
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	689b      	ldr	r3, [r3, #8]
 801493e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8014942:	d10d      	bne.n	8014960 <UART_Start_Receive_IT+0x9c>
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	691b      	ldr	r3, [r3, #16]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d104      	bne.n	8014956 <UART_Start_Receive_IT+0x92>
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	227f      	movs	r2, #127	; 0x7f
 8014950:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8014954:	e008      	b.n	8014968 <UART_Start_Receive_IT+0xa4>
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	223f      	movs	r2, #63	; 0x3f
 801495a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801495e:	e003      	b.n	8014968 <UART_Start_Receive_IT+0xa4>
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2200      	movs	r2, #0
 8014964:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	2200      	movs	r2, #0
 801496c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	2222      	movs	r2, #34	; 0x22
 8014974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	3308      	adds	r3, #8
 801497e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014982:	e853 3f00 	ldrex	r3, [r3]
 8014986:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8014988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801498a:	f043 0301 	orr.w	r3, r3, #1
 801498e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	3308      	adds	r3, #8
 8014998:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801499c:	673a      	str	r2, [r7, #112]	; 0x70
 801499e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80149a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80149a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80149a4:	e841 2300 	strex	r3, r2, [r1]
 80149a8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80149aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d1e3      	bne.n	8014978 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80149b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80149b8:	d153      	bne.n	8014a62 <UART_Start_Receive_IT+0x19e>
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80149c0:	88fa      	ldrh	r2, [r7, #6]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d34d      	bcc.n	8014a62 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	689b      	ldr	r3, [r3, #8]
 80149ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80149ce:	d107      	bne.n	80149e0 <UART_Start_Receive_IT+0x11c>
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	691b      	ldr	r3, [r3, #16]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d103      	bne.n	80149e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	4a4b      	ldr	r2, [pc, #300]	; (8014b08 <UART_Start_Receive_IT+0x244>)
 80149dc:	671a      	str	r2, [r3, #112]	; 0x70
 80149de:	e002      	b.n	80149e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	4a4a      	ldr	r2, [pc, #296]	; (8014b0c <UART_Start_Receive_IT+0x248>)
 80149e4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	2200      	movs	r2, #0
 80149ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80149ee:	68fb      	ldr	r3, [r7, #12]
 80149f0:	691b      	ldr	r3, [r3, #16]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d01a      	beq.n	8014a2c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80149fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149fe:	e853 3f00 	ldrex	r3, [r3]
 8014a02:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8014a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014a0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	461a      	mov	r2, r3
 8014a14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014a1a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014a1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014a20:	e841 2300 	strex	r3, r2, [r1]
 8014a24:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8014a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d1e4      	bne.n	80149f6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	3308      	adds	r3, #8
 8014a32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a36:	e853 3f00 	ldrex	r3, [r3]
 8014a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014a42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	3308      	adds	r3, #8
 8014a4a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014a4c:	64ba      	str	r2, [r7, #72]	; 0x48
 8014a4e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014a50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014a54:	e841 2300 	strex	r3, r2, [r1]
 8014a58:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8014a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d1e5      	bne.n	8014a2c <UART_Start_Receive_IT+0x168>
 8014a60:	e04a      	b.n	8014af8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	689b      	ldr	r3, [r3, #8]
 8014a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014a6a:	d107      	bne.n	8014a7c <UART_Start_Receive_IT+0x1b8>
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	691b      	ldr	r3, [r3, #16]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d103      	bne.n	8014a7c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	4a26      	ldr	r2, [pc, #152]	; (8014b10 <UART_Start_Receive_IT+0x24c>)
 8014a78:	671a      	str	r2, [r3, #112]	; 0x70
 8014a7a:	e002      	b.n	8014a82 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	4a25      	ldr	r2, [pc, #148]	; (8014b14 <UART_Start_Receive_IT+0x250>)
 8014a80:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2200      	movs	r2, #0
 8014a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	691b      	ldr	r3, [r3, #16]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d019      	beq.n	8014ac6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8014a92:	68fb      	ldr	r3, [r7, #12]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a9a:	e853 3f00 	ldrex	r3, [r3]
 8014a9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014aa2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8014aa6:	677b      	str	r3, [r7, #116]	; 0x74
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	461a      	mov	r2, r3
 8014aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8014ab2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ab4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014ab8:	e841 2300 	strex	r3, r2, [r1]
 8014abc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d1e6      	bne.n	8014a92 <UART_Start_Receive_IT+0x1ce>
 8014ac4:	e018      	b.n	8014af8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	e853 3f00 	ldrex	r3, [r3]
 8014ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	f043 0320 	orr.w	r3, r3, #32
 8014ada:	67bb      	str	r3, [r7, #120]	; 0x78
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014ae4:	623b      	str	r3, [r7, #32]
 8014ae6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ae8:	69f9      	ldr	r1, [r7, #28]
 8014aea:	6a3a      	ldr	r2, [r7, #32]
 8014aec:	e841 2300 	strex	r3, r2, [r1]
 8014af0:	61bb      	str	r3, [r7, #24]
   return(result);
 8014af2:	69bb      	ldr	r3, [r7, #24]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d1e6      	bne.n	8014ac6 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8014af8:	2300      	movs	r3, #0
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	378c      	adds	r7, #140	; 0x8c
 8014afe:	46bd      	mov	sp, r7
 8014b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b04:	4770      	bx	lr
 8014b06:	bf00      	nop
 8014b08:	08015565 	.word	0x08015565
 8014b0c:	0801526d 	.word	0x0801526d
 8014b10:	0801510b 	.word	0x0801510b
 8014b14:	08014fab 	.word	0x08014fab

08014b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b095      	sub	sp, #84	; 0x54
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b28:	e853 3f00 	ldrex	r3, [r3]
 8014b2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8014b40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014b44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014b46:	e841 2300 	strex	r3, r2, [r1]
 8014b4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d1e6      	bne.n	8014b20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	3308      	adds	r3, #8
 8014b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b5a:	6a3b      	ldr	r3, [r7, #32]
 8014b5c:	e853 3f00 	ldrex	r3, [r3]
 8014b60:	61fb      	str	r3, [r7, #28]
   return(result);
 8014b62:	69fa      	ldr	r2, [r7, #28]
 8014b64:	4b1e      	ldr	r3, [pc, #120]	; (8014be0 <UART_EndRxTransfer+0xc8>)
 8014b66:	4013      	ands	r3, r2
 8014b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	3308      	adds	r3, #8
 8014b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014b72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014b74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014b7a:	e841 2300 	strex	r3, r2, [r1]
 8014b7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d1e5      	bne.n	8014b52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b8a:	2b01      	cmp	r3, #1
 8014b8c:	d118      	bne.n	8014bc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	e853 3f00 	ldrex	r3, [r3]
 8014b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	f023 0310 	bic.w	r3, r3, #16
 8014ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	461a      	mov	r2, r3
 8014baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014bac:	61bb      	str	r3, [r7, #24]
 8014bae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bb0:	6979      	ldr	r1, [r7, #20]
 8014bb2:	69ba      	ldr	r2, [r7, #24]
 8014bb4:	e841 2300 	strex	r3, r2, [r1]
 8014bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d1e6      	bne.n	8014b8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2220      	movs	r2, #32
 8014bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8014bd4:	bf00      	nop
 8014bd6:	3754      	adds	r7, #84	; 0x54
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bde:	4770      	bx	lr
 8014be0:	effffffe 	.word	0xeffffffe

08014be4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b084      	sub	sp, #16
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014c02:	68f8      	ldr	r0, [r7, #12]
 8014c04:	f7fe fe26 	bl	8013854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014c08:	bf00      	nop
 8014c0a:	3710      	adds	r7, #16
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014c10:	b480      	push	{r7}
 8014c12:	b08f      	sub	sp, #60	; 0x3c
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c1e:	2b21      	cmp	r3, #33	; 0x21
 8014c20:	d14c      	bne.n	8014cbc <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014c28:	b29b      	uxth	r3, r3
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d132      	bne.n	8014c94 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c34:	6a3b      	ldr	r3, [r7, #32]
 8014c36:	e853 3f00 	ldrex	r3, [r3]
 8014c3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8014c3c:	69fb      	ldr	r3, [r7, #28]
 8014c3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014c42:	637b      	str	r3, [r7, #52]	; 0x34
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	461a      	mov	r2, r3
 8014c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c4e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014c54:	e841 2300 	strex	r3, r2, [r1]
 8014c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d1e6      	bne.n	8014c2e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	e853 3f00 	ldrex	r3, [r3]
 8014c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014c74:	633b      	str	r3, [r7, #48]	; 0x30
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	681b      	ldr	r3, [r3, #0]
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c7e:	61bb      	str	r3, [r7, #24]
 8014c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c82:	6979      	ldr	r1, [r7, #20]
 8014c84:	69ba      	ldr	r2, [r7, #24]
 8014c86:	e841 2300 	strex	r3, r2, [r1]
 8014c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8014c8c:	693b      	ldr	r3, [r7, #16]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d1e6      	bne.n	8014c60 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8014c92:	e013      	b.n	8014cbc <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c98:	781a      	ldrb	r2, [r3, #0]
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ca4:	1c5a      	adds	r2, r3, #1
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	3b01      	subs	r3, #1
 8014cb4:	b29a      	uxth	r2, r3
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8014cbc:	bf00      	nop
 8014cbe:	373c      	adds	r7, #60	; 0x3c
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr

08014cc8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b091      	sub	sp, #68	; 0x44
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014cd6:	2b21      	cmp	r3, #33	; 0x21
 8014cd8:	d151      	bne.n	8014d7e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014ce0:	b29b      	uxth	r3, r3
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d132      	bne.n	8014d4c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cee:	e853 3f00 	ldrex	r3, [r3]
 8014cf2:	623b      	str	r3, [r7, #32]
   return(result);
 8014cf4:	6a3b      	ldr	r3, [r7, #32]
 8014cf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	461a      	mov	r2, r3
 8014d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d04:	633b      	str	r3, [r7, #48]	; 0x30
 8014d06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d0c:	e841 2300 	strex	r3, r2, [r1]
 8014d10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d1e6      	bne.n	8014ce6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	e853 3f00 	ldrex	r3, [r3]
 8014d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	461a      	mov	r2, r3
 8014d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d36:	61fb      	str	r3, [r7, #28]
 8014d38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d3a:	69b9      	ldr	r1, [r7, #24]
 8014d3c:	69fa      	ldr	r2, [r7, #28]
 8014d3e:	e841 2300 	strex	r3, r2, [r1]
 8014d42:	617b      	str	r3, [r7, #20]
   return(result);
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d1e6      	bne.n	8014d18 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8014d4a:	e018      	b.n	8014d7e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d50:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8014d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d54:	881b      	ldrh	r3, [r3, #0]
 8014d56:	461a      	mov	r2, r3
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	681b      	ldr	r3, [r3, #0]
 8014d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014d60:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d66:	1c9a      	adds	r2, r3, #2
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	3b01      	subs	r3, #1
 8014d76:	b29a      	uxth	r2, r3
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8014d7e:	bf00      	nop
 8014d80:	3744      	adds	r7, #68	; 0x44
 8014d82:	46bd      	mov	sp, r7
 8014d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d88:	4770      	bx	lr

08014d8a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014d8a:	b480      	push	{r7}
 8014d8c:	b091      	sub	sp, #68	; 0x44
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014d98:	2b21      	cmp	r3, #33	; 0x21
 8014d9a:	d160      	bne.n	8014e5e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014da2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014da4:	e057      	b.n	8014e56 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014dac:	b29b      	uxth	r3, r3
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d133      	bne.n	8014e1a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	3308      	adds	r3, #8
 8014db8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dbc:	e853 3f00 	ldrex	r3, [r3]
 8014dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8014dc2:	6a3b      	ldr	r3, [r7, #32]
 8014dc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	3308      	adds	r3, #8
 8014dd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014dd2:	633a      	str	r2, [r7, #48]	; 0x30
 8014dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014dda:	e841 2300 	strex	r3, r2, [r1]
 8014dde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d1e5      	bne.n	8014db2 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	e853 3f00 	ldrex	r3, [r3]
 8014df2:	60fb      	str	r3, [r7, #12]
   return(result);
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	461a      	mov	r2, r3
 8014e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e04:	61fb      	str	r3, [r7, #28]
 8014e06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e08:	69b9      	ldr	r1, [r7, #24]
 8014e0a:	69fa      	ldr	r2, [r7, #28]
 8014e0c:	e841 2300 	strex	r3, r2, [r1]
 8014e10:	617b      	str	r3, [r7, #20]
   return(result);
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d1e6      	bne.n	8014de6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8014e18:	e021      	b.n	8014e5e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	69db      	ldr	r3, [r3, #28]
 8014e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d013      	beq.n	8014e50 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e2c:	781a      	ldrb	r2, [r3, #0]
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e38:	1c5a      	adds	r2, r3, #1
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	3b01      	subs	r3, #1
 8014e48:	b29a      	uxth	r2, r3
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014e50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e52:	3b01      	subs	r3, #1
 8014e54:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014e56:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d1a4      	bne.n	8014da6 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8014e5c:	e7ff      	b.n	8014e5e <UART_TxISR_8BIT_FIFOEN+0xd4>
 8014e5e:	bf00      	nop
 8014e60:	3744      	adds	r7, #68	; 0x44
 8014e62:	46bd      	mov	sp, r7
 8014e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e68:	4770      	bx	lr

08014e6a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014e6a:	b480      	push	{r7}
 8014e6c:	b091      	sub	sp, #68	; 0x44
 8014e6e:	af00      	add	r7, sp, #0
 8014e70:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014e78:	2b21      	cmp	r3, #33	; 0x21
 8014e7a:	d165      	bne.n	8014f48 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014e82:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014e84:	e05c      	b.n	8014f40 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014e8c:	b29b      	uxth	r3, r3
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d133      	bne.n	8014efa <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	3308      	adds	r3, #8
 8014e98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e9a:	6a3b      	ldr	r3, [r7, #32]
 8014e9c:	e853 3f00 	ldrex	r3, [r3]
 8014ea0:	61fb      	str	r3, [r7, #28]
   return(result);
 8014ea2:	69fb      	ldr	r3, [r7, #28]
 8014ea4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	3308      	adds	r3, #8
 8014eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014eba:	e841 2300 	strex	r3, r2, [r1]
 8014ebe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d1e5      	bne.n	8014e92 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ecc:	68fb      	ldr	r3, [r7, #12]
 8014ece:	e853 3f00 	ldrex	r3, [r3]
 8014ed2:	60bb      	str	r3, [r7, #8]
   return(result);
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014eda:	633b      	str	r3, [r7, #48]	; 0x30
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ee4:	61bb      	str	r3, [r7, #24]
 8014ee6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ee8:	6979      	ldr	r1, [r7, #20]
 8014eea:	69ba      	ldr	r2, [r7, #24]
 8014eec:	e841 2300 	strex	r3, r2, [r1]
 8014ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d1e6      	bne.n	8014ec6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8014ef8:	e026      	b.n	8014f48 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	69db      	ldr	r3, [r3, #28]
 8014f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d018      	beq.n	8014f3a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f0c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8014f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f10:	881b      	ldrh	r3, [r3, #0]
 8014f12:	461a      	mov	r2, r3
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	681b      	ldr	r3, [r3, #0]
 8014f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014f1c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f22:	1c9a      	adds	r2, r3, #2
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8014f2e:	b29b      	uxth	r3, r3
 8014f30:	3b01      	subs	r3, #1
 8014f32:	b29a      	uxth	r2, r3
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8014f3a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014f3c:	3b01      	subs	r3, #1
 8014f3e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8014f40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d19f      	bne.n	8014e86 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8014f46:	e7ff      	b.n	8014f48 <UART_TxISR_16BIT_FIFOEN+0xde>
 8014f48:	bf00      	nop
 8014f4a:	3744      	adds	r7, #68	; 0x44
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f52:	4770      	bx	lr

08014f54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014f54:	b580      	push	{r7, lr}
 8014f56:	b088      	sub	sp, #32
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	e853 3f00 	ldrex	r3, [r3]
 8014f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8014f6a:	68bb      	ldr	r3, [r7, #8]
 8014f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014f70:	61fb      	str	r3, [r7, #28]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	461a      	mov	r2, r3
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	61bb      	str	r3, [r7, #24]
 8014f7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f7e:	6979      	ldr	r1, [r7, #20]
 8014f80:	69ba      	ldr	r2, [r7, #24]
 8014f82:	e841 2300 	strex	r3, r2, [r1]
 8014f86:	613b      	str	r3, [r7, #16]
   return(result);
 8014f88:	693b      	ldr	r3, [r7, #16]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d1e6      	bne.n	8014f5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	2220      	movs	r2, #32
 8014f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	2200      	movs	r2, #0
 8014f9a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7fe fc4f 	bl	8013840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014fa2:	bf00      	nop
 8014fa4:	3720      	adds	r7, #32
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}

08014faa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8014faa:	b580      	push	{r7, lr}
 8014fac:	b096      	sub	sp, #88	; 0x58
 8014fae:	af00      	add	r7, sp, #0
 8014fb0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014fb8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014fc2:	2b22      	cmp	r3, #34	; 0x22
 8014fc4:	f040 8095 	bne.w	80150f2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8014fd2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8014fd6:	b2d9      	uxtb	r1, r3
 8014fd8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8014fdc:	b2da      	uxtb	r2, r3
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014fe2:	400a      	ands	r2, r1
 8014fe4:	b2d2      	uxtb	r2, r2
 8014fe6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014fec:	1c5a      	adds	r2, r3, #1
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ff8:	b29b      	uxth	r3, r3
 8014ffa:	3b01      	subs	r3, #1
 8014ffc:	b29a      	uxth	r2, r3
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801500a:	b29b      	uxth	r3, r3
 801500c:	2b00      	cmp	r3, #0
 801500e:	d178      	bne.n	8015102 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015018:	e853 3f00 	ldrex	r3, [r3]
 801501c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801501e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015020:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015024:	653b      	str	r3, [r7, #80]	; 0x50
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	461a      	mov	r2, r3
 801502c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801502e:	647b      	str	r3, [r7, #68]	; 0x44
 8015030:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015032:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015034:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015036:	e841 2300 	strex	r3, r2, [r1]
 801503a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801503c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801503e:	2b00      	cmp	r3, #0
 8015040:	d1e6      	bne.n	8015010 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	3308      	adds	r3, #8
 8015048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504c:	e853 3f00 	ldrex	r3, [r3]
 8015050:	623b      	str	r3, [r7, #32]
   return(result);
 8015052:	6a3b      	ldr	r3, [r7, #32]
 8015054:	f023 0301 	bic.w	r3, r3, #1
 8015058:	64fb      	str	r3, [r7, #76]	; 0x4c
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	3308      	adds	r3, #8
 8015060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015062:	633a      	str	r2, [r7, #48]	; 0x30
 8015064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801506a:	e841 2300 	strex	r3, r2, [r1]
 801506e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015072:	2b00      	cmp	r3, #0
 8015074:	d1e5      	bne.n	8015042 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2220      	movs	r2, #32
 801507a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2200      	movs	r2, #0
 8015082:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015088:	2b01      	cmp	r3, #1
 801508a:	d12e      	bne.n	80150ea <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	2200      	movs	r2, #0
 8015090:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	e853 3f00 	ldrex	r3, [r3]
 801509e:	60fb      	str	r3, [r7, #12]
   return(result);
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	f023 0310 	bic.w	r3, r3, #16
 80150a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	461a      	mov	r2, r3
 80150ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80150b0:	61fb      	str	r3, [r7, #28]
 80150b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80150b4:	69b9      	ldr	r1, [r7, #24]
 80150b6:	69fa      	ldr	r2, [r7, #28]
 80150b8:	e841 2300 	strex	r3, r2, [r1]
 80150bc:	617b      	str	r3, [r7, #20]
   return(result);
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d1e6      	bne.n	8015092 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	69db      	ldr	r3, [r3, #28]
 80150ca:	f003 0310 	and.w	r3, r3, #16
 80150ce:	2b10      	cmp	r3, #16
 80150d0:	d103      	bne.n	80150da <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	2210      	movs	r2, #16
 80150d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80150e0:	4619      	mov	r1, r3
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f7fe fbc0 	bl	8013868 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80150e8:	e00b      	b.n	8015102 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f7ee f99e 	bl	800342c <HAL_UART_RxCpltCallback>
}
 80150f0:	e007      	b.n	8015102 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	699a      	ldr	r2, [r3, #24]
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	f042 0208 	orr.w	r2, r2, #8
 8015100:	619a      	str	r2, [r3, #24]
}
 8015102:	bf00      	nop
 8015104:	3758      	adds	r7, #88	; 0x58
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}

0801510a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801510a:	b580      	push	{r7, lr}
 801510c:	b096      	sub	sp, #88	; 0x58
 801510e:	af00      	add	r7, sp, #0
 8015110:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015118:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015122:	2b22      	cmp	r3, #34	; 0x22
 8015124:	f040 8095 	bne.w	8015252 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	681b      	ldr	r3, [r3, #0]
 801512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801512e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015136:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8015138:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801513c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8015140:	4013      	ands	r3, r2
 8015142:	b29a      	uxth	r2, r3
 8015144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015146:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801514c:	1c9a      	adds	r2, r3, #2
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015158:	b29b      	uxth	r3, r3
 801515a:	3b01      	subs	r3, #1
 801515c:	b29a      	uxth	r2, r3
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801516a:	b29b      	uxth	r3, r3
 801516c:	2b00      	cmp	r3, #0
 801516e:	d178      	bne.n	8015262 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015178:	e853 3f00 	ldrex	r3, [r3]
 801517c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015184:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	461a      	mov	r2, r3
 801518c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801518e:	643b      	str	r3, [r7, #64]	; 0x40
 8015190:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015192:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015194:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015196:	e841 2300 	strex	r3, r2, [r1]
 801519a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d1e6      	bne.n	8015170 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	3308      	adds	r3, #8
 80151a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151aa:	6a3b      	ldr	r3, [r7, #32]
 80151ac:	e853 3f00 	ldrex	r3, [r3]
 80151b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80151b2:	69fb      	ldr	r3, [r7, #28]
 80151b4:	f023 0301 	bic.w	r3, r3, #1
 80151b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	3308      	adds	r3, #8
 80151c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80151c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80151c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80151c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80151c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80151ca:	e841 2300 	strex	r3, r2, [r1]
 80151ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80151d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d1e5      	bne.n	80151a2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2220      	movs	r2, #32
 80151da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	2200      	movs	r2, #0
 80151e2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151e8:	2b01      	cmp	r3, #1
 80151ea:	d12e      	bne.n	801524a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	2200      	movs	r2, #0
 80151f0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80151f8:	68fb      	ldr	r3, [r7, #12]
 80151fa:	e853 3f00 	ldrex	r3, [r3]
 80151fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8015200:	68bb      	ldr	r3, [r7, #8]
 8015202:	f023 0310 	bic.w	r3, r3, #16
 8015206:	647b      	str	r3, [r7, #68]	; 0x44
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	461a      	mov	r2, r3
 801520e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015210:	61bb      	str	r3, [r7, #24]
 8015212:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015214:	6979      	ldr	r1, [r7, #20]
 8015216:	69ba      	ldr	r2, [r7, #24]
 8015218:	e841 2300 	strex	r3, r2, [r1]
 801521c:	613b      	str	r3, [r7, #16]
   return(result);
 801521e:	693b      	ldr	r3, [r7, #16]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d1e6      	bne.n	80151f2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	69db      	ldr	r3, [r3, #28]
 801522a:	f003 0310 	and.w	r3, r3, #16
 801522e:	2b10      	cmp	r3, #16
 8015230:	d103      	bne.n	801523a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	2210      	movs	r2, #16
 8015238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015240:	4619      	mov	r1, r3
 8015242:	6878      	ldr	r0, [r7, #4]
 8015244:	f7fe fb10 	bl	8013868 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015248:	e00b      	b.n	8015262 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801524a:	6878      	ldr	r0, [r7, #4]
 801524c:	f7ee f8ee 	bl	800342c <HAL_UART_RxCpltCallback>
}
 8015250:	e007      	b.n	8015262 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	681b      	ldr	r3, [r3, #0]
 8015256:	699a      	ldr	r2, [r3, #24]
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	f042 0208 	orr.w	r2, r2, #8
 8015260:	619a      	str	r2, [r3, #24]
}
 8015262:	bf00      	nop
 8015264:	3758      	adds	r7, #88	; 0x58
 8015266:	46bd      	mov	sp, r7
 8015268:	bd80      	pop	{r7, pc}
	...

0801526c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b0a6      	sub	sp, #152	; 0x98
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801527a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	69db      	ldr	r3, [r3, #28]
 8015284:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	689b      	ldr	r3, [r3, #8]
 8015298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80152a2:	2b22      	cmp	r3, #34	; 0x22
 80152a4:	f040 814d 	bne.w	8015542 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80152ae:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80152b2:	e0f4      	b.n	801549e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	681b      	ldr	r3, [r3, #0]
 80152b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ba:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80152be:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80152c2:	b2d9      	uxtb	r1, r3
 80152c4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80152c8:	b2da      	uxtb	r2, r3
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80152ce:	400a      	ands	r2, r1
 80152d0:	b2d2      	uxtb	r2, r2
 80152d2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80152d8:	1c5a      	adds	r2, r3, #1
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80152e4:	b29b      	uxth	r3, r3
 80152e6:	3b01      	subs	r3, #1
 80152e8:	b29a      	uxth	r2, r3
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	69db      	ldr	r3, [r3, #28]
 80152f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80152fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80152fe:	f003 0307 	and.w	r3, r3, #7
 8015302:	2b00      	cmp	r3, #0
 8015304:	d053      	beq.n	80153ae <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015306:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801530a:	f003 0301 	and.w	r3, r3, #1
 801530e:	2b00      	cmp	r3, #0
 8015310:	d011      	beq.n	8015336 <UART_RxISR_8BIT_FIFOEN+0xca>
 8015312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801531a:	2b00      	cmp	r3, #0
 801531c:	d00b      	beq.n	8015336 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2201      	movs	r2, #1
 8015324:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801532c:	f043 0201 	orr.w	r2, r3, #1
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015336:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801533a:	f003 0302 	and.w	r3, r3, #2
 801533e:	2b00      	cmp	r3, #0
 8015340:	d011      	beq.n	8015366 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8015342:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015346:	f003 0301 	and.w	r3, r3, #1
 801534a:	2b00      	cmp	r3, #0
 801534c:	d00b      	beq.n	8015366 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	2202      	movs	r2, #2
 8015354:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801535c:	f043 0204 	orr.w	r2, r3, #4
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015366:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801536a:	f003 0304 	and.w	r3, r3, #4
 801536e:	2b00      	cmp	r3, #0
 8015370:	d011      	beq.n	8015396 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8015372:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015376:	f003 0301 	and.w	r3, r3, #1
 801537a:	2b00      	cmp	r3, #0
 801537c:	d00b      	beq.n	8015396 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	2204      	movs	r2, #4
 8015384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801538c:	f043 0202 	orr.w	r2, r3, #2
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801539c:	2b00      	cmp	r3, #0
 801539e:	d006      	beq.n	80153ae <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f7fe fa57 	bl	8013854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	2200      	movs	r2, #0
 80153aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80153b4:	b29b      	uxth	r3, r3
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d171      	bne.n	801549e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80153c2:	e853 3f00 	ldrex	r3, [r3]
 80153c6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80153c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80153ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80153ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	461a      	mov	r2, r3
 80153d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80153dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80153de:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80153e0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80153e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80153e4:	e841 2300 	strex	r3, r2, [r1]
 80153e8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80153ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d1e4      	bne.n	80153ba <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	3308      	adds	r3, #8
 80153f6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80153f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80153fa:	e853 3f00 	ldrex	r3, [r3]
 80153fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015402:	4b56      	ldr	r3, [pc, #344]	; (801555c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8015404:	4013      	ands	r3, r2
 8015406:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	3308      	adds	r3, #8
 801540e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015410:	657a      	str	r2, [r7, #84]	; 0x54
 8015412:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015414:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015416:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015418:	e841 2300 	strex	r3, r2, [r1]
 801541c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801541e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015420:	2b00      	cmp	r3, #0
 8015422:	d1e5      	bne.n	80153f0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2220      	movs	r2, #32
 8015428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	2200      	movs	r2, #0
 8015430:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015436:	2b01      	cmp	r3, #1
 8015438:	d12e      	bne.n	8015498 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	2200      	movs	r2, #0
 801543e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	681b      	ldr	r3, [r3, #0]
 8015444:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015448:	e853 3f00 	ldrex	r3, [r3]
 801544c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015450:	f023 0310 	bic.w	r3, r3, #16
 8015454:	67bb      	str	r3, [r7, #120]	; 0x78
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	461a      	mov	r2, r3
 801545c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801545e:	643b      	str	r3, [r7, #64]	; 0x40
 8015460:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015462:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015466:	e841 2300 	strex	r3, r2, [r1]
 801546a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801546e:	2b00      	cmp	r3, #0
 8015470:	d1e6      	bne.n	8015440 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	69db      	ldr	r3, [r3, #28]
 8015478:	f003 0310 	and.w	r3, r3, #16
 801547c:	2b10      	cmp	r3, #16
 801547e:	d103      	bne.n	8015488 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	2210      	movs	r2, #16
 8015486:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801548e:	4619      	mov	r1, r3
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f7fe f9e9 	bl	8013868 <HAL_UARTEx_RxEventCallback>
 8015496:	e002      	b.n	801549e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f7ed ffc7 	bl	800342c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801549e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d006      	beq.n	80154b4 <UART_RxISR_8BIT_FIFOEN+0x248>
 80154a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80154aa:	f003 0320 	and.w	r3, r3, #32
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f47f af00 	bne.w	80152b4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80154ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80154be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d045      	beq.n	8015552 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80154cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d23e      	bcs.n	8015552 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	3308      	adds	r3, #8
 80154da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80154dc:	6a3b      	ldr	r3, [r7, #32]
 80154de:	e853 3f00 	ldrex	r3, [r3]
 80154e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80154e4:	69fb      	ldr	r3, [r7, #28]
 80154e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80154ea:	673b      	str	r3, [r7, #112]	; 0x70
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	3308      	adds	r3, #8
 80154f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80154f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80154f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80154f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80154fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154fc:	e841 2300 	strex	r3, r2, [r1]
 8015500:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015504:	2b00      	cmp	r3, #0
 8015506:	d1e5      	bne.n	80154d4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	4a15      	ldr	r2, [pc, #84]	; (8015560 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 801550c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	e853 3f00 	ldrex	r3, [r3]
 801551a:	60bb      	str	r3, [r7, #8]
   return(result);
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	f043 0320 	orr.w	r3, r3, #32
 8015522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	461a      	mov	r2, r3
 801552a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801552c:	61bb      	str	r3, [r7, #24]
 801552e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015530:	6979      	ldr	r1, [r7, #20]
 8015532:	69ba      	ldr	r2, [r7, #24]
 8015534:	e841 2300 	strex	r3, r2, [r1]
 8015538:	613b      	str	r3, [r7, #16]
   return(result);
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d1e6      	bne.n	801550e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015540:	e007      	b.n	8015552 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	699a      	ldr	r2, [r3, #24]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	f042 0208 	orr.w	r2, r2, #8
 8015550:	619a      	str	r2, [r3, #24]
}
 8015552:	bf00      	nop
 8015554:	3798      	adds	r7, #152	; 0x98
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}
 801555a:	bf00      	nop
 801555c:	effffffe 	.word	0xeffffffe
 8015560:	08014fab 	.word	0x08014fab

08015564 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b0a8      	sub	sp, #160	; 0xa0
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015572:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	69db      	ldr	r3, [r3, #28]
 801557c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	689b      	ldr	r3, [r3, #8]
 8015590:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801559a:	2b22      	cmp	r3, #34	; 0x22
 801559c:	f040 8151 	bne.w	8015842 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80155a6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80155aa:	e0f8      	b.n	801579e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155b2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80155be:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80155c2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80155c6:	4013      	ands	r3, r2
 80155c8:	b29a      	uxth	r2, r3
 80155ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80155ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155d4:	1c9a      	adds	r2, r3, #2
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80155e0:	b29b      	uxth	r3, r3
 80155e2:	3b01      	subs	r3, #1
 80155e4:	b29a      	uxth	r2, r3
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	69db      	ldr	r3, [r3, #28]
 80155f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80155f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80155fa:	f003 0307 	and.w	r3, r3, #7
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d053      	beq.n	80156aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015602:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015606:	f003 0301 	and.w	r3, r3, #1
 801560a:	2b00      	cmp	r3, #0
 801560c:	d011      	beq.n	8015632 <UART_RxISR_16BIT_FIFOEN+0xce>
 801560e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8015612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015616:	2b00      	cmp	r3, #0
 8015618:	d00b      	beq.n	8015632 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	2201      	movs	r2, #1
 8015620:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015628:	f043 0201 	orr.w	r2, r3, #1
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015632:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015636:	f003 0302 	and.w	r3, r3, #2
 801563a:	2b00      	cmp	r3, #0
 801563c:	d011      	beq.n	8015662 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801563e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015642:	f003 0301 	and.w	r3, r3, #1
 8015646:	2b00      	cmp	r3, #0
 8015648:	d00b      	beq.n	8015662 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	2202      	movs	r2, #2
 8015650:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015658:	f043 0204 	orr.w	r2, r3, #4
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015662:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015666:	f003 0304 	and.w	r3, r3, #4
 801566a:	2b00      	cmp	r3, #0
 801566c:	d011      	beq.n	8015692 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801566e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015672:	f003 0301 	and.w	r3, r3, #1
 8015676:	2b00      	cmp	r3, #0
 8015678:	d00b      	beq.n	8015692 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	2204      	movs	r2, #4
 8015680:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015688:	f043 0202 	orr.w	r2, r3, #2
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015698:	2b00      	cmp	r3, #0
 801569a:	d006      	beq.n	80156aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	f7fe f8d9 	bl	8013854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	2200      	movs	r2, #0
 80156a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80156b0:	b29b      	uxth	r3, r3
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d173      	bne.n	801579e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80156be:	e853 3f00 	ldrex	r3, [r3]
 80156c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80156c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80156ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	461a      	mov	r2, r3
 80156d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80156d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80156da:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80156de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80156e0:	e841 2300 	strex	r3, r2, [r1]
 80156e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80156e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d1e4      	bne.n	80156b6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	3308      	adds	r3, #8
 80156f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80156f6:	e853 3f00 	ldrex	r3, [r3]
 80156fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80156fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80156fe:	4b57      	ldr	r3, [pc, #348]	; (801585c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8015700:	4013      	ands	r3, r2
 8015702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	3308      	adds	r3, #8
 801570c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015710:	65ba      	str	r2, [r7, #88]	; 0x58
 8015712:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015714:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015716:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015718:	e841 2300 	strex	r3, r2, [r1]
 801571c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801571e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015720:	2b00      	cmp	r3, #0
 8015722:	d1e3      	bne.n	80156ec <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	2220      	movs	r2, #32
 8015728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	2200      	movs	r2, #0
 8015730:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015736:	2b01      	cmp	r3, #1
 8015738:	d12e      	bne.n	8015798 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2200      	movs	r2, #0
 801573e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015748:	e853 3f00 	ldrex	r3, [r3]
 801574c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801574e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015750:	f023 0310 	bic.w	r3, r3, #16
 8015754:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	461a      	mov	r2, r3
 801575c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801575e:	647b      	str	r3, [r7, #68]	; 0x44
 8015760:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015766:	e841 2300 	strex	r3, r2, [r1]
 801576a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801576c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801576e:	2b00      	cmp	r3, #0
 8015770:	d1e6      	bne.n	8015740 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	69db      	ldr	r3, [r3, #28]
 8015778:	f003 0310 	and.w	r3, r3, #16
 801577c:	2b10      	cmp	r3, #16
 801577e:	d103      	bne.n	8015788 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	2210      	movs	r2, #16
 8015786:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801578e:	4619      	mov	r1, r3
 8015790:	6878      	ldr	r0, [r7, #4]
 8015792:	f7fe f869 	bl	8013868 <HAL_UARTEx_RxEventCallback>
 8015796:	e002      	b.n	801579e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8015798:	6878      	ldr	r0, [r7, #4]
 801579a:	f7ed fe47 	bl	800342c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801579e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d006      	beq.n	80157b4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80157a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80157aa:	f003 0320 	and.w	r3, r3, #32
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	f47f aefc 	bne.w	80155ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80157ba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80157be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d045      	beq.n	8015852 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80157cc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d23e      	bcs.n	8015852 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	3308      	adds	r3, #8
 80157da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157de:	e853 3f00 	ldrex	r3, [r3]
 80157e2:	623b      	str	r3, [r7, #32]
   return(result);
 80157e4:	6a3b      	ldr	r3, [r7, #32]
 80157e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80157ea:	677b      	str	r3, [r7, #116]	; 0x74
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	3308      	adds	r3, #8
 80157f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80157f4:	633a      	str	r2, [r7, #48]	; 0x30
 80157f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80157fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80157fc:	e841 2300 	strex	r3, r2, [r1]
 8015800:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015804:	2b00      	cmp	r3, #0
 8015806:	d1e5      	bne.n	80157d4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	4a15      	ldr	r2, [pc, #84]	; (8015860 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 801580c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015814:	693b      	ldr	r3, [r7, #16]
 8015816:	e853 3f00 	ldrex	r3, [r3]
 801581a:	60fb      	str	r3, [r7, #12]
   return(result);
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	f043 0320 	orr.w	r3, r3, #32
 8015822:	673b      	str	r3, [r7, #112]	; 0x70
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	461a      	mov	r2, r3
 801582a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801582c:	61fb      	str	r3, [r7, #28]
 801582e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015830:	69b9      	ldr	r1, [r7, #24]
 8015832:	69fa      	ldr	r2, [r7, #28]
 8015834:	e841 2300 	strex	r3, r2, [r1]
 8015838:	617b      	str	r3, [r7, #20]
   return(result);
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d1e6      	bne.n	801580e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8015840:	e007      	b.n	8015852 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	699a      	ldr	r2, [r3, #24]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	f042 0208 	orr.w	r2, r2, #8
 8015850:	619a      	str	r2, [r3, #24]
}
 8015852:	bf00      	nop
 8015854:	37a0      	adds	r7, #160	; 0xa0
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}
 801585a:	bf00      	nop
 801585c:	effffffe 	.word	0xeffffffe
 8015860:	0801510b 	.word	0x0801510b

08015864 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8015864:	b480      	push	{r7}
 8015866:	b083      	sub	sp, #12
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801586c:	bf00      	nop
 801586e:	370c      	adds	r7, #12
 8015870:	46bd      	mov	sp, r7
 8015872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015876:	4770      	bx	lr

08015878 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8015878:	b480      	push	{r7}
 801587a:	b083      	sub	sp, #12
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8015880:	bf00      	nop
 8015882:	370c      	adds	r7, #12
 8015884:	46bd      	mov	sp, r7
 8015886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801588a:	4770      	bx	lr

0801588c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801588c:	b480      	push	{r7}
 801588e:	b083      	sub	sp, #12
 8015890:	af00      	add	r7, sp, #0
 8015892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8015894:	bf00      	nop
 8015896:	370c      	adds	r7, #12
 8015898:	46bd      	mov	sp, r7
 801589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589e:	4770      	bx	lr

080158a0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80158a0:	b480      	push	{r7}
 80158a2:	b085      	sub	sp, #20
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80158ae:	2b01      	cmp	r3, #1
 80158b0:	d101      	bne.n	80158b6 <HAL_UARTEx_DisableFifoMode+0x16>
 80158b2:	2302      	movs	r3, #2
 80158b4:	e027      	b.n	8015906 <HAL_UARTEx_DisableFifoMode+0x66>
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	2201      	movs	r2, #1
 80158ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	2224      	movs	r2, #36	; 0x24
 80158c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	f022 0201 	bic.w	r2, r2, #1
 80158dc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80158e4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	2200      	movs	r2, #0
 80158ea:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	68fa      	ldr	r2, [r7, #12]
 80158f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	2220      	movs	r2, #32
 80158f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	2200      	movs	r2, #0
 8015900:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015904:	2300      	movs	r3, #0
}
 8015906:	4618      	mov	r0, r3
 8015908:	3714      	adds	r7, #20
 801590a:	46bd      	mov	sp, r7
 801590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015910:	4770      	bx	lr

08015912 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015912:	b580      	push	{r7, lr}
 8015914:	b084      	sub	sp, #16
 8015916:	af00      	add	r7, sp, #0
 8015918:	6078      	str	r0, [r7, #4]
 801591a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8015922:	2b01      	cmp	r3, #1
 8015924:	d101      	bne.n	801592a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015926:	2302      	movs	r3, #2
 8015928:	e02d      	b.n	8015986 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	2201      	movs	r2, #1
 801592e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	2224      	movs	r2, #36	; 0x24
 8015936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	681b      	ldr	r3, [r3, #0]
 8015946:	681a      	ldr	r2, [r3, #0]
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	f022 0201 	bic.w	r2, r2, #1
 8015950:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	689b      	ldr	r3, [r3, #8]
 8015958:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	681b      	ldr	r3, [r3, #0]
 8015960:	683a      	ldr	r2, [r7, #0]
 8015962:	430a      	orrs	r2, r1
 8015964:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	f000 f850 	bl	8015a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	68fa      	ldr	r2, [r7, #12]
 8015972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	2220      	movs	r2, #32
 8015978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2200      	movs	r2, #0
 8015980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015984:	2300      	movs	r3, #0
}
 8015986:	4618      	mov	r0, r3
 8015988:	3710      	adds	r7, #16
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}

0801598e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801598e:	b580      	push	{r7, lr}
 8015990:	b084      	sub	sp, #16
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
 8015996:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801599e:	2b01      	cmp	r3, #1
 80159a0:	d101      	bne.n	80159a6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80159a2:	2302      	movs	r3, #2
 80159a4:	e02d      	b.n	8015a02 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	2201      	movs	r2, #1
 80159aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2224      	movs	r2, #36	; 0x24
 80159b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	681a      	ldr	r2, [r3, #0]
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	681b      	ldr	r3, [r3, #0]
 80159c8:	f022 0201 	bic.w	r2, r2, #1
 80159cc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	689b      	ldr	r3, [r3, #8]
 80159d4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	683a      	ldr	r2, [r7, #0]
 80159de:	430a      	orrs	r2, r1
 80159e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f000 f812 	bl	8015a0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	68fa      	ldr	r2, [r7, #12]
 80159ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2220      	movs	r2, #32
 80159f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	2200      	movs	r2, #0
 80159fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015a00:	2300      	movs	r3, #0
}
 8015a02:	4618      	mov	r0, r3
 8015a04:	3710      	adds	r7, #16
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bd80      	pop	{r7, pc}
	...

08015a0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015a0c:	b480      	push	{r7}
 8015a0e:	b085      	sub	sp, #20
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015a14:	687b      	ldr	r3, [r7, #4]
 8015a16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d108      	bne.n	8015a2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	2201      	movs	r2, #1
 8015a20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	2201      	movs	r2, #1
 8015a28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015a2c:	e031      	b.n	8015a92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015a2e:	2310      	movs	r3, #16
 8015a30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015a32:	2310      	movs	r3, #16
 8015a34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	689b      	ldr	r3, [r3, #8]
 8015a3c:	0e5b      	lsrs	r3, r3, #25
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	f003 0307 	and.w	r3, r3, #7
 8015a44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	689b      	ldr	r3, [r3, #8]
 8015a4c:	0f5b      	lsrs	r3, r3, #29
 8015a4e:	b2db      	uxtb	r3, r3
 8015a50:	f003 0307 	and.w	r3, r3, #7
 8015a54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015a56:	7bbb      	ldrb	r3, [r7, #14]
 8015a58:	7b3a      	ldrb	r2, [r7, #12]
 8015a5a:	4911      	ldr	r1, [pc, #68]	; (8015aa0 <UARTEx_SetNbDataToProcess+0x94>)
 8015a5c:	5c8a      	ldrb	r2, [r1, r2]
 8015a5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015a62:	7b3a      	ldrb	r2, [r7, #12]
 8015a64:	490f      	ldr	r1, [pc, #60]	; (8015aa4 <UARTEx_SetNbDataToProcess+0x98>)
 8015a66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015a68:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a6c:	b29a      	uxth	r2, r3
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015a74:	7bfb      	ldrb	r3, [r7, #15]
 8015a76:	7b7a      	ldrb	r2, [r7, #13]
 8015a78:	4909      	ldr	r1, [pc, #36]	; (8015aa0 <UARTEx_SetNbDataToProcess+0x94>)
 8015a7a:	5c8a      	ldrb	r2, [r1, r2]
 8015a7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015a80:	7b7a      	ldrb	r2, [r7, #13]
 8015a82:	4908      	ldr	r1, [pc, #32]	; (8015aa4 <UARTEx_SetNbDataToProcess+0x98>)
 8015a84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015a86:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a8a:	b29a      	uxth	r2, r3
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8015a92:	bf00      	nop
 8015a94:	3714      	adds	r7, #20
 8015a96:	46bd      	mov	sp, r7
 8015a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9c:	4770      	bx	lr
 8015a9e:	bf00      	nop
 8015aa0:	08016c10 	.word	0x08016c10
 8015aa4:	08016c18 	.word	0x08016c18

08015aa8 <__errno>:
 8015aa8:	4b01      	ldr	r3, [pc, #4]	; (8015ab0 <__errno+0x8>)
 8015aaa:	6818      	ldr	r0, [r3, #0]
 8015aac:	4770      	bx	lr
 8015aae:	bf00      	nop
 8015ab0:	20000030 	.word	0x20000030

08015ab4 <__libc_init_array>:
 8015ab4:	b570      	push	{r4, r5, r6, lr}
 8015ab6:	4d0d      	ldr	r5, [pc, #52]	; (8015aec <__libc_init_array+0x38>)
 8015ab8:	4c0d      	ldr	r4, [pc, #52]	; (8015af0 <__libc_init_array+0x3c>)
 8015aba:	1b64      	subs	r4, r4, r5
 8015abc:	10a4      	asrs	r4, r4, #2
 8015abe:	2600      	movs	r6, #0
 8015ac0:	42a6      	cmp	r6, r4
 8015ac2:	d109      	bne.n	8015ad8 <__libc_init_array+0x24>
 8015ac4:	4d0b      	ldr	r5, [pc, #44]	; (8015af4 <__libc_init_array+0x40>)
 8015ac6:	4c0c      	ldr	r4, [pc, #48]	; (8015af8 <__libc_init_array+0x44>)
 8015ac8:	f001 f848 	bl	8016b5c <_init>
 8015acc:	1b64      	subs	r4, r4, r5
 8015ace:	10a4      	asrs	r4, r4, #2
 8015ad0:	2600      	movs	r6, #0
 8015ad2:	42a6      	cmp	r6, r4
 8015ad4:	d105      	bne.n	8015ae2 <__libc_init_array+0x2e>
 8015ad6:	bd70      	pop	{r4, r5, r6, pc}
 8015ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8015adc:	4798      	blx	r3
 8015ade:	3601      	adds	r6, #1
 8015ae0:	e7ee      	b.n	8015ac0 <__libc_init_array+0xc>
 8015ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ae6:	4798      	blx	r3
 8015ae8:	3601      	adds	r6, #1
 8015aea:	e7f2      	b.n	8015ad2 <__libc_init_array+0x1e>
 8015aec:	08016e70 	.word	0x08016e70
 8015af0:	08016e70 	.word	0x08016e70
 8015af4:	08016e70 	.word	0x08016e70
 8015af8:	08016e74 	.word	0x08016e74

08015afc <memset>:
 8015afc:	4402      	add	r2, r0
 8015afe:	4603      	mov	r3, r0
 8015b00:	4293      	cmp	r3, r2
 8015b02:	d100      	bne.n	8015b06 <memset+0xa>
 8015b04:	4770      	bx	lr
 8015b06:	f803 1b01 	strb.w	r1, [r3], #1
 8015b0a:	e7f9      	b.n	8015b00 <memset+0x4>
 8015b0c:	0000      	movs	r0, r0
	...

08015b10 <cos>:
 8015b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015b12:	eeb0 7b40 	vmov.f64	d7, d0
 8015b16:	ee17 3a90 	vmov	r3, s15
 8015b1a:	4a21      	ldr	r2, [pc, #132]	; (8015ba0 <cos+0x90>)
 8015b1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015b20:	4293      	cmp	r3, r2
 8015b22:	dc06      	bgt.n	8015b32 <cos+0x22>
 8015b24:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8015b98 <cos+0x88>
 8015b28:	b005      	add	sp, #20
 8015b2a:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b2e:	f000 bab7 	b.w	80160a0 <__kernel_cos>
 8015b32:	4a1c      	ldr	r2, [pc, #112]	; (8015ba4 <cos+0x94>)
 8015b34:	4293      	cmp	r3, r2
 8015b36:	dd04      	ble.n	8015b42 <cos+0x32>
 8015b38:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015b3c:	b005      	add	sp, #20
 8015b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8015b42:	4668      	mov	r0, sp
 8015b44:	f000 f964 	bl	8015e10 <__ieee754_rem_pio2>
 8015b48:	f000 0003 	and.w	r0, r0, #3
 8015b4c:	2801      	cmp	r0, #1
 8015b4e:	d009      	beq.n	8015b64 <cos+0x54>
 8015b50:	2802      	cmp	r0, #2
 8015b52:	d010      	beq.n	8015b76 <cos+0x66>
 8015b54:	b9b0      	cbnz	r0, 8015b84 <cos+0x74>
 8015b56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015b5a:	ed9d 0b00 	vldr	d0, [sp]
 8015b5e:	f000 fa9f 	bl	80160a0 <__kernel_cos>
 8015b62:	e7eb      	b.n	8015b3c <cos+0x2c>
 8015b64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015b68:	ed9d 0b00 	vldr	d0, [sp]
 8015b6c:	f000 fd9c 	bl	80166a8 <__kernel_sin>
 8015b70:	eeb1 0b40 	vneg.f64	d0, d0
 8015b74:	e7e2      	b.n	8015b3c <cos+0x2c>
 8015b76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015b7a:	ed9d 0b00 	vldr	d0, [sp]
 8015b7e:	f000 fa8f 	bl	80160a0 <__kernel_cos>
 8015b82:	e7f5      	b.n	8015b70 <cos+0x60>
 8015b84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015b88:	ed9d 0b00 	vldr	d0, [sp]
 8015b8c:	2001      	movs	r0, #1
 8015b8e:	f000 fd8b 	bl	80166a8 <__kernel_sin>
 8015b92:	e7d3      	b.n	8015b3c <cos+0x2c>
 8015b94:	f3af 8000 	nop.w
	...
 8015ba0:	3fe921fb 	.word	0x3fe921fb
 8015ba4:	7fefffff 	.word	0x7fefffff

08015ba8 <sin>:
 8015ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015baa:	eeb0 7b40 	vmov.f64	d7, d0
 8015bae:	ee17 3a90 	vmov	r3, s15
 8015bb2:	4a21      	ldr	r2, [pc, #132]	; (8015c38 <sin+0x90>)
 8015bb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015bb8:	4293      	cmp	r3, r2
 8015bba:	dc07      	bgt.n	8015bcc <sin+0x24>
 8015bbc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8015c30 <sin+0x88>
 8015bc0:	2000      	movs	r0, #0
 8015bc2:	b005      	add	sp, #20
 8015bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015bc8:	f000 bd6e 	b.w	80166a8 <__kernel_sin>
 8015bcc:	4a1b      	ldr	r2, [pc, #108]	; (8015c3c <sin+0x94>)
 8015bce:	4293      	cmp	r3, r2
 8015bd0:	dd04      	ble.n	8015bdc <sin+0x34>
 8015bd2:	ee30 0b40 	vsub.f64	d0, d0, d0
 8015bd6:	b005      	add	sp, #20
 8015bd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015bdc:	4668      	mov	r0, sp
 8015bde:	f000 f917 	bl	8015e10 <__ieee754_rem_pio2>
 8015be2:	f000 0003 	and.w	r0, r0, #3
 8015be6:	2801      	cmp	r0, #1
 8015be8:	d00a      	beq.n	8015c00 <sin+0x58>
 8015bea:	2802      	cmp	r0, #2
 8015bec:	d00f      	beq.n	8015c0e <sin+0x66>
 8015bee:	b9c0      	cbnz	r0, 8015c22 <sin+0x7a>
 8015bf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015bf4:	ed9d 0b00 	vldr	d0, [sp]
 8015bf8:	2001      	movs	r0, #1
 8015bfa:	f000 fd55 	bl	80166a8 <__kernel_sin>
 8015bfe:	e7ea      	b.n	8015bd6 <sin+0x2e>
 8015c00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c04:	ed9d 0b00 	vldr	d0, [sp]
 8015c08:	f000 fa4a 	bl	80160a0 <__kernel_cos>
 8015c0c:	e7e3      	b.n	8015bd6 <sin+0x2e>
 8015c0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c12:	ed9d 0b00 	vldr	d0, [sp]
 8015c16:	2001      	movs	r0, #1
 8015c18:	f000 fd46 	bl	80166a8 <__kernel_sin>
 8015c1c:	eeb1 0b40 	vneg.f64	d0, d0
 8015c20:	e7d9      	b.n	8015bd6 <sin+0x2e>
 8015c22:	ed9d 1b02 	vldr	d1, [sp, #8]
 8015c26:	ed9d 0b00 	vldr	d0, [sp]
 8015c2a:	f000 fa39 	bl	80160a0 <__kernel_cos>
 8015c2e:	e7f5      	b.n	8015c1c <sin+0x74>
	...
 8015c38:	3fe921fb 	.word	0x3fe921fb
 8015c3c:	7fefffff 	.word	0x7fefffff

08015c40 <atan2>:
 8015c40:	f000 b822 	b.w	8015c88 <__ieee754_atan2>
 8015c44:	0000      	movs	r0, r0
	...

08015c48 <sqrt>:
 8015c48:	b508      	push	{r3, lr}
 8015c4a:	ed2d 8b04 	vpush	{d8-d9}
 8015c4e:	eeb0 8b40 	vmov.f64	d8, d0
 8015c52:	f000 fa21 	bl	8016098 <__ieee754_sqrt>
 8015c56:	eeb4 8b48 	vcmp.f64	d8, d8
 8015c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5e:	d60c      	bvs.n	8015c7a <sqrt+0x32>
 8015c60:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8015c80 <sqrt+0x38>
 8015c64:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8015c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c6c:	d505      	bpl.n	8015c7a <sqrt+0x32>
 8015c6e:	f7ff ff1b 	bl	8015aa8 <__errno>
 8015c72:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8015c76:	2321      	movs	r3, #33	; 0x21
 8015c78:	6003      	str	r3, [r0, #0]
 8015c7a:	ecbd 8b04 	vpop	{d8-d9}
 8015c7e:	bd08      	pop	{r3, pc}
	...

08015c88 <__ieee754_atan2>:
 8015c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8015c8e:	ee11 6a10 	vmov	r6, s2
 8015c92:	ee11 0a90 	vmov	r0, s3
 8015c96:	4273      	negs	r3, r6
 8015c98:	4f59      	ldr	r7, [pc, #356]	; (8015e00 <__ieee754_atan2+0x178>)
 8015c9a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8015c9e:	4333      	orrs	r3, r6
 8015ca0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8015ca4:	42bb      	cmp	r3, r7
 8015ca6:	d80d      	bhi.n	8015cc4 <__ieee754_atan2+0x3c>
 8015ca8:	ee10 ca10 	vmov	ip, s0
 8015cac:	ee17 5a90 	vmov	r5, s15
 8015cb0:	f1cc 0100 	rsb	r1, ip, #0
 8015cb4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015cb8:	ea41 010c 	orr.w	r1, r1, ip
 8015cbc:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 8015cc0:	42b9      	cmp	r1, r7
 8015cc2:	d904      	bls.n	8015cce <__ieee754_atan2+0x46>
 8015cc4:	ee37 7b01 	vadd.f64	d7, d7, d1
 8015cc8:	eeb0 0b47 	vmov.f64	d0, d7
 8015ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015cce:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8015cd2:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8015cd6:	4331      	orrs	r1, r6
 8015cd8:	d103      	bne.n	8015ce2 <__ieee754_atan2+0x5a>
 8015cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015cde:	f000 bd3b 	b.w	8016758 <atan>
 8015ce2:	1784      	asrs	r4, r0, #30
 8015ce4:	f004 0402 	and.w	r4, r4, #2
 8015ce8:	ea53 010c 	orrs.w	r1, r3, ip
 8015cec:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8015cf0:	d107      	bne.n	8015d02 <__ieee754_atan2+0x7a>
 8015cf2:	2c02      	cmp	r4, #2
 8015cf4:	d05d      	beq.n	8015db2 <__ieee754_atan2+0x12a>
 8015cf6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8015dc8 <__ieee754_atan2+0x140>
 8015cfa:	2c03      	cmp	r4, #3
 8015cfc:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8015d00:	e7e2      	b.n	8015cc8 <__ieee754_atan2+0x40>
 8015d02:	ea52 0106 	orrs.w	r1, r2, r6
 8015d06:	d107      	bne.n	8015d18 <__ieee754_atan2+0x90>
 8015d08:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8015dd0 <__ieee754_atan2+0x148>
 8015d0c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8015dd8 <__ieee754_atan2+0x150>
 8015d10:	2d00      	cmp	r5, #0
 8015d12:	fe27 7b00 	vselge.f64	d7, d7, d0
 8015d16:	e7d7      	b.n	8015cc8 <__ieee754_atan2+0x40>
 8015d18:	42ba      	cmp	r2, r7
 8015d1a:	d10f      	bne.n	8015d3c <__ieee754_atan2+0xb4>
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015d22:	d107      	bne.n	8015d34 <__ieee754_atan2+0xac>
 8015d24:	2c02      	cmp	r4, #2
 8015d26:	d847      	bhi.n	8015db8 <__ieee754_atan2+0x130>
 8015d28:	4b36      	ldr	r3, [pc, #216]	; (8015e04 <__ieee754_atan2+0x17c>)
 8015d2a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8015d2e:	ed94 7b00 	vldr	d7, [r4]
 8015d32:	e7c9      	b.n	8015cc8 <__ieee754_atan2+0x40>
 8015d34:	2c02      	cmp	r4, #2
 8015d36:	d842      	bhi.n	8015dbe <__ieee754_atan2+0x136>
 8015d38:	4b33      	ldr	r3, [pc, #204]	; (8015e08 <__ieee754_atan2+0x180>)
 8015d3a:	e7f6      	b.n	8015d2a <__ieee754_atan2+0xa2>
 8015d3c:	42bb      	cmp	r3, r7
 8015d3e:	d0e3      	beq.n	8015d08 <__ieee754_atan2+0x80>
 8015d40:	1a9b      	subs	r3, r3, r2
 8015d42:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8015d46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015d4a:	da1a      	bge.n	8015d82 <__ieee754_atan2+0xfa>
 8015d4c:	2800      	cmp	r0, #0
 8015d4e:	da01      	bge.n	8015d54 <__ieee754_atan2+0xcc>
 8015d50:	323c      	adds	r2, #60	; 0x3c
 8015d52:	db19      	blt.n	8015d88 <__ieee754_atan2+0x100>
 8015d54:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8015d58:	f000 fdf8 	bl	801694c <fabs>
 8015d5c:	f000 fcfc 	bl	8016758 <atan>
 8015d60:	eeb0 7b40 	vmov.f64	d7, d0
 8015d64:	2c01      	cmp	r4, #1
 8015d66:	d012      	beq.n	8015d8e <__ieee754_atan2+0x106>
 8015d68:	2c02      	cmp	r4, #2
 8015d6a:	d019      	beq.n	8015da0 <__ieee754_atan2+0x118>
 8015d6c:	2c00      	cmp	r4, #0
 8015d6e:	d0ab      	beq.n	8015cc8 <__ieee754_atan2+0x40>
 8015d70:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8015de0 <__ieee754_atan2+0x158>
 8015d74:	ee37 7b40 	vsub.f64	d7, d7, d0
 8015d78:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8015de8 <__ieee754_atan2+0x160>
 8015d7c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8015d80:	e7a2      	b.n	8015cc8 <__ieee754_atan2+0x40>
 8015d82:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8015dd0 <__ieee754_atan2+0x148>
 8015d86:	e7ed      	b.n	8015d64 <__ieee754_atan2+0xdc>
 8015d88:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8015df0 <__ieee754_atan2+0x168>
 8015d8c:	e7ea      	b.n	8015d64 <__ieee754_atan2+0xdc>
 8015d8e:	ee17 1a90 	vmov	r1, s15
 8015d92:	ec53 2b17 	vmov	r2, r3, d7
 8015d96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015d9a:	ec43 2b17 	vmov	d7, r2, r3
 8015d9e:	e793      	b.n	8015cc8 <__ieee754_atan2+0x40>
 8015da0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8015de0 <__ieee754_atan2+0x158>
 8015da4:	ee37 7b40 	vsub.f64	d7, d7, d0
 8015da8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8015de8 <__ieee754_atan2+0x160>
 8015dac:	ee30 7b47 	vsub.f64	d7, d0, d7
 8015db0:	e78a      	b.n	8015cc8 <__ieee754_atan2+0x40>
 8015db2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8015de8 <__ieee754_atan2+0x160>
 8015db6:	e787      	b.n	8015cc8 <__ieee754_atan2+0x40>
 8015db8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8015df8 <__ieee754_atan2+0x170>
 8015dbc:	e784      	b.n	8015cc8 <__ieee754_atan2+0x40>
 8015dbe:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8015df0 <__ieee754_atan2+0x168>
 8015dc2:	e781      	b.n	8015cc8 <__ieee754_atan2+0x40>
 8015dc4:	f3af 8000 	nop.w
 8015dc8:	54442d18 	.word	0x54442d18
 8015dcc:	c00921fb 	.word	0xc00921fb
 8015dd0:	54442d18 	.word	0x54442d18
 8015dd4:	3ff921fb 	.word	0x3ff921fb
 8015dd8:	54442d18 	.word	0x54442d18
 8015ddc:	bff921fb 	.word	0xbff921fb
 8015de0:	33145c07 	.word	0x33145c07
 8015de4:	3ca1a626 	.word	0x3ca1a626
 8015de8:	54442d18 	.word	0x54442d18
 8015dec:	400921fb 	.word	0x400921fb
	...
 8015df8:	54442d18 	.word	0x54442d18
 8015dfc:	3fe921fb 	.word	0x3fe921fb
 8015e00:	7ff00000 	.word	0x7ff00000
 8015e04:	08016c20 	.word	0x08016c20
 8015e08:	08016c38 	.word	0x08016c38
 8015e0c:	00000000 	.word	0x00000000

08015e10 <__ieee754_rem_pio2>:
 8015e10:	b570      	push	{r4, r5, r6, lr}
 8015e12:	eeb0 7b40 	vmov.f64	d7, d0
 8015e16:	ee17 5a90 	vmov	r5, s15
 8015e1a:	4b99      	ldr	r3, [pc, #612]	; (8016080 <__ieee754_rem_pio2+0x270>)
 8015e1c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015e20:	429e      	cmp	r6, r3
 8015e22:	b088      	sub	sp, #32
 8015e24:	4604      	mov	r4, r0
 8015e26:	dc07      	bgt.n	8015e38 <__ieee754_rem_pio2+0x28>
 8015e28:	2200      	movs	r2, #0
 8015e2a:	2300      	movs	r3, #0
 8015e2c:	ed84 0b00 	vstr	d0, [r4]
 8015e30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015e34:	2000      	movs	r0, #0
 8015e36:	e01b      	b.n	8015e70 <__ieee754_rem_pio2+0x60>
 8015e38:	4b92      	ldr	r3, [pc, #584]	; (8016084 <__ieee754_rem_pio2+0x274>)
 8015e3a:	429e      	cmp	r6, r3
 8015e3c:	dc3b      	bgt.n	8015eb6 <__ieee754_rem_pio2+0xa6>
 8015e3e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8015e42:	2d00      	cmp	r5, #0
 8015e44:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8016040 <__ieee754_rem_pio2+0x230>
 8015e48:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8015e4c:	dd19      	ble.n	8015e82 <__ieee754_rem_pio2+0x72>
 8015e4e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8015e52:	429e      	cmp	r6, r3
 8015e54:	d00e      	beq.n	8015e74 <__ieee754_rem_pio2+0x64>
 8015e56:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8016048 <__ieee754_rem_pio2+0x238>
 8015e5a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8015e5e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015e62:	ed84 5b00 	vstr	d5, [r4]
 8015e66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015e6a:	ed84 7b02 	vstr	d7, [r4, #8]
 8015e6e:	2001      	movs	r0, #1
 8015e70:	b008      	add	sp, #32
 8015e72:	bd70      	pop	{r4, r5, r6, pc}
 8015e74:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8016050 <__ieee754_rem_pio2+0x240>
 8015e78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015e7c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8016058 <__ieee754_rem_pio2+0x248>
 8015e80:	e7eb      	b.n	8015e5a <__ieee754_rem_pio2+0x4a>
 8015e82:	429e      	cmp	r6, r3
 8015e84:	ee30 7b06 	vadd.f64	d7, d0, d6
 8015e88:	d00e      	beq.n	8015ea8 <__ieee754_rem_pio2+0x98>
 8015e8a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8016048 <__ieee754_rem_pio2+0x238>
 8015e8e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8015e92:	ee37 7b45 	vsub.f64	d7, d7, d5
 8015e96:	ed84 5b00 	vstr	d5, [r4]
 8015e9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8015ea2:	ed84 7b02 	vstr	d7, [r4, #8]
 8015ea6:	e7e3      	b.n	8015e70 <__ieee754_rem_pio2+0x60>
 8015ea8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8016050 <__ieee754_rem_pio2+0x240>
 8015eac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8015eb0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8016058 <__ieee754_rem_pio2+0x248>
 8015eb4:	e7eb      	b.n	8015e8e <__ieee754_rem_pio2+0x7e>
 8015eb6:	4b74      	ldr	r3, [pc, #464]	; (8016088 <__ieee754_rem_pio2+0x278>)
 8015eb8:	429e      	cmp	r6, r3
 8015eba:	dc70      	bgt.n	8015f9e <__ieee754_rem_pio2+0x18e>
 8015ebc:	f000 fd46 	bl	801694c <fabs>
 8015ec0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8015ec4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8016060 <__ieee754_rem_pio2+0x250>
 8015ec8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8015ecc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8015ed0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8015ed4:	ee17 0a90 	vmov	r0, s15
 8015ed8:	eeb1 4b45 	vneg.f64	d4, d5
 8015edc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8016040 <__ieee754_rem_pio2+0x230>
 8015ee0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8015ee4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8016048 <__ieee754_rem_pio2+0x238>
 8015ee8:	281f      	cmp	r0, #31
 8015eea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8015eee:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015ef2:	dc08      	bgt.n	8015f06 <__ieee754_rem_pio2+0xf6>
 8015ef4:	4b65      	ldr	r3, [pc, #404]	; (801608c <__ieee754_rem_pio2+0x27c>)
 8015ef6:	1e42      	subs	r2, r0, #1
 8015ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015efc:	42b3      	cmp	r3, r6
 8015efe:	d002      	beq.n	8015f06 <__ieee754_rem_pio2+0xf6>
 8015f00:	ed84 6b00 	vstr	d6, [r4]
 8015f04:	e026      	b.n	8015f54 <__ieee754_rem_pio2+0x144>
 8015f06:	ee16 3a90 	vmov	r3, s13
 8015f0a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015f0e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8015f12:	2b10      	cmp	r3, #16
 8015f14:	ea4f 5226 	mov.w	r2, r6, asr #20
 8015f18:	ddf2      	ble.n	8015f00 <__ieee754_rem_pio2+0xf0>
 8015f1a:	eeb0 6b40 	vmov.f64	d6, d0
 8015f1e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8016050 <__ieee754_rem_pio2+0x240>
 8015f22:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8016058 <__ieee754_rem_pio2+0x248>
 8015f26:	eea4 6b07 	vfma.f64	d6, d4, d7
 8015f2a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015f2e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8015f32:	eeb0 7b40 	vmov.f64	d7, d0
 8015f36:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8015f3a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8015f3e:	ee13 3a90 	vmov	r3, s7
 8015f42:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8015f46:	1ad3      	subs	r3, r2, r3
 8015f48:	2b31      	cmp	r3, #49	; 0x31
 8015f4a:	dc17      	bgt.n	8015f7c <__ieee754_rem_pio2+0x16c>
 8015f4c:	eeb0 0b46 	vmov.f64	d0, d6
 8015f50:	ed84 3b00 	vstr	d3, [r4]
 8015f54:	ed94 6b00 	vldr	d6, [r4]
 8015f58:	2d00      	cmp	r5, #0
 8015f5a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015f5e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8015f62:	ed84 0b02 	vstr	d0, [r4, #8]
 8015f66:	da83      	bge.n	8015e70 <__ieee754_rem_pio2+0x60>
 8015f68:	eeb1 6b46 	vneg.f64	d6, d6
 8015f6c:	eeb1 0b40 	vneg.f64	d0, d0
 8015f70:	ed84 6b00 	vstr	d6, [r4]
 8015f74:	ed84 0b02 	vstr	d0, [r4, #8]
 8015f78:	4240      	negs	r0, r0
 8015f7a:	e779      	b.n	8015e70 <__ieee754_rem_pio2+0x60>
 8015f7c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8016068 <__ieee754_rem_pio2+0x258>
 8015f80:	eeb0 0b46 	vmov.f64	d0, d6
 8015f84:	eea4 0b03 	vfma.f64	d0, d4, d3
 8015f88:	ee36 7b40 	vsub.f64	d7, d6, d0
 8015f8c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8016070 <__ieee754_rem_pio2+0x260>
 8015f90:	eea4 7b03 	vfma.f64	d7, d4, d3
 8015f94:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8015f98:	ee30 6b47 	vsub.f64	d6, d0, d7
 8015f9c:	e7b0      	b.n	8015f00 <__ieee754_rem_pio2+0xf0>
 8015f9e:	4b3c      	ldr	r3, [pc, #240]	; (8016090 <__ieee754_rem_pio2+0x280>)
 8015fa0:	429e      	cmp	r6, r3
 8015fa2:	dd06      	ble.n	8015fb2 <__ieee754_rem_pio2+0x1a2>
 8015fa4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8015fa8:	ed80 7b02 	vstr	d7, [r0, #8]
 8015fac:	ed80 7b00 	vstr	d7, [r0]
 8015fb0:	e740      	b.n	8015e34 <__ieee754_rem_pio2+0x24>
 8015fb2:	1532      	asrs	r2, r6, #20
 8015fb4:	ee10 0a10 	vmov	r0, s0
 8015fb8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8015fbc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8015fc0:	ec41 0b17 	vmov	d7, r0, r1
 8015fc4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015fc8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8016078 <__ieee754_rem_pio2+0x268>
 8015fcc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015fd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015fd4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015fd8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015fdc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8015fe0:	a902      	add	r1, sp, #8
 8015fe2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8015fe6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015fea:	ed8d 6b04 	vstr	d6, [sp, #16]
 8015fee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8015ff2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015ff6:	2603      	movs	r6, #3
 8015ff8:	4608      	mov	r0, r1
 8015ffa:	ed91 7b04 	vldr	d7, [r1, #16]
 8015ffe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016006:	4633      	mov	r3, r6
 8016008:	f1a1 0108 	sub.w	r1, r1, #8
 801600c:	f106 36ff 	add.w	r6, r6, #4294967295
 8016010:	d0f3      	beq.n	8015ffa <__ieee754_rem_pio2+0x1ea>
 8016012:	4920      	ldr	r1, [pc, #128]	; (8016094 <__ieee754_rem_pio2+0x284>)
 8016014:	9101      	str	r1, [sp, #4]
 8016016:	2102      	movs	r1, #2
 8016018:	9100      	str	r1, [sp, #0]
 801601a:	4621      	mov	r1, r4
 801601c:	f000 f8ac 	bl	8016178 <__kernel_rem_pio2>
 8016020:	2d00      	cmp	r5, #0
 8016022:	f6bf af25 	bge.w	8015e70 <__ieee754_rem_pio2+0x60>
 8016026:	ed94 7b00 	vldr	d7, [r4]
 801602a:	eeb1 7b47 	vneg.f64	d7, d7
 801602e:	ed84 7b00 	vstr	d7, [r4]
 8016032:	ed94 7b02 	vldr	d7, [r4, #8]
 8016036:	eeb1 7b47 	vneg.f64	d7, d7
 801603a:	ed84 7b02 	vstr	d7, [r4, #8]
 801603e:	e79b      	b.n	8015f78 <__ieee754_rem_pio2+0x168>
 8016040:	54400000 	.word	0x54400000
 8016044:	3ff921fb 	.word	0x3ff921fb
 8016048:	1a626331 	.word	0x1a626331
 801604c:	3dd0b461 	.word	0x3dd0b461
 8016050:	1a600000 	.word	0x1a600000
 8016054:	3dd0b461 	.word	0x3dd0b461
 8016058:	2e037073 	.word	0x2e037073
 801605c:	3ba3198a 	.word	0x3ba3198a
 8016060:	6dc9c883 	.word	0x6dc9c883
 8016064:	3fe45f30 	.word	0x3fe45f30
 8016068:	2e000000 	.word	0x2e000000
 801606c:	3ba3198a 	.word	0x3ba3198a
 8016070:	252049c1 	.word	0x252049c1
 8016074:	397b839a 	.word	0x397b839a
 8016078:	00000000 	.word	0x00000000
 801607c:	41700000 	.word	0x41700000
 8016080:	3fe921fb 	.word	0x3fe921fb
 8016084:	4002d97b 	.word	0x4002d97b
 8016088:	413921fb 	.word	0x413921fb
 801608c:	08016c50 	.word	0x08016c50
 8016090:	7fefffff 	.word	0x7fefffff
 8016094:	08016cd0 	.word	0x08016cd0

08016098 <__ieee754_sqrt>:
 8016098:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801609c:	4770      	bx	lr
	...

080160a0 <__kernel_cos>:
 80160a0:	ee10 1a90 	vmov	r1, s1
 80160a4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80160a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80160ac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80160b0:	da05      	bge.n	80160be <__kernel_cos+0x1e>
 80160b2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80160b6:	ee17 3a90 	vmov	r3, s15
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d03d      	beq.n	801613a <__kernel_cos+0x9a>
 80160be:	ee20 3b00 	vmul.f64	d3, d0, d0
 80160c2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8016140 <__kernel_cos+0xa0>
 80160c6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8016148 <__kernel_cos+0xa8>
 80160ca:	eea3 6b07 	vfma.f64	d6, d3, d7
 80160ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016150 <__kernel_cos+0xb0>
 80160d2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80160d6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8016158 <__kernel_cos+0xb8>
 80160da:	eea7 6b03 	vfma.f64	d6, d7, d3
 80160de:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016160 <__kernel_cos+0xc0>
 80160e2:	4b23      	ldr	r3, [pc, #140]	; (8016170 <__kernel_cos+0xd0>)
 80160e4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80160e8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8016168 <__kernel_cos+0xc8>
 80160ec:	4299      	cmp	r1, r3
 80160ee:	eea7 6b03 	vfma.f64	d6, d7, d3
 80160f2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80160f6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80160fa:	ee23 7b07 	vmul.f64	d7, d3, d7
 80160fe:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8016102:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016106:	dc04      	bgt.n	8016112 <__kernel_cos+0x72>
 8016108:	ee37 6b46 	vsub.f64	d6, d7, d6
 801610c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8016110:	4770      	bx	lr
 8016112:	4b18      	ldr	r3, [pc, #96]	; (8016174 <__kernel_cos+0xd4>)
 8016114:	4299      	cmp	r1, r3
 8016116:	dc0d      	bgt.n	8016134 <__kernel_cos+0x94>
 8016118:	2200      	movs	r2, #0
 801611a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801611e:	ec43 2b15 	vmov	d5, r2, r3
 8016122:	ee34 0b45 	vsub.f64	d0, d4, d5
 8016126:	ee37 7b45 	vsub.f64	d7, d7, d5
 801612a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801612e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8016132:	4770      	bx	lr
 8016134:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8016138:	e7f3      	b.n	8016122 <__kernel_cos+0x82>
 801613a:	eeb0 0b44 	vmov.f64	d0, d4
 801613e:	4770      	bx	lr
 8016140:	be8838d4 	.word	0xbe8838d4
 8016144:	bda8fae9 	.word	0xbda8fae9
 8016148:	bdb4b1c4 	.word	0xbdb4b1c4
 801614c:	3e21ee9e 	.word	0x3e21ee9e
 8016150:	809c52ad 	.word	0x809c52ad
 8016154:	be927e4f 	.word	0xbe927e4f
 8016158:	19cb1590 	.word	0x19cb1590
 801615c:	3efa01a0 	.word	0x3efa01a0
 8016160:	16c15177 	.word	0x16c15177
 8016164:	bf56c16c 	.word	0xbf56c16c
 8016168:	5555554c 	.word	0x5555554c
 801616c:	3fa55555 	.word	0x3fa55555
 8016170:	3fd33332 	.word	0x3fd33332
 8016174:	3fe90000 	.word	0x3fe90000

08016178 <__kernel_rem_pio2>:
 8016178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801617c:	ed2d 8b06 	vpush	{d8-d10}
 8016180:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8016184:	460f      	mov	r7, r1
 8016186:	9002      	str	r0, [sp, #8]
 8016188:	49c5      	ldr	r1, [pc, #788]	; (80164a0 <__kernel_rem_pio2+0x328>)
 801618a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801618c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8016190:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8016194:	9301      	str	r3, [sp, #4]
 8016196:	f112 0f14 	cmn.w	r2, #20
 801619a:	bfa8      	it	ge
 801619c:	2018      	movge	r0, #24
 801619e:	f103 31ff 	add.w	r1, r3, #4294967295
 80161a2:	bfb8      	it	lt
 80161a4:	2000      	movlt	r0, #0
 80161a6:	f06f 0417 	mvn.w	r4, #23
 80161aa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8016488 <__kernel_rem_pio2+0x310>
 80161ae:	bfa4      	itt	ge
 80161b0:	f1a2 0a03 	subge.w	sl, r2, #3
 80161b4:	fb9a f0f0 	sdivge	r0, sl, r0
 80161b8:	fb00 4404 	mla	r4, r0, r4, r4
 80161bc:	1a46      	subs	r6, r0, r1
 80161be:	4414      	add	r4, r2
 80161c0:	eb09 0c01 	add.w	ip, r9, r1
 80161c4:	ad1a      	add	r5, sp, #104	; 0x68
 80161c6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80161ca:	2200      	movs	r2, #0
 80161cc:	4562      	cmp	r2, ip
 80161ce:	dd10      	ble.n	80161f2 <__kernel_rem_pio2+0x7a>
 80161d0:	9a01      	ldr	r2, [sp, #4]
 80161d2:	ab1a      	add	r3, sp, #104	; 0x68
 80161d4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80161d8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80161dc:	f04f 0c00 	mov.w	ip, #0
 80161e0:	45cc      	cmp	ip, r9
 80161e2:	dc26      	bgt.n	8016232 <__kernel_rem_pio2+0xba>
 80161e4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8016488 <__kernel_rem_pio2+0x310>
 80161e8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80161ec:	4616      	mov	r6, r2
 80161ee:	2500      	movs	r5, #0
 80161f0:	e015      	b.n	801621e <__kernel_rem_pio2+0xa6>
 80161f2:	42d6      	cmn	r6, r2
 80161f4:	d409      	bmi.n	801620a <__kernel_rem_pio2+0x92>
 80161f6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80161fa:	ee07 3a90 	vmov	s15, r3
 80161fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016202:	eca5 7b02 	vstmia	r5!, {d7}
 8016206:	3201      	adds	r2, #1
 8016208:	e7e0      	b.n	80161cc <__kernel_rem_pio2+0x54>
 801620a:	eeb0 7b46 	vmov.f64	d7, d6
 801620e:	e7f8      	b.n	8016202 <__kernel_rem_pio2+0x8a>
 8016210:	ecb8 5b02 	vldmia	r8!, {d5}
 8016214:	ed96 6b00 	vldr	d6, [r6]
 8016218:	3501      	adds	r5, #1
 801621a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801621e:	428d      	cmp	r5, r1
 8016220:	f1a6 0608 	sub.w	r6, r6, #8
 8016224:	ddf4      	ble.n	8016210 <__kernel_rem_pio2+0x98>
 8016226:	ecaa 7b02 	vstmia	sl!, {d7}
 801622a:	f10c 0c01 	add.w	ip, ip, #1
 801622e:	3208      	adds	r2, #8
 8016230:	e7d6      	b.n	80161e0 <__kernel_rem_pio2+0x68>
 8016232:	ab06      	add	r3, sp, #24
 8016234:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8016490 <__kernel_rem_pio2+0x318>
 8016238:	ed9f ab97 	vldr	d10, [pc, #604]	; 8016498 <__kernel_rem_pio2+0x320>
 801623c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8016240:	9303      	str	r3, [sp, #12]
 8016242:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8016246:	464d      	mov	r5, r9
 8016248:	00eb      	lsls	r3, r5, #3
 801624a:	9304      	str	r3, [sp, #16]
 801624c:	ab92      	add	r3, sp, #584	; 0x248
 801624e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8016252:	f10d 0b18 	add.w	fp, sp, #24
 8016256:	ab6a      	add	r3, sp, #424	; 0x1a8
 8016258:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801625c:	465e      	mov	r6, fp
 801625e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8016262:	4628      	mov	r0, r5
 8016264:	2800      	cmp	r0, #0
 8016266:	f1a2 0208 	sub.w	r2, r2, #8
 801626a:	dc4c      	bgt.n	8016306 <__kernel_rem_pio2+0x18e>
 801626c:	4620      	mov	r0, r4
 801626e:	9105      	str	r1, [sp, #20]
 8016270:	f000 fbea 	bl	8016a48 <scalbn>
 8016274:	eeb0 8b40 	vmov.f64	d8, d0
 8016278:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801627c:	ee28 0b00 	vmul.f64	d0, d8, d0
 8016280:	f000 fb6e 	bl	8016960 <floor>
 8016284:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8016288:	eea0 8b47 	vfms.f64	d8, d0, d7
 801628c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8016290:	2c00      	cmp	r4, #0
 8016292:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8016296:	ee17 8a90 	vmov	r8, s15
 801629a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801629e:	9905      	ldr	r1, [sp, #20]
 80162a0:	dd43      	ble.n	801632a <__kernel_rem_pio2+0x1b2>
 80162a2:	1e68      	subs	r0, r5, #1
 80162a4:	ab06      	add	r3, sp, #24
 80162a6:	f1c4 0c18 	rsb	ip, r4, #24
 80162aa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 80162ae:	fa46 f20c 	asr.w	r2, r6, ip
 80162b2:	4490      	add	r8, r2
 80162b4:	fa02 f20c 	lsl.w	r2, r2, ip
 80162b8:	1ab6      	subs	r6, r6, r2
 80162ba:	f1c4 0217 	rsb	r2, r4, #23
 80162be:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80162c2:	4116      	asrs	r6, r2
 80162c4:	2e00      	cmp	r6, #0
 80162c6:	dd3f      	ble.n	8016348 <__kernel_rem_pio2+0x1d0>
 80162c8:	f04f 0c00 	mov.w	ip, #0
 80162cc:	f108 0801 	add.w	r8, r8, #1
 80162d0:	4660      	mov	r0, ip
 80162d2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80162d6:	4565      	cmp	r5, ip
 80162d8:	dc6e      	bgt.n	80163b8 <__kernel_rem_pio2+0x240>
 80162da:	2c00      	cmp	r4, #0
 80162dc:	dd04      	ble.n	80162e8 <__kernel_rem_pio2+0x170>
 80162de:	2c01      	cmp	r4, #1
 80162e0:	d07f      	beq.n	80163e2 <__kernel_rem_pio2+0x26a>
 80162e2:	2c02      	cmp	r4, #2
 80162e4:	f000 8087 	beq.w	80163f6 <__kernel_rem_pio2+0x27e>
 80162e8:	2e02      	cmp	r6, #2
 80162ea:	d12d      	bne.n	8016348 <__kernel_rem_pio2+0x1d0>
 80162ec:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80162f0:	ee30 8b48 	vsub.f64	d8, d0, d8
 80162f4:	b340      	cbz	r0, 8016348 <__kernel_rem_pio2+0x1d0>
 80162f6:	4620      	mov	r0, r4
 80162f8:	9105      	str	r1, [sp, #20]
 80162fa:	f000 fba5 	bl	8016a48 <scalbn>
 80162fe:	9905      	ldr	r1, [sp, #20]
 8016300:	ee38 8b40 	vsub.f64	d8, d8, d0
 8016304:	e020      	b.n	8016348 <__kernel_rem_pio2+0x1d0>
 8016306:	ee20 7b09 	vmul.f64	d7, d0, d9
 801630a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801630e:	3801      	subs	r0, #1
 8016310:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8016314:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8016318:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801631c:	eca6 0a01 	vstmia	r6!, {s0}
 8016320:	ed92 0b00 	vldr	d0, [r2]
 8016324:	ee37 0b00 	vadd.f64	d0, d7, d0
 8016328:	e79c      	b.n	8016264 <__kernel_rem_pio2+0xec>
 801632a:	d105      	bne.n	8016338 <__kernel_rem_pio2+0x1c0>
 801632c:	1e6a      	subs	r2, r5, #1
 801632e:	ab06      	add	r3, sp, #24
 8016330:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8016334:	15f6      	asrs	r6, r6, #23
 8016336:	e7c5      	b.n	80162c4 <__kernel_rem_pio2+0x14c>
 8016338:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801633c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8016340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016344:	da36      	bge.n	80163b4 <__kernel_rem_pio2+0x23c>
 8016346:	2600      	movs	r6, #0
 8016348:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801634c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016350:	f040 80aa 	bne.w	80164a8 <__kernel_rem_pio2+0x330>
 8016354:	f105 3bff 	add.w	fp, r5, #4294967295
 8016358:	4658      	mov	r0, fp
 801635a:	2200      	movs	r2, #0
 801635c:	4548      	cmp	r0, r9
 801635e:	da52      	bge.n	8016406 <__kernel_rem_pio2+0x28e>
 8016360:	2a00      	cmp	r2, #0
 8016362:	f000 8081 	beq.w	8016468 <__kernel_rem_pio2+0x2f0>
 8016366:	ab06      	add	r3, sp, #24
 8016368:	3c18      	subs	r4, #24
 801636a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801636e:	2b00      	cmp	r3, #0
 8016370:	f000 8087 	beq.w	8016482 <__kernel_rem_pio2+0x30a>
 8016374:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016378:	4620      	mov	r0, r4
 801637a:	f000 fb65 	bl	8016a48 <scalbn>
 801637e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8016382:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8016490 <__kernel_rem_pio2+0x318>
 8016386:	a96a      	add	r1, sp, #424	; 0x1a8
 8016388:	f103 0208 	add.w	r2, r3, #8
 801638c:	1888      	adds	r0, r1, r2
 801638e:	4659      	mov	r1, fp
 8016390:	2900      	cmp	r1, #0
 8016392:	f280 80b7 	bge.w	8016504 <__kernel_rem_pio2+0x38c>
 8016396:	4659      	mov	r1, fp
 8016398:	2900      	cmp	r1, #0
 801639a:	f2c0 80d5 	blt.w	8016548 <__kernel_rem_pio2+0x3d0>
 801639e:	a86a      	add	r0, sp, #424	; 0x1a8
 80163a0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80163a4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8016488 <__kernel_rem_pio2+0x310>
 80163a8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80164a4 <__kernel_rem_pio2+0x32c>
 80163ac:	2400      	movs	r4, #0
 80163ae:	ebab 0001 	sub.w	r0, fp, r1
 80163b2:	e0be      	b.n	8016532 <__kernel_rem_pio2+0x3ba>
 80163b4:	2602      	movs	r6, #2
 80163b6:	e787      	b.n	80162c8 <__kernel_rem_pio2+0x150>
 80163b8:	f8db 2000 	ldr.w	r2, [fp]
 80163bc:	b958      	cbnz	r0, 80163d6 <__kernel_rem_pio2+0x25e>
 80163be:	b122      	cbz	r2, 80163ca <__kernel_rem_pio2+0x252>
 80163c0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80163c4:	f8cb 2000 	str.w	r2, [fp]
 80163c8:	2201      	movs	r2, #1
 80163ca:	f10c 0c01 	add.w	ip, ip, #1
 80163ce:	f10b 0b04 	add.w	fp, fp, #4
 80163d2:	4610      	mov	r0, r2
 80163d4:	e77f      	b.n	80162d6 <__kernel_rem_pio2+0x15e>
 80163d6:	ebae 0202 	sub.w	r2, lr, r2
 80163da:	f8cb 2000 	str.w	r2, [fp]
 80163de:	4602      	mov	r2, r0
 80163e0:	e7f3      	b.n	80163ca <__kernel_rem_pio2+0x252>
 80163e2:	f105 3cff 	add.w	ip, r5, #4294967295
 80163e6:	ab06      	add	r3, sp, #24
 80163e8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80163ec:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80163f0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80163f4:	e778      	b.n	80162e8 <__kernel_rem_pio2+0x170>
 80163f6:	f105 3cff 	add.w	ip, r5, #4294967295
 80163fa:	ab06      	add	r3, sp, #24
 80163fc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8016400:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8016404:	e7f4      	b.n	80163f0 <__kernel_rem_pio2+0x278>
 8016406:	ab06      	add	r3, sp, #24
 8016408:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801640c:	3801      	subs	r0, #1
 801640e:	431a      	orrs	r2, r3
 8016410:	e7a4      	b.n	801635c <__kernel_rem_pio2+0x1e4>
 8016412:	f10c 0c01 	add.w	ip, ip, #1
 8016416:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801641a:	2800      	cmp	r0, #0
 801641c:	d0f9      	beq.n	8016412 <__kernel_rem_pio2+0x29a>
 801641e:	9b04      	ldr	r3, [sp, #16]
 8016420:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8016424:	eb0d 0203 	add.w	r2, sp, r3
 8016428:	9b01      	ldr	r3, [sp, #4]
 801642a:	18e8      	adds	r0, r5, r3
 801642c:	ab1a      	add	r3, sp, #104	; 0x68
 801642e:	1c6e      	adds	r6, r5, #1
 8016430:	3a98      	subs	r2, #152	; 0x98
 8016432:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8016436:	4465      	add	r5, ip
 8016438:	42b5      	cmp	r5, r6
 801643a:	f6ff af05 	blt.w	8016248 <__kernel_rem_pio2+0xd0>
 801643e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8016442:	f8dd e008 	ldr.w	lr, [sp, #8]
 8016446:	ee07 3a90 	vmov	s15, r3
 801644a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801644e:	f04f 0c00 	mov.w	ip, #0
 8016452:	eca0 7b02 	vstmia	r0!, {d7}
 8016456:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8016488 <__kernel_rem_pio2+0x310>
 801645a:	4680      	mov	r8, r0
 801645c:	458c      	cmp	ip, r1
 801645e:	dd07      	ble.n	8016470 <__kernel_rem_pio2+0x2f8>
 8016460:	eca2 7b02 	vstmia	r2!, {d7}
 8016464:	3601      	adds	r6, #1
 8016466:	e7e7      	b.n	8016438 <__kernel_rem_pio2+0x2c0>
 8016468:	9a03      	ldr	r2, [sp, #12]
 801646a:	f04f 0c01 	mov.w	ip, #1
 801646e:	e7d2      	b.n	8016416 <__kernel_rem_pio2+0x29e>
 8016470:	ecbe 5b02 	vldmia	lr!, {d5}
 8016474:	ed38 6b02 	vldmdb	r8!, {d6}
 8016478:	f10c 0c01 	add.w	ip, ip, #1
 801647c:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016480:	e7ec      	b.n	801645c <__kernel_rem_pio2+0x2e4>
 8016482:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016486:	e76e      	b.n	8016366 <__kernel_rem_pio2+0x1ee>
	...
 8016494:	3e700000 	.word	0x3e700000
 8016498:	00000000 	.word	0x00000000
 801649c:	41700000 	.word	0x41700000
 80164a0:	08016e18 	.word	0x08016e18
 80164a4:	08016dd8 	.word	0x08016dd8
 80164a8:	4260      	negs	r0, r4
 80164aa:	eeb0 0b48 	vmov.f64	d0, d8
 80164ae:	f000 facb 	bl	8016a48 <scalbn>
 80164b2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8016690 <__kernel_rem_pio2+0x518>
 80164b6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80164ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164be:	db18      	blt.n	80164f2 <__kernel_rem_pio2+0x37a>
 80164c0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8016698 <__kernel_rem_pio2+0x520>
 80164c4:	ee20 7b07 	vmul.f64	d7, d0, d7
 80164c8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80164cc:	aa06      	add	r2, sp, #24
 80164ce:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80164d2:	eea5 0b46 	vfms.f64	d0, d5, d6
 80164d6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80164da:	f105 0b01 	add.w	fp, r5, #1
 80164de:	ee10 3a10 	vmov	r3, s0
 80164e2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80164e6:	ee17 3a10 	vmov	r3, s14
 80164ea:	3418      	adds	r4, #24
 80164ec:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80164f0:	e740      	b.n	8016374 <__kernel_rem_pio2+0x1fc>
 80164f2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80164f6:	aa06      	add	r2, sp, #24
 80164f8:	ee10 3a10 	vmov	r3, s0
 80164fc:	46ab      	mov	fp, r5
 80164fe:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8016502:	e737      	b.n	8016374 <__kernel_rem_pio2+0x1fc>
 8016504:	ac06      	add	r4, sp, #24
 8016506:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801650a:	9401      	str	r4, [sp, #4]
 801650c:	ee07 4a90 	vmov	s15, r4
 8016510:	3901      	subs	r1, #1
 8016512:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016516:	ee27 7b00 	vmul.f64	d7, d7, d0
 801651a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801651e:	ed20 7b02 	vstmdb	r0!, {d7}
 8016522:	e735      	b.n	8016390 <__kernel_rem_pio2+0x218>
 8016524:	ecbc 5b02 	vldmia	ip!, {d5}
 8016528:	ecb5 6b02 	vldmia	r5!, {d6}
 801652c:	3401      	adds	r4, #1
 801652e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016532:	454c      	cmp	r4, r9
 8016534:	dc01      	bgt.n	801653a <__kernel_rem_pio2+0x3c2>
 8016536:	4284      	cmp	r4, r0
 8016538:	ddf4      	ble.n	8016524 <__kernel_rem_pio2+0x3ac>
 801653a:	ac42      	add	r4, sp, #264	; 0x108
 801653c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8016540:	ed80 7b00 	vstr	d7, [r0]
 8016544:	3901      	subs	r1, #1
 8016546:	e727      	b.n	8016398 <__kernel_rem_pio2+0x220>
 8016548:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801654a:	2902      	cmp	r1, #2
 801654c:	dc0a      	bgt.n	8016564 <__kernel_rem_pio2+0x3ec>
 801654e:	2900      	cmp	r1, #0
 8016550:	dc2c      	bgt.n	80165ac <__kernel_rem_pio2+0x434>
 8016552:	d045      	beq.n	80165e0 <__kernel_rem_pio2+0x468>
 8016554:	f008 0007 	and.w	r0, r8, #7
 8016558:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801655c:	ecbd 8b06 	vpop	{d8-d10}
 8016560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016564:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8016566:	2a03      	cmp	r2, #3
 8016568:	d1f4      	bne.n	8016554 <__kernel_rem_pio2+0x3dc>
 801656a:	aa42      	add	r2, sp, #264	; 0x108
 801656c:	4413      	add	r3, r2
 801656e:	461a      	mov	r2, r3
 8016570:	4619      	mov	r1, r3
 8016572:	4658      	mov	r0, fp
 8016574:	2800      	cmp	r0, #0
 8016576:	f1a1 0108 	sub.w	r1, r1, #8
 801657a:	dc54      	bgt.n	8016626 <__kernel_rem_pio2+0x4ae>
 801657c:	4659      	mov	r1, fp
 801657e:	2901      	cmp	r1, #1
 8016580:	f1a2 0208 	sub.w	r2, r2, #8
 8016584:	dc5f      	bgt.n	8016646 <__kernel_rem_pio2+0x4ce>
 8016586:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80166a0 <__kernel_rem_pio2+0x528>
 801658a:	3308      	adds	r3, #8
 801658c:	f1bb 0f01 	cmp.w	fp, #1
 8016590:	dc69      	bgt.n	8016666 <__kernel_rem_pio2+0x4ee>
 8016592:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8016596:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801659a:	2e00      	cmp	r6, #0
 801659c:	d16a      	bne.n	8016674 <__kernel_rem_pio2+0x4fc>
 801659e:	ed87 5b00 	vstr	d5, [r7]
 80165a2:	ed87 6b02 	vstr	d6, [r7, #8]
 80165a6:	ed87 7b04 	vstr	d7, [r7, #16]
 80165aa:	e7d3      	b.n	8016554 <__kernel_rem_pio2+0x3dc>
 80165ac:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80166a0 <__kernel_rem_pio2+0x528>
 80165b0:	ab42      	add	r3, sp, #264	; 0x108
 80165b2:	441a      	add	r2, r3
 80165b4:	465b      	mov	r3, fp
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	da26      	bge.n	8016608 <__kernel_rem_pio2+0x490>
 80165ba:	b35e      	cbz	r6, 8016614 <__kernel_rem_pio2+0x49c>
 80165bc:	eeb1 7b46 	vneg.f64	d7, d6
 80165c0:	ed87 7b00 	vstr	d7, [r7]
 80165c4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80165c8:	aa44      	add	r2, sp, #272	; 0x110
 80165ca:	2301      	movs	r3, #1
 80165cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80165d0:	459b      	cmp	fp, r3
 80165d2:	da22      	bge.n	801661a <__kernel_rem_pio2+0x4a2>
 80165d4:	b10e      	cbz	r6, 80165da <__kernel_rem_pio2+0x462>
 80165d6:	eeb1 7b47 	vneg.f64	d7, d7
 80165da:	ed87 7b02 	vstr	d7, [r7, #8]
 80165de:	e7b9      	b.n	8016554 <__kernel_rem_pio2+0x3dc>
 80165e0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80166a0 <__kernel_rem_pio2+0x528>
 80165e4:	ab42      	add	r3, sp, #264	; 0x108
 80165e6:	441a      	add	r2, r3
 80165e8:	f1bb 0f00 	cmp.w	fp, #0
 80165ec:	da05      	bge.n	80165fa <__kernel_rem_pio2+0x482>
 80165ee:	b10e      	cbz	r6, 80165f4 <__kernel_rem_pio2+0x47c>
 80165f0:	eeb1 7b47 	vneg.f64	d7, d7
 80165f4:	ed87 7b00 	vstr	d7, [r7]
 80165f8:	e7ac      	b.n	8016554 <__kernel_rem_pio2+0x3dc>
 80165fa:	ed32 6b02 	vldmdb	r2!, {d6}
 80165fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016602:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016606:	e7ef      	b.n	80165e8 <__kernel_rem_pio2+0x470>
 8016608:	ed32 7b02 	vldmdb	r2!, {d7}
 801660c:	3b01      	subs	r3, #1
 801660e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016612:	e7d0      	b.n	80165b6 <__kernel_rem_pio2+0x43e>
 8016614:	eeb0 7b46 	vmov.f64	d7, d6
 8016618:	e7d2      	b.n	80165c0 <__kernel_rem_pio2+0x448>
 801661a:	ecb2 6b02 	vldmia	r2!, {d6}
 801661e:	3301      	adds	r3, #1
 8016620:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016624:	e7d4      	b.n	80165d0 <__kernel_rem_pio2+0x458>
 8016626:	ed91 7b00 	vldr	d7, [r1]
 801662a:	ed91 5b02 	vldr	d5, [r1, #8]
 801662e:	3801      	subs	r0, #1
 8016630:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016634:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016638:	ed81 6b00 	vstr	d6, [r1]
 801663c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016640:	ed81 7b02 	vstr	d7, [r1, #8]
 8016644:	e796      	b.n	8016574 <__kernel_rem_pio2+0x3fc>
 8016646:	ed92 7b00 	vldr	d7, [r2]
 801664a:	ed92 5b02 	vldr	d5, [r2, #8]
 801664e:	3901      	subs	r1, #1
 8016650:	ee37 6b05 	vadd.f64	d6, d7, d5
 8016654:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016658:	ed82 6b00 	vstr	d6, [r2]
 801665c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016660:	ed82 7b02 	vstr	d7, [r2, #8]
 8016664:	e78b      	b.n	801657e <__kernel_rem_pio2+0x406>
 8016666:	ed33 6b02 	vldmdb	r3!, {d6}
 801666a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801666e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016672:	e78b      	b.n	801658c <__kernel_rem_pio2+0x414>
 8016674:	eeb1 5b45 	vneg.f64	d5, d5
 8016678:	eeb1 6b46 	vneg.f64	d6, d6
 801667c:	ed87 5b00 	vstr	d5, [r7]
 8016680:	eeb1 7b47 	vneg.f64	d7, d7
 8016684:	ed87 6b02 	vstr	d6, [r7, #8]
 8016688:	e78d      	b.n	80165a6 <__kernel_rem_pio2+0x42e>
 801668a:	bf00      	nop
 801668c:	f3af 8000 	nop.w
 8016690:	00000000 	.word	0x00000000
 8016694:	41700000 	.word	0x41700000
 8016698:	00000000 	.word	0x00000000
 801669c:	3e700000 	.word	0x3e700000
	...

080166a8 <__kernel_sin>:
 80166a8:	ee10 3a90 	vmov	r3, s1
 80166ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80166b0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80166b4:	da04      	bge.n	80166c0 <__kernel_sin+0x18>
 80166b6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80166ba:	ee17 3a90 	vmov	r3, s15
 80166be:	b35b      	cbz	r3, 8016718 <__kernel_sin+0x70>
 80166c0:	ee20 6b00 	vmul.f64	d6, d0, d0
 80166c4:	ee20 5b06 	vmul.f64	d5, d0, d6
 80166c8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8016720 <__kernel_sin+0x78>
 80166cc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016728 <__kernel_sin+0x80>
 80166d0:	eea6 4b07 	vfma.f64	d4, d6, d7
 80166d4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8016730 <__kernel_sin+0x88>
 80166d8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80166dc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016738 <__kernel_sin+0x90>
 80166e0:	eea7 4b06 	vfma.f64	d4, d7, d6
 80166e4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8016740 <__kernel_sin+0x98>
 80166e8:	eea4 7b06 	vfma.f64	d7, d4, d6
 80166ec:	b930      	cbnz	r0, 80166fc <__kernel_sin+0x54>
 80166ee:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8016748 <__kernel_sin+0xa0>
 80166f2:	eea6 4b07 	vfma.f64	d4, d6, d7
 80166f6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80166fa:	4770      	bx	lr
 80166fc:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8016700:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8016704:	eea1 7b04 	vfma.f64	d7, d1, d4
 8016708:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801670c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8016750 <__kernel_sin+0xa8>
 8016710:	eea5 1b07 	vfma.f64	d1, d5, d7
 8016714:	ee30 0b41 	vsub.f64	d0, d0, d1
 8016718:	4770      	bx	lr
 801671a:	bf00      	nop
 801671c:	f3af 8000 	nop.w
 8016720:	5acfd57c 	.word	0x5acfd57c
 8016724:	3de5d93a 	.word	0x3de5d93a
 8016728:	8a2b9ceb 	.word	0x8a2b9ceb
 801672c:	be5ae5e6 	.word	0xbe5ae5e6
 8016730:	57b1fe7d 	.word	0x57b1fe7d
 8016734:	3ec71de3 	.word	0x3ec71de3
 8016738:	19c161d5 	.word	0x19c161d5
 801673c:	bf2a01a0 	.word	0xbf2a01a0
 8016740:	1110f8a6 	.word	0x1110f8a6
 8016744:	3f811111 	.word	0x3f811111
 8016748:	55555549 	.word	0x55555549
 801674c:	bfc55555 	.word	0xbfc55555
 8016750:	55555549 	.word	0x55555549
 8016754:	3fc55555 	.word	0x3fc55555

08016758 <atan>:
 8016758:	b538      	push	{r3, r4, r5, lr}
 801675a:	eeb0 7b40 	vmov.f64	d7, d0
 801675e:	ee17 5a90 	vmov	r5, s15
 8016762:	4b73      	ldr	r3, [pc, #460]	; (8016930 <atan+0x1d8>)
 8016764:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8016768:	429c      	cmp	r4, r3
 801676a:	dd13      	ble.n	8016794 <atan+0x3c>
 801676c:	4b71      	ldr	r3, [pc, #452]	; (8016934 <atan+0x1dc>)
 801676e:	429c      	cmp	r4, r3
 8016770:	dc03      	bgt.n	801677a <atan+0x22>
 8016772:	d107      	bne.n	8016784 <atan+0x2c>
 8016774:	ee10 3a10 	vmov	r3, s0
 8016778:	b123      	cbz	r3, 8016784 <atan+0x2c>
 801677a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801677e:	eeb0 0b47 	vmov.f64	d0, d7
 8016782:	bd38      	pop	{r3, r4, r5, pc}
 8016784:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80168c0 <atan+0x168>
 8016788:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80168c8 <atan+0x170>
 801678c:	2d00      	cmp	r5, #0
 801678e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8016792:	e7f4      	b.n	801677e <atan+0x26>
 8016794:	4b68      	ldr	r3, [pc, #416]	; (8016938 <atan+0x1e0>)
 8016796:	429c      	cmp	r4, r3
 8016798:	dc11      	bgt.n	80167be <atan+0x66>
 801679a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801679e:	429c      	cmp	r4, r3
 80167a0:	dc0a      	bgt.n	80167b8 <atan+0x60>
 80167a2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80167a6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80168d0 <atan+0x178>
 80167aa:	ee30 6b06 	vadd.f64	d6, d0, d6
 80167ae:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80167b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167b6:	dce2      	bgt.n	801677e <atan+0x26>
 80167b8:	f04f 33ff 	mov.w	r3, #4294967295
 80167bc:	e013      	b.n	80167e6 <atan+0x8e>
 80167be:	f000 f8c5 	bl	801694c <fabs>
 80167c2:	4b5e      	ldr	r3, [pc, #376]	; (801693c <atan+0x1e4>)
 80167c4:	429c      	cmp	r4, r3
 80167c6:	dc4f      	bgt.n	8016868 <atan+0x110>
 80167c8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80167cc:	429c      	cmp	r4, r3
 80167ce:	dc41      	bgt.n	8016854 <atan+0xfc>
 80167d0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80167d4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80167d8:	2300      	movs	r3, #0
 80167da:	eea0 6b07 	vfma.f64	d6, d0, d7
 80167de:	ee30 0b07 	vadd.f64	d0, d0, d7
 80167e2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80167e6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80168d8 <atan+0x180>
 80167ea:	ee27 4b07 	vmul.f64	d4, d7, d7
 80167ee:	ee24 5b04 	vmul.f64	d5, d4, d4
 80167f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80168e0 <atan+0x188>
 80167f6:	eea5 3b06 	vfma.f64	d3, d5, d6
 80167fa:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80168e8 <atan+0x190>
 80167fe:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016802:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80168f0 <atan+0x198>
 8016806:	eea6 3b05 	vfma.f64	d3, d6, d5
 801680a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80168f8 <atan+0x1a0>
 801680e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8016812:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8016900 <atan+0x1a8>
 8016816:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8016908 <atan+0x1b0>
 801681a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801681e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016910 <atan+0x1b8>
 8016822:	eea5 2b06 	vfma.f64	d2, d5, d6
 8016826:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016918 <atan+0x1c0>
 801682a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801682e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8016920 <atan+0x1c8>
 8016832:	eea6 2b05 	vfma.f64	d2, d6, d5
 8016836:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8016928 <atan+0x1d0>
 801683a:	1c5a      	adds	r2, r3, #1
 801683c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8016840:	ee26 6b05 	vmul.f64	d6, d6, d5
 8016844:	eea3 6b04 	vfma.f64	d6, d3, d4
 8016848:	ee27 6b06 	vmul.f64	d6, d7, d6
 801684c:	d121      	bne.n	8016892 <atan+0x13a>
 801684e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016852:	e794      	b.n	801677e <atan+0x26>
 8016854:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8016858:	2301      	movs	r3, #1
 801685a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801685e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016862:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016866:	e7be      	b.n	80167e6 <atan+0x8e>
 8016868:	4b35      	ldr	r3, [pc, #212]	; (8016940 <atan+0x1e8>)
 801686a:	429c      	cmp	r4, r3
 801686c:	da0b      	bge.n	8016886 <atan+0x12e>
 801686e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8016872:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016876:	ee30 5b47 	vsub.f64	d5, d0, d7
 801687a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801687e:	2302      	movs	r3, #2
 8016880:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8016884:	e7af      	b.n	80167e6 <atan+0x8e>
 8016886:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801688a:	2303      	movs	r3, #3
 801688c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016890:	e7a9      	b.n	80167e6 <atan+0x8e>
 8016892:	4a2c      	ldr	r2, [pc, #176]	; (8016944 <atan+0x1ec>)
 8016894:	492c      	ldr	r1, [pc, #176]	; (8016948 <atan+0x1f0>)
 8016896:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801689a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801689e:	ed93 5b00 	vldr	d5, [r3]
 80168a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80168a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80168aa:	ed92 6b00 	vldr	d6, [r2]
 80168ae:	2d00      	cmp	r5, #0
 80168b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80168b4:	bfb8      	it	lt
 80168b6:	eeb1 7b47 	vneglt.f64	d7, d7
 80168ba:	e760      	b.n	801677e <atan+0x26>
 80168bc:	f3af 8000 	nop.w
 80168c0:	54442d18 	.word	0x54442d18
 80168c4:	3ff921fb 	.word	0x3ff921fb
 80168c8:	54442d18 	.word	0x54442d18
 80168cc:	bff921fb 	.word	0xbff921fb
 80168d0:	8800759c 	.word	0x8800759c
 80168d4:	7e37e43c 	.word	0x7e37e43c
 80168d8:	e322da11 	.word	0xe322da11
 80168dc:	3f90ad3a 	.word	0x3f90ad3a
 80168e0:	24760deb 	.word	0x24760deb
 80168e4:	3fa97b4b 	.word	0x3fa97b4b
 80168e8:	a0d03d51 	.word	0xa0d03d51
 80168ec:	3fb10d66 	.word	0x3fb10d66
 80168f0:	c54c206e 	.word	0xc54c206e
 80168f4:	3fb745cd 	.word	0x3fb745cd
 80168f8:	920083ff 	.word	0x920083ff
 80168fc:	3fc24924 	.word	0x3fc24924
 8016900:	5555550d 	.word	0x5555550d
 8016904:	3fd55555 	.word	0x3fd55555
 8016908:	52defd9a 	.word	0x52defd9a
 801690c:	bfadde2d 	.word	0xbfadde2d
 8016910:	2c6a6c2f 	.word	0x2c6a6c2f
 8016914:	bfa2b444 	.word	0xbfa2b444
 8016918:	af749a6d 	.word	0xaf749a6d
 801691c:	bfb3b0f2 	.word	0xbfb3b0f2
 8016920:	fe231671 	.word	0xfe231671
 8016924:	bfbc71c6 	.word	0xbfbc71c6
 8016928:	9998ebc4 	.word	0x9998ebc4
 801692c:	bfc99999 	.word	0xbfc99999
 8016930:	440fffff 	.word	0x440fffff
 8016934:	7ff00000 	.word	0x7ff00000
 8016938:	3fdbffff 	.word	0x3fdbffff
 801693c:	3ff2ffff 	.word	0x3ff2ffff
 8016940:	40038000 	.word	0x40038000
 8016944:	08016e28 	.word	0x08016e28
 8016948:	08016e48 	.word	0x08016e48

0801694c <fabs>:
 801694c:	ec51 0b10 	vmov	r0, r1, d0
 8016950:	ee10 2a10 	vmov	r2, s0
 8016954:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016958:	ec43 2b10 	vmov	d0, r2, r3
 801695c:	4770      	bx	lr
	...

08016960 <floor>:
 8016960:	ee10 1a90 	vmov	r1, s1
 8016964:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016968:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801696c:	2b13      	cmp	r3, #19
 801696e:	b530      	push	{r4, r5, lr}
 8016970:	ee10 0a10 	vmov	r0, s0
 8016974:	ee10 5a10 	vmov	r5, s0
 8016978:	dc31      	bgt.n	80169de <floor+0x7e>
 801697a:	2b00      	cmp	r3, #0
 801697c:	da15      	bge.n	80169aa <floor+0x4a>
 801697e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8016a38 <floor+0xd8>
 8016982:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016986:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801698a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801698e:	dd07      	ble.n	80169a0 <floor+0x40>
 8016990:	2900      	cmp	r1, #0
 8016992:	da4e      	bge.n	8016a32 <floor+0xd2>
 8016994:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016998:	4318      	orrs	r0, r3
 801699a:	d001      	beq.n	80169a0 <floor+0x40>
 801699c:	4928      	ldr	r1, [pc, #160]	; (8016a40 <floor+0xe0>)
 801699e:	2000      	movs	r0, #0
 80169a0:	460b      	mov	r3, r1
 80169a2:	4602      	mov	r2, r0
 80169a4:	ec43 2b10 	vmov	d0, r2, r3
 80169a8:	e020      	b.n	80169ec <floor+0x8c>
 80169aa:	4a26      	ldr	r2, [pc, #152]	; (8016a44 <floor+0xe4>)
 80169ac:	411a      	asrs	r2, r3
 80169ae:	ea01 0402 	and.w	r4, r1, r2
 80169b2:	4304      	orrs	r4, r0
 80169b4:	d01a      	beq.n	80169ec <floor+0x8c>
 80169b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8016a38 <floor+0xd8>
 80169ba:	ee30 0b07 	vadd.f64	d0, d0, d7
 80169be:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80169c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169c6:	ddeb      	ble.n	80169a0 <floor+0x40>
 80169c8:	2900      	cmp	r1, #0
 80169ca:	bfbe      	ittt	lt
 80169cc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80169d0:	fa40 f303 	asrlt.w	r3, r0, r3
 80169d4:	18c9      	addlt	r1, r1, r3
 80169d6:	ea21 0102 	bic.w	r1, r1, r2
 80169da:	2000      	movs	r0, #0
 80169dc:	e7e0      	b.n	80169a0 <floor+0x40>
 80169de:	2b33      	cmp	r3, #51	; 0x33
 80169e0:	dd05      	ble.n	80169ee <floor+0x8e>
 80169e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80169e6:	d101      	bne.n	80169ec <floor+0x8c>
 80169e8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80169ec:	bd30      	pop	{r4, r5, pc}
 80169ee:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80169f2:	f04f 32ff 	mov.w	r2, #4294967295
 80169f6:	40e2      	lsrs	r2, r4
 80169f8:	4202      	tst	r2, r0
 80169fa:	d0f7      	beq.n	80169ec <floor+0x8c>
 80169fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8016a38 <floor+0xd8>
 8016a00:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016a04:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8016a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a0c:	ddc8      	ble.n	80169a0 <floor+0x40>
 8016a0e:	2900      	cmp	r1, #0
 8016a10:	da02      	bge.n	8016a18 <floor+0xb8>
 8016a12:	2b14      	cmp	r3, #20
 8016a14:	d103      	bne.n	8016a1e <floor+0xbe>
 8016a16:	3101      	adds	r1, #1
 8016a18:	ea20 0002 	bic.w	r0, r0, r2
 8016a1c:	e7c0      	b.n	80169a0 <floor+0x40>
 8016a1e:	2401      	movs	r4, #1
 8016a20:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016a24:	fa04 f303 	lsl.w	r3, r4, r3
 8016a28:	4418      	add	r0, r3
 8016a2a:	42a8      	cmp	r0, r5
 8016a2c:	bf38      	it	cc
 8016a2e:	1909      	addcc	r1, r1, r4
 8016a30:	e7f2      	b.n	8016a18 <floor+0xb8>
 8016a32:	2000      	movs	r0, #0
 8016a34:	4601      	mov	r1, r0
 8016a36:	e7b3      	b.n	80169a0 <floor+0x40>
 8016a38:	8800759c 	.word	0x8800759c
 8016a3c:	7e37e43c 	.word	0x7e37e43c
 8016a40:	bff00000 	.word	0xbff00000
 8016a44:	000fffff 	.word	0x000fffff

08016a48 <scalbn>:
 8016a48:	ee10 1a90 	vmov	r1, s1
 8016a4c:	b510      	push	{r4, lr}
 8016a4e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8016a52:	b98c      	cbnz	r4, 8016a78 <scalbn+0x30>
 8016a54:	ee10 3a10 	vmov	r3, s0
 8016a58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016a5c:	430b      	orrs	r3, r1
 8016a5e:	d011      	beq.n	8016a84 <scalbn+0x3c>
 8016a60:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8016b28 <scalbn+0xe0>
 8016a64:	4b3c      	ldr	r3, [pc, #240]	; (8016b58 <scalbn+0x110>)
 8016a66:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016a6a:	4298      	cmp	r0, r3
 8016a6c:	da0b      	bge.n	8016a86 <scalbn+0x3e>
 8016a6e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8016b30 <scalbn+0xe8>
 8016a72:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016a76:	e005      	b.n	8016a84 <scalbn+0x3c>
 8016a78:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8016a7c:	429c      	cmp	r4, r3
 8016a7e:	d107      	bne.n	8016a90 <scalbn+0x48>
 8016a80:	ee30 0b00 	vadd.f64	d0, d0, d0
 8016a84:	bd10      	pop	{r4, pc}
 8016a86:	ee10 1a90 	vmov	r1, s1
 8016a8a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8016a8e:	3c36      	subs	r4, #54	; 0x36
 8016a90:	4404      	add	r4, r0
 8016a92:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8016a96:	429c      	cmp	r4, r3
 8016a98:	dd0d      	ble.n	8016ab6 <scalbn+0x6e>
 8016a9a:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8016b38 <scalbn+0xf0>
 8016a9e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8016b40 <scalbn+0xf8>
 8016aa2:	eeb0 6b47 	vmov.f64	d6, d7
 8016aa6:	ee10 3a90 	vmov	r3, s1
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	fe27 7b05 	vselge.f64	d7, d7, d5
 8016ab0:	ee27 0b06 	vmul.f64	d0, d7, d6
 8016ab4:	e7e6      	b.n	8016a84 <scalbn+0x3c>
 8016ab6:	2c00      	cmp	r4, #0
 8016ab8:	dd0a      	ble.n	8016ad0 <scalbn+0x88>
 8016aba:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016abe:	ec53 2b10 	vmov	r2, r3, d0
 8016ac2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016ac6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016aca:	ec43 2b10 	vmov	d0, r2, r3
 8016ace:	e7d9      	b.n	8016a84 <scalbn+0x3c>
 8016ad0:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8016ad4:	da19      	bge.n	8016b0a <scalbn+0xc2>
 8016ad6:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016ada:	4298      	cmp	r0, r3
 8016adc:	ee10 3a90 	vmov	r3, s1
 8016ae0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8016ae4:	dd09      	ble.n	8016afa <scalbn+0xb2>
 8016ae6:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8016b38 <scalbn+0xf0>
 8016aea:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8016b40 <scalbn+0xf8>
 8016aee:	eeb0 7b40 	vmov.f64	d7, d0
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8016af8:	e7bb      	b.n	8016a72 <scalbn+0x2a>
 8016afa:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8016b30 <scalbn+0xe8>
 8016afe:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8016b48 <scalbn+0x100>
 8016b02:	eeb0 7b40 	vmov.f64	d7, d0
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	e7f4      	b.n	8016af4 <scalbn+0xac>
 8016b0a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8016b0e:	ec53 2b10 	vmov	r2, r3, d0
 8016b12:	3436      	adds	r4, #54	; 0x36
 8016b14:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8016b18:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8016b1c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8016b50 <scalbn+0x108>
 8016b20:	ec43 2b10 	vmov	d0, r2, r3
 8016b24:	e7a5      	b.n	8016a72 <scalbn+0x2a>
 8016b26:	bf00      	nop
 8016b28:	00000000 	.word	0x00000000
 8016b2c:	43500000 	.word	0x43500000
 8016b30:	c2f8f359 	.word	0xc2f8f359
 8016b34:	01a56e1f 	.word	0x01a56e1f
 8016b38:	8800759c 	.word	0x8800759c
 8016b3c:	7e37e43c 	.word	0x7e37e43c
 8016b40:	8800759c 	.word	0x8800759c
 8016b44:	fe37e43c 	.word	0xfe37e43c
 8016b48:	c2f8f359 	.word	0xc2f8f359
 8016b4c:	81a56e1f 	.word	0x81a56e1f
 8016b50:	00000000 	.word	0x00000000
 8016b54:	3c900000 	.word	0x3c900000
 8016b58:	ffff3cb0 	.word	0xffff3cb0

08016b5c <_init>:
 8016b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b5e:	bf00      	nop
 8016b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b62:	bc08      	pop	{r3}
 8016b64:	469e      	mov	lr, r3
 8016b66:	4770      	bx	lr

08016b68 <_fini>:
 8016b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b6a:	bf00      	nop
 8016b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b6e:	bc08      	pop	{r3}
 8016b70:	469e      	mov	lr, r3
 8016b72:	4770      	bx	lr
